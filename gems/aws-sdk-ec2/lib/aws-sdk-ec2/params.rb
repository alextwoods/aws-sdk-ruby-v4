# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/awslabs/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

require 'securerandom'

module AWS::SDK::EC2
  # @api private
  module Params

    module AcceleratorCount
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceleratorCount, context: context)
        type = Types::AcceleratorCount.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]
        type.max = params[:max]
        type
      end
    end

    module AcceleratorCountRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceleratorCountRequest, context: context)
        type = Types::AcceleratorCountRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]
        type.max = params[:max]
        type
      end
    end

    module AcceleratorManufacturerSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module AcceleratorNameSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module AcceleratorTotalMemoryMiB
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceleratorTotalMemoryMiB, context: context)
        type = Types::AcceleratorTotalMemoryMiB.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]
        type.max = params[:max]
        type
      end
    end

    module AcceleratorTotalMemoryMiBRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceleratorTotalMemoryMiBRequest, context: context)
        type = Types::AcceleratorTotalMemoryMiBRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]
        type.max = params[:max]
        type
      end
    end

    module AcceleratorTypeSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module AcceptAddressTransferInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceptAddressTransferInput, context: context)
        type = Types::AcceptAddressTransferInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.address = params[:address]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AcceptAddressTransferOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceptAddressTransferOutput, context: context)
        type = Types::AcceptAddressTransferOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.address_transfer = AddressTransfer.build(params[:address_transfer], context: "#{context}[:address_transfer]") unless params[:address_transfer].nil?
        type
      end
    end

    module AcceptReservedInstancesExchangeQuoteInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceptReservedInstancesExchangeQuoteInput, context: context)
        type = Types::AcceptReservedInstancesExchangeQuoteInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.reserved_instance_ids = ReservedInstanceIdSet.build(params[:reserved_instance_ids], context: "#{context}[:reserved_instance_ids]") unless params[:reserved_instance_ids].nil?
        type.target_configurations = TargetConfigurationRequestSet.build(params[:target_configurations], context: "#{context}[:target_configurations]") unless params[:target_configurations].nil?
        type
      end
    end

    module AcceptReservedInstancesExchangeQuoteOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceptReservedInstancesExchangeQuoteOutput, context: context)
        type = Types::AcceptReservedInstancesExchangeQuoteOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.exchange_id = params[:exchange_id]
        type
      end
    end

    module AcceptTransitGatewayMulticastDomainAssociationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceptTransitGatewayMulticastDomainAssociationsInput, context: context)
        type = Types::AcceptTransitGatewayMulticastDomainAssociationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.subnet_ids = ValueStringList.build(params[:subnet_ids], context: "#{context}[:subnet_ids]") unless params[:subnet_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AcceptTransitGatewayMulticastDomainAssociationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceptTransitGatewayMulticastDomainAssociationsOutput, context: context)
        type = Types::AcceptTransitGatewayMulticastDomainAssociationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.associations = TransitGatewayMulticastDomainAssociations.build(params[:associations], context: "#{context}[:associations]") unless params[:associations].nil?
        type
      end
    end

    module AcceptTransitGatewayPeeringAttachmentInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceptTransitGatewayPeeringAttachmentInput, context: context)
        type = Types::AcceptTransitGatewayPeeringAttachmentInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AcceptTransitGatewayPeeringAttachmentOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceptTransitGatewayPeeringAttachmentOutput, context: context)
        type = Types::AcceptTransitGatewayPeeringAttachmentOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_peering_attachment = TransitGatewayPeeringAttachment.build(params[:transit_gateway_peering_attachment], context: "#{context}[:transit_gateway_peering_attachment]") unless params[:transit_gateway_peering_attachment].nil?
        type
      end
    end

    module AcceptTransitGatewayVpcAttachmentInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceptTransitGatewayVpcAttachmentInput, context: context)
        type = Types::AcceptTransitGatewayVpcAttachmentInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AcceptTransitGatewayVpcAttachmentOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceptTransitGatewayVpcAttachmentOutput, context: context)
        type = Types::AcceptTransitGatewayVpcAttachmentOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_vpc_attachment = TransitGatewayVpcAttachment.build(params[:transit_gateway_vpc_attachment], context: "#{context}[:transit_gateway_vpc_attachment]") unless params[:transit_gateway_vpc_attachment].nil?
        type
      end
    end

    module AcceptVpcEndpointConnectionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceptVpcEndpointConnectionsInput, context: context)
        type = Types::AcceptVpcEndpointConnectionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.service_id = params[:service_id]
        type.vpc_endpoint_ids = VpcEndpointIdList.build(params[:vpc_endpoint_ids], context: "#{context}[:vpc_endpoint_ids]") unless params[:vpc_endpoint_ids].nil?
        type
      end
    end

    module AcceptVpcEndpointConnectionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceptVpcEndpointConnectionsOutput, context: context)
        type = Types::AcceptVpcEndpointConnectionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.unsuccessful = UnsuccessfulItemSet.build(params[:unsuccessful], context: "#{context}[:unsuccessful]") unless params[:unsuccessful].nil?
        type
      end
    end

    module AcceptVpcPeeringConnectionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceptVpcPeeringConnectionInput, context: context)
        type = Types::AcceptVpcPeeringConnectionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.vpc_peering_connection_id = params[:vpc_peering_connection_id]
        type
      end
    end

    module AcceptVpcPeeringConnectionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AcceptVpcPeeringConnectionOutput, context: context)
        type = Types::AcceptVpcPeeringConnectionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_peering_connection = VpcPeeringConnection.build(params[:vpc_peering_connection], context: "#{context}[:vpc_peering_connection]") unless params[:vpc_peering_connection].nil?
        type
      end
    end

    module AccessScopeAnalysisFinding
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AccessScopeAnalysisFinding, context: context)
        type = Types::AccessScopeAnalysisFinding.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_analysis_id = params[:network_insights_access_scope_analysis_id]
        type.network_insights_access_scope_id = params[:network_insights_access_scope_id]
        type.finding_id = params[:finding_id]
        type.finding_components = PathComponentList.build(params[:finding_components], context: "#{context}[:finding_components]") unless params[:finding_components].nil?
        type
      end
    end

    module AccessScopeAnalysisFindingList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AccessScopeAnalysisFinding.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AccessScopePath
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AccessScopePath, context: context)
        type = Types::AccessScopePath.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.source = PathStatement.build(params[:source], context: "#{context}[:source]") unless params[:source].nil?
        type.destination = PathStatement.build(params[:destination], context: "#{context}[:destination]") unless params[:destination].nil?
        type.through_resources = ThroughResourcesStatementList.build(params[:through_resources], context: "#{context}[:through_resources]") unless params[:through_resources].nil?
        type
      end
    end

    module AccessScopePathList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AccessScopePath.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AccessScopePathListRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AccessScopePathRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AccessScopePathRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AccessScopePathRequest, context: context)
        type = Types::AccessScopePathRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.source = PathStatementRequest.build(params[:source], context: "#{context}[:source]") unless params[:source].nil?
        type.destination = PathStatementRequest.build(params[:destination], context: "#{context}[:destination]") unless params[:destination].nil?
        type.through_resources = ThroughResourcesStatementRequestList.build(params[:through_resources], context: "#{context}[:through_resources]") unless params[:through_resources].nil?
        type
      end
    end

    module AccountAttribute
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AccountAttribute, context: context)
        type = Types::AccountAttribute.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attribute_name = params[:attribute_name]
        type.attribute_values = AccountAttributeValueList.build(params[:attribute_values], context: "#{context}[:attribute_values]") unless params[:attribute_values].nil?
        type
      end
    end

    module AccountAttributeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AccountAttribute.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AccountAttributeNameStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module AccountAttributeValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AccountAttributeValue, context: context)
        type = Types::AccountAttributeValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attribute_value = params[:attribute_value]
        type
      end
    end

    module AccountAttributeValueList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AccountAttributeValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ActiveInstance
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ActiveInstance, context: context)
        type = Types::ActiveInstance.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.instance_type = params[:instance_type]
        type.spot_instance_request_id = params[:spot_instance_request_id]
        type.instance_health = params[:instance_health]
        type
      end
    end

    module ActiveInstanceSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ActiveInstance.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AddIpamOperatingRegion
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AddIpamOperatingRegion, context: context)
        type = Types::AddIpamOperatingRegion.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.region_name = params[:region_name]
        type
      end
    end

    module AddIpamOperatingRegionSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AddIpamOperatingRegion.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AddPrefixListEntries
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AddPrefixListEntry.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AddPrefixListEntry
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AddPrefixListEntry, context: context)
        type = Types::AddPrefixListEntry.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type.description = params[:description]
        type
      end
    end

    module AddedPrincipal
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AddedPrincipal, context: context)
        type = Types::AddedPrincipal.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.principal_type = params[:principal_type]
        type.principal = params[:principal]
        type.service_permission_id = params[:service_permission_id]
        type.service_id = params[:service_id]
        type
      end
    end

    module AddedPrincipalSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AddedPrincipal.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AdditionalDetail
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AdditionalDetail, context: context)
        type = Types::AdditionalDetail.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.additional_detail_type = params[:additional_detail_type]
        type.component = AnalysisComponent.build(params[:component], context: "#{context}[:component]") unless params[:component].nil?
        type.vpc_endpoint_service = AnalysisComponent.build(params[:vpc_endpoint_service], context: "#{context}[:vpc_endpoint_service]") unless params[:vpc_endpoint_service].nil?
        type.rule_options = RuleOptionList.build(params[:rule_options], context: "#{context}[:rule_options]") unless params[:rule_options].nil?
        type.rule_group_type_pairs = RuleGroupTypePairList.build(params[:rule_group_type_pairs], context: "#{context}[:rule_group_type_pairs]") unless params[:rule_group_type_pairs].nil?
        type.rule_group_rule_options_pairs = RuleGroupRuleOptionsPairList.build(params[:rule_group_rule_options_pairs], context: "#{context}[:rule_group_rule_options_pairs]") unless params[:rule_group_rule_options_pairs].nil?
        type.service_name = params[:service_name]
        type.load_balancers = AnalysisComponentList.build(params[:load_balancers], context: "#{context}[:load_balancers]") unless params[:load_balancers].nil?
        type
      end
    end

    module AdditionalDetailList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AdditionalDetail.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Address
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Address, context: context)
        type = Types::Address.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.public_ip = params[:public_ip]
        type.allocation_id = params[:allocation_id]
        type.association_id = params[:association_id]
        type.domain = params[:domain]
        type.network_interface_id = params[:network_interface_id]
        type.network_interface_owner_id = params[:network_interface_owner_id]
        type.private_ip_address = params[:private_ip_address]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.public_ipv4_pool = params[:public_ipv4_pool]
        type.network_border_group = params[:network_border_group]
        type.customer_owned_ip = params[:customer_owned_ip]
        type.customer_owned_ipv4_pool = params[:customer_owned_ipv4_pool]
        type.carrier_ip = params[:carrier_ip]
        type
      end
    end

    module AddressAttribute
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AddressAttribute, context: context)
        type = Types::AddressAttribute.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.public_ip = params[:public_ip]
        type.allocation_id = params[:allocation_id]
        type.ptr_record = params[:ptr_record]
        type.ptr_record_update = PtrUpdateStatus.build(params[:ptr_record_update], context: "#{context}[:ptr_record_update]") unless params[:ptr_record_update].nil?
        type
      end
    end

    module AddressList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Address.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AddressSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AddressAttribute.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AddressTransfer
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AddressTransfer, context: context)
        type = Types::AddressTransfer.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.public_ip = params[:public_ip]
        type.allocation_id = params[:allocation_id]
        type.transfer_account_id = params[:transfer_account_id]
        type.transfer_offer_expiration_timestamp = params[:transfer_offer_expiration_timestamp]
        type.transfer_offer_accepted_timestamp = params[:transfer_offer_accepted_timestamp]
        type.address_transfer_status = params[:address_transfer_status]
        type
      end
    end

    module AddressTransferList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AddressTransfer.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AdvertiseByoipCidrInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AdvertiseByoipCidrInput, context: context)
        type = Types::AdvertiseByoipCidrInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type.asn = params[:asn]
        type.dry_run = params[:dry_run]
        type.network_border_group = params[:network_border_group]
        type
      end
    end

    module AdvertiseByoipCidrOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AdvertiseByoipCidrOutput, context: context)
        type = Types::AdvertiseByoipCidrOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.byoip_cidr = ByoipCidr.build(params[:byoip_cidr], context: "#{context}[:byoip_cidr]") unless params[:byoip_cidr].nil?
        type
      end
    end

    module AllocateAddressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AllocateAddressInput, context: context)
        type = Types::AllocateAddressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.domain = params[:domain]
        type.address = params[:address]
        type.public_ipv4_pool = params[:public_ipv4_pool]
        type.network_border_group = params[:network_border_group]
        type.customer_owned_ipv4_pool = params[:customer_owned_ipv4_pool]
        type.dry_run = params[:dry_run]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module AllocateAddressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AllocateAddressOutput, context: context)
        type = Types::AllocateAddressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.public_ip = params[:public_ip]
        type.allocation_id = params[:allocation_id]
        type.public_ipv4_pool = params[:public_ipv4_pool]
        type.network_border_group = params[:network_border_group]
        type.domain = params[:domain]
        type.customer_owned_ip = params[:customer_owned_ip]
        type.customer_owned_ipv4_pool = params[:customer_owned_ipv4_pool]
        type.carrier_ip = params[:carrier_ip]
        type
      end
    end

    module AllocateHostsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AllocateHostsInput, context: context)
        type = Types::AllocateHostsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.auto_placement = params[:auto_placement]
        type.availability_zone = params[:availability_zone]
        type.client_token = params[:client_token]
        type.instance_type = params[:instance_type]
        type.instance_family = params[:instance_family]
        type.quantity = params[:quantity]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.host_recovery = params[:host_recovery]
        type.outpost_arn = params[:outpost_arn]
        type.host_maintenance = params[:host_maintenance]
        type.asset_ids = AssetIdList.build(params[:asset_ids], context: "#{context}[:asset_ids]") unless params[:asset_ids].nil?
        type
      end
    end

    module AllocateHostsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AllocateHostsOutput, context: context)
        type = Types::AllocateHostsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.host_ids = ResponseHostIdList.build(params[:host_ids], context: "#{context}[:host_ids]") unless params[:host_ids].nil?
        type
      end
    end

    module AllocateIpamPoolCidrInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AllocateIpamPoolCidrInput, context: context)
        type = Types::AllocateIpamPoolCidrInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_pool_id = params[:ipam_pool_id]
        type.cidr = params[:cidr]
        type.netmask_length = params[:netmask_length]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.description = params[:description]
        type.preview_next_cidr = params[:preview_next_cidr]
        type.allowed_cidrs = IpamPoolAllocationAllowedCidrs.build(params[:allowed_cidrs], context: "#{context}[:allowed_cidrs]") unless params[:allowed_cidrs].nil?
        type.disallowed_cidrs = IpamPoolAllocationDisallowedCidrs.build(params[:disallowed_cidrs], context: "#{context}[:disallowed_cidrs]") unless params[:disallowed_cidrs].nil?
        type
      end
    end

    module AllocateIpamPoolCidrOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AllocateIpamPoolCidrOutput, context: context)
        type = Types::AllocateIpamPoolCidrOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_pool_allocation = IpamPoolAllocation.build(params[:ipam_pool_allocation], context: "#{context}[:ipam_pool_allocation]") unless params[:ipam_pool_allocation].nil?
        type
      end
    end

    module AllocationIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module AllocationIds
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module AllowedInstanceTypeSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module AllowedPrincipal
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AllowedPrincipal, context: context)
        type = Types::AllowedPrincipal.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.principal_type = params[:principal_type]
        type.principal = params[:principal]
        type.service_permission_id = params[:service_permission_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.service_id = params[:service_id]
        type
      end
    end

    module AllowedPrincipalSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AllowedPrincipal.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AlternatePathHint
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AlternatePathHint, context: context)
        type = Types::AlternatePathHint.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.component_id = params[:component_id]
        type.component_arn = params[:component_arn]
        type
      end
    end

    module AlternatePathHintList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AlternatePathHint.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AnalysisAclRule
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AnalysisAclRule, context: context)
        type = Types::AnalysisAclRule.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type.egress = params[:egress]
        type.port_range = PortRange.build(params[:port_range], context: "#{context}[:port_range]") unless params[:port_range].nil?
        type.protocol = params[:protocol]
        type.rule_action = params[:rule_action]
        type.rule_number = params[:rule_number]
        type
      end
    end

    module AnalysisComponent
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AnalysisComponent, context: context)
        type = Types::AnalysisComponent.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.id = params[:id]
        type.arn = params[:arn]
        type.name = params[:name]
        type
      end
    end

    module AnalysisComponentList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AnalysisComponent.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AnalysisLoadBalancerListener
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AnalysisLoadBalancerListener, context: context)
        type = Types::AnalysisLoadBalancerListener.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.load_balancer_port = params[:load_balancer_port]
        type.instance_port = params[:instance_port]
        type
      end
    end

    module AnalysisLoadBalancerTarget
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AnalysisLoadBalancerTarget, context: context)
        type = Types::AnalysisLoadBalancerTarget.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.address = params[:address]
        type.availability_zone = params[:availability_zone]
        type.instance = AnalysisComponent.build(params[:instance], context: "#{context}[:instance]") unless params[:instance].nil?
        type.port = params[:port]
        type
      end
    end

    module AnalysisPacketHeader
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AnalysisPacketHeader, context: context)
        type = Types::AnalysisPacketHeader.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_addresses = IpAddressList.build(params[:destination_addresses], context: "#{context}[:destination_addresses]") unless params[:destination_addresses].nil?
        type.destination_port_ranges = PortRangeList.build(params[:destination_port_ranges], context: "#{context}[:destination_port_ranges]") unless params[:destination_port_ranges].nil?
        type.protocol = params[:protocol]
        type.source_addresses = IpAddressList.build(params[:source_addresses], context: "#{context}[:source_addresses]") unless params[:source_addresses].nil?
        type.source_port_ranges = PortRangeList.build(params[:source_port_ranges], context: "#{context}[:source_port_ranges]") unless params[:source_port_ranges].nil?
        type
      end
    end

    module AnalysisRouteTableRoute
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AnalysisRouteTableRoute, context: context)
        type = Types::AnalysisRouteTableRoute.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr = params[:destination_cidr]
        type.destination_prefix_list_id = params[:destination_prefix_list_id]
        type.egress_only_internet_gateway_id = params[:egress_only_internet_gateway_id]
        type.gateway_id = params[:gateway_id]
        type.instance_id = params[:instance_id]
        type.nat_gateway_id = params[:nat_gateway_id]
        type.network_interface_id = params[:network_interface_id]
        type.origin = params[:origin]
        type.transit_gateway_id = params[:transit_gateway_id]
        type.vpc_peering_connection_id = params[:vpc_peering_connection_id]
        type.state = params[:state]
        type.carrier_gateway_id = params[:carrier_gateway_id]
        type.core_network_arn = params[:core_network_arn]
        type.local_gateway_id = params[:local_gateway_id]
        type
      end
    end

    module AnalysisSecurityGroupRule
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AnalysisSecurityGroupRule, context: context)
        type = Types::AnalysisSecurityGroupRule.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type.direction = params[:direction]
        type.security_group_id = params[:security_group_id]
        type.port_range = PortRange.build(params[:port_range], context: "#{context}[:port_range]") unless params[:port_range].nil?
        type.prefix_list_id = params[:prefix_list_id]
        type.protocol = params[:protocol]
        type
      end
    end

    module ApplySecurityGroupsToClientVpnTargetNetworkInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ApplySecurityGroupsToClientVpnTargetNetworkInput, context: context)
        type = Types::ApplySecurityGroupsToClientVpnTargetNetworkInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.vpc_id = params[:vpc_id]
        type.security_group_ids = ClientVpnSecurityGroupIdSet.build(params[:security_group_ids], context: "#{context}[:security_group_ids]") unless params[:security_group_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ApplySecurityGroupsToClientVpnTargetNetworkOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ApplySecurityGroupsToClientVpnTargetNetworkOutput, context: context)
        type = Types::ApplySecurityGroupsToClientVpnTargetNetworkOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.security_group_ids = ClientVpnSecurityGroupIdSet.build(params[:security_group_ids], context: "#{context}[:security_group_ids]") unless params[:security_group_ids].nil?
        type
      end
    end

    module ArchitectureTypeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ArchitectureTypeSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ArnList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module AsnAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AsnAssociation, context: context)
        type = Types::AsnAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.asn = params[:asn]
        type.cidr = params[:cidr]
        type.status_message = params[:status_message]
        type.state = params[:state]
        type
      end
    end

    module AsnAssociationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AsnAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AsnAuthorizationContext
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AsnAuthorizationContext, context: context)
        type = Types::AsnAuthorizationContext.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.message = params[:message]
        type.signature = params[:signature]
        type
      end
    end

    module AssetIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module AssignIpv6AddressesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssignIpv6AddressesInput, context: context)
        type = Types::AssignIpv6AddressesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_address_count = params[:ipv6_address_count]
        type.ipv6_addresses = Ipv6AddressList.build(params[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless params[:ipv6_addresses].nil?
        type.ipv6_prefix_count = params[:ipv6_prefix_count]
        type.ipv6_prefixes = IpPrefixList.build(params[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless params[:ipv6_prefixes].nil?
        type.network_interface_id = params[:network_interface_id]
        type
      end
    end

    module AssignIpv6AddressesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssignIpv6AddressesOutput, context: context)
        type = Types::AssignIpv6AddressesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.assigned_ipv6_addresses = Ipv6AddressList.build(params[:assigned_ipv6_addresses], context: "#{context}[:assigned_ipv6_addresses]") unless params[:assigned_ipv6_addresses].nil?
        type.assigned_ipv6_prefixes = IpPrefixList.build(params[:assigned_ipv6_prefixes], context: "#{context}[:assigned_ipv6_prefixes]") unless params[:assigned_ipv6_prefixes].nil?
        type.network_interface_id = params[:network_interface_id]
        type
      end
    end

    module AssignPrivateIpAddressesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssignPrivateIpAddressesInput, context: context)
        type = Types::AssignPrivateIpAddressesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allow_reassignment = params[:allow_reassignment]
        type.network_interface_id = params[:network_interface_id]
        type.private_ip_addresses = PrivateIpAddressStringList.build(params[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless params[:private_ip_addresses].nil?
        type.secondary_private_ip_address_count = params[:secondary_private_ip_address_count]
        type.ipv4_prefixes = IpPrefixList.build(params[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless params[:ipv4_prefixes].nil?
        type.ipv4_prefix_count = params[:ipv4_prefix_count]
        type
      end
    end

    module AssignPrivateIpAddressesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssignPrivateIpAddressesOutput, context: context)
        type = Types::AssignPrivateIpAddressesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_interface_id = params[:network_interface_id]
        type.assigned_private_ip_addresses = AssignedPrivateIpAddressList.build(params[:assigned_private_ip_addresses], context: "#{context}[:assigned_private_ip_addresses]") unless params[:assigned_private_ip_addresses].nil?
        type.assigned_ipv4_prefixes = Ipv4PrefixesList.build(params[:assigned_ipv4_prefixes], context: "#{context}[:assigned_ipv4_prefixes]") unless params[:assigned_ipv4_prefixes].nil?
        type
      end
    end

    module AssignPrivateNatGatewayAddressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssignPrivateNatGatewayAddressInput, context: context)
        type = Types::AssignPrivateNatGatewayAddressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.nat_gateway_id = params[:nat_gateway_id]
        type.private_ip_addresses = IpList.build(params[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless params[:private_ip_addresses].nil?
        type.private_ip_address_count = params[:private_ip_address_count]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AssignPrivateNatGatewayAddressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssignPrivateNatGatewayAddressOutput, context: context)
        type = Types::AssignPrivateNatGatewayAddressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.nat_gateway_id = params[:nat_gateway_id]
        type.nat_gateway_addresses = NatGatewayAddressList.build(params[:nat_gateway_addresses], context: "#{context}[:nat_gateway_addresses]") unless params[:nat_gateway_addresses].nil?
        type
      end
    end

    module AssignedPrivateIpAddress
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssignedPrivateIpAddress, context: context)
        type = Types::AssignedPrivateIpAddress.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.private_ip_address = params[:private_ip_address]
        type
      end
    end

    module AssignedPrivateIpAddressList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AssignedPrivateIpAddress.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AssociateAddressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateAddressInput, context: context)
        type = Types::AssociateAddressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_id = params[:allocation_id]
        type.instance_id = params[:instance_id]
        type.public_ip = params[:public_ip]
        type.allow_reassociation = params[:allow_reassociation]
        type.dry_run = params[:dry_run]
        type.network_interface_id = params[:network_interface_id]
        type.private_ip_address = params[:private_ip_address]
        type
      end
    end

    module AssociateAddressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateAddressOutput, context: context)
        type = Types::AssociateAddressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type
      end
    end

    module AssociateClientVpnTargetNetworkInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateClientVpnTargetNetworkInput, context: context)
        type = Types::AssociateClientVpnTargetNetworkInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.subnet_id = params[:subnet_id]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AssociateClientVpnTargetNetworkOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateClientVpnTargetNetworkOutput, context: context)
        type = Types::AssociateClientVpnTargetNetworkOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type.status = AssociationStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type
      end
    end

    module AssociateDhcpOptionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateDhcpOptionsInput, context: context)
        type = Types::AssociateDhcpOptionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dhcp_options_id = params[:dhcp_options_id]
        type.vpc_id = params[:vpc_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AssociateDhcpOptionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateDhcpOptionsOutput, context: context)
        type = Types::AssociateDhcpOptionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module AssociateEnclaveCertificateIamRoleInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateEnclaveCertificateIamRoleInput, context: context)
        type = Types::AssociateEnclaveCertificateIamRoleInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.certificate_arn = params[:certificate_arn]
        type.role_arn = params[:role_arn]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AssociateEnclaveCertificateIamRoleOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateEnclaveCertificateIamRoleOutput, context: context)
        type = Types::AssociateEnclaveCertificateIamRoleOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.certificate_s3_bucket_name = params[:certificate_s3_bucket_name]
        type.certificate_s3_object_key = params[:certificate_s3_object_key]
        type.encryption_kms_key_id = params[:encryption_kms_key_id]
        type
      end
    end

    module AssociateIamInstanceProfileInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateIamInstanceProfileInput, context: context)
        type = Types::AssociateIamInstanceProfileInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.iam_instance_profile = IamInstanceProfileSpecification.build(params[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless params[:iam_instance_profile].nil?
        type.instance_id = params[:instance_id]
        type
      end
    end

    module AssociateIamInstanceProfileOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateIamInstanceProfileOutput, context: context)
        type = Types::AssociateIamInstanceProfileOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.iam_instance_profile_association = IamInstanceProfileAssociation.build(params[:iam_instance_profile_association], context: "#{context}[:iam_instance_profile_association]") unless params[:iam_instance_profile_association].nil?
        type
      end
    end

    module AssociateInstanceEventWindowInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateInstanceEventWindowInput, context: context)
        type = Types::AssociateInstanceEventWindowInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.instance_event_window_id = params[:instance_event_window_id]
        type.association_target = InstanceEventWindowAssociationRequest.build(params[:association_target], context: "#{context}[:association_target]") unless params[:association_target].nil?
        type
      end
    end

    module AssociateInstanceEventWindowOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateInstanceEventWindowOutput, context: context)
        type = Types::AssociateInstanceEventWindowOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_event_window = InstanceEventWindow.build(params[:instance_event_window], context: "#{context}[:instance_event_window]") unless params[:instance_event_window].nil?
        type
      end
    end

    module AssociateIpamByoasnInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateIpamByoasnInput, context: context)
        type = Types::AssociateIpamByoasnInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.asn = params[:asn]
        type.cidr = params[:cidr]
        type
      end
    end

    module AssociateIpamByoasnOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateIpamByoasnOutput, context: context)
        type = Types::AssociateIpamByoasnOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.asn_association = AsnAssociation.build(params[:asn_association], context: "#{context}[:asn_association]") unless params[:asn_association].nil?
        type
      end
    end

    module AssociateIpamResourceDiscoveryInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateIpamResourceDiscoveryInput, context: context)
        type = Types::AssociateIpamResourceDiscoveryInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_id = params[:ipam_id]
        type.ipam_resource_discovery_id = params[:ipam_resource_discovery_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module AssociateIpamResourceDiscoveryOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateIpamResourceDiscoveryOutput, context: context)
        type = Types::AssociateIpamResourceDiscoveryOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_resource_discovery_association = IpamResourceDiscoveryAssociation.build(params[:ipam_resource_discovery_association], context: "#{context}[:ipam_resource_discovery_association]") unless params[:ipam_resource_discovery_association].nil?
        type
      end
    end

    module AssociateNatGatewayAddressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateNatGatewayAddressInput, context: context)
        type = Types::AssociateNatGatewayAddressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.nat_gateway_id = params[:nat_gateway_id]
        type.allocation_ids = AllocationIdList.build(params[:allocation_ids], context: "#{context}[:allocation_ids]") unless params[:allocation_ids].nil?
        type.private_ip_addresses = IpList.build(params[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless params[:private_ip_addresses].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AssociateNatGatewayAddressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateNatGatewayAddressOutput, context: context)
        type = Types::AssociateNatGatewayAddressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.nat_gateway_id = params[:nat_gateway_id]
        type.nat_gateway_addresses = NatGatewayAddressList.build(params[:nat_gateway_addresses], context: "#{context}[:nat_gateway_addresses]") unless params[:nat_gateway_addresses].nil?
        type
      end
    end

    module AssociateRouteTableInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateRouteTableInput, context: context)
        type = Types::AssociateRouteTableInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.route_table_id = params[:route_table_id]
        type.subnet_id = params[:subnet_id]
        type.gateway_id = params[:gateway_id]
        type
      end
    end

    module AssociateRouteTableOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateRouteTableOutput, context: context)
        type = Types::AssociateRouteTableOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type.association_state = RouteTableAssociationState.build(params[:association_state], context: "#{context}[:association_state]") unless params[:association_state].nil?
        type
      end
    end

    module AssociateSubnetCidrBlockInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateSubnetCidrBlockInput, context: context)
        type = Types::AssociateSubnetCidrBlockInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_cidr_block = params[:ipv6_cidr_block]
        type.subnet_id = params[:subnet_id]
        type.ipv6_ipam_pool_id = params[:ipv6_ipam_pool_id]
        type.ipv6_netmask_length = params[:ipv6_netmask_length]
        type
      end
    end

    module AssociateSubnetCidrBlockOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateSubnetCidrBlockOutput, context: context)
        type = Types::AssociateSubnetCidrBlockOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_cidr_block_association = SubnetIpv6CidrBlockAssociation.build(params[:ipv6_cidr_block_association], context: "#{context}[:ipv6_cidr_block_association]") unless params[:ipv6_cidr_block_association].nil?
        type.subnet_id = params[:subnet_id]
        type
      end
    end

    module AssociateTransitGatewayMulticastDomainInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateTransitGatewayMulticastDomainInput, context: context)
        type = Types::AssociateTransitGatewayMulticastDomainInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.subnet_ids = TransitGatewaySubnetIdList.build(params[:subnet_ids], context: "#{context}[:subnet_ids]") unless params[:subnet_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AssociateTransitGatewayMulticastDomainOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateTransitGatewayMulticastDomainOutput, context: context)
        type = Types::AssociateTransitGatewayMulticastDomainOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.associations = TransitGatewayMulticastDomainAssociations.build(params[:associations], context: "#{context}[:associations]") unless params[:associations].nil?
        type
      end
    end

    module AssociateTransitGatewayPolicyTableInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateTransitGatewayPolicyTableInput, context: context)
        type = Types::AssociateTransitGatewayPolicyTableInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_policy_table_id = params[:transit_gateway_policy_table_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AssociateTransitGatewayPolicyTableOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateTransitGatewayPolicyTableOutput, context: context)
        type = Types::AssociateTransitGatewayPolicyTableOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association = TransitGatewayPolicyTableAssociation.build(params[:association], context: "#{context}[:association]") unless params[:association].nil?
        type
      end
    end

    module AssociateTransitGatewayRouteTableInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateTransitGatewayRouteTableInput, context: context)
        type = Types::AssociateTransitGatewayRouteTableInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AssociateTransitGatewayRouteTableOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateTransitGatewayRouteTableOutput, context: context)
        type = Types::AssociateTransitGatewayRouteTableOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association = TransitGatewayAssociation.build(params[:association], context: "#{context}[:association]") unless params[:association].nil?
        type
      end
    end

    module AssociateTrunkInterfaceInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateTrunkInterfaceInput, context: context)
        type = Types::AssociateTrunkInterfaceInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.branch_interface_id = params[:branch_interface_id]
        type.trunk_interface_id = params[:trunk_interface_id]
        type.vlan_id = params[:vlan_id]
        type.gre_key = params[:gre_key]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AssociateTrunkInterfaceOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateTrunkInterfaceOutput, context: context)
        type = Types::AssociateTrunkInterfaceOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.interface_association = TrunkInterfaceAssociation.build(params[:interface_association], context: "#{context}[:interface_association]") unless params[:interface_association].nil?
        type.client_token = params[:client_token]
        type
      end
    end

    module AssociateVpcCidrBlockInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateVpcCidrBlockInput, context: context)
        type = Types::AssociateVpcCidrBlockInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.amazon_provided_ipv6_cidr_block = params[:amazon_provided_ipv6_cidr_block]
        type.cidr_block = params[:cidr_block]
        type.vpc_id = params[:vpc_id]
        type.ipv6_cidr_block_network_border_group = params[:ipv6_cidr_block_network_border_group]
        type.ipv6_pool = params[:ipv6_pool]
        type.ipv6_cidr_block = params[:ipv6_cidr_block]
        type.ipv4_ipam_pool_id = params[:ipv4_ipam_pool_id]
        type.ipv4_netmask_length = params[:ipv4_netmask_length]
        type.ipv6_ipam_pool_id = params[:ipv6_ipam_pool_id]
        type.ipv6_netmask_length = params[:ipv6_netmask_length]
        type
      end
    end

    module AssociateVpcCidrBlockOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociateVpcCidrBlockOutput, context: context)
        type = Types::AssociateVpcCidrBlockOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_cidr_block_association = VpcIpv6CidrBlockAssociation.build(params[:ipv6_cidr_block_association], context: "#{context}[:ipv6_cidr_block_association]") unless params[:ipv6_cidr_block_association].nil?
        type.cidr_block_association = VpcCidrBlockAssociation.build(params[:cidr_block_association], context: "#{context}[:cidr_block_association]") unless params[:cidr_block_association].nil?
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module AssociatedRole
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociatedRole, context: context)
        type = Types::AssociatedRole.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.associated_role_arn = params[:associated_role_arn]
        type.certificate_s3_bucket_name = params[:certificate_s3_bucket_name]
        type.certificate_s3_object_key = params[:certificate_s3_object_key]
        type.encryption_kms_key_id = params[:encryption_kms_key_id]
        type
      end
    end

    module AssociatedRolesList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AssociatedRole.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AssociatedTargetNetwork
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociatedTargetNetwork, context: context)
        type = Types::AssociatedTargetNetwork.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_id = params[:network_id]
        type.network_type = params[:network_type]
        type
      end
    end

    module AssociatedTargetNetworkSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AssociatedTargetNetwork.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AssociationIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module AssociationStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AssociationStatus, context: context)
        type = Types::AssociationStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module AthenaIntegration
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AthenaIntegration, context: context)
        type = Types::AthenaIntegration.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.integration_result_s3_destination_arn = params[:integration_result_s3_destination_arn]
        type.partition_load_frequency = params[:partition_load_frequency]
        type.partition_start_date = params[:partition_start_date]
        type.partition_end_date = params[:partition_end_date]
        type
      end
    end

    module AthenaIntegrationsSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AthenaIntegration.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AttachClassicLinkVpcInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttachClassicLinkVpcInput, context: context)
        type = Types::AttachClassicLinkVpcInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.groups = GroupIdStringList.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.instance_id = params[:instance_id]
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module AttachClassicLinkVpcOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttachClassicLinkVpcOutput, context: context)
        type = Types::AttachClassicLinkVpcOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module AttachInternetGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttachInternetGatewayInput, context: context)
        type = Types::AttachInternetGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.internet_gateway_id = params[:internet_gateway_id]
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module AttachInternetGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttachInternetGatewayOutput, context: context)
        type = Types::AttachInternetGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module AttachNetworkInterfaceInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttachNetworkInterfaceInput, context: context)
        type = Types::AttachNetworkInterfaceInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.device_index = params[:device_index]
        type.dry_run = params[:dry_run]
        type.instance_id = params[:instance_id]
        type.network_interface_id = params[:network_interface_id]
        type.network_card_index = params[:network_card_index]
        type.ena_srd_specification = EnaSrdSpecification.build(params[:ena_srd_specification], context: "#{context}[:ena_srd_specification]") unless params[:ena_srd_specification].nil?
        type
      end
    end

    module AttachNetworkInterfaceOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttachNetworkInterfaceOutput, context: context)
        type = Types::AttachNetworkInterfaceOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attachment_id = params[:attachment_id]
        type.network_card_index = params[:network_card_index]
        type
      end
    end

    module AttachVerifiedAccessTrustProviderInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttachVerifiedAccessTrustProviderInput, context: context)
        type = Types::AttachVerifiedAccessTrustProviderInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_instance_id = params[:verified_access_instance_id]
        type.verified_access_trust_provider_id = params[:verified_access_trust_provider_id]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AttachVerifiedAccessTrustProviderOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttachVerifiedAccessTrustProviderOutput, context: context)
        type = Types::AttachVerifiedAccessTrustProviderOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_trust_provider = VerifiedAccessTrustProvider.build(params[:verified_access_trust_provider], context: "#{context}[:verified_access_trust_provider]") unless params[:verified_access_trust_provider].nil?
        type.verified_access_instance = VerifiedAccessInstance.build(params[:verified_access_instance], context: "#{context}[:verified_access_instance]") unless params[:verified_access_instance].nil?
        type
      end
    end

    module AttachVolumeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttachVolumeInput, context: context)
        type = Types::AttachVolumeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.device = params[:device]
        type.instance_id = params[:instance_id]
        type.volume_id = params[:volume_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AttachVolumeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttachVolumeOutput, context: context)
        type = Types::AttachVolumeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attach_time = params[:attach_time]
        type.device = params[:device]
        type.instance_id = params[:instance_id]
        type.state = params[:state]
        type.volume_id = params[:volume_id]
        type.delete_on_termination = params[:delete_on_termination]
        type.associated_resource = params[:associated_resource]
        type.instance_owning_service = params[:instance_owning_service]
        type
      end
    end

    module AttachVpnGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttachVpnGatewayInput, context: context)
        type = Types::AttachVpnGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_id = params[:vpc_id]
        type.vpn_gateway_id = params[:vpn_gateway_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AttachVpnGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttachVpnGatewayOutput, context: context)
        type = Types::AttachVpnGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_attachment = VpcAttachment.build(params[:vpc_attachment], context: "#{context}[:vpc_attachment]") unless params[:vpc_attachment].nil?
        type
      end
    end

    module AttachmentEnaSrdSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttachmentEnaSrdSpecification, context: context)
        type = Types::AttachmentEnaSrdSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ena_srd_enabled = params[:ena_srd_enabled]
        type.ena_srd_udp_specification = AttachmentEnaSrdUdpSpecification.build(params[:ena_srd_udp_specification], context: "#{context}[:ena_srd_udp_specification]") unless params[:ena_srd_udp_specification].nil?
        type
      end
    end

    module AttachmentEnaSrdUdpSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttachmentEnaSrdUdpSpecification, context: context)
        type = Types::AttachmentEnaSrdUdpSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ena_srd_udp_enabled = params[:ena_srd_udp_enabled]
        type
      end
    end

    module AttributeBooleanValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttributeBooleanValue, context: context)
        type = Types::AttributeBooleanValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module AttributeValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AttributeValue, context: context)
        type = Types::AttributeValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module AuthorizationRule
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AuthorizationRule, context: context)
        type = Types::AuthorizationRule.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.description = params[:description]
        type.group_id = params[:group_id]
        type.access_all = params[:access_all]
        type.destination_cidr = params[:destination_cidr]
        type.status = ClientVpnAuthorizationRuleStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type
      end
    end

    module AuthorizationRuleSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AuthorizationRule.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AuthorizeClientVpnIngressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AuthorizeClientVpnIngressInput, context: context)
        type = Types::AuthorizeClientVpnIngressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.target_network_cidr = params[:target_network_cidr]
        type.access_group_id = params[:access_group_id]
        type.authorize_all_groups = params[:authorize_all_groups]
        type.description = params[:description]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type
      end
    end

    module AuthorizeClientVpnIngressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AuthorizeClientVpnIngressOutput, context: context)
        type = Types::AuthorizeClientVpnIngressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.status = ClientVpnAuthorizationRuleStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type
      end
    end

    module AuthorizeSecurityGroupEgressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AuthorizeSecurityGroupEgressInput, context: context)
        type = Types::AuthorizeSecurityGroupEgressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.group_id = params[:group_id]
        type.ip_permissions = IpPermissionList.build(params[:ip_permissions], context: "#{context}[:ip_permissions]") unless params[:ip_permissions].nil?
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.cidr_ip = params[:cidr_ip]
        type.from_port = params[:from_port]
        type.ip_protocol = params[:ip_protocol]
        type.to_port = params[:to_port]
        type.source_security_group_name = params[:source_security_group_name]
        type.source_security_group_owner_id = params[:source_security_group_owner_id]
        type
      end
    end

    module AuthorizeSecurityGroupEgressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AuthorizeSecurityGroupEgressOutput, context: context)
        type = Types::AuthorizeSecurityGroupEgressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type.security_group_rules = SecurityGroupRuleList.build(params[:security_group_rules], context: "#{context}[:security_group_rules]") unless params[:security_group_rules].nil?
        type
      end
    end

    module AuthorizeSecurityGroupIngressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AuthorizeSecurityGroupIngressInput, context: context)
        type = Types::AuthorizeSecurityGroupIngressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr_ip = params[:cidr_ip]
        type.from_port = params[:from_port]
        type.group_id = params[:group_id]
        type.group_name = params[:group_name]
        type.ip_permissions = IpPermissionList.build(params[:ip_permissions], context: "#{context}[:ip_permissions]") unless params[:ip_permissions].nil?
        type.ip_protocol = params[:ip_protocol]
        type.source_security_group_name = params[:source_security_group_name]
        type.source_security_group_owner_id = params[:source_security_group_owner_id]
        type.to_port = params[:to_port]
        type.dry_run = params[:dry_run]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module AuthorizeSecurityGroupIngressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AuthorizeSecurityGroupIngressOutput, context: context)
        type = Types::AuthorizeSecurityGroupIngressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type.security_group_rules = SecurityGroupRuleList.build(params[:security_group_rules], context: "#{context}[:security_group_rules]") unless params[:security_group_rules].nil?
        type
      end
    end

    module AvailabilityZone
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AvailabilityZone, context: context)
        type = Types::AvailabilityZone.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.state = params[:state]
        type.opt_in_status = params[:opt_in_status]
        type.messages = AvailabilityZoneMessageList.build(params[:messages], context: "#{context}[:messages]") unless params[:messages].nil?
        type.region_name = params[:region_name]
        type.zone_name = params[:zone_name]
        type.zone_id = params[:zone_id]
        type.group_name = params[:group_name]
        type.network_border_group = params[:network_border_group]
        type.zone_type = params[:zone_type]
        type.parent_zone_name = params[:parent_zone_name]
        type.parent_zone_id = params[:parent_zone_id]
        type
      end
    end

    module AvailabilityZoneList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AvailabilityZone.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AvailabilityZoneMessage
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AvailabilityZoneMessage, context: context)
        type = Types::AvailabilityZoneMessage.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.message = params[:message]
        type
      end
    end

    module AvailabilityZoneMessageList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AvailabilityZoneMessage.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module AvailabilityZoneStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module AvailableCapacity
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::AvailableCapacity, context: context)
        type = Types::AvailableCapacity.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.available_instance_capacity = AvailableInstanceCapacityList.build(params[:available_instance_capacity], context: "#{context}[:available_instance_capacity]") unless params[:available_instance_capacity].nil?
        type.available_v_cpus = params[:available_v_cpus]
        type
      end
    end

    module AvailableInstanceCapacityList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceCapacity.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module BaselineEbsBandwidthMbps
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::BaselineEbsBandwidthMbps, context: context)
        type = Types::BaselineEbsBandwidthMbps.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]
        type.max = params[:max]
        type
      end
    end

    module BaselineEbsBandwidthMbpsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::BaselineEbsBandwidthMbpsRequest, context: context)
        type = Types::BaselineEbsBandwidthMbpsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]
        type.max = params[:max]
        type
      end
    end

    module BillingProductList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module BlobAttributeValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::BlobAttributeValue, context: context)
        type = Types::BlobAttributeValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module BlockDeviceMapping
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::BlockDeviceMapping, context: context)
        type = Types::BlockDeviceMapping.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.device_name = params[:device_name]
        type.virtual_name = params[:virtual_name]
        type.ebs = EbsBlockDevice.build(params[:ebs], context: "#{context}[:ebs]") unless params[:ebs].nil?
        type.no_device = params[:no_device]
        type
      end
    end

    module BlockDeviceMappingList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << BlockDeviceMapping.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module BlockDeviceMappingRequestList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << BlockDeviceMapping.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module BootModeTypeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module BundleIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module BundleInstanceInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::BundleInstanceInput, context: context)
        type = Types::BundleInstanceInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.storage = Storage.build(params[:storage], context: "#{context}[:storage]") unless params[:storage].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module BundleInstanceOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::BundleInstanceOutput, context: context)
        type = Types::BundleInstanceOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.bundle_task = BundleTask.build(params[:bundle_task], context: "#{context}[:bundle_task]") unless params[:bundle_task].nil?
        type
      end
    end

    module BundleTask
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::BundleTask, context: context)
        type = Types::BundleTask.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.bundle_id = params[:bundle_id]
        type.bundle_task_error = BundleTaskError.build(params[:bundle_task_error], context: "#{context}[:bundle_task_error]") unless params[:bundle_task_error].nil?
        type.instance_id = params[:instance_id]
        type.progress = params[:progress]
        type.start_time = params[:start_time]
        type.state = params[:state]
        type.storage = Storage.build(params[:storage], context: "#{context}[:storage]") unless params[:storage].nil?
        type.update_time = params[:update_time]
        type
      end
    end

    module BundleTaskError
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::BundleTaskError, context: context)
        type = Types::BundleTaskError.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module BundleTaskList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << BundleTask.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Byoasn
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Byoasn, context: context)
        type = Types::Byoasn.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.asn = params[:asn]
        type.ipam_id = params[:ipam_id]
        type.status_message = params[:status_message]
        type.state = params[:state]
        type
      end
    end

    module ByoasnSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Byoasn.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ByoipCidr
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ByoipCidr, context: context)
        type = Types::ByoipCidr.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type.description = params[:description]
        type.asn_associations = AsnAssociationSet.build(params[:asn_associations], context: "#{context}[:asn_associations]") unless params[:asn_associations].nil?
        type.status_message = params[:status_message]
        type.state = params[:state]
        type.network_border_group = params[:network_border_group]
        type
      end
    end

    module ByoipCidrSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ByoipCidr.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module CancelBundleTaskInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelBundleTaskInput, context: context)
        type = Types::CancelBundleTaskInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.bundle_id = params[:bundle_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CancelBundleTaskOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelBundleTaskOutput, context: context)
        type = Types::CancelBundleTaskOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.bundle_task = BundleTask.build(params[:bundle_task], context: "#{context}[:bundle_task]") unless params[:bundle_task].nil?
        type
      end
    end

    module CancelCapacityReservationFleetError
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelCapacityReservationFleetError, context: context)
        type = Types::CancelCapacityReservationFleetError.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module CancelCapacityReservationFleetsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelCapacityReservationFleetsInput, context: context)
        type = Types::CancelCapacityReservationFleetsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.capacity_reservation_fleet_ids = CapacityReservationFleetIdSet.build(params[:capacity_reservation_fleet_ids], context: "#{context}[:capacity_reservation_fleet_ids]") unless params[:capacity_reservation_fleet_ids].nil?
        type
      end
    end

    module CancelCapacityReservationFleetsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelCapacityReservationFleetsOutput, context: context)
        type = Types::CancelCapacityReservationFleetsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.successful_fleet_cancellations = CapacityReservationFleetCancellationStateSet.build(params[:successful_fleet_cancellations], context: "#{context}[:successful_fleet_cancellations]") unless params[:successful_fleet_cancellations].nil?
        type.failed_fleet_cancellations = FailedCapacityReservationFleetCancellationResultSet.build(params[:failed_fleet_cancellations], context: "#{context}[:failed_fleet_cancellations]") unless params[:failed_fleet_cancellations].nil?
        type
      end
    end

    module CancelCapacityReservationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelCapacityReservationInput, context: context)
        type = Types::CancelCapacityReservationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_id = params[:capacity_reservation_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CancelCapacityReservationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelCapacityReservationOutput, context: context)
        type = Types::CancelCapacityReservationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module CancelConversionTaskInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelConversionTaskInput, context: context)
        type = Types::CancelConversionTaskInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.conversion_task_id = params[:conversion_task_id]
        type.dry_run = params[:dry_run]
        type.reason_message = params[:reason_message]
        type
      end
    end

    module CancelConversionTaskOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelConversionTaskOutput, context: context)
        type = Types::CancelConversionTaskOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module CancelExportTaskInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelExportTaskInput, context: context)
        type = Types::CancelExportTaskInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.export_task_id = params[:export_task_id]
        type
      end
    end

    module CancelExportTaskOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelExportTaskOutput, context: context)
        type = Types::CancelExportTaskOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module CancelImageLaunchPermissionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelImageLaunchPermissionInput, context: context)
        type = Types::CancelImageLaunchPermissionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CancelImageLaunchPermissionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelImageLaunchPermissionOutput, context: context)
        type = Types::CancelImageLaunchPermissionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module CancelImportTaskInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelImportTaskInput, context: context)
        type = Types::CancelImportTaskInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cancel_reason = params[:cancel_reason]
        type.dry_run = params[:dry_run]
        type.import_task_id = params[:import_task_id]
        type
      end
    end

    module CancelImportTaskOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelImportTaskOutput, context: context)
        type = Types::CancelImportTaskOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.import_task_id = params[:import_task_id]
        type.previous_state = params[:previous_state]
        type.state = params[:state]
        type
      end
    end

    module CancelReservedInstancesListingInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelReservedInstancesListingInput, context: context)
        type = Types::CancelReservedInstancesListingInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.reserved_instances_listing_id = params[:reserved_instances_listing_id]
        type
      end
    end

    module CancelReservedInstancesListingOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelReservedInstancesListingOutput, context: context)
        type = Types::CancelReservedInstancesListingOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.reserved_instances_listings = ReservedInstancesListingList.build(params[:reserved_instances_listings], context: "#{context}[:reserved_instances_listings]") unless params[:reserved_instances_listings].nil?
        type
      end
    end

    module CancelSpotFleetRequestsError
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelSpotFleetRequestsError, context: context)
        type = Types::CancelSpotFleetRequestsError.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module CancelSpotFleetRequestsErrorItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelSpotFleetRequestsErrorItem, context: context)
        type = Types::CancelSpotFleetRequestsErrorItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.error = CancelSpotFleetRequestsError.build(params[:error], context: "#{context}[:error]") unless params[:error].nil?
        type.spot_fleet_request_id = params[:spot_fleet_request_id]
        type
      end
    end

    module CancelSpotFleetRequestsErrorSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CancelSpotFleetRequestsErrorItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module CancelSpotFleetRequestsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelSpotFleetRequestsInput, context: context)
        type = Types::CancelSpotFleetRequestsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.spot_fleet_request_ids = SpotFleetRequestIdList.build(params[:spot_fleet_request_ids], context: "#{context}[:spot_fleet_request_ids]") unless params[:spot_fleet_request_ids].nil?
        type.terminate_instances = params[:terminate_instances]
        type
      end
    end

    module CancelSpotFleetRequestsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelSpotFleetRequestsOutput, context: context)
        type = Types::CancelSpotFleetRequestsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.successful_fleet_requests = CancelSpotFleetRequestsSuccessSet.build(params[:successful_fleet_requests], context: "#{context}[:successful_fleet_requests]") unless params[:successful_fleet_requests].nil?
        type.unsuccessful_fleet_requests = CancelSpotFleetRequestsErrorSet.build(params[:unsuccessful_fleet_requests], context: "#{context}[:unsuccessful_fleet_requests]") unless params[:unsuccessful_fleet_requests].nil?
        type
      end
    end

    module CancelSpotFleetRequestsSuccessItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelSpotFleetRequestsSuccessItem, context: context)
        type = Types::CancelSpotFleetRequestsSuccessItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.current_spot_fleet_request_state = params[:current_spot_fleet_request_state]
        type.previous_spot_fleet_request_state = params[:previous_spot_fleet_request_state]
        type.spot_fleet_request_id = params[:spot_fleet_request_id]
        type
      end
    end

    module CancelSpotFleetRequestsSuccessSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CancelSpotFleetRequestsSuccessItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module CancelSpotInstanceRequestsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelSpotInstanceRequestsInput, context: context)
        type = Types::CancelSpotInstanceRequestsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.spot_instance_request_ids = SpotInstanceRequestIdList.build(params[:spot_instance_request_ids], context: "#{context}[:spot_instance_request_ids]") unless params[:spot_instance_request_ids].nil?
        type
      end
    end

    module CancelSpotInstanceRequestsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelSpotInstanceRequestsOutput, context: context)
        type = Types::CancelSpotInstanceRequestsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cancelled_spot_instance_requests = CancelledSpotInstanceRequestList.build(params[:cancelled_spot_instance_requests], context: "#{context}[:cancelled_spot_instance_requests]") unless params[:cancelled_spot_instance_requests].nil?
        type
      end
    end

    module CancelledSpotInstanceRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CancelledSpotInstanceRequest, context: context)
        type = Types::CancelledSpotInstanceRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.spot_instance_request_id = params[:spot_instance_request_id]
        type.state = params[:state]
        type
      end
    end

    module CancelledSpotInstanceRequestList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CancelledSpotInstanceRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module CapacityAllocation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CapacityAllocation, context: context)
        type = Types::CapacityAllocation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_type = params[:allocation_type]
        type.count = params[:count]
        type
      end
    end

    module CapacityAllocations
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CapacityAllocation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module CapacityBlockOffering
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CapacityBlockOffering, context: context)
        type = Types::CapacityBlockOffering.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_block_offering_id = params[:capacity_block_offering_id]
        type.instance_type = params[:instance_type]
        type.availability_zone = params[:availability_zone]
        type.instance_count = params[:instance_count]
        type.start_date = params[:start_date]
        type.end_date = params[:end_date]
        type.capacity_block_duration_hours = params[:capacity_block_duration_hours]
        type.upfront_fee = params[:upfront_fee]
        type.currency_code = params[:currency_code]
        type.tenancy = params[:tenancy]
        type
      end
    end

    module CapacityBlockOfferingSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CapacityBlockOffering.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module CapacityReservation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CapacityReservation, context: context)
        type = Types::CapacityReservation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_id = params[:capacity_reservation_id]
        type.owner_id = params[:owner_id]
        type.capacity_reservation_arn = params[:capacity_reservation_arn]
        type.availability_zone_id = params[:availability_zone_id]
        type.instance_type = params[:instance_type]
        type.instance_platform = params[:instance_platform]
        type.availability_zone = params[:availability_zone]
        type.tenancy = params[:tenancy]
        type.total_instance_count = params[:total_instance_count]
        type.available_instance_count = params[:available_instance_count]
        type.ebs_optimized = params[:ebs_optimized]
        type.ephemeral_storage = params[:ephemeral_storage]
        type.state = params[:state]
        type.start_date = params[:start_date]
        type.end_date = params[:end_date]
        type.end_date_type = params[:end_date_type]
        type.instance_match_criteria = params[:instance_match_criteria]
        type.create_date = params[:create_date]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.outpost_arn = params[:outpost_arn]
        type.capacity_reservation_fleet_id = params[:capacity_reservation_fleet_id]
        type.placement_group_arn = params[:placement_group_arn]
        type.capacity_allocations = CapacityAllocations.build(params[:capacity_allocations], context: "#{context}[:capacity_allocations]") unless params[:capacity_allocations].nil?
        type.reservation_type = params[:reservation_type]
        type
      end
    end

    module CapacityReservationFleet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CapacityReservationFleet, context: context)
        type = Types::CapacityReservationFleet.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_fleet_id = params[:capacity_reservation_fleet_id]
        type.capacity_reservation_fleet_arn = params[:capacity_reservation_fleet_arn]
        type.state = params[:state]
        type.total_target_capacity = params[:total_target_capacity]
        type.total_fulfilled_capacity = params[:total_fulfilled_capacity]&.to_f
        type.tenancy = params[:tenancy]
        type.end_date = params[:end_date]
        type.create_time = params[:create_time]
        type.instance_match_criteria = params[:instance_match_criteria]
        type.allocation_strategy = params[:allocation_strategy]
        type.instance_type_specifications = FleetCapacityReservationSet.build(params[:instance_type_specifications], context: "#{context}[:instance_type_specifications]") unless params[:instance_type_specifications].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module CapacityReservationFleetCancellationState
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CapacityReservationFleetCancellationState, context: context)
        type = Types::CapacityReservationFleetCancellationState.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.current_fleet_state = params[:current_fleet_state]
        type.previous_fleet_state = params[:previous_fleet_state]
        type.capacity_reservation_fleet_id = params[:capacity_reservation_fleet_id]
        type
      end
    end

    module CapacityReservationFleetCancellationStateSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CapacityReservationFleetCancellationState.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module CapacityReservationFleetIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module CapacityReservationFleetSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CapacityReservationFleet.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module CapacityReservationGroup
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CapacityReservationGroup, context: context)
        type = Types::CapacityReservationGroup.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group_arn = params[:group_arn]
        type.owner_id = params[:owner_id]
        type
      end
    end

    module CapacityReservationGroupSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CapacityReservationGroup.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module CapacityReservationIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module CapacityReservationOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CapacityReservationOptions, context: context)
        type = Types::CapacityReservationOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.usage_strategy = params[:usage_strategy]
        type
      end
    end

    module CapacityReservationOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CapacityReservationOptionsRequest, context: context)
        type = Types::CapacityReservationOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.usage_strategy = params[:usage_strategy]
        type
      end
    end

    module CapacityReservationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CapacityReservation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module CapacityReservationSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CapacityReservationSpecification, context: context)
        type = Types::CapacityReservationSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_preference = params[:capacity_reservation_preference]
        type.capacity_reservation_target = CapacityReservationTarget.build(params[:capacity_reservation_target], context: "#{context}[:capacity_reservation_target]") unless params[:capacity_reservation_target].nil?
        type
      end
    end

    module CapacityReservationSpecificationResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CapacityReservationSpecificationResponse, context: context)
        type = Types::CapacityReservationSpecificationResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_preference = params[:capacity_reservation_preference]
        type.capacity_reservation_target = CapacityReservationTargetResponse.build(params[:capacity_reservation_target], context: "#{context}[:capacity_reservation_target]") unless params[:capacity_reservation_target].nil?
        type
      end
    end

    module CapacityReservationTarget
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CapacityReservationTarget, context: context)
        type = Types::CapacityReservationTarget.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_id = params[:capacity_reservation_id]
        type.capacity_reservation_resource_group_arn = params[:capacity_reservation_resource_group_arn]
        type
      end
    end

    module CapacityReservationTargetResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CapacityReservationTargetResponse, context: context)
        type = Types::CapacityReservationTargetResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_id = params[:capacity_reservation_id]
        type.capacity_reservation_resource_group_arn = params[:capacity_reservation_resource_group_arn]
        type
      end
    end

    module CarrierGateway
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CarrierGateway, context: context)
        type = Types::CarrierGateway.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.carrier_gateway_id = params[:carrier_gateway_id]
        type.vpc_id = params[:vpc_id]
        type.state = params[:state]
        type.owner_id = params[:owner_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module CarrierGatewayIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module CarrierGatewaySet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CarrierGateway.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module CertificateAuthentication
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CertificateAuthentication, context: context)
        type = Types::CertificateAuthentication.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_root_certificate_chain = params[:client_root_certificate_chain]
        type
      end
    end

    module CertificateAuthenticationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CertificateAuthenticationRequest, context: context)
        type = Types::CertificateAuthenticationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_root_certificate_chain_arn = params[:client_root_certificate_chain_arn]
        type
      end
    end

    module CidrAuthorizationContext
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CidrAuthorizationContext, context: context)
        type = Types::CidrAuthorizationContext.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.message = params[:message]
        type.signature = params[:signature]
        type
      end
    end

    module CidrBlock
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CidrBlock, context: context)
        type = Types::CidrBlock.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr_block = params[:cidr_block]
        type
      end
    end

    module CidrBlockSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CidrBlock.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ClassicLinkDnsSupport
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClassicLinkDnsSupport, context: context)
        type = Types::ClassicLinkDnsSupport.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.classic_link_dns_supported = params[:classic_link_dns_supported]
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module ClassicLinkDnsSupportList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ClassicLinkDnsSupport.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ClassicLinkInstance
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClassicLinkInstance, context: context)
        type = Types::ClassicLinkInstance.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.groups = GroupIdentifierList.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.instance_id = params[:instance_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module ClassicLinkInstanceList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ClassicLinkInstance.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ClassicLoadBalancer
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClassicLoadBalancer, context: context)
        type = Types::ClassicLoadBalancer.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.name = params[:name]
        type
      end
    end

    module ClassicLoadBalancers
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ClassicLoadBalancer.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ClassicLoadBalancersConfig
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClassicLoadBalancersConfig, context: context)
        type = Types::ClassicLoadBalancersConfig.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.classic_load_balancers = ClassicLoadBalancers.build(params[:classic_load_balancers], context: "#{context}[:classic_load_balancers]") unless params[:classic_load_balancers].nil?
        type
      end
    end

    module ClientCertificateRevocationListStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientCertificateRevocationListStatus, context: context)
        type = Types::ClientCertificateRevocationListStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module ClientConnectOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientConnectOptions, context: context)
        type = Types::ClientConnectOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type.lambda_function_arn = params[:lambda_function_arn]
        type
      end
    end

    module ClientConnectResponseOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientConnectResponseOptions, context: context)
        type = Types::ClientConnectResponseOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type.lambda_function_arn = params[:lambda_function_arn]
        type.status = ClientVpnEndpointAttributeStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type
      end
    end

    module ClientData
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientData, context: context)
        type = Types::ClientData.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.comment = params[:comment]
        type.upload_end = params[:upload_end]
        type.upload_size = params[:upload_size]&.to_f
        type.upload_start = params[:upload_start]
        type
      end
    end

    module ClientLoginBannerOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientLoginBannerOptions, context: context)
        type = Types::ClientLoginBannerOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type.banner_text = params[:banner_text]
        type
      end
    end

    module ClientLoginBannerResponseOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientLoginBannerResponseOptions, context: context)
        type = Types::ClientLoginBannerResponseOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type.banner_text = params[:banner_text]
        type
      end
    end

    module ClientVpnAuthentication
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientVpnAuthentication, context: context)
        type = Types::ClientVpnAuthentication.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.type = params[:type]
        type.active_directory = DirectoryServiceAuthentication.build(params[:active_directory], context: "#{context}[:active_directory]") unless params[:active_directory].nil?
        type.mutual_authentication = CertificateAuthentication.build(params[:mutual_authentication], context: "#{context}[:mutual_authentication]") unless params[:mutual_authentication].nil?
        type.federated_authentication = FederatedAuthentication.build(params[:federated_authentication], context: "#{context}[:federated_authentication]") unless params[:federated_authentication].nil?
        type
      end
    end

    module ClientVpnAuthenticationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ClientVpnAuthentication.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ClientVpnAuthenticationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientVpnAuthenticationRequest, context: context)
        type = Types::ClientVpnAuthenticationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.type = params[:type]
        type.active_directory = DirectoryServiceAuthenticationRequest.build(params[:active_directory], context: "#{context}[:active_directory]") unless params[:active_directory].nil?
        type.mutual_authentication = CertificateAuthenticationRequest.build(params[:mutual_authentication], context: "#{context}[:mutual_authentication]") unless params[:mutual_authentication].nil?
        type.federated_authentication = FederatedAuthenticationRequest.build(params[:federated_authentication], context: "#{context}[:federated_authentication]") unless params[:federated_authentication].nil?
        type
      end
    end

    module ClientVpnAuthenticationRequestList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ClientVpnAuthenticationRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ClientVpnAuthorizationRuleStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientVpnAuthorizationRuleStatus, context: context)
        type = Types::ClientVpnAuthorizationRuleStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module ClientVpnConnection
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientVpnConnection, context: context)
        type = Types::ClientVpnConnection.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.timestamp = params[:timestamp]
        type.connection_id = params[:connection_id]
        type.username = params[:username]
        type.connection_established_time = params[:connection_established_time]
        type.ingress_bytes = params[:ingress_bytes]
        type.egress_bytes = params[:egress_bytes]
        type.ingress_packets = params[:ingress_packets]
        type.egress_packets = params[:egress_packets]
        type.client_ip = params[:client_ip]
        type.common_name = params[:common_name]
        type.status = ClientVpnConnectionStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type.connection_end_time = params[:connection_end_time]
        type.posture_compliance_statuses = ValueStringList.build(params[:posture_compliance_statuses], context: "#{context}[:posture_compliance_statuses]") unless params[:posture_compliance_statuses].nil?
        type
      end
    end

    module ClientVpnConnectionSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ClientVpnConnection.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ClientVpnConnectionStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientVpnConnectionStatus, context: context)
        type = Types::ClientVpnConnectionStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module ClientVpnEndpoint
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientVpnEndpoint, context: context)
        type = Types::ClientVpnEndpoint.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.description = params[:description]
        type.status = ClientVpnEndpointStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type.creation_time = params[:creation_time]
        type.deletion_time = params[:deletion_time]
        type.dns_name = params[:dns_name]
        type.client_cidr_block = params[:client_cidr_block]
        type.dns_servers = ValueStringList.build(params[:dns_servers], context: "#{context}[:dns_servers]") unless params[:dns_servers].nil?
        type.split_tunnel = params[:split_tunnel]
        type.vpn_protocol = params[:vpn_protocol]
        type.transport_protocol = params[:transport_protocol]
        type.vpn_port = params[:vpn_port]
        type.associated_target_networks = AssociatedTargetNetworkSet.build(params[:associated_target_networks], context: "#{context}[:associated_target_networks]") unless params[:associated_target_networks].nil?
        type.server_certificate_arn = params[:server_certificate_arn]
        type.authentication_options = ClientVpnAuthenticationList.build(params[:authentication_options], context: "#{context}[:authentication_options]") unless params[:authentication_options].nil?
        type.connection_log_options = ConnectionLogResponseOptions.build(params[:connection_log_options], context: "#{context}[:connection_log_options]") unless params[:connection_log_options].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.security_group_ids = ClientVpnSecurityGroupIdSet.build(params[:security_group_ids], context: "#{context}[:security_group_ids]") unless params[:security_group_ids].nil?
        type.vpc_id = params[:vpc_id]
        type.self_service_portal_url = params[:self_service_portal_url]
        type.client_connect_options = ClientConnectResponseOptions.build(params[:client_connect_options], context: "#{context}[:client_connect_options]") unless params[:client_connect_options].nil?
        type.session_timeout_hours = params[:session_timeout_hours]
        type.client_login_banner_options = ClientLoginBannerResponseOptions.build(params[:client_login_banner_options], context: "#{context}[:client_login_banner_options]") unless params[:client_login_banner_options].nil?
        type
      end
    end

    module ClientVpnEndpointAttributeStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientVpnEndpointAttributeStatus, context: context)
        type = Types::ClientVpnEndpointAttributeStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module ClientVpnEndpointIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ClientVpnEndpointStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientVpnEndpointStatus, context: context)
        type = Types::ClientVpnEndpointStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module ClientVpnRoute
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientVpnRoute, context: context)
        type = Types::ClientVpnRoute.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.destination_cidr = params[:destination_cidr]
        type.target_subnet = params[:target_subnet]
        type.type = params[:type]
        type.origin = params[:origin]
        type.status = ClientVpnRouteStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type.description = params[:description]
        type
      end
    end

    module ClientVpnRouteSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ClientVpnRoute.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ClientVpnRouteStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ClientVpnRouteStatus, context: context)
        type = Types::ClientVpnRouteStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module ClientVpnSecurityGroupIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module CloudWatchLogOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CloudWatchLogOptions, context: context)
        type = Types::CloudWatchLogOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.log_enabled = params[:log_enabled]
        type.log_group_arn = params[:log_group_arn]
        type.log_output_format = params[:log_output_format]
        type
      end
    end

    module CloudWatchLogOptionsSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CloudWatchLogOptionsSpecification, context: context)
        type = Types::CloudWatchLogOptionsSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.log_enabled = params[:log_enabled]
        type.log_group_arn = params[:log_group_arn]
        type.log_output_format = params[:log_output_format]
        type
      end
    end

    module CoipAddressUsage
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CoipAddressUsage, context: context)
        type = Types::CoipAddressUsage.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_id = params[:allocation_id]
        type.aws_account_id = params[:aws_account_id]
        type.aws_service = params[:aws_service]
        type.co_ip = params[:co_ip]
        type
      end
    end

    module CoipAddressUsageSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CoipAddressUsage.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module CoipCidr
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CoipCidr, context: context)
        type = Types::CoipCidr.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type.coip_pool_id = params[:coip_pool_id]
        type.local_gateway_route_table_id = params[:local_gateway_route_table_id]
        type
      end
    end

    module CoipPool
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CoipPool, context: context)
        type = Types::CoipPool.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.pool_id = params[:pool_id]
        type.pool_cidrs = ValueStringList.build(params[:pool_cidrs], context: "#{context}[:pool_cidrs]") unless params[:pool_cidrs].nil?
        type.local_gateway_route_table_id = params[:local_gateway_route_table_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.pool_arn = params[:pool_arn]
        type
      end
    end

    module CoipPoolIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module CoipPoolSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CoipPool.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ConfirmProductInstanceInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ConfirmProductInstanceInput, context: context)
        type = Types::ConfirmProductInstanceInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.product_code = params[:product_code]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ConfirmProductInstanceOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ConfirmProductInstanceOutput, context: context)
        type = Types::ConfirmProductInstanceOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.owner_id = params[:owner_id]
        type.return = params[:return]
        type
      end
    end

    module ConnectionLogOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ConnectionLogOptions, context: context)
        type = Types::ConnectionLogOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type.cloudwatch_log_group = params[:cloudwatch_log_group]
        type.cloudwatch_log_stream = params[:cloudwatch_log_stream]
        type
      end
    end

    module ConnectionLogResponseOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ConnectionLogResponseOptions, context: context)
        type = Types::ConnectionLogResponseOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type.cloudwatch_log_group = params[:cloudwatch_log_group]
        type.cloudwatch_log_stream = params[:cloudwatch_log_stream]
        type
      end
    end

    module ConnectionNotification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ConnectionNotification, context: context)
        type = Types::ConnectionNotification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.connection_notification_id = params[:connection_notification_id]
        type.service_id = params[:service_id]
        type.vpc_endpoint_id = params[:vpc_endpoint_id]
        type.connection_notification_type = params[:connection_notification_type]
        type.connection_notification_arn = params[:connection_notification_arn]
        type.connection_events = ValueStringList.build(params[:connection_events], context: "#{context}[:connection_events]") unless params[:connection_events].nil?
        type.connection_notification_state = params[:connection_notification_state]
        type
      end
    end

    module ConnectionNotificationIdsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ConnectionNotificationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ConnectionNotification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ConnectionTrackingConfiguration
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ConnectionTrackingConfiguration, context: context)
        type = Types::ConnectionTrackingConfiguration.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.tcp_established_timeout = params[:tcp_established_timeout]
        type.udp_stream_timeout = params[:udp_stream_timeout]
        type.udp_timeout = params[:udp_timeout]
        type
      end
    end

    module ConnectionTrackingSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ConnectionTrackingSpecification, context: context)
        type = Types::ConnectionTrackingSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.tcp_established_timeout = params[:tcp_established_timeout]
        type.udp_timeout = params[:udp_timeout]
        type.udp_stream_timeout = params[:udp_stream_timeout]
        type
      end
    end

    module ConnectionTrackingSpecificationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ConnectionTrackingSpecificationRequest, context: context)
        type = Types::ConnectionTrackingSpecificationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.tcp_established_timeout = params[:tcp_established_timeout]
        type.udp_stream_timeout = params[:udp_stream_timeout]
        type.udp_timeout = params[:udp_timeout]
        type
      end
    end

    module ConnectionTrackingSpecificationResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ConnectionTrackingSpecificationResponse, context: context)
        type = Types::ConnectionTrackingSpecificationResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.tcp_established_timeout = params[:tcp_established_timeout]
        type.udp_stream_timeout = params[:udp_stream_timeout]
        type.udp_timeout = params[:udp_timeout]
        type
      end
    end

    module ConversionIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ConversionTask
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ConversionTask, context: context)
        type = Types::ConversionTask.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.conversion_task_id = params[:conversion_task_id]
        type.expiration_time = params[:expiration_time]
        type.import_instance = ImportInstanceTaskDetails.build(params[:import_instance], context: "#{context}[:import_instance]") unless params[:import_instance].nil?
        type.import_volume = ImportVolumeTaskDetails.build(params[:import_volume], context: "#{context}[:import_volume]") unless params[:import_volume].nil?
        type.state = params[:state]
        type.status_message = params[:status_message]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module CopyFpgaImageInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CopyFpgaImageInput, context: context)
        type = Types::CopyFpgaImageInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.source_fpga_image_id = params[:source_fpga_image_id]
        type.description = params[:description]
        type.name = params[:name]
        type.source_region = params[:source_region]
        type.client_token = params[:client_token]
        type
      end
    end

    module CopyFpgaImageOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CopyFpgaImageOutput, context: context)
        type = Types::CopyFpgaImageOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.fpga_image_id = params[:fpga_image_id]
        type
      end
    end

    module CopyImageInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CopyImageInput, context: context)
        type = Types::CopyImageInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_token = params[:client_token]
        type.description = params[:description]
        type.encrypted = params[:encrypted]
        type.kms_key_id = params[:kms_key_id]
        type.name = params[:name]
        type.source_image_id = params[:source_image_id]
        type.source_region = params[:source_region]
        type.destination_outpost_arn = params[:destination_outpost_arn]
        type.dry_run = params[:dry_run]
        type.copy_image_tags = params[:copy_image_tags]
        type
      end
    end

    module CopyImageOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CopyImageOutput, context: context)
        type = Types::CopyImageOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type
      end
    end

    module CopySnapshotInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CopySnapshotInput, context: context)
        type = Types::CopySnapshotInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.destination_outpost_arn = params[:destination_outpost_arn]
        type.destination_region = params[:destination_region]
        type.encrypted = params[:encrypted]
        type.kms_key_id = params[:kms_key_id]
        type.presigned_url = params[:presigned_url]
        type.source_region = params[:source_region]
        type.source_snapshot_id = params[:source_snapshot_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CopySnapshotOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CopySnapshotOutput, context: context)
        type = Types::CopySnapshotOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module CoreCountList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module CpuManufacturerSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module CpuOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CpuOptions, context: context)
        type = Types::CpuOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.core_count = params[:core_count]
        type.threads_per_core = params[:threads_per_core]
        type.amd_sev_snp = params[:amd_sev_snp]
        type
      end
    end

    module CpuOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CpuOptionsRequest, context: context)
        type = Types::CpuOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.core_count = params[:core_count]
        type.threads_per_core = params[:threads_per_core]
        type.amd_sev_snp = params[:amd_sev_snp]
        type
      end
    end

    module CreateCapacityReservationFleetInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateCapacityReservationFleetInput, context: context)
        type = Types::CreateCapacityReservationFleetInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_strategy = params[:allocation_strategy]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.instance_type_specifications = ReservationFleetInstanceSpecificationList.build(params[:instance_type_specifications], context: "#{context}[:instance_type_specifications]") unless params[:instance_type_specifications].nil?
        type.tenancy = params[:tenancy]
        type.total_target_capacity = params[:total_target_capacity]
        type.end_date = params[:end_date]
        type.instance_match_criteria = params[:instance_match_criteria]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateCapacityReservationFleetOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateCapacityReservationFleetOutput, context: context)
        type = Types::CreateCapacityReservationFleetOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_fleet_id = params[:capacity_reservation_fleet_id]
        type.state = params[:state]
        type.total_target_capacity = params[:total_target_capacity]
        type.total_fulfilled_capacity = params[:total_fulfilled_capacity]&.to_f
        type.instance_match_criteria = params[:instance_match_criteria]
        type.allocation_strategy = params[:allocation_strategy]
        type.create_time = params[:create_time]
        type.end_date = params[:end_date]
        type.tenancy = params[:tenancy]
        type.fleet_capacity_reservations = FleetCapacityReservationSet.build(params[:fleet_capacity_reservations], context: "#{context}[:fleet_capacity_reservations]") unless params[:fleet_capacity_reservations].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module CreateCapacityReservationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateCapacityReservationInput, context: context)
        type = Types::CreateCapacityReservationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_token = params[:client_token]
        type.instance_type = params[:instance_type]
        type.instance_platform = params[:instance_platform]
        type.availability_zone = params[:availability_zone]
        type.availability_zone_id = params[:availability_zone_id]
        type.tenancy = params[:tenancy]
        type.instance_count = params[:instance_count]
        type.ebs_optimized = params[:ebs_optimized]
        type.ephemeral_storage = params[:ephemeral_storage]
        type.end_date = params[:end_date]
        type.end_date_type = params[:end_date_type]
        type.instance_match_criteria = params[:instance_match_criteria]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type.outpost_arn = params[:outpost_arn]
        type.placement_group_arn = params[:placement_group_arn]
        type
      end
    end

    module CreateCapacityReservationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateCapacityReservationOutput, context: context)
        type = Types::CreateCapacityReservationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation = CapacityReservation.build(params[:capacity_reservation], context: "#{context}[:capacity_reservation]") unless params[:capacity_reservation].nil?
        type
      end
    end

    module CreateCarrierGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateCarrierGatewayInput, context: context)
        type = Types::CreateCarrierGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_id = params[:vpc_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module CreateCarrierGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateCarrierGatewayOutput, context: context)
        type = Types::CreateCarrierGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.carrier_gateway = CarrierGateway.build(params[:carrier_gateway], context: "#{context}[:carrier_gateway]") unless params[:carrier_gateway].nil?
        type
      end
    end

    module CreateClientVpnEndpointInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateClientVpnEndpointInput, context: context)
        type = Types::CreateClientVpnEndpointInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_cidr_block = params[:client_cidr_block]
        type.server_certificate_arn = params[:server_certificate_arn]
        type.authentication_options = ClientVpnAuthenticationRequestList.build(params[:authentication_options], context: "#{context}[:authentication_options]") unless params[:authentication_options].nil?
        type.connection_log_options = ConnectionLogOptions.build(params[:connection_log_options], context: "#{context}[:connection_log_options]") unless params[:connection_log_options].nil?
        type.dns_servers = ValueStringList.build(params[:dns_servers], context: "#{context}[:dns_servers]") unless params[:dns_servers].nil?
        type.transport_protocol = params[:transport_protocol]
        type.vpn_port = params[:vpn_port]
        type.description = params[:description]
        type.split_tunnel = params[:split_tunnel]
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.security_group_ids = ClientVpnSecurityGroupIdSet.build(params[:security_group_ids], context: "#{context}[:security_group_ids]") unless params[:security_group_ids].nil?
        type.vpc_id = params[:vpc_id]
        type.self_service_portal = params[:self_service_portal]
        type.client_connect_options = ClientConnectOptions.build(params[:client_connect_options], context: "#{context}[:client_connect_options]") unless params[:client_connect_options].nil?
        type.session_timeout_hours = params[:session_timeout_hours]
        type.client_login_banner_options = ClientLoginBannerOptions.build(params[:client_login_banner_options], context: "#{context}[:client_login_banner_options]") unless params[:client_login_banner_options].nil?
        type
      end
    end

    module CreateClientVpnEndpointOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateClientVpnEndpointOutput, context: context)
        type = Types::CreateClientVpnEndpointOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.status = ClientVpnEndpointStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type.dns_name = params[:dns_name]
        type
      end
    end

    module CreateClientVpnRouteInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateClientVpnRouteInput, context: context)
        type = Types::CreateClientVpnRouteInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.destination_cidr_block = params[:destination_cidr_block]
        type.target_vpc_subnet_id = params[:target_vpc_subnet_id]
        type.description = params[:description]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateClientVpnRouteOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateClientVpnRouteOutput, context: context)
        type = Types::CreateClientVpnRouteOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.status = ClientVpnRouteStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type
      end
    end

    module CreateCoipCidrInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateCoipCidrInput, context: context)
        type = Types::CreateCoipCidrInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type.coip_pool_id = params[:coip_pool_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateCoipCidrOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateCoipCidrOutput, context: context)
        type = Types::CreateCoipCidrOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.coip_cidr = CoipCidr.build(params[:coip_cidr], context: "#{context}[:coip_cidr]") unless params[:coip_cidr].nil?
        type
      end
    end

    module CreateCoipPoolInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateCoipPoolInput, context: context)
        type = Types::CreateCoipPoolInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_id = params[:local_gateway_route_table_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateCoipPoolOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateCoipPoolOutput, context: context)
        type = Types::CreateCoipPoolOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.coip_pool = CoipPool.build(params[:coip_pool], context: "#{context}[:coip_pool]") unless params[:coip_pool].nil?
        type
      end
    end

    module CreateCustomerGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateCustomerGatewayInput, context: context)
        type = Types::CreateCustomerGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.bgp_asn = params[:bgp_asn]
        type.public_ip = params[:public_ip]
        type.certificate_arn = params[:certificate_arn]
        type.type = params[:type]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.device_name = params[:device_name]
        type.ip_address = params[:ip_address]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateCustomerGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateCustomerGatewayOutput, context: context)
        type = Types::CreateCustomerGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.customer_gateway = CustomerGateway.build(params[:customer_gateway], context: "#{context}[:customer_gateway]") unless params[:customer_gateway].nil?
        type
      end
    end

    module CreateDefaultSubnetInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateDefaultSubnetInput, context: context)
        type = Types::CreateDefaultSubnetInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.dry_run = params[:dry_run]
        type.ipv6_native = params[:ipv6_native]
        type
      end
    end

    module CreateDefaultSubnetOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateDefaultSubnetOutput, context: context)
        type = Types::CreateDefaultSubnetOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.subnet = Subnet.build(params[:subnet], context: "#{context}[:subnet]") unless params[:subnet].nil?
        type
      end
    end

    module CreateDefaultVpcInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateDefaultVpcInput, context: context)
        type = Types::CreateDefaultVpcInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateDefaultVpcOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateDefaultVpcOutput, context: context)
        type = Types::CreateDefaultVpcOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc = Vpc.build(params[:vpc], context: "#{context}[:vpc]") unless params[:vpc].nil?
        type
      end
    end

    module CreateDhcpOptionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateDhcpOptionsInput, context: context)
        type = Types::CreateDhcpOptionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dhcp_configurations = NewDhcpConfigurationList.build(params[:dhcp_configurations], context: "#{context}[:dhcp_configurations]") unless params[:dhcp_configurations].nil?
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateDhcpOptionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateDhcpOptionsOutput, context: context)
        type = Types::CreateDhcpOptionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dhcp_options = DhcpOptions.build(params[:dhcp_options], context: "#{context}[:dhcp_options]") unless params[:dhcp_options].nil?
        type
      end
    end

    module CreateEgressOnlyInternetGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateEgressOnlyInternetGatewayInput, context: context)
        type = Types::CreateEgressOnlyInternetGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_token = params[:client_token]
        type.dry_run = params[:dry_run]
        type.vpc_id = params[:vpc_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module CreateEgressOnlyInternetGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateEgressOnlyInternetGatewayOutput, context: context)
        type = Types::CreateEgressOnlyInternetGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_token = params[:client_token]
        type.egress_only_internet_gateway = EgressOnlyInternetGateway.build(params[:egress_only_internet_gateway], context: "#{context}[:egress_only_internet_gateway]") unless params[:egress_only_internet_gateway].nil?
        type
      end
    end

    module CreateFleetError
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateFleetError, context: context)
        type = Types::CreateFleetError.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_and_overrides = LaunchTemplateAndOverridesResponse.build(params[:launch_template_and_overrides], context: "#{context}[:launch_template_and_overrides]") unless params[:launch_template_and_overrides].nil?
        type.lifecycle = params[:lifecycle]
        type.error_code = params[:error_code]
        type.error_message = params[:error_message]
        type
      end
    end

    module CreateFleetErrorsSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CreateFleetError.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module CreateFleetInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateFleetInput, context: context)
        type = Types::CreateFleetInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token]
        type.spot_options = SpotOptionsRequest.build(params[:spot_options], context: "#{context}[:spot_options]") unless params[:spot_options].nil?
        type.on_demand_options = OnDemandOptionsRequest.build(params[:on_demand_options], context: "#{context}[:on_demand_options]") unless params[:on_demand_options].nil?
        type.excess_capacity_termination_policy = params[:excess_capacity_termination_policy]
        type.launch_template_configs = FleetLaunchTemplateConfigListRequest.build(params[:launch_template_configs], context: "#{context}[:launch_template_configs]") unless params[:launch_template_configs].nil?
        type.target_capacity_specification = TargetCapacitySpecificationRequest.build(params[:target_capacity_specification], context: "#{context}[:target_capacity_specification]") unless params[:target_capacity_specification].nil?
        type.terminate_instances_with_expiration = params[:terminate_instances_with_expiration]
        type.type = params[:type]
        type.valid_from = params[:valid_from]
        type.valid_until = params[:valid_until]
        type.replace_unhealthy_instances = params[:replace_unhealthy_instances]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.context = params[:context]
        type
      end
    end

    module CreateFleetInstance
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateFleetInstance, context: context)
        type = Types::CreateFleetInstance.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_and_overrides = LaunchTemplateAndOverridesResponse.build(params[:launch_template_and_overrides], context: "#{context}[:launch_template_and_overrides]") unless params[:launch_template_and_overrides].nil?
        type.lifecycle = params[:lifecycle]
        type.instance_ids = InstanceIdsSet.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.instance_type = params[:instance_type]
        type.platform = params[:platform]
        type
      end
    end

    module CreateFleetInstancesSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CreateFleetInstance.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module CreateFleetOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateFleetOutput, context: context)
        type = Types::CreateFleetOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.fleet_id = params[:fleet_id]
        type.errors = CreateFleetErrorsSet.build(params[:errors], context: "#{context}[:errors]") unless params[:errors].nil?
        type.instances = CreateFleetInstancesSet.build(params[:instances], context: "#{context}[:instances]") unless params[:instances].nil?
        type
      end
    end

    module CreateFlowLogsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateFlowLogsInput, context: context)
        type = Types::CreateFlowLogsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token]
        type.deliver_logs_permission_arn = params[:deliver_logs_permission_arn]
        type.deliver_cross_account_role = params[:deliver_cross_account_role]
        type.log_group_name = params[:log_group_name]
        type.resource_ids = FlowLogResourceIds.build(params[:resource_ids], context: "#{context}[:resource_ids]") unless params[:resource_ids].nil?
        type.resource_type = params[:resource_type]
        type.traffic_type = params[:traffic_type]
        type.log_destination_type = params[:log_destination_type]
        type.log_destination = params[:log_destination]
        type.log_format = params[:log_format]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.max_aggregation_interval = params[:max_aggregation_interval]
        type.destination_options = DestinationOptionsRequest.build(params[:destination_options], context: "#{context}[:destination_options]") unless params[:destination_options].nil?
        type
      end
    end

    module CreateFlowLogsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateFlowLogsOutput, context: context)
        type = Types::CreateFlowLogsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_token = params[:client_token]
        type.flow_log_ids = ValueStringList.build(params[:flow_log_ids], context: "#{context}[:flow_log_ids]") unless params[:flow_log_ids].nil?
        type.unsuccessful = UnsuccessfulItemSet.build(params[:unsuccessful], context: "#{context}[:unsuccessful]") unless params[:unsuccessful].nil?
        type
      end
    end

    module CreateFpgaImageInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateFpgaImageInput, context: context)
        type = Types::CreateFpgaImageInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.input_storage_location = StorageLocation.build(params[:input_storage_location], context: "#{context}[:input_storage_location]") unless params[:input_storage_location].nil?
        type.logs_storage_location = StorageLocation.build(params[:logs_storage_location], context: "#{context}[:logs_storage_location]") unless params[:logs_storage_location].nil?
        type.description = params[:description]
        type.name = params[:name]
        type.client_token = params[:client_token]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module CreateFpgaImageOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateFpgaImageOutput, context: context)
        type = Types::CreateFpgaImageOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.fpga_image_id = params[:fpga_image_id]
        type.fpga_image_global_id = params[:fpga_image_global_id]
        type
      end
    end

    module CreateImageInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateImageInput, context: context)
        type = Types::CreateImageInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.block_device_mappings = BlockDeviceMappingRequestList.build(params[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless params[:block_device_mappings].nil?
        type.description = params[:description]
        type.dry_run = params[:dry_run]
        type.instance_id = params[:instance_id]
        type.name = params[:name]
        type.no_reboot = params[:no_reboot]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module CreateImageOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateImageOutput, context: context)
        type = Types::CreateImageOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type
      end
    end

    module CreateInstanceConnectEndpointInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateInstanceConnectEndpointInput, context: context)
        type = Types::CreateInstanceConnectEndpointInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.subnet_id = params[:subnet_id]
        type.security_group_ids = SecurityGroupIdStringListRequest.build(params[:security_group_ids], context: "#{context}[:security_group_ids]") unless params[:security_group_ids].nil?
        type.preserve_client_ip = params[:preserve_client_ip]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module CreateInstanceConnectEndpointOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateInstanceConnectEndpointOutput, context: context)
        type = Types::CreateInstanceConnectEndpointOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_connect_endpoint = Ec2InstanceConnectEndpoint.build(params[:instance_connect_endpoint], context: "#{context}[:instance_connect_endpoint]") unless params[:instance_connect_endpoint].nil?
        type.client_token = params[:client_token]
        type
      end
    end

    module CreateInstanceEventWindowInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateInstanceEventWindowInput, context: context)
        type = Types::CreateInstanceEventWindowInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.name = params[:name]
        type.time_ranges = InstanceEventWindowTimeRangeRequestSet.build(params[:time_ranges], context: "#{context}[:time_ranges]") unless params[:time_ranges].nil?
        type.cron_expression = params[:cron_expression]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module CreateInstanceEventWindowOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateInstanceEventWindowOutput, context: context)
        type = Types::CreateInstanceEventWindowOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_event_window = InstanceEventWindow.build(params[:instance_event_window], context: "#{context}[:instance_event_window]") unless params[:instance_event_window].nil?
        type
      end
    end

    module CreateInstanceExportTaskInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateInstanceExportTaskInput, context: context)
        type = Types::CreateInstanceExportTaskInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.export_to_s3_task = ExportToS3TaskSpecification.build(params[:export_to_s3_task], context: "#{context}[:export_to_s3_task]") unless params[:export_to_s3_task].nil?
        type.instance_id = params[:instance_id]
        type.target_environment = params[:target_environment]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module CreateInstanceExportTaskOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateInstanceExportTaskOutput, context: context)
        type = Types::CreateInstanceExportTaskOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.export_task = ExportTask.build(params[:export_task], context: "#{context}[:export_task]") unless params[:export_task].nil?
        type
      end
    end

    module CreateInternetGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateInternetGatewayInput, context: context)
        type = Types::CreateInternetGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateInternetGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateInternetGatewayOutput, context: context)
        type = Types::CreateInternetGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.internet_gateway = InternetGateway.build(params[:internet_gateway], context: "#{context}[:internet_gateway]") unless params[:internet_gateway].nil?
        type
      end
    end

    module CreateIpamInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateIpamInput, context: context)
        type = Types::CreateIpamInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.description = params[:description]
        type.operating_regions = AddIpamOperatingRegionSet.build(params[:operating_regions], context: "#{context}[:operating_regions]") unless params[:operating_regions].nil?
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.tier = params[:tier]
        type
      end
    end

    module CreateIpamOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateIpamOutput, context: context)
        type = Types::CreateIpamOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam = Ipam.build(params[:ipam], context: "#{context}[:ipam]") unless params[:ipam].nil?
        type
      end
    end

    module CreateIpamPoolInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateIpamPoolInput, context: context)
        type = Types::CreateIpamPoolInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_scope_id = params[:ipam_scope_id]
        type.locale = params[:locale]
        type.source_ipam_pool_id = params[:source_ipam_pool_id]
        type.description = params[:description]
        type.address_family = params[:address_family]
        type.auto_import = params[:auto_import]
        type.publicly_advertisable = params[:publicly_advertisable]
        type.allocation_min_netmask_length = params[:allocation_min_netmask_length]
        type.allocation_max_netmask_length = params[:allocation_max_netmask_length]
        type.allocation_default_netmask_length = params[:allocation_default_netmask_length]
        type.allocation_resource_tags = RequestIpamResourceTagList.build(params[:allocation_resource_tags], context: "#{context}[:allocation_resource_tags]") unless params[:allocation_resource_tags].nil?
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.aws_service = params[:aws_service]
        type.public_ip_source = params[:public_ip_source]
        type.source_resource = IpamPoolSourceResourceRequest.build(params[:source_resource], context: "#{context}[:source_resource]") unless params[:source_resource].nil?
        type
      end
    end

    module CreateIpamPoolOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateIpamPoolOutput, context: context)
        type = Types::CreateIpamPoolOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_pool = IpamPool.build(params[:ipam_pool], context: "#{context}[:ipam_pool]") unless params[:ipam_pool].nil?
        type
      end
    end

    module CreateIpamResourceDiscoveryInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateIpamResourceDiscoveryInput, context: context)
        type = Types::CreateIpamResourceDiscoveryInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.description = params[:description]
        type.operating_regions = AddIpamOperatingRegionSet.build(params[:operating_regions], context: "#{context}[:operating_regions]") unless params[:operating_regions].nil?
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module CreateIpamResourceDiscoveryOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateIpamResourceDiscoveryOutput, context: context)
        type = Types::CreateIpamResourceDiscoveryOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_resource_discovery = IpamResourceDiscovery.build(params[:ipam_resource_discovery], context: "#{context}[:ipam_resource_discovery]") unless params[:ipam_resource_discovery].nil?
        type
      end
    end

    module CreateIpamScopeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateIpamScopeInput, context: context)
        type = Types::CreateIpamScopeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_id = params[:ipam_id]
        type.description = params[:description]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module CreateIpamScopeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateIpamScopeOutput, context: context)
        type = Types::CreateIpamScopeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_scope = IpamScope.build(params[:ipam_scope], context: "#{context}[:ipam_scope]") unless params[:ipam_scope].nil?
        type
      end
    end

    module CreateKeyPairInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateKeyPairInput, context: context)
        type = Types::CreateKeyPairInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.key_name = params[:key_name]
        type.dry_run = params[:dry_run]
        type.key_type = params[:key_type]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.key_format = params[:key_format]
        type
      end
    end

    module CreateKeyPairOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateKeyPairOutput, context: context)
        type = Types::CreateKeyPairOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.key_fingerprint = params[:key_fingerprint]
        type.key_material = params[:key_material]
        type.key_name = params[:key_name]
        type.key_pair_id = params[:key_pair_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module CreateLaunchTemplateInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateLaunchTemplateInput, context: context)
        type = Types::CreateLaunchTemplateInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token]
        type.launch_template_name = params[:launch_template_name]
        type.version_description = params[:version_description]
        type.launch_template_data = RequestLaunchTemplateData.build(params[:launch_template_data], context: "#{context}[:launch_template_data]") unless params[:launch_template_data].nil?
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module CreateLaunchTemplateOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateLaunchTemplateOutput, context: context)
        type = Types::CreateLaunchTemplateOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template = LaunchTemplate.build(params[:launch_template], context: "#{context}[:launch_template]") unless params[:launch_template].nil?
        type.warning = ValidationWarning.build(params[:warning], context: "#{context}[:warning]") unless params[:warning].nil?
        type
      end
    end

    module CreateLaunchTemplateVersionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateLaunchTemplateVersionInput, context: context)
        type = Types::CreateLaunchTemplateVersionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token]
        type.launch_template_id = params[:launch_template_id]
        type.launch_template_name = params[:launch_template_name]
        type.source_version = params[:source_version]
        type.version_description = params[:version_description]
        type.launch_template_data = RequestLaunchTemplateData.build(params[:launch_template_data], context: "#{context}[:launch_template_data]") unless params[:launch_template_data].nil?
        type.resolve_alias = params[:resolve_alias]
        type
      end
    end

    module CreateLaunchTemplateVersionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateLaunchTemplateVersionOutput, context: context)
        type = Types::CreateLaunchTemplateVersionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_version = LaunchTemplateVersion.build(params[:launch_template_version], context: "#{context}[:launch_template_version]") unless params[:launch_template_version].nil?
        type.warning = ValidationWarning.build(params[:warning], context: "#{context}[:warning]") unless params[:warning].nil?
        type
      end
    end

    module CreateLocalGatewayRouteInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateLocalGatewayRouteInput, context: context)
        type = Types::CreateLocalGatewayRouteInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr_block = params[:destination_cidr_block]
        type.local_gateway_route_table_id = params[:local_gateway_route_table_id]
        type.local_gateway_virtual_interface_group_id = params[:local_gateway_virtual_interface_group_id]
        type.dry_run = params[:dry_run]
        type.network_interface_id = params[:network_interface_id]
        type.destination_prefix_list_id = params[:destination_prefix_list_id]
        type
      end
    end

    module CreateLocalGatewayRouteOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateLocalGatewayRouteOutput, context: context)
        type = Types::CreateLocalGatewayRouteOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.route = LocalGatewayRoute.build(params[:route], context: "#{context}[:route]") unless params[:route].nil?
        type
      end
    end

    module CreateLocalGatewayRouteTableInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateLocalGatewayRouteTableInput, context: context)
        type = Types::CreateLocalGatewayRouteTableInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_id = params[:local_gateway_id]
        type.mode = params[:mode]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateLocalGatewayRouteTableOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateLocalGatewayRouteTableOutput, context: context)
        type = Types::CreateLocalGatewayRouteTableOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table = LocalGatewayRouteTable.build(params[:local_gateway_route_table], context: "#{context}[:local_gateway_route_table]") unless params[:local_gateway_route_table].nil?
        type
      end
    end

    module CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput, context: context)
        type = Types::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_id = params[:local_gateway_route_table_id]
        type.local_gateway_virtual_interface_group_id = params[:local_gateway_virtual_interface_group_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput, context: context)
        type = Types::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_virtual_interface_group_association = LocalGatewayRouteTableVirtualInterfaceGroupAssociation.build(params[:local_gateway_route_table_virtual_interface_group_association], context: "#{context}[:local_gateway_route_table_virtual_interface_group_association]") unless params[:local_gateway_route_table_virtual_interface_group_association].nil?
        type
      end
    end

    module CreateLocalGatewayRouteTableVpcAssociationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateLocalGatewayRouteTableVpcAssociationInput, context: context)
        type = Types::CreateLocalGatewayRouteTableVpcAssociationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_id = params[:local_gateway_route_table_id]
        type.vpc_id = params[:vpc_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateLocalGatewayRouteTableVpcAssociationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateLocalGatewayRouteTableVpcAssociationOutput, context: context)
        type = Types::CreateLocalGatewayRouteTableVpcAssociationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_vpc_association = LocalGatewayRouteTableVpcAssociation.build(params[:local_gateway_route_table_vpc_association], context: "#{context}[:local_gateway_route_table_vpc_association]") unless params[:local_gateway_route_table_vpc_association].nil?
        type
      end
    end

    module CreateManagedPrefixListInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateManagedPrefixListInput, context: context)
        type = Types::CreateManagedPrefixListInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.prefix_list_name = params[:prefix_list_name]
        type.entries = AddPrefixListEntries.build(params[:entries], context: "#{context}[:entries]") unless params[:entries].nil?
        type.max_entries = params[:max_entries]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.address_family = params[:address_family]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module CreateManagedPrefixListOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateManagedPrefixListOutput, context: context)
        type = Types::CreateManagedPrefixListOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.prefix_list = ManagedPrefixList.build(params[:prefix_list], context: "#{context}[:prefix_list]") unless params[:prefix_list].nil?
        type
      end
    end

    module CreateNatGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateNatGatewayInput, context: context)
        type = Types::CreateNatGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_id = params[:allocation_id]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type.subnet_id = params[:subnet_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.connectivity_type = params[:connectivity_type]
        type.private_ip_address = params[:private_ip_address]
        type.secondary_allocation_ids = AllocationIdList.build(params[:secondary_allocation_ids], context: "#{context}[:secondary_allocation_ids]") unless params[:secondary_allocation_ids].nil?
        type.secondary_private_ip_addresses = IpList.build(params[:secondary_private_ip_addresses], context: "#{context}[:secondary_private_ip_addresses]") unless params[:secondary_private_ip_addresses].nil?
        type.secondary_private_ip_address_count = params[:secondary_private_ip_address_count]
        type
      end
    end

    module CreateNatGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateNatGatewayOutput, context: context)
        type = Types::CreateNatGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_token = params[:client_token]
        type.nat_gateway = NatGateway.build(params[:nat_gateway], context: "#{context}[:nat_gateway]") unless params[:nat_gateway].nil?
        type
      end
    end

    module CreateNetworkAclEntryInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateNetworkAclEntryInput, context: context)
        type = Types::CreateNetworkAclEntryInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr_block = params[:cidr_block]
        type.dry_run = params[:dry_run]
        type.egress = params[:egress]
        type.icmp_type_code = IcmpTypeCode.build(params[:icmp_type_code], context: "#{context}[:icmp_type_code]") unless params[:icmp_type_code].nil?
        type.ipv6_cidr_block = params[:ipv6_cidr_block]
        type.network_acl_id = params[:network_acl_id]
        type.port_range = PortRange.build(params[:port_range], context: "#{context}[:port_range]") unless params[:port_range].nil?
        type.protocol = params[:protocol]
        type.rule_action = params[:rule_action]
        type.rule_number = params[:rule_number]
        type
      end
    end

    module CreateNetworkAclEntryOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateNetworkAclEntryOutput, context: context)
        type = Types::CreateNetworkAclEntryOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module CreateNetworkAclInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateNetworkAclInput, context: context)
        type = Types::CreateNetworkAclInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.vpc_id = params[:vpc_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module CreateNetworkAclOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateNetworkAclOutput, context: context)
        type = Types::CreateNetworkAclOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_acl = NetworkAcl.build(params[:network_acl], context: "#{context}[:network_acl]") unless params[:network_acl].nil?
        type.client_token = params[:client_token]
        type
      end
    end

    module CreateNetworkInsightsAccessScopeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateNetworkInsightsAccessScopeInput, context: context)
        type = Types::CreateNetworkInsightsAccessScopeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.match_paths = AccessScopePathListRequest.build(params[:match_paths], context: "#{context}[:match_paths]") unless params[:match_paths].nil?
        type.exclude_paths = AccessScopePathListRequest.build(params[:exclude_paths], context: "#{context}[:exclude_paths]") unless params[:exclude_paths].nil?
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateNetworkInsightsAccessScopeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateNetworkInsightsAccessScopeOutput, context: context)
        type = Types::CreateNetworkInsightsAccessScopeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope = NetworkInsightsAccessScope.build(params[:network_insights_access_scope], context: "#{context}[:network_insights_access_scope]") unless params[:network_insights_access_scope].nil?
        type.network_insights_access_scope_content = NetworkInsightsAccessScopeContent.build(params[:network_insights_access_scope_content], context: "#{context}[:network_insights_access_scope_content]") unless params[:network_insights_access_scope_content].nil?
        type
      end
    end

    module CreateNetworkInsightsPathInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateNetworkInsightsPathInput, context: context)
        type = Types::CreateNetworkInsightsPathInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.source_ip = params[:source_ip]
        type.destination_ip = params[:destination_ip]
        type.source = params[:source]
        type.destination = params[:destination]
        type.protocol = params[:protocol]
        type.destination_port = params[:destination_port]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.filter_at_source = PathRequestFilter.build(params[:filter_at_source], context: "#{context}[:filter_at_source]") unless params[:filter_at_source].nil?
        type.filter_at_destination = PathRequestFilter.build(params[:filter_at_destination], context: "#{context}[:filter_at_destination]") unless params[:filter_at_destination].nil?
        type
      end
    end

    module CreateNetworkInsightsPathOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateNetworkInsightsPathOutput, context: context)
        type = Types::CreateNetworkInsightsPathOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_path = NetworkInsightsPath.build(params[:network_insights_path], context: "#{context}[:network_insights_path]") unless params[:network_insights_path].nil?
        type
      end
    end

    module CreateNetworkInterfaceInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateNetworkInterfaceInput, context: context)
        type = Types::CreateNetworkInterfaceInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.dry_run = params[:dry_run]
        type.groups = SecurityGroupIdStringList.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.ipv6_address_count = params[:ipv6_address_count]
        type.ipv6_addresses = InstanceIpv6AddressList.build(params[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless params[:ipv6_addresses].nil?
        type.private_ip_address = params[:private_ip_address]
        type.private_ip_addresses = PrivateIpAddressSpecificationList.build(params[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless params[:private_ip_addresses].nil?
        type.secondary_private_ip_address_count = params[:secondary_private_ip_address_count]
        type.ipv4_prefixes = Ipv4PrefixList.build(params[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless params[:ipv4_prefixes].nil?
        type.ipv4_prefix_count = params[:ipv4_prefix_count]
        type.ipv6_prefixes = Ipv6PrefixList.build(params[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless params[:ipv6_prefixes].nil?
        type.ipv6_prefix_count = params[:ipv6_prefix_count]
        type.interface_type = params[:interface_type]
        type.subnet_id = params[:subnet_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.enable_primary_ipv6 = params[:enable_primary_ipv6]
        type.connection_tracking_specification = ConnectionTrackingSpecificationRequest.build(params[:connection_tracking_specification], context: "#{context}[:connection_tracking_specification]") unless params[:connection_tracking_specification].nil?
        type
      end
    end

    module CreateNetworkInterfaceOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateNetworkInterfaceOutput, context: context)
        type = Types::CreateNetworkInterfaceOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_interface = NetworkInterface.build(params[:network_interface], context: "#{context}[:network_interface]") unless params[:network_interface].nil?
        type.client_token = params[:client_token]
        type
      end
    end

    module CreateNetworkInterfacePermissionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateNetworkInterfacePermissionInput, context: context)
        type = Types::CreateNetworkInterfacePermissionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_interface_id = params[:network_interface_id]
        type.aws_account_id = params[:aws_account_id]
        type.aws_service = params[:aws_service]
        type.permission = params[:permission]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateNetworkInterfacePermissionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateNetworkInterfacePermissionOutput, context: context)
        type = Types::CreateNetworkInterfacePermissionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.interface_permission = NetworkInterfacePermission.build(params[:interface_permission], context: "#{context}[:interface_permission]") unless params[:interface_permission].nil?
        type
      end
    end

    module CreatePlacementGroupInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreatePlacementGroupInput, context: context)
        type = Types::CreatePlacementGroupInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.group_name = params[:group_name]
        type.strategy = params[:strategy]
        type.partition_count = params[:partition_count]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.spread_level = params[:spread_level]
        type
      end
    end

    module CreatePlacementGroupOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreatePlacementGroupOutput, context: context)
        type = Types::CreatePlacementGroupOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.placement_group = PlacementGroup.build(params[:placement_group], context: "#{context}[:placement_group]") unless params[:placement_group].nil?
        type
      end
    end

    module CreatePublicIpv4PoolInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreatePublicIpv4PoolInput, context: context)
        type = Types::CreatePublicIpv4PoolInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module CreatePublicIpv4PoolOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreatePublicIpv4PoolOutput, context: context)
        type = Types::CreatePublicIpv4PoolOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.pool_id = params[:pool_id]
        type
      end
    end

    module CreateReplaceRootVolumeTaskInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateReplaceRootVolumeTaskInput, context: context)
        type = Types::CreateReplaceRootVolumeTaskInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.snapshot_id = params[:snapshot_id]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.image_id = params[:image_id]
        type.delete_replaced_root_volume = params[:delete_replaced_root_volume]
        type
      end
    end

    module CreateReplaceRootVolumeTaskOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateReplaceRootVolumeTaskOutput, context: context)
        type = Types::CreateReplaceRootVolumeTaskOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.replace_root_volume_task = ReplaceRootVolumeTask.build(params[:replace_root_volume_task], context: "#{context}[:replace_root_volume_task]") unless params[:replace_root_volume_task].nil?
        type
      end
    end

    module CreateReservedInstancesListingInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateReservedInstancesListingInput, context: context)
        type = Types::CreateReservedInstancesListingInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_token = params[:client_token]
        type.instance_count = params[:instance_count]
        type.price_schedules = PriceScheduleSpecificationList.build(params[:price_schedules], context: "#{context}[:price_schedules]") unless params[:price_schedules].nil?
        type.reserved_instances_id = params[:reserved_instances_id]
        type
      end
    end

    module CreateReservedInstancesListingOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateReservedInstancesListingOutput, context: context)
        type = Types::CreateReservedInstancesListingOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.reserved_instances_listings = ReservedInstancesListingList.build(params[:reserved_instances_listings], context: "#{context}[:reserved_instances_listings]") unless params[:reserved_instances_listings].nil?
        type
      end
    end

    module CreateRestoreImageTaskInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateRestoreImageTaskInput, context: context)
        type = Types::CreateRestoreImageTaskInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.bucket = params[:bucket]
        type.object_key = params[:object_key]
        type.name = params[:name]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateRestoreImageTaskOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateRestoreImageTaskOutput, context: context)
        type = Types::CreateRestoreImageTaskOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type
      end
    end

    module CreateRouteInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateRouteInput, context: context)
        type = Types::CreateRouteInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr_block = params[:destination_cidr_block]
        type.destination_ipv6_cidr_block = params[:destination_ipv6_cidr_block]
        type.destination_prefix_list_id = params[:destination_prefix_list_id]
        type.dry_run = params[:dry_run]
        type.vpc_endpoint_id = params[:vpc_endpoint_id]
        type.egress_only_internet_gateway_id = params[:egress_only_internet_gateway_id]
        type.gateway_id = params[:gateway_id]
        type.instance_id = params[:instance_id]
        type.nat_gateway_id = params[:nat_gateway_id]
        type.transit_gateway_id = params[:transit_gateway_id]
        type.local_gateway_id = params[:local_gateway_id]
        type.carrier_gateway_id = params[:carrier_gateway_id]
        type.network_interface_id = params[:network_interface_id]
        type.route_table_id = params[:route_table_id]
        type.vpc_peering_connection_id = params[:vpc_peering_connection_id]
        type.core_network_arn = params[:core_network_arn]
        type
      end
    end

    module CreateRouteOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateRouteOutput, context: context)
        type = Types::CreateRouteOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module CreateRouteTableInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateRouteTableInput, context: context)
        type = Types::CreateRouteTableInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.vpc_id = params[:vpc_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module CreateRouteTableOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateRouteTableOutput, context: context)
        type = Types::CreateRouteTableOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.route_table = RouteTable.build(params[:route_table], context: "#{context}[:route_table]") unless params[:route_table].nil?
        type.client_token = params[:client_token]
        type
      end
    end

    module CreateSecurityGroupInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateSecurityGroupInput, context: context)
        type = Types::CreateSecurityGroupInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.group_name = params[:group_name]
        type.vpc_id = params[:vpc_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateSecurityGroupOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateSecurityGroupOutput, context: context)
        type = Types::CreateSecurityGroupOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group_id = params[:group_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module CreateSnapshotInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateSnapshotInput, context: context)
        type = Types::CreateSnapshotInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.outpost_arn = params[:outpost_arn]
        type.volume_id = params[:volume_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateSnapshotOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateSnapshotOutput, context: context)
        type = Types::CreateSnapshotOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.data_encryption_key_id = params[:data_encryption_key_id]
        type.description = params[:description]
        type.encrypted = params[:encrypted]
        type.kms_key_id = params[:kms_key_id]
        type.owner_id = params[:owner_id]
        type.progress = params[:progress]
        type.snapshot_id = params[:snapshot_id]
        type.start_time = params[:start_time]
        type.state = params[:state]
        type.state_message = params[:state_message]
        type.volume_id = params[:volume_id]
        type.volume_size = params[:volume_size]
        type.owner_alias = params[:owner_alias]
        type.outpost_arn = params[:outpost_arn]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.storage_tier = params[:storage_tier]
        type.restore_expiry_time = params[:restore_expiry_time]
        type.sse_type = params[:sse_type]
        type
      end
    end

    module CreateSnapshotsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateSnapshotsInput, context: context)
        type = Types::CreateSnapshotsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.instance_specification = InstanceSpecification.build(params[:instance_specification], context: "#{context}[:instance_specification]") unless params[:instance_specification].nil?
        type.outpost_arn = params[:outpost_arn]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type.copy_tags_from_source = params[:copy_tags_from_source]
        type
      end
    end

    module CreateSnapshotsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateSnapshotsOutput, context: context)
        type = Types::CreateSnapshotsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshots = SnapshotSet.build(params[:snapshots], context: "#{context}[:snapshots]") unless params[:snapshots].nil?
        type
      end
    end

    module CreateSpotDatafeedSubscriptionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateSpotDatafeedSubscriptionInput, context: context)
        type = Types::CreateSpotDatafeedSubscriptionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.bucket = params[:bucket]
        type.dry_run = params[:dry_run]
        type.prefix = params[:prefix]
        type
      end
    end

    module CreateSpotDatafeedSubscriptionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateSpotDatafeedSubscriptionOutput, context: context)
        type = Types::CreateSpotDatafeedSubscriptionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.spot_datafeed_subscription = SpotDatafeedSubscription.build(params[:spot_datafeed_subscription], context: "#{context}[:spot_datafeed_subscription]") unless params[:spot_datafeed_subscription].nil?
        type
      end
    end

    module CreateStoreImageTaskInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateStoreImageTaskInput, context: context)
        type = Types::CreateStoreImageTaskInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type.bucket = params[:bucket]
        type.s3_object_tags = S3ObjectTagList.build(params[:s3_object_tags], context: "#{context}[:s3_object_tags]") unless params[:s3_object_tags].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateStoreImageTaskOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateStoreImageTaskOutput, context: context)
        type = Types::CreateStoreImageTaskOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.object_key = params[:object_key]
        type
      end
    end

    module CreateSubnetCidrReservationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateSubnetCidrReservationInput, context: context)
        type = Types::CreateSubnetCidrReservationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.subnet_id = params[:subnet_id]
        type.cidr = params[:cidr]
        type.reservation_type = params[:reservation_type]
        type.description = params[:description]
        type.dry_run = params[:dry_run]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module CreateSubnetCidrReservationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateSubnetCidrReservationOutput, context: context)
        type = Types::CreateSubnetCidrReservationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.subnet_cidr_reservation = SubnetCidrReservation.build(params[:subnet_cidr_reservation], context: "#{context}[:subnet_cidr_reservation]") unless params[:subnet_cidr_reservation].nil?
        type
      end
    end

    module CreateSubnetInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateSubnetInput, context: context)
        type = Types::CreateSubnetInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.availability_zone = params[:availability_zone]
        type.availability_zone_id = params[:availability_zone_id]
        type.cidr_block = params[:cidr_block]
        type.ipv6_cidr_block = params[:ipv6_cidr_block]
        type.outpost_arn = params[:outpost_arn]
        type.vpc_id = params[:vpc_id]
        type.dry_run = params[:dry_run]
        type.ipv6_native = params[:ipv6_native]
        type.ipv4_ipam_pool_id = params[:ipv4_ipam_pool_id]
        type.ipv4_netmask_length = params[:ipv4_netmask_length]
        type.ipv6_ipam_pool_id = params[:ipv6_ipam_pool_id]
        type.ipv6_netmask_length = params[:ipv6_netmask_length]
        type
      end
    end

    module CreateSubnetOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateSubnetOutput, context: context)
        type = Types::CreateSubnetOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.subnet = Subnet.build(params[:subnet], context: "#{context}[:subnet]") unless params[:subnet].nil?
        type
      end
    end

    module CreateTagsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTagsInput, context: context)
        type = Types::CreateTagsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.resources = ResourceIdList.build(params[:resources], context: "#{context}[:resources]") unless params[:resources].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module CreateTagsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTagsOutput, context: context)
        type = Types::CreateTagsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module CreateTrafficMirrorFilterInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTrafficMirrorFilterInput, context: context)
        type = Types::CreateTrafficMirrorFilterInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module CreateTrafficMirrorFilterOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTrafficMirrorFilterOutput, context: context)
        type = Types::CreateTrafficMirrorFilterOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_filter = TrafficMirrorFilter.build(params[:traffic_mirror_filter], context: "#{context}[:traffic_mirror_filter]") unless params[:traffic_mirror_filter].nil?
        type.client_token = params[:client_token]
        type
      end
    end

    module CreateTrafficMirrorFilterRuleInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTrafficMirrorFilterRuleInput, context: context)
        type = Types::CreateTrafficMirrorFilterRuleInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_filter_id = params[:traffic_mirror_filter_id]
        type.traffic_direction = params[:traffic_direction]
        type.rule_number = params[:rule_number]
        type.rule_action = params[:rule_action]
        type.destination_port_range = TrafficMirrorPortRangeRequest.build(params[:destination_port_range], context: "#{context}[:destination_port_range]") unless params[:destination_port_range].nil?
        type.source_port_range = TrafficMirrorPortRangeRequest.build(params[:source_port_range], context: "#{context}[:source_port_range]") unless params[:source_port_range].nil?
        type.protocol = params[:protocol]
        type.destination_cidr_block = params[:destination_cidr_block]
        type.source_cidr_block = params[:source_cidr_block]
        type.description = params[:description]
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module CreateTrafficMirrorFilterRuleOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTrafficMirrorFilterRuleOutput, context: context)
        type = Types::CreateTrafficMirrorFilterRuleOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_filter_rule = TrafficMirrorFilterRule.build(params[:traffic_mirror_filter_rule], context: "#{context}[:traffic_mirror_filter_rule]") unless params[:traffic_mirror_filter_rule].nil?
        type.client_token = params[:client_token]
        type
      end
    end

    module CreateTrafficMirrorSessionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTrafficMirrorSessionInput, context: context)
        type = Types::CreateTrafficMirrorSessionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_interface_id = params[:network_interface_id]
        type.traffic_mirror_target_id = params[:traffic_mirror_target_id]
        type.traffic_mirror_filter_id = params[:traffic_mirror_filter_id]
        type.packet_length = params[:packet_length]
        type.session_number = params[:session_number]
        type.virtual_network_id = params[:virtual_network_id]
        type.description = params[:description]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module CreateTrafficMirrorSessionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTrafficMirrorSessionOutput, context: context)
        type = Types::CreateTrafficMirrorSessionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_session = TrafficMirrorSession.build(params[:traffic_mirror_session], context: "#{context}[:traffic_mirror_session]") unless params[:traffic_mirror_session].nil?
        type.client_token = params[:client_token]
        type
      end
    end

    module CreateTrafficMirrorTargetInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTrafficMirrorTargetInput, context: context)
        type = Types::CreateTrafficMirrorTargetInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_interface_id = params[:network_interface_id]
        type.network_load_balancer_arn = params[:network_load_balancer_arn]
        type.description = params[:description]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.gateway_load_balancer_endpoint_id = params[:gateway_load_balancer_endpoint_id]
        type
      end
    end

    module CreateTrafficMirrorTargetOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTrafficMirrorTargetOutput, context: context)
        type = Types::CreateTrafficMirrorTargetOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_target = TrafficMirrorTarget.build(params[:traffic_mirror_target], context: "#{context}[:traffic_mirror_target]") unless params[:traffic_mirror_target].nil?
        type.client_token = params[:client_token]
        type
      end
    end

    module CreateTransitGatewayConnectInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayConnectInput, context: context)
        type = Types::CreateTransitGatewayConnectInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transport_transit_gateway_attachment_id = params[:transport_transit_gateway_attachment_id]
        type.options = CreateTransitGatewayConnectRequestOptions.build(params[:options], context: "#{context}[:options]") unless params[:options].nil?
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateTransitGatewayConnectOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayConnectOutput, context: context)
        type = Types::CreateTransitGatewayConnectOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_connect = TransitGatewayConnect.build(params[:transit_gateway_connect], context: "#{context}[:transit_gateway_connect]") unless params[:transit_gateway_connect].nil?
        type
      end
    end

    module CreateTransitGatewayConnectPeerInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayConnectPeerInput, context: context)
        type = Types::CreateTransitGatewayConnectPeerInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.transit_gateway_address = params[:transit_gateway_address]
        type.peer_address = params[:peer_address]
        type.bgp_options = TransitGatewayConnectRequestBgpOptions.build(params[:bgp_options], context: "#{context}[:bgp_options]") unless params[:bgp_options].nil?
        type.inside_cidr_blocks = InsideCidrBlocksStringList.build(params[:inside_cidr_blocks], context: "#{context}[:inside_cidr_blocks]") unless params[:inside_cidr_blocks].nil?
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateTransitGatewayConnectPeerOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayConnectPeerOutput, context: context)
        type = Types::CreateTransitGatewayConnectPeerOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_connect_peer = TransitGatewayConnectPeer.build(params[:transit_gateway_connect_peer], context: "#{context}[:transit_gateway_connect_peer]") unless params[:transit_gateway_connect_peer].nil?
        type
      end
    end

    module CreateTransitGatewayConnectRequestOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayConnectRequestOptions, context: context)
        type = Types::CreateTransitGatewayConnectRequestOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.protocol = params[:protocol]
        type
      end
    end

    module CreateTransitGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayInput, context: context)
        type = Types::CreateTransitGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.options = TransitGatewayRequestOptions.build(params[:options], context: "#{context}[:options]") unless params[:options].nil?
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateTransitGatewayMulticastDomainInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayMulticastDomainInput, context: context)
        type = Types::CreateTransitGatewayMulticastDomainInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_id = params[:transit_gateway_id]
        type.options = CreateTransitGatewayMulticastDomainRequestOptions.build(params[:options], context: "#{context}[:options]") unless params[:options].nil?
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateTransitGatewayMulticastDomainOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayMulticastDomainOutput, context: context)
        type = Types::CreateTransitGatewayMulticastDomainOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain = TransitGatewayMulticastDomain.build(params[:transit_gateway_multicast_domain], context: "#{context}[:transit_gateway_multicast_domain]") unless params[:transit_gateway_multicast_domain].nil?
        type
      end
    end

    module CreateTransitGatewayMulticastDomainRequestOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayMulticastDomainRequestOptions, context: context)
        type = Types::CreateTransitGatewayMulticastDomainRequestOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.igmpv2_support = params[:igmpv2_support]
        type.static_sources_support = params[:static_sources_support]
        type.auto_accept_shared_associations = params[:auto_accept_shared_associations]
        type
      end
    end

    module CreateTransitGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayOutput, context: context)
        type = Types::CreateTransitGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway = TransitGateway.build(params[:transit_gateway], context: "#{context}[:transit_gateway]") unless params[:transit_gateway].nil?
        type
      end
    end

    module CreateTransitGatewayPeeringAttachmentInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayPeeringAttachmentInput, context: context)
        type = Types::CreateTransitGatewayPeeringAttachmentInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_id = params[:transit_gateway_id]
        type.peer_transit_gateway_id = params[:peer_transit_gateway_id]
        type.peer_account_id = params[:peer_account_id]
        type.peer_region = params[:peer_region]
        type.options = CreateTransitGatewayPeeringAttachmentRequestOptions.build(params[:options], context: "#{context}[:options]") unless params[:options].nil?
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateTransitGatewayPeeringAttachmentOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayPeeringAttachmentOutput, context: context)
        type = Types::CreateTransitGatewayPeeringAttachmentOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_peering_attachment = TransitGatewayPeeringAttachment.build(params[:transit_gateway_peering_attachment], context: "#{context}[:transit_gateway_peering_attachment]") unless params[:transit_gateway_peering_attachment].nil?
        type
      end
    end

    module CreateTransitGatewayPeeringAttachmentRequestOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayPeeringAttachmentRequestOptions, context: context)
        type = Types::CreateTransitGatewayPeeringAttachmentRequestOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dynamic_routing = params[:dynamic_routing]
        type
      end
    end

    module CreateTransitGatewayPolicyTableInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayPolicyTableInput, context: context)
        type = Types::CreateTransitGatewayPolicyTableInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_id = params[:transit_gateway_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateTransitGatewayPolicyTableOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayPolicyTableOutput, context: context)
        type = Types::CreateTransitGatewayPolicyTableOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_policy_table = TransitGatewayPolicyTable.build(params[:transit_gateway_policy_table], context: "#{context}[:transit_gateway_policy_table]") unless params[:transit_gateway_policy_table].nil?
        type
      end
    end

    module CreateTransitGatewayPrefixListReferenceInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayPrefixListReferenceInput, context: context)
        type = Types::CreateTransitGatewayPrefixListReferenceInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.prefix_list_id = params[:prefix_list_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.blackhole = params[:blackhole]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateTransitGatewayPrefixListReferenceOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayPrefixListReferenceOutput, context: context)
        type = Types::CreateTransitGatewayPrefixListReferenceOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_prefix_list_reference = TransitGatewayPrefixListReference.build(params[:transit_gateway_prefix_list_reference], context: "#{context}[:transit_gateway_prefix_list_reference]") unless params[:transit_gateway_prefix_list_reference].nil?
        type
      end
    end

    module CreateTransitGatewayRouteInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayRouteInput, context: context)
        type = Types::CreateTransitGatewayRouteInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr_block = params[:destination_cidr_block]
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.blackhole = params[:blackhole]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateTransitGatewayRouteOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayRouteOutput, context: context)
        type = Types::CreateTransitGatewayRouteOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.route = TransitGatewayRoute.build(params[:route], context: "#{context}[:route]") unless params[:route].nil?
        type
      end
    end

    module CreateTransitGatewayRouteTableAnnouncementInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayRouteTableAnnouncementInput, context: context)
        type = Types::CreateTransitGatewayRouteTableAnnouncementInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.peering_attachment_id = params[:peering_attachment_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateTransitGatewayRouteTableAnnouncementOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayRouteTableAnnouncementOutput, context: context)
        type = Types::CreateTransitGatewayRouteTableAnnouncementOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_announcement = TransitGatewayRouteTableAnnouncement.build(params[:transit_gateway_route_table_announcement], context: "#{context}[:transit_gateway_route_table_announcement]") unless params[:transit_gateway_route_table_announcement].nil?
        type
      end
    end

    module CreateTransitGatewayRouteTableInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayRouteTableInput, context: context)
        type = Types::CreateTransitGatewayRouteTableInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_id = params[:transit_gateway_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateTransitGatewayRouteTableOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayRouteTableOutput, context: context)
        type = Types::CreateTransitGatewayRouteTableOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table = TransitGatewayRouteTable.build(params[:transit_gateway_route_table], context: "#{context}[:transit_gateway_route_table]") unless params[:transit_gateway_route_table].nil?
        type
      end
    end

    module CreateTransitGatewayVpcAttachmentInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayVpcAttachmentInput, context: context)
        type = Types::CreateTransitGatewayVpcAttachmentInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_id = params[:transit_gateway_id]
        type.vpc_id = params[:vpc_id]
        type.subnet_ids = TransitGatewaySubnetIdList.build(params[:subnet_ids], context: "#{context}[:subnet_ids]") unless params[:subnet_ids].nil?
        type.options = CreateTransitGatewayVpcAttachmentRequestOptions.build(params[:options], context: "#{context}[:options]") unless params[:options].nil?
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateTransitGatewayVpcAttachmentOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayVpcAttachmentOutput, context: context)
        type = Types::CreateTransitGatewayVpcAttachmentOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_vpc_attachment = TransitGatewayVpcAttachment.build(params[:transit_gateway_vpc_attachment], context: "#{context}[:transit_gateway_vpc_attachment]") unless params[:transit_gateway_vpc_attachment].nil?
        type
      end
    end

    module CreateTransitGatewayVpcAttachmentRequestOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateTransitGatewayVpcAttachmentRequestOptions, context: context)
        type = Types::CreateTransitGatewayVpcAttachmentRequestOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dns_support = params[:dns_support]
        type.security_group_referencing_support = params[:security_group_referencing_support]
        type.ipv6_support = params[:ipv6_support]
        type.appliance_mode_support = params[:appliance_mode_support]
        type
      end
    end

    module CreateVerifiedAccessEndpointEniOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVerifiedAccessEndpointEniOptions, context: context)
        type = Types::CreateVerifiedAccessEndpointEniOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_interface_id = params[:network_interface_id]
        type.protocol = params[:protocol]
        type.port = params[:port]
        type
      end
    end

    module CreateVerifiedAccessEndpointInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVerifiedAccessEndpointInput, context: context)
        type = Types::CreateVerifiedAccessEndpointInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_group_id = params[:verified_access_group_id]
        type.endpoint_type = params[:endpoint_type]
        type.attachment_type = params[:attachment_type]
        type.domain_certificate_arn = params[:domain_certificate_arn]
        type.application_domain = params[:application_domain]
        type.endpoint_domain_prefix = params[:endpoint_domain_prefix]
        type.security_group_ids = SecurityGroupIdList.build(params[:security_group_ids], context: "#{context}[:security_group_ids]") unless params[:security_group_ids].nil?
        type.load_balancer_options = CreateVerifiedAccessEndpointLoadBalancerOptions.build(params[:load_balancer_options], context: "#{context}[:load_balancer_options]") unless params[:load_balancer_options].nil?
        type.network_interface_options = CreateVerifiedAccessEndpointEniOptions.build(params[:network_interface_options], context: "#{context}[:network_interface_options]") unless params[:network_interface_options].nil?
        type.description = params[:description]
        type.policy_document = params[:policy_document]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type.sse_specification = VerifiedAccessSseSpecificationRequest.build(params[:sse_specification], context: "#{context}[:sse_specification]") unless params[:sse_specification].nil?
        type
      end
    end

    module CreateVerifiedAccessEndpointLoadBalancerOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVerifiedAccessEndpointLoadBalancerOptions, context: context)
        type = Types::CreateVerifiedAccessEndpointLoadBalancerOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.protocol = params[:protocol]
        type.port = params[:port]
        type.load_balancer_arn = params[:load_balancer_arn]
        type.subnet_ids = CreateVerifiedAccessEndpointSubnetIdList.build(params[:subnet_ids], context: "#{context}[:subnet_ids]") unless params[:subnet_ids].nil?
        type
      end
    end

    module CreateVerifiedAccessEndpointOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVerifiedAccessEndpointOutput, context: context)
        type = Types::CreateVerifiedAccessEndpointOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_endpoint = VerifiedAccessEndpoint.build(params[:verified_access_endpoint], context: "#{context}[:verified_access_endpoint]") unless params[:verified_access_endpoint].nil?
        type
      end
    end

    module CreateVerifiedAccessEndpointSubnetIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module CreateVerifiedAccessGroupInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVerifiedAccessGroupInput, context: context)
        type = Types::CreateVerifiedAccessGroupInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_instance_id = params[:verified_access_instance_id]
        type.description = params[:description]
        type.policy_document = params[:policy_document]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type.sse_specification = VerifiedAccessSseSpecificationRequest.build(params[:sse_specification], context: "#{context}[:sse_specification]") unless params[:sse_specification].nil?
        type
      end
    end

    module CreateVerifiedAccessGroupOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVerifiedAccessGroupOutput, context: context)
        type = Types::CreateVerifiedAccessGroupOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_group = VerifiedAccessGroup.build(params[:verified_access_group], context: "#{context}[:verified_access_group]") unless params[:verified_access_group].nil?
        type
      end
    end

    module CreateVerifiedAccessInstanceInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVerifiedAccessInstanceInput, context: context)
        type = Types::CreateVerifiedAccessInstanceInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type.fips_enabled = params[:fips_enabled]
        type
      end
    end

    module CreateVerifiedAccessInstanceOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVerifiedAccessInstanceOutput, context: context)
        type = Types::CreateVerifiedAccessInstanceOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_instance = VerifiedAccessInstance.build(params[:verified_access_instance], context: "#{context}[:verified_access_instance]") unless params[:verified_access_instance].nil?
        type
      end
    end

    module CreateVerifiedAccessTrustProviderDeviceOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVerifiedAccessTrustProviderDeviceOptions, context: context)
        type = Types::CreateVerifiedAccessTrustProviderDeviceOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.tenant_id = params[:tenant_id]
        type.public_signing_key_url = params[:public_signing_key_url]
        type
      end
    end

    module CreateVerifiedAccessTrustProviderInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVerifiedAccessTrustProviderInput, context: context)
        type = Types::CreateVerifiedAccessTrustProviderInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.trust_provider_type = params[:trust_provider_type]
        type.user_trust_provider_type = params[:user_trust_provider_type]
        type.device_trust_provider_type = params[:device_trust_provider_type]
        type.oidc_options = CreateVerifiedAccessTrustProviderOidcOptions.build(params[:oidc_options], context: "#{context}[:oidc_options]") unless params[:oidc_options].nil?
        type.device_options = CreateVerifiedAccessTrustProviderDeviceOptions.build(params[:device_options], context: "#{context}[:device_options]") unless params[:device_options].nil?
        type.policy_reference_name = params[:policy_reference_name]
        type.description = params[:description]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type.sse_specification = VerifiedAccessSseSpecificationRequest.build(params[:sse_specification], context: "#{context}[:sse_specification]") unless params[:sse_specification].nil?
        type
      end
    end

    module CreateVerifiedAccessTrustProviderOidcOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVerifiedAccessTrustProviderOidcOptions, context: context)
        type = Types::CreateVerifiedAccessTrustProviderOidcOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.issuer = params[:issuer]
        type.authorization_endpoint = params[:authorization_endpoint]
        type.token_endpoint = params[:token_endpoint]
        type.user_info_endpoint = params[:user_info_endpoint]
        type.client_id = params[:client_id]
        type.client_secret = params[:client_secret]
        type.scope = params[:scope]
        type
      end
    end

    module CreateVerifiedAccessTrustProviderOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVerifiedAccessTrustProviderOutput, context: context)
        type = Types::CreateVerifiedAccessTrustProviderOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_trust_provider = VerifiedAccessTrustProvider.build(params[:verified_access_trust_provider], context: "#{context}[:verified_access_trust_provider]") unless params[:verified_access_trust_provider].nil?
        type
      end
    end

    module CreateVolumeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVolumeInput, context: context)
        type = Types::CreateVolumeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.encrypted = params[:encrypted]
        type.iops = params[:iops]
        type.kms_key_id = params[:kms_key_id]
        type.outpost_arn = params[:outpost_arn]
        type.size = params[:size]
        type.snapshot_id = params[:snapshot_id]
        type.volume_type = params[:volume_type]
        type.dry_run = params[:dry_run]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.multi_attach_enabled = params[:multi_attach_enabled]
        type.throughput = params[:throughput]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module CreateVolumeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVolumeOutput, context: context)
        type = Types::CreateVolumeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attachments = VolumeAttachmentList.build(params[:attachments], context: "#{context}[:attachments]") unless params[:attachments].nil?
        type.availability_zone = params[:availability_zone]
        type.create_time = params[:create_time]
        type.encrypted = params[:encrypted]
        type.kms_key_id = params[:kms_key_id]
        type.outpost_arn = params[:outpost_arn]
        type.size = params[:size]
        type.snapshot_id = params[:snapshot_id]
        type.state = params[:state]
        type.volume_id = params[:volume_id]
        type.iops = params[:iops]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.volume_type = params[:volume_type]
        type.fast_restored = params[:fast_restored]
        type.multi_attach_enabled = params[:multi_attach_enabled]
        type.throughput = params[:throughput]
        type.sse_type = params[:sse_type]
        type
      end
    end

    module CreateVolumePermission
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVolumePermission, context: context)
        type = Types::CreateVolumePermission.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group = params[:group]
        type.user_id = params[:user_id]
        type
      end
    end

    module CreateVolumePermissionList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CreateVolumePermission.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module CreateVolumePermissionModifications
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVolumePermissionModifications, context: context)
        type = Types::CreateVolumePermissionModifications.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.add = CreateVolumePermissionList.build(params[:add], context: "#{context}[:add]") unless params[:add].nil?
        type.remove = CreateVolumePermissionList.build(params[:remove], context: "#{context}[:remove]") unless params[:remove].nil?
        type
      end
    end

    module CreateVpcEndpointConnectionNotificationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpcEndpointConnectionNotificationInput, context: context)
        type = Types::CreateVpcEndpointConnectionNotificationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.service_id = params[:service_id]
        type.vpc_endpoint_id = params[:vpc_endpoint_id]
        type.connection_notification_arn = params[:connection_notification_arn]
        type.connection_events = ValueStringList.build(params[:connection_events], context: "#{context}[:connection_events]") unless params[:connection_events].nil?
        type.client_token = params[:client_token]
        type
      end
    end

    module CreateVpcEndpointConnectionNotificationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpcEndpointConnectionNotificationOutput, context: context)
        type = Types::CreateVpcEndpointConnectionNotificationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.connection_notification = ConnectionNotification.build(params[:connection_notification], context: "#{context}[:connection_notification]") unless params[:connection_notification].nil?
        type.client_token = params[:client_token]
        type
      end
    end

    module CreateVpcEndpointInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpcEndpointInput, context: context)
        type = Types::CreateVpcEndpointInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.vpc_endpoint_type = params[:vpc_endpoint_type]
        type.vpc_id = params[:vpc_id]
        type.service_name = params[:service_name]
        type.policy_document = params[:policy_document]
        type.route_table_ids = VpcEndpointRouteTableIdList.build(params[:route_table_ids], context: "#{context}[:route_table_ids]") unless params[:route_table_ids].nil?
        type.subnet_ids = VpcEndpointSubnetIdList.build(params[:subnet_ids], context: "#{context}[:subnet_ids]") unless params[:subnet_ids].nil?
        type.security_group_ids = VpcEndpointSecurityGroupIdList.build(params[:security_group_ids], context: "#{context}[:security_group_ids]") unless params[:security_group_ids].nil?
        type.ip_address_type = params[:ip_address_type]
        type.dns_options = DnsOptionsSpecification.build(params[:dns_options], context: "#{context}[:dns_options]") unless params[:dns_options].nil?
        type.client_token = params[:client_token]
        type.private_dns_enabled = params[:private_dns_enabled]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.subnet_configurations = SubnetConfigurationsList.build(params[:subnet_configurations], context: "#{context}[:subnet_configurations]") unless params[:subnet_configurations].nil?
        type
      end
    end

    module CreateVpcEndpointOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpcEndpointOutput, context: context)
        type = Types::CreateVpcEndpointOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_endpoint = VpcEndpoint.build(params[:vpc_endpoint], context: "#{context}[:vpc_endpoint]") unless params[:vpc_endpoint].nil?
        type.client_token = params[:client_token]
        type
      end
    end

    module CreateVpcEndpointServiceConfigurationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpcEndpointServiceConfigurationInput, context: context)
        type = Types::CreateVpcEndpointServiceConfigurationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.acceptance_required = params[:acceptance_required]
        type.private_dns_name = params[:private_dns_name]
        type.network_load_balancer_arns = ValueStringList.build(params[:network_load_balancer_arns], context: "#{context}[:network_load_balancer_arns]") unless params[:network_load_balancer_arns].nil?
        type.gateway_load_balancer_arns = ValueStringList.build(params[:gateway_load_balancer_arns], context: "#{context}[:gateway_load_balancer_arns]") unless params[:gateway_load_balancer_arns].nil?
        type.supported_ip_address_types = ValueStringList.build(params[:supported_ip_address_types], context: "#{context}[:supported_ip_address_types]") unless params[:supported_ip_address_types].nil?
        type.client_token = params[:client_token]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module CreateVpcEndpointServiceConfigurationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpcEndpointServiceConfigurationOutput, context: context)
        type = Types::CreateVpcEndpointServiceConfigurationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.service_configuration = ServiceConfiguration.build(params[:service_configuration], context: "#{context}[:service_configuration]") unless params[:service_configuration].nil?
        type.client_token = params[:client_token]
        type
      end
    end

    module CreateVpcInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpcInput, context: context)
        type = Types::CreateVpcInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr_block = params[:cidr_block]
        type.amazon_provided_ipv6_cidr_block = params[:amazon_provided_ipv6_cidr_block]
        type.ipv6_pool = params[:ipv6_pool]
        type.ipv6_cidr_block = params[:ipv6_cidr_block]
        type.ipv4_ipam_pool_id = params[:ipv4_ipam_pool_id]
        type.ipv4_netmask_length = params[:ipv4_netmask_length]
        type.ipv6_ipam_pool_id = params[:ipv6_ipam_pool_id]
        type.ipv6_netmask_length = params[:ipv6_netmask_length]
        type.dry_run = params[:dry_run]
        type.instance_tenancy = params[:instance_tenancy]
        type.ipv6_cidr_block_network_border_group = params[:ipv6_cidr_block_network_border_group]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module CreateVpcOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpcOutput, context: context)
        type = Types::CreateVpcOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc = Vpc.build(params[:vpc], context: "#{context}[:vpc]") unless params[:vpc].nil?
        type
      end
    end

    module CreateVpcPeeringConnectionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpcPeeringConnectionInput, context: context)
        type = Types::CreateVpcPeeringConnectionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.peer_owner_id = params[:peer_owner_id]
        type.peer_vpc_id = params[:peer_vpc_id]
        type.vpc_id = params[:vpc_id]
        type.peer_region = params[:peer_region]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module CreateVpcPeeringConnectionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpcPeeringConnectionOutput, context: context)
        type = Types::CreateVpcPeeringConnectionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_peering_connection = VpcPeeringConnection.build(params[:vpc_peering_connection], context: "#{context}[:vpc_peering_connection]") unless params[:vpc_peering_connection].nil?
        type
      end
    end

    module CreateVpnConnectionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpnConnectionInput, context: context)
        type = Types::CreateVpnConnectionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.customer_gateway_id = params[:customer_gateway_id]
        type.type = params[:type]
        type.vpn_gateway_id = params[:vpn_gateway_id]
        type.transit_gateway_id = params[:transit_gateway_id]
        type.dry_run = params[:dry_run]
        type.options = VpnConnectionOptionsSpecification.build(params[:options], context: "#{context}[:options]") unless params[:options].nil?
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module CreateVpnConnectionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpnConnectionOutput, context: context)
        type = Types::CreateVpnConnectionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection = VpnConnection.build(params[:vpn_connection], context: "#{context}[:vpn_connection]") unless params[:vpn_connection].nil?
        type
      end
    end

    module CreateVpnConnectionRouteInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpnConnectionRouteInput, context: context)
        type = Types::CreateVpnConnectionRouteInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr_block = params[:destination_cidr_block]
        type.vpn_connection_id = params[:vpn_connection_id]
        type
      end
    end

    module CreateVpnConnectionRouteOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpnConnectionRouteOutput, context: context)
        type = Types::CreateVpnConnectionRouteOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module CreateVpnGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpnGatewayInput, context: context)
        type = Types::CreateVpnGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.type = params[:type]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.amazon_side_asn = params[:amazon_side_asn]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module CreateVpnGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreateVpnGatewayOutput, context: context)
        type = Types::CreateVpnGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_gateway = VpnGateway.build(params[:vpn_gateway], context: "#{context}[:vpn_gateway]") unless params[:vpn_gateway].nil?
        type
      end
    end

    module CreditSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreditSpecification, context: context)
        type = Types::CreditSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cpu_credits = params[:cpu_credits]
        type
      end
    end

    module CreditSpecificationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CreditSpecificationRequest, context: context)
        type = Types::CreditSpecificationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cpu_credits = params[:cpu_credits]
        type
      end
    end

    module CustomerGateway
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::CustomerGateway, context: context)
        type = Types::CustomerGateway.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.bgp_asn = params[:bgp_asn]
        type.customer_gateway_id = params[:customer_gateway_id]
        type.ip_address = params[:ip_address]
        type.certificate_arn = params[:certificate_arn]
        type.state = params[:state]
        type.type = params[:type]
        type.device_name = params[:device_name]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module CustomerGatewayIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module CustomerGatewayList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << CustomerGateway.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DataQueries
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DataQuery.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DataQuery
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DataQuery, context: context)
        type = Types::DataQuery.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.id = params[:id]
        type.source = params[:source]
        type.destination = params[:destination]
        type.metric = params[:metric]
        type.statistic = params[:statistic]
        type.period = params[:period]
        type
      end
    end

    module DataResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DataResponse, context: context)
        type = Types::DataResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.id = params[:id]
        type.source = params[:source]
        type.destination = params[:destination]
        type.metric = params[:metric]
        type.statistic = params[:statistic]
        type.period = params[:period]
        type.metric_points = MetricPoints.build(params[:metric_points], context: "#{context}[:metric_points]") unless params[:metric_points].nil?
        type
      end
    end

    module DataResponses
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DataResponse.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DedicatedHostIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module DeleteCarrierGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteCarrierGatewayInput, context: context)
        type = Types::DeleteCarrierGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.carrier_gateway_id = params[:carrier_gateway_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteCarrierGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteCarrierGatewayOutput, context: context)
        type = Types::DeleteCarrierGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.carrier_gateway = CarrierGateway.build(params[:carrier_gateway], context: "#{context}[:carrier_gateway]") unless params[:carrier_gateway].nil?
        type
      end
    end

    module DeleteClientVpnEndpointInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteClientVpnEndpointInput, context: context)
        type = Types::DeleteClientVpnEndpointInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteClientVpnEndpointOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteClientVpnEndpointOutput, context: context)
        type = Types::DeleteClientVpnEndpointOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.status = ClientVpnEndpointStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type
      end
    end

    module DeleteClientVpnRouteInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteClientVpnRouteInput, context: context)
        type = Types::DeleteClientVpnRouteInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.target_vpc_subnet_id = params[:target_vpc_subnet_id]
        type.destination_cidr_block = params[:destination_cidr_block]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteClientVpnRouteOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteClientVpnRouteOutput, context: context)
        type = Types::DeleteClientVpnRouteOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.status = ClientVpnRouteStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type
      end
    end

    module DeleteCoipCidrInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteCoipCidrInput, context: context)
        type = Types::DeleteCoipCidrInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type.coip_pool_id = params[:coip_pool_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteCoipCidrOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteCoipCidrOutput, context: context)
        type = Types::DeleteCoipCidrOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.coip_cidr = CoipCidr.build(params[:coip_cidr], context: "#{context}[:coip_cidr]") unless params[:coip_cidr].nil?
        type
      end
    end

    module DeleteCoipPoolInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteCoipPoolInput, context: context)
        type = Types::DeleteCoipPoolInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.coip_pool_id = params[:coip_pool_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteCoipPoolOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteCoipPoolOutput, context: context)
        type = Types::DeleteCoipPoolOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.coip_pool = CoipPool.build(params[:coip_pool], context: "#{context}[:coip_pool]") unless params[:coip_pool].nil?
        type
      end
    end

    module DeleteCustomerGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteCustomerGatewayInput, context: context)
        type = Types::DeleteCustomerGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.customer_gateway_id = params[:customer_gateway_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteCustomerGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteCustomerGatewayOutput, context: context)
        type = Types::DeleteCustomerGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteDhcpOptionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteDhcpOptionsInput, context: context)
        type = Types::DeleteDhcpOptionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dhcp_options_id = params[:dhcp_options_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteDhcpOptionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteDhcpOptionsOutput, context: context)
        type = Types::DeleteDhcpOptionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteEgressOnlyInternetGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteEgressOnlyInternetGatewayInput, context: context)
        type = Types::DeleteEgressOnlyInternetGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.egress_only_internet_gateway_id = params[:egress_only_internet_gateway_id]
        type
      end
    end

    module DeleteEgressOnlyInternetGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteEgressOnlyInternetGatewayOutput, context: context)
        type = Types::DeleteEgressOnlyInternetGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return_code = params[:return_code]
        type
      end
    end

    module DeleteFleetError
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteFleetError, context: context)
        type = Types::DeleteFleetError.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module DeleteFleetErrorItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteFleetErrorItem, context: context)
        type = Types::DeleteFleetErrorItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.error = DeleteFleetError.build(params[:error], context: "#{context}[:error]") unless params[:error].nil?
        type.fleet_id = params[:fleet_id]
        type
      end
    end

    module DeleteFleetErrorSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DeleteFleetErrorItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DeleteFleetSuccessItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteFleetSuccessItem, context: context)
        type = Types::DeleteFleetSuccessItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.current_fleet_state = params[:current_fleet_state]
        type.previous_fleet_state = params[:previous_fleet_state]
        type.fleet_id = params[:fleet_id]
        type
      end
    end

    module DeleteFleetSuccessSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DeleteFleetSuccessItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DeleteFleetsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteFleetsInput, context: context)
        type = Types::DeleteFleetsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.fleet_ids = FleetIdSet.build(params[:fleet_ids], context: "#{context}[:fleet_ids]") unless params[:fleet_ids].nil?
        type.terminate_instances = params[:terminate_instances]
        type
      end
    end

    module DeleteFleetsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteFleetsOutput, context: context)
        type = Types::DeleteFleetsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.successful_fleet_deletions = DeleteFleetSuccessSet.build(params[:successful_fleet_deletions], context: "#{context}[:successful_fleet_deletions]") unless params[:successful_fleet_deletions].nil?
        type.unsuccessful_fleet_deletions = DeleteFleetErrorSet.build(params[:unsuccessful_fleet_deletions], context: "#{context}[:unsuccessful_fleet_deletions]") unless params[:unsuccessful_fleet_deletions].nil?
        type
      end
    end

    module DeleteFlowLogsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteFlowLogsInput, context: context)
        type = Types::DeleteFlowLogsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.flow_log_ids = FlowLogIdList.build(params[:flow_log_ids], context: "#{context}[:flow_log_ids]") unless params[:flow_log_ids].nil?
        type
      end
    end

    module DeleteFlowLogsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteFlowLogsOutput, context: context)
        type = Types::DeleteFlowLogsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.unsuccessful = UnsuccessfulItemSet.build(params[:unsuccessful], context: "#{context}[:unsuccessful]") unless params[:unsuccessful].nil?
        type
      end
    end

    module DeleteFpgaImageInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteFpgaImageInput, context: context)
        type = Types::DeleteFpgaImageInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.fpga_image_id = params[:fpga_image_id]
        type
      end
    end

    module DeleteFpgaImageOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteFpgaImageOutput, context: context)
        type = Types::DeleteFpgaImageOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module DeleteInstanceConnectEndpointInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteInstanceConnectEndpointInput, context: context)
        type = Types::DeleteInstanceConnectEndpointInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.instance_connect_endpoint_id = params[:instance_connect_endpoint_id]
        type
      end
    end

    module DeleteInstanceConnectEndpointOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteInstanceConnectEndpointOutput, context: context)
        type = Types::DeleteInstanceConnectEndpointOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_connect_endpoint = Ec2InstanceConnectEndpoint.build(params[:instance_connect_endpoint], context: "#{context}[:instance_connect_endpoint]") unless params[:instance_connect_endpoint].nil?
        type
      end
    end

    module DeleteInstanceEventWindowInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteInstanceEventWindowInput, context: context)
        type = Types::DeleteInstanceEventWindowInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.force_delete = params[:force_delete]
        type.instance_event_window_id = params[:instance_event_window_id]
        type
      end
    end

    module DeleteInstanceEventWindowOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteInstanceEventWindowOutput, context: context)
        type = Types::DeleteInstanceEventWindowOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_event_window_state = InstanceEventWindowStateChange.build(params[:instance_event_window_state], context: "#{context}[:instance_event_window_state]") unless params[:instance_event_window_state].nil?
        type
      end
    end

    module DeleteInternetGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteInternetGatewayInput, context: context)
        type = Types::DeleteInternetGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.internet_gateway_id = params[:internet_gateway_id]
        type
      end
    end

    module DeleteInternetGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteInternetGatewayOutput, context: context)
        type = Types::DeleteInternetGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteIpamInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteIpamInput, context: context)
        type = Types::DeleteIpamInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_id = params[:ipam_id]
        type.cascade = params[:cascade]
        type
      end
    end

    module DeleteIpamOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteIpamOutput, context: context)
        type = Types::DeleteIpamOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam = Ipam.build(params[:ipam], context: "#{context}[:ipam]") unless params[:ipam].nil?
        type
      end
    end

    module DeleteIpamPoolInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteIpamPoolInput, context: context)
        type = Types::DeleteIpamPoolInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_pool_id = params[:ipam_pool_id]
        type.cascade = params[:cascade]
        type
      end
    end

    module DeleteIpamPoolOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteIpamPoolOutput, context: context)
        type = Types::DeleteIpamPoolOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_pool = IpamPool.build(params[:ipam_pool], context: "#{context}[:ipam_pool]") unless params[:ipam_pool].nil?
        type
      end
    end

    module DeleteIpamResourceDiscoveryInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteIpamResourceDiscoveryInput, context: context)
        type = Types::DeleteIpamResourceDiscoveryInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_resource_discovery_id = params[:ipam_resource_discovery_id]
        type
      end
    end

    module DeleteIpamResourceDiscoveryOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteIpamResourceDiscoveryOutput, context: context)
        type = Types::DeleteIpamResourceDiscoveryOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_resource_discovery = IpamResourceDiscovery.build(params[:ipam_resource_discovery], context: "#{context}[:ipam_resource_discovery]") unless params[:ipam_resource_discovery].nil?
        type
      end
    end

    module DeleteIpamScopeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteIpamScopeInput, context: context)
        type = Types::DeleteIpamScopeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_scope_id = params[:ipam_scope_id]
        type
      end
    end

    module DeleteIpamScopeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteIpamScopeOutput, context: context)
        type = Types::DeleteIpamScopeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_scope = IpamScope.build(params[:ipam_scope], context: "#{context}[:ipam_scope]") unless params[:ipam_scope].nil?
        type
      end
    end

    module DeleteKeyPairInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteKeyPairInput, context: context)
        type = Types::DeleteKeyPairInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.key_name = params[:key_name]
        type.key_pair_id = params[:key_pair_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteKeyPairOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteKeyPairOutput, context: context)
        type = Types::DeleteKeyPairOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type.key_pair_id = params[:key_pair_id]
        type
      end
    end

    module DeleteLaunchTemplateInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteLaunchTemplateInput, context: context)
        type = Types::DeleteLaunchTemplateInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.launch_template_id = params[:launch_template_id]
        type.launch_template_name = params[:launch_template_name]
        type
      end
    end

    module DeleteLaunchTemplateOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteLaunchTemplateOutput, context: context)
        type = Types::DeleteLaunchTemplateOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template = LaunchTemplate.build(params[:launch_template], context: "#{context}[:launch_template]") unless params[:launch_template].nil?
        type
      end
    end

    module DeleteLaunchTemplateVersionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteLaunchTemplateVersionsInput, context: context)
        type = Types::DeleteLaunchTemplateVersionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.launch_template_id = params[:launch_template_id]
        type.launch_template_name = params[:launch_template_name]
        type.versions = VersionStringList.build(params[:versions], context: "#{context}[:versions]") unless params[:versions].nil?
        type
      end
    end

    module DeleteLaunchTemplateVersionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteLaunchTemplateVersionsOutput, context: context)
        type = Types::DeleteLaunchTemplateVersionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.successfully_deleted_launch_template_versions = DeleteLaunchTemplateVersionsResponseSuccessSet.build(params[:successfully_deleted_launch_template_versions], context: "#{context}[:successfully_deleted_launch_template_versions]") unless params[:successfully_deleted_launch_template_versions].nil?
        type.unsuccessfully_deleted_launch_template_versions = DeleteLaunchTemplateVersionsResponseErrorSet.build(params[:unsuccessfully_deleted_launch_template_versions], context: "#{context}[:unsuccessfully_deleted_launch_template_versions]") unless params[:unsuccessfully_deleted_launch_template_versions].nil?
        type
      end
    end

    module DeleteLaunchTemplateVersionsResponseErrorItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteLaunchTemplateVersionsResponseErrorItem, context: context)
        type = Types::DeleteLaunchTemplateVersionsResponseErrorItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_id = params[:launch_template_id]
        type.launch_template_name = params[:launch_template_name]
        type.version_number = params[:version_number]
        type.response_error = ResponseError.build(params[:response_error], context: "#{context}[:response_error]") unless params[:response_error].nil?
        type
      end
    end

    module DeleteLaunchTemplateVersionsResponseErrorSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DeleteLaunchTemplateVersionsResponseErrorItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DeleteLaunchTemplateVersionsResponseSuccessItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteLaunchTemplateVersionsResponseSuccessItem, context: context)
        type = Types::DeleteLaunchTemplateVersionsResponseSuccessItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_id = params[:launch_template_id]
        type.launch_template_name = params[:launch_template_name]
        type.version_number = params[:version_number]
        type
      end
    end

    module DeleteLaunchTemplateVersionsResponseSuccessSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DeleteLaunchTemplateVersionsResponseSuccessItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DeleteLocalGatewayRouteInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteLocalGatewayRouteInput, context: context)
        type = Types::DeleteLocalGatewayRouteInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr_block = params[:destination_cidr_block]
        type.local_gateway_route_table_id = params[:local_gateway_route_table_id]
        type.dry_run = params[:dry_run]
        type.destination_prefix_list_id = params[:destination_prefix_list_id]
        type
      end
    end

    module DeleteLocalGatewayRouteOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteLocalGatewayRouteOutput, context: context)
        type = Types::DeleteLocalGatewayRouteOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.route = LocalGatewayRoute.build(params[:route], context: "#{context}[:route]") unless params[:route].nil?
        type
      end
    end

    module DeleteLocalGatewayRouteTableInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteLocalGatewayRouteTableInput, context: context)
        type = Types::DeleteLocalGatewayRouteTableInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_id = params[:local_gateway_route_table_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteLocalGatewayRouteTableOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteLocalGatewayRouteTableOutput, context: context)
        type = Types::DeleteLocalGatewayRouteTableOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table = LocalGatewayRouteTable.build(params[:local_gateway_route_table], context: "#{context}[:local_gateway_route_table]") unless params[:local_gateway_route_table].nil?
        type
      end
    end

    module DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput, context: context)
        type = Types::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_virtual_interface_group_association_id = params[:local_gateway_route_table_virtual_interface_group_association_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput, context: context)
        type = Types::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_virtual_interface_group_association = LocalGatewayRouteTableVirtualInterfaceGroupAssociation.build(params[:local_gateway_route_table_virtual_interface_group_association], context: "#{context}[:local_gateway_route_table_virtual_interface_group_association]") unless params[:local_gateway_route_table_virtual_interface_group_association].nil?
        type
      end
    end

    module DeleteLocalGatewayRouteTableVpcAssociationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteLocalGatewayRouteTableVpcAssociationInput, context: context)
        type = Types::DeleteLocalGatewayRouteTableVpcAssociationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_vpc_association_id = params[:local_gateway_route_table_vpc_association_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteLocalGatewayRouteTableVpcAssociationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteLocalGatewayRouteTableVpcAssociationOutput, context: context)
        type = Types::DeleteLocalGatewayRouteTableVpcAssociationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_vpc_association = LocalGatewayRouteTableVpcAssociation.build(params[:local_gateway_route_table_vpc_association], context: "#{context}[:local_gateway_route_table_vpc_association]") unless params[:local_gateway_route_table_vpc_association].nil?
        type
      end
    end

    module DeleteManagedPrefixListInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteManagedPrefixListInput, context: context)
        type = Types::DeleteManagedPrefixListInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.prefix_list_id = params[:prefix_list_id]
        type
      end
    end

    module DeleteManagedPrefixListOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteManagedPrefixListOutput, context: context)
        type = Types::DeleteManagedPrefixListOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.prefix_list = ManagedPrefixList.build(params[:prefix_list], context: "#{context}[:prefix_list]") unless params[:prefix_list].nil?
        type
      end
    end

    module DeleteNatGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNatGatewayInput, context: context)
        type = Types::DeleteNatGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.nat_gateway_id = params[:nat_gateway_id]
        type
      end
    end

    module DeleteNatGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNatGatewayOutput, context: context)
        type = Types::DeleteNatGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.nat_gateway_id = params[:nat_gateway_id]
        type
      end
    end

    module DeleteNetworkAclEntryInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkAclEntryInput, context: context)
        type = Types::DeleteNetworkAclEntryInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.egress = params[:egress]
        type.network_acl_id = params[:network_acl_id]
        type.rule_number = params[:rule_number]
        type
      end
    end

    module DeleteNetworkAclEntryOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkAclEntryOutput, context: context)
        type = Types::DeleteNetworkAclEntryOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteNetworkAclInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkAclInput, context: context)
        type = Types::DeleteNetworkAclInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.network_acl_id = params[:network_acl_id]
        type
      end
    end

    module DeleteNetworkAclOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkAclOutput, context: context)
        type = Types::DeleteNetworkAclOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteNetworkInsightsAccessScopeAnalysisInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkInsightsAccessScopeAnalysisInput, context: context)
        type = Types::DeleteNetworkInsightsAccessScopeAnalysisInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_analysis_id = params[:network_insights_access_scope_analysis_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteNetworkInsightsAccessScopeAnalysisOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkInsightsAccessScopeAnalysisOutput, context: context)
        type = Types::DeleteNetworkInsightsAccessScopeAnalysisOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_analysis_id = params[:network_insights_access_scope_analysis_id]
        type
      end
    end

    module DeleteNetworkInsightsAccessScopeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkInsightsAccessScopeInput, context: context)
        type = Types::DeleteNetworkInsightsAccessScopeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.network_insights_access_scope_id = params[:network_insights_access_scope_id]
        type
      end
    end

    module DeleteNetworkInsightsAccessScopeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkInsightsAccessScopeOutput, context: context)
        type = Types::DeleteNetworkInsightsAccessScopeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_id = params[:network_insights_access_scope_id]
        type
      end
    end

    module DeleteNetworkInsightsAnalysisInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkInsightsAnalysisInput, context: context)
        type = Types::DeleteNetworkInsightsAnalysisInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.network_insights_analysis_id = params[:network_insights_analysis_id]
        type
      end
    end

    module DeleteNetworkInsightsAnalysisOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkInsightsAnalysisOutput, context: context)
        type = Types::DeleteNetworkInsightsAnalysisOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_analysis_id = params[:network_insights_analysis_id]
        type
      end
    end

    module DeleteNetworkInsightsPathInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkInsightsPathInput, context: context)
        type = Types::DeleteNetworkInsightsPathInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.network_insights_path_id = params[:network_insights_path_id]
        type
      end
    end

    module DeleteNetworkInsightsPathOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkInsightsPathOutput, context: context)
        type = Types::DeleteNetworkInsightsPathOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_path_id = params[:network_insights_path_id]
        type
      end
    end

    module DeleteNetworkInterfaceInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkInterfaceInput, context: context)
        type = Types::DeleteNetworkInterfaceInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.network_interface_id = params[:network_interface_id]
        type
      end
    end

    module DeleteNetworkInterfaceOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkInterfaceOutput, context: context)
        type = Types::DeleteNetworkInterfaceOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteNetworkInterfacePermissionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkInterfacePermissionInput, context: context)
        type = Types::DeleteNetworkInterfacePermissionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_interface_permission_id = params[:network_interface_permission_id]
        type.force = params[:force]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteNetworkInterfacePermissionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteNetworkInterfacePermissionOutput, context: context)
        type = Types::DeleteNetworkInterfacePermissionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module DeletePlacementGroupInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeletePlacementGroupInput, context: context)
        type = Types::DeletePlacementGroupInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.group_name = params[:group_name]
        type
      end
    end

    module DeletePlacementGroupOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeletePlacementGroupOutput, context: context)
        type = Types::DeletePlacementGroupOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeletePublicIpv4PoolInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeletePublicIpv4PoolInput, context: context)
        type = Types::DeletePublicIpv4PoolInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.pool_id = params[:pool_id]
        type
      end
    end

    module DeletePublicIpv4PoolOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeletePublicIpv4PoolOutput, context: context)
        type = Types::DeletePublicIpv4PoolOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return_value = params[:return_value]
        type
      end
    end

    module DeleteQueuedReservedInstancesError
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteQueuedReservedInstancesError, context: context)
        type = Types::DeleteQueuedReservedInstancesError.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module DeleteQueuedReservedInstancesIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module DeleteQueuedReservedInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteQueuedReservedInstancesInput, context: context)
        type = Types::DeleteQueuedReservedInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.reserved_instances_ids = DeleteQueuedReservedInstancesIdList.build(params[:reserved_instances_ids], context: "#{context}[:reserved_instances_ids]") unless params[:reserved_instances_ids].nil?
        type
      end
    end

    module DeleteQueuedReservedInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteQueuedReservedInstancesOutput, context: context)
        type = Types::DeleteQueuedReservedInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.successful_queued_purchase_deletions = SuccessfulQueuedPurchaseDeletionSet.build(params[:successful_queued_purchase_deletions], context: "#{context}[:successful_queued_purchase_deletions]") unless params[:successful_queued_purchase_deletions].nil?
        type.failed_queued_purchase_deletions = FailedQueuedPurchaseDeletionSet.build(params[:failed_queued_purchase_deletions], context: "#{context}[:failed_queued_purchase_deletions]") unless params[:failed_queued_purchase_deletions].nil?
        type
      end
    end

    module DeleteRouteInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteRouteInput, context: context)
        type = Types::DeleteRouteInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr_block = params[:destination_cidr_block]
        type.destination_ipv6_cidr_block = params[:destination_ipv6_cidr_block]
        type.destination_prefix_list_id = params[:destination_prefix_list_id]
        type.dry_run = params[:dry_run]
        type.route_table_id = params[:route_table_id]
        type
      end
    end

    module DeleteRouteOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteRouteOutput, context: context)
        type = Types::DeleteRouteOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteRouteTableInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteRouteTableInput, context: context)
        type = Types::DeleteRouteTableInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.route_table_id = params[:route_table_id]
        type
      end
    end

    module DeleteRouteTableOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteRouteTableOutput, context: context)
        type = Types::DeleteRouteTableOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteSecurityGroupInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteSecurityGroupInput, context: context)
        type = Types::DeleteSecurityGroupInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group_id = params[:group_id]
        type.group_name = params[:group_name]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteSecurityGroupOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteSecurityGroupOutput, context: context)
        type = Types::DeleteSecurityGroupOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteSnapshotInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteSnapshotInput, context: context)
        type = Types::DeleteSnapshotInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteSnapshotOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteSnapshotOutput, context: context)
        type = Types::DeleteSnapshotOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteSpotDatafeedSubscriptionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteSpotDatafeedSubscriptionInput, context: context)
        type = Types::DeleteSpotDatafeedSubscriptionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteSpotDatafeedSubscriptionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteSpotDatafeedSubscriptionOutput, context: context)
        type = Types::DeleteSpotDatafeedSubscriptionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteSubnetCidrReservationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteSubnetCidrReservationInput, context: context)
        type = Types::DeleteSubnetCidrReservationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.subnet_cidr_reservation_id = params[:subnet_cidr_reservation_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteSubnetCidrReservationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteSubnetCidrReservationOutput, context: context)
        type = Types::DeleteSubnetCidrReservationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.deleted_subnet_cidr_reservation = SubnetCidrReservation.build(params[:deleted_subnet_cidr_reservation], context: "#{context}[:deleted_subnet_cidr_reservation]") unless params[:deleted_subnet_cidr_reservation].nil?
        type
      end
    end

    module DeleteSubnetInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteSubnetInput, context: context)
        type = Types::DeleteSubnetInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.subnet_id = params[:subnet_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteSubnetOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteSubnetOutput, context: context)
        type = Types::DeleteSubnetOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteTagsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTagsInput, context: context)
        type = Types::DeleteTagsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.resources = ResourceIdList.build(params[:resources], context: "#{context}[:resources]") unless params[:resources].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module DeleteTagsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTagsOutput, context: context)
        type = Types::DeleteTagsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteTrafficMirrorFilterInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTrafficMirrorFilterInput, context: context)
        type = Types::DeleteTrafficMirrorFilterInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_filter_id = params[:traffic_mirror_filter_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteTrafficMirrorFilterOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTrafficMirrorFilterOutput, context: context)
        type = Types::DeleteTrafficMirrorFilterOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_filter_id = params[:traffic_mirror_filter_id]
        type
      end
    end

    module DeleteTrafficMirrorFilterRuleInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTrafficMirrorFilterRuleInput, context: context)
        type = Types::DeleteTrafficMirrorFilterRuleInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_filter_rule_id = params[:traffic_mirror_filter_rule_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteTrafficMirrorFilterRuleOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTrafficMirrorFilterRuleOutput, context: context)
        type = Types::DeleteTrafficMirrorFilterRuleOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_filter_rule_id = params[:traffic_mirror_filter_rule_id]
        type
      end
    end

    module DeleteTrafficMirrorSessionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTrafficMirrorSessionInput, context: context)
        type = Types::DeleteTrafficMirrorSessionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_session_id = params[:traffic_mirror_session_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteTrafficMirrorSessionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTrafficMirrorSessionOutput, context: context)
        type = Types::DeleteTrafficMirrorSessionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_session_id = params[:traffic_mirror_session_id]
        type
      end
    end

    module DeleteTrafficMirrorTargetInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTrafficMirrorTargetInput, context: context)
        type = Types::DeleteTrafficMirrorTargetInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_target_id = params[:traffic_mirror_target_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteTrafficMirrorTargetOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTrafficMirrorTargetOutput, context: context)
        type = Types::DeleteTrafficMirrorTargetOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_target_id = params[:traffic_mirror_target_id]
        type
      end
    end

    module DeleteTransitGatewayConnectInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayConnectInput, context: context)
        type = Types::DeleteTransitGatewayConnectInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteTransitGatewayConnectOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayConnectOutput, context: context)
        type = Types::DeleteTransitGatewayConnectOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_connect = TransitGatewayConnect.build(params[:transit_gateway_connect], context: "#{context}[:transit_gateway_connect]") unless params[:transit_gateway_connect].nil?
        type
      end
    end

    module DeleteTransitGatewayConnectPeerInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayConnectPeerInput, context: context)
        type = Types::DeleteTransitGatewayConnectPeerInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_connect_peer_id = params[:transit_gateway_connect_peer_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteTransitGatewayConnectPeerOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayConnectPeerOutput, context: context)
        type = Types::DeleteTransitGatewayConnectPeerOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_connect_peer = TransitGatewayConnectPeer.build(params[:transit_gateway_connect_peer], context: "#{context}[:transit_gateway_connect_peer]") unless params[:transit_gateway_connect_peer].nil?
        type
      end
    end

    module DeleteTransitGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayInput, context: context)
        type = Types::DeleteTransitGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_id = params[:transit_gateway_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteTransitGatewayMulticastDomainInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayMulticastDomainInput, context: context)
        type = Types::DeleteTransitGatewayMulticastDomainInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteTransitGatewayMulticastDomainOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayMulticastDomainOutput, context: context)
        type = Types::DeleteTransitGatewayMulticastDomainOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain = TransitGatewayMulticastDomain.build(params[:transit_gateway_multicast_domain], context: "#{context}[:transit_gateway_multicast_domain]") unless params[:transit_gateway_multicast_domain].nil?
        type
      end
    end

    module DeleteTransitGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayOutput, context: context)
        type = Types::DeleteTransitGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway = TransitGateway.build(params[:transit_gateway], context: "#{context}[:transit_gateway]") unless params[:transit_gateway].nil?
        type
      end
    end

    module DeleteTransitGatewayPeeringAttachmentInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayPeeringAttachmentInput, context: context)
        type = Types::DeleteTransitGatewayPeeringAttachmentInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteTransitGatewayPeeringAttachmentOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayPeeringAttachmentOutput, context: context)
        type = Types::DeleteTransitGatewayPeeringAttachmentOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_peering_attachment = TransitGatewayPeeringAttachment.build(params[:transit_gateway_peering_attachment], context: "#{context}[:transit_gateway_peering_attachment]") unless params[:transit_gateway_peering_attachment].nil?
        type
      end
    end

    module DeleteTransitGatewayPolicyTableInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayPolicyTableInput, context: context)
        type = Types::DeleteTransitGatewayPolicyTableInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_policy_table_id = params[:transit_gateway_policy_table_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteTransitGatewayPolicyTableOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayPolicyTableOutput, context: context)
        type = Types::DeleteTransitGatewayPolicyTableOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_policy_table = TransitGatewayPolicyTable.build(params[:transit_gateway_policy_table], context: "#{context}[:transit_gateway_policy_table]") unless params[:transit_gateway_policy_table].nil?
        type
      end
    end

    module DeleteTransitGatewayPrefixListReferenceInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayPrefixListReferenceInput, context: context)
        type = Types::DeleteTransitGatewayPrefixListReferenceInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.prefix_list_id = params[:prefix_list_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteTransitGatewayPrefixListReferenceOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayPrefixListReferenceOutput, context: context)
        type = Types::DeleteTransitGatewayPrefixListReferenceOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_prefix_list_reference = TransitGatewayPrefixListReference.build(params[:transit_gateway_prefix_list_reference], context: "#{context}[:transit_gateway_prefix_list_reference]") unless params[:transit_gateway_prefix_list_reference].nil?
        type
      end
    end

    module DeleteTransitGatewayRouteInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayRouteInput, context: context)
        type = Types::DeleteTransitGatewayRouteInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.destination_cidr_block = params[:destination_cidr_block]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteTransitGatewayRouteOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayRouteOutput, context: context)
        type = Types::DeleteTransitGatewayRouteOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.route = TransitGatewayRoute.build(params[:route], context: "#{context}[:route]") unless params[:route].nil?
        type
      end
    end

    module DeleteTransitGatewayRouteTableAnnouncementInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayRouteTableAnnouncementInput, context: context)
        type = Types::DeleteTransitGatewayRouteTableAnnouncementInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_announcement_id = params[:transit_gateway_route_table_announcement_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteTransitGatewayRouteTableAnnouncementOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayRouteTableAnnouncementOutput, context: context)
        type = Types::DeleteTransitGatewayRouteTableAnnouncementOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_announcement = TransitGatewayRouteTableAnnouncement.build(params[:transit_gateway_route_table_announcement], context: "#{context}[:transit_gateway_route_table_announcement]") unless params[:transit_gateway_route_table_announcement].nil?
        type
      end
    end

    module DeleteTransitGatewayRouteTableInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayRouteTableInput, context: context)
        type = Types::DeleteTransitGatewayRouteTableInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteTransitGatewayRouteTableOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayRouteTableOutput, context: context)
        type = Types::DeleteTransitGatewayRouteTableOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table = TransitGatewayRouteTable.build(params[:transit_gateway_route_table], context: "#{context}[:transit_gateway_route_table]") unless params[:transit_gateway_route_table].nil?
        type
      end
    end

    module DeleteTransitGatewayVpcAttachmentInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayVpcAttachmentInput, context: context)
        type = Types::DeleteTransitGatewayVpcAttachmentInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteTransitGatewayVpcAttachmentOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteTransitGatewayVpcAttachmentOutput, context: context)
        type = Types::DeleteTransitGatewayVpcAttachmentOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_vpc_attachment = TransitGatewayVpcAttachment.build(params[:transit_gateway_vpc_attachment], context: "#{context}[:transit_gateway_vpc_attachment]") unless params[:transit_gateway_vpc_attachment].nil?
        type
      end
    end

    module DeleteVerifiedAccessEndpointInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVerifiedAccessEndpointInput, context: context)
        type = Types::DeleteVerifiedAccessEndpointInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_endpoint_id = params[:verified_access_endpoint_id]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteVerifiedAccessEndpointOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVerifiedAccessEndpointOutput, context: context)
        type = Types::DeleteVerifiedAccessEndpointOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_endpoint = VerifiedAccessEndpoint.build(params[:verified_access_endpoint], context: "#{context}[:verified_access_endpoint]") unless params[:verified_access_endpoint].nil?
        type
      end
    end

    module DeleteVerifiedAccessGroupInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVerifiedAccessGroupInput, context: context)
        type = Types::DeleteVerifiedAccessGroupInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_group_id = params[:verified_access_group_id]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteVerifiedAccessGroupOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVerifiedAccessGroupOutput, context: context)
        type = Types::DeleteVerifiedAccessGroupOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_group = VerifiedAccessGroup.build(params[:verified_access_group], context: "#{context}[:verified_access_group]") unless params[:verified_access_group].nil?
        type
      end
    end

    module DeleteVerifiedAccessInstanceInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVerifiedAccessInstanceInput, context: context)
        type = Types::DeleteVerifiedAccessInstanceInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_instance_id = params[:verified_access_instance_id]
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module DeleteVerifiedAccessInstanceOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVerifiedAccessInstanceOutput, context: context)
        type = Types::DeleteVerifiedAccessInstanceOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_instance = VerifiedAccessInstance.build(params[:verified_access_instance], context: "#{context}[:verified_access_instance]") unless params[:verified_access_instance].nil?
        type
      end
    end

    module DeleteVerifiedAccessTrustProviderInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVerifiedAccessTrustProviderInput, context: context)
        type = Types::DeleteVerifiedAccessTrustProviderInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_trust_provider_id = params[:verified_access_trust_provider_id]
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module DeleteVerifiedAccessTrustProviderOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVerifiedAccessTrustProviderOutput, context: context)
        type = Types::DeleteVerifiedAccessTrustProviderOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_trust_provider = VerifiedAccessTrustProvider.build(params[:verified_access_trust_provider], context: "#{context}[:verified_access_trust_provider]") unless params[:verified_access_trust_provider].nil?
        type
      end
    end

    module DeleteVolumeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVolumeInput, context: context)
        type = Types::DeleteVolumeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.volume_id = params[:volume_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteVolumeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVolumeOutput, context: context)
        type = Types::DeleteVolumeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteVpcEndpointConnectionNotificationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpcEndpointConnectionNotificationsInput, context: context)
        type = Types::DeleteVpcEndpointConnectionNotificationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.connection_notification_ids = ConnectionNotificationIdsList.build(params[:connection_notification_ids], context: "#{context}[:connection_notification_ids]") unless params[:connection_notification_ids].nil?
        type
      end
    end

    module DeleteVpcEndpointConnectionNotificationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpcEndpointConnectionNotificationsOutput, context: context)
        type = Types::DeleteVpcEndpointConnectionNotificationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.unsuccessful = UnsuccessfulItemSet.build(params[:unsuccessful], context: "#{context}[:unsuccessful]") unless params[:unsuccessful].nil?
        type
      end
    end

    module DeleteVpcEndpointServiceConfigurationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpcEndpointServiceConfigurationsInput, context: context)
        type = Types::DeleteVpcEndpointServiceConfigurationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.service_ids = VpcEndpointServiceIdList.build(params[:service_ids], context: "#{context}[:service_ids]") unless params[:service_ids].nil?
        type
      end
    end

    module DeleteVpcEndpointServiceConfigurationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpcEndpointServiceConfigurationsOutput, context: context)
        type = Types::DeleteVpcEndpointServiceConfigurationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.unsuccessful = UnsuccessfulItemSet.build(params[:unsuccessful], context: "#{context}[:unsuccessful]") unless params[:unsuccessful].nil?
        type
      end
    end

    module DeleteVpcEndpointsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpcEndpointsInput, context: context)
        type = Types::DeleteVpcEndpointsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.vpc_endpoint_ids = VpcEndpointIdList.build(params[:vpc_endpoint_ids], context: "#{context}[:vpc_endpoint_ids]") unless params[:vpc_endpoint_ids].nil?
        type
      end
    end

    module DeleteVpcEndpointsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpcEndpointsOutput, context: context)
        type = Types::DeleteVpcEndpointsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.unsuccessful = UnsuccessfulItemSet.build(params[:unsuccessful], context: "#{context}[:unsuccessful]") unless params[:unsuccessful].nil?
        type
      end
    end

    module DeleteVpcInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpcInput, context: context)
        type = Types::DeleteVpcInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_id = params[:vpc_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteVpcOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpcOutput, context: context)
        type = Types::DeleteVpcOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteVpcPeeringConnectionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpcPeeringConnectionInput, context: context)
        type = Types::DeleteVpcPeeringConnectionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.vpc_peering_connection_id = params[:vpc_peering_connection_id]
        type
      end
    end

    module DeleteVpcPeeringConnectionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpcPeeringConnectionOutput, context: context)
        type = Types::DeleteVpcPeeringConnectionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module DeleteVpnConnectionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpnConnectionInput, context: context)
        type = Types::DeleteVpnConnectionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection_id = params[:vpn_connection_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteVpnConnectionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpnConnectionOutput, context: context)
        type = Types::DeleteVpnConnectionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteVpnConnectionRouteInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpnConnectionRouteInput, context: context)
        type = Types::DeleteVpnConnectionRouteInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr_block = params[:destination_cidr_block]
        type.vpn_connection_id = params[:vpn_connection_id]
        type
      end
    end

    module DeleteVpnConnectionRouteOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpnConnectionRouteOutput, context: context)
        type = Types::DeleteVpnConnectionRouteOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeleteVpnGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpnGatewayInput, context: context)
        type = Types::DeleteVpnGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_gateway_id = params[:vpn_gateway_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeleteVpnGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeleteVpnGatewayOutput, context: context)
        type = Types::DeleteVpnGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeprovisionByoipCidrInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeprovisionByoipCidrInput, context: context)
        type = Types::DeprovisionByoipCidrInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeprovisionByoipCidrOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeprovisionByoipCidrOutput, context: context)
        type = Types::DeprovisionByoipCidrOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.byoip_cidr = ByoipCidr.build(params[:byoip_cidr], context: "#{context}[:byoip_cidr]") unless params[:byoip_cidr].nil?
        type
      end
    end

    module DeprovisionIpamByoasnInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeprovisionIpamByoasnInput, context: context)
        type = Types::DeprovisionIpamByoasnInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_id = params[:ipam_id]
        type.asn = params[:asn]
        type
      end
    end

    module DeprovisionIpamByoasnOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeprovisionIpamByoasnOutput, context: context)
        type = Types::DeprovisionIpamByoasnOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.byoasn = Byoasn.build(params[:byoasn], context: "#{context}[:byoasn]") unless params[:byoasn].nil?
        type
      end
    end

    module DeprovisionIpamPoolCidrInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeprovisionIpamPoolCidrInput, context: context)
        type = Types::DeprovisionIpamPoolCidrInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_pool_id = params[:ipam_pool_id]
        type.cidr = params[:cidr]
        type
      end
    end

    module DeprovisionIpamPoolCidrOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeprovisionIpamPoolCidrOutput, context: context)
        type = Types::DeprovisionIpamPoolCidrOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_pool_cidr = IpamPoolCidr.build(params[:ipam_pool_cidr], context: "#{context}[:ipam_pool_cidr]") unless params[:ipam_pool_cidr].nil?
        type
      end
    end

    module DeprovisionPublicIpv4PoolCidrInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeprovisionPublicIpv4PoolCidrInput, context: context)
        type = Types::DeprovisionPublicIpv4PoolCidrInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.pool_id = params[:pool_id]
        type.cidr = params[:cidr]
        type
      end
    end

    module DeprovisionPublicIpv4PoolCidrOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeprovisionPublicIpv4PoolCidrOutput, context: context)
        type = Types::DeprovisionPublicIpv4PoolCidrOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.pool_id = params[:pool_id]
        type.deprovisioned_addresses = DeprovisionedAddressSet.build(params[:deprovisioned_addresses], context: "#{context}[:deprovisioned_addresses]") unless params[:deprovisioned_addresses].nil?
        type
      end
    end

    module DeprovisionedAddressSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module DeregisterImageInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeregisterImageInput, context: context)
        type = Types::DeregisterImageInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeregisterImageOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeregisterImageOutput, context: context)
        type = Types::DeregisterImageOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeregisterInstanceEventNotificationAttributesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeregisterInstanceEventNotificationAttributesInput, context: context)
        type = Types::DeregisterInstanceEventNotificationAttributesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.instance_tag_attribute = DeregisterInstanceTagAttributeRequest.build(params[:instance_tag_attribute], context: "#{context}[:instance_tag_attribute]") unless params[:instance_tag_attribute].nil?
        type
      end
    end

    module DeregisterInstanceEventNotificationAttributesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeregisterInstanceEventNotificationAttributesOutput, context: context)
        type = Types::DeregisterInstanceEventNotificationAttributesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_tag_attribute = InstanceTagNotificationAttribute.build(params[:instance_tag_attribute], context: "#{context}[:instance_tag_attribute]") unless params[:instance_tag_attribute].nil?
        type
      end
    end

    module DeregisterInstanceTagAttributeRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeregisterInstanceTagAttributeRequest, context: context)
        type = Types::DeregisterInstanceTagAttributeRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.include_all_tags_of_instance = params[:include_all_tags_of_instance]
        type.instance_tag_keys = InstanceTagKeySet.build(params[:instance_tag_keys], context: "#{context}[:instance_tag_keys]") unless params[:instance_tag_keys].nil?
        type
      end
    end

    module DeregisterTransitGatewayMulticastGroupMembersInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeregisterTransitGatewayMulticastGroupMembersInput, context: context)
        type = Types::DeregisterTransitGatewayMulticastGroupMembersInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.group_ip_address = params[:group_ip_address]
        type.network_interface_ids = TransitGatewayNetworkInterfaceIdList.build(params[:network_interface_ids], context: "#{context}[:network_interface_ids]") unless params[:network_interface_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeregisterTransitGatewayMulticastGroupMembersOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeregisterTransitGatewayMulticastGroupMembersOutput, context: context)
        type = Types::DeregisterTransitGatewayMulticastGroupMembersOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.deregistered_multicast_group_members = TransitGatewayMulticastDeregisteredGroupMembers.build(params[:deregistered_multicast_group_members], context: "#{context}[:deregistered_multicast_group_members]") unless params[:deregistered_multicast_group_members].nil?
        type
      end
    end

    module DeregisterTransitGatewayMulticastGroupSourcesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeregisterTransitGatewayMulticastGroupSourcesInput, context: context)
        type = Types::DeregisterTransitGatewayMulticastGroupSourcesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.group_ip_address = params[:group_ip_address]
        type.network_interface_ids = TransitGatewayNetworkInterfaceIdList.build(params[:network_interface_ids], context: "#{context}[:network_interface_ids]") unless params[:network_interface_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DeregisterTransitGatewayMulticastGroupSourcesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeregisterTransitGatewayMulticastGroupSourcesOutput, context: context)
        type = Types::DeregisterTransitGatewayMulticastGroupSourcesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.deregistered_multicast_group_sources = TransitGatewayMulticastDeregisteredGroupSources.build(params[:deregistered_multicast_group_sources], context: "#{context}[:deregistered_multicast_group_sources]") unless params[:deregistered_multicast_group_sources].nil?
        type
      end
    end

    module DescribeAccountAttributesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeAccountAttributesInput, context: context)
        type = Types::DescribeAccountAttributesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attribute_names = AccountAttributeNameStringList.build(params[:attribute_names], context: "#{context}[:attribute_names]") unless params[:attribute_names].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeAccountAttributesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeAccountAttributesOutput, context: context)
        type = Types::DescribeAccountAttributesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.account_attributes = AccountAttributeList.build(params[:account_attributes], context: "#{context}[:account_attributes]") unless params[:account_attributes].nil?
        type
      end
    end

    module DescribeAddressTransfersInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeAddressTransfersInput, context: context)
        type = Types::DescribeAddressTransfersInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_ids = AllocationIdList.build(params[:allocation_ids], context: "#{context}[:allocation_ids]") unless params[:allocation_ids].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeAddressTransfersOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeAddressTransfersOutput, context: context)
        type = Types::DescribeAddressTransfersOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.address_transfers = AddressTransferList.build(params[:address_transfers], context: "#{context}[:address_transfers]") unless params[:address_transfers].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeAddressesAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeAddressesAttributeInput, context: context)
        type = Types::DescribeAddressesAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_ids = AllocationIds.build(params[:allocation_ids], context: "#{context}[:allocation_ids]") unless params[:allocation_ids].nil?
        type.attribute = params[:attribute]
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeAddressesAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeAddressesAttributeOutput, context: context)
        type = Types::DescribeAddressesAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.addresses = AddressSet.build(params[:addresses], context: "#{context}[:addresses]") unless params[:addresses].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeAddressesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeAddressesInput, context: context)
        type = Types::DescribeAddressesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.public_ips = PublicIpStringList.build(params[:public_ips], context: "#{context}[:public_ips]") unless params[:public_ips].nil?
        type.allocation_ids = AllocationIdList.build(params[:allocation_ids], context: "#{context}[:allocation_ids]") unless params[:allocation_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeAddressesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeAddressesOutput, context: context)
        type = Types::DescribeAddressesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.addresses = AddressList.build(params[:addresses], context: "#{context}[:addresses]") unless params[:addresses].nil?
        type
      end
    end

    module DescribeAggregateIdFormatInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeAggregateIdFormatInput, context: context)
        type = Types::DescribeAggregateIdFormatInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeAggregateIdFormatOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeAggregateIdFormatOutput, context: context)
        type = Types::DescribeAggregateIdFormatOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.use_long_ids_aggregated = params[:use_long_ids_aggregated]
        type.statuses = IdFormatList.build(params[:statuses], context: "#{context}[:statuses]") unless params[:statuses].nil?
        type
      end
    end

    module DescribeAvailabilityZonesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeAvailabilityZonesInput, context: context)
        type = Types::DescribeAvailabilityZonesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.zone_names = ZoneNameStringList.build(params[:zone_names], context: "#{context}[:zone_names]") unless params[:zone_names].nil?
        type.zone_ids = ZoneIdStringList.build(params[:zone_ids], context: "#{context}[:zone_ids]") unless params[:zone_ids].nil?
        type.all_availability_zones = params[:all_availability_zones]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeAvailabilityZonesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeAvailabilityZonesOutput, context: context)
        type = Types::DescribeAvailabilityZonesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zones = AvailabilityZoneList.build(params[:availability_zones], context: "#{context}[:availability_zones]") unless params[:availability_zones].nil?
        type
      end
    end

    module DescribeAwsNetworkPerformanceMetricSubscriptionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeAwsNetworkPerformanceMetricSubscriptionsInput, context: context)
        type = Types::DescribeAwsNetworkPerformanceMetricSubscriptionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeAwsNetworkPerformanceMetricSubscriptionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeAwsNetworkPerformanceMetricSubscriptionsOutput, context: context)
        type = Types::DescribeAwsNetworkPerformanceMetricSubscriptionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.subscriptions = SubscriptionList.build(params[:subscriptions], context: "#{context}[:subscriptions]") unless params[:subscriptions].nil?
        type
      end
    end

    module DescribeBundleTasksInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeBundleTasksInput, context: context)
        type = Types::DescribeBundleTasksInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.bundle_ids = BundleIdStringList.build(params[:bundle_ids], context: "#{context}[:bundle_ids]") unless params[:bundle_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeBundleTasksOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeBundleTasksOutput, context: context)
        type = Types::DescribeBundleTasksOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.bundle_tasks = BundleTaskList.build(params[:bundle_tasks], context: "#{context}[:bundle_tasks]") unless params[:bundle_tasks].nil?
        type
      end
    end

    module DescribeByoipCidrsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeByoipCidrsInput, context: context)
        type = Types::DescribeByoipCidrsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeByoipCidrsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeByoipCidrsOutput, context: context)
        type = Types::DescribeByoipCidrsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.byoip_cidrs = ByoipCidrSet.build(params[:byoip_cidrs], context: "#{context}[:byoip_cidrs]") unless params[:byoip_cidrs].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeCapacityBlockOfferingsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeCapacityBlockOfferingsInput, context: context)
        type = Types::DescribeCapacityBlockOfferingsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.instance_type = params[:instance_type]
        type.instance_count = params[:instance_count]
        type.start_date_range = params[:start_date_range]
        type.end_date_range = params[:end_date_range]
        type.capacity_duration_hours = params[:capacity_duration_hours]
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeCapacityBlockOfferingsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeCapacityBlockOfferingsOutput, context: context)
        type = Types::DescribeCapacityBlockOfferingsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_block_offerings = CapacityBlockOfferingSet.build(params[:capacity_block_offerings], context: "#{context}[:capacity_block_offerings]") unless params[:capacity_block_offerings].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeCapacityReservationFleetsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeCapacityReservationFleetsInput, context: context)
        type = Types::DescribeCapacityReservationFleetsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_fleet_ids = CapacityReservationFleetIdSet.build(params[:capacity_reservation_fleet_ids], context: "#{context}[:capacity_reservation_fleet_ids]") unless params[:capacity_reservation_fleet_ids].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeCapacityReservationFleetsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeCapacityReservationFleetsOutput, context: context)
        type = Types::DescribeCapacityReservationFleetsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_fleets = CapacityReservationFleetSet.build(params[:capacity_reservation_fleets], context: "#{context}[:capacity_reservation_fleets]") unless params[:capacity_reservation_fleets].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeCapacityReservationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeCapacityReservationsInput, context: context)
        type = Types::DescribeCapacityReservationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_ids = CapacityReservationIdSet.build(params[:capacity_reservation_ids], context: "#{context}[:capacity_reservation_ids]") unless params[:capacity_reservation_ids].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeCapacityReservationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeCapacityReservationsOutput, context: context)
        type = Types::DescribeCapacityReservationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.capacity_reservations = CapacityReservationSet.build(params[:capacity_reservations], context: "#{context}[:capacity_reservations]") unless params[:capacity_reservations].nil?
        type
      end
    end

    module DescribeCarrierGatewaysInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeCarrierGatewaysInput, context: context)
        type = Types::DescribeCarrierGatewaysInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.carrier_gateway_ids = CarrierGatewayIdSet.build(params[:carrier_gateway_ids], context: "#{context}[:carrier_gateway_ids]") unless params[:carrier_gateway_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeCarrierGatewaysOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeCarrierGatewaysOutput, context: context)
        type = Types::DescribeCarrierGatewaysOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.carrier_gateways = CarrierGatewaySet.build(params[:carrier_gateways], context: "#{context}[:carrier_gateways]") unless params[:carrier_gateways].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeClassicLinkInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeClassicLinkInstancesInput, context: context)
        type = Types::DescribeClassicLinkInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type.instance_ids = InstanceIdStringList.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeClassicLinkInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeClassicLinkInstancesOutput, context: context)
        type = Types::DescribeClassicLinkInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instances = ClassicLinkInstanceList.build(params[:instances], context: "#{context}[:instances]") unless params[:instances].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeClientVpnAuthorizationRulesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeClientVpnAuthorizationRulesInput, context: context)
        type = Types::DescribeClientVpnAuthorizationRulesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.dry_run = params[:dry_run]
        type.next_token = params[:next_token]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeClientVpnAuthorizationRulesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeClientVpnAuthorizationRulesOutput, context: context)
        type = Types::DescribeClientVpnAuthorizationRulesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.authorization_rules = AuthorizationRuleSet.build(params[:authorization_rules], context: "#{context}[:authorization_rules]") unless params[:authorization_rules].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeClientVpnConnectionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeClientVpnConnectionsInput, context: context)
        type = Types::DescribeClientVpnConnectionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeClientVpnConnectionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeClientVpnConnectionsOutput, context: context)
        type = Types::DescribeClientVpnConnectionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.connections = ClientVpnConnectionSet.build(params[:connections], context: "#{context}[:connections]") unless params[:connections].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeClientVpnEndpointsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeClientVpnEndpointsInput, context: context)
        type = Types::DescribeClientVpnEndpointsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_ids = ClientVpnEndpointIdList.build(params[:client_vpn_endpoint_ids], context: "#{context}[:client_vpn_endpoint_ids]") unless params[:client_vpn_endpoint_ids].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeClientVpnEndpointsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeClientVpnEndpointsOutput, context: context)
        type = Types::DescribeClientVpnEndpointsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoints = EndpointSet.build(params[:client_vpn_endpoints], context: "#{context}[:client_vpn_endpoints]") unless params[:client_vpn_endpoints].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeClientVpnRoutesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeClientVpnRoutesInput, context: context)
        type = Types::DescribeClientVpnRoutesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeClientVpnRoutesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeClientVpnRoutesOutput, context: context)
        type = Types::DescribeClientVpnRoutesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.routes = ClientVpnRouteSet.build(params[:routes], context: "#{context}[:routes]") unless params[:routes].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeClientVpnTargetNetworksInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeClientVpnTargetNetworksInput, context: context)
        type = Types::DescribeClientVpnTargetNetworksInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.association_ids = ValueStringList.build(params[:association_ids], context: "#{context}[:association_ids]") unless params[:association_ids].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeClientVpnTargetNetworksOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeClientVpnTargetNetworksOutput, context: context)
        type = Types::DescribeClientVpnTargetNetworksOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_target_networks = TargetNetworkSet.build(params[:client_vpn_target_networks], context: "#{context}[:client_vpn_target_networks]") unless params[:client_vpn_target_networks].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeCoipPoolsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeCoipPoolsInput, context: context)
        type = Types::DescribeCoipPoolsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.pool_ids = CoipPoolIdSet.build(params[:pool_ids], context: "#{context}[:pool_ids]") unless params[:pool_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeCoipPoolsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeCoipPoolsOutput, context: context)
        type = Types::DescribeCoipPoolsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.coip_pools = CoipPoolSet.build(params[:coip_pools], context: "#{context}[:coip_pools]") unless params[:coip_pools].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeConversionTaskList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ConversionTask.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DescribeConversionTasksInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeConversionTasksInput, context: context)
        type = Types::DescribeConversionTasksInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.conversion_task_ids = ConversionIdStringList.build(params[:conversion_task_ids], context: "#{context}[:conversion_task_ids]") unless params[:conversion_task_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeConversionTasksOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeConversionTasksOutput, context: context)
        type = Types::DescribeConversionTasksOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.conversion_tasks = DescribeConversionTaskList.build(params[:conversion_tasks], context: "#{context}[:conversion_tasks]") unless params[:conversion_tasks].nil?
        type
      end
    end

    module DescribeCustomerGatewaysInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeCustomerGatewaysInput, context: context)
        type = Types::DescribeCustomerGatewaysInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.customer_gateway_ids = CustomerGatewayIdStringList.build(params[:customer_gateway_ids], context: "#{context}[:customer_gateway_ids]") unless params[:customer_gateway_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeCustomerGatewaysOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeCustomerGatewaysOutput, context: context)
        type = Types::DescribeCustomerGatewaysOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.customer_gateways = CustomerGatewayList.build(params[:customer_gateways], context: "#{context}[:customer_gateways]") unless params[:customer_gateways].nil?
        type
      end
    end

    module DescribeDhcpOptionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeDhcpOptionsInput, context: context)
        type = Types::DescribeDhcpOptionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dhcp_options_ids = DhcpOptionsIdStringList.build(params[:dhcp_options_ids], context: "#{context}[:dhcp_options_ids]") unless params[:dhcp_options_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeDhcpOptionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeDhcpOptionsOutput, context: context)
        type = Types::DescribeDhcpOptionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dhcp_options = DhcpOptionsList.build(params[:dhcp_options], context: "#{context}[:dhcp_options]") unless params[:dhcp_options].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeEgressOnlyInternetGatewaysInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeEgressOnlyInternetGatewaysInput, context: context)
        type = Types::DescribeEgressOnlyInternetGatewaysInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.egress_only_internet_gateway_ids = EgressOnlyInternetGatewayIdList.build(params[:egress_only_internet_gateway_ids], context: "#{context}[:egress_only_internet_gateway_ids]") unless params[:egress_only_internet_gateway_ids].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type
      end
    end

    module DescribeEgressOnlyInternetGatewaysOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeEgressOnlyInternetGatewaysOutput, context: context)
        type = Types::DescribeEgressOnlyInternetGatewaysOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.egress_only_internet_gateways = EgressOnlyInternetGatewayList.build(params[:egress_only_internet_gateways], context: "#{context}[:egress_only_internet_gateways]") unless params[:egress_only_internet_gateways].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeElasticGpusInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeElasticGpusInput, context: context)
        type = Types::DescribeElasticGpusInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.elastic_gpu_ids = ElasticGpuIdSet.build(params[:elastic_gpu_ids], context: "#{context}[:elastic_gpu_ids]") unless params[:elastic_gpu_ids].nil?
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeElasticGpusOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeElasticGpusOutput, context: context)
        type = Types::DescribeElasticGpusOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.elastic_gpu_set = ElasticGpuSet.build(params[:elastic_gpu_set], context: "#{context}[:elastic_gpu_set]") unless params[:elastic_gpu_set].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeExportImageTasksInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeExportImageTasksInput, context: context)
        type = Types::DescribeExportImageTasksInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.export_image_task_ids = ExportImageTaskIdList.build(params[:export_image_task_ids], context: "#{context}[:export_image_task_ids]") unless params[:export_image_task_ids].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeExportImageTasksOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeExportImageTasksOutput, context: context)
        type = Types::DescribeExportImageTasksOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.export_image_tasks = ExportImageTaskList.build(params[:export_image_tasks], context: "#{context}[:export_image_tasks]") unless params[:export_image_tasks].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeExportTasksInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeExportTasksInput, context: context)
        type = Types::DescribeExportTasksInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.export_task_ids = ExportTaskIdStringList.build(params[:export_task_ids], context: "#{context}[:export_task_ids]") unless params[:export_task_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type
      end
    end

    module DescribeExportTasksOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeExportTasksOutput, context: context)
        type = Types::DescribeExportTasksOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.export_tasks = ExportTaskList.build(params[:export_tasks], context: "#{context}[:export_tasks]") unless params[:export_tasks].nil?
        type
      end
    end

    module DescribeFastLaunchImagesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFastLaunchImagesInput, context: context)
        type = Types::DescribeFastLaunchImagesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_ids = FastLaunchImageIdList.build(params[:image_ids], context: "#{context}[:image_ids]") unless params[:image_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeFastLaunchImagesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFastLaunchImagesOutput, context: context)
        type = Types::DescribeFastLaunchImagesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.fast_launch_images = DescribeFastLaunchImagesSuccessSet.build(params[:fast_launch_images], context: "#{context}[:fast_launch_images]") unless params[:fast_launch_images].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeFastLaunchImagesSuccessItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFastLaunchImagesSuccessItem, context: context)
        type = Types::DescribeFastLaunchImagesSuccessItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type.resource_type = params[:resource_type]
        type.snapshot_configuration = FastLaunchSnapshotConfigurationResponse.build(params[:snapshot_configuration], context: "#{context}[:snapshot_configuration]") unless params[:snapshot_configuration].nil?
        type.launch_template = FastLaunchLaunchTemplateSpecificationResponse.build(params[:launch_template], context: "#{context}[:launch_template]") unless params[:launch_template].nil?
        type.max_parallel_launches = params[:max_parallel_launches]
        type.owner_id = params[:owner_id]
        type.state = params[:state]
        type.state_transition_reason = params[:state_transition_reason]
        type.state_transition_time = params[:state_transition_time]
        type
      end
    end

    module DescribeFastLaunchImagesSuccessSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DescribeFastLaunchImagesSuccessItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DescribeFastSnapshotRestoreSuccessItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFastSnapshotRestoreSuccessItem, context: context)
        type = Types::DescribeFastSnapshotRestoreSuccessItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.availability_zone = params[:availability_zone]
        type.state = params[:state]
        type.state_transition_reason = params[:state_transition_reason]
        type.owner_id = params[:owner_id]
        type.owner_alias = params[:owner_alias]
        type.enabling_time = params[:enabling_time]
        type.optimizing_time = params[:optimizing_time]
        type.enabled_time = params[:enabled_time]
        type.disabling_time = params[:disabling_time]
        type.disabled_time = params[:disabled_time]
        type
      end
    end

    module DescribeFastSnapshotRestoreSuccessSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DescribeFastSnapshotRestoreSuccessItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DescribeFastSnapshotRestoresInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFastSnapshotRestoresInput, context: context)
        type = Types::DescribeFastSnapshotRestoresInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeFastSnapshotRestoresOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFastSnapshotRestoresOutput, context: context)
        type = Types::DescribeFastSnapshotRestoresOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.fast_snapshot_restores = DescribeFastSnapshotRestoreSuccessSet.build(params[:fast_snapshot_restores], context: "#{context}[:fast_snapshot_restores]") unless params[:fast_snapshot_restores].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeFleetError
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFleetError, context: context)
        type = Types::DescribeFleetError.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_and_overrides = LaunchTemplateAndOverridesResponse.build(params[:launch_template_and_overrides], context: "#{context}[:launch_template_and_overrides]") unless params[:launch_template_and_overrides].nil?
        type.lifecycle = params[:lifecycle]
        type.error_code = params[:error_code]
        type.error_message = params[:error_message]
        type
      end
    end

    module DescribeFleetHistoryInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFleetHistoryInput, context: context)
        type = Types::DescribeFleetHistoryInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.event_type = params[:event_type]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.fleet_id = params[:fleet_id]
        type.start_time = params[:start_time]
        type
      end
    end

    module DescribeFleetHistoryOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFleetHistoryOutput, context: context)
        type = Types::DescribeFleetHistoryOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.history_records = HistoryRecordSet.build(params[:history_records], context: "#{context}[:history_records]") unless params[:history_records].nil?
        type.last_evaluated_time = params[:last_evaluated_time]
        type.next_token = params[:next_token]
        type.fleet_id = params[:fleet_id]
        type.start_time = params[:start_time]
        type
      end
    end

    module DescribeFleetInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFleetInstancesInput, context: context)
        type = Types::DescribeFleetInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.fleet_id = params[:fleet_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type
      end
    end

    module DescribeFleetInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFleetInstancesOutput, context: context)
        type = Types::DescribeFleetInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.active_instances = ActiveInstanceSet.build(params[:active_instances], context: "#{context}[:active_instances]") unless params[:active_instances].nil?
        type.next_token = params[:next_token]
        type.fleet_id = params[:fleet_id]
        type
      end
    end

    module DescribeFleetsErrorSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DescribeFleetError.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DescribeFleetsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFleetsInput, context: context)
        type = Types::DescribeFleetsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.fleet_ids = FleetIdSet.build(params[:fleet_ids], context: "#{context}[:fleet_ids]") unless params[:fleet_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type
      end
    end

    module DescribeFleetsInstances
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFleetsInstances, context: context)
        type = Types::DescribeFleetsInstances.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_and_overrides = LaunchTemplateAndOverridesResponse.build(params[:launch_template_and_overrides], context: "#{context}[:launch_template_and_overrides]") unless params[:launch_template_and_overrides].nil?
        type.lifecycle = params[:lifecycle]
        type.instance_ids = InstanceIdsSet.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.instance_type = params[:instance_type]
        type.platform = params[:platform]
        type
      end
    end

    module DescribeFleetsInstancesSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DescribeFleetsInstances.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DescribeFleetsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFleetsOutput, context: context)
        type = Types::DescribeFleetsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.fleets = FleetSet.build(params[:fleets], context: "#{context}[:fleets]") unless params[:fleets].nil?
        type
      end
    end

    module DescribeFlowLogsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFlowLogsInput, context: context)
        type = Types::DescribeFlowLogsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filter = FilterList.build(params[:filter], context: "#{context}[:filter]") unless params[:filter].nil?
        type.flow_log_ids = FlowLogIdList.build(params[:flow_log_ids], context: "#{context}[:flow_log_ids]") unless params[:flow_log_ids].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeFlowLogsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFlowLogsOutput, context: context)
        type = Types::DescribeFlowLogsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.flow_logs = FlowLogSet.build(params[:flow_logs], context: "#{context}[:flow_logs]") unless params[:flow_logs].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeFpgaImageAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFpgaImageAttributeInput, context: context)
        type = Types::DescribeFpgaImageAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.fpga_image_id = params[:fpga_image_id]
        type.attribute = params[:attribute]
        type
      end
    end

    module DescribeFpgaImageAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFpgaImageAttributeOutput, context: context)
        type = Types::DescribeFpgaImageAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.fpga_image_attribute = FpgaImageAttribute.build(params[:fpga_image_attribute], context: "#{context}[:fpga_image_attribute]") unless params[:fpga_image_attribute].nil?
        type
      end
    end

    module DescribeFpgaImagesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFpgaImagesInput, context: context)
        type = Types::DescribeFpgaImagesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.fpga_image_ids = FpgaImageIdList.build(params[:fpga_image_ids], context: "#{context}[:fpga_image_ids]") unless params[:fpga_image_ids].nil?
        type.owners = OwnerStringList.build(params[:owners], context: "#{context}[:owners]") unless params[:owners].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeFpgaImagesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeFpgaImagesOutput, context: context)
        type = Types::DescribeFpgaImagesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.fpga_images = FpgaImageList.build(params[:fpga_images], context: "#{context}[:fpga_images]") unless params[:fpga_images].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeHostReservationOfferingsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeHostReservationOfferingsInput, context: context)
        type = Types::DescribeHostReservationOfferingsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filter = FilterList.build(params[:filter], context: "#{context}[:filter]") unless params[:filter].nil?
        type.max_duration = params[:max_duration]
        type.max_results = params[:max_results]
        type.min_duration = params[:min_duration]
        type.next_token = params[:next_token]
        type.offering_id = params[:offering_id]
        type
      end
    end

    module DescribeHostReservationOfferingsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeHostReservationOfferingsOutput, context: context)
        type = Types::DescribeHostReservationOfferingsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.offering_set = HostOfferingSet.build(params[:offering_set], context: "#{context}[:offering_set]") unless params[:offering_set].nil?
        type
      end
    end

    module DescribeHostReservationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeHostReservationsInput, context: context)
        type = Types::DescribeHostReservationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filter = FilterList.build(params[:filter], context: "#{context}[:filter]") unless params[:filter].nil?
        type.host_reservation_id_set = HostReservationIdSet.build(params[:host_reservation_id_set], context: "#{context}[:host_reservation_id_set]") unless params[:host_reservation_id_set].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeHostReservationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeHostReservationsOutput, context: context)
        type = Types::DescribeHostReservationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.host_reservation_set = HostReservationSet.build(params[:host_reservation_set], context: "#{context}[:host_reservation_set]") unless params[:host_reservation_set].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeHostsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeHostsInput, context: context)
        type = Types::DescribeHostsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filter = FilterList.build(params[:filter], context: "#{context}[:filter]") unless params[:filter].nil?
        type.host_ids = RequestHostIdList.build(params[:host_ids], context: "#{context}[:host_ids]") unless params[:host_ids].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeHostsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeHostsOutput, context: context)
        type = Types::DescribeHostsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.hosts = HostList.build(params[:hosts], context: "#{context}[:hosts]") unless params[:hosts].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeIamInstanceProfileAssociationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIamInstanceProfileAssociationsInput, context: context)
        type = Types::DescribeIamInstanceProfileAssociationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_ids = AssociationIdList.build(params[:association_ids], context: "#{context}[:association_ids]") unless params[:association_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeIamInstanceProfileAssociationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIamInstanceProfileAssociationsOutput, context: context)
        type = Types::DescribeIamInstanceProfileAssociationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.iam_instance_profile_associations = IamInstanceProfileAssociationSet.build(params[:iam_instance_profile_associations], context: "#{context}[:iam_instance_profile_associations]") unless params[:iam_instance_profile_associations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeIdFormatInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIdFormatInput, context: context)
        type = Types::DescribeIdFormatInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.resource = params[:resource]
        type
      end
    end

    module DescribeIdFormatOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIdFormatOutput, context: context)
        type = Types::DescribeIdFormatOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.statuses = IdFormatList.build(params[:statuses], context: "#{context}[:statuses]") unless params[:statuses].nil?
        type
      end
    end

    module DescribeIdentityIdFormatInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIdentityIdFormatInput, context: context)
        type = Types::DescribeIdentityIdFormatInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.principal_arn = params[:principal_arn]
        type.resource = params[:resource]
        type
      end
    end

    module DescribeIdentityIdFormatOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIdentityIdFormatOutput, context: context)
        type = Types::DescribeIdentityIdFormatOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.statuses = IdFormatList.build(params[:statuses], context: "#{context}[:statuses]") unless params[:statuses].nil?
        type
      end
    end

    module DescribeImageAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeImageAttributeInput, context: context)
        type = Types::DescribeImageAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attribute = params[:attribute]
        type.image_id = params[:image_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeImageAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeImageAttributeOutput, context: context)
        type = Types::DescribeImageAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.block_device_mappings = BlockDeviceMappingList.build(params[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless params[:block_device_mappings].nil?
        type.image_id = params[:image_id]
        type.launch_permissions = LaunchPermissionList.build(params[:launch_permissions], context: "#{context}[:launch_permissions]") unless params[:launch_permissions].nil?
        type.product_codes = ProductCodeList.build(params[:product_codes], context: "#{context}[:product_codes]") unless params[:product_codes].nil?
        type.description = AttributeValue.build(params[:description], context: "#{context}[:description]") unless params[:description].nil?
        type.kernel_id = AttributeValue.build(params[:kernel_id], context: "#{context}[:kernel_id]") unless params[:kernel_id].nil?
        type.ramdisk_id = AttributeValue.build(params[:ramdisk_id], context: "#{context}[:ramdisk_id]") unless params[:ramdisk_id].nil?
        type.sriov_net_support = AttributeValue.build(params[:sriov_net_support], context: "#{context}[:sriov_net_support]") unless params[:sriov_net_support].nil?
        type.boot_mode = AttributeValue.build(params[:boot_mode], context: "#{context}[:boot_mode]") unless params[:boot_mode].nil?
        type.tpm_support = AttributeValue.build(params[:tpm_support], context: "#{context}[:tpm_support]") unless params[:tpm_support].nil?
        type.uefi_data = AttributeValue.build(params[:uefi_data], context: "#{context}[:uefi_data]") unless params[:uefi_data].nil?
        type.last_launched_time = AttributeValue.build(params[:last_launched_time], context: "#{context}[:last_launched_time]") unless params[:last_launched_time].nil?
        type.imds_support = AttributeValue.build(params[:imds_support], context: "#{context}[:imds_support]") unless params[:imds_support].nil?
        type
      end
    end

    module DescribeImagesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeImagesInput, context: context)
        type = Types::DescribeImagesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.executable_users = ExecutableByStringList.build(params[:executable_users], context: "#{context}[:executable_users]") unless params[:executable_users].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.image_ids = ImageIdStringList.build(params[:image_ids], context: "#{context}[:image_ids]") unless params[:image_ids].nil?
        type.owners = OwnerStringList.build(params[:owners], context: "#{context}[:owners]") unless params[:owners].nil?
        type.include_deprecated = params[:include_deprecated]
        type.include_disabled = params[:include_disabled]
        type.dry_run = params[:dry_run]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeImagesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeImagesOutput, context: context)
        type = Types::DescribeImagesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.images = ImageList.build(params[:images], context: "#{context}[:images]") unless params[:images].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeImportImageTasksInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeImportImageTasksInput, context: context)
        type = Types::DescribeImportImageTasksInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.import_task_ids = ImportTaskIdList.build(params[:import_task_ids], context: "#{context}[:import_task_ids]") unless params[:import_task_ids].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeImportImageTasksOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeImportImageTasksOutput, context: context)
        type = Types::DescribeImportImageTasksOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.import_image_tasks = ImportImageTaskList.build(params[:import_image_tasks], context: "#{context}[:import_image_tasks]") unless params[:import_image_tasks].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeImportSnapshotTasksInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeImportSnapshotTasksInput, context: context)
        type = Types::DescribeImportSnapshotTasksInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.import_task_ids = ImportSnapshotTaskIdList.build(params[:import_task_ids], context: "#{context}[:import_task_ids]") unless params[:import_task_ids].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeImportSnapshotTasksOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeImportSnapshotTasksOutput, context: context)
        type = Types::DescribeImportSnapshotTasksOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.import_snapshot_tasks = ImportSnapshotTaskList.build(params[:import_snapshot_tasks], context: "#{context}[:import_snapshot_tasks]") unless params[:import_snapshot_tasks].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeInstanceAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceAttributeInput, context: context)
        type = Types::DescribeInstanceAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attribute = params[:attribute]
        type.dry_run = params[:dry_run]
        type.instance_id = params[:instance_id]
        type
      end
    end

    module DescribeInstanceAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceAttributeOutput, context: context)
        type = Types::DescribeInstanceAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.groups = GroupIdentifierList.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.block_device_mappings = InstanceBlockDeviceMappingList.build(params[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless params[:block_device_mappings].nil?
        type.disable_api_termination = AttributeBooleanValue.build(params[:disable_api_termination], context: "#{context}[:disable_api_termination]") unless params[:disable_api_termination].nil?
        type.ena_support = AttributeBooleanValue.build(params[:ena_support], context: "#{context}[:ena_support]") unless params[:ena_support].nil?
        type.enclave_options = EnclaveOptions.build(params[:enclave_options], context: "#{context}[:enclave_options]") unless params[:enclave_options].nil?
        type.ebs_optimized = AttributeBooleanValue.build(params[:ebs_optimized], context: "#{context}[:ebs_optimized]") unless params[:ebs_optimized].nil?
        type.instance_id = params[:instance_id]
        type.instance_initiated_shutdown_behavior = AttributeValue.build(params[:instance_initiated_shutdown_behavior], context: "#{context}[:instance_initiated_shutdown_behavior]") unless params[:instance_initiated_shutdown_behavior].nil?
        type.instance_type = AttributeValue.build(params[:instance_type], context: "#{context}[:instance_type]") unless params[:instance_type].nil?
        type.kernel_id = AttributeValue.build(params[:kernel_id], context: "#{context}[:kernel_id]") unless params[:kernel_id].nil?
        type.product_codes = ProductCodeList.build(params[:product_codes], context: "#{context}[:product_codes]") unless params[:product_codes].nil?
        type.ramdisk_id = AttributeValue.build(params[:ramdisk_id], context: "#{context}[:ramdisk_id]") unless params[:ramdisk_id].nil?
        type.root_device_name = AttributeValue.build(params[:root_device_name], context: "#{context}[:root_device_name]") unless params[:root_device_name].nil?
        type.source_dest_check = AttributeBooleanValue.build(params[:source_dest_check], context: "#{context}[:source_dest_check]") unless params[:source_dest_check].nil?
        type.sriov_net_support = AttributeValue.build(params[:sriov_net_support], context: "#{context}[:sriov_net_support]") unless params[:sriov_net_support].nil?
        type.user_data = AttributeValue.build(params[:user_data], context: "#{context}[:user_data]") unless params[:user_data].nil?
        type.disable_api_stop = AttributeBooleanValue.build(params[:disable_api_stop], context: "#{context}[:disable_api_stop]") unless params[:disable_api_stop].nil?
        type
      end
    end

    module DescribeInstanceConnectEndpointsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceConnectEndpointsInput, context: context)
        type = Types::DescribeInstanceConnectEndpointsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.instance_connect_endpoint_ids = ValueStringList.build(params[:instance_connect_endpoint_ids], context: "#{context}[:instance_connect_endpoint_ids]") unless params[:instance_connect_endpoint_ids].nil?
        type
      end
    end

    module DescribeInstanceConnectEndpointsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceConnectEndpointsOutput, context: context)
        type = Types::DescribeInstanceConnectEndpointsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_connect_endpoints = InstanceConnectEndpointSet.build(params[:instance_connect_endpoints], context: "#{context}[:instance_connect_endpoints]") unless params[:instance_connect_endpoints].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeInstanceCreditSpecificationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceCreditSpecificationsInput, context: context)
        type = Types::DescribeInstanceCreditSpecificationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.instance_ids = InstanceIdStringList.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeInstanceCreditSpecificationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceCreditSpecificationsOutput, context: context)
        type = Types::DescribeInstanceCreditSpecificationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_credit_specifications = InstanceCreditSpecificationList.build(params[:instance_credit_specifications], context: "#{context}[:instance_credit_specifications]") unless params[:instance_credit_specifications].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeInstanceEventNotificationAttributesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceEventNotificationAttributesInput, context: context)
        type = Types::DescribeInstanceEventNotificationAttributesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeInstanceEventNotificationAttributesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceEventNotificationAttributesOutput, context: context)
        type = Types::DescribeInstanceEventNotificationAttributesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_tag_attribute = InstanceTagNotificationAttribute.build(params[:instance_tag_attribute], context: "#{context}[:instance_tag_attribute]") unless params[:instance_tag_attribute].nil?
        type
      end
    end

    module DescribeInstanceEventWindowsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceEventWindowsInput, context: context)
        type = Types::DescribeInstanceEventWindowsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.instance_event_window_ids = InstanceEventWindowIdSet.build(params[:instance_event_window_ids], context: "#{context}[:instance_event_window_ids]") unless params[:instance_event_window_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeInstanceEventWindowsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceEventWindowsOutput, context: context)
        type = Types::DescribeInstanceEventWindowsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_event_windows = InstanceEventWindowSet.build(params[:instance_event_windows], context: "#{context}[:instance_event_windows]") unless params[:instance_event_windows].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeInstanceStatusInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceStatusInput, context: context)
        type = Types::DescribeInstanceStatusInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.instance_ids = InstanceIdStringList.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type.include_all_instances = params[:include_all_instances]
        type
      end
    end

    module DescribeInstanceStatusOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceStatusOutput, context: context)
        type = Types::DescribeInstanceStatusOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_statuses = InstanceStatusList.build(params[:instance_statuses], context: "#{context}[:instance_statuses]") unless params[:instance_statuses].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeInstanceTopologyGroupNameSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module DescribeInstanceTopologyInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceTopologyInput, context: context)
        type = Types::DescribeInstanceTopologyInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.instance_ids = DescribeInstanceTopologyInstanceIdSet.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.group_names = DescribeInstanceTopologyGroupNameSet.build(params[:group_names], context: "#{context}[:group_names]") unless params[:group_names].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type
      end
    end

    module DescribeInstanceTopologyInstanceIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module DescribeInstanceTopologyOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceTopologyOutput, context: context)
        type = Types::DescribeInstanceTopologyOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instances = InstanceSet.build(params[:instances], context: "#{context}[:instances]") unless params[:instances].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeInstanceTypeOfferingsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceTypeOfferingsInput, context: context)
        type = Types::DescribeInstanceTypeOfferingsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.location_type = params[:location_type]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeInstanceTypeOfferingsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceTypeOfferingsOutput, context: context)
        type = Types::DescribeInstanceTypeOfferingsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_type_offerings = InstanceTypeOfferingsList.build(params[:instance_type_offerings], context: "#{context}[:instance_type_offerings]") unless params[:instance_type_offerings].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeInstanceTypesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceTypesInput, context: context)
        type = Types::DescribeInstanceTypesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.instance_types = RequestInstanceTypeList.build(params[:instance_types], context: "#{context}[:instance_types]") unless params[:instance_types].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeInstanceTypesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstanceTypesOutput, context: context)
        type = Types::DescribeInstanceTypesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_types = InstanceTypeInfoList.build(params[:instance_types], context: "#{context}[:instance_types]") unless params[:instance_types].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstancesInput, context: context)
        type = Types::DescribeInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.instance_ids = InstanceIdStringList.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.dry_run = params[:dry_run]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInstancesOutput, context: context)
        type = Types::DescribeInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.reservations = ReservationList.build(params[:reservations], context: "#{context}[:reservations]") unless params[:reservations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeInternetGatewaysInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInternetGatewaysInput, context: context)
        type = Types::DescribeInternetGatewaysInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type.internet_gateway_ids = InternetGatewayIdList.build(params[:internet_gateway_ids], context: "#{context}[:internet_gateway_ids]") unless params[:internet_gateway_ids].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeInternetGatewaysOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeInternetGatewaysOutput, context: context)
        type = Types::DescribeInternetGatewaysOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.internet_gateways = InternetGatewayList.build(params[:internet_gateways], context: "#{context}[:internet_gateways]") unless params[:internet_gateways].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeIpamByoasnInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIpamByoasnInput, context: context)
        type = Types::DescribeIpamByoasnInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeIpamByoasnOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIpamByoasnOutput, context: context)
        type = Types::DescribeIpamByoasnOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.byoasns = ByoasnSet.build(params[:byoasns], context: "#{context}[:byoasns]") unless params[:byoasns].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeIpamPoolsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIpamPoolsInput, context: context)
        type = Types::DescribeIpamPoolsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.ipam_pool_ids = ValueStringList.build(params[:ipam_pool_ids], context: "#{context}[:ipam_pool_ids]") unless params[:ipam_pool_ids].nil?
        type
      end
    end

    module DescribeIpamPoolsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIpamPoolsOutput, context: context)
        type = Types::DescribeIpamPoolsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.ipam_pools = IpamPoolSet.build(params[:ipam_pools], context: "#{context}[:ipam_pools]") unless params[:ipam_pools].nil?
        type
      end
    end

    module DescribeIpamResourceDiscoveriesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIpamResourceDiscoveriesInput, context: context)
        type = Types::DescribeIpamResourceDiscoveriesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_resource_discovery_ids = ValueStringList.build(params[:ipam_resource_discovery_ids], context: "#{context}[:ipam_resource_discovery_ids]") unless params[:ipam_resource_discovery_ids].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type
      end
    end

    module DescribeIpamResourceDiscoveriesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIpamResourceDiscoveriesOutput, context: context)
        type = Types::DescribeIpamResourceDiscoveriesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_resource_discoveries = IpamResourceDiscoverySet.build(params[:ipam_resource_discoveries], context: "#{context}[:ipam_resource_discoveries]") unless params[:ipam_resource_discoveries].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeIpamResourceDiscoveryAssociationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIpamResourceDiscoveryAssociationsInput, context: context)
        type = Types::DescribeIpamResourceDiscoveryAssociationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_resource_discovery_association_ids = ValueStringList.build(params[:ipam_resource_discovery_association_ids], context: "#{context}[:ipam_resource_discovery_association_ids]") unless params[:ipam_resource_discovery_association_ids].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type
      end
    end

    module DescribeIpamResourceDiscoveryAssociationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIpamResourceDiscoveryAssociationsOutput, context: context)
        type = Types::DescribeIpamResourceDiscoveryAssociationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_resource_discovery_associations = IpamResourceDiscoveryAssociationSet.build(params[:ipam_resource_discovery_associations], context: "#{context}[:ipam_resource_discovery_associations]") unless params[:ipam_resource_discovery_associations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeIpamScopesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIpamScopesInput, context: context)
        type = Types::DescribeIpamScopesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.ipam_scope_ids = ValueStringList.build(params[:ipam_scope_ids], context: "#{context}[:ipam_scope_ids]") unless params[:ipam_scope_ids].nil?
        type
      end
    end

    module DescribeIpamScopesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIpamScopesOutput, context: context)
        type = Types::DescribeIpamScopesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.ipam_scopes = IpamScopeSet.build(params[:ipam_scopes], context: "#{context}[:ipam_scopes]") unless params[:ipam_scopes].nil?
        type
      end
    end

    module DescribeIpamsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIpamsInput, context: context)
        type = Types::DescribeIpamsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.ipam_ids = ValueStringList.build(params[:ipam_ids], context: "#{context}[:ipam_ids]") unless params[:ipam_ids].nil?
        type
      end
    end

    module DescribeIpamsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIpamsOutput, context: context)
        type = Types::DescribeIpamsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.ipams = IpamSet.build(params[:ipams], context: "#{context}[:ipams]") unless params[:ipams].nil?
        type
      end
    end

    module DescribeIpv6PoolsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIpv6PoolsInput, context: context)
        type = Types::DescribeIpv6PoolsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.pool_ids = Ipv6PoolIdList.build(params[:pool_ids], context: "#{context}[:pool_ids]") unless params[:pool_ids].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type
      end
    end

    module DescribeIpv6PoolsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeIpv6PoolsOutput, context: context)
        type = Types::DescribeIpv6PoolsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_pools = Ipv6PoolSet.build(params[:ipv6_pools], context: "#{context}[:ipv6_pools]") unless params[:ipv6_pools].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeKeyPairsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeKeyPairsInput, context: context)
        type = Types::DescribeKeyPairsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.key_names = KeyNameStringList.build(params[:key_names], context: "#{context}[:key_names]") unless params[:key_names].nil?
        type.key_pair_ids = KeyPairIdStringList.build(params[:key_pair_ids], context: "#{context}[:key_pair_ids]") unless params[:key_pair_ids].nil?
        type.dry_run = params[:dry_run]
        type.include_public_key = params[:include_public_key]
        type
      end
    end

    module DescribeKeyPairsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeKeyPairsOutput, context: context)
        type = Types::DescribeKeyPairsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.key_pairs = KeyPairList.build(params[:key_pairs], context: "#{context}[:key_pairs]") unless params[:key_pairs].nil?
        type
      end
    end

    module DescribeLaunchTemplateVersionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLaunchTemplateVersionsInput, context: context)
        type = Types::DescribeLaunchTemplateVersionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.launch_template_id = params[:launch_template_id]
        type.launch_template_name = params[:launch_template_name]
        type.versions = VersionStringList.build(params[:versions], context: "#{context}[:versions]") unless params[:versions].nil?
        type.min_version = params[:min_version]
        type.max_version = params[:max_version]
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.resolve_alias = params[:resolve_alias]
        type
      end
    end

    module DescribeLaunchTemplateVersionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLaunchTemplateVersionsOutput, context: context)
        type = Types::DescribeLaunchTemplateVersionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_versions = LaunchTemplateVersionSet.build(params[:launch_template_versions], context: "#{context}[:launch_template_versions]") unless params[:launch_template_versions].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeLaunchTemplatesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLaunchTemplatesInput, context: context)
        type = Types::DescribeLaunchTemplatesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.launch_template_ids = LaunchTemplateIdStringList.build(params[:launch_template_ids], context: "#{context}[:launch_template_ids]") unless params[:launch_template_ids].nil?
        type.launch_template_names = LaunchTemplateNameStringList.build(params[:launch_template_names], context: "#{context}[:launch_template_names]") unless params[:launch_template_names].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeLaunchTemplatesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLaunchTemplatesOutput, context: context)
        type = Types::DescribeLaunchTemplatesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_templates = LaunchTemplateSet.build(params[:launch_templates], context: "#{context}[:launch_templates]") unless params[:launch_templates].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, context: context)
        type = Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_virtual_interface_group_association_ids = LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet.build(params[:local_gateway_route_table_virtual_interface_group_association_ids], context: "#{context}[:local_gateway_route_table_virtual_interface_group_association_ids]") unless params[:local_gateway_route_table_virtual_interface_group_association_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, context: context)
        type = Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_virtual_interface_group_associations = LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet.build(params[:local_gateway_route_table_virtual_interface_group_associations], context: "#{context}[:local_gateway_route_table_virtual_interface_group_associations]") unless params[:local_gateway_route_table_virtual_interface_group_associations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeLocalGatewayRouteTableVpcAssociationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLocalGatewayRouteTableVpcAssociationsInput, context: context)
        type = Types::DescribeLocalGatewayRouteTableVpcAssociationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_vpc_association_ids = LocalGatewayRouteTableVpcAssociationIdSet.build(params[:local_gateway_route_table_vpc_association_ids], context: "#{context}[:local_gateway_route_table_vpc_association_ids]") unless params[:local_gateway_route_table_vpc_association_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeLocalGatewayRouteTableVpcAssociationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLocalGatewayRouteTableVpcAssociationsOutput, context: context)
        type = Types::DescribeLocalGatewayRouteTableVpcAssociationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_vpc_associations = LocalGatewayRouteTableVpcAssociationSet.build(params[:local_gateway_route_table_vpc_associations], context: "#{context}[:local_gateway_route_table_vpc_associations]") unless params[:local_gateway_route_table_vpc_associations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeLocalGatewayRouteTablesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLocalGatewayRouteTablesInput, context: context)
        type = Types::DescribeLocalGatewayRouteTablesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_ids = LocalGatewayRouteTableIdSet.build(params[:local_gateway_route_table_ids], context: "#{context}[:local_gateway_route_table_ids]") unless params[:local_gateway_route_table_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeLocalGatewayRouteTablesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLocalGatewayRouteTablesOutput, context: context)
        type = Types::DescribeLocalGatewayRouteTablesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_tables = LocalGatewayRouteTableSet.build(params[:local_gateway_route_tables], context: "#{context}[:local_gateway_route_tables]") unless params[:local_gateway_route_tables].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeLocalGatewayVirtualInterfaceGroupsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLocalGatewayVirtualInterfaceGroupsInput, context: context)
        type = Types::DescribeLocalGatewayVirtualInterfaceGroupsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_virtual_interface_group_ids = LocalGatewayVirtualInterfaceGroupIdSet.build(params[:local_gateway_virtual_interface_group_ids], context: "#{context}[:local_gateway_virtual_interface_group_ids]") unless params[:local_gateway_virtual_interface_group_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeLocalGatewayVirtualInterfaceGroupsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLocalGatewayVirtualInterfaceGroupsOutput, context: context)
        type = Types::DescribeLocalGatewayVirtualInterfaceGroupsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_virtual_interface_groups = LocalGatewayVirtualInterfaceGroupSet.build(params[:local_gateway_virtual_interface_groups], context: "#{context}[:local_gateway_virtual_interface_groups]") unless params[:local_gateway_virtual_interface_groups].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeLocalGatewayVirtualInterfacesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLocalGatewayVirtualInterfacesInput, context: context)
        type = Types::DescribeLocalGatewayVirtualInterfacesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_virtual_interface_ids = LocalGatewayVirtualInterfaceIdSet.build(params[:local_gateway_virtual_interface_ids], context: "#{context}[:local_gateway_virtual_interface_ids]") unless params[:local_gateway_virtual_interface_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeLocalGatewayVirtualInterfacesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLocalGatewayVirtualInterfacesOutput, context: context)
        type = Types::DescribeLocalGatewayVirtualInterfacesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_virtual_interfaces = LocalGatewayVirtualInterfaceSet.build(params[:local_gateway_virtual_interfaces], context: "#{context}[:local_gateway_virtual_interfaces]") unless params[:local_gateway_virtual_interfaces].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeLocalGatewaysInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLocalGatewaysInput, context: context)
        type = Types::DescribeLocalGatewaysInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_ids = LocalGatewayIdSet.build(params[:local_gateway_ids], context: "#{context}[:local_gateway_ids]") unless params[:local_gateway_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeLocalGatewaysOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLocalGatewaysOutput, context: context)
        type = Types::DescribeLocalGatewaysOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateways = LocalGatewaySet.build(params[:local_gateways], context: "#{context}[:local_gateways]") unless params[:local_gateways].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeLockedSnapshotsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLockedSnapshotsInput, context: context)
        type = Types::DescribeLockedSnapshotsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.snapshot_ids = SnapshotIdStringList.build(params[:snapshot_ids], context: "#{context}[:snapshot_ids]") unless params[:snapshot_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeLockedSnapshotsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeLockedSnapshotsOutput, context: context)
        type = Types::DescribeLockedSnapshotsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshots = LockedSnapshotsInfoList.build(params[:snapshots], context: "#{context}[:snapshots]") unless params[:snapshots].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeManagedPrefixListsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeManagedPrefixListsInput, context: context)
        type = Types::DescribeManagedPrefixListsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.prefix_list_ids = ValueStringList.build(params[:prefix_list_ids], context: "#{context}[:prefix_list_ids]") unless params[:prefix_list_ids].nil?
        type
      end
    end

    module DescribeManagedPrefixListsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeManagedPrefixListsOutput, context: context)
        type = Types::DescribeManagedPrefixListsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.prefix_lists = ManagedPrefixListSet.build(params[:prefix_lists], context: "#{context}[:prefix_lists]") unless params[:prefix_lists].nil?
        type
      end
    end

    module DescribeMovingAddressesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeMovingAddressesInput, context: context)
        type = Types::DescribeMovingAddressesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.public_ips = ValueStringList.build(params[:public_ips], context: "#{context}[:public_ips]") unless params[:public_ips].nil?
        type
      end
    end

    module DescribeMovingAddressesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeMovingAddressesOutput, context: context)
        type = Types::DescribeMovingAddressesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.moving_address_statuses = MovingAddressStatusSet.build(params[:moving_address_statuses], context: "#{context}[:moving_address_statuses]") unless params[:moving_address_statuses].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeNatGatewaysInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNatGatewaysInput, context: context)
        type = Types::DescribeNatGatewaysInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filter = FilterList.build(params[:filter], context: "#{context}[:filter]") unless params[:filter].nil?
        type.max_results = params[:max_results]
        type.nat_gateway_ids = NatGatewayIdStringList.build(params[:nat_gateway_ids], context: "#{context}[:nat_gateway_ids]") unless params[:nat_gateway_ids].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeNatGatewaysOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNatGatewaysOutput, context: context)
        type = Types::DescribeNatGatewaysOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.nat_gateways = NatGatewayList.build(params[:nat_gateways], context: "#{context}[:nat_gateways]") unless params[:nat_gateways].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeNetworkAclsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkAclsInput, context: context)
        type = Types::DescribeNetworkAclsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type.network_acl_ids = NetworkAclIdStringList.build(params[:network_acl_ids], context: "#{context}[:network_acl_ids]") unless params[:network_acl_ids].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeNetworkAclsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkAclsOutput, context: context)
        type = Types::DescribeNetworkAclsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_acls = NetworkAclList.build(params[:network_acls], context: "#{context}[:network_acls]") unless params[:network_acls].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeNetworkInsightsAccessScopeAnalysesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkInsightsAccessScopeAnalysesInput, context: context)
        type = Types::DescribeNetworkInsightsAccessScopeAnalysesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_analysis_ids = NetworkInsightsAccessScopeAnalysisIdList.build(params[:network_insights_access_scope_analysis_ids], context: "#{context}[:network_insights_access_scope_analysis_ids]") unless params[:network_insights_access_scope_analysis_ids].nil?
        type.network_insights_access_scope_id = params[:network_insights_access_scope_id]
        type.analysis_start_time_begin = params[:analysis_start_time_begin]
        type.analysis_start_time_end = params[:analysis_start_time_end]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.dry_run = params[:dry_run]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeNetworkInsightsAccessScopeAnalysesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkInsightsAccessScopeAnalysesOutput, context: context)
        type = Types::DescribeNetworkInsightsAccessScopeAnalysesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_analyses = NetworkInsightsAccessScopeAnalysisList.build(params[:network_insights_access_scope_analyses], context: "#{context}[:network_insights_access_scope_analyses]") unless params[:network_insights_access_scope_analyses].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeNetworkInsightsAccessScopesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkInsightsAccessScopesInput, context: context)
        type = Types::DescribeNetworkInsightsAccessScopesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_ids = NetworkInsightsAccessScopeIdList.build(params[:network_insights_access_scope_ids], context: "#{context}[:network_insights_access_scope_ids]") unless params[:network_insights_access_scope_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.dry_run = params[:dry_run]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeNetworkInsightsAccessScopesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkInsightsAccessScopesOutput, context: context)
        type = Types::DescribeNetworkInsightsAccessScopesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scopes = NetworkInsightsAccessScopeList.build(params[:network_insights_access_scopes], context: "#{context}[:network_insights_access_scopes]") unless params[:network_insights_access_scopes].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeNetworkInsightsAnalysesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkInsightsAnalysesInput, context: context)
        type = Types::DescribeNetworkInsightsAnalysesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_analysis_ids = NetworkInsightsAnalysisIdList.build(params[:network_insights_analysis_ids], context: "#{context}[:network_insights_analysis_ids]") unless params[:network_insights_analysis_ids].nil?
        type.network_insights_path_id = params[:network_insights_path_id]
        type.analysis_start_time = params[:analysis_start_time]
        type.analysis_end_time = params[:analysis_end_time]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.dry_run = params[:dry_run]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeNetworkInsightsAnalysesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkInsightsAnalysesOutput, context: context)
        type = Types::DescribeNetworkInsightsAnalysesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_analyses = NetworkInsightsAnalysisList.build(params[:network_insights_analyses], context: "#{context}[:network_insights_analyses]") unless params[:network_insights_analyses].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeNetworkInsightsPathsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkInsightsPathsInput, context: context)
        type = Types::DescribeNetworkInsightsPathsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_path_ids = NetworkInsightsPathIdList.build(params[:network_insights_path_ids], context: "#{context}[:network_insights_path_ids]") unless params[:network_insights_path_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.dry_run = params[:dry_run]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeNetworkInsightsPathsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkInsightsPathsOutput, context: context)
        type = Types::DescribeNetworkInsightsPathsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_paths = NetworkInsightsPathList.build(params[:network_insights_paths], context: "#{context}[:network_insights_paths]") unless params[:network_insights_paths].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeNetworkInterfaceAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkInterfaceAttributeInput, context: context)
        type = Types::DescribeNetworkInterfaceAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attribute = params[:attribute]
        type.dry_run = params[:dry_run]
        type.network_interface_id = params[:network_interface_id]
        type
      end
    end

    module DescribeNetworkInterfaceAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkInterfaceAttributeOutput, context: context)
        type = Types::DescribeNetworkInterfaceAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attachment = NetworkInterfaceAttachment.build(params[:attachment], context: "#{context}[:attachment]") unless params[:attachment].nil?
        type.description = AttributeValue.build(params[:description], context: "#{context}[:description]") unless params[:description].nil?
        type.groups = GroupIdentifierList.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.network_interface_id = params[:network_interface_id]
        type.source_dest_check = AttributeBooleanValue.build(params[:source_dest_check], context: "#{context}[:source_dest_check]") unless params[:source_dest_check].nil?
        type
      end
    end

    module DescribeNetworkInterfacePermissionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkInterfacePermissionsInput, context: context)
        type = Types::DescribeNetworkInterfacePermissionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_interface_permission_ids = NetworkInterfacePermissionIdList.build(params[:network_interface_permission_ids], context: "#{context}[:network_interface_permission_ids]") unless params[:network_interface_permission_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeNetworkInterfacePermissionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkInterfacePermissionsOutput, context: context)
        type = Types::DescribeNetworkInterfacePermissionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_interface_permissions = NetworkInterfacePermissionList.build(params[:network_interface_permissions], context: "#{context}[:network_interface_permissions]") unless params[:network_interface_permissions].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeNetworkInterfacesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkInterfacesInput, context: context)
        type = Types::DescribeNetworkInterfacesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type.network_interface_ids = NetworkInterfaceIdList.build(params[:network_interface_ids], context: "#{context}[:network_interface_ids]") unless params[:network_interface_ids].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeNetworkInterfacesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeNetworkInterfacesOutput, context: context)
        type = Types::DescribeNetworkInterfacesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_interfaces = NetworkInterfaceList.build(params[:network_interfaces], context: "#{context}[:network_interfaces]") unless params[:network_interfaces].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribePlacementGroupsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribePlacementGroupsInput, context: context)
        type = Types::DescribePlacementGroupsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type.group_names = PlacementGroupStringList.build(params[:group_names], context: "#{context}[:group_names]") unless params[:group_names].nil?
        type.group_ids = PlacementGroupIdStringList.build(params[:group_ids], context: "#{context}[:group_ids]") unless params[:group_ids].nil?
        type
      end
    end

    module DescribePlacementGroupsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribePlacementGroupsOutput, context: context)
        type = Types::DescribePlacementGroupsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.placement_groups = PlacementGroupList.build(params[:placement_groups], context: "#{context}[:placement_groups]") unless params[:placement_groups].nil?
        type
      end
    end

    module DescribePrefixListsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribePrefixListsInput, context: context)
        type = Types::DescribePrefixListsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.prefix_list_ids = PrefixListResourceIdStringList.build(params[:prefix_list_ids], context: "#{context}[:prefix_list_ids]") unless params[:prefix_list_ids].nil?
        type
      end
    end

    module DescribePrefixListsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribePrefixListsOutput, context: context)
        type = Types::DescribePrefixListsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.prefix_lists = PrefixListSet.build(params[:prefix_lists], context: "#{context}[:prefix_lists]") unless params[:prefix_lists].nil?
        type
      end
    end

    module DescribePrincipalIdFormatInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribePrincipalIdFormatInput, context: context)
        type = Types::DescribePrincipalIdFormatInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.resources = ResourceList.build(params[:resources], context: "#{context}[:resources]") unless params[:resources].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribePrincipalIdFormatOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribePrincipalIdFormatOutput, context: context)
        type = Types::DescribePrincipalIdFormatOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.principals = PrincipalIdFormatList.build(params[:principals], context: "#{context}[:principals]") unless params[:principals].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribePublicIpv4PoolsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribePublicIpv4PoolsInput, context: context)
        type = Types::DescribePublicIpv4PoolsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.pool_ids = PublicIpv4PoolIdStringList.build(params[:pool_ids], context: "#{context}[:pool_ids]") unless params[:pool_ids].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type
      end
    end

    module DescribePublicIpv4PoolsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribePublicIpv4PoolsOutput, context: context)
        type = Types::DescribePublicIpv4PoolsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.public_ipv4_pools = PublicIpv4PoolSet.build(params[:public_ipv4_pools], context: "#{context}[:public_ipv4_pools]") unless params[:public_ipv4_pools].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeRegionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeRegionsInput, context: context)
        type = Types::DescribeRegionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.region_names = RegionNameStringList.build(params[:region_names], context: "#{context}[:region_names]") unless params[:region_names].nil?
        type.dry_run = params[:dry_run]
        type.all_regions = params[:all_regions]
        type
      end
    end

    module DescribeRegionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeRegionsOutput, context: context)
        type = Types::DescribeRegionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.regions = RegionList.build(params[:regions], context: "#{context}[:regions]") unless params[:regions].nil?
        type
      end
    end

    module DescribeReplaceRootVolumeTasksInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeReplaceRootVolumeTasksInput, context: context)
        type = Types::DescribeReplaceRootVolumeTasksInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.replace_root_volume_task_ids = ReplaceRootVolumeTaskIds.build(params[:replace_root_volume_task_ids], context: "#{context}[:replace_root_volume_task_ids]") unless params[:replace_root_volume_task_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeReplaceRootVolumeTasksOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeReplaceRootVolumeTasksOutput, context: context)
        type = Types::DescribeReplaceRootVolumeTasksOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.replace_root_volume_tasks = ReplaceRootVolumeTasks.build(params[:replace_root_volume_tasks], context: "#{context}[:replace_root_volume_tasks]") unless params[:replace_root_volume_tasks].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeReservedInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeReservedInstancesInput, context: context)
        type = Types::DescribeReservedInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.offering_class = params[:offering_class]
        type.reserved_instances_ids = ReservedInstancesIdStringList.build(params[:reserved_instances_ids], context: "#{context}[:reserved_instances_ids]") unless params[:reserved_instances_ids].nil?
        type.dry_run = params[:dry_run]
        type.offering_type = params[:offering_type]
        type
      end
    end

    module DescribeReservedInstancesListingsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeReservedInstancesListingsInput, context: context)
        type = Types::DescribeReservedInstancesListingsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.reserved_instances_id = params[:reserved_instances_id]
        type.reserved_instances_listing_id = params[:reserved_instances_listing_id]
        type
      end
    end

    module DescribeReservedInstancesListingsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeReservedInstancesListingsOutput, context: context)
        type = Types::DescribeReservedInstancesListingsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.reserved_instances_listings = ReservedInstancesListingList.build(params[:reserved_instances_listings], context: "#{context}[:reserved_instances_listings]") unless params[:reserved_instances_listings].nil?
        type
      end
    end

    module DescribeReservedInstancesModificationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeReservedInstancesModificationsInput, context: context)
        type = Types::DescribeReservedInstancesModificationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.reserved_instances_modification_ids = ReservedInstancesModificationIdStringList.build(params[:reserved_instances_modification_ids], context: "#{context}[:reserved_instances_modification_ids]") unless params[:reserved_instances_modification_ids].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeReservedInstancesModificationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeReservedInstancesModificationsOutput, context: context)
        type = Types::DescribeReservedInstancesModificationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.reserved_instances_modifications = ReservedInstancesModificationList.build(params[:reserved_instances_modifications], context: "#{context}[:reserved_instances_modifications]") unless params[:reserved_instances_modifications].nil?
        type
      end
    end

    module DescribeReservedInstancesOfferingsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeReservedInstancesOfferingsInput, context: context)
        type = Types::DescribeReservedInstancesOfferingsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.include_marketplace = params[:include_marketplace]
        type.instance_type = params[:instance_type]
        type.max_duration = params[:max_duration]
        type.max_instance_count = params[:max_instance_count]
        type.min_duration = params[:min_duration]
        type.offering_class = params[:offering_class]
        type.product_description = params[:product_description]
        type.reserved_instances_offering_ids = ReservedInstancesOfferingIdStringList.build(params[:reserved_instances_offering_ids], context: "#{context}[:reserved_instances_offering_ids]") unless params[:reserved_instances_offering_ids].nil?
        type.dry_run = params[:dry_run]
        type.instance_tenancy = params[:instance_tenancy]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.offering_type = params[:offering_type]
        type
      end
    end

    module DescribeReservedInstancesOfferingsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeReservedInstancesOfferingsOutput, context: context)
        type = Types::DescribeReservedInstancesOfferingsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.reserved_instances_offerings = ReservedInstancesOfferingList.build(params[:reserved_instances_offerings], context: "#{context}[:reserved_instances_offerings]") unless params[:reserved_instances_offerings].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeReservedInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeReservedInstancesOutput, context: context)
        type = Types::DescribeReservedInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.reserved_instances = ReservedInstancesList.build(params[:reserved_instances], context: "#{context}[:reserved_instances]") unless params[:reserved_instances].nil?
        type
      end
    end

    module DescribeRouteTablesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeRouteTablesInput, context: context)
        type = Types::DescribeRouteTablesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type.route_table_ids = RouteTableIdStringList.build(params[:route_table_ids], context: "#{context}[:route_table_ids]") unless params[:route_table_ids].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeRouteTablesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeRouteTablesOutput, context: context)
        type = Types::DescribeRouteTablesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.route_tables = RouteTableList.build(params[:route_tables], context: "#{context}[:route_tables]") unless params[:route_tables].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeScheduledInstanceAvailabilityInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeScheduledInstanceAvailabilityInput, context: context)
        type = Types::DescribeScheduledInstanceAvailabilityInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.first_slot_start_time_range = SlotDateTimeRangeRequest.build(params[:first_slot_start_time_range], context: "#{context}[:first_slot_start_time_range]") unless params[:first_slot_start_time_range].nil?
        type.max_results = params[:max_results]
        type.max_slot_duration_in_hours = params[:max_slot_duration_in_hours]
        type.min_slot_duration_in_hours = params[:min_slot_duration_in_hours]
        type.next_token = params[:next_token]
        type.recurrence = ScheduledInstanceRecurrenceRequest.build(params[:recurrence], context: "#{context}[:recurrence]") unless params[:recurrence].nil?
        type
      end
    end

    module DescribeScheduledInstanceAvailabilityOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeScheduledInstanceAvailabilityOutput, context: context)
        type = Types::DescribeScheduledInstanceAvailabilityOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.scheduled_instance_availability_set = ScheduledInstanceAvailabilitySet.build(params[:scheduled_instance_availability_set], context: "#{context}[:scheduled_instance_availability_set]") unless params[:scheduled_instance_availability_set].nil?
        type
      end
    end

    module DescribeScheduledInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeScheduledInstancesInput, context: context)
        type = Types::DescribeScheduledInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.scheduled_instance_ids = ScheduledInstanceIdRequestSet.build(params[:scheduled_instance_ids], context: "#{context}[:scheduled_instance_ids]") unless params[:scheduled_instance_ids].nil?
        type.slot_start_time_range = SlotStartTimeRangeRequest.build(params[:slot_start_time_range], context: "#{context}[:slot_start_time_range]") unless params[:slot_start_time_range].nil?
        type
      end
    end

    module DescribeScheduledInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeScheduledInstancesOutput, context: context)
        type = Types::DescribeScheduledInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.scheduled_instance_set = ScheduledInstanceSet.build(params[:scheduled_instance_set], context: "#{context}[:scheduled_instance_set]") unless params[:scheduled_instance_set].nil?
        type
      end
    end

    module DescribeSecurityGroupReferencesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSecurityGroupReferencesInput, context: context)
        type = Types::DescribeSecurityGroupReferencesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.group_id = GroupIds.build(params[:group_id], context: "#{context}[:group_id]") unless params[:group_id].nil?
        type
      end
    end

    module DescribeSecurityGroupReferencesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSecurityGroupReferencesOutput, context: context)
        type = Types::DescribeSecurityGroupReferencesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.security_group_reference_set = SecurityGroupReferences.build(params[:security_group_reference_set], context: "#{context}[:security_group_reference_set]") unless params[:security_group_reference_set].nil?
        type
      end
    end

    module DescribeSecurityGroupRulesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSecurityGroupRulesInput, context: context)
        type = Types::DescribeSecurityGroupRulesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.security_group_rule_ids = SecurityGroupRuleIdList.build(params[:security_group_rule_ids], context: "#{context}[:security_group_rule_ids]") unless params[:security_group_rule_ids].nil?
        type.dry_run = params[:dry_run]
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeSecurityGroupRulesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSecurityGroupRulesOutput, context: context)
        type = Types::DescribeSecurityGroupRulesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.security_group_rules = SecurityGroupRuleList.build(params[:security_group_rules], context: "#{context}[:security_group_rules]") unless params[:security_group_rules].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeSecurityGroupsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSecurityGroupsInput, context: context)
        type = Types::DescribeSecurityGroupsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.group_ids = GroupIdStringList.build(params[:group_ids], context: "#{context}[:group_ids]") unless params[:group_ids].nil?
        type.group_names = GroupNameStringList.build(params[:group_names], context: "#{context}[:group_names]") unless params[:group_names].nil?
        type.dry_run = params[:dry_run]
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeSecurityGroupsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSecurityGroupsOutput, context: context)
        type = Types::DescribeSecurityGroupsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.security_groups = SecurityGroupList.build(params[:security_groups], context: "#{context}[:security_groups]") unless params[:security_groups].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeSnapshotAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSnapshotAttributeInput, context: context)
        type = Types::DescribeSnapshotAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attribute = params[:attribute]
        type.snapshot_id = params[:snapshot_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeSnapshotAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSnapshotAttributeOutput, context: context)
        type = Types::DescribeSnapshotAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.create_volume_permissions = CreateVolumePermissionList.build(params[:create_volume_permissions], context: "#{context}[:create_volume_permissions]") unless params[:create_volume_permissions].nil?
        type.product_codes = ProductCodeList.build(params[:product_codes], context: "#{context}[:product_codes]") unless params[:product_codes].nil?
        type.snapshot_id = params[:snapshot_id]
        type
      end
    end

    module DescribeSnapshotTierStatusInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSnapshotTierStatusInput, context: context)
        type = Types::DescribeSnapshotTierStatusInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeSnapshotTierStatusOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSnapshotTierStatusOutput, context: context)
        type = Types::DescribeSnapshotTierStatusOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_tier_statuses = SnapshotTierStatusSet.build(params[:snapshot_tier_statuses], context: "#{context}[:snapshot_tier_statuses]") unless params[:snapshot_tier_statuses].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeSnapshotsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSnapshotsInput, context: context)
        type = Types::DescribeSnapshotsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.owner_ids = OwnerStringList.build(params[:owner_ids], context: "#{context}[:owner_ids]") unless params[:owner_ids].nil?
        type.restorable_by_user_ids = RestorableByStringList.build(params[:restorable_by_user_ids], context: "#{context}[:restorable_by_user_ids]") unless params[:restorable_by_user_ids].nil?
        type.snapshot_ids = SnapshotIdStringList.build(params[:snapshot_ids], context: "#{context}[:snapshot_ids]") unless params[:snapshot_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeSnapshotsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSnapshotsOutput, context: context)
        type = Types::DescribeSnapshotsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshots = SnapshotList.build(params[:snapshots], context: "#{context}[:snapshots]") unless params[:snapshots].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeSpotDatafeedSubscriptionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSpotDatafeedSubscriptionInput, context: context)
        type = Types::DescribeSpotDatafeedSubscriptionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeSpotDatafeedSubscriptionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSpotDatafeedSubscriptionOutput, context: context)
        type = Types::DescribeSpotDatafeedSubscriptionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.spot_datafeed_subscription = SpotDatafeedSubscription.build(params[:spot_datafeed_subscription], context: "#{context}[:spot_datafeed_subscription]") unless params[:spot_datafeed_subscription].nil?
        type
      end
    end

    module DescribeSpotFleetInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSpotFleetInstancesInput, context: context)
        type = Types::DescribeSpotFleetInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.spot_fleet_request_id = params[:spot_fleet_request_id]
        type
      end
    end

    module DescribeSpotFleetInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSpotFleetInstancesOutput, context: context)
        type = Types::DescribeSpotFleetInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.active_instances = ActiveInstanceSet.build(params[:active_instances], context: "#{context}[:active_instances]") unless params[:active_instances].nil?
        type.next_token = params[:next_token]
        type.spot_fleet_request_id = params[:spot_fleet_request_id]
        type
      end
    end

    module DescribeSpotFleetRequestHistoryInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSpotFleetRequestHistoryInput, context: context)
        type = Types::DescribeSpotFleetRequestHistoryInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.event_type = params[:event_type]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.spot_fleet_request_id = params[:spot_fleet_request_id]
        type.start_time = params[:start_time]
        type
      end
    end

    module DescribeSpotFleetRequestHistoryOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSpotFleetRequestHistoryOutput, context: context)
        type = Types::DescribeSpotFleetRequestHistoryOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.history_records = HistoryRecords.build(params[:history_records], context: "#{context}[:history_records]") unless params[:history_records].nil?
        type.last_evaluated_time = params[:last_evaluated_time]
        type.next_token = params[:next_token]
        type.spot_fleet_request_id = params[:spot_fleet_request_id]
        type.start_time = params[:start_time]
        type
      end
    end

    module DescribeSpotFleetRequestsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSpotFleetRequestsInput, context: context)
        type = Types::DescribeSpotFleetRequestsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.spot_fleet_request_ids = SpotFleetRequestIdList.build(params[:spot_fleet_request_ids], context: "#{context}[:spot_fleet_request_ids]") unless params[:spot_fleet_request_ids].nil?
        type
      end
    end

    module DescribeSpotFleetRequestsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSpotFleetRequestsOutput, context: context)
        type = Types::DescribeSpotFleetRequestsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.spot_fleet_request_configs = SpotFleetRequestConfigSet.build(params[:spot_fleet_request_configs], context: "#{context}[:spot_fleet_request_configs]") unless params[:spot_fleet_request_configs].nil?
        type
      end
    end

    module DescribeSpotInstanceRequestsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSpotInstanceRequestsInput, context: context)
        type = Types::DescribeSpotInstanceRequestsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type.spot_instance_request_ids = SpotInstanceRequestIdList.build(params[:spot_instance_request_ids], context: "#{context}[:spot_instance_request_ids]") unless params[:spot_instance_request_ids].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeSpotInstanceRequestsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSpotInstanceRequestsOutput, context: context)
        type = Types::DescribeSpotInstanceRequestsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.spot_instance_requests = SpotInstanceRequestList.build(params[:spot_instance_requests], context: "#{context}[:spot_instance_requests]") unless params[:spot_instance_requests].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeSpotPriceHistoryInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSpotPriceHistoryInput, context: context)
        type = Types::DescribeSpotPriceHistoryInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.availability_zone = params[:availability_zone]
        type.dry_run = params[:dry_run]
        type.end_time = params[:end_time]
        type.instance_types = InstanceTypeList.build(params[:instance_types], context: "#{context}[:instance_types]") unless params[:instance_types].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.product_descriptions = ProductDescriptionList.build(params[:product_descriptions], context: "#{context}[:product_descriptions]") unless params[:product_descriptions].nil?
        type.start_time = params[:start_time]
        type
      end
    end

    module DescribeSpotPriceHistoryOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSpotPriceHistoryOutput, context: context)
        type = Types::DescribeSpotPriceHistoryOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.spot_price_history = SpotPriceHistoryList.build(params[:spot_price_history], context: "#{context}[:spot_price_history]") unless params[:spot_price_history].nil?
        type
      end
    end

    module DescribeStaleSecurityGroupsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeStaleSecurityGroupsInput, context: context)
        type = Types::DescribeStaleSecurityGroupsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module DescribeStaleSecurityGroupsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeStaleSecurityGroupsOutput, context: context)
        type = Types::DescribeStaleSecurityGroupsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.stale_security_group_set = StaleSecurityGroupSet.build(params[:stale_security_group_set], context: "#{context}[:stale_security_group_set]") unless params[:stale_security_group_set].nil?
        type
      end
    end

    module DescribeStoreImageTasksInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeStoreImageTasksInput, context: context)
        type = Types::DescribeStoreImageTasksInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_ids = ImageIdList.build(params[:image_ids], context: "#{context}[:image_ids]") unless params[:image_ids].nil?
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeStoreImageTasksOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeStoreImageTasksOutput, context: context)
        type = Types::DescribeStoreImageTasksOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.store_image_task_results = StoreImageTaskResultSet.build(params[:store_image_task_results], context: "#{context}[:store_image_task_results]") unless params[:store_image_task_results].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeSubnetsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSubnetsInput, context: context)
        type = Types::DescribeSubnetsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.subnet_ids = SubnetIdStringList.build(params[:subnet_ids], context: "#{context}[:subnet_ids]") unless params[:subnet_ids].nil?
        type.dry_run = params[:dry_run]
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeSubnetsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeSubnetsOutput, context: context)
        type = Types::DescribeSubnetsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.subnets = SubnetList.build(params[:subnets], context: "#{context}[:subnets]") unless params[:subnets].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTagsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTagsInput, context: context)
        type = Types::DescribeTagsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTagsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTagsOutput, context: context)
        type = Types::DescribeTagsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.tags = TagDescriptionList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module DescribeTrafficMirrorFiltersInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTrafficMirrorFiltersInput, context: context)
        type = Types::DescribeTrafficMirrorFiltersInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_filter_ids = TrafficMirrorFilterIdList.build(params[:traffic_mirror_filter_ids], context: "#{context}[:traffic_mirror_filter_ids]") unless params[:traffic_mirror_filter_ids].nil?
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTrafficMirrorFiltersOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTrafficMirrorFiltersOutput, context: context)
        type = Types::DescribeTrafficMirrorFiltersOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_filters = TrafficMirrorFilterSet.build(params[:traffic_mirror_filters], context: "#{context}[:traffic_mirror_filters]") unless params[:traffic_mirror_filters].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTrafficMirrorSessionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTrafficMirrorSessionsInput, context: context)
        type = Types::DescribeTrafficMirrorSessionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_session_ids = TrafficMirrorSessionIdList.build(params[:traffic_mirror_session_ids], context: "#{context}[:traffic_mirror_session_ids]") unless params[:traffic_mirror_session_ids].nil?
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTrafficMirrorSessionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTrafficMirrorSessionsOutput, context: context)
        type = Types::DescribeTrafficMirrorSessionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_sessions = TrafficMirrorSessionSet.build(params[:traffic_mirror_sessions], context: "#{context}[:traffic_mirror_sessions]") unless params[:traffic_mirror_sessions].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTrafficMirrorTargetsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTrafficMirrorTargetsInput, context: context)
        type = Types::DescribeTrafficMirrorTargetsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_target_ids = TrafficMirrorTargetIdList.build(params[:traffic_mirror_target_ids], context: "#{context}[:traffic_mirror_target_ids]") unless params[:traffic_mirror_target_ids].nil?
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTrafficMirrorTargetsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTrafficMirrorTargetsOutput, context: context)
        type = Types::DescribeTrafficMirrorTargetsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_targets = TrafficMirrorTargetSet.build(params[:traffic_mirror_targets], context: "#{context}[:traffic_mirror_targets]") unless params[:traffic_mirror_targets].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTransitGatewayAttachmentsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayAttachmentsInput, context: context)
        type = Types::DescribeTransitGatewayAttachmentsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_ids = TransitGatewayAttachmentIdStringList.build(params[:transit_gateway_attachment_ids], context: "#{context}[:transit_gateway_attachment_ids]") unless params[:transit_gateway_attachment_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeTransitGatewayAttachmentsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayAttachmentsOutput, context: context)
        type = Types::DescribeTransitGatewayAttachmentsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachments = TransitGatewayAttachmentList.build(params[:transit_gateway_attachments], context: "#{context}[:transit_gateway_attachments]") unless params[:transit_gateway_attachments].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTransitGatewayConnectPeersInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayConnectPeersInput, context: context)
        type = Types::DescribeTransitGatewayConnectPeersInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_connect_peer_ids = TransitGatewayConnectPeerIdStringList.build(params[:transit_gateway_connect_peer_ids], context: "#{context}[:transit_gateway_connect_peer_ids]") unless params[:transit_gateway_connect_peer_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeTransitGatewayConnectPeersOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayConnectPeersOutput, context: context)
        type = Types::DescribeTransitGatewayConnectPeersOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_connect_peers = TransitGatewayConnectPeerList.build(params[:transit_gateway_connect_peers], context: "#{context}[:transit_gateway_connect_peers]") unless params[:transit_gateway_connect_peers].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTransitGatewayConnectsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayConnectsInput, context: context)
        type = Types::DescribeTransitGatewayConnectsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_ids = TransitGatewayAttachmentIdStringList.build(params[:transit_gateway_attachment_ids], context: "#{context}[:transit_gateway_attachment_ids]") unless params[:transit_gateway_attachment_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeTransitGatewayConnectsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayConnectsOutput, context: context)
        type = Types::DescribeTransitGatewayConnectsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_connects = TransitGatewayConnectList.build(params[:transit_gateway_connects], context: "#{context}[:transit_gateway_connects]") unless params[:transit_gateway_connects].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTransitGatewayMulticastDomainsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayMulticastDomainsInput, context: context)
        type = Types::DescribeTransitGatewayMulticastDomainsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_ids = TransitGatewayMulticastDomainIdStringList.build(params[:transit_gateway_multicast_domain_ids], context: "#{context}[:transit_gateway_multicast_domain_ids]") unless params[:transit_gateway_multicast_domain_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeTransitGatewayMulticastDomainsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayMulticastDomainsOutput, context: context)
        type = Types::DescribeTransitGatewayMulticastDomainsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domains = TransitGatewayMulticastDomainList.build(params[:transit_gateway_multicast_domains], context: "#{context}[:transit_gateway_multicast_domains]") unless params[:transit_gateway_multicast_domains].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTransitGatewayPeeringAttachmentsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayPeeringAttachmentsInput, context: context)
        type = Types::DescribeTransitGatewayPeeringAttachmentsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_ids = TransitGatewayAttachmentIdStringList.build(params[:transit_gateway_attachment_ids], context: "#{context}[:transit_gateway_attachment_ids]") unless params[:transit_gateway_attachment_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeTransitGatewayPeeringAttachmentsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayPeeringAttachmentsOutput, context: context)
        type = Types::DescribeTransitGatewayPeeringAttachmentsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_peering_attachments = TransitGatewayPeeringAttachmentList.build(params[:transit_gateway_peering_attachments], context: "#{context}[:transit_gateway_peering_attachments]") unless params[:transit_gateway_peering_attachments].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTransitGatewayPolicyTablesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayPolicyTablesInput, context: context)
        type = Types::DescribeTransitGatewayPolicyTablesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_policy_table_ids = TransitGatewayPolicyTableIdStringList.build(params[:transit_gateway_policy_table_ids], context: "#{context}[:transit_gateway_policy_table_ids]") unless params[:transit_gateway_policy_table_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeTransitGatewayPolicyTablesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayPolicyTablesOutput, context: context)
        type = Types::DescribeTransitGatewayPolicyTablesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_policy_tables = TransitGatewayPolicyTableList.build(params[:transit_gateway_policy_tables], context: "#{context}[:transit_gateway_policy_tables]") unless params[:transit_gateway_policy_tables].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTransitGatewayRouteTableAnnouncementsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayRouteTableAnnouncementsInput, context: context)
        type = Types::DescribeTransitGatewayRouteTableAnnouncementsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_announcement_ids = TransitGatewayRouteTableAnnouncementIdStringList.build(params[:transit_gateway_route_table_announcement_ids], context: "#{context}[:transit_gateway_route_table_announcement_ids]") unless params[:transit_gateway_route_table_announcement_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeTransitGatewayRouteTableAnnouncementsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayRouteTableAnnouncementsOutput, context: context)
        type = Types::DescribeTransitGatewayRouteTableAnnouncementsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_announcements = TransitGatewayRouteTableAnnouncementList.build(params[:transit_gateway_route_table_announcements], context: "#{context}[:transit_gateway_route_table_announcements]") unless params[:transit_gateway_route_table_announcements].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTransitGatewayRouteTablesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayRouteTablesInput, context: context)
        type = Types::DescribeTransitGatewayRouteTablesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_ids = TransitGatewayRouteTableIdStringList.build(params[:transit_gateway_route_table_ids], context: "#{context}[:transit_gateway_route_table_ids]") unless params[:transit_gateway_route_table_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeTransitGatewayRouteTablesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayRouteTablesOutput, context: context)
        type = Types::DescribeTransitGatewayRouteTablesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_tables = TransitGatewayRouteTableList.build(params[:transit_gateway_route_tables], context: "#{context}[:transit_gateway_route_tables]") unless params[:transit_gateway_route_tables].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTransitGatewayVpcAttachmentsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayVpcAttachmentsInput, context: context)
        type = Types::DescribeTransitGatewayVpcAttachmentsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_ids = TransitGatewayAttachmentIdStringList.build(params[:transit_gateway_attachment_ids], context: "#{context}[:transit_gateway_attachment_ids]") unless params[:transit_gateway_attachment_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeTransitGatewayVpcAttachmentsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewayVpcAttachmentsOutput, context: context)
        type = Types::DescribeTransitGatewayVpcAttachmentsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_vpc_attachments = TransitGatewayVpcAttachmentList.build(params[:transit_gateway_vpc_attachments], context: "#{context}[:transit_gateway_vpc_attachments]") unless params[:transit_gateway_vpc_attachments].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTransitGatewaysInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewaysInput, context: context)
        type = Types::DescribeTransitGatewaysInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_ids = TransitGatewayIdStringList.build(params[:transit_gateway_ids], context: "#{context}[:transit_gateway_ids]") unless params[:transit_gateway_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeTransitGatewaysOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTransitGatewaysOutput, context: context)
        type = Types::DescribeTransitGatewaysOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateways = TransitGatewayList.build(params[:transit_gateways], context: "#{context}[:transit_gateways]") unless params[:transit_gateways].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeTrunkInterfaceAssociationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTrunkInterfaceAssociationsInput, context: context)
        type = Types::DescribeTrunkInterfaceAssociationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_ids = TrunkInterfaceAssociationIdList.build(params[:association_ids], context: "#{context}[:association_ids]") unless params[:association_ids].nil?
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeTrunkInterfaceAssociationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeTrunkInterfaceAssociationsOutput, context: context)
        type = Types::DescribeTrunkInterfaceAssociationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.interface_associations = TrunkInterfaceAssociationList.build(params[:interface_associations], context: "#{context}[:interface_associations]") unless params[:interface_associations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVerifiedAccessEndpointsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVerifiedAccessEndpointsInput, context: context)
        type = Types::DescribeVerifiedAccessEndpointsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_endpoint_ids = VerifiedAccessEndpointIdList.build(params[:verified_access_endpoint_ids], context: "#{context}[:verified_access_endpoint_ids]") unless params[:verified_access_endpoint_ids].nil?
        type.verified_access_instance_id = params[:verified_access_instance_id]
        type.verified_access_group_id = params[:verified_access_group_id]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeVerifiedAccessEndpointsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVerifiedAccessEndpointsOutput, context: context)
        type = Types::DescribeVerifiedAccessEndpointsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_endpoints = VerifiedAccessEndpointList.build(params[:verified_access_endpoints], context: "#{context}[:verified_access_endpoints]") unless params[:verified_access_endpoints].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVerifiedAccessGroupsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVerifiedAccessGroupsInput, context: context)
        type = Types::DescribeVerifiedAccessGroupsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_group_ids = VerifiedAccessGroupIdList.build(params[:verified_access_group_ids], context: "#{context}[:verified_access_group_ids]") unless params[:verified_access_group_ids].nil?
        type.verified_access_instance_id = params[:verified_access_instance_id]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeVerifiedAccessGroupsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVerifiedAccessGroupsOutput, context: context)
        type = Types::DescribeVerifiedAccessGroupsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_groups = VerifiedAccessGroupList.build(params[:verified_access_groups], context: "#{context}[:verified_access_groups]") unless params[:verified_access_groups].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVerifiedAccessInstanceLoggingConfigurationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVerifiedAccessInstanceLoggingConfigurationsInput, context: context)
        type = Types::DescribeVerifiedAccessInstanceLoggingConfigurationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_instance_ids = VerifiedAccessInstanceIdList.build(params[:verified_access_instance_ids], context: "#{context}[:verified_access_instance_ids]") unless params[:verified_access_instance_ids].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeVerifiedAccessInstanceLoggingConfigurationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVerifiedAccessInstanceLoggingConfigurationsOutput, context: context)
        type = Types::DescribeVerifiedAccessInstanceLoggingConfigurationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.logging_configurations = VerifiedAccessInstanceLoggingConfigurationList.build(params[:logging_configurations], context: "#{context}[:logging_configurations]") unless params[:logging_configurations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVerifiedAccessInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVerifiedAccessInstancesInput, context: context)
        type = Types::DescribeVerifiedAccessInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_instance_ids = VerifiedAccessInstanceIdList.build(params[:verified_access_instance_ids], context: "#{context}[:verified_access_instance_ids]") unless params[:verified_access_instance_ids].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeVerifiedAccessInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVerifiedAccessInstancesOutput, context: context)
        type = Types::DescribeVerifiedAccessInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_instances = VerifiedAccessInstanceList.build(params[:verified_access_instances], context: "#{context}[:verified_access_instances]") unless params[:verified_access_instances].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVerifiedAccessTrustProvidersInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVerifiedAccessTrustProvidersInput, context: context)
        type = Types::DescribeVerifiedAccessTrustProvidersInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_trust_provider_ids = VerifiedAccessTrustProviderIdList.build(params[:verified_access_trust_provider_ids], context: "#{context}[:verified_access_trust_provider_ids]") unless params[:verified_access_trust_provider_ids].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeVerifiedAccessTrustProvidersOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVerifiedAccessTrustProvidersOutput, context: context)
        type = Types::DescribeVerifiedAccessTrustProvidersOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_trust_providers = VerifiedAccessTrustProviderList.build(params[:verified_access_trust_providers], context: "#{context}[:verified_access_trust_providers]") unless params[:verified_access_trust_providers].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVolumeAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVolumeAttributeInput, context: context)
        type = Types::DescribeVolumeAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attribute = params[:attribute]
        type.volume_id = params[:volume_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeVolumeAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVolumeAttributeOutput, context: context)
        type = Types::DescribeVolumeAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.auto_enable_io = AttributeBooleanValue.build(params[:auto_enable_io], context: "#{context}[:auto_enable_io]") unless params[:auto_enable_io].nil?
        type.product_codes = ProductCodeList.build(params[:product_codes], context: "#{context}[:product_codes]") unless params[:product_codes].nil?
        type.volume_id = params[:volume_id]
        type
      end
    end

    module DescribeVolumeStatusInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVolumeStatusInput, context: context)
        type = Types::DescribeVolumeStatusInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.volume_ids = VolumeIdStringList.build(params[:volume_ids], context: "#{context}[:volume_ids]") unless params[:volume_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeVolumeStatusOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVolumeStatusOutput, context: context)
        type = Types::DescribeVolumeStatusOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.volume_statuses = VolumeStatusList.build(params[:volume_statuses], context: "#{context}[:volume_statuses]") unless params[:volume_statuses].nil?
        type
      end
    end

    module DescribeVolumesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVolumesInput, context: context)
        type = Types::DescribeVolumesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.volume_ids = VolumeIdStringList.build(params[:volume_ids], context: "#{context}[:volume_ids]") unless params[:volume_ids].nil?
        type.dry_run = params[:dry_run]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVolumesModificationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVolumesModificationsInput, context: context)
        type = Types::DescribeVolumesModificationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.volume_ids = VolumeIdStringList.build(params[:volume_ids], context: "#{context}[:volume_ids]") unless params[:volume_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeVolumesModificationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVolumesModificationsOutput, context: context)
        type = Types::DescribeVolumesModificationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.volumes_modifications = VolumeModificationList.build(params[:volumes_modifications], context: "#{context}[:volumes_modifications]") unless params[:volumes_modifications].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVolumesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVolumesOutput, context: context)
        type = Types::DescribeVolumesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.volumes = VolumeList.build(params[:volumes], context: "#{context}[:volumes]") unless params[:volumes].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVpcAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcAttributeInput, context: context)
        type = Types::DescribeVpcAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attribute = params[:attribute]
        type.vpc_id = params[:vpc_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeVpcAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcAttributeOutput, context: context)
        type = Types::DescribeVpcAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_id = params[:vpc_id]
        type.enable_dns_hostnames = AttributeBooleanValue.build(params[:enable_dns_hostnames], context: "#{context}[:enable_dns_hostnames]") unless params[:enable_dns_hostnames].nil?
        type.enable_dns_support = AttributeBooleanValue.build(params[:enable_dns_support], context: "#{context}[:enable_dns_support]") unless params[:enable_dns_support].nil?
        type.enable_network_address_usage_metrics = AttributeBooleanValue.build(params[:enable_network_address_usage_metrics], context: "#{context}[:enable_network_address_usage_metrics]") unless params[:enable_network_address_usage_metrics].nil?
        type
      end
    end

    module DescribeVpcClassicLinkDnsSupportInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcClassicLinkDnsSupportInput, context: context)
        type = Types::DescribeVpcClassicLinkDnsSupportInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.vpc_ids = VpcClassicLinkIdList.build(params[:vpc_ids], context: "#{context}[:vpc_ids]") unless params[:vpc_ids].nil?
        type
      end
    end

    module DescribeVpcClassicLinkDnsSupportOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcClassicLinkDnsSupportOutput, context: context)
        type = Types::DescribeVpcClassicLinkDnsSupportOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.vpcs = ClassicLinkDnsSupportList.build(params[:vpcs], context: "#{context}[:vpcs]") unless params[:vpcs].nil?
        type
      end
    end

    module DescribeVpcClassicLinkInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcClassicLinkInput, context: context)
        type = Types::DescribeVpcClassicLinkInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type.vpc_ids = VpcClassicLinkIdList.build(params[:vpc_ids], context: "#{context}[:vpc_ids]") unless params[:vpc_ids].nil?
        type
      end
    end

    module DescribeVpcClassicLinkOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcClassicLinkOutput, context: context)
        type = Types::DescribeVpcClassicLinkOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpcs = VpcClassicLinkList.build(params[:vpcs], context: "#{context}[:vpcs]") unless params[:vpcs].nil?
        type
      end
    end

    module DescribeVpcEndpointConnectionNotificationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcEndpointConnectionNotificationsInput, context: context)
        type = Types::DescribeVpcEndpointConnectionNotificationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.connection_notification_id = params[:connection_notification_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVpcEndpointConnectionNotificationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcEndpointConnectionNotificationsOutput, context: context)
        type = Types::DescribeVpcEndpointConnectionNotificationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.connection_notification_set = ConnectionNotificationSet.build(params[:connection_notification_set], context: "#{context}[:connection_notification_set]") unless params[:connection_notification_set].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVpcEndpointConnectionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcEndpointConnectionsInput, context: context)
        type = Types::DescribeVpcEndpointConnectionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVpcEndpointConnectionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcEndpointConnectionsOutput, context: context)
        type = Types::DescribeVpcEndpointConnectionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_endpoint_connections = VpcEndpointConnectionSet.build(params[:vpc_endpoint_connections], context: "#{context}[:vpc_endpoint_connections]") unless params[:vpc_endpoint_connections].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVpcEndpointServiceConfigurationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcEndpointServiceConfigurationsInput, context: context)
        type = Types::DescribeVpcEndpointServiceConfigurationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.service_ids = VpcEndpointServiceIdList.build(params[:service_ids], context: "#{context}[:service_ids]") unless params[:service_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVpcEndpointServiceConfigurationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcEndpointServiceConfigurationsOutput, context: context)
        type = Types::DescribeVpcEndpointServiceConfigurationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.service_configurations = ServiceConfigurationSet.build(params[:service_configurations], context: "#{context}[:service_configurations]") unless params[:service_configurations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVpcEndpointServicePermissionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcEndpointServicePermissionsInput, context: context)
        type = Types::DescribeVpcEndpointServicePermissionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.service_id = params[:service_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVpcEndpointServicePermissionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcEndpointServicePermissionsOutput, context: context)
        type = Types::DescribeVpcEndpointServicePermissionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allowed_principals = AllowedPrincipalSet.build(params[:allowed_principals], context: "#{context}[:allowed_principals]") unless params[:allowed_principals].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVpcEndpointServicesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcEndpointServicesInput, context: context)
        type = Types::DescribeVpcEndpointServicesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.service_names = ValueStringList.build(params[:service_names], context: "#{context}[:service_names]") unless params[:service_names].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVpcEndpointServicesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcEndpointServicesOutput, context: context)
        type = Types::DescribeVpcEndpointServicesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.service_names = ValueStringList.build(params[:service_names], context: "#{context}[:service_names]") unless params[:service_names].nil?
        type.service_details = ServiceDetailSet.build(params[:service_details], context: "#{context}[:service_details]") unless params[:service_details].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVpcEndpointsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcEndpointsInput, context: context)
        type = Types::DescribeVpcEndpointsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.vpc_endpoint_ids = VpcEndpointIdList.build(params[:vpc_endpoint_ids], context: "#{context}[:vpc_endpoint_ids]") unless params[:vpc_endpoint_ids].nil?
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVpcEndpointsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcEndpointsOutput, context: context)
        type = Types::DescribeVpcEndpointsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_endpoints = VpcEndpointSet.build(params[:vpc_endpoints], context: "#{context}[:vpc_endpoints]") unless params[:vpc_endpoints].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVpcPeeringConnectionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcPeeringConnectionsInput, context: context)
        type = Types::DescribeVpcPeeringConnectionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type.vpc_peering_connection_ids = VpcPeeringConnectionIdList.build(params[:vpc_peering_connection_ids], context: "#{context}[:vpc_peering_connection_ids]") unless params[:vpc_peering_connection_ids].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeVpcPeeringConnectionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcPeeringConnectionsOutput, context: context)
        type = Types::DescribeVpcPeeringConnectionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_peering_connections = VpcPeeringConnectionList.build(params[:vpc_peering_connections], context: "#{context}[:vpc_peering_connections]") unless params[:vpc_peering_connections].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVpcsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcsInput, context: context)
        type = Types::DescribeVpcsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.vpc_ids = VpcIdStringList.build(params[:vpc_ids], context: "#{context}[:vpc_ids]") unless params[:vpc_ids].nil?
        type.dry_run = params[:dry_run]
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module DescribeVpcsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpcsOutput, context: context)
        type = Types::DescribeVpcsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpcs = VpcList.build(params[:vpcs], context: "#{context}[:vpcs]") unless params[:vpcs].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module DescribeVpnConnectionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpnConnectionsInput, context: context)
        type = Types::DescribeVpnConnectionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.vpn_connection_ids = VpnConnectionIdStringList.build(params[:vpn_connection_ids], context: "#{context}[:vpn_connection_ids]") unless params[:vpn_connection_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeVpnConnectionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpnConnectionsOutput, context: context)
        type = Types::DescribeVpnConnectionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connections = VpnConnectionList.build(params[:vpn_connections], context: "#{context}[:vpn_connections]") unless params[:vpn_connections].nil?
        type
      end
    end

    module DescribeVpnGatewaysInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpnGatewaysInput, context: context)
        type = Types::DescribeVpnGatewaysInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.vpn_gateway_ids = VpnGatewayIdStringList.build(params[:vpn_gateway_ids], context: "#{context}[:vpn_gateway_ids]") unless params[:vpn_gateway_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DescribeVpnGatewaysOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DescribeVpnGatewaysOutput, context: context)
        type = Types::DescribeVpnGatewaysOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_gateways = VpnGatewayList.build(params[:vpn_gateways], context: "#{context}[:vpn_gateways]") unless params[:vpn_gateways].nil?
        type
      end
    end

    module DestinationOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DestinationOptionsRequest, context: context)
        type = Types::DestinationOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.file_format = params[:file_format]
        type.hive_compatible_partitions = params[:hive_compatible_partitions]
        type.per_hour_partition = params[:per_hour_partition]
        type
      end
    end

    module DestinationOptionsResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DestinationOptionsResponse, context: context)
        type = Types::DestinationOptionsResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.file_format = params[:file_format]
        type.hive_compatible_partitions = params[:hive_compatible_partitions]
        type.per_hour_partition = params[:per_hour_partition]
        type
      end
    end

    module DetachClassicLinkVpcInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DetachClassicLinkVpcInput, context: context)
        type = Types::DetachClassicLinkVpcInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.instance_id = params[:instance_id]
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module DetachClassicLinkVpcOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DetachClassicLinkVpcOutput, context: context)
        type = Types::DetachClassicLinkVpcOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module DetachInternetGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DetachInternetGatewayInput, context: context)
        type = Types::DetachInternetGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.internet_gateway_id = params[:internet_gateway_id]
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module DetachInternetGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DetachInternetGatewayOutput, context: context)
        type = Types::DetachInternetGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DetachNetworkInterfaceInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DetachNetworkInterfaceInput, context: context)
        type = Types::DetachNetworkInterfaceInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attachment_id = params[:attachment_id]
        type.dry_run = params[:dry_run]
        type.force = params[:force]
        type
      end
    end

    module DetachNetworkInterfaceOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DetachNetworkInterfaceOutput, context: context)
        type = Types::DetachNetworkInterfaceOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DetachVerifiedAccessTrustProviderInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DetachVerifiedAccessTrustProviderInput, context: context)
        type = Types::DetachVerifiedAccessTrustProviderInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_instance_id = params[:verified_access_instance_id]
        type.verified_access_trust_provider_id = params[:verified_access_trust_provider_id]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DetachVerifiedAccessTrustProviderOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DetachVerifiedAccessTrustProviderOutput, context: context)
        type = Types::DetachVerifiedAccessTrustProviderOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_trust_provider = VerifiedAccessTrustProvider.build(params[:verified_access_trust_provider], context: "#{context}[:verified_access_trust_provider]") unless params[:verified_access_trust_provider].nil?
        type.verified_access_instance = VerifiedAccessInstance.build(params[:verified_access_instance], context: "#{context}[:verified_access_instance]") unless params[:verified_access_instance].nil?
        type
      end
    end

    module DetachVolumeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DetachVolumeInput, context: context)
        type = Types::DetachVolumeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.device = params[:device]
        type.force = params[:force]
        type.instance_id = params[:instance_id]
        type.volume_id = params[:volume_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DetachVolumeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DetachVolumeOutput, context: context)
        type = Types::DetachVolumeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attach_time = params[:attach_time]
        type.device = params[:device]
        type.instance_id = params[:instance_id]
        type.state = params[:state]
        type.volume_id = params[:volume_id]
        type.delete_on_termination = params[:delete_on_termination]
        type.associated_resource = params[:associated_resource]
        type.instance_owning_service = params[:instance_owning_service]
        type
      end
    end

    module DetachVpnGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DetachVpnGatewayInput, context: context)
        type = Types::DetachVpnGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_id = params[:vpc_id]
        type.vpn_gateway_id = params[:vpn_gateway_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DetachVpnGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DetachVpnGatewayOutput, context: context)
        type = Types::DetachVpnGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DeviceOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DeviceOptions, context: context)
        type = Types::DeviceOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.tenant_id = params[:tenant_id]
        type.public_signing_key_url = params[:public_signing_key_url]
        type
      end
    end

    module DhcpConfiguration
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DhcpConfiguration, context: context)
        type = Types::DhcpConfiguration.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.key = params[:key]
        type.values = DhcpConfigurationValueList.build(params[:values], context: "#{context}[:values]") unless params[:values].nil?
        type
      end
    end

    module DhcpConfigurationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DhcpConfiguration.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DhcpConfigurationValueList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << AttributeValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DhcpOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DhcpOptions, context: context)
        type = Types::DhcpOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dhcp_configurations = DhcpConfigurationList.build(params[:dhcp_configurations], context: "#{context}[:dhcp_configurations]") unless params[:dhcp_configurations].nil?
        type.dhcp_options_id = params[:dhcp_options_id]
        type.owner_id = params[:owner_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module DhcpOptionsIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module DhcpOptionsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DhcpOptions.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DirectoryServiceAuthentication
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DirectoryServiceAuthentication, context: context)
        type = Types::DirectoryServiceAuthentication.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.directory_id = params[:directory_id]
        type
      end
    end

    module DirectoryServiceAuthenticationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DirectoryServiceAuthenticationRequest, context: context)
        type = Types::DirectoryServiceAuthenticationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.directory_id = params[:directory_id]
        type
      end
    end

    module DisableAddressTransferInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableAddressTransferInput, context: context)
        type = Types::DisableAddressTransferInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_id = params[:allocation_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisableAddressTransferOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableAddressTransferOutput, context: context)
        type = Types::DisableAddressTransferOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.address_transfer = AddressTransfer.build(params[:address_transfer], context: "#{context}[:address_transfer]") unless params[:address_transfer].nil?
        type
      end
    end

    module DisableAwsNetworkPerformanceMetricSubscriptionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableAwsNetworkPerformanceMetricSubscriptionInput, context: context)
        type = Types::DisableAwsNetworkPerformanceMetricSubscriptionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.source = params[:source]
        type.destination = params[:destination]
        type.metric = params[:metric]
        type.statistic = params[:statistic]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisableAwsNetworkPerformanceMetricSubscriptionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableAwsNetworkPerformanceMetricSubscriptionOutput, context: context)
        type = Types::DisableAwsNetworkPerformanceMetricSubscriptionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.output = params[:output]
        type
      end
    end

    module DisableEbsEncryptionByDefaultInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableEbsEncryptionByDefaultInput, context: context)
        type = Types::DisableEbsEncryptionByDefaultInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisableEbsEncryptionByDefaultOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableEbsEncryptionByDefaultOutput, context: context)
        type = Types::DisableEbsEncryptionByDefaultOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ebs_encryption_by_default = params[:ebs_encryption_by_default]
        type
      end
    end

    module DisableFastLaunchInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableFastLaunchInput, context: context)
        type = Types::DisableFastLaunchInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type.force = params[:force]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisableFastLaunchOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableFastLaunchOutput, context: context)
        type = Types::DisableFastLaunchOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type.resource_type = params[:resource_type]
        type.snapshot_configuration = FastLaunchSnapshotConfigurationResponse.build(params[:snapshot_configuration], context: "#{context}[:snapshot_configuration]") unless params[:snapshot_configuration].nil?
        type.launch_template = FastLaunchLaunchTemplateSpecificationResponse.build(params[:launch_template], context: "#{context}[:launch_template]") unless params[:launch_template].nil?
        type.max_parallel_launches = params[:max_parallel_launches]
        type.owner_id = params[:owner_id]
        type.state = params[:state]
        type.state_transition_reason = params[:state_transition_reason]
        type.state_transition_time = params[:state_transition_time]
        type
      end
    end

    module DisableFastSnapshotRestoreErrorItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableFastSnapshotRestoreErrorItem, context: context)
        type = Types::DisableFastSnapshotRestoreErrorItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.fast_snapshot_restore_state_errors = DisableFastSnapshotRestoreStateErrorSet.build(params[:fast_snapshot_restore_state_errors], context: "#{context}[:fast_snapshot_restore_state_errors]") unless params[:fast_snapshot_restore_state_errors].nil?
        type
      end
    end

    module DisableFastSnapshotRestoreErrorSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DisableFastSnapshotRestoreErrorItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DisableFastSnapshotRestoreStateError
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableFastSnapshotRestoreStateError, context: context)
        type = Types::DisableFastSnapshotRestoreStateError.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module DisableFastSnapshotRestoreStateErrorItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableFastSnapshotRestoreStateErrorItem, context: context)
        type = Types::DisableFastSnapshotRestoreStateErrorItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.error = DisableFastSnapshotRestoreStateError.build(params[:error], context: "#{context}[:error]") unless params[:error].nil?
        type
      end
    end

    module DisableFastSnapshotRestoreStateErrorSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DisableFastSnapshotRestoreStateErrorItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DisableFastSnapshotRestoreSuccessItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableFastSnapshotRestoreSuccessItem, context: context)
        type = Types::DisableFastSnapshotRestoreSuccessItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.availability_zone = params[:availability_zone]
        type.state = params[:state]
        type.state_transition_reason = params[:state_transition_reason]
        type.owner_id = params[:owner_id]
        type.owner_alias = params[:owner_alias]
        type.enabling_time = params[:enabling_time]
        type.optimizing_time = params[:optimizing_time]
        type.enabled_time = params[:enabled_time]
        type.disabling_time = params[:disabling_time]
        type.disabled_time = params[:disabled_time]
        type
      end
    end

    module DisableFastSnapshotRestoreSuccessSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DisableFastSnapshotRestoreSuccessItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DisableFastSnapshotRestoresInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableFastSnapshotRestoresInput, context: context)
        type = Types::DisableFastSnapshotRestoresInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zones = AvailabilityZoneStringList.build(params[:availability_zones], context: "#{context}[:availability_zones]") unless params[:availability_zones].nil?
        type.source_snapshot_ids = SnapshotIdStringList.build(params[:source_snapshot_ids], context: "#{context}[:source_snapshot_ids]") unless params[:source_snapshot_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisableFastSnapshotRestoresOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableFastSnapshotRestoresOutput, context: context)
        type = Types::DisableFastSnapshotRestoresOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.successful = DisableFastSnapshotRestoreSuccessSet.build(params[:successful], context: "#{context}[:successful]") unless params[:successful].nil?
        type.unsuccessful = DisableFastSnapshotRestoreErrorSet.build(params[:unsuccessful], context: "#{context}[:unsuccessful]") unless params[:unsuccessful].nil?
        type
      end
    end

    module DisableImageBlockPublicAccessInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableImageBlockPublicAccessInput, context: context)
        type = Types::DisableImageBlockPublicAccessInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisableImageBlockPublicAccessOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableImageBlockPublicAccessOutput, context: context)
        type = Types::DisableImageBlockPublicAccessOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_block_public_access_state = params[:image_block_public_access_state]
        type
      end
    end

    module DisableImageDeprecationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableImageDeprecationInput, context: context)
        type = Types::DisableImageDeprecationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisableImageDeprecationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableImageDeprecationOutput, context: context)
        type = Types::DisableImageDeprecationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module DisableImageInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableImageInput, context: context)
        type = Types::DisableImageInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisableImageOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableImageOutput, context: context)
        type = Types::DisableImageOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module DisableIpamOrganizationAdminAccountInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableIpamOrganizationAdminAccountInput, context: context)
        type = Types::DisableIpamOrganizationAdminAccountInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.delegated_admin_account_id = params[:delegated_admin_account_id]
        type
      end
    end

    module DisableIpamOrganizationAdminAccountOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableIpamOrganizationAdminAccountOutput, context: context)
        type = Types::DisableIpamOrganizationAdminAccountOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.success = params[:success]
        type
      end
    end

    module DisableSerialConsoleAccessInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableSerialConsoleAccessInput, context: context)
        type = Types::DisableSerialConsoleAccessInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisableSerialConsoleAccessOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableSerialConsoleAccessOutput, context: context)
        type = Types::DisableSerialConsoleAccessOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.serial_console_access_enabled = params[:serial_console_access_enabled]
        type
      end
    end

    module DisableSnapshotBlockPublicAccessInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableSnapshotBlockPublicAccessInput, context: context)
        type = Types::DisableSnapshotBlockPublicAccessInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisableSnapshotBlockPublicAccessOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableSnapshotBlockPublicAccessOutput, context: context)
        type = Types::DisableSnapshotBlockPublicAccessOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.state = params[:state]
        type
      end
    end

    module DisableTransitGatewayRouteTablePropagationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableTransitGatewayRouteTablePropagationInput, context: context)
        type = Types::DisableTransitGatewayRouteTablePropagationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.dry_run = params[:dry_run]
        type.transit_gateway_route_table_announcement_id = params[:transit_gateway_route_table_announcement_id]
        type
      end
    end

    module DisableTransitGatewayRouteTablePropagationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableTransitGatewayRouteTablePropagationOutput, context: context)
        type = Types::DisableTransitGatewayRouteTablePropagationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.propagation = TransitGatewayPropagation.build(params[:propagation], context: "#{context}[:propagation]") unless params[:propagation].nil?
        type
      end
    end

    module DisableVgwRoutePropagationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableVgwRoutePropagationInput, context: context)
        type = Types::DisableVgwRoutePropagationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.gateway_id = params[:gateway_id]
        type.route_table_id = params[:route_table_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisableVgwRoutePropagationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableVgwRoutePropagationOutput, context: context)
        type = Types::DisableVgwRoutePropagationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DisableVpcClassicLinkDnsSupportInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableVpcClassicLinkDnsSupportInput, context: context)
        type = Types::DisableVpcClassicLinkDnsSupportInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module DisableVpcClassicLinkDnsSupportOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableVpcClassicLinkDnsSupportOutput, context: context)
        type = Types::DisableVpcClassicLinkDnsSupportOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module DisableVpcClassicLinkInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableVpcClassicLinkInput, context: context)
        type = Types::DisableVpcClassicLinkInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module DisableVpcClassicLinkOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisableVpcClassicLinkOutput, context: context)
        type = Types::DisableVpcClassicLinkOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module DisassociateAddressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateAddressInput, context: context)
        type = Types::DisassociateAddressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type.public_ip = params[:public_ip]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisassociateAddressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateAddressOutput, context: context)
        type = Types::DisassociateAddressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DisassociateClientVpnTargetNetworkInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateClientVpnTargetNetworkInput, context: context)
        type = Types::DisassociateClientVpnTargetNetworkInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.association_id = params[:association_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisassociateClientVpnTargetNetworkOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateClientVpnTargetNetworkOutput, context: context)
        type = Types::DisassociateClientVpnTargetNetworkOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type.status = AssociationStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type
      end
    end

    module DisassociateEnclaveCertificateIamRoleInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateEnclaveCertificateIamRoleInput, context: context)
        type = Types::DisassociateEnclaveCertificateIamRoleInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.certificate_arn = params[:certificate_arn]
        type.role_arn = params[:role_arn]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisassociateEnclaveCertificateIamRoleOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateEnclaveCertificateIamRoleOutput, context: context)
        type = Types::DisassociateEnclaveCertificateIamRoleOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module DisassociateIamInstanceProfileInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateIamInstanceProfileInput, context: context)
        type = Types::DisassociateIamInstanceProfileInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type
      end
    end

    module DisassociateIamInstanceProfileOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateIamInstanceProfileOutput, context: context)
        type = Types::DisassociateIamInstanceProfileOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.iam_instance_profile_association = IamInstanceProfileAssociation.build(params[:iam_instance_profile_association], context: "#{context}[:iam_instance_profile_association]") unless params[:iam_instance_profile_association].nil?
        type
      end
    end

    module DisassociateInstanceEventWindowInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateInstanceEventWindowInput, context: context)
        type = Types::DisassociateInstanceEventWindowInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.instance_event_window_id = params[:instance_event_window_id]
        type.association_target = InstanceEventWindowDisassociationRequest.build(params[:association_target], context: "#{context}[:association_target]") unless params[:association_target].nil?
        type
      end
    end

    module DisassociateInstanceEventWindowOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateInstanceEventWindowOutput, context: context)
        type = Types::DisassociateInstanceEventWindowOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_event_window = InstanceEventWindow.build(params[:instance_event_window], context: "#{context}[:instance_event_window]") unless params[:instance_event_window].nil?
        type
      end
    end

    module DisassociateIpamByoasnInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateIpamByoasnInput, context: context)
        type = Types::DisassociateIpamByoasnInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.asn = params[:asn]
        type.cidr = params[:cidr]
        type
      end
    end

    module DisassociateIpamByoasnOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateIpamByoasnOutput, context: context)
        type = Types::DisassociateIpamByoasnOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.asn_association = AsnAssociation.build(params[:asn_association], context: "#{context}[:asn_association]") unless params[:asn_association].nil?
        type
      end
    end

    module DisassociateIpamResourceDiscoveryInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateIpamResourceDiscoveryInput, context: context)
        type = Types::DisassociateIpamResourceDiscoveryInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_resource_discovery_association_id = params[:ipam_resource_discovery_association_id]
        type
      end
    end

    module DisassociateIpamResourceDiscoveryOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateIpamResourceDiscoveryOutput, context: context)
        type = Types::DisassociateIpamResourceDiscoveryOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_resource_discovery_association = IpamResourceDiscoveryAssociation.build(params[:ipam_resource_discovery_association], context: "#{context}[:ipam_resource_discovery_association]") unless params[:ipam_resource_discovery_association].nil?
        type
      end
    end

    module DisassociateNatGatewayAddressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateNatGatewayAddressInput, context: context)
        type = Types::DisassociateNatGatewayAddressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.nat_gateway_id = params[:nat_gateway_id]
        type.association_ids = EipAssociationIdList.build(params[:association_ids], context: "#{context}[:association_ids]") unless params[:association_ids].nil?
        type.max_drain_duration_seconds = params[:max_drain_duration_seconds]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisassociateNatGatewayAddressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateNatGatewayAddressOutput, context: context)
        type = Types::DisassociateNatGatewayAddressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.nat_gateway_id = params[:nat_gateway_id]
        type.nat_gateway_addresses = NatGatewayAddressList.build(params[:nat_gateway_addresses], context: "#{context}[:nat_gateway_addresses]") unless params[:nat_gateway_addresses].nil?
        type
      end
    end

    module DisassociateRouteTableInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateRouteTableInput, context: context)
        type = Types::DisassociateRouteTableInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisassociateRouteTableOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateRouteTableOutput, context: context)
        type = Types::DisassociateRouteTableOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module DisassociateSubnetCidrBlockInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateSubnetCidrBlockInput, context: context)
        type = Types::DisassociateSubnetCidrBlockInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type
      end
    end

    module DisassociateSubnetCidrBlockOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateSubnetCidrBlockOutput, context: context)
        type = Types::DisassociateSubnetCidrBlockOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_cidr_block_association = SubnetIpv6CidrBlockAssociation.build(params[:ipv6_cidr_block_association], context: "#{context}[:ipv6_cidr_block_association]") unless params[:ipv6_cidr_block_association].nil?
        type.subnet_id = params[:subnet_id]
        type
      end
    end

    module DisassociateTransitGatewayMulticastDomainInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateTransitGatewayMulticastDomainInput, context: context)
        type = Types::DisassociateTransitGatewayMulticastDomainInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.subnet_ids = TransitGatewaySubnetIdList.build(params[:subnet_ids], context: "#{context}[:subnet_ids]") unless params[:subnet_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisassociateTransitGatewayMulticastDomainOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateTransitGatewayMulticastDomainOutput, context: context)
        type = Types::DisassociateTransitGatewayMulticastDomainOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.associations = TransitGatewayMulticastDomainAssociations.build(params[:associations], context: "#{context}[:associations]") unless params[:associations].nil?
        type
      end
    end

    module DisassociateTransitGatewayPolicyTableInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateTransitGatewayPolicyTableInput, context: context)
        type = Types::DisassociateTransitGatewayPolicyTableInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_policy_table_id = params[:transit_gateway_policy_table_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisassociateTransitGatewayPolicyTableOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateTransitGatewayPolicyTableOutput, context: context)
        type = Types::DisassociateTransitGatewayPolicyTableOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association = TransitGatewayPolicyTableAssociation.build(params[:association], context: "#{context}[:association]") unless params[:association].nil?
        type
      end
    end

    module DisassociateTransitGatewayRouteTableInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateTransitGatewayRouteTableInput, context: context)
        type = Types::DisassociateTransitGatewayRouteTableInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisassociateTransitGatewayRouteTableOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateTransitGatewayRouteTableOutput, context: context)
        type = Types::DisassociateTransitGatewayRouteTableOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association = TransitGatewayAssociation.build(params[:association], context: "#{context}[:association]") unless params[:association].nil?
        type
      end
    end

    module DisassociateTrunkInterfaceInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateTrunkInterfaceInput, context: context)
        type = Types::DisassociateTrunkInterfaceInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type
      end
    end

    module DisassociateTrunkInterfaceOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateTrunkInterfaceOutput, context: context)
        type = Types::DisassociateTrunkInterfaceOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type.client_token = params[:client_token]
        type
      end
    end

    module DisassociateVpcCidrBlockInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateVpcCidrBlockInput, context: context)
        type = Types::DisassociateVpcCidrBlockInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type
      end
    end

    module DisassociateVpcCidrBlockOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DisassociateVpcCidrBlockOutput, context: context)
        type = Types::DisassociateVpcCidrBlockOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_cidr_block_association = VpcIpv6CidrBlockAssociation.build(params[:ipv6_cidr_block_association], context: "#{context}[:ipv6_cidr_block_association]") unless params[:ipv6_cidr_block_association].nil?
        type.cidr_block_association = VpcCidrBlockAssociation.build(params[:cidr_block_association], context: "#{context}[:cidr_block_association]") unless params[:cidr_block_association].nil?
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module DiskImage
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DiskImage, context: context)
        type = Types::DiskImage.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.image = DiskImageDetail.build(params[:image], context: "#{context}[:image]") unless params[:image].nil?
        type.volume = VolumeDetail.build(params[:volume], context: "#{context}[:volume]") unless params[:volume].nil?
        type
      end
    end

    module DiskImageDescription
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DiskImageDescription, context: context)
        type = Types::DiskImageDescription.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.checksum = params[:checksum]
        type.format = params[:format]
        type.import_manifest_url = params[:import_manifest_url]
        type.size = params[:size]
        type
      end
    end

    module DiskImageDetail
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DiskImageDetail, context: context)
        type = Types::DiskImageDetail.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.bytes = params[:bytes]
        type.format = params[:format]
        type.import_manifest_url = params[:import_manifest_url]
        type
      end
    end

    module DiskImageList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DiskImage.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DiskImageVolumeDescription
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DiskImageVolumeDescription, context: context)
        type = Types::DiskImageVolumeDescription.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.id = params[:id]
        type.size = params[:size]
        type
      end
    end

    module DiskInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DiskInfo, context: context)
        type = Types::DiskInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.size_in_gb = params[:size_in_gb]
        type.count = params[:count]
        type.type = params[:type]
        type
      end
    end

    module DiskInfoList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DiskInfo.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DnsEntry
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DnsEntry, context: context)
        type = Types::DnsEntry.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dns_name = params[:dns_name]
        type.hosted_zone_id = params[:hosted_zone_id]
        type
      end
    end

    module DnsEntrySet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << DnsEntry.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module DnsOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DnsOptions, context: context)
        type = Types::DnsOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dns_record_ip_type = params[:dns_record_ip_type]
        type.private_dns_only_for_inbound_resolver_endpoint = params[:private_dns_only_for_inbound_resolver_endpoint]
        type
      end
    end

    module DnsOptionsSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DnsOptionsSpecification, context: context)
        type = Types::DnsOptionsSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dns_record_ip_type = params[:dns_record_ip_type]
        type.private_dns_only_for_inbound_resolver_endpoint = params[:private_dns_only_for_inbound_resolver_endpoint]
        type
      end
    end

    module DnsServersOptionsModifyStructure
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::DnsServersOptionsModifyStructure, context: context)
        type = Types::DnsServersOptionsModifyStructure.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.custom_dns_servers = ValueStringList.build(params[:custom_dns_servers], context: "#{context}[:custom_dns_servers]") unless params[:custom_dns_servers].nil?
        type.enabled = params[:enabled]
        type
      end
    end

    module EbsBlockDevice
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EbsBlockDevice, context: context)
        type = Types::EbsBlockDevice.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.delete_on_termination = params[:delete_on_termination]
        type.iops = params[:iops]
        type.snapshot_id = params[:snapshot_id]
        type.volume_size = params[:volume_size]
        type.volume_type = params[:volume_type]
        type.kms_key_id = params[:kms_key_id]
        type.throughput = params[:throughput]
        type.outpost_arn = params[:outpost_arn]
        type.encrypted = params[:encrypted]
        type
      end
    end

    module EbsInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EbsInfo, context: context)
        type = Types::EbsInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ebs_optimized_support = params[:ebs_optimized_support]
        type.encryption_support = params[:encryption_support]
        type.ebs_optimized_info = EbsOptimizedInfo.build(params[:ebs_optimized_info], context: "#{context}[:ebs_optimized_info]") unless params[:ebs_optimized_info].nil?
        type.nvme_support = params[:nvme_support]
        type
      end
    end

    module EbsInstanceBlockDevice
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EbsInstanceBlockDevice, context: context)
        type = Types::EbsInstanceBlockDevice.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attach_time = params[:attach_time]
        type.delete_on_termination = params[:delete_on_termination]
        type.status = params[:status]
        type.volume_id = params[:volume_id]
        type.associated_resource = params[:associated_resource]
        type.volume_owner_id = params[:volume_owner_id]
        type
      end
    end

    module EbsInstanceBlockDeviceSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EbsInstanceBlockDeviceSpecification, context: context)
        type = Types::EbsInstanceBlockDeviceSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.delete_on_termination = params[:delete_on_termination]
        type.volume_id = params[:volume_id]
        type
      end
    end

    module EbsOptimizedInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EbsOptimizedInfo, context: context)
        type = Types::EbsOptimizedInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.baseline_bandwidth_in_mbps = params[:baseline_bandwidth_in_mbps]
        type.baseline_throughput_in_m_bps = params[:baseline_throughput_in_m_bps]&.to_f
        type.baseline_iops = params[:baseline_iops]
        type.maximum_bandwidth_in_mbps = params[:maximum_bandwidth_in_mbps]
        type.maximum_throughput_in_m_bps = params[:maximum_throughput_in_m_bps]&.to_f
        type.maximum_iops = params[:maximum_iops]
        type
      end
    end

    module Ec2InstanceConnectEndpoint
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Ec2InstanceConnectEndpoint, context: context)
        type = Types::Ec2InstanceConnectEndpoint.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.owner_id = params[:owner_id]
        type.instance_connect_endpoint_id = params[:instance_connect_endpoint_id]
        type.instance_connect_endpoint_arn = params[:instance_connect_endpoint_arn]
        type.state = params[:state]
        type.state_message = params[:state_message]
        type.dns_name = params[:dns_name]
        type.fips_dns_name = params[:fips_dns_name]
        type.network_interface_ids = NetworkInterfaceIdSet.build(params[:network_interface_ids], context: "#{context}[:network_interface_ids]") unless params[:network_interface_ids].nil?
        type.vpc_id = params[:vpc_id]
        type.availability_zone = params[:availability_zone]
        type.created_at = params[:created_at]
        type.subnet_id = params[:subnet_id]
        type.preserve_client_ip = params[:preserve_client_ip]
        type.security_group_ids = SecurityGroupIdSet.build(params[:security_group_ids], context: "#{context}[:security_group_ids]") unless params[:security_group_ids].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module EfaInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EfaInfo, context: context)
        type = Types::EfaInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.maximum_efa_interfaces = params[:maximum_efa_interfaces]
        type
      end
    end

    module EgressOnlyInternetGateway
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EgressOnlyInternetGateway, context: context)
        type = Types::EgressOnlyInternetGateway.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attachments = InternetGatewayAttachmentList.build(params[:attachments], context: "#{context}[:attachments]") unless params[:attachments].nil?
        type.egress_only_internet_gateway_id = params[:egress_only_internet_gateway_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module EgressOnlyInternetGatewayIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module EgressOnlyInternetGatewayList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << EgressOnlyInternetGateway.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module EipAssociationIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ElasticGpuAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ElasticGpuAssociation, context: context)
        type = Types::ElasticGpuAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.elastic_gpu_id = params[:elastic_gpu_id]
        type.elastic_gpu_association_id = params[:elastic_gpu_association_id]
        type.elastic_gpu_association_state = params[:elastic_gpu_association_state]
        type.elastic_gpu_association_time = params[:elastic_gpu_association_time]
        type
      end
    end

    module ElasticGpuAssociationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ElasticGpuAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ElasticGpuHealth
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ElasticGpuHealth, context: context)
        type = Types::ElasticGpuHealth.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.status = params[:status]
        type
      end
    end

    module ElasticGpuIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ElasticGpuSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ElasticGpus.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ElasticGpuSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ElasticGpuSpecification, context: context)
        type = Types::ElasticGpuSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.type = params[:type]
        type
      end
    end

    module ElasticGpuSpecificationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ElasticGpuSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ElasticGpuSpecificationResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ElasticGpuSpecificationResponse, context: context)
        type = Types::ElasticGpuSpecificationResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.type = params[:type]
        type
      end
    end

    module ElasticGpuSpecificationResponseList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ElasticGpuSpecificationResponse.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ElasticGpuSpecifications
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ElasticGpuSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ElasticGpus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ElasticGpus, context: context)
        type = Types::ElasticGpus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.elastic_gpu_id = params[:elastic_gpu_id]
        type.availability_zone = params[:availability_zone]
        type.elastic_gpu_type = params[:elastic_gpu_type]
        type.elastic_gpu_health = ElasticGpuHealth.build(params[:elastic_gpu_health], context: "#{context}[:elastic_gpu_health]") unless params[:elastic_gpu_health].nil?
        type.elastic_gpu_state = params[:elastic_gpu_state]
        type.instance_id = params[:instance_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module ElasticInferenceAccelerator
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ElasticInferenceAccelerator, context: context)
        type = Types::ElasticInferenceAccelerator.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.type = params[:type]
        type.count = params[:count]
        type
      end
    end

    module ElasticInferenceAcceleratorAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ElasticInferenceAcceleratorAssociation, context: context)
        type = Types::ElasticInferenceAcceleratorAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.elastic_inference_accelerator_arn = params[:elastic_inference_accelerator_arn]
        type.elastic_inference_accelerator_association_id = params[:elastic_inference_accelerator_association_id]
        type.elastic_inference_accelerator_association_state = params[:elastic_inference_accelerator_association_state]
        type.elastic_inference_accelerator_association_time = params[:elastic_inference_accelerator_association_time]
        type
      end
    end

    module ElasticInferenceAcceleratorAssociationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ElasticInferenceAcceleratorAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ElasticInferenceAccelerators
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ElasticInferenceAccelerator.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module EnaSrdSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnaSrdSpecification, context: context)
        type = Types::EnaSrdSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ena_srd_enabled = params[:ena_srd_enabled]
        type.ena_srd_udp_specification = EnaSrdUdpSpecification.build(params[:ena_srd_udp_specification], context: "#{context}[:ena_srd_udp_specification]") unless params[:ena_srd_udp_specification].nil?
        type
      end
    end

    module EnaSrdSpecificationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnaSrdSpecificationRequest, context: context)
        type = Types::EnaSrdSpecificationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ena_srd_enabled = params[:ena_srd_enabled]
        type.ena_srd_udp_specification = EnaSrdUdpSpecificationRequest.build(params[:ena_srd_udp_specification], context: "#{context}[:ena_srd_udp_specification]") unless params[:ena_srd_udp_specification].nil?
        type
      end
    end

    module EnaSrdUdpSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnaSrdUdpSpecification, context: context)
        type = Types::EnaSrdUdpSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ena_srd_udp_enabled = params[:ena_srd_udp_enabled]
        type
      end
    end

    module EnaSrdUdpSpecificationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnaSrdUdpSpecificationRequest, context: context)
        type = Types::EnaSrdUdpSpecificationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ena_srd_udp_enabled = params[:ena_srd_udp_enabled]
        type
      end
    end

    module EnableAddressTransferInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableAddressTransferInput, context: context)
        type = Types::EnableAddressTransferInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_id = params[:allocation_id]
        type.transfer_account_id = params[:transfer_account_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module EnableAddressTransferOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableAddressTransferOutput, context: context)
        type = Types::EnableAddressTransferOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.address_transfer = AddressTransfer.build(params[:address_transfer], context: "#{context}[:address_transfer]") unless params[:address_transfer].nil?
        type
      end
    end

    module EnableAwsNetworkPerformanceMetricSubscriptionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableAwsNetworkPerformanceMetricSubscriptionInput, context: context)
        type = Types::EnableAwsNetworkPerformanceMetricSubscriptionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.source = params[:source]
        type.destination = params[:destination]
        type.metric = params[:metric]
        type.statistic = params[:statistic]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module EnableAwsNetworkPerformanceMetricSubscriptionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableAwsNetworkPerformanceMetricSubscriptionOutput, context: context)
        type = Types::EnableAwsNetworkPerformanceMetricSubscriptionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.output = params[:output]
        type
      end
    end

    module EnableEbsEncryptionByDefaultInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableEbsEncryptionByDefaultInput, context: context)
        type = Types::EnableEbsEncryptionByDefaultInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module EnableEbsEncryptionByDefaultOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableEbsEncryptionByDefaultOutput, context: context)
        type = Types::EnableEbsEncryptionByDefaultOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ebs_encryption_by_default = params[:ebs_encryption_by_default]
        type
      end
    end

    module EnableFastLaunchInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableFastLaunchInput, context: context)
        type = Types::EnableFastLaunchInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type.resource_type = params[:resource_type]
        type.snapshot_configuration = FastLaunchSnapshotConfigurationRequest.build(params[:snapshot_configuration], context: "#{context}[:snapshot_configuration]") unless params[:snapshot_configuration].nil?
        type.launch_template = FastLaunchLaunchTemplateSpecificationRequest.build(params[:launch_template], context: "#{context}[:launch_template]") unless params[:launch_template].nil?
        type.max_parallel_launches = params[:max_parallel_launches]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module EnableFastLaunchOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableFastLaunchOutput, context: context)
        type = Types::EnableFastLaunchOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type.resource_type = params[:resource_type]
        type.snapshot_configuration = FastLaunchSnapshotConfigurationResponse.build(params[:snapshot_configuration], context: "#{context}[:snapshot_configuration]") unless params[:snapshot_configuration].nil?
        type.launch_template = FastLaunchLaunchTemplateSpecificationResponse.build(params[:launch_template], context: "#{context}[:launch_template]") unless params[:launch_template].nil?
        type.max_parallel_launches = params[:max_parallel_launches]
        type.owner_id = params[:owner_id]
        type.state = params[:state]
        type.state_transition_reason = params[:state_transition_reason]
        type.state_transition_time = params[:state_transition_time]
        type
      end
    end

    module EnableFastSnapshotRestoreErrorItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableFastSnapshotRestoreErrorItem, context: context)
        type = Types::EnableFastSnapshotRestoreErrorItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.fast_snapshot_restore_state_errors = EnableFastSnapshotRestoreStateErrorSet.build(params[:fast_snapshot_restore_state_errors], context: "#{context}[:fast_snapshot_restore_state_errors]") unless params[:fast_snapshot_restore_state_errors].nil?
        type
      end
    end

    module EnableFastSnapshotRestoreErrorSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << EnableFastSnapshotRestoreErrorItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module EnableFastSnapshotRestoreStateError
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableFastSnapshotRestoreStateError, context: context)
        type = Types::EnableFastSnapshotRestoreStateError.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module EnableFastSnapshotRestoreStateErrorItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableFastSnapshotRestoreStateErrorItem, context: context)
        type = Types::EnableFastSnapshotRestoreStateErrorItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.error = EnableFastSnapshotRestoreStateError.build(params[:error], context: "#{context}[:error]") unless params[:error].nil?
        type
      end
    end

    module EnableFastSnapshotRestoreStateErrorSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << EnableFastSnapshotRestoreStateErrorItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module EnableFastSnapshotRestoreSuccessItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableFastSnapshotRestoreSuccessItem, context: context)
        type = Types::EnableFastSnapshotRestoreSuccessItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.availability_zone = params[:availability_zone]
        type.state = params[:state]
        type.state_transition_reason = params[:state_transition_reason]
        type.owner_id = params[:owner_id]
        type.owner_alias = params[:owner_alias]
        type.enabling_time = params[:enabling_time]
        type.optimizing_time = params[:optimizing_time]
        type.enabled_time = params[:enabled_time]
        type.disabling_time = params[:disabling_time]
        type.disabled_time = params[:disabled_time]
        type
      end
    end

    module EnableFastSnapshotRestoreSuccessSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << EnableFastSnapshotRestoreSuccessItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module EnableFastSnapshotRestoresInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableFastSnapshotRestoresInput, context: context)
        type = Types::EnableFastSnapshotRestoresInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zones = AvailabilityZoneStringList.build(params[:availability_zones], context: "#{context}[:availability_zones]") unless params[:availability_zones].nil?
        type.source_snapshot_ids = SnapshotIdStringList.build(params[:source_snapshot_ids], context: "#{context}[:source_snapshot_ids]") unless params[:source_snapshot_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module EnableFastSnapshotRestoresOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableFastSnapshotRestoresOutput, context: context)
        type = Types::EnableFastSnapshotRestoresOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.successful = EnableFastSnapshotRestoreSuccessSet.build(params[:successful], context: "#{context}[:successful]") unless params[:successful].nil?
        type.unsuccessful = EnableFastSnapshotRestoreErrorSet.build(params[:unsuccessful], context: "#{context}[:unsuccessful]") unless params[:unsuccessful].nil?
        type
      end
    end

    module EnableImageBlockPublicAccessInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableImageBlockPublicAccessInput, context: context)
        type = Types::EnableImageBlockPublicAccessInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_block_public_access_state = params[:image_block_public_access_state]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module EnableImageBlockPublicAccessOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableImageBlockPublicAccessOutput, context: context)
        type = Types::EnableImageBlockPublicAccessOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_block_public_access_state = params[:image_block_public_access_state]
        type
      end
    end

    module EnableImageDeprecationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableImageDeprecationInput, context: context)
        type = Types::EnableImageDeprecationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type.deprecate_at = params[:deprecate_at]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module EnableImageDeprecationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableImageDeprecationOutput, context: context)
        type = Types::EnableImageDeprecationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module EnableImageInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableImageInput, context: context)
        type = Types::EnableImageInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module EnableImageOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableImageOutput, context: context)
        type = Types::EnableImageOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module EnableIpamOrganizationAdminAccountInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableIpamOrganizationAdminAccountInput, context: context)
        type = Types::EnableIpamOrganizationAdminAccountInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.delegated_admin_account_id = params[:delegated_admin_account_id]
        type
      end
    end

    module EnableIpamOrganizationAdminAccountOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableIpamOrganizationAdminAccountOutput, context: context)
        type = Types::EnableIpamOrganizationAdminAccountOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.success = params[:success]
        type
      end
    end

    module EnableReachabilityAnalyzerOrganizationSharingInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableReachabilityAnalyzerOrganizationSharingInput, context: context)
        type = Types::EnableReachabilityAnalyzerOrganizationSharingInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module EnableReachabilityAnalyzerOrganizationSharingOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableReachabilityAnalyzerOrganizationSharingOutput, context: context)
        type = Types::EnableReachabilityAnalyzerOrganizationSharingOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return_value = params[:return_value]
        type
      end
    end

    module EnableSerialConsoleAccessInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableSerialConsoleAccessInput, context: context)
        type = Types::EnableSerialConsoleAccessInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module EnableSerialConsoleAccessOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableSerialConsoleAccessOutput, context: context)
        type = Types::EnableSerialConsoleAccessOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.serial_console_access_enabled = params[:serial_console_access_enabled]
        type
      end
    end

    module EnableSnapshotBlockPublicAccessInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableSnapshotBlockPublicAccessInput, context: context)
        type = Types::EnableSnapshotBlockPublicAccessInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.state = params[:state]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module EnableSnapshotBlockPublicAccessOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableSnapshotBlockPublicAccessOutput, context: context)
        type = Types::EnableSnapshotBlockPublicAccessOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.state = params[:state]
        type
      end
    end

    module EnableTransitGatewayRouteTablePropagationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableTransitGatewayRouteTablePropagationInput, context: context)
        type = Types::EnableTransitGatewayRouteTablePropagationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.dry_run = params[:dry_run]
        type.transit_gateway_route_table_announcement_id = params[:transit_gateway_route_table_announcement_id]
        type
      end
    end

    module EnableTransitGatewayRouteTablePropagationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableTransitGatewayRouteTablePropagationOutput, context: context)
        type = Types::EnableTransitGatewayRouteTablePropagationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.propagation = TransitGatewayPropagation.build(params[:propagation], context: "#{context}[:propagation]") unless params[:propagation].nil?
        type
      end
    end

    module EnableVgwRoutePropagationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableVgwRoutePropagationInput, context: context)
        type = Types::EnableVgwRoutePropagationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.gateway_id = params[:gateway_id]
        type.route_table_id = params[:route_table_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module EnableVgwRoutePropagationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableVgwRoutePropagationOutput, context: context)
        type = Types::EnableVgwRoutePropagationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module EnableVolumeIOInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableVolumeIOInput, context: context)
        type = Types::EnableVolumeIOInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.volume_id = params[:volume_id]
        type
      end
    end

    module EnableVolumeIOOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableVolumeIOOutput, context: context)
        type = Types::EnableVolumeIOOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module EnableVpcClassicLinkDnsSupportInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableVpcClassicLinkDnsSupportInput, context: context)
        type = Types::EnableVpcClassicLinkDnsSupportInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module EnableVpcClassicLinkDnsSupportOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableVpcClassicLinkDnsSupportOutput, context: context)
        type = Types::EnableVpcClassicLinkDnsSupportOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module EnableVpcClassicLinkInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableVpcClassicLinkInput, context: context)
        type = Types::EnableVpcClassicLinkInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module EnableVpcClassicLinkOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnableVpcClassicLinkOutput, context: context)
        type = Types::EnableVpcClassicLinkOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module EnclaveOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnclaveOptions, context: context)
        type = Types::EnclaveOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type
      end
    end

    module EnclaveOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EnclaveOptionsRequest, context: context)
        type = Types::EnclaveOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type
      end
    end

    module EndpointSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ClientVpnEndpoint.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ErrorSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ValidationError.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module EventInformation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::EventInformation, context: context)
        type = Types::EventInformation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.event_description = params[:event_description]
        type.event_sub_type = params[:event_sub_type]
        type.instance_id = params[:instance_id]
        type
      end
    end

    module ExcludedInstanceTypeSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ExecutableByStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module Explanation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Explanation, context: context)
        type = Types::Explanation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.acl = AnalysisComponent.build(params[:acl], context: "#{context}[:acl]") unless params[:acl].nil?
        type.acl_rule = AnalysisAclRule.build(params[:acl_rule], context: "#{context}[:acl_rule]") unless params[:acl_rule].nil?
        type.address = params[:address]
        type.addresses = IpAddressList.build(params[:addresses], context: "#{context}[:addresses]") unless params[:addresses].nil?
        type.attached_to = AnalysisComponent.build(params[:attached_to], context: "#{context}[:attached_to]") unless params[:attached_to].nil?
        type.availability_zones = ValueStringList.build(params[:availability_zones], context: "#{context}[:availability_zones]") unless params[:availability_zones].nil?
        type.cidrs = ValueStringList.build(params[:cidrs], context: "#{context}[:cidrs]") unless params[:cidrs].nil?
        type.component = AnalysisComponent.build(params[:component], context: "#{context}[:component]") unless params[:component].nil?
        type.customer_gateway = AnalysisComponent.build(params[:customer_gateway], context: "#{context}[:customer_gateway]") unless params[:customer_gateway].nil?
        type.destination = AnalysisComponent.build(params[:destination], context: "#{context}[:destination]") unless params[:destination].nil?
        type.destination_vpc = AnalysisComponent.build(params[:destination_vpc], context: "#{context}[:destination_vpc]") unless params[:destination_vpc].nil?
        type.direction = params[:direction]
        type.explanation_code = params[:explanation_code]
        type.ingress_route_table = AnalysisComponent.build(params[:ingress_route_table], context: "#{context}[:ingress_route_table]") unless params[:ingress_route_table].nil?
        type.internet_gateway = AnalysisComponent.build(params[:internet_gateway], context: "#{context}[:internet_gateway]") unless params[:internet_gateway].nil?
        type.load_balancer_arn = params[:load_balancer_arn]
        type.classic_load_balancer_listener = AnalysisLoadBalancerListener.build(params[:classic_load_balancer_listener], context: "#{context}[:classic_load_balancer_listener]") unless params[:classic_load_balancer_listener].nil?
        type.load_balancer_listener_port = params[:load_balancer_listener_port]
        type.load_balancer_target = AnalysisLoadBalancerTarget.build(params[:load_balancer_target], context: "#{context}[:load_balancer_target]") unless params[:load_balancer_target].nil?
        type.load_balancer_target_group = AnalysisComponent.build(params[:load_balancer_target_group], context: "#{context}[:load_balancer_target_group]") unless params[:load_balancer_target_group].nil?
        type.load_balancer_target_groups = AnalysisComponentList.build(params[:load_balancer_target_groups], context: "#{context}[:load_balancer_target_groups]") unless params[:load_balancer_target_groups].nil?
        type.load_balancer_target_port = params[:load_balancer_target_port]
        type.elastic_load_balancer_listener = AnalysisComponent.build(params[:elastic_load_balancer_listener], context: "#{context}[:elastic_load_balancer_listener]") unless params[:elastic_load_balancer_listener].nil?
        type.missing_component = params[:missing_component]
        type.nat_gateway = AnalysisComponent.build(params[:nat_gateway], context: "#{context}[:nat_gateway]") unless params[:nat_gateway].nil?
        type.network_interface = AnalysisComponent.build(params[:network_interface], context: "#{context}[:network_interface]") unless params[:network_interface].nil?
        type.packet_field = params[:packet_field]
        type.vpc_peering_connection = AnalysisComponent.build(params[:vpc_peering_connection], context: "#{context}[:vpc_peering_connection]") unless params[:vpc_peering_connection].nil?
        type.port = params[:port]
        type.port_ranges = PortRangeList.build(params[:port_ranges], context: "#{context}[:port_ranges]") unless params[:port_ranges].nil?
        type.prefix_list = AnalysisComponent.build(params[:prefix_list], context: "#{context}[:prefix_list]") unless params[:prefix_list].nil?
        type.protocols = StringList.build(params[:protocols], context: "#{context}[:protocols]") unless params[:protocols].nil?
        type.route_table_route = AnalysisRouteTableRoute.build(params[:route_table_route], context: "#{context}[:route_table_route]") unless params[:route_table_route].nil?
        type.route_table = AnalysisComponent.build(params[:route_table], context: "#{context}[:route_table]") unless params[:route_table].nil?
        type.security_group = AnalysisComponent.build(params[:security_group], context: "#{context}[:security_group]") unless params[:security_group].nil?
        type.security_group_rule = AnalysisSecurityGroupRule.build(params[:security_group_rule], context: "#{context}[:security_group_rule]") unless params[:security_group_rule].nil?
        type.security_groups = AnalysisComponentList.build(params[:security_groups], context: "#{context}[:security_groups]") unless params[:security_groups].nil?
        type.source_vpc = AnalysisComponent.build(params[:source_vpc], context: "#{context}[:source_vpc]") unless params[:source_vpc].nil?
        type.state = params[:state]
        type.subnet = AnalysisComponent.build(params[:subnet], context: "#{context}[:subnet]") unless params[:subnet].nil?
        type.subnet_route_table = AnalysisComponent.build(params[:subnet_route_table], context: "#{context}[:subnet_route_table]") unless params[:subnet_route_table].nil?
        type.vpc = AnalysisComponent.build(params[:vpc], context: "#{context}[:vpc]") unless params[:vpc].nil?
        type.vpc_endpoint = AnalysisComponent.build(params[:vpc_endpoint], context: "#{context}[:vpc_endpoint]") unless params[:vpc_endpoint].nil?
        type.vpn_connection = AnalysisComponent.build(params[:vpn_connection], context: "#{context}[:vpn_connection]") unless params[:vpn_connection].nil?
        type.vpn_gateway = AnalysisComponent.build(params[:vpn_gateway], context: "#{context}[:vpn_gateway]") unless params[:vpn_gateway].nil?
        type.transit_gateway = AnalysisComponent.build(params[:transit_gateway], context: "#{context}[:transit_gateway]") unless params[:transit_gateway].nil?
        type.transit_gateway_route_table = AnalysisComponent.build(params[:transit_gateway_route_table], context: "#{context}[:transit_gateway_route_table]") unless params[:transit_gateway_route_table].nil?
        type.transit_gateway_route_table_route = TransitGatewayRouteTableRoute.build(params[:transit_gateway_route_table_route], context: "#{context}[:transit_gateway_route_table_route]") unless params[:transit_gateway_route_table_route].nil?
        type.transit_gateway_attachment = AnalysisComponent.build(params[:transit_gateway_attachment], context: "#{context}[:transit_gateway_attachment]") unless params[:transit_gateway_attachment].nil?
        type.component_account = params[:component_account]
        type.component_region = params[:component_region]
        type.firewall_stateless_rule = FirewallStatelessRule.build(params[:firewall_stateless_rule], context: "#{context}[:firewall_stateless_rule]") unless params[:firewall_stateless_rule].nil?
        type.firewall_stateful_rule = FirewallStatefulRule.build(params[:firewall_stateful_rule], context: "#{context}[:firewall_stateful_rule]") unless params[:firewall_stateful_rule].nil?
        type
      end
    end

    module ExplanationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Explanation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ExportClientVpnClientCertificateRevocationListInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ExportClientVpnClientCertificateRevocationListInput, context: context)
        type = Types::ExportClientVpnClientCertificateRevocationListInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ExportClientVpnClientCertificateRevocationListOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ExportClientVpnClientCertificateRevocationListOutput, context: context)
        type = Types::ExportClientVpnClientCertificateRevocationListOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.certificate_revocation_list = params[:certificate_revocation_list]
        type.status = ClientCertificateRevocationListStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type
      end
    end

    module ExportClientVpnClientConfigurationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ExportClientVpnClientConfigurationInput, context: context)
        type = Types::ExportClientVpnClientConfigurationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ExportClientVpnClientConfigurationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ExportClientVpnClientConfigurationOutput, context: context)
        type = Types::ExportClientVpnClientConfigurationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_configuration = params[:client_configuration]
        type
      end
    end

    module ExportImageInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ExportImageInput, context: context)
        type = Types::ExportImageInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.description = params[:description]
        type.disk_image_format = params[:disk_image_format]
        type.dry_run = params[:dry_run]
        type.image_id = params[:image_id]
        type.s3_export_location = ExportTaskS3LocationRequest.build(params[:s3_export_location], context: "#{context}[:s3_export_location]") unless params[:s3_export_location].nil?
        type.role_name = params[:role_name]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module ExportImageOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ExportImageOutput, context: context)
        type = Types::ExportImageOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.disk_image_format = params[:disk_image_format]
        type.export_image_task_id = params[:export_image_task_id]
        type.image_id = params[:image_id]
        type.role_name = params[:role_name]
        type.progress = params[:progress]
        type.s3_export_location = ExportTaskS3Location.build(params[:s3_export_location], context: "#{context}[:s3_export_location]") unless params[:s3_export_location].nil?
        type.status = params[:status]
        type.status_message = params[:status_message]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module ExportImageTask
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ExportImageTask, context: context)
        type = Types::ExportImageTask.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.export_image_task_id = params[:export_image_task_id]
        type.image_id = params[:image_id]
        type.progress = params[:progress]
        type.s3_export_location = ExportTaskS3Location.build(params[:s3_export_location], context: "#{context}[:s3_export_location]") unless params[:s3_export_location].nil?
        type.status = params[:status]
        type.status_message = params[:status_message]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module ExportImageTaskIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ExportImageTaskList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ExportImageTask.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ExportTask
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ExportTask, context: context)
        type = Types::ExportTask.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.export_task_id = params[:export_task_id]
        type.export_to_s3_task = ExportToS3Task.build(params[:export_to_s3_task], context: "#{context}[:export_to_s3_task]") unless params[:export_to_s3_task].nil?
        type.instance_export_details = InstanceExportDetails.build(params[:instance_export_details], context: "#{context}[:instance_export_details]") unless params[:instance_export_details].nil?
        type.state = params[:state]
        type.status_message = params[:status_message]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module ExportTaskIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ExportTaskList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ExportTask.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ExportTaskS3Location
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ExportTaskS3Location, context: context)
        type = Types::ExportTaskS3Location.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.s3_bucket = params[:s3_bucket]
        type.s3_prefix = params[:s3_prefix]
        type
      end
    end

    module ExportTaskS3LocationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ExportTaskS3LocationRequest, context: context)
        type = Types::ExportTaskS3LocationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.s3_bucket = params[:s3_bucket]
        type.s3_prefix = params[:s3_prefix]
        type
      end
    end

    module ExportToS3Task
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ExportToS3Task, context: context)
        type = Types::ExportToS3Task.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.container_format = params[:container_format]
        type.disk_image_format = params[:disk_image_format]
        type.s3_bucket = params[:s3_bucket]
        type.s3_key = params[:s3_key]
        type
      end
    end

    module ExportToS3TaskSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ExportToS3TaskSpecification, context: context)
        type = Types::ExportToS3TaskSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.container_format = params[:container_format]
        type.disk_image_format = params[:disk_image_format]
        type.s3_bucket = params[:s3_bucket]
        type.s3_prefix = params[:s3_prefix]
        type
      end
    end

    module ExportTransitGatewayRoutesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ExportTransitGatewayRoutesInput, context: context)
        type = Types::ExportTransitGatewayRoutesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.s3_bucket = params[:s3_bucket]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ExportTransitGatewayRoutesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ExportTransitGatewayRoutesOutput, context: context)
        type = Types::ExportTransitGatewayRoutesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.s3_location = params[:s3_location]
        type
      end
    end

    module FailedCapacityReservationFleetCancellationResult
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FailedCapacityReservationFleetCancellationResult, context: context)
        type = Types::FailedCapacityReservationFleetCancellationResult.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_fleet_id = params[:capacity_reservation_fleet_id]
        type.cancel_capacity_reservation_fleet_error = CancelCapacityReservationFleetError.build(params[:cancel_capacity_reservation_fleet_error], context: "#{context}[:cancel_capacity_reservation_fleet_error]") unless params[:cancel_capacity_reservation_fleet_error].nil?
        type
      end
    end

    module FailedCapacityReservationFleetCancellationResultSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << FailedCapacityReservationFleetCancellationResult.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module FailedQueuedPurchaseDeletion
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FailedQueuedPurchaseDeletion, context: context)
        type = Types::FailedQueuedPurchaseDeletion.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.error = DeleteQueuedReservedInstancesError.build(params[:error], context: "#{context}[:error]") unless params[:error].nil?
        type.reserved_instances_id = params[:reserved_instances_id]
        type
      end
    end

    module FailedQueuedPurchaseDeletionSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << FailedQueuedPurchaseDeletion.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module FastLaunchImageIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module FastLaunchLaunchTemplateSpecificationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FastLaunchLaunchTemplateSpecificationRequest, context: context)
        type = Types::FastLaunchLaunchTemplateSpecificationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_id = params[:launch_template_id]
        type.launch_template_name = params[:launch_template_name]
        type.version = params[:version]
        type
      end
    end

    module FastLaunchLaunchTemplateSpecificationResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FastLaunchLaunchTemplateSpecificationResponse, context: context)
        type = Types::FastLaunchLaunchTemplateSpecificationResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_id = params[:launch_template_id]
        type.launch_template_name = params[:launch_template_name]
        type.version = params[:version]
        type
      end
    end

    module FastLaunchSnapshotConfigurationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FastLaunchSnapshotConfigurationRequest, context: context)
        type = Types::FastLaunchSnapshotConfigurationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.target_resource_count = params[:target_resource_count]
        type
      end
    end

    module FastLaunchSnapshotConfigurationResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FastLaunchSnapshotConfigurationResponse, context: context)
        type = Types::FastLaunchSnapshotConfigurationResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.target_resource_count = params[:target_resource_count]
        type
      end
    end

    module FederatedAuthentication
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FederatedAuthentication, context: context)
        type = Types::FederatedAuthentication.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.saml_provider_arn = params[:saml_provider_arn]
        type.self_service_saml_provider_arn = params[:self_service_saml_provider_arn]
        type
      end
    end

    module FederatedAuthenticationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FederatedAuthenticationRequest, context: context)
        type = Types::FederatedAuthenticationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.saml_provider_arn = params[:saml_provider_arn]
        type.self_service_saml_provider_arn = params[:self_service_saml_provider_arn]
        type
      end
    end

    module Filter
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Filter, context: context)
        type = Types::Filter.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.name = params[:name]
        type.values = ValueStringList.build(params[:values], context: "#{context}[:values]") unless params[:values].nil?
        type
      end
    end

    module FilterList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Filter.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module FilterPortRange
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FilterPortRange, context: context)
        type = Types::FilterPortRange.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.from_port = params[:from_port]
        type.to_port = params[:to_port]
        type
      end
    end

    module FirewallStatefulRule
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FirewallStatefulRule, context: context)
        type = Types::FirewallStatefulRule.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.rule_group_arn = params[:rule_group_arn]
        type.sources = ValueStringList.build(params[:sources], context: "#{context}[:sources]") unless params[:sources].nil?
        type.destinations = ValueStringList.build(params[:destinations], context: "#{context}[:destinations]") unless params[:destinations].nil?
        type.source_ports = PortRangeList.build(params[:source_ports], context: "#{context}[:source_ports]") unless params[:source_ports].nil?
        type.destination_ports = PortRangeList.build(params[:destination_ports], context: "#{context}[:destination_ports]") unless params[:destination_ports].nil?
        type.protocol = params[:protocol]
        type.rule_action = params[:rule_action]
        type.direction = params[:direction]
        type
      end
    end

    module FirewallStatelessRule
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FirewallStatelessRule, context: context)
        type = Types::FirewallStatelessRule.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.rule_group_arn = params[:rule_group_arn]
        type.sources = ValueStringList.build(params[:sources], context: "#{context}[:sources]") unless params[:sources].nil?
        type.destinations = ValueStringList.build(params[:destinations], context: "#{context}[:destinations]") unless params[:destinations].nil?
        type.source_ports = PortRangeList.build(params[:source_ports], context: "#{context}[:source_ports]") unless params[:source_ports].nil?
        type.destination_ports = PortRangeList.build(params[:destination_ports], context: "#{context}[:destination_ports]") unless params[:destination_ports].nil?
        type.protocols = ProtocolIntList.build(params[:protocols], context: "#{context}[:protocols]") unless params[:protocols].nil?
        type.rule_action = params[:rule_action]
        type.priority = params[:priority]
        type
      end
    end

    module FleetCapacityReservation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FleetCapacityReservation, context: context)
        type = Types::FleetCapacityReservation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_id = params[:capacity_reservation_id]
        type.availability_zone_id = params[:availability_zone_id]
        type.instance_type = params[:instance_type]
        type.instance_platform = params[:instance_platform]
        type.availability_zone = params[:availability_zone]
        type.total_instance_count = params[:total_instance_count]
        type.fulfilled_capacity = params[:fulfilled_capacity]&.to_f
        type.ebs_optimized = params[:ebs_optimized]
        type.create_date = params[:create_date]
        type.weight = params[:weight]&.to_f
        type.priority = params[:priority]
        type
      end
    end

    module FleetCapacityReservationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << FleetCapacityReservation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module FleetData
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FleetData, context: context)
        type = Types::FleetData.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.activity_status = params[:activity_status]
        type.create_time = params[:create_time]
        type.fleet_id = params[:fleet_id]
        type.fleet_state = params[:fleet_state]
        type.client_token = params[:client_token]
        type.excess_capacity_termination_policy = params[:excess_capacity_termination_policy]
        type.fulfilled_capacity = params[:fulfilled_capacity]&.to_f
        type.fulfilled_on_demand_capacity = params[:fulfilled_on_demand_capacity]&.to_f
        type.launch_template_configs = FleetLaunchTemplateConfigList.build(params[:launch_template_configs], context: "#{context}[:launch_template_configs]") unless params[:launch_template_configs].nil?
        type.target_capacity_specification = TargetCapacitySpecification.build(params[:target_capacity_specification], context: "#{context}[:target_capacity_specification]") unless params[:target_capacity_specification].nil?
        type.terminate_instances_with_expiration = params[:terminate_instances_with_expiration]
        type.type = params[:type]
        type.valid_from = params[:valid_from]
        type.valid_until = params[:valid_until]
        type.replace_unhealthy_instances = params[:replace_unhealthy_instances]
        type.spot_options = SpotOptions.build(params[:spot_options], context: "#{context}[:spot_options]") unless params[:spot_options].nil?
        type.on_demand_options = OnDemandOptions.build(params[:on_demand_options], context: "#{context}[:on_demand_options]") unless params[:on_demand_options].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.errors = DescribeFleetsErrorSet.build(params[:errors], context: "#{context}[:errors]") unless params[:errors].nil?
        type.instances = DescribeFleetsInstancesSet.build(params[:instances], context: "#{context}[:instances]") unless params[:instances].nil?
        type.context = params[:context]
        type
      end
    end

    module FleetIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module FleetLaunchTemplateConfig
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FleetLaunchTemplateConfig, context: context)
        type = Types::FleetLaunchTemplateConfig.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_specification = FleetLaunchTemplateSpecification.build(params[:launch_template_specification], context: "#{context}[:launch_template_specification]") unless params[:launch_template_specification].nil?
        type.overrides = FleetLaunchTemplateOverridesList.build(params[:overrides], context: "#{context}[:overrides]") unless params[:overrides].nil?
        type
      end
    end

    module FleetLaunchTemplateConfigList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << FleetLaunchTemplateConfig.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module FleetLaunchTemplateConfigListRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << FleetLaunchTemplateConfigRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module FleetLaunchTemplateConfigRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FleetLaunchTemplateConfigRequest, context: context)
        type = Types::FleetLaunchTemplateConfigRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_specification = FleetLaunchTemplateSpecificationRequest.build(params[:launch_template_specification], context: "#{context}[:launch_template_specification]") unless params[:launch_template_specification].nil?
        type.overrides = FleetLaunchTemplateOverridesListRequest.build(params[:overrides], context: "#{context}[:overrides]") unless params[:overrides].nil?
        type
      end
    end

    module FleetLaunchTemplateOverrides
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FleetLaunchTemplateOverrides, context: context)
        type = Types::FleetLaunchTemplateOverrides.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_type = params[:instance_type]
        type.max_price = params[:max_price]
        type.subnet_id = params[:subnet_id]
        type.availability_zone = params[:availability_zone]
        type.weighted_capacity = params[:weighted_capacity]&.to_f
        type.priority = params[:priority]&.to_f
        type.placement = PlacementResponse.build(params[:placement], context: "#{context}[:placement]") unless params[:placement].nil?
        type.instance_requirements = InstanceRequirements.build(params[:instance_requirements], context: "#{context}[:instance_requirements]") unless params[:instance_requirements].nil?
        type.image_id = params[:image_id]
        type
      end
    end

    module FleetLaunchTemplateOverridesList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << FleetLaunchTemplateOverrides.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module FleetLaunchTemplateOverridesListRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << FleetLaunchTemplateOverridesRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module FleetLaunchTemplateOverridesRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FleetLaunchTemplateOverridesRequest, context: context)
        type = Types::FleetLaunchTemplateOverridesRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_type = params[:instance_type]
        type.max_price = params[:max_price]
        type.subnet_id = params[:subnet_id]
        type.availability_zone = params[:availability_zone]
        type.weighted_capacity = params[:weighted_capacity]&.to_f
        type.priority = params[:priority]&.to_f
        type.placement = Placement.build(params[:placement], context: "#{context}[:placement]") unless params[:placement].nil?
        type.instance_requirements = InstanceRequirementsRequest.build(params[:instance_requirements], context: "#{context}[:instance_requirements]") unless params[:instance_requirements].nil?
        type.image_id = params[:image_id]
        type
      end
    end

    module FleetLaunchTemplateSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FleetLaunchTemplateSpecification, context: context)
        type = Types::FleetLaunchTemplateSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_id = params[:launch_template_id]
        type.launch_template_name = params[:launch_template_name]
        type.version = params[:version]
        type
      end
    end

    module FleetLaunchTemplateSpecificationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FleetLaunchTemplateSpecificationRequest, context: context)
        type = Types::FleetLaunchTemplateSpecificationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_id = params[:launch_template_id]
        type.launch_template_name = params[:launch_template_name]
        type.version = params[:version]
        type
      end
    end

    module FleetSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << FleetData.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module FleetSpotCapacityRebalance
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FleetSpotCapacityRebalance, context: context)
        type = Types::FleetSpotCapacityRebalance.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.replacement_strategy = params[:replacement_strategy]
        type.termination_delay = params[:termination_delay]
        type
      end
    end

    module FleetSpotCapacityRebalanceRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FleetSpotCapacityRebalanceRequest, context: context)
        type = Types::FleetSpotCapacityRebalanceRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.replacement_strategy = params[:replacement_strategy]
        type.termination_delay = params[:termination_delay]
        type
      end
    end

    module FleetSpotMaintenanceStrategies
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FleetSpotMaintenanceStrategies, context: context)
        type = Types::FleetSpotMaintenanceStrategies.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_rebalance = FleetSpotCapacityRebalance.build(params[:capacity_rebalance], context: "#{context}[:capacity_rebalance]") unless params[:capacity_rebalance].nil?
        type
      end
    end

    module FleetSpotMaintenanceStrategiesRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FleetSpotMaintenanceStrategiesRequest, context: context)
        type = Types::FleetSpotMaintenanceStrategiesRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_rebalance = FleetSpotCapacityRebalanceRequest.build(params[:capacity_rebalance], context: "#{context}[:capacity_rebalance]") unless params[:capacity_rebalance].nil?
        type
      end
    end

    module FlowLog
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FlowLog, context: context)
        type = Types::FlowLog.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.creation_time = params[:creation_time]
        type.deliver_logs_error_message = params[:deliver_logs_error_message]
        type.deliver_logs_permission_arn = params[:deliver_logs_permission_arn]
        type.deliver_cross_account_role = params[:deliver_cross_account_role]
        type.deliver_logs_status = params[:deliver_logs_status]
        type.flow_log_id = params[:flow_log_id]
        type.flow_log_status = params[:flow_log_status]
        type.log_group_name = params[:log_group_name]
        type.resource_id = params[:resource_id]
        type.traffic_type = params[:traffic_type]
        type.log_destination_type = params[:log_destination_type]
        type.log_destination = params[:log_destination]
        type.log_format = params[:log_format]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.max_aggregation_interval = params[:max_aggregation_interval]
        type.destination_options = DestinationOptionsResponse.build(params[:destination_options], context: "#{context}[:destination_options]") unless params[:destination_options].nil?
        type
      end
    end

    module FlowLogIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module FlowLogResourceIds
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module FlowLogSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << FlowLog.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module FpgaDeviceInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FpgaDeviceInfo, context: context)
        type = Types::FpgaDeviceInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.name = params[:name]
        type.manufacturer = params[:manufacturer]
        type.count = params[:count]
        type.memory_info = FpgaDeviceMemoryInfo.build(params[:memory_info], context: "#{context}[:memory_info]") unless params[:memory_info].nil?
        type
      end
    end

    module FpgaDeviceInfoList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << FpgaDeviceInfo.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module FpgaDeviceMemoryInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FpgaDeviceMemoryInfo, context: context)
        type = Types::FpgaDeviceMemoryInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.size_in_mi_b = params[:size_in_mi_b]
        type
      end
    end

    module FpgaImage
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FpgaImage, context: context)
        type = Types::FpgaImage.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.fpga_image_id = params[:fpga_image_id]
        type.fpga_image_global_id = params[:fpga_image_global_id]
        type.name = params[:name]
        type.description = params[:description]
        type.shell_version = params[:shell_version]
        type.pci_id = PciId.build(params[:pci_id], context: "#{context}[:pci_id]") unless params[:pci_id].nil?
        type.state = FpgaImageState.build(params[:state], context: "#{context}[:state]") unless params[:state].nil?
        type.create_time = params[:create_time]
        type.update_time = params[:update_time]
        type.owner_id = params[:owner_id]
        type.owner_alias = params[:owner_alias]
        type.product_codes = ProductCodeList.build(params[:product_codes], context: "#{context}[:product_codes]") unless params[:product_codes].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.public = params[:public]
        type.data_retention_support = params[:data_retention_support]
        type.instance_types = InstanceTypesList.build(params[:instance_types], context: "#{context}[:instance_types]") unless params[:instance_types].nil?
        type
      end
    end

    module FpgaImageAttribute
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FpgaImageAttribute, context: context)
        type = Types::FpgaImageAttribute.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.fpga_image_id = params[:fpga_image_id]
        type.name = params[:name]
        type.description = params[:description]
        type.load_permissions = LoadPermissionList.build(params[:load_permissions], context: "#{context}[:load_permissions]") unless params[:load_permissions].nil?
        type.product_codes = ProductCodeList.build(params[:product_codes], context: "#{context}[:product_codes]") unless params[:product_codes].nil?
        type
      end
    end

    module FpgaImageIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module FpgaImageList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << FpgaImage.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module FpgaImageState
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FpgaImageState, context: context)
        type = Types::FpgaImageState.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module FpgaInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::FpgaInfo, context: context)
        type = Types::FpgaInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.fpgas = FpgaDeviceInfoList.build(params[:fpgas], context: "#{context}[:fpgas]") unless params[:fpgas].nil?
        type.total_fpga_memory_in_mi_b = params[:total_fpga_memory_in_mi_b]
        type
      end
    end

    module GetAssociatedEnclaveCertificateIamRolesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetAssociatedEnclaveCertificateIamRolesInput, context: context)
        type = Types::GetAssociatedEnclaveCertificateIamRolesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.certificate_arn = params[:certificate_arn]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetAssociatedEnclaveCertificateIamRolesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetAssociatedEnclaveCertificateIamRolesOutput, context: context)
        type = Types::GetAssociatedEnclaveCertificateIamRolesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.associated_roles = AssociatedRolesList.build(params[:associated_roles], context: "#{context}[:associated_roles]") unless params[:associated_roles].nil?
        type
      end
    end

    module GetAssociatedIpv6PoolCidrsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetAssociatedIpv6PoolCidrsInput, context: context)
        type = Types::GetAssociatedIpv6PoolCidrsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.pool_id = params[:pool_id]
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetAssociatedIpv6PoolCidrsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetAssociatedIpv6PoolCidrsOutput, context: context)
        type = Types::GetAssociatedIpv6PoolCidrsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_cidr_associations = Ipv6CidrAssociationSet.build(params[:ipv6_cidr_associations], context: "#{context}[:ipv6_cidr_associations]") unless params[:ipv6_cidr_associations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetAwsNetworkPerformanceDataInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetAwsNetworkPerformanceDataInput, context: context)
        type = Types::GetAwsNetworkPerformanceDataInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.data_queries = DataQueries.build(params[:data_queries], context: "#{context}[:data_queries]") unless params[:data_queries].nil?
        type.start_time = params[:start_time]
        type.end_time = params[:end_time]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetAwsNetworkPerformanceDataOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetAwsNetworkPerformanceDataOutput, context: context)
        type = Types::GetAwsNetworkPerformanceDataOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.data_responses = DataResponses.build(params[:data_responses], context: "#{context}[:data_responses]") unless params[:data_responses].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetCapacityReservationUsageInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetCapacityReservationUsageInput, context: context)
        type = Types::GetCapacityReservationUsageInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_id = params[:capacity_reservation_id]
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetCapacityReservationUsageOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetCapacityReservationUsageOutput, context: context)
        type = Types::GetCapacityReservationUsageOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.capacity_reservation_id = params[:capacity_reservation_id]
        type.instance_type = params[:instance_type]
        type.total_instance_count = params[:total_instance_count]
        type.available_instance_count = params[:available_instance_count]
        type.state = params[:state]
        type.instance_usages = InstanceUsageSet.build(params[:instance_usages], context: "#{context}[:instance_usages]") unless params[:instance_usages].nil?
        type
      end
    end

    module GetCoipPoolUsageInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetCoipPoolUsageInput, context: context)
        type = Types::GetCoipPoolUsageInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.pool_id = params[:pool_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetCoipPoolUsageOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetCoipPoolUsageOutput, context: context)
        type = Types::GetCoipPoolUsageOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.coip_pool_id = params[:coip_pool_id]
        type.coip_address_usages = CoipAddressUsageSet.build(params[:coip_address_usages], context: "#{context}[:coip_address_usages]") unless params[:coip_address_usages].nil?
        type.local_gateway_route_table_id = params[:local_gateway_route_table_id]
        type.next_token = params[:next_token]
        type
      end
    end

    module GetConsoleOutputInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetConsoleOutputInput, context: context)
        type = Types::GetConsoleOutputInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.dry_run = params[:dry_run]
        type.latest = params[:latest]
        type
      end
    end

    module GetConsoleOutputOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetConsoleOutputOutput, context: context)
        type = Types::GetConsoleOutputOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.output = params[:output]
        type.timestamp = params[:timestamp]
        type
      end
    end

    module GetConsoleScreenshotInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetConsoleScreenshotInput, context: context)
        type = Types::GetConsoleScreenshotInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.instance_id = params[:instance_id]
        type.wake_up = params[:wake_up]
        type
      end
    end

    module GetConsoleScreenshotOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetConsoleScreenshotOutput, context: context)
        type = Types::GetConsoleScreenshotOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_data = params[:image_data]
        type.instance_id = params[:instance_id]
        type
      end
    end

    module GetDefaultCreditSpecificationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetDefaultCreditSpecificationInput, context: context)
        type = Types::GetDefaultCreditSpecificationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.instance_family = params[:instance_family]
        type
      end
    end

    module GetDefaultCreditSpecificationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetDefaultCreditSpecificationOutput, context: context)
        type = Types::GetDefaultCreditSpecificationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_family_credit_specification = InstanceFamilyCreditSpecification.build(params[:instance_family_credit_specification], context: "#{context}[:instance_family_credit_specification]") unless params[:instance_family_credit_specification].nil?
        type
      end
    end

    module GetEbsDefaultKmsKeyIdInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetEbsDefaultKmsKeyIdInput, context: context)
        type = Types::GetEbsDefaultKmsKeyIdInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetEbsDefaultKmsKeyIdOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetEbsDefaultKmsKeyIdOutput, context: context)
        type = Types::GetEbsDefaultKmsKeyIdOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.kms_key_id = params[:kms_key_id]
        type
      end
    end

    module GetEbsEncryptionByDefaultInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetEbsEncryptionByDefaultInput, context: context)
        type = Types::GetEbsEncryptionByDefaultInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetEbsEncryptionByDefaultOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetEbsEncryptionByDefaultOutput, context: context)
        type = Types::GetEbsEncryptionByDefaultOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ebs_encryption_by_default = params[:ebs_encryption_by_default]
        type.sse_type = params[:sse_type]
        type
      end
    end

    module GetFlowLogsIntegrationTemplateInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetFlowLogsIntegrationTemplateInput, context: context)
        type = Types::GetFlowLogsIntegrationTemplateInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.flow_log_id = params[:flow_log_id]
        type.config_delivery_s3_destination_arn = params[:config_delivery_s3_destination_arn]
        type.integrate_services = IntegrateServices.build(params[:integrate_services], context: "#{context}[:integrate_services]") unless params[:integrate_services].nil?
        type
      end
    end

    module GetFlowLogsIntegrationTemplateOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetFlowLogsIntegrationTemplateOutput, context: context)
        type = Types::GetFlowLogsIntegrationTemplateOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.result = params[:result]
        type
      end
    end

    module GetGroupsForCapacityReservationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetGroupsForCapacityReservationInput, context: context)
        type = Types::GetGroupsForCapacityReservationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_id = params[:capacity_reservation_id]
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetGroupsForCapacityReservationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetGroupsForCapacityReservationOutput, context: context)
        type = Types::GetGroupsForCapacityReservationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.capacity_reservation_groups = CapacityReservationGroupSet.build(params[:capacity_reservation_groups], context: "#{context}[:capacity_reservation_groups]") unless params[:capacity_reservation_groups].nil?
        type
      end
    end

    module GetHostReservationPurchasePreviewInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetHostReservationPurchasePreviewInput, context: context)
        type = Types::GetHostReservationPurchasePreviewInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.host_id_set = RequestHostIdSet.build(params[:host_id_set], context: "#{context}[:host_id_set]") unless params[:host_id_set].nil?
        type.offering_id = params[:offering_id]
        type
      end
    end

    module GetHostReservationPurchasePreviewOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetHostReservationPurchasePreviewOutput, context: context)
        type = Types::GetHostReservationPurchasePreviewOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.currency_code = params[:currency_code]
        type.purchase = PurchaseSet.build(params[:purchase], context: "#{context}[:purchase]") unless params[:purchase].nil?
        type.total_hourly_price = params[:total_hourly_price]
        type.total_upfront_price = params[:total_upfront_price]
        type
      end
    end

    module GetImageBlockPublicAccessStateInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetImageBlockPublicAccessStateInput, context: context)
        type = Types::GetImageBlockPublicAccessStateInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetImageBlockPublicAccessStateOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetImageBlockPublicAccessStateOutput, context: context)
        type = Types::GetImageBlockPublicAccessStateOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_block_public_access_state = params[:image_block_public_access_state]
        type
      end
    end

    module GetInstanceTypesFromInstanceRequirementsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetInstanceTypesFromInstanceRequirementsInput, context: context)
        type = Types::GetInstanceTypesFromInstanceRequirementsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.architecture_types = ArchitectureTypeSet.build(params[:architecture_types], context: "#{context}[:architecture_types]") unless params[:architecture_types].nil?
        type.virtualization_types = VirtualizationTypeSet.build(params[:virtualization_types], context: "#{context}[:virtualization_types]") unless params[:virtualization_types].nil?
        type.instance_requirements = InstanceRequirementsRequest.build(params[:instance_requirements], context: "#{context}[:instance_requirements]") unless params[:instance_requirements].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module GetInstanceTypesFromInstanceRequirementsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetInstanceTypesFromInstanceRequirementsOutput, context: context)
        type = Types::GetInstanceTypesFromInstanceRequirementsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_types = InstanceTypeInfoFromInstanceRequirementsSet.build(params[:instance_types], context: "#{context}[:instance_types]") unless params[:instance_types].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetInstanceUefiDataInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetInstanceUefiDataInput, context: context)
        type = Types::GetInstanceUefiDataInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetInstanceUefiDataOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetInstanceUefiDataOutput, context: context)
        type = Types::GetInstanceUefiDataOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.uefi_data = params[:uefi_data]
        type
      end
    end

    module GetIpamAddressHistoryInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetIpamAddressHistoryInput, context: context)
        type = Types::GetIpamAddressHistoryInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.cidr = params[:cidr]
        type.ipam_scope_id = params[:ipam_scope_id]
        type.vpc_id = params[:vpc_id]
        type.start_time = params[:start_time]
        type.end_time = params[:end_time]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module GetIpamAddressHistoryOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetIpamAddressHistoryOutput, context: context)
        type = Types::GetIpamAddressHistoryOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.history_records = IpamAddressHistoryRecordSet.build(params[:history_records], context: "#{context}[:history_records]") unless params[:history_records].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetIpamDiscoveredAccountsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetIpamDiscoveredAccountsInput, context: context)
        type = Types::GetIpamDiscoveredAccountsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_resource_discovery_id = params[:ipam_resource_discovery_id]
        type.discovery_region = params[:discovery_region]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module GetIpamDiscoveredAccountsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetIpamDiscoveredAccountsOutput, context: context)
        type = Types::GetIpamDiscoveredAccountsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_discovered_accounts = IpamDiscoveredAccountSet.build(params[:ipam_discovered_accounts], context: "#{context}[:ipam_discovered_accounts]") unless params[:ipam_discovered_accounts].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetIpamDiscoveredPublicAddressesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetIpamDiscoveredPublicAddressesInput, context: context)
        type = Types::GetIpamDiscoveredPublicAddressesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_resource_discovery_id = params[:ipam_resource_discovery_id]
        type.address_region = params[:address_region]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module GetIpamDiscoveredPublicAddressesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetIpamDiscoveredPublicAddressesOutput, context: context)
        type = Types::GetIpamDiscoveredPublicAddressesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_discovered_public_addresses = IpamDiscoveredPublicAddressSet.build(params[:ipam_discovered_public_addresses], context: "#{context}[:ipam_discovered_public_addresses]") unless params[:ipam_discovered_public_addresses].nil?
        type.oldest_sample_time = params[:oldest_sample_time]
        type.next_token = params[:next_token]
        type
      end
    end

    module GetIpamDiscoveredResourceCidrsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetIpamDiscoveredResourceCidrsInput, context: context)
        type = Types::GetIpamDiscoveredResourceCidrsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_resource_discovery_id = params[:ipam_resource_discovery_id]
        type.resource_region = params[:resource_region]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module GetIpamDiscoveredResourceCidrsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetIpamDiscoveredResourceCidrsOutput, context: context)
        type = Types::GetIpamDiscoveredResourceCidrsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_discovered_resource_cidrs = IpamDiscoveredResourceCidrSet.build(params[:ipam_discovered_resource_cidrs], context: "#{context}[:ipam_discovered_resource_cidrs]") unless params[:ipam_discovered_resource_cidrs].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetIpamPoolAllocationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetIpamPoolAllocationsInput, context: context)
        type = Types::GetIpamPoolAllocationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_pool_id = params[:ipam_pool_id]
        type.ipam_pool_allocation_id = params[:ipam_pool_allocation_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module GetIpamPoolAllocationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetIpamPoolAllocationsOutput, context: context)
        type = Types::GetIpamPoolAllocationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_pool_allocations = IpamPoolAllocationSet.build(params[:ipam_pool_allocations], context: "#{context}[:ipam_pool_allocations]") unless params[:ipam_pool_allocations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetIpamPoolCidrsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetIpamPoolCidrsInput, context: context)
        type = Types::GetIpamPoolCidrsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_pool_id = params[:ipam_pool_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module GetIpamPoolCidrsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetIpamPoolCidrsOutput, context: context)
        type = Types::GetIpamPoolCidrsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_pool_cidrs = IpamPoolCidrSet.build(params[:ipam_pool_cidrs], context: "#{context}[:ipam_pool_cidrs]") unless params[:ipam_pool_cidrs].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetIpamResourceCidrsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetIpamResourceCidrsInput, context: context)
        type = Types::GetIpamResourceCidrsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.ipam_scope_id = params[:ipam_scope_id]
        type.ipam_pool_id = params[:ipam_pool_id]
        type.resource_id = params[:resource_id]
        type.resource_type = params[:resource_type]
        type.resource_tag = RequestIpamResourceTag.build(params[:resource_tag], context: "#{context}[:resource_tag]") unless params[:resource_tag].nil?
        type.resource_owner = params[:resource_owner]
        type
      end
    end

    module GetIpamResourceCidrsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetIpamResourceCidrsOutput, context: context)
        type = Types::GetIpamResourceCidrsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.ipam_resource_cidrs = IpamResourceCidrSet.build(params[:ipam_resource_cidrs], context: "#{context}[:ipam_resource_cidrs]") unless params[:ipam_resource_cidrs].nil?
        type
      end
    end

    module GetLaunchTemplateDataInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetLaunchTemplateDataInput, context: context)
        type = Types::GetLaunchTemplateDataInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.instance_id = params[:instance_id]
        type
      end
    end

    module GetLaunchTemplateDataOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetLaunchTemplateDataOutput, context: context)
        type = Types::GetLaunchTemplateDataOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_data = ResponseLaunchTemplateData.build(params[:launch_template_data], context: "#{context}[:launch_template_data]") unless params[:launch_template_data].nil?
        type
      end
    end

    module GetManagedPrefixListAssociationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetManagedPrefixListAssociationsInput, context: context)
        type = Types::GetManagedPrefixListAssociationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.prefix_list_id = params[:prefix_list_id]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module GetManagedPrefixListAssociationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetManagedPrefixListAssociationsOutput, context: context)
        type = Types::GetManagedPrefixListAssociationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.prefix_list_associations = PrefixListAssociationSet.build(params[:prefix_list_associations], context: "#{context}[:prefix_list_associations]") unless params[:prefix_list_associations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetManagedPrefixListEntriesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetManagedPrefixListEntriesInput, context: context)
        type = Types::GetManagedPrefixListEntriesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.prefix_list_id = params[:prefix_list_id]
        type.target_version = params[:target_version]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module GetManagedPrefixListEntriesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetManagedPrefixListEntriesOutput, context: context)
        type = Types::GetManagedPrefixListEntriesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.entries = PrefixListEntrySet.build(params[:entries], context: "#{context}[:entries]") unless params[:entries].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetNetworkInsightsAccessScopeAnalysisFindingsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetNetworkInsightsAccessScopeAnalysisFindingsInput, context: context)
        type = Types::GetNetworkInsightsAccessScopeAnalysisFindingsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_analysis_id = params[:network_insights_access_scope_analysis_id]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetNetworkInsightsAccessScopeAnalysisFindingsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetNetworkInsightsAccessScopeAnalysisFindingsOutput, context: context)
        type = Types::GetNetworkInsightsAccessScopeAnalysisFindingsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_analysis_id = params[:network_insights_access_scope_analysis_id]
        type.analysis_status = params[:analysis_status]
        type.analysis_findings = AccessScopeAnalysisFindingList.build(params[:analysis_findings], context: "#{context}[:analysis_findings]") unless params[:analysis_findings].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetNetworkInsightsAccessScopeContentInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetNetworkInsightsAccessScopeContentInput, context: context)
        type = Types::GetNetworkInsightsAccessScopeContentInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_id = params[:network_insights_access_scope_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetNetworkInsightsAccessScopeContentOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetNetworkInsightsAccessScopeContentOutput, context: context)
        type = Types::GetNetworkInsightsAccessScopeContentOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_content = NetworkInsightsAccessScopeContent.build(params[:network_insights_access_scope_content], context: "#{context}[:network_insights_access_scope_content]") unless params[:network_insights_access_scope_content].nil?
        type
      end
    end

    module GetPasswordDataInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetPasswordDataInput, context: context)
        type = Types::GetPasswordDataInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetPasswordDataOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetPasswordDataOutput, context: context)
        type = Types::GetPasswordDataOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.password_data = params[:password_data]
        type.timestamp = params[:timestamp]
        type
      end
    end

    module GetReservedInstancesExchangeQuoteInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetReservedInstancesExchangeQuoteInput, context: context)
        type = Types::GetReservedInstancesExchangeQuoteInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.reserved_instance_ids = ReservedInstanceIdSet.build(params[:reserved_instance_ids], context: "#{context}[:reserved_instance_ids]") unless params[:reserved_instance_ids].nil?
        type.target_configurations = TargetConfigurationRequestSet.build(params[:target_configurations], context: "#{context}[:target_configurations]") unless params[:target_configurations].nil?
        type
      end
    end

    module GetReservedInstancesExchangeQuoteOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetReservedInstancesExchangeQuoteOutput, context: context)
        type = Types::GetReservedInstancesExchangeQuoteOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.currency_code = params[:currency_code]
        type.is_valid_exchange = params[:is_valid_exchange]
        type.output_reserved_instances_will_expire_at = params[:output_reserved_instances_will_expire_at]
        type.payment_due = params[:payment_due]
        type.reserved_instance_value_rollup = ReservationValue.build(params[:reserved_instance_value_rollup], context: "#{context}[:reserved_instance_value_rollup]") unless params[:reserved_instance_value_rollup].nil?
        type.reserved_instance_value_set = ReservedInstanceReservationValueSet.build(params[:reserved_instance_value_set], context: "#{context}[:reserved_instance_value_set]") unless params[:reserved_instance_value_set].nil?
        type.target_configuration_value_rollup = ReservationValue.build(params[:target_configuration_value_rollup], context: "#{context}[:target_configuration_value_rollup]") unless params[:target_configuration_value_rollup].nil?
        type.target_configuration_value_set = TargetReservationValueSet.build(params[:target_configuration_value_set], context: "#{context}[:target_configuration_value_set]") unless params[:target_configuration_value_set].nil?
        type.validation_failure_reason = params[:validation_failure_reason]
        type
      end
    end

    module GetSecurityGroupsForVpcInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetSecurityGroupsForVpcInput, context: context)
        type = Types::GetSecurityGroupsForVpcInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_id = params[:vpc_id]
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetSecurityGroupsForVpcOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetSecurityGroupsForVpcOutput, context: context)
        type = Types::GetSecurityGroupsForVpcOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.next_token = params[:next_token]
        type.security_group_for_vpcs = SecurityGroupForVpcList.build(params[:security_group_for_vpcs], context: "#{context}[:security_group_for_vpcs]") unless params[:security_group_for_vpcs].nil?
        type
      end
    end

    module GetSerialConsoleAccessStatusInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetSerialConsoleAccessStatusInput, context: context)
        type = Types::GetSerialConsoleAccessStatusInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetSerialConsoleAccessStatusOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetSerialConsoleAccessStatusOutput, context: context)
        type = Types::GetSerialConsoleAccessStatusOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.serial_console_access_enabled = params[:serial_console_access_enabled]
        type
      end
    end

    module GetSnapshotBlockPublicAccessStateInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetSnapshotBlockPublicAccessStateInput, context: context)
        type = Types::GetSnapshotBlockPublicAccessStateInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetSnapshotBlockPublicAccessStateOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetSnapshotBlockPublicAccessStateOutput, context: context)
        type = Types::GetSnapshotBlockPublicAccessStateOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.state = params[:state]
        type
      end
    end

    module GetSpotPlacementScoresInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetSpotPlacementScoresInput, context: context)
        type = Types::GetSpotPlacementScoresInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_types = InstanceTypes.build(params[:instance_types], context: "#{context}[:instance_types]") unless params[:instance_types].nil?
        type.target_capacity = params[:target_capacity]
        type.target_capacity_unit_type = params[:target_capacity_unit_type]
        type.single_availability_zone = params[:single_availability_zone]
        type.region_names = RegionNames.build(params[:region_names], context: "#{context}[:region_names]") unless params[:region_names].nil?
        type.instance_requirements_with_metadata = InstanceRequirementsWithMetadataRequest.build(params[:instance_requirements_with_metadata], context: "#{context}[:instance_requirements_with_metadata]") unless params[:instance_requirements_with_metadata].nil?
        type.dry_run = params[:dry_run]
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type
      end
    end

    module GetSpotPlacementScoresOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetSpotPlacementScoresOutput, context: context)
        type = Types::GetSpotPlacementScoresOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.spot_placement_scores = SpotPlacementScores.build(params[:spot_placement_scores], context: "#{context}[:spot_placement_scores]") unless params[:spot_placement_scores].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetSubnetCidrReservationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetSubnetCidrReservationsInput, context: context)
        type = Types::GetSubnetCidrReservationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.subnet_id = params[:subnet_id]
        type.dry_run = params[:dry_run]
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type
      end
    end

    module GetSubnetCidrReservationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetSubnetCidrReservationsOutput, context: context)
        type = Types::GetSubnetCidrReservationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.subnet_ipv4_cidr_reservations = SubnetCidrReservationList.build(params[:subnet_ipv4_cidr_reservations], context: "#{context}[:subnet_ipv4_cidr_reservations]") unless params[:subnet_ipv4_cidr_reservations].nil?
        type.subnet_ipv6_cidr_reservations = SubnetCidrReservationList.build(params[:subnet_ipv6_cidr_reservations], context: "#{context}[:subnet_ipv6_cidr_reservations]") unless params[:subnet_ipv6_cidr_reservations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetTransitGatewayAttachmentPropagationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetTransitGatewayAttachmentPropagationsInput, context: context)
        type = Types::GetTransitGatewayAttachmentPropagationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetTransitGatewayAttachmentPropagationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetTransitGatewayAttachmentPropagationsOutput, context: context)
        type = Types::GetTransitGatewayAttachmentPropagationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_propagations = TransitGatewayAttachmentPropagationList.build(params[:transit_gateway_attachment_propagations], context: "#{context}[:transit_gateway_attachment_propagations]") unless params[:transit_gateway_attachment_propagations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetTransitGatewayMulticastDomainAssociationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetTransitGatewayMulticastDomainAssociationsInput, context: context)
        type = Types::GetTransitGatewayMulticastDomainAssociationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetTransitGatewayMulticastDomainAssociationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetTransitGatewayMulticastDomainAssociationsOutput, context: context)
        type = Types::GetTransitGatewayMulticastDomainAssociationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.multicast_domain_associations = TransitGatewayMulticastDomainAssociationList.build(params[:multicast_domain_associations], context: "#{context}[:multicast_domain_associations]") unless params[:multicast_domain_associations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetTransitGatewayPolicyTableAssociationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetTransitGatewayPolicyTableAssociationsInput, context: context)
        type = Types::GetTransitGatewayPolicyTableAssociationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_policy_table_id = params[:transit_gateway_policy_table_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetTransitGatewayPolicyTableAssociationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetTransitGatewayPolicyTableAssociationsOutput, context: context)
        type = Types::GetTransitGatewayPolicyTableAssociationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.associations = TransitGatewayPolicyTableAssociationList.build(params[:associations], context: "#{context}[:associations]") unless params[:associations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetTransitGatewayPolicyTableEntriesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetTransitGatewayPolicyTableEntriesInput, context: context)
        type = Types::GetTransitGatewayPolicyTableEntriesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_policy_table_id = params[:transit_gateway_policy_table_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetTransitGatewayPolicyTableEntriesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetTransitGatewayPolicyTableEntriesOutput, context: context)
        type = Types::GetTransitGatewayPolicyTableEntriesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_policy_table_entries = TransitGatewayPolicyTableEntryList.build(params[:transit_gateway_policy_table_entries], context: "#{context}[:transit_gateway_policy_table_entries]") unless params[:transit_gateway_policy_table_entries].nil?
        type
      end
    end

    module GetTransitGatewayPrefixListReferencesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetTransitGatewayPrefixListReferencesInput, context: context)
        type = Types::GetTransitGatewayPrefixListReferencesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetTransitGatewayPrefixListReferencesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetTransitGatewayPrefixListReferencesOutput, context: context)
        type = Types::GetTransitGatewayPrefixListReferencesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_prefix_list_references = TransitGatewayPrefixListReferenceSet.build(params[:transit_gateway_prefix_list_references], context: "#{context}[:transit_gateway_prefix_list_references]") unless params[:transit_gateway_prefix_list_references].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetTransitGatewayRouteTableAssociationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetTransitGatewayRouteTableAssociationsInput, context: context)
        type = Types::GetTransitGatewayRouteTableAssociationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetTransitGatewayRouteTableAssociationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetTransitGatewayRouteTableAssociationsOutput, context: context)
        type = Types::GetTransitGatewayRouteTableAssociationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.associations = TransitGatewayRouteTableAssociationList.build(params[:associations], context: "#{context}[:associations]") unless params[:associations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetTransitGatewayRouteTablePropagationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetTransitGatewayRouteTablePropagationsInput, context: context)
        type = Types::GetTransitGatewayRouteTablePropagationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetTransitGatewayRouteTablePropagationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetTransitGatewayRouteTablePropagationsOutput, context: context)
        type = Types::GetTransitGatewayRouteTablePropagationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_propagations = TransitGatewayRouteTablePropagationList.build(params[:transit_gateway_route_table_propagations], context: "#{context}[:transit_gateway_route_table_propagations]") unless params[:transit_gateway_route_table_propagations].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetVerifiedAccessEndpointPolicyInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetVerifiedAccessEndpointPolicyInput, context: context)
        type = Types::GetVerifiedAccessEndpointPolicyInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_endpoint_id = params[:verified_access_endpoint_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetVerifiedAccessEndpointPolicyOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetVerifiedAccessEndpointPolicyOutput, context: context)
        type = Types::GetVerifiedAccessEndpointPolicyOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.policy_enabled = params[:policy_enabled]
        type.policy_document = params[:policy_document]
        type
      end
    end

    module GetVerifiedAccessGroupPolicyInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetVerifiedAccessGroupPolicyInput, context: context)
        type = Types::GetVerifiedAccessGroupPolicyInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_group_id = params[:verified_access_group_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetVerifiedAccessGroupPolicyOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetVerifiedAccessGroupPolicyOutput, context: context)
        type = Types::GetVerifiedAccessGroupPolicyOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.policy_enabled = params[:policy_enabled]
        type.policy_document = params[:policy_document]
        type
      end
    end

    module GetVpnConnectionDeviceSampleConfigurationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetVpnConnectionDeviceSampleConfigurationInput, context: context)
        type = Types::GetVpnConnectionDeviceSampleConfigurationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection_id = params[:vpn_connection_id]
        type.vpn_connection_device_type_id = params[:vpn_connection_device_type_id]
        type.internet_key_exchange_version = params[:internet_key_exchange_version]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetVpnConnectionDeviceSampleConfigurationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetVpnConnectionDeviceSampleConfigurationOutput, context: context)
        type = Types::GetVpnConnectionDeviceSampleConfigurationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection_device_sample_configuration = params[:vpn_connection_device_sample_configuration]
        type
      end
    end

    module GetVpnConnectionDeviceTypesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetVpnConnectionDeviceTypesInput, context: context)
        type = Types::GetVpnConnectionDeviceTypesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetVpnConnectionDeviceTypesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetVpnConnectionDeviceTypesOutput, context: context)
        type = Types::GetVpnConnectionDeviceTypesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection_device_types = VpnConnectionDeviceTypeList.build(params[:vpn_connection_device_types], context: "#{context}[:vpn_connection_device_types]") unless params[:vpn_connection_device_types].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module GetVpnTunnelReplacementStatusInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetVpnTunnelReplacementStatusInput, context: context)
        type = Types::GetVpnTunnelReplacementStatusInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection_id = params[:vpn_connection_id]
        type.vpn_tunnel_outside_ip_address = params[:vpn_tunnel_outside_ip_address]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module GetVpnTunnelReplacementStatusOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GetVpnTunnelReplacementStatusOutput, context: context)
        type = Types::GetVpnTunnelReplacementStatusOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection_id = params[:vpn_connection_id]
        type.transit_gateway_id = params[:transit_gateway_id]
        type.customer_gateway_id = params[:customer_gateway_id]
        type.vpn_gateway_id = params[:vpn_gateway_id]
        type.vpn_tunnel_outside_ip_address = params[:vpn_tunnel_outside_ip_address]
        type.maintenance_details = MaintenanceDetails.build(params[:maintenance_details], context: "#{context}[:maintenance_details]") unless params[:maintenance_details].nil?
        type
      end
    end

    module GpuDeviceInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GpuDeviceInfo, context: context)
        type = Types::GpuDeviceInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.name = params[:name]
        type.manufacturer = params[:manufacturer]
        type.count = params[:count]
        type.memory_info = GpuDeviceMemoryInfo.build(params[:memory_info], context: "#{context}[:memory_info]") unless params[:memory_info].nil?
        type
      end
    end

    module GpuDeviceInfoList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << GpuDeviceInfo.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module GpuDeviceMemoryInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GpuDeviceMemoryInfo, context: context)
        type = Types::GpuDeviceMemoryInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.size_in_mi_b = params[:size_in_mi_b]
        type
      end
    end

    module GpuInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GpuInfo, context: context)
        type = Types::GpuInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.gpus = GpuDeviceInfoList.build(params[:gpus], context: "#{context}[:gpus]") unless params[:gpus].nil?
        type.total_gpu_memory_in_mi_b = params[:total_gpu_memory_in_mi_b]
        type
      end
    end

    module GroupIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module GroupIdentifier
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::GroupIdentifier, context: context)
        type = Types::GroupIdentifier.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group_name = params[:group_name]
        type.group_id = params[:group_id]
        type
      end
    end

    module GroupIdentifierList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << GroupIdentifier.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module GroupIdentifierSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SecurityGroupIdentifier.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module GroupIds
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module GroupNameStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module HibernationOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::HibernationOptions, context: context)
        type = Types::HibernationOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.configured = params[:configured]
        type
      end
    end

    module HibernationOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::HibernationOptionsRequest, context: context)
        type = Types::HibernationOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.configured = params[:configured]
        type
      end
    end

    module HistoryRecord
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::HistoryRecord, context: context)
        type = Types::HistoryRecord.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.event_information = EventInformation.build(params[:event_information], context: "#{context}[:event_information]") unless params[:event_information].nil?
        type.event_type = params[:event_type]
        type.timestamp = params[:timestamp]
        type
      end
    end

    module HistoryRecordEntry
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::HistoryRecordEntry, context: context)
        type = Types::HistoryRecordEntry.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.event_information = EventInformation.build(params[:event_information], context: "#{context}[:event_information]") unless params[:event_information].nil?
        type.event_type = params[:event_type]
        type.timestamp = params[:timestamp]
        type
      end
    end

    module HistoryRecordSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << HistoryRecordEntry.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module HistoryRecords
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << HistoryRecord.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Host
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Host, context: context)
        type = Types::Host.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.auto_placement = params[:auto_placement]
        type.availability_zone = params[:availability_zone]
        type.available_capacity = AvailableCapacity.build(params[:available_capacity], context: "#{context}[:available_capacity]") unless params[:available_capacity].nil?
        type.client_token = params[:client_token]
        type.host_id = params[:host_id]
        type.host_properties = HostProperties.build(params[:host_properties], context: "#{context}[:host_properties]") unless params[:host_properties].nil?
        type.host_reservation_id = params[:host_reservation_id]
        type.instances = HostInstanceList.build(params[:instances], context: "#{context}[:instances]") unless params[:instances].nil?
        type.state = params[:state]
        type.allocation_time = params[:allocation_time]
        type.release_time = params[:release_time]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.host_recovery = params[:host_recovery]
        type.allows_multiple_instance_types = params[:allows_multiple_instance_types]
        type.owner_id = params[:owner_id]
        type.availability_zone_id = params[:availability_zone_id]
        type.member_of_service_linked_resource_group = params[:member_of_service_linked_resource_group]
        type.outpost_arn = params[:outpost_arn]
        type.host_maintenance = params[:host_maintenance]
        type.asset_id = params[:asset_id]
        type
      end
    end

    module HostInstance
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::HostInstance, context: context)
        type = Types::HostInstance.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.instance_type = params[:instance_type]
        type.owner_id = params[:owner_id]
        type
      end
    end

    module HostInstanceList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << HostInstance.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module HostList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Host.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module HostOffering
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::HostOffering, context: context)
        type = Types::HostOffering.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.currency_code = params[:currency_code]
        type.duration = params[:duration]
        type.hourly_price = params[:hourly_price]
        type.instance_family = params[:instance_family]
        type.offering_id = params[:offering_id]
        type.payment_option = params[:payment_option]
        type.upfront_price = params[:upfront_price]
        type
      end
    end

    module HostOfferingSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << HostOffering.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module HostProperties
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::HostProperties, context: context)
        type = Types::HostProperties.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cores = params[:cores]
        type.instance_type = params[:instance_type]
        type.instance_family = params[:instance_family]
        type.sockets = params[:sockets]
        type.total_v_cpus = params[:total_v_cpus]
        type
      end
    end

    module HostReservation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::HostReservation, context: context)
        type = Types::HostReservation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.count = params[:count]
        type.currency_code = params[:currency_code]
        type.duration = params[:duration]
        type.end = params[:end]
        type.host_id_set = ResponseHostIdSet.build(params[:host_id_set], context: "#{context}[:host_id_set]") unless params[:host_id_set].nil?
        type.host_reservation_id = params[:host_reservation_id]
        type.hourly_price = params[:hourly_price]
        type.instance_family = params[:instance_family]
        type.offering_id = params[:offering_id]
        type.payment_option = params[:payment_option]
        type.start = params[:start]
        type.state = params[:state]
        type.upfront_price = params[:upfront_price]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module HostReservationIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module HostReservationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << HostReservation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IKEVersionsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IKEVersionsListValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IKEVersionsListValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IKEVersionsListValue, context: context)
        type = Types::IKEVersionsListValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module IKEVersionsRequestList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IKEVersionsRequestListValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IKEVersionsRequestListValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IKEVersionsRequestListValue, context: context)
        type = Types::IKEVersionsRequestListValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module IamInstanceProfile
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IamInstanceProfile, context: context)
        type = Types::IamInstanceProfile.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.arn = params[:arn]
        type.id = params[:id]
        type
      end
    end

    module IamInstanceProfileAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IamInstanceProfileAssociation, context: context)
        type = Types::IamInstanceProfileAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type.instance_id = params[:instance_id]
        type.iam_instance_profile = IamInstanceProfile.build(params[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless params[:iam_instance_profile].nil?
        type.state = params[:state]
        type.timestamp = params[:timestamp]
        type
      end
    end

    module IamInstanceProfileAssociationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IamInstanceProfileAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IamInstanceProfileSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IamInstanceProfileSpecification, context: context)
        type = Types::IamInstanceProfileSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.arn = params[:arn]
        type.name = params[:name]
        type
      end
    end

    module IcmpTypeCode
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IcmpTypeCode, context: context)
        type = Types::IcmpTypeCode.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.type = params[:type]
        type
      end
    end

    module IdFormat
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IdFormat, context: context)
        type = Types::IdFormat.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.deadline = params[:deadline]
        type.resource = params[:resource]
        type.use_long_ids = params[:use_long_ids]
        type
      end
    end

    module IdFormatList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IdFormat.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Image
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Image, context: context)
        type = Types::Image.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.architecture = params[:architecture]
        type.creation_date = params[:creation_date]
        type.image_id = params[:image_id]
        type.image_location = params[:image_location]
        type.image_type = params[:image_type]
        type.public = params[:public]
        type.kernel_id = params[:kernel_id]
        type.owner_id = params[:owner_id]
        type.platform = params[:platform]
        type.platform_details = params[:platform_details]
        type.usage_operation = params[:usage_operation]
        type.product_codes = ProductCodeList.build(params[:product_codes], context: "#{context}[:product_codes]") unless params[:product_codes].nil?
        type.ramdisk_id = params[:ramdisk_id]
        type.state = params[:state]
        type.block_device_mappings = BlockDeviceMappingList.build(params[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless params[:block_device_mappings].nil?
        type.description = params[:description]
        type.ena_support = params[:ena_support]
        type.hypervisor = params[:hypervisor]
        type.image_owner_alias = params[:image_owner_alias]
        type.name = params[:name]
        type.root_device_name = params[:root_device_name]
        type.root_device_type = params[:root_device_type]
        type.sriov_net_support = params[:sriov_net_support]
        type.state_reason = StateReason.build(params[:state_reason], context: "#{context}[:state_reason]") unless params[:state_reason].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.virtualization_type = params[:virtualization_type]
        type.boot_mode = params[:boot_mode]
        type.tpm_support = params[:tpm_support]
        type.deprecation_time = params[:deprecation_time]
        type.imds_support = params[:imds_support]
        type.source_instance_id = params[:source_instance_id]
        type
      end
    end

    module ImageDiskContainer
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImageDiskContainer, context: context)
        type = Types::ImageDiskContainer.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.device_name = params[:device_name]
        type.format = params[:format]
        type.snapshot_id = params[:snapshot_id]
        type.url = params[:url]
        type.user_bucket = UserBucket.build(params[:user_bucket], context: "#{context}[:user_bucket]") unless params[:user_bucket].nil?
        type
      end
    end

    module ImageDiskContainerList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ImageDiskContainer.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ImageIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ImageIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ImageList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Image.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ImageRecycleBinInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImageRecycleBinInfo, context: context)
        type = Types::ImageRecycleBinInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type.name = params[:name]
        type.description = params[:description]
        type.recycle_bin_enter_time = params[:recycle_bin_enter_time]
        type.recycle_bin_exit_time = params[:recycle_bin_exit_time]
        type
      end
    end

    module ImageRecycleBinInfoList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ImageRecycleBinInfo.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ImportClientVpnClientCertificateRevocationListInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportClientVpnClientCertificateRevocationListInput, context: context)
        type = Types::ImportClientVpnClientCertificateRevocationListInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.certificate_revocation_list = params[:certificate_revocation_list]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ImportClientVpnClientCertificateRevocationListOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportClientVpnClientCertificateRevocationListOutput, context: context)
        type = Types::ImportClientVpnClientCertificateRevocationListOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ImportImageInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportImageInput, context: context)
        type = Types::ImportImageInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.architecture = params[:architecture]
        type.client_data = ClientData.build(params[:client_data], context: "#{context}[:client_data]") unless params[:client_data].nil?
        type.client_token = params[:client_token]
        type.description = params[:description]
        type.disk_containers = ImageDiskContainerList.build(params[:disk_containers], context: "#{context}[:disk_containers]") unless params[:disk_containers].nil?
        type.dry_run = params[:dry_run]
        type.encrypted = params[:encrypted]
        type.hypervisor = params[:hypervisor]
        type.kms_key_id = params[:kms_key_id]
        type.license_type = params[:license_type]
        type.platform = params[:platform]
        type.role_name = params[:role_name]
        type.license_specifications = ImportImageLicenseSpecificationListRequest.build(params[:license_specifications], context: "#{context}[:license_specifications]") unless params[:license_specifications].nil?
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.usage_operation = params[:usage_operation]
        type.boot_mode = params[:boot_mode]
        type
      end
    end

    module ImportImageLicenseConfigurationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportImageLicenseConfigurationRequest, context: context)
        type = Types::ImportImageLicenseConfigurationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.license_configuration_arn = params[:license_configuration_arn]
        type
      end
    end

    module ImportImageLicenseConfigurationResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportImageLicenseConfigurationResponse, context: context)
        type = Types::ImportImageLicenseConfigurationResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.license_configuration_arn = params[:license_configuration_arn]
        type
      end
    end

    module ImportImageLicenseSpecificationListRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ImportImageLicenseConfigurationRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ImportImageLicenseSpecificationListResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ImportImageLicenseConfigurationResponse.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ImportImageOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportImageOutput, context: context)
        type = Types::ImportImageOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.architecture = params[:architecture]
        type.description = params[:description]
        type.encrypted = params[:encrypted]
        type.hypervisor = params[:hypervisor]
        type.image_id = params[:image_id]
        type.import_task_id = params[:import_task_id]
        type.kms_key_id = params[:kms_key_id]
        type.license_type = params[:license_type]
        type.platform = params[:platform]
        type.progress = params[:progress]
        type.snapshot_details = SnapshotDetailList.build(params[:snapshot_details], context: "#{context}[:snapshot_details]") unless params[:snapshot_details].nil?
        type.status = params[:status]
        type.status_message = params[:status_message]
        type.license_specifications = ImportImageLicenseSpecificationListResponse.build(params[:license_specifications], context: "#{context}[:license_specifications]") unless params[:license_specifications].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.usage_operation = params[:usage_operation]
        type
      end
    end

    module ImportImageTask
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportImageTask, context: context)
        type = Types::ImportImageTask.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.architecture = params[:architecture]
        type.description = params[:description]
        type.encrypted = params[:encrypted]
        type.hypervisor = params[:hypervisor]
        type.image_id = params[:image_id]
        type.import_task_id = params[:import_task_id]
        type.kms_key_id = params[:kms_key_id]
        type.license_type = params[:license_type]
        type.platform = params[:platform]
        type.progress = params[:progress]
        type.snapshot_details = SnapshotDetailList.build(params[:snapshot_details], context: "#{context}[:snapshot_details]") unless params[:snapshot_details].nil?
        type.status = params[:status]
        type.status_message = params[:status_message]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.license_specifications = ImportImageLicenseSpecificationListResponse.build(params[:license_specifications], context: "#{context}[:license_specifications]") unless params[:license_specifications].nil?
        type.usage_operation = params[:usage_operation]
        type.boot_mode = params[:boot_mode]
        type
      end
    end

    module ImportImageTaskList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ImportImageTask.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ImportInstanceInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportInstanceInput, context: context)
        type = Types::ImportInstanceInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.disk_images = DiskImageList.build(params[:disk_images], context: "#{context}[:disk_images]") unless params[:disk_images].nil?
        type.dry_run = params[:dry_run]
        type.launch_specification = ImportInstanceLaunchSpecification.build(params[:launch_specification], context: "#{context}[:launch_specification]") unless params[:launch_specification].nil?
        type.platform = params[:platform]
        type
      end
    end

    module ImportInstanceLaunchSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportInstanceLaunchSpecification, context: context)
        type = Types::ImportInstanceLaunchSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.additional_info = params[:additional_info]
        type.architecture = params[:architecture]
        type.group_ids = SecurityGroupIdStringList.build(params[:group_ids], context: "#{context}[:group_ids]") unless params[:group_ids].nil?
        type.group_names = SecurityGroupStringList.build(params[:group_names], context: "#{context}[:group_names]") unless params[:group_names].nil?
        type.instance_initiated_shutdown_behavior = params[:instance_initiated_shutdown_behavior]
        type.instance_type = params[:instance_type]
        type.monitoring = params[:monitoring]
        type.placement = Placement.build(params[:placement], context: "#{context}[:placement]") unless params[:placement].nil?
        type.private_ip_address = params[:private_ip_address]
        type.subnet_id = params[:subnet_id]
        type.user_data = UserData.build(params[:user_data], context: "#{context}[:user_data]") unless params[:user_data].nil?
        type
      end
    end

    module ImportInstanceOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportInstanceOutput, context: context)
        type = Types::ImportInstanceOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.conversion_task = ConversionTask.build(params[:conversion_task], context: "#{context}[:conversion_task]") unless params[:conversion_task].nil?
        type
      end
    end

    module ImportInstanceTaskDetails
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportInstanceTaskDetails, context: context)
        type = Types::ImportInstanceTaskDetails.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.instance_id = params[:instance_id]
        type.platform = params[:platform]
        type.volumes = ImportInstanceVolumeDetailSet.build(params[:volumes], context: "#{context}[:volumes]") unless params[:volumes].nil?
        type
      end
    end

    module ImportInstanceVolumeDetailItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportInstanceVolumeDetailItem, context: context)
        type = Types::ImportInstanceVolumeDetailItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.bytes_converted = params[:bytes_converted]
        type.description = params[:description]
        type.image = DiskImageDescription.build(params[:image], context: "#{context}[:image]") unless params[:image].nil?
        type.status = params[:status]
        type.status_message = params[:status_message]
        type.volume = DiskImageVolumeDescription.build(params[:volume], context: "#{context}[:volume]") unless params[:volume].nil?
        type
      end
    end

    module ImportInstanceVolumeDetailSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ImportInstanceVolumeDetailItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ImportKeyPairInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportKeyPairInput, context: context)
        type = Types::ImportKeyPairInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.key_name = params[:key_name]
        type.public_key_material = params[:public_key_material]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module ImportKeyPairOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportKeyPairOutput, context: context)
        type = Types::ImportKeyPairOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.key_fingerprint = params[:key_fingerprint]
        type.key_name = params[:key_name]
        type.key_pair_id = params[:key_pair_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module ImportSnapshotInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportSnapshotInput, context: context)
        type = Types::ImportSnapshotInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_data = ClientData.build(params[:client_data], context: "#{context}[:client_data]") unless params[:client_data].nil?
        type.client_token = params[:client_token]
        type.description = params[:description]
        type.disk_container = SnapshotDiskContainer.build(params[:disk_container], context: "#{context}[:disk_container]") unless params[:disk_container].nil?
        type.dry_run = params[:dry_run]
        type.encrypted = params[:encrypted]
        type.kms_key_id = params[:kms_key_id]
        type.role_name = params[:role_name]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module ImportSnapshotOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportSnapshotOutput, context: context)
        type = Types::ImportSnapshotOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.import_task_id = params[:import_task_id]
        type.snapshot_task_detail = SnapshotTaskDetail.build(params[:snapshot_task_detail], context: "#{context}[:snapshot_task_detail]") unless params[:snapshot_task_detail].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module ImportSnapshotTask
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportSnapshotTask, context: context)
        type = Types::ImportSnapshotTask.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.import_task_id = params[:import_task_id]
        type.snapshot_task_detail = SnapshotTaskDetail.build(params[:snapshot_task_detail], context: "#{context}[:snapshot_task_detail]") unless params[:snapshot_task_detail].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module ImportSnapshotTaskIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ImportSnapshotTaskList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ImportSnapshotTask.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ImportTaskIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ImportVolumeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportVolumeInput, context: context)
        type = Types::ImportVolumeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.description = params[:description]
        type.dry_run = params[:dry_run]
        type.image = DiskImageDetail.build(params[:image], context: "#{context}[:image]") unless params[:image].nil?
        type.volume = VolumeDetail.build(params[:volume], context: "#{context}[:volume]") unless params[:volume].nil?
        type
      end
    end

    module ImportVolumeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportVolumeOutput, context: context)
        type = Types::ImportVolumeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.conversion_task = ConversionTask.build(params[:conversion_task], context: "#{context}[:conversion_task]") unless params[:conversion_task].nil?
        type
      end
    end

    module ImportVolumeTaskDetails
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ImportVolumeTaskDetails, context: context)
        type = Types::ImportVolumeTaskDetails.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.bytes_converted = params[:bytes_converted]
        type.description = params[:description]
        type.image = DiskImageDescription.build(params[:image], context: "#{context}[:image]") unless params[:image].nil?
        type.volume = DiskImageVolumeDescription.build(params[:volume], context: "#{context}[:volume]") unless params[:volume].nil?
        type
      end
    end

    module InferenceAcceleratorInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InferenceAcceleratorInfo, context: context)
        type = Types::InferenceAcceleratorInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.accelerators = InferenceDeviceInfoList.build(params[:accelerators], context: "#{context}[:accelerators]") unless params[:accelerators].nil?
        type.total_inference_memory_in_mi_b = params[:total_inference_memory_in_mi_b]
        type
      end
    end

    module InferenceDeviceInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InferenceDeviceInfo, context: context)
        type = Types::InferenceDeviceInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.count = params[:count]
        type.name = params[:name]
        type.manufacturer = params[:manufacturer]
        type.memory_info = InferenceDeviceMemoryInfo.build(params[:memory_info], context: "#{context}[:memory_info]") unless params[:memory_info].nil?
        type
      end
    end

    module InferenceDeviceInfoList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InferenceDeviceInfo.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InferenceDeviceMemoryInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InferenceDeviceMemoryInfo, context: context)
        type = Types::InferenceDeviceMemoryInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.size_in_mi_b = params[:size_in_mi_b]
        type
      end
    end

    module InsideCidrBlocksStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module Instance
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Instance, context: context)
        type = Types::Instance.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ami_launch_index = params[:ami_launch_index]
        type.image_id = params[:image_id]
        type.instance_id = params[:instance_id]
        type.instance_type = params[:instance_type]
        type.kernel_id = params[:kernel_id]
        type.key_name = params[:key_name]
        type.launch_time = params[:launch_time]
        type.monitoring = Monitoring.build(params[:monitoring], context: "#{context}[:monitoring]") unless params[:monitoring].nil?
        type.placement = Placement.build(params[:placement], context: "#{context}[:placement]") unless params[:placement].nil?
        type.platform = params[:platform]
        type.private_dns_name = params[:private_dns_name]
        type.private_ip_address = params[:private_ip_address]
        type.product_codes = ProductCodeList.build(params[:product_codes], context: "#{context}[:product_codes]") unless params[:product_codes].nil?
        type.public_dns_name = params[:public_dns_name]
        type.public_ip_address = params[:public_ip_address]
        type.ramdisk_id = params[:ramdisk_id]
        type.state = InstanceState.build(params[:state], context: "#{context}[:state]") unless params[:state].nil?
        type.state_transition_reason = params[:state_transition_reason]
        type.subnet_id = params[:subnet_id]
        type.vpc_id = params[:vpc_id]
        type.architecture = params[:architecture]
        type.block_device_mappings = InstanceBlockDeviceMappingList.build(params[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless params[:block_device_mappings].nil?
        type.client_token = params[:client_token]
        type.ebs_optimized = params[:ebs_optimized]
        type.ena_support = params[:ena_support]
        type.hypervisor = params[:hypervisor]
        type.iam_instance_profile = IamInstanceProfile.build(params[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless params[:iam_instance_profile].nil?
        type.instance_lifecycle = params[:instance_lifecycle]
        type.elastic_gpu_associations = ElasticGpuAssociationList.build(params[:elastic_gpu_associations], context: "#{context}[:elastic_gpu_associations]") unless params[:elastic_gpu_associations].nil?
        type.elastic_inference_accelerator_associations = ElasticInferenceAcceleratorAssociationList.build(params[:elastic_inference_accelerator_associations], context: "#{context}[:elastic_inference_accelerator_associations]") unless params[:elastic_inference_accelerator_associations].nil?
        type.network_interfaces = InstanceNetworkInterfaceList.build(params[:network_interfaces], context: "#{context}[:network_interfaces]") unless params[:network_interfaces].nil?
        type.outpost_arn = params[:outpost_arn]
        type.root_device_name = params[:root_device_name]
        type.root_device_type = params[:root_device_type]
        type.security_groups = GroupIdentifierList.build(params[:security_groups], context: "#{context}[:security_groups]") unless params[:security_groups].nil?
        type.source_dest_check = params[:source_dest_check]
        type.spot_instance_request_id = params[:spot_instance_request_id]
        type.sriov_net_support = params[:sriov_net_support]
        type.state_reason = StateReason.build(params[:state_reason], context: "#{context}[:state_reason]") unless params[:state_reason].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.virtualization_type = params[:virtualization_type]
        type.cpu_options = CpuOptions.build(params[:cpu_options], context: "#{context}[:cpu_options]") unless params[:cpu_options].nil?
        type.capacity_reservation_id = params[:capacity_reservation_id]
        type.capacity_reservation_specification = CapacityReservationSpecificationResponse.build(params[:capacity_reservation_specification], context: "#{context}[:capacity_reservation_specification]") unless params[:capacity_reservation_specification].nil?
        type.hibernation_options = HibernationOptions.build(params[:hibernation_options], context: "#{context}[:hibernation_options]") unless params[:hibernation_options].nil?
        type.licenses = LicenseList.build(params[:licenses], context: "#{context}[:licenses]") unless params[:licenses].nil?
        type.metadata_options = InstanceMetadataOptionsResponse.build(params[:metadata_options], context: "#{context}[:metadata_options]") unless params[:metadata_options].nil?
        type.enclave_options = EnclaveOptions.build(params[:enclave_options], context: "#{context}[:enclave_options]") unless params[:enclave_options].nil?
        type.boot_mode = params[:boot_mode]
        type.platform_details = params[:platform_details]
        type.usage_operation = params[:usage_operation]
        type.usage_operation_update_time = params[:usage_operation_update_time]
        type.private_dns_name_options = PrivateDnsNameOptionsResponse.build(params[:private_dns_name_options], context: "#{context}[:private_dns_name_options]") unless params[:private_dns_name_options].nil?
        type.ipv6_address = params[:ipv6_address]
        type.tpm_support = params[:tpm_support]
        type.maintenance_options = InstanceMaintenanceOptions.build(params[:maintenance_options], context: "#{context}[:maintenance_options]") unless params[:maintenance_options].nil?
        type.current_instance_boot_mode = params[:current_instance_boot_mode]
        type
      end
    end

    module InstanceAttachmentEnaSrdSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceAttachmentEnaSrdSpecification, context: context)
        type = Types::InstanceAttachmentEnaSrdSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ena_srd_enabled = params[:ena_srd_enabled]
        type.ena_srd_udp_specification = InstanceAttachmentEnaSrdUdpSpecification.build(params[:ena_srd_udp_specification], context: "#{context}[:ena_srd_udp_specification]") unless params[:ena_srd_udp_specification].nil?
        type
      end
    end

    module InstanceAttachmentEnaSrdUdpSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceAttachmentEnaSrdUdpSpecification, context: context)
        type = Types::InstanceAttachmentEnaSrdUdpSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ena_srd_udp_enabled = params[:ena_srd_udp_enabled]
        type
      end
    end

    module InstanceBlockDeviceMapping
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceBlockDeviceMapping, context: context)
        type = Types::InstanceBlockDeviceMapping.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.device_name = params[:device_name]
        type.ebs = EbsInstanceBlockDevice.build(params[:ebs], context: "#{context}[:ebs]") unless params[:ebs].nil?
        type
      end
    end

    module InstanceBlockDeviceMappingList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceBlockDeviceMapping.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceBlockDeviceMappingSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceBlockDeviceMappingSpecification, context: context)
        type = Types::InstanceBlockDeviceMappingSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.device_name = params[:device_name]
        type.ebs = EbsInstanceBlockDeviceSpecification.build(params[:ebs], context: "#{context}[:ebs]") unless params[:ebs].nil?
        type.no_device = params[:no_device]
        type.virtual_name = params[:virtual_name]
        type
      end
    end

    module InstanceBlockDeviceMappingSpecificationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceBlockDeviceMappingSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceCapacity
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceCapacity, context: context)
        type = Types::InstanceCapacity.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.available_capacity = params[:available_capacity]
        type.instance_type = params[:instance_type]
        type.total_capacity = params[:total_capacity]
        type
      end
    end

    module InstanceConnectEndpointSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Ec2InstanceConnectEndpoint.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceCount
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceCount, context: context)
        type = Types::InstanceCount.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_count = params[:instance_count]
        type.state = params[:state]
        type
      end
    end

    module InstanceCountList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceCount.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceCreditSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceCreditSpecification, context: context)
        type = Types::InstanceCreditSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.cpu_credits = params[:cpu_credits]
        type
      end
    end

    module InstanceCreditSpecificationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceCreditSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceCreditSpecificationListRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceCreditSpecificationRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceCreditSpecificationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceCreditSpecificationRequest, context: context)
        type = Types::InstanceCreditSpecificationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.cpu_credits = params[:cpu_credits]
        type
      end
    end

    module InstanceEventWindow
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceEventWindow, context: context)
        type = Types::InstanceEventWindow.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_event_window_id = params[:instance_event_window_id]
        type.time_ranges = InstanceEventWindowTimeRangeList.build(params[:time_ranges], context: "#{context}[:time_ranges]") unless params[:time_ranges].nil?
        type.name = params[:name]
        type.cron_expression = params[:cron_expression]
        type.association_target = InstanceEventWindowAssociationTarget.build(params[:association_target], context: "#{context}[:association_target]") unless params[:association_target].nil?
        type.state = params[:state]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module InstanceEventWindowAssociationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceEventWindowAssociationRequest, context: context)
        type = Types::InstanceEventWindowAssociationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_ids = InstanceIdList.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.instance_tags = TagList.build(params[:instance_tags], context: "#{context}[:instance_tags]") unless params[:instance_tags].nil?
        type.dedicated_host_ids = DedicatedHostIdList.build(params[:dedicated_host_ids], context: "#{context}[:dedicated_host_ids]") unless params[:dedicated_host_ids].nil?
        type
      end
    end

    module InstanceEventWindowAssociationTarget
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceEventWindowAssociationTarget, context: context)
        type = Types::InstanceEventWindowAssociationTarget.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_ids = InstanceIdList.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.dedicated_host_ids = DedicatedHostIdList.build(params[:dedicated_host_ids], context: "#{context}[:dedicated_host_ids]") unless params[:dedicated_host_ids].nil?
        type
      end
    end

    module InstanceEventWindowDisassociationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceEventWindowDisassociationRequest, context: context)
        type = Types::InstanceEventWindowDisassociationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_ids = InstanceIdList.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.instance_tags = TagList.build(params[:instance_tags], context: "#{context}[:instance_tags]") unless params[:instance_tags].nil?
        type.dedicated_host_ids = DedicatedHostIdList.build(params[:dedicated_host_ids], context: "#{context}[:dedicated_host_ids]") unless params[:dedicated_host_ids].nil?
        type
      end
    end

    module InstanceEventWindowIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module InstanceEventWindowSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceEventWindow.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceEventWindowStateChange
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceEventWindowStateChange, context: context)
        type = Types::InstanceEventWindowStateChange.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_event_window_id = params[:instance_event_window_id]
        type.state = params[:state]
        type
      end
    end

    module InstanceEventWindowTimeRange
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceEventWindowTimeRange, context: context)
        type = Types::InstanceEventWindowTimeRange.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.start_week_day = params[:start_week_day]
        type.start_hour = params[:start_hour]
        type.end_week_day = params[:end_week_day]
        type.end_hour = params[:end_hour]
        type
      end
    end

    module InstanceEventWindowTimeRangeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceEventWindowTimeRange.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceEventWindowTimeRangeRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceEventWindowTimeRangeRequest, context: context)
        type = Types::InstanceEventWindowTimeRangeRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.start_week_day = params[:start_week_day]
        type.start_hour = params[:start_hour]
        type.end_week_day = params[:end_week_day]
        type.end_hour = params[:end_hour]
        type
      end
    end

    module InstanceEventWindowTimeRangeRequestSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceEventWindowTimeRangeRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceExportDetails
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceExportDetails, context: context)
        type = Types::InstanceExportDetails.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.target_environment = params[:target_environment]
        type
      end
    end

    module InstanceFamilyCreditSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceFamilyCreditSpecification, context: context)
        type = Types::InstanceFamilyCreditSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_family = params[:instance_family]
        type.cpu_credits = params[:cpu_credits]
        type
      end
    end

    module InstanceGenerationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module InstanceIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module InstanceIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module InstanceIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module InstanceIdsSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module InstanceIpv4Prefix
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceIpv4Prefix, context: context)
        type = Types::InstanceIpv4Prefix.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv4_prefix = params[:ipv4_prefix]
        type
      end
    end

    module InstanceIpv4PrefixList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceIpv4Prefix.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceIpv6Address
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceIpv6Address, context: context)
        type = Types::InstanceIpv6Address.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_address = params[:ipv6_address]
        type.is_primary_ipv6 = params[:is_primary_ipv6]
        type
      end
    end

    module InstanceIpv6AddressList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceIpv6Address.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceIpv6AddressListRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceIpv6AddressRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceIpv6AddressRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceIpv6AddressRequest, context: context)
        type = Types::InstanceIpv6AddressRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_address = params[:ipv6_address]
        type
      end
    end

    module InstanceIpv6Prefix
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceIpv6Prefix, context: context)
        type = Types::InstanceIpv6Prefix.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_prefix = params[:ipv6_prefix]
        type
      end
    end

    module InstanceIpv6PrefixList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceIpv6Prefix.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Instance.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceMaintenanceOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceMaintenanceOptions, context: context)
        type = Types::InstanceMaintenanceOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.auto_recovery = params[:auto_recovery]
        type
      end
    end

    module InstanceMaintenanceOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceMaintenanceOptionsRequest, context: context)
        type = Types::InstanceMaintenanceOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.auto_recovery = params[:auto_recovery]
        type
      end
    end

    module InstanceMarketOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceMarketOptionsRequest, context: context)
        type = Types::InstanceMarketOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.market_type = params[:market_type]
        type.spot_options = SpotMarketOptions.build(params[:spot_options], context: "#{context}[:spot_options]") unless params[:spot_options].nil?
        type
      end
    end

    module InstanceMetadataOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceMetadataOptionsRequest, context: context)
        type = Types::InstanceMetadataOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.http_tokens = params[:http_tokens]
        type.http_put_response_hop_limit = params[:http_put_response_hop_limit]
        type.http_endpoint = params[:http_endpoint]
        type.http_protocol_ipv6 = params[:http_protocol_ipv6]
        type.instance_metadata_tags = params[:instance_metadata_tags]
        type
      end
    end

    module InstanceMetadataOptionsResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceMetadataOptionsResponse, context: context)
        type = Types::InstanceMetadataOptionsResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.state = params[:state]
        type.http_tokens = params[:http_tokens]
        type.http_put_response_hop_limit = params[:http_put_response_hop_limit]
        type.http_endpoint = params[:http_endpoint]
        type.http_protocol_ipv6 = params[:http_protocol_ipv6]
        type.instance_metadata_tags = params[:instance_metadata_tags]
        type
      end
    end

    module InstanceMonitoring
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceMonitoring, context: context)
        type = Types::InstanceMonitoring.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.monitoring = Monitoring.build(params[:monitoring], context: "#{context}[:monitoring]") unless params[:monitoring].nil?
        type
      end
    end

    module InstanceMonitoringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceMonitoring.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceNetworkInterface
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceNetworkInterface, context: context)
        type = Types::InstanceNetworkInterface.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association = InstanceNetworkInterfaceAssociation.build(params[:association], context: "#{context}[:association]") unless params[:association].nil?
        type.attachment = InstanceNetworkInterfaceAttachment.build(params[:attachment], context: "#{context}[:attachment]") unless params[:attachment].nil?
        type.description = params[:description]
        type.groups = GroupIdentifierList.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.ipv6_addresses = InstanceIpv6AddressList.build(params[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless params[:ipv6_addresses].nil?
        type.mac_address = params[:mac_address]
        type.network_interface_id = params[:network_interface_id]
        type.owner_id = params[:owner_id]
        type.private_dns_name = params[:private_dns_name]
        type.private_ip_address = params[:private_ip_address]
        type.private_ip_addresses = InstancePrivateIpAddressList.build(params[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless params[:private_ip_addresses].nil?
        type.source_dest_check = params[:source_dest_check]
        type.status = params[:status]
        type.subnet_id = params[:subnet_id]
        type.vpc_id = params[:vpc_id]
        type.interface_type = params[:interface_type]
        type.ipv4_prefixes = InstanceIpv4PrefixList.build(params[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless params[:ipv4_prefixes].nil?
        type.ipv6_prefixes = InstanceIpv6PrefixList.build(params[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless params[:ipv6_prefixes].nil?
        type.connection_tracking_configuration = ConnectionTrackingSpecificationResponse.build(params[:connection_tracking_configuration], context: "#{context}[:connection_tracking_configuration]") unless params[:connection_tracking_configuration].nil?
        type
      end
    end

    module InstanceNetworkInterfaceAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceNetworkInterfaceAssociation, context: context)
        type = Types::InstanceNetworkInterfaceAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.carrier_ip = params[:carrier_ip]
        type.customer_owned_ip = params[:customer_owned_ip]
        type.ip_owner_id = params[:ip_owner_id]
        type.public_dns_name = params[:public_dns_name]
        type.public_ip = params[:public_ip]
        type
      end
    end

    module InstanceNetworkInterfaceAttachment
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceNetworkInterfaceAttachment, context: context)
        type = Types::InstanceNetworkInterfaceAttachment.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attach_time = params[:attach_time]
        type.attachment_id = params[:attachment_id]
        type.delete_on_termination = params[:delete_on_termination]
        type.device_index = params[:device_index]
        type.status = params[:status]
        type.network_card_index = params[:network_card_index]
        type.ena_srd_specification = InstanceAttachmentEnaSrdSpecification.build(params[:ena_srd_specification], context: "#{context}[:ena_srd_specification]") unless params[:ena_srd_specification].nil?
        type
      end
    end

    module InstanceNetworkInterfaceList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceNetworkInterface.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceNetworkInterfaceSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceNetworkInterfaceSpecification, context: context)
        type = Types::InstanceNetworkInterfaceSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.associate_public_ip_address = params[:associate_public_ip_address]
        type.delete_on_termination = params[:delete_on_termination]
        type.description = params[:description]
        type.device_index = params[:device_index]
        type.groups = SecurityGroupIdStringList.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.ipv6_address_count = params[:ipv6_address_count]
        type.ipv6_addresses = InstanceIpv6AddressList.build(params[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless params[:ipv6_addresses].nil?
        type.network_interface_id = params[:network_interface_id]
        type.private_ip_address = params[:private_ip_address]
        type.private_ip_addresses = PrivateIpAddressSpecificationList.build(params[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless params[:private_ip_addresses].nil?
        type.secondary_private_ip_address_count = params[:secondary_private_ip_address_count]
        type.subnet_id = params[:subnet_id]
        type.associate_carrier_ip_address = params[:associate_carrier_ip_address]
        type.interface_type = params[:interface_type]
        type.network_card_index = params[:network_card_index]
        type.ipv4_prefixes = Ipv4PrefixList.build(params[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless params[:ipv4_prefixes].nil?
        type.ipv4_prefix_count = params[:ipv4_prefix_count]
        type.ipv6_prefixes = Ipv6PrefixList.build(params[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless params[:ipv6_prefixes].nil?
        type.ipv6_prefix_count = params[:ipv6_prefix_count]
        type.primary_ipv6 = params[:primary_ipv6]
        type.ena_srd_specification = EnaSrdSpecificationRequest.build(params[:ena_srd_specification], context: "#{context}[:ena_srd_specification]") unless params[:ena_srd_specification].nil?
        type.connection_tracking_specification = ConnectionTrackingSpecificationRequest.build(params[:connection_tracking_specification], context: "#{context}[:connection_tracking_specification]") unless params[:connection_tracking_specification].nil?
        type
      end
    end

    module InstanceNetworkInterfaceSpecificationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceNetworkInterfaceSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstancePrivateIpAddress
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstancePrivateIpAddress, context: context)
        type = Types::InstancePrivateIpAddress.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association = InstanceNetworkInterfaceAssociation.build(params[:association], context: "#{context}[:association]") unless params[:association].nil?
        type.primary = params[:primary]
        type.private_dns_name = params[:private_dns_name]
        type.private_ip_address = params[:private_ip_address]
        type
      end
    end

    module InstancePrivateIpAddressList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstancePrivateIpAddress.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceRequirements
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceRequirements, context: context)
        type = Types::InstanceRequirements.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.v_cpu_count = VCpuCountRange.build(params[:v_cpu_count], context: "#{context}[:v_cpu_count]") unless params[:v_cpu_count].nil?
        type.memory_mi_b = MemoryMiB.build(params[:memory_mi_b], context: "#{context}[:memory_mi_b]") unless params[:memory_mi_b].nil?
        type.cpu_manufacturers = CpuManufacturerSet.build(params[:cpu_manufacturers], context: "#{context}[:cpu_manufacturers]") unless params[:cpu_manufacturers].nil?
        type.memory_gi_b_per_v_cpu = MemoryGiBPerVCpu.build(params[:memory_gi_b_per_v_cpu], context: "#{context}[:memory_gi_b_per_v_cpu]") unless params[:memory_gi_b_per_v_cpu].nil?
        type.excluded_instance_types = ExcludedInstanceTypeSet.build(params[:excluded_instance_types], context: "#{context}[:excluded_instance_types]") unless params[:excluded_instance_types].nil?
        type.instance_generations = InstanceGenerationSet.build(params[:instance_generations], context: "#{context}[:instance_generations]") unless params[:instance_generations].nil?
        type.spot_max_price_percentage_over_lowest_price = params[:spot_max_price_percentage_over_lowest_price]
        type.on_demand_max_price_percentage_over_lowest_price = params[:on_demand_max_price_percentage_over_lowest_price]
        type.bare_metal = params[:bare_metal]
        type.burstable_performance = params[:burstable_performance]
        type.require_hibernate_support = params[:require_hibernate_support]
        type.network_interface_count = NetworkInterfaceCount.build(params[:network_interface_count], context: "#{context}[:network_interface_count]") unless params[:network_interface_count].nil?
        type.local_storage = params[:local_storage]
        type.local_storage_types = LocalStorageTypeSet.build(params[:local_storage_types], context: "#{context}[:local_storage_types]") unless params[:local_storage_types].nil?
        type.total_local_storage_gb = TotalLocalStorageGB.build(params[:total_local_storage_gb], context: "#{context}[:total_local_storage_gb]") unless params[:total_local_storage_gb].nil?
        type.baseline_ebs_bandwidth_mbps = BaselineEbsBandwidthMbps.build(params[:baseline_ebs_bandwidth_mbps], context: "#{context}[:baseline_ebs_bandwidth_mbps]") unless params[:baseline_ebs_bandwidth_mbps].nil?
        type.accelerator_types = AcceleratorTypeSet.build(params[:accelerator_types], context: "#{context}[:accelerator_types]") unless params[:accelerator_types].nil?
        type.accelerator_count = AcceleratorCount.build(params[:accelerator_count], context: "#{context}[:accelerator_count]") unless params[:accelerator_count].nil?
        type.accelerator_manufacturers = AcceleratorManufacturerSet.build(params[:accelerator_manufacturers], context: "#{context}[:accelerator_manufacturers]") unless params[:accelerator_manufacturers].nil?
        type.accelerator_names = AcceleratorNameSet.build(params[:accelerator_names], context: "#{context}[:accelerator_names]") unless params[:accelerator_names].nil?
        type.accelerator_total_memory_mi_b = AcceleratorTotalMemoryMiB.build(params[:accelerator_total_memory_mi_b], context: "#{context}[:accelerator_total_memory_mi_b]") unless params[:accelerator_total_memory_mi_b].nil?
        type.network_bandwidth_gbps = NetworkBandwidthGbps.build(params[:network_bandwidth_gbps], context: "#{context}[:network_bandwidth_gbps]") unless params[:network_bandwidth_gbps].nil?
        type.allowed_instance_types = AllowedInstanceTypeSet.build(params[:allowed_instance_types], context: "#{context}[:allowed_instance_types]") unless params[:allowed_instance_types].nil?
        type.max_spot_price_as_percentage_of_optimal_on_demand_price = params[:max_spot_price_as_percentage_of_optimal_on_demand_price]
        type
      end
    end

    module InstanceRequirementsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceRequirementsRequest, context: context)
        type = Types::InstanceRequirementsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.v_cpu_count = VCpuCountRangeRequest.build(params[:v_cpu_count], context: "#{context}[:v_cpu_count]") unless params[:v_cpu_count].nil?
        type.memory_mi_b = MemoryMiBRequest.build(params[:memory_mi_b], context: "#{context}[:memory_mi_b]") unless params[:memory_mi_b].nil?
        type.cpu_manufacturers = CpuManufacturerSet.build(params[:cpu_manufacturers], context: "#{context}[:cpu_manufacturers]") unless params[:cpu_manufacturers].nil?
        type.memory_gi_b_per_v_cpu = MemoryGiBPerVCpuRequest.build(params[:memory_gi_b_per_v_cpu], context: "#{context}[:memory_gi_b_per_v_cpu]") unless params[:memory_gi_b_per_v_cpu].nil?
        type.excluded_instance_types = ExcludedInstanceTypeSet.build(params[:excluded_instance_types], context: "#{context}[:excluded_instance_types]") unless params[:excluded_instance_types].nil?
        type.instance_generations = InstanceGenerationSet.build(params[:instance_generations], context: "#{context}[:instance_generations]") unless params[:instance_generations].nil?
        type.spot_max_price_percentage_over_lowest_price = params[:spot_max_price_percentage_over_lowest_price]
        type.on_demand_max_price_percentage_over_lowest_price = params[:on_demand_max_price_percentage_over_lowest_price]
        type.bare_metal = params[:bare_metal]
        type.burstable_performance = params[:burstable_performance]
        type.require_hibernate_support = params[:require_hibernate_support]
        type.network_interface_count = NetworkInterfaceCountRequest.build(params[:network_interface_count], context: "#{context}[:network_interface_count]") unless params[:network_interface_count].nil?
        type.local_storage = params[:local_storage]
        type.local_storage_types = LocalStorageTypeSet.build(params[:local_storage_types], context: "#{context}[:local_storage_types]") unless params[:local_storage_types].nil?
        type.total_local_storage_gb = TotalLocalStorageGBRequest.build(params[:total_local_storage_gb], context: "#{context}[:total_local_storage_gb]") unless params[:total_local_storage_gb].nil?
        type.baseline_ebs_bandwidth_mbps = BaselineEbsBandwidthMbpsRequest.build(params[:baseline_ebs_bandwidth_mbps], context: "#{context}[:baseline_ebs_bandwidth_mbps]") unless params[:baseline_ebs_bandwidth_mbps].nil?
        type.accelerator_types = AcceleratorTypeSet.build(params[:accelerator_types], context: "#{context}[:accelerator_types]") unless params[:accelerator_types].nil?
        type.accelerator_count = AcceleratorCountRequest.build(params[:accelerator_count], context: "#{context}[:accelerator_count]") unless params[:accelerator_count].nil?
        type.accelerator_manufacturers = AcceleratorManufacturerSet.build(params[:accelerator_manufacturers], context: "#{context}[:accelerator_manufacturers]") unless params[:accelerator_manufacturers].nil?
        type.accelerator_names = AcceleratorNameSet.build(params[:accelerator_names], context: "#{context}[:accelerator_names]") unless params[:accelerator_names].nil?
        type.accelerator_total_memory_mi_b = AcceleratorTotalMemoryMiBRequest.build(params[:accelerator_total_memory_mi_b], context: "#{context}[:accelerator_total_memory_mi_b]") unless params[:accelerator_total_memory_mi_b].nil?
        type.network_bandwidth_gbps = NetworkBandwidthGbpsRequest.build(params[:network_bandwidth_gbps], context: "#{context}[:network_bandwidth_gbps]") unless params[:network_bandwidth_gbps].nil?
        type.allowed_instance_types = AllowedInstanceTypeSet.build(params[:allowed_instance_types], context: "#{context}[:allowed_instance_types]") unless params[:allowed_instance_types].nil?
        type.max_spot_price_as_percentage_of_optimal_on_demand_price = params[:max_spot_price_as_percentage_of_optimal_on_demand_price]
        type
      end
    end

    module InstanceRequirementsWithMetadataRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceRequirementsWithMetadataRequest, context: context)
        type = Types::InstanceRequirementsWithMetadataRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.architecture_types = ArchitectureTypeSet.build(params[:architecture_types], context: "#{context}[:architecture_types]") unless params[:architecture_types].nil?
        type.virtualization_types = VirtualizationTypeSet.build(params[:virtualization_types], context: "#{context}[:virtualization_types]") unless params[:virtualization_types].nil?
        type.instance_requirements = InstanceRequirementsRequest.build(params[:instance_requirements], context: "#{context}[:instance_requirements]") unless params[:instance_requirements].nil?
        type
      end
    end

    module InstanceSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceTopology.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceSpecification, context: context)
        type = Types::InstanceSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.exclude_boot_volume = params[:exclude_boot_volume]
        type.exclude_data_volume_ids = VolumeIdStringList.build(params[:exclude_data_volume_ids], context: "#{context}[:exclude_data_volume_ids]") unless params[:exclude_data_volume_ids].nil?
        type
      end
    end

    module InstanceState
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceState, context: context)
        type = Types::InstanceState.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.name = params[:name]
        type
      end
    end

    module InstanceStateChange
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceStateChange, context: context)
        type = Types::InstanceStateChange.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.current_state = InstanceState.build(params[:current_state], context: "#{context}[:current_state]") unless params[:current_state].nil?
        type.instance_id = params[:instance_id]
        type.previous_state = InstanceState.build(params[:previous_state], context: "#{context}[:previous_state]") unless params[:previous_state].nil?
        type
      end
    end

    module InstanceStateChangeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceStateChange.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceStatus, context: context)
        type = Types::InstanceStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.outpost_arn = params[:outpost_arn]
        type.events = InstanceStatusEventList.build(params[:events], context: "#{context}[:events]") unless params[:events].nil?
        type.instance_id = params[:instance_id]
        type.instance_state = InstanceState.build(params[:instance_state], context: "#{context}[:instance_state]") unless params[:instance_state].nil?
        type.instance_status = InstanceStatusSummary.build(params[:instance_status], context: "#{context}[:instance_status]") unless params[:instance_status].nil?
        type.system_status = InstanceStatusSummary.build(params[:system_status], context: "#{context}[:system_status]") unless params[:system_status].nil?
        type
      end
    end

    module InstanceStatusDetails
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceStatusDetails, context: context)
        type = Types::InstanceStatusDetails.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.impaired_since = params[:impaired_since]
        type.name = params[:name]
        type.status = params[:status]
        type
      end
    end

    module InstanceStatusDetailsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceStatusDetails.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceStatusEvent
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceStatusEvent, context: context)
        type = Types::InstanceStatusEvent.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_event_id = params[:instance_event_id]
        type.code = params[:code]
        type.description = params[:description]
        type.not_after = params[:not_after]
        type.not_before = params[:not_before]
        type.not_before_deadline = params[:not_before_deadline]
        type
      end
    end

    module InstanceStatusEventList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceStatusEvent.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceStatusList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceStatus.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceStatusSummary
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceStatusSummary, context: context)
        type = Types::InstanceStatusSummary.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.details = InstanceStatusDetailsList.build(params[:details], context: "#{context}[:details]") unless params[:details].nil?
        type.status = params[:status]
        type
      end
    end

    module InstanceStorageInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceStorageInfo, context: context)
        type = Types::InstanceStorageInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.total_size_in_gb = params[:total_size_in_gb]
        type.disks = DiskInfoList.build(params[:disks], context: "#{context}[:disks]") unless params[:disks].nil?
        type.nvme_support = params[:nvme_support]
        type.encryption_support = params[:encryption_support]
        type
      end
    end

    module InstanceTagKeySet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module InstanceTagNotificationAttribute
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceTagNotificationAttribute, context: context)
        type = Types::InstanceTagNotificationAttribute.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_tag_keys = InstanceTagKeySet.build(params[:instance_tag_keys], context: "#{context}[:instance_tag_keys]") unless params[:instance_tag_keys].nil?
        type.include_all_tags_of_instance = params[:include_all_tags_of_instance]
        type
      end
    end

    module InstanceTopology
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceTopology, context: context)
        type = Types::InstanceTopology.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.instance_type = params[:instance_type]
        type.group_name = params[:group_name]
        type.network_nodes = NetworkNodesList.build(params[:network_nodes], context: "#{context}[:network_nodes]") unless params[:network_nodes].nil?
        type.availability_zone = params[:availability_zone]
        type.zone_id = params[:zone_id]
        type
      end
    end

    module InstanceTypeInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceTypeInfo, context: context)
        type = Types::InstanceTypeInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_type = params[:instance_type]
        type.current_generation = params[:current_generation]
        type.free_tier_eligible = params[:free_tier_eligible]
        type.supported_usage_classes = UsageClassTypeList.build(params[:supported_usage_classes], context: "#{context}[:supported_usage_classes]") unless params[:supported_usage_classes].nil?
        type.supported_root_device_types = RootDeviceTypeList.build(params[:supported_root_device_types], context: "#{context}[:supported_root_device_types]") unless params[:supported_root_device_types].nil?
        type.supported_virtualization_types = VirtualizationTypeList.build(params[:supported_virtualization_types], context: "#{context}[:supported_virtualization_types]") unless params[:supported_virtualization_types].nil?
        type.bare_metal = params[:bare_metal]
        type.hypervisor = params[:hypervisor]
        type.processor_info = ProcessorInfo.build(params[:processor_info], context: "#{context}[:processor_info]") unless params[:processor_info].nil?
        type.v_cpu_info = VCpuInfo.build(params[:v_cpu_info], context: "#{context}[:v_cpu_info]") unless params[:v_cpu_info].nil?
        type.memory_info = MemoryInfo.build(params[:memory_info], context: "#{context}[:memory_info]") unless params[:memory_info].nil?
        type.instance_storage_supported = params[:instance_storage_supported]
        type.instance_storage_info = InstanceStorageInfo.build(params[:instance_storage_info], context: "#{context}[:instance_storage_info]") unless params[:instance_storage_info].nil?
        type.ebs_info = EbsInfo.build(params[:ebs_info], context: "#{context}[:ebs_info]") unless params[:ebs_info].nil?
        type.network_info = NetworkInfo.build(params[:network_info], context: "#{context}[:network_info]") unless params[:network_info].nil?
        type.gpu_info = GpuInfo.build(params[:gpu_info], context: "#{context}[:gpu_info]") unless params[:gpu_info].nil?
        type.fpga_info = FpgaInfo.build(params[:fpga_info], context: "#{context}[:fpga_info]") unless params[:fpga_info].nil?
        type.placement_group_info = PlacementGroupInfo.build(params[:placement_group_info], context: "#{context}[:placement_group_info]") unless params[:placement_group_info].nil?
        type.inference_accelerator_info = InferenceAcceleratorInfo.build(params[:inference_accelerator_info], context: "#{context}[:inference_accelerator_info]") unless params[:inference_accelerator_info].nil?
        type.hibernation_supported = params[:hibernation_supported]
        type.burstable_performance_supported = params[:burstable_performance_supported]
        type.dedicated_hosts_supported = params[:dedicated_hosts_supported]
        type.auto_recovery_supported = params[:auto_recovery_supported]
        type.supported_boot_modes = BootModeTypeList.build(params[:supported_boot_modes], context: "#{context}[:supported_boot_modes]") unless params[:supported_boot_modes].nil?
        type.nitro_enclaves_support = params[:nitro_enclaves_support]
        type.nitro_tpm_support = params[:nitro_tpm_support]
        type.nitro_tpm_info = NitroTpmInfo.build(params[:nitro_tpm_info], context: "#{context}[:nitro_tpm_info]") unless params[:nitro_tpm_info].nil?
        type
      end
    end

    module InstanceTypeInfoFromInstanceRequirements
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceTypeInfoFromInstanceRequirements, context: context)
        type = Types::InstanceTypeInfoFromInstanceRequirements.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_type = params[:instance_type]
        type
      end
    end

    module InstanceTypeInfoFromInstanceRequirementsSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceTypeInfoFromInstanceRequirements.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceTypeInfoList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceTypeInfo.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceTypeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module InstanceTypeOffering
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceTypeOffering, context: context)
        type = Types::InstanceTypeOffering.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_type = params[:instance_type]
        type.location_type = params[:location_type]
        type.location = params[:location]
        type
      end
    end

    module InstanceTypeOfferingsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceTypeOffering.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InstanceTypes
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module InstanceTypesList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module InstanceUsage
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InstanceUsage, context: context)
        type = Types::InstanceUsage.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.account_id = params[:account_id]
        type.used_instance_count = params[:used_instance_count]
        type
      end
    end

    module InstanceUsageSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InstanceUsage.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IntegrateServices
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IntegrateServices, context: context)
        type = Types::IntegrateServices.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.athena_integrations = AthenaIntegrationsSet.build(params[:athena_integrations], context: "#{context}[:athena_integrations]") unless params[:athena_integrations].nil?
        type
      end
    end

    module InternetGateway
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InternetGateway, context: context)
        type = Types::InternetGateway.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attachments = InternetGatewayAttachmentList.build(params[:attachments], context: "#{context}[:attachments]") unless params[:attachments].nil?
        type.internet_gateway_id = params[:internet_gateway_id]
        type.owner_id = params[:owner_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module InternetGatewayAttachment
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::InternetGatewayAttachment, context: context)
        type = Types::InternetGatewayAttachment.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.state = params[:state]
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module InternetGatewayAttachmentList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InternetGatewayAttachment.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module InternetGatewayIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module InternetGatewayList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << InternetGateway.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpAddressList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module IpList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module IpPermission
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpPermission, context: context)
        type = Types::IpPermission.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.from_port = params[:from_port]
        type.ip_protocol = params[:ip_protocol]
        type.ip_ranges = IpRangeList.build(params[:ip_ranges], context: "#{context}[:ip_ranges]") unless params[:ip_ranges].nil?
        type.ipv6_ranges = Ipv6RangeList.build(params[:ipv6_ranges], context: "#{context}[:ipv6_ranges]") unless params[:ipv6_ranges].nil?
        type.prefix_list_ids = PrefixListIdList.build(params[:prefix_list_ids], context: "#{context}[:prefix_list_ids]") unless params[:prefix_list_ids].nil?
        type.to_port = params[:to_port]
        type.user_id_group_pairs = UserIdGroupPairList.build(params[:user_id_group_pairs], context: "#{context}[:user_id_group_pairs]") unless params[:user_id_group_pairs].nil?
        type
      end
    end

    module IpPermissionList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpPermission.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpPrefixList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module IpRange
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpRange, context: context)
        type = Types::IpRange.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr_ip = params[:cidr_ip]
        type.description = params[:description]
        type
      end
    end

    module IpRangeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpRange.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpRanges
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module Ipam
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Ipam, context: context)
        type = Types::Ipam.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.owner_id = params[:owner_id]
        type.ipam_id = params[:ipam_id]
        type.ipam_arn = params[:ipam_arn]
        type.ipam_region = params[:ipam_region]
        type.public_default_scope_id = params[:public_default_scope_id]
        type.private_default_scope_id = params[:private_default_scope_id]
        type.scope_count = params[:scope_count]
        type.description = params[:description]
        type.operating_regions = IpamOperatingRegionSet.build(params[:operating_regions], context: "#{context}[:operating_regions]") unless params[:operating_regions].nil?
        type.state = params[:state]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.default_resource_discovery_id = params[:default_resource_discovery_id]
        type.default_resource_discovery_association_id = params[:default_resource_discovery_association_id]
        type.resource_discovery_association_count = params[:resource_discovery_association_count]
        type.state_message = params[:state_message]
        type.tier = params[:tier]
        type
      end
    end

    module IpamAddressHistoryRecord
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamAddressHistoryRecord, context: context)
        type = Types::IpamAddressHistoryRecord.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.resource_owner_id = params[:resource_owner_id]
        type.resource_region = params[:resource_region]
        type.resource_type = params[:resource_type]
        type.resource_id = params[:resource_id]
        type.resource_cidr = params[:resource_cidr]
        type.resource_name = params[:resource_name]
        type.resource_compliance_status = params[:resource_compliance_status]
        type.resource_overlap_status = params[:resource_overlap_status]
        type.vpc_id = params[:vpc_id]
        type.sampled_start_time = params[:sampled_start_time]
        type.sampled_end_time = params[:sampled_end_time]
        type
      end
    end

    module IpamAddressHistoryRecordSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpamAddressHistoryRecord.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpamCidrAuthorizationContext
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamCidrAuthorizationContext, context: context)
        type = Types::IpamCidrAuthorizationContext.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.message = params[:message]
        type.signature = params[:signature]
        type
      end
    end

    module IpamDiscoveredAccount
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamDiscoveredAccount, context: context)
        type = Types::IpamDiscoveredAccount.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.account_id = params[:account_id]
        type.discovery_region = params[:discovery_region]
        type.failure_reason = IpamDiscoveryFailureReason.build(params[:failure_reason], context: "#{context}[:failure_reason]") unless params[:failure_reason].nil?
        type.last_attempted_discovery_time = params[:last_attempted_discovery_time]
        type.last_successful_discovery_time = params[:last_successful_discovery_time]
        type
      end
    end

    module IpamDiscoveredAccountSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpamDiscoveredAccount.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpamDiscoveredPublicAddress
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamDiscoveredPublicAddress, context: context)
        type = Types::IpamDiscoveredPublicAddress.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_resource_discovery_id = params[:ipam_resource_discovery_id]
        type.address_region = params[:address_region]
        type.address = params[:address]
        type.address_owner_id = params[:address_owner_id]
        type.address_allocation_id = params[:address_allocation_id]
        type.association_status = params[:association_status]
        type.address_type = params[:address_type]
        type.service = params[:service]
        type.service_resource = params[:service_resource]
        type.vpc_id = params[:vpc_id]
        type.subnet_id = params[:subnet_id]
        type.public_ipv4_pool_id = params[:public_ipv4_pool_id]
        type.network_interface_id = params[:network_interface_id]
        type.network_interface_description = params[:network_interface_description]
        type.instance_id = params[:instance_id]
        type.tags = IpamPublicAddressTags.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.network_border_group = params[:network_border_group]
        type.security_groups = IpamPublicAddressSecurityGroupList.build(params[:security_groups], context: "#{context}[:security_groups]") unless params[:security_groups].nil?
        type.sample_time = params[:sample_time]
        type
      end
    end

    module IpamDiscoveredPublicAddressSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpamDiscoveredPublicAddress.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpamDiscoveredResourceCidr
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamDiscoveredResourceCidr, context: context)
        type = Types::IpamDiscoveredResourceCidr.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_resource_discovery_id = params[:ipam_resource_discovery_id]
        type.resource_region = params[:resource_region]
        type.resource_id = params[:resource_id]
        type.resource_owner_id = params[:resource_owner_id]
        type.resource_cidr = params[:resource_cidr]
        type.resource_type = params[:resource_type]
        type.resource_tags = IpamResourceTagList.build(params[:resource_tags], context: "#{context}[:resource_tags]") unless params[:resource_tags].nil?
        type.ip_usage = params[:ip_usage]&.to_f
        type.vpc_id = params[:vpc_id]
        type.sample_time = params[:sample_time]
        type
      end
    end

    module IpamDiscoveredResourceCidrSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpamDiscoveredResourceCidr.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpamDiscoveryFailureReason
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamDiscoveryFailureReason, context: context)
        type = Types::IpamDiscoveryFailureReason.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module IpamOperatingRegion
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamOperatingRegion, context: context)
        type = Types::IpamOperatingRegion.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.region_name = params[:region_name]
        type
      end
    end

    module IpamOperatingRegionSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpamOperatingRegion.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpamPool
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamPool, context: context)
        type = Types::IpamPool.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.owner_id = params[:owner_id]
        type.ipam_pool_id = params[:ipam_pool_id]
        type.source_ipam_pool_id = params[:source_ipam_pool_id]
        type.ipam_pool_arn = params[:ipam_pool_arn]
        type.ipam_scope_arn = params[:ipam_scope_arn]
        type.ipam_scope_type = params[:ipam_scope_type]
        type.ipam_arn = params[:ipam_arn]
        type.ipam_region = params[:ipam_region]
        type.locale = params[:locale]
        type.pool_depth = params[:pool_depth]
        type.state = params[:state]
        type.state_message = params[:state_message]
        type.description = params[:description]
        type.auto_import = params[:auto_import]
        type.publicly_advertisable = params[:publicly_advertisable]
        type.address_family = params[:address_family]
        type.allocation_min_netmask_length = params[:allocation_min_netmask_length]
        type.allocation_max_netmask_length = params[:allocation_max_netmask_length]
        type.allocation_default_netmask_length = params[:allocation_default_netmask_length]
        type.allocation_resource_tags = IpamResourceTagList.build(params[:allocation_resource_tags], context: "#{context}[:allocation_resource_tags]") unless params[:allocation_resource_tags].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.aws_service = params[:aws_service]
        type.public_ip_source = params[:public_ip_source]
        type.source_resource = IpamPoolSourceResource.build(params[:source_resource], context: "#{context}[:source_resource]") unless params[:source_resource].nil?
        type
      end
    end

    module IpamPoolAllocation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamPoolAllocation, context: context)
        type = Types::IpamPoolAllocation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type.ipam_pool_allocation_id = params[:ipam_pool_allocation_id]
        type.description = params[:description]
        type.resource_id = params[:resource_id]
        type.resource_type = params[:resource_type]
        type.resource_region = params[:resource_region]
        type.resource_owner = params[:resource_owner]
        type
      end
    end

    module IpamPoolAllocationAllowedCidrs
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module IpamPoolAllocationDisallowedCidrs
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module IpamPoolAllocationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpamPoolAllocation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpamPoolCidr
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamPoolCidr, context: context)
        type = Types::IpamPoolCidr.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type.state = params[:state]
        type.failure_reason = IpamPoolCidrFailureReason.build(params[:failure_reason], context: "#{context}[:failure_reason]") unless params[:failure_reason].nil?
        type.ipam_pool_cidr_id = params[:ipam_pool_cidr_id]
        type.netmask_length = params[:netmask_length]
        type
      end
    end

    module IpamPoolCidrFailureReason
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamPoolCidrFailureReason, context: context)
        type = Types::IpamPoolCidrFailureReason.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module IpamPoolCidrSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpamPoolCidr.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpamPoolSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpamPool.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpamPoolSourceResource
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamPoolSourceResource, context: context)
        type = Types::IpamPoolSourceResource.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.resource_id = params[:resource_id]
        type.resource_type = params[:resource_type]
        type.resource_region = params[:resource_region]
        type.resource_owner = params[:resource_owner]
        type
      end
    end

    module IpamPoolSourceResourceRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamPoolSourceResourceRequest, context: context)
        type = Types::IpamPoolSourceResourceRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.resource_id = params[:resource_id]
        type.resource_type = params[:resource_type]
        type.resource_region = params[:resource_region]
        type.resource_owner = params[:resource_owner]
        type
      end
    end

    module IpamPublicAddressSecurityGroup
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamPublicAddressSecurityGroup, context: context)
        type = Types::IpamPublicAddressSecurityGroup.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group_name = params[:group_name]
        type.group_id = params[:group_id]
        type
      end
    end

    module IpamPublicAddressSecurityGroupList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpamPublicAddressSecurityGroup.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpamPublicAddressTag
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamPublicAddressTag, context: context)
        type = Types::IpamPublicAddressTag.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.key = params[:key]
        type.value = params[:value]
        type
      end
    end

    module IpamPublicAddressTagList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpamPublicAddressTag.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpamPublicAddressTags
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamPublicAddressTags, context: context)
        type = Types::IpamPublicAddressTags.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.eip_tags = IpamPublicAddressTagList.build(params[:eip_tags], context: "#{context}[:eip_tags]") unless params[:eip_tags].nil?
        type
      end
    end

    module IpamResourceCidr
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamResourceCidr, context: context)
        type = Types::IpamResourceCidr.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_id = params[:ipam_id]
        type.ipam_scope_id = params[:ipam_scope_id]
        type.ipam_pool_id = params[:ipam_pool_id]
        type.resource_region = params[:resource_region]
        type.resource_owner_id = params[:resource_owner_id]
        type.resource_id = params[:resource_id]
        type.resource_name = params[:resource_name]
        type.resource_cidr = params[:resource_cidr]
        type.resource_type = params[:resource_type]
        type.resource_tags = IpamResourceTagList.build(params[:resource_tags], context: "#{context}[:resource_tags]") unless params[:resource_tags].nil?
        type.ip_usage = params[:ip_usage]&.to_f
        type.compliance_status = params[:compliance_status]
        type.management_state = params[:management_state]
        type.overlap_status = params[:overlap_status]
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module IpamResourceCidrSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpamResourceCidr.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpamResourceDiscovery
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamResourceDiscovery, context: context)
        type = Types::IpamResourceDiscovery.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.owner_id = params[:owner_id]
        type.ipam_resource_discovery_id = params[:ipam_resource_discovery_id]
        type.ipam_resource_discovery_arn = params[:ipam_resource_discovery_arn]
        type.ipam_resource_discovery_region = params[:ipam_resource_discovery_region]
        type.description = params[:description]
        type.operating_regions = IpamOperatingRegionSet.build(params[:operating_regions], context: "#{context}[:operating_regions]") unless params[:operating_regions].nil?
        type.is_default = params[:is_default]
        type.state = params[:state]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module IpamResourceDiscoveryAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamResourceDiscoveryAssociation, context: context)
        type = Types::IpamResourceDiscoveryAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.owner_id = params[:owner_id]
        type.ipam_resource_discovery_association_id = params[:ipam_resource_discovery_association_id]
        type.ipam_resource_discovery_association_arn = params[:ipam_resource_discovery_association_arn]
        type.ipam_resource_discovery_id = params[:ipam_resource_discovery_id]
        type.ipam_id = params[:ipam_id]
        type.ipam_arn = params[:ipam_arn]
        type.ipam_region = params[:ipam_region]
        type.is_default = params[:is_default]
        type.resource_discovery_status = params[:resource_discovery_status]
        type.state = params[:state]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module IpamResourceDiscoveryAssociationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpamResourceDiscoveryAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpamResourceDiscoverySet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpamResourceDiscovery.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpamResourceTag
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamResourceTag, context: context)
        type = Types::IpamResourceTag.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.key = params[:key]
        type.value = params[:value]
        type
      end
    end

    module IpamResourceTagList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpamResourceTag.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpamScope
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::IpamScope, context: context)
        type = Types::IpamScope.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.owner_id = params[:owner_id]
        type.ipam_scope_id = params[:ipam_scope_id]
        type.ipam_scope_arn = params[:ipam_scope_arn]
        type.ipam_arn = params[:ipam_arn]
        type.ipam_region = params[:ipam_region]
        type.ipam_scope_type = params[:ipam_scope_type]
        type.is_default = params[:is_default]
        type.description = params[:description]
        type.pool_count = params[:pool_count]
        type.state = params[:state]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module IpamScopeSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << IpamScope.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module IpamSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Ipam.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Ipv4PrefixList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Ipv4PrefixSpecificationRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Ipv4PrefixListResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Ipv4PrefixSpecificationResponse.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Ipv4PrefixSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Ipv4PrefixSpecification, context: context)
        type = Types::Ipv4PrefixSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv4_prefix = params[:ipv4_prefix]
        type
      end
    end

    module Ipv4PrefixSpecificationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Ipv4PrefixSpecificationRequest, context: context)
        type = Types::Ipv4PrefixSpecificationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv4_prefix = params[:ipv4_prefix]
        type
      end
    end

    module Ipv4PrefixSpecificationResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Ipv4PrefixSpecificationResponse, context: context)
        type = Types::Ipv4PrefixSpecificationResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv4_prefix = params[:ipv4_prefix]
        type
      end
    end

    module Ipv4PrefixesList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Ipv4PrefixSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Ipv6AddressList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module Ipv6CidrAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Ipv6CidrAssociation, context: context)
        type = Types::Ipv6CidrAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_cidr = params[:ipv6_cidr]
        type.associated_resource = params[:associated_resource]
        type
      end
    end

    module Ipv6CidrAssociationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Ipv6CidrAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Ipv6CidrBlock
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Ipv6CidrBlock, context: context)
        type = Types::Ipv6CidrBlock.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_cidr_block = params[:ipv6_cidr_block]
        type
      end
    end

    module Ipv6CidrBlockSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Ipv6CidrBlock.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Ipv6Pool
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Ipv6Pool, context: context)
        type = Types::Ipv6Pool.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.pool_id = params[:pool_id]
        type.description = params[:description]
        type.pool_cidr_blocks = PoolCidrBlocksSet.build(params[:pool_cidr_blocks], context: "#{context}[:pool_cidr_blocks]") unless params[:pool_cidr_blocks].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module Ipv6PoolIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module Ipv6PoolSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Ipv6Pool.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Ipv6PrefixList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Ipv6PrefixSpecificationRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Ipv6PrefixListResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Ipv6PrefixSpecificationResponse.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Ipv6PrefixSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Ipv6PrefixSpecification, context: context)
        type = Types::Ipv6PrefixSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_prefix = params[:ipv6_prefix]
        type
      end
    end

    module Ipv6PrefixSpecificationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Ipv6PrefixSpecificationRequest, context: context)
        type = Types::Ipv6PrefixSpecificationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_prefix = params[:ipv6_prefix]
        type
      end
    end

    module Ipv6PrefixSpecificationResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Ipv6PrefixSpecificationResponse, context: context)
        type = Types::Ipv6PrefixSpecificationResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_prefix = params[:ipv6_prefix]
        type
      end
    end

    module Ipv6PrefixesList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Ipv6PrefixSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Ipv6Range
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Ipv6Range, context: context)
        type = Types::Ipv6Range.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr_ipv6 = params[:cidr_ipv6]
        type.description = params[:description]
        type
      end
    end

    module Ipv6RangeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Ipv6Range.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module KeyNameStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module KeyPairIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module KeyPairInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::KeyPairInfo, context: context)
        type = Types::KeyPairInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.key_pair_id = params[:key_pair_id]
        type.key_fingerprint = params[:key_fingerprint]
        type.key_name = params[:key_name]
        type.key_type = params[:key_type]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.public_key = params[:public_key]
        type.create_time = params[:create_time]
        type
      end
    end

    module KeyPairList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << KeyPairInfo.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LastError
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LastError, context: context)
        type = Types::LastError.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.message = params[:message]
        type.code = params[:code]
        type
      end
    end

    module LaunchPermission
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchPermission, context: context)
        type = Types::LaunchPermission.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group = params[:group]
        type.user_id = params[:user_id]
        type.organization_arn = params[:organization_arn]
        type.organizational_unit_arn = params[:organizational_unit_arn]
        type
      end
    end

    module LaunchPermissionList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LaunchPermission.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchPermissionModifications
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchPermissionModifications, context: context)
        type = Types::LaunchPermissionModifications.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.add = LaunchPermissionList.build(params[:add], context: "#{context}[:add]") unless params[:add].nil?
        type.remove = LaunchPermissionList.build(params[:remove], context: "#{context}[:remove]") unless params[:remove].nil?
        type
      end
    end

    module LaunchSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchSpecification, context: context)
        type = Types::LaunchSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.user_data = params[:user_data]
        type.security_groups = GroupIdentifierList.build(params[:security_groups], context: "#{context}[:security_groups]") unless params[:security_groups].nil?
        type.addressing_type = params[:addressing_type]
        type.block_device_mappings = BlockDeviceMappingList.build(params[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless params[:block_device_mappings].nil?
        type.ebs_optimized = params[:ebs_optimized]
        type.iam_instance_profile = IamInstanceProfileSpecification.build(params[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless params[:iam_instance_profile].nil?
        type.image_id = params[:image_id]
        type.instance_type = params[:instance_type]
        type.kernel_id = params[:kernel_id]
        type.key_name = params[:key_name]
        type.network_interfaces = InstanceNetworkInterfaceSpecificationList.build(params[:network_interfaces], context: "#{context}[:network_interfaces]") unless params[:network_interfaces].nil?
        type.placement = SpotPlacement.build(params[:placement], context: "#{context}[:placement]") unless params[:placement].nil?
        type.ramdisk_id = params[:ramdisk_id]
        type.subnet_id = params[:subnet_id]
        type.monitoring = RunInstancesMonitoringEnabled.build(params[:monitoring], context: "#{context}[:monitoring]") unless params[:monitoring].nil?
        type
      end
    end

    module LaunchSpecsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SpotFleetLaunchSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchTemplate
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplate, context: context)
        type = Types::LaunchTemplate.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_id = params[:launch_template_id]
        type.launch_template_name = params[:launch_template_name]
        type.create_time = params[:create_time]
        type.created_by = params[:created_by]
        type.default_version_number = params[:default_version_number]
        type.latest_version_number = params[:latest_version_number]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module LaunchTemplateAndOverridesResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateAndOverridesResponse, context: context)
        type = Types::LaunchTemplateAndOverridesResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_specification = FleetLaunchTemplateSpecification.build(params[:launch_template_specification], context: "#{context}[:launch_template_specification]") unless params[:launch_template_specification].nil?
        type.overrides = FleetLaunchTemplateOverrides.build(params[:overrides], context: "#{context}[:overrides]") unless params[:overrides].nil?
        type
      end
    end

    module LaunchTemplateBlockDeviceMapping
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateBlockDeviceMapping, context: context)
        type = Types::LaunchTemplateBlockDeviceMapping.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.device_name = params[:device_name]
        type.virtual_name = params[:virtual_name]
        type.ebs = LaunchTemplateEbsBlockDevice.build(params[:ebs], context: "#{context}[:ebs]") unless params[:ebs].nil?
        type.no_device = params[:no_device]
        type
      end
    end

    module LaunchTemplateBlockDeviceMappingList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LaunchTemplateBlockDeviceMapping.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchTemplateBlockDeviceMappingRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateBlockDeviceMappingRequest, context: context)
        type = Types::LaunchTemplateBlockDeviceMappingRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.device_name = params[:device_name]
        type.virtual_name = params[:virtual_name]
        type.ebs = LaunchTemplateEbsBlockDeviceRequest.build(params[:ebs], context: "#{context}[:ebs]") unless params[:ebs].nil?
        type.no_device = params[:no_device]
        type
      end
    end

    module LaunchTemplateBlockDeviceMappingRequestList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LaunchTemplateBlockDeviceMappingRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchTemplateCapacityReservationSpecificationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateCapacityReservationSpecificationRequest, context: context)
        type = Types::LaunchTemplateCapacityReservationSpecificationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_preference = params[:capacity_reservation_preference]
        type.capacity_reservation_target = CapacityReservationTarget.build(params[:capacity_reservation_target], context: "#{context}[:capacity_reservation_target]") unless params[:capacity_reservation_target].nil?
        type
      end
    end

    module LaunchTemplateCapacityReservationSpecificationResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateCapacityReservationSpecificationResponse, context: context)
        type = Types::LaunchTemplateCapacityReservationSpecificationResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_preference = params[:capacity_reservation_preference]
        type.capacity_reservation_target = CapacityReservationTargetResponse.build(params[:capacity_reservation_target], context: "#{context}[:capacity_reservation_target]") unless params[:capacity_reservation_target].nil?
        type
      end
    end

    module LaunchTemplateConfig
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateConfig, context: context)
        type = Types::LaunchTemplateConfig.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_specification = FleetLaunchTemplateSpecification.build(params[:launch_template_specification], context: "#{context}[:launch_template_specification]") unless params[:launch_template_specification].nil?
        type.overrides = LaunchTemplateOverridesList.build(params[:overrides], context: "#{context}[:overrides]") unless params[:overrides].nil?
        type
      end
    end

    module LaunchTemplateConfigList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LaunchTemplateConfig.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchTemplateCpuOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateCpuOptions, context: context)
        type = Types::LaunchTemplateCpuOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.core_count = params[:core_count]
        type.threads_per_core = params[:threads_per_core]
        type.amd_sev_snp = params[:amd_sev_snp]
        type
      end
    end

    module LaunchTemplateCpuOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateCpuOptionsRequest, context: context)
        type = Types::LaunchTemplateCpuOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.core_count = params[:core_count]
        type.threads_per_core = params[:threads_per_core]
        type.amd_sev_snp = params[:amd_sev_snp]
        type
      end
    end

    module LaunchTemplateEbsBlockDevice
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateEbsBlockDevice, context: context)
        type = Types::LaunchTemplateEbsBlockDevice.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.encrypted = params[:encrypted]
        type.delete_on_termination = params[:delete_on_termination]
        type.iops = params[:iops]
        type.kms_key_id = params[:kms_key_id]
        type.snapshot_id = params[:snapshot_id]
        type.volume_size = params[:volume_size]
        type.volume_type = params[:volume_type]
        type.throughput = params[:throughput]
        type
      end
    end

    module LaunchTemplateEbsBlockDeviceRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateEbsBlockDeviceRequest, context: context)
        type = Types::LaunchTemplateEbsBlockDeviceRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.encrypted = params[:encrypted]
        type.delete_on_termination = params[:delete_on_termination]
        type.iops = params[:iops]
        type.kms_key_id = params[:kms_key_id]
        type.snapshot_id = params[:snapshot_id]
        type.volume_size = params[:volume_size]
        type.volume_type = params[:volume_type]
        type.throughput = params[:throughput]
        type
      end
    end

    module LaunchTemplateElasticInferenceAccelerator
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateElasticInferenceAccelerator, context: context)
        type = Types::LaunchTemplateElasticInferenceAccelerator.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.type = params[:type]
        type.count = params[:count]
        type
      end
    end

    module LaunchTemplateElasticInferenceAcceleratorList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LaunchTemplateElasticInferenceAccelerator.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchTemplateElasticInferenceAcceleratorResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateElasticInferenceAcceleratorResponse, context: context)
        type = Types::LaunchTemplateElasticInferenceAcceleratorResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.type = params[:type]
        type.count = params[:count]
        type
      end
    end

    module LaunchTemplateElasticInferenceAcceleratorResponseList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LaunchTemplateElasticInferenceAcceleratorResponse.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchTemplateEnaSrdSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateEnaSrdSpecification, context: context)
        type = Types::LaunchTemplateEnaSrdSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ena_srd_enabled = params[:ena_srd_enabled]
        type.ena_srd_udp_specification = LaunchTemplateEnaSrdUdpSpecification.build(params[:ena_srd_udp_specification], context: "#{context}[:ena_srd_udp_specification]") unless params[:ena_srd_udp_specification].nil?
        type
      end
    end

    module LaunchTemplateEnaSrdUdpSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateEnaSrdUdpSpecification, context: context)
        type = Types::LaunchTemplateEnaSrdUdpSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ena_srd_udp_enabled = params[:ena_srd_udp_enabled]
        type
      end
    end

    module LaunchTemplateEnclaveOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateEnclaveOptions, context: context)
        type = Types::LaunchTemplateEnclaveOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type
      end
    end

    module LaunchTemplateEnclaveOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateEnclaveOptionsRequest, context: context)
        type = Types::LaunchTemplateEnclaveOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type
      end
    end

    module LaunchTemplateHibernationOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateHibernationOptions, context: context)
        type = Types::LaunchTemplateHibernationOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.configured = params[:configured]
        type
      end
    end

    module LaunchTemplateHibernationOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateHibernationOptionsRequest, context: context)
        type = Types::LaunchTemplateHibernationOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.configured = params[:configured]
        type
      end
    end

    module LaunchTemplateIamInstanceProfileSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateIamInstanceProfileSpecification, context: context)
        type = Types::LaunchTemplateIamInstanceProfileSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.arn = params[:arn]
        type.name = params[:name]
        type
      end
    end

    module LaunchTemplateIamInstanceProfileSpecificationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateIamInstanceProfileSpecificationRequest, context: context)
        type = Types::LaunchTemplateIamInstanceProfileSpecificationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.arn = params[:arn]
        type.name = params[:name]
        type
      end
    end

    module LaunchTemplateIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module LaunchTemplateInstanceMaintenanceOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateInstanceMaintenanceOptions, context: context)
        type = Types::LaunchTemplateInstanceMaintenanceOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.auto_recovery = params[:auto_recovery]
        type
      end
    end

    module LaunchTemplateInstanceMaintenanceOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateInstanceMaintenanceOptionsRequest, context: context)
        type = Types::LaunchTemplateInstanceMaintenanceOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.auto_recovery = params[:auto_recovery]
        type
      end
    end

    module LaunchTemplateInstanceMarketOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateInstanceMarketOptions, context: context)
        type = Types::LaunchTemplateInstanceMarketOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.market_type = params[:market_type]
        type.spot_options = LaunchTemplateSpotMarketOptions.build(params[:spot_options], context: "#{context}[:spot_options]") unless params[:spot_options].nil?
        type
      end
    end

    module LaunchTemplateInstanceMarketOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateInstanceMarketOptionsRequest, context: context)
        type = Types::LaunchTemplateInstanceMarketOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.market_type = params[:market_type]
        type.spot_options = LaunchTemplateSpotMarketOptionsRequest.build(params[:spot_options], context: "#{context}[:spot_options]") unless params[:spot_options].nil?
        type
      end
    end

    module LaunchTemplateInstanceMetadataOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateInstanceMetadataOptions, context: context)
        type = Types::LaunchTemplateInstanceMetadataOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.state = params[:state]
        type.http_tokens = params[:http_tokens]
        type.http_put_response_hop_limit = params[:http_put_response_hop_limit]
        type.http_endpoint = params[:http_endpoint]
        type.http_protocol_ipv6 = params[:http_protocol_ipv6]
        type.instance_metadata_tags = params[:instance_metadata_tags]
        type
      end
    end

    module LaunchTemplateInstanceMetadataOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateInstanceMetadataOptionsRequest, context: context)
        type = Types::LaunchTemplateInstanceMetadataOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.http_tokens = params[:http_tokens]
        type.http_put_response_hop_limit = params[:http_put_response_hop_limit]
        type.http_endpoint = params[:http_endpoint]
        type.http_protocol_ipv6 = params[:http_protocol_ipv6]
        type.instance_metadata_tags = params[:instance_metadata_tags]
        type
      end
    end

    module LaunchTemplateInstanceNetworkInterfaceSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateInstanceNetworkInterfaceSpecification, context: context)
        type = Types::LaunchTemplateInstanceNetworkInterfaceSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.associate_carrier_ip_address = params[:associate_carrier_ip_address]
        type.associate_public_ip_address = params[:associate_public_ip_address]
        type.delete_on_termination = params[:delete_on_termination]
        type.description = params[:description]
        type.device_index = params[:device_index]
        type.groups = GroupIdStringList.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.interface_type = params[:interface_type]
        type.ipv6_address_count = params[:ipv6_address_count]
        type.ipv6_addresses = InstanceIpv6AddressList.build(params[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless params[:ipv6_addresses].nil?
        type.network_interface_id = params[:network_interface_id]
        type.private_ip_address = params[:private_ip_address]
        type.private_ip_addresses = PrivateIpAddressSpecificationList.build(params[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless params[:private_ip_addresses].nil?
        type.secondary_private_ip_address_count = params[:secondary_private_ip_address_count]
        type.subnet_id = params[:subnet_id]
        type.network_card_index = params[:network_card_index]
        type.ipv4_prefixes = Ipv4PrefixListResponse.build(params[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless params[:ipv4_prefixes].nil?
        type.ipv4_prefix_count = params[:ipv4_prefix_count]
        type.ipv6_prefixes = Ipv6PrefixListResponse.build(params[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless params[:ipv6_prefixes].nil?
        type.ipv6_prefix_count = params[:ipv6_prefix_count]
        type.primary_ipv6 = params[:primary_ipv6]
        type.ena_srd_specification = LaunchTemplateEnaSrdSpecification.build(params[:ena_srd_specification], context: "#{context}[:ena_srd_specification]") unless params[:ena_srd_specification].nil?
        type.connection_tracking_specification = ConnectionTrackingSpecification.build(params[:connection_tracking_specification], context: "#{context}[:connection_tracking_specification]") unless params[:connection_tracking_specification].nil?
        type
      end
    end

    module LaunchTemplateInstanceNetworkInterfaceSpecificationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LaunchTemplateInstanceNetworkInterfaceSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchTemplateInstanceNetworkInterfaceSpecificationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest, context: context)
        type = Types::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.associate_carrier_ip_address = params[:associate_carrier_ip_address]
        type.associate_public_ip_address = params[:associate_public_ip_address]
        type.delete_on_termination = params[:delete_on_termination]
        type.description = params[:description]
        type.device_index = params[:device_index]
        type.groups = SecurityGroupIdStringList.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.interface_type = params[:interface_type]
        type.ipv6_address_count = params[:ipv6_address_count]
        type.ipv6_addresses = InstanceIpv6AddressListRequest.build(params[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless params[:ipv6_addresses].nil?
        type.network_interface_id = params[:network_interface_id]
        type.private_ip_address = params[:private_ip_address]
        type.private_ip_addresses = PrivateIpAddressSpecificationList.build(params[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless params[:private_ip_addresses].nil?
        type.secondary_private_ip_address_count = params[:secondary_private_ip_address_count]
        type.subnet_id = params[:subnet_id]
        type.network_card_index = params[:network_card_index]
        type.ipv4_prefixes = Ipv4PrefixList.build(params[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless params[:ipv4_prefixes].nil?
        type.ipv4_prefix_count = params[:ipv4_prefix_count]
        type.ipv6_prefixes = Ipv6PrefixList.build(params[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless params[:ipv6_prefixes].nil?
        type.ipv6_prefix_count = params[:ipv6_prefix_count]
        type.primary_ipv6 = params[:primary_ipv6]
        type.ena_srd_specification = EnaSrdSpecificationRequest.build(params[:ena_srd_specification], context: "#{context}[:ena_srd_specification]") unless params[:ena_srd_specification].nil?
        type.connection_tracking_specification = ConnectionTrackingSpecificationRequest.build(params[:connection_tracking_specification], context: "#{context}[:connection_tracking_specification]") unless params[:connection_tracking_specification].nil?
        type
      end
    end

    module LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LaunchTemplateInstanceNetworkInterfaceSpecificationRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchTemplateLicenseConfiguration
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateLicenseConfiguration, context: context)
        type = Types::LaunchTemplateLicenseConfiguration.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.license_configuration_arn = params[:license_configuration_arn]
        type
      end
    end

    module LaunchTemplateLicenseConfigurationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateLicenseConfigurationRequest, context: context)
        type = Types::LaunchTemplateLicenseConfigurationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.license_configuration_arn = params[:license_configuration_arn]
        type
      end
    end

    module LaunchTemplateLicenseList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LaunchTemplateLicenseConfiguration.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchTemplateLicenseSpecificationListRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LaunchTemplateLicenseConfigurationRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchTemplateNameStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module LaunchTemplateOverrides
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateOverrides, context: context)
        type = Types::LaunchTemplateOverrides.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_type = params[:instance_type]
        type.spot_price = params[:spot_price]
        type.subnet_id = params[:subnet_id]
        type.availability_zone = params[:availability_zone]
        type.weighted_capacity = params[:weighted_capacity]&.to_f
        type.priority = params[:priority]&.to_f
        type.instance_requirements = InstanceRequirements.build(params[:instance_requirements], context: "#{context}[:instance_requirements]") unless params[:instance_requirements].nil?
        type
      end
    end

    module LaunchTemplateOverridesList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LaunchTemplateOverrides.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchTemplatePlacement
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplatePlacement, context: context)
        type = Types::LaunchTemplatePlacement.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.affinity = params[:affinity]
        type.group_name = params[:group_name]
        type.host_id = params[:host_id]
        type.tenancy = params[:tenancy]
        type.spread_domain = params[:spread_domain]
        type.host_resource_group_arn = params[:host_resource_group_arn]
        type.partition_number = params[:partition_number]
        type.group_id = params[:group_id]
        type
      end
    end

    module LaunchTemplatePlacementRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplatePlacementRequest, context: context)
        type = Types::LaunchTemplatePlacementRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.affinity = params[:affinity]
        type.group_name = params[:group_name]
        type.host_id = params[:host_id]
        type.tenancy = params[:tenancy]
        type.spread_domain = params[:spread_domain]
        type.host_resource_group_arn = params[:host_resource_group_arn]
        type.partition_number = params[:partition_number]
        type.group_id = params[:group_id]
        type
      end
    end

    module LaunchTemplatePrivateDnsNameOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplatePrivateDnsNameOptions, context: context)
        type = Types::LaunchTemplatePrivateDnsNameOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.hostname_type = params[:hostname_type]
        type.enable_resource_name_dns_a_record = params[:enable_resource_name_dns_a_record]
        type.enable_resource_name_dns_aaaa_record = params[:enable_resource_name_dns_aaaa_record]
        type
      end
    end

    module LaunchTemplatePrivateDnsNameOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplatePrivateDnsNameOptionsRequest, context: context)
        type = Types::LaunchTemplatePrivateDnsNameOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.hostname_type = params[:hostname_type]
        type.enable_resource_name_dns_a_record = params[:enable_resource_name_dns_a_record]
        type.enable_resource_name_dns_aaaa_record = params[:enable_resource_name_dns_aaaa_record]
        type
      end
    end

    module LaunchTemplateSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LaunchTemplate.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchTemplateSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateSpecification, context: context)
        type = Types::LaunchTemplateSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_id = params[:launch_template_id]
        type.launch_template_name = params[:launch_template_name]
        type.version = params[:version]
        type
      end
    end

    module LaunchTemplateSpotMarketOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateSpotMarketOptions, context: context)
        type = Types::LaunchTemplateSpotMarketOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.max_price = params[:max_price]
        type.spot_instance_type = params[:spot_instance_type]
        type.block_duration_minutes = params[:block_duration_minutes]
        type.valid_until = params[:valid_until]
        type.instance_interruption_behavior = params[:instance_interruption_behavior]
        type
      end
    end

    module LaunchTemplateSpotMarketOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateSpotMarketOptionsRequest, context: context)
        type = Types::LaunchTemplateSpotMarketOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.max_price = params[:max_price]
        type.spot_instance_type = params[:spot_instance_type]
        type.block_duration_minutes = params[:block_duration_minutes]
        type.valid_until = params[:valid_until]
        type.instance_interruption_behavior = params[:instance_interruption_behavior]
        type
      end
    end

    module LaunchTemplateTagSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateTagSpecification, context: context)
        type = Types::LaunchTemplateTagSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.resource_type = params[:resource_type]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module LaunchTemplateTagSpecificationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LaunchTemplateTagSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchTemplateTagSpecificationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateTagSpecificationRequest, context: context)
        type = Types::LaunchTemplateTagSpecificationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.resource_type = params[:resource_type]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module LaunchTemplateTagSpecificationRequestList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LaunchTemplateTagSpecificationRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchTemplateVersion
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplateVersion, context: context)
        type = Types::LaunchTemplateVersion.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template_id = params[:launch_template_id]
        type.launch_template_name = params[:launch_template_name]
        type.version_number = params[:version_number]
        type.version_description = params[:version_description]
        type.create_time = params[:create_time]
        type.created_by = params[:created_by]
        type.default_version = params[:default_version]
        type.launch_template_data = ResponseLaunchTemplateData.build(params[:launch_template_data], context: "#{context}[:launch_template_data]") unless params[:launch_template_data].nil?
        type
      end
    end

    module LaunchTemplateVersionSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LaunchTemplateVersion.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LaunchTemplatesMonitoring
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplatesMonitoring, context: context)
        type = Types::LaunchTemplatesMonitoring.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type
      end
    end

    module LaunchTemplatesMonitoringRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LaunchTemplatesMonitoringRequest, context: context)
        type = Types::LaunchTemplatesMonitoringRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type
      end
    end

    module LicenseConfiguration
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LicenseConfiguration, context: context)
        type = Types::LicenseConfiguration.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.license_configuration_arn = params[:license_configuration_arn]
        type
      end
    end

    module LicenseConfigurationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LicenseConfigurationRequest, context: context)
        type = Types::LicenseConfigurationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.license_configuration_arn = params[:license_configuration_arn]
        type
      end
    end

    module LicenseList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LicenseConfiguration.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LicenseSpecificationListRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LicenseConfigurationRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ListImagesInRecycleBinInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ListImagesInRecycleBinInput, context: context)
        type = Types::ListImagesInRecycleBinInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_ids = ImageIdStringList.build(params[:image_ids], context: "#{context}[:image_ids]") unless params[:image_ids].nil?
        type.next_token = params[:next_token]
        type.max_results = params[:max_results]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ListImagesInRecycleBinOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ListImagesInRecycleBinOutput, context: context)
        type = Types::ListImagesInRecycleBinOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.images = ImageRecycleBinInfoList.build(params[:images], context: "#{context}[:images]") unless params[:images].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module ListSnapshotsInRecycleBinInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ListSnapshotsInRecycleBinInput, context: context)
        type = Types::ListSnapshotsInRecycleBinInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.snapshot_ids = SnapshotIdStringList.build(params[:snapshot_ids], context: "#{context}[:snapshot_ids]") unless params[:snapshot_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ListSnapshotsInRecycleBinOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ListSnapshotsInRecycleBinOutput, context: context)
        type = Types::ListSnapshotsInRecycleBinOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshots = SnapshotRecycleBinInfoList.build(params[:snapshots], context: "#{context}[:snapshots]") unless params[:snapshots].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module LoadBalancersConfig
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LoadBalancersConfig, context: context)
        type = Types::LoadBalancersConfig.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.classic_load_balancers_config = ClassicLoadBalancersConfig.build(params[:classic_load_balancers_config], context: "#{context}[:classic_load_balancers_config]") unless params[:classic_load_balancers_config].nil?
        type.target_groups_config = TargetGroupsConfig.build(params[:target_groups_config], context: "#{context}[:target_groups_config]") unless params[:target_groups_config].nil?
        type
      end
    end

    module LoadPermission
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LoadPermission, context: context)
        type = Types::LoadPermission.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.user_id = params[:user_id]
        type.group = params[:group]
        type
      end
    end

    module LoadPermissionList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LoadPermission.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LoadPermissionListRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LoadPermissionRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LoadPermissionModifications
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LoadPermissionModifications, context: context)
        type = Types::LoadPermissionModifications.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.add = LoadPermissionListRequest.build(params[:add], context: "#{context}[:add]") unless params[:add].nil?
        type.remove = LoadPermissionListRequest.build(params[:remove], context: "#{context}[:remove]") unless params[:remove].nil?
        type
      end
    end

    module LoadPermissionRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LoadPermissionRequest, context: context)
        type = Types::LoadPermissionRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group = params[:group]
        type.user_id = params[:user_id]
        type
      end
    end

    module LocalGateway
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LocalGateway, context: context)
        type = Types::LocalGateway.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_id = params[:local_gateway_id]
        type.outpost_arn = params[:outpost_arn]
        type.owner_id = params[:owner_id]
        type.state = params[:state]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module LocalGatewayIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module LocalGatewayRoute
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LocalGatewayRoute, context: context)
        type = Types::LocalGatewayRoute.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr_block = params[:destination_cidr_block]
        type.local_gateway_virtual_interface_group_id = params[:local_gateway_virtual_interface_group_id]
        type.type = params[:type]
        type.state = params[:state]
        type.local_gateway_route_table_id = params[:local_gateway_route_table_id]
        type.local_gateway_route_table_arn = params[:local_gateway_route_table_arn]
        type.owner_id = params[:owner_id]
        type.subnet_id = params[:subnet_id]
        type.coip_pool_id = params[:coip_pool_id]
        type.network_interface_id = params[:network_interface_id]
        type.destination_prefix_list_id = params[:destination_prefix_list_id]
        type
      end
    end

    module LocalGatewayRouteList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LocalGatewayRoute.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LocalGatewayRouteTable
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LocalGatewayRouteTable, context: context)
        type = Types::LocalGatewayRouteTable.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_id = params[:local_gateway_route_table_id]
        type.local_gateway_route_table_arn = params[:local_gateway_route_table_arn]
        type.local_gateway_id = params[:local_gateway_id]
        type.outpost_arn = params[:outpost_arn]
        type.owner_id = params[:owner_id]
        type.state = params[:state]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.mode = params[:mode]
        type.state_reason = StateReason.build(params[:state_reason], context: "#{context}[:state_reason]") unless params[:state_reason].nil?
        type
      end
    end

    module LocalGatewayRouteTableIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module LocalGatewayRouteTableSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LocalGatewayRouteTable.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LocalGatewayRouteTableVirtualInterfaceGroupAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LocalGatewayRouteTableVirtualInterfaceGroupAssociation, context: context)
        type = Types::LocalGatewayRouteTableVirtualInterfaceGroupAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_virtual_interface_group_association_id = params[:local_gateway_route_table_virtual_interface_group_association_id]
        type.local_gateway_virtual_interface_group_id = params[:local_gateway_virtual_interface_group_id]
        type.local_gateway_id = params[:local_gateway_id]
        type.local_gateway_route_table_id = params[:local_gateway_route_table_id]
        type.local_gateway_route_table_arn = params[:local_gateway_route_table_arn]
        type.owner_id = params[:owner_id]
        type.state = params[:state]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LocalGatewayRouteTableVirtualInterfaceGroupAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LocalGatewayRouteTableVpcAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LocalGatewayRouteTableVpcAssociation, context: context)
        type = Types::LocalGatewayRouteTableVpcAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_vpc_association_id = params[:local_gateway_route_table_vpc_association_id]
        type.local_gateway_route_table_id = params[:local_gateway_route_table_id]
        type.local_gateway_route_table_arn = params[:local_gateway_route_table_arn]
        type.local_gateway_id = params[:local_gateway_id]
        type.vpc_id = params[:vpc_id]
        type.owner_id = params[:owner_id]
        type.state = params[:state]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module LocalGatewayRouteTableVpcAssociationIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module LocalGatewayRouteTableVpcAssociationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LocalGatewayRouteTableVpcAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LocalGatewaySet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LocalGateway.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LocalGatewayVirtualInterface
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LocalGatewayVirtualInterface, context: context)
        type = Types::LocalGatewayVirtualInterface.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_virtual_interface_id = params[:local_gateway_virtual_interface_id]
        type.local_gateway_id = params[:local_gateway_id]
        type.vlan = params[:vlan]
        type.local_address = params[:local_address]
        type.peer_address = params[:peer_address]
        type.local_bgp_asn = params[:local_bgp_asn]
        type.peer_bgp_asn = params[:peer_bgp_asn]
        type.owner_id = params[:owner_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module LocalGatewayVirtualInterfaceGroup
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LocalGatewayVirtualInterfaceGroup, context: context)
        type = Types::LocalGatewayVirtualInterfaceGroup.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_virtual_interface_group_id = params[:local_gateway_virtual_interface_group_id]
        type.local_gateway_virtual_interface_ids = LocalGatewayVirtualInterfaceIdSet.build(params[:local_gateway_virtual_interface_ids], context: "#{context}[:local_gateway_virtual_interface_ids]") unless params[:local_gateway_virtual_interface_ids].nil?
        type.local_gateway_id = params[:local_gateway_id]
        type.owner_id = params[:owner_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module LocalGatewayVirtualInterfaceGroupIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module LocalGatewayVirtualInterfaceGroupSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LocalGatewayVirtualInterfaceGroup.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LocalGatewayVirtualInterfaceIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module LocalGatewayVirtualInterfaceSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LocalGatewayVirtualInterface.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module LocalStorageTypeSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module LockSnapshotInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LockSnapshotInput, context: context)
        type = Types::LockSnapshotInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.dry_run = params[:dry_run]
        type.lock_mode = params[:lock_mode]
        type.cool_off_period = params[:cool_off_period]
        type.lock_duration = params[:lock_duration]
        type.expiration_date = params[:expiration_date]
        type
      end
    end

    module LockSnapshotOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LockSnapshotOutput, context: context)
        type = Types::LockSnapshotOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.lock_state = params[:lock_state]
        type.lock_duration = params[:lock_duration]
        type.cool_off_period = params[:cool_off_period]
        type.cool_off_period_expires_on = params[:cool_off_period_expires_on]
        type.lock_created_on = params[:lock_created_on]
        type.lock_expires_on = params[:lock_expires_on]
        type.lock_duration_start_time = params[:lock_duration_start_time]
        type
      end
    end

    module LockedSnapshotsInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::LockedSnapshotsInfo, context: context)
        type = Types::LockedSnapshotsInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.owner_id = params[:owner_id]
        type.snapshot_id = params[:snapshot_id]
        type.lock_state = params[:lock_state]
        type.lock_duration = params[:lock_duration]
        type.cool_off_period = params[:cool_off_period]
        type.cool_off_period_expires_on = params[:cool_off_period_expires_on]
        type.lock_created_on = params[:lock_created_on]
        type.lock_duration_start_time = params[:lock_duration_start_time]
        type.lock_expires_on = params[:lock_expires_on]
        type
      end
    end

    module LockedSnapshotsInfoList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << LockedSnapshotsInfo.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module MaintenanceDetails
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::MaintenanceDetails, context: context)
        type = Types::MaintenanceDetails.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.pending_maintenance = params[:pending_maintenance]
        type.maintenance_auto_applied_after = params[:maintenance_auto_applied_after]
        type.last_maintenance_applied = params[:last_maintenance_applied]
        type
      end
    end

    module ManagedPrefixList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ManagedPrefixList, context: context)
        type = Types::ManagedPrefixList.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.prefix_list_id = params[:prefix_list_id]
        type.address_family = params[:address_family]
        type.state = params[:state]
        type.state_message = params[:state_message]
        type.prefix_list_arn = params[:prefix_list_arn]
        type.prefix_list_name = params[:prefix_list_name]
        type.max_entries = params[:max_entries]
        type.version = params[:version]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.owner_id = params[:owner_id]
        type
      end
    end

    module ManagedPrefixListSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ManagedPrefixList.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module MemoryGiBPerVCpu
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::MemoryGiBPerVCpu, context: context)
        type = Types::MemoryGiBPerVCpu.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]&.to_f
        type.max = params[:max]&.to_f
        type
      end
    end

    module MemoryGiBPerVCpuRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::MemoryGiBPerVCpuRequest, context: context)
        type = Types::MemoryGiBPerVCpuRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]&.to_f
        type.max = params[:max]&.to_f
        type
      end
    end

    module MemoryInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::MemoryInfo, context: context)
        type = Types::MemoryInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.size_in_mi_b = params[:size_in_mi_b]
        type
      end
    end

    module MemoryMiB
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::MemoryMiB, context: context)
        type = Types::MemoryMiB.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]
        type.max = params[:max]
        type
      end
    end

    module MemoryMiBRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::MemoryMiBRequest, context: context)
        type = Types::MemoryMiBRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]
        type.max = params[:max]
        type
      end
    end

    module MetricPoint
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::MetricPoint, context: context)
        type = Types::MetricPoint.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.start_date = params[:start_date]
        type.end_date = params[:end_date]
        type.value = params[:value]&.to_f
        type.status = params[:status]
        type
      end
    end

    module MetricPoints
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << MetricPoint.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ModifyAddressAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyAddressAttributeInput, context: context)
        type = Types::ModifyAddressAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_id = params[:allocation_id]
        type.domain_name = params[:domain_name]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyAddressAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyAddressAttributeOutput, context: context)
        type = Types::ModifyAddressAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.address = AddressAttribute.build(params[:address], context: "#{context}[:address]") unless params[:address].nil?
        type
      end
    end

    module ModifyAvailabilityZoneGroupInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyAvailabilityZoneGroupInput, context: context)
        type = Types::ModifyAvailabilityZoneGroupInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group_name = params[:group_name]
        type.opt_in_status = params[:opt_in_status]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyAvailabilityZoneGroupOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyAvailabilityZoneGroupOutput, context: context)
        type = Types::ModifyAvailabilityZoneGroupOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ModifyCapacityReservationFleetInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyCapacityReservationFleetInput, context: context)
        type = Types::ModifyCapacityReservationFleetInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_fleet_id = params[:capacity_reservation_fleet_id]
        type.total_target_capacity = params[:total_target_capacity]
        type.end_date = params[:end_date]
        type.dry_run = params[:dry_run]
        type.remove_end_date = params[:remove_end_date]
        type
      end
    end

    module ModifyCapacityReservationFleetOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyCapacityReservationFleetOutput, context: context)
        type = Types::ModifyCapacityReservationFleetOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ModifyCapacityReservationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyCapacityReservationInput, context: context)
        type = Types::ModifyCapacityReservationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation_id = params[:capacity_reservation_id]
        type.instance_count = params[:instance_count]
        type.end_date = params[:end_date]
        type.end_date_type = params[:end_date_type]
        type.accept = params[:accept]
        type.dry_run = params[:dry_run]
        type.additional_info = params[:additional_info]
        type
      end
    end

    module ModifyCapacityReservationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyCapacityReservationOutput, context: context)
        type = Types::ModifyCapacityReservationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ModifyClientVpnEndpointInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyClientVpnEndpointInput, context: context)
        type = Types::ModifyClientVpnEndpointInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.server_certificate_arn = params[:server_certificate_arn]
        type.connection_log_options = ConnectionLogOptions.build(params[:connection_log_options], context: "#{context}[:connection_log_options]") unless params[:connection_log_options].nil?
        type.dns_servers = DnsServersOptionsModifyStructure.build(params[:dns_servers], context: "#{context}[:dns_servers]") unless params[:dns_servers].nil?
        type.vpn_port = params[:vpn_port]
        type.description = params[:description]
        type.split_tunnel = params[:split_tunnel]
        type.dry_run = params[:dry_run]
        type.security_group_ids = ClientVpnSecurityGroupIdSet.build(params[:security_group_ids], context: "#{context}[:security_group_ids]") unless params[:security_group_ids].nil?
        type.vpc_id = params[:vpc_id]
        type.self_service_portal = params[:self_service_portal]
        type.client_connect_options = ClientConnectOptions.build(params[:client_connect_options], context: "#{context}[:client_connect_options]") unless params[:client_connect_options].nil?
        type.session_timeout_hours = params[:session_timeout_hours]
        type.client_login_banner_options = ClientLoginBannerOptions.build(params[:client_login_banner_options], context: "#{context}[:client_login_banner_options]") unless params[:client_login_banner_options].nil?
        type
      end
    end

    module ModifyClientVpnEndpointOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyClientVpnEndpointOutput, context: context)
        type = Types::ModifyClientVpnEndpointOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ModifyDefaultCreditSpecificationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyDefaultCreditSpecificationInput, context: context)
        type = Types::ModifyDefaultCreditSpecificationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.instance_family = params[:instance_family]
        type.cpu_credits = params[:cpu_credits]
        type
      end
    end

    module ModifyDefaultCreditSpecificationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyDefaultCreditSpecificationOutput, context: context)
        type = Types::ModifyDefaultCreditSpecificationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_family_credit_specification = InstanceFamilyCreditSpecification.build(params[:instance_family_credit_specification], context: "#{context}[:instance_family_credit_specification]") unless params[:instance_family_credit_specification].nil?
        type
      end
    end

    module ModifyEbsDefaultKmsKeyIdInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyEbsDefaultKmsKeyIdInput, context: context)
        type = Types::ModifyEbsDefaultKmsKeyIdInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.kms_key_id = params[:kms_key_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyEbsDefaultKmsKeyIdOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyEbsDefaultKmsKeyIdOutput, context: context)
        type = Types::ModifyEbsDefaultKmsKeyIdOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.kms_key_id = params[:kms_key_id]
        type
      end
    end

    module ModifyFleetInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyFleetInput, context: context)
        type = Types::ModifyFleetInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.excess_capacity_termination_policy = params[:excess_capacity_termination_policy]
        type.launch_template_configs = FleetLaunchTemplateConfigListRequest.build(params[:launch_template_configs], context: "#{context}[:launch_template_configs]") unless params[:launch_template_configs].nil?
        type.fleet_id = params[:fleet_id]
        type.target_capacity_specification = TargetCapacitySpecificationRequest.build(params[:target_capacity_specification], context: "#{context}[:target_capacity_specification]") unless params[:target_capacity_specification].nil?
        type.context = params[:context]
        type
      end
    end

    module ModifyFleetOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyFleetOutput, context: context)
        type = Types::ModifyFleetOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ModifyFpgaImageAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyFpgaImageAttributeInput, context: context)
        type = Types::ModifyFpgaImageAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.fpga_image_id = params[:fpga_image_id]
        type.attribute = params[:attribute]
        type.operation_type = params[:operation_type]
        type.user_ids = UserIdStringList.build(params[:user_ids], context: "#{context}[:user_ids]") unless params[:user_ids].nil?
        type.user_groups = UserGroupStringList.build(params[:user_groups], context: "#{context}[:user_groups]") unless params[:user_groups].nil?
        type.product_codes = ProductCodeStringList.build(params[:product_codes], context: "#{context}[:product_codes]") unless params[:product_codes].nil?
        type.load_permission = LoadPermissionModifications.build(params[:load_permission], context: "#{context}[:load_permission]") unless params[:load_permission].nil?
        type.description = params[:description]
        type.name = params[:name]
        type
      end
    end

    module ModifyFpgaImageAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyFpgaImageAttributeOutput, context: context)
        type = Types::ModifyFpgaImageAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.fpga_image_attribute = FpgaImageAttribute.build(params[:fpga_image_attribute], context: "#{context}[:fpga_image_attribute]") unless params[:fpga_image_attribute].nil?
        type
      end
    end

    module ModifyHostsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyHostsInput, context: context)
        type = Types::ModifyHostsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.auto_placement = params[:auto_placement]
        type.host_ids = RequestHostIdList.build(params[:host_ids], context: "#{context}[:host_ids]") unless params[:host_ids].nil?
        type.host_recovery = params[:host_recovery]
        type.instance_type = params[:instance_type]
        type.instance_family = params[:instance_family]
        type.host_maintenance = params[:host_maintenance]
        type
      end
    end

    module ModifyHostsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyHostsOutput, context: context)
        type = Types::ModifyHostsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.successful = ResponseHostIdList.build(params[:successful], context: "#{context}[:successful]") unless params[:successful].nil?
        type.unsuccessful = UnsuccessfulItemList.build(params[:unsuccessful], context: "#{context}[:unsuccessful]") unless params[:unsuccessful].nil?
        type
      end
    end

    module ModifyIdFormatInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyIdFormatInput, context: context)
        type = Types::ModifyIdFormatInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.resource = params[:resource]
        type.use_long_ids = params[:use_long_ids]
        type
      end
    end

    module ModifyIdFormatOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyIdFormatOutput, context: context)
        type = Types::ModifyIdFormatOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ModifyIdentityIdFormatInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyIdentityIdFormatInput, context: context)
        type = Types::ModifyIdentityIdFormatInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.principal_arn = params[:principal_arn]
        type.resource = params[:resource]
        type.use_long_ids = params[:use_long_ids]
        type
      end
    end

    module ModifyIdentityIdFormatOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyIdentityIdFormatOutput, context: context)
        type = Types::ModifyIdentityIdFormatOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ModifyImageAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyImageAttributeInput, context: context)
        type = Types::ModifyImageAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attribute = params[:attribute]
        type.description = AttributeValue.build(params[:description], context: "#{context}[:description]") unless params[:description].nil?
        type.image_id = params[:image_id]
        type.launch_permission = LaunchPermissionModifications.build(params[:launch_permission], context: "#{context}[:launch_permission]") unless params[:launch_permission].nil?
        type.operation_type = params[:operation_type]
        type.product_codes = ProductCodeStringList.build(params[:product_codes], context: "#{context}[:product_codes]") unless params[:product_codes].nil?
        type.user_groups = UserGroupStringList.build(params[:user_groups], context: "#{context}[:user_groups]") unless params[:user_groups].nil?
        type.user_ids = UserIdStringList.build(params[:user_ids], context: "#{context}[:user_ids]") unless params[:user_ids].nil?
        type.value = params[:value]
        type.dry_run = params[:dry_run]
        type.organization_arns = OrganizationArnStringList.build(params[:organization_arns], context: "#{context}[:organization_arns]") unless params[:organization_arns].nil?
        type.organizational_unit_arns = OrganizationalUnitArnStringList.build(params[:organizational_unit_arns], context: "#{context}[:organizational_unit_arns]") unless params[:organizational_unit_arns].nil?
        type.imds_support = AttributeValue.build(params[:imds_support], context: "#{context}[:imds_support]") unless params[:imds_support].nil?
        type
      end
    end

    module ModifyImageAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyImageAttributeOutput, context: context)
        type = Types::ModifyImageAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ModifyInstanceAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstanceAttributeInput, context: context)
        type = Types::ModifyInstanceAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.source_dest_check = AttributeBooleanValue.build(params[:source_dest_check], context: "#{context}[:source_dest_check]") unless params[:source_dest_check].nil?
        type.attribute = params[:attribute]
        type.block_device_mappings = InstanceBlockDeviceMappingSpecificationList.build(params[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless params[:block_device_mappings].nil?
        type.disable_api_termination = AttributeBooleanValue.build(params[:disable_api_termination], context: "#{context}[:disable_api_termination]") unless params[:disable_api_termination].nil?
        type.dry_run = params[:dry_run]
        type.ebs_optimized = AttributeBooleanValue.build(params[:ebs_optimized], context: "#{context}[:ebs_optimized]") unless params[:ebs_optimized].nil?
        type.ena_support = AttributeBooleanValue.build(params[:ena_support], context: "#{context}[:ena_support]") unless params[:ena_support].nil?
        type.groups = GroupIdStringList.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.instance_id = params[:instance_id]
        type.instance_initiated_shutdown_behavior = AttributeValue.build(params[:instance_initiated_shutdown_behavior], context: "#{context}[:instance_initiated_shutdown_behavior]") unless params[:instance_initiated_shutdown_behavior].nil?
        type.instance_type = AttributeValue.build(params[:instance_type], context: "#{context}[:instance_type]") unless params[:instance_type].nil?
        type.kernel = AttributeValue.build(params[:kernel], context: "#{context}[:kernel]") unless params[:kernel].nil?
        type.ramdisk = AttributeValue.build(params[:ramdisk], context: "#{context}[:ramdisk]") unless params[:ramdisk].nil?
        type.sriov_net_support = AttributeValue.build(params[:sriov_net_support], context: "#{context}[:sriov_net_support]") unless params[:sriov_net_support].nil?
        type.user_data = BlobAttributeValue.build(params[:user_data], context: "#{context}[:user_data]") unless params[:user_data].nil?
        type.value = params[:value]
        type.disable_api_stop = AttributeBooleanValue.build(params[:disable_api_stop], context: "#{context}[:disable_api_stop]") unless params[:disable_api_stop].nil?
        type
      end
    end

    module ModifyInstanceAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstanceAttributeOutput, context: context)
        type = Types::ModifyInstanceAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ModifyInstanceCapacityReservationAttributesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstanceCapacityReservationAttributesInput, context: context)
        type = Types::ModifyInstanceCapacityReservationAttributesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.capacity_reservation_specification = CapacityReservationSpecification.build(params[:capacity_reservation_specification], context: "#{context}[:capacity_reservation_specification]") unless params[:capacity_reservation_specification].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyInstanceCapacityReservationAttributesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstanceCapacityReservationAttributesOutput, context: context)
        type = Types::ModifyInstanceCapacityReservationAttributesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ModifyInstanceCreditSpecificationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstanceCreditSpecificationInput, context: context)
        type = Types::ModifyInstanceCreditSpecificationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token]
        type.instance_credit_specifications = InstanceCreditSpecificationListRequest.build(params[:instance_credit_specifications], context: "#{context}[:instance_credit_specifications]") unless params[:instance_credit_specifications].nil?
        type
      end
    end

    module ModifyInstanceCreditSpecificationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstanceCreditSpecificationOutput, context: context)
        type = Types::ModifyInstanceCreditSpecificationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.successful_instance_credit_specifications = SuccessfulInstanceCreditSpecificationSet.build(params[:successful_instance_credit_specifications], context: "#{context}[:successful_instance_credit_specifications]") unless params[:successful_instance_credit_specifications].nil?
        type.unsuccessful_instance_credit_specifications = UnsuccessfulInstanceCreditSpecificationSet.build(params[:unsuccessful_instance_credit_specifications], context: "#{context}[:unsuccessful_instance_credit_specifications]") unless params[:unsuccessful_instance_credit_specifications].nil?
        type
      end
    end

    module ModifyInstanceEventStartTimeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstanceEventStartTimeInput, context: context)
        type = Types::ModifyInstanceEventStartTimeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.instance_id = params[:instance_id]
        type.instance_event_id = params[:instance_event_id]
        type.not_before = params[:not_before]
        type
      end
    end

    module ModifyInstanceEventStartTimeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstanceEventStartTimeOutput, context: context)
        type = Types::ModifyInstanceEventStartTimeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.event = InstanceStatusEvent.build(params[:event], context: "#{context}[:event]") unless params[:event].nil?
        type
      end
    end

    module ModifyInstanceEventWindowInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstanceEventWindowInput, context: context)
        type = Types::ModifyInstanceEventWindowInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.name = params[:name]
        type.instance_event_window_id = params[:instance_event_window_id]
        type.time_ranges = InstanceEventWindowTimeRangeRequestSet.build(params[:time_ranges], context: "#{context}[:time_ranges]") unless params[:time_ranges].nil?
        type.cron_expression = params[:cron_expression]
        type
      end
    end

    module ModifyInstanceEventWindowOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstanceEventWindowOutput, context: context)
        type = Types::ModifyInstanceEventWindowOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_event_window = InstanceEventWindow.build(params[:instance_event_window], context: "#{context}[:instance_event_window]") unless params[:instance_event_window].nil?
        type
      end
    end

    module ModifyInstanceMaintenanceOptionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstanceMaintenanceOptionsInput, context: context)
        type = Types::ModifyInstanceMaintenanceOptionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.auto_recovery = params[:auto_recovery]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyInstanceMaintenanceOptionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstanceMaintenanceOptionsOutput, context: context)
        type = Types::ModifyInstanceMaintenanceOptionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.auto_recovery = params[:auto_recovery]
        type
      end
    end

    module ModifyInstanceMetadataOptionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstanceMetadataOptionsInput, context: context)
        type = Types::ModifyInstanceMetadataOptionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.http_tokens = params[:http_tokens]
        type.http_put_response_hop_limit = params[:http_put_response_hop_limit]
        type.http_endpoint = params[:http_endpoint]
        type.dry_run = params[:dry_run]
        type.http_protocol_ipv6 = params[:http_protocol_ipv6]
        type.instance_metadata_tags = params[:instance_metadata_tags]
        type
      end
    end

    module ModifyInstanceMetadataOptionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstanceMetadataOptionsOutput, context: context)
        type = Types::ModifyInstanceMetadataOptionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.instance_metadata_options = InstanceMetadataOptionsResponse.build(params[:instance_metadata_options], context: "#{context}[:instance_metadata_options]") unless params[:instance_metadata_options].nil?
        type
      end
    end

    module ModifyInstancePlacementInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstancePlacementInput, context: context)
        type = Types::ModifyInstancePlacementInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.affinity = params[:affinity]
        type.group_name = params[:group_name]
        type.host_id = params[:host_id]
        type.instance_id = params[:instance_id]
        type.tenancy = params[:tenancy]
        type.partition_number = params[:partition_number]
        type.host_resource_group_arn = params[:host_resource_group_arn]
        type.group_id = params[:group_id]
        type
      end
    end

    module ModifyInstancePlacementOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyInstancePlacementOutput, context: context)
        type = Types::ModifyInstancePlacementOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ModifyIpamInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyIpamInput, context: context)
        type = Types::ModifyIpamInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_id = params[:ipam_id]
        type.description = params[:description]
        type.add_operating_regions = AddIpamOperatingRegionSet.build(params[:add_operating_regions], context: "#{context}[:add_operating_regions]") unless params[:add_operating_regions].nil?
        type.remove_operating_regions = RemoveIpamOperatingRegionSet.build(params[:remove_operating_regions], context: "#{context}[:remove_operating_regions]") unless params[:remove_operating_regions].nil?
        type.tier = params[:tier]
        type
      end
    end

    module ModifyIpamOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyIpamOutput, context: context)
        type = Types::ModifyIpamOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam = Ipam.build(params[:ipam], context: "#{context}[:ipam]") unless params[:ipam].nil?
        type
      end
    end

    module ModifyIpamPoolInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyIpamPoolInput, context: context)
        type = Types::ModifyIpamPoolInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_pool_id = params[:ipam_pool_id]
        type.description = params[:description]
        type.auto_import = params[:auto_import]
        type.allocation_min_netmask_length = params[:allocation_min_netmask_length]
        type.allocation_max_netmask_length = params[:allocation_max_netmask_length]
        type.allocation_default_netmask_length = params[:allocation_default_netmask_length]
        type.clear_allocation_default_netmask_length = params[:clear_allocation_default_netmask_length]
        type.add_allocation_resource_tags = RequestIpamResourceTagList.build(params[:add_allocation_resource_tags], context: "#{context}[:add_allocation_resource_tags]") unless params[:add_allocation_resource_tags].nil?
        type.remove_allocation_resource_tags = RequestIpamResourceTagList.build(params[:remove_allocation_resource_tags], context: "#{context}[:remove_allocation_resource_tags]") unless params[:remove_allocation_resource_tags].nil?
        type
      end
    end

    module ModifyIpamPoolOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyIpamPoolOutput, context: context)
        type = Types::ModifyIpamPoolOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_pool = IpamPool.build(params[:ipam_pool], context: "#{context}[:ipam_pool]") unless params[:ipam_pool].nil?
        type
      end
    end

    module ModifyIpamResourceCidrInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyIpamResourceCidrInput, context: context)
        type = Types::ModifyIpamResourceCidrInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.resource_id = params[:resource_id]
        type.resource_cidr = params[:resource_cidr]
        type.resource_region = params[:resource_region]
        type.current_ipam_scope_id = params[:current_ipam_scope_id]
        type.destination_ipam_scope_id = params[:destination_ipam_scope_id]
        type.monitored = params[:monitored]
        type
      end
    end

    module ModifyIpamResourceCidrOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyIpamResourceCidrOutput, context: context)
        type = Types::ModifyIpamResourceCidrOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_resource_cidr = IpamResourceCidr.build(params[:ipam_resource_cidr], context: "#{context}[:ipam_resource_cidr]") unless params[:ipam_resource_cidr].nil?
        type
      end
    end

    module ModifyIpamResourceDiscoveryInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyIpamResourceDiscoveryInput, context: context)
        type = Types::ModifyIpamResourceDiscoveryInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_resource_discovery_id = params[:ipam_resource_discovery_id]
        type.description = params[:description]
        type.add_operating_regions = AddIpamOperatingRegionSet.build(params[:add_operating_regions], context: "#{context}[:add_operating_regions]") unless params[:add_operating_regions].nil?
        type.remove_operating_regions = RemoveIpamOperatingRegionSet.build(params[:remove_operating_regions], context: "#{context}[:remove_operating_regions]") unless params[:remove_operating_regions].nil?
        type
      end
    end

    module ModifyIpamResourceDiscoveryOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyIpamResourceDiscoveryOutput, context: context)
        type = Types::ModifyIpamResourceDiscoveryOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_resource_discovery = IpamResourceDiscovery.build(params[:ipam_resource_discovery], context: "#{context}[:ipam_resource_discovery]") unless params[:ipam_resource_discovery].nil?
        type
      end
    end

    module ModifyIpamScopeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyIpamScopeInput, context: context)
        type = Types::ModifyIpamScopeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_scope_id = params[:ipam_scope_id]
        type.description = params[:description]
        type
      end
    end

    module ModifyIpamScopeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyIpamScopeOutput, context: context)
        type = Types::ModifyIpamScopeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_scope = IpamScope.build(params[:ipam_scope], context: "#{context}[:ipam_scope]") unless params[:ipam_scope].nil?
        type
      end
    end

    module ModifyLaunchTemplateInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyLaunchTemplateInput, context: context)
        type = Types::ModifyLaunchTemplateInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token]
        type.launch_template_id = params[:launch_template_id]
        type.launch_template_name = params[:launch_template_name]
        type.default_version = params[:default_version]
        type
      end
    end

    module ModifyLaunchTemplateOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyLaunchTemplateOutput, context: context)
        type = Types::ModifyLaunchTemplateOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.launch_template = LaunchTemplate.build(params[:launch_template], context: "#{context}[:launch_template]") unless params[:launch_template].nil?
        type
      end
    end

    module ModifyLocalGatewayRouteInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyLocalGatewayRouteInput, context: context)
        type = Types::ModifyLocalGatewayRouteInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr_block = params[:destination_cidr_block]
        type.local_gateway_route_table_id = params[:local_gateway_route_table_id]
        type.local_gateway_virtual_interface_group_id = params[:local_gateway_virtual_interface_group_id]
        type.network_interface_id = params[:network_interface_id]
        type.dry_run = params[:dry_run]
        type.destination_prefix_list_id = params[:destination_prefix_list_id]
        type
      end
    end

    module ModifyLocalGatewayRouteOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyLocalGatewayRouteOutput, context: context)
        type = Types::ModifyLocalGatewayRouteOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.route = LocalGatewayRoute.build(params[:route], context: "#{context}[:route]") unless params[:route].nil?
        type
      end
    end

    module ModifyManagedPrefixListInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyManagedPrefixListInput, context: context)
        type = Types::ModifyManagedPrefixListInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.prefix_list_id = params[:prefix_list_id]
        type.current_version = params[:current_version]
        type.prefix_list_name = params[:prefix_list_name]
        type.add_entries = AddPrefixListEntries.build(params[:add_entries], context: "#{context}[:add_entries]") unless params[:add_entries].nil?
        type.remove_entries = RemovePrefixListEntries.build(params[:remove_entries], context: "#{context}[:remove_entries]") unless params[:remove_entries].nil?
        type.max_entries = params[:max_entries]
        type
      end
    end

    module ModifyManagedPrefixListOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyManagedPrefixListOutput, context: context)
        type = Types::ModifyManagedPrefixListOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.prefix_list = ManagedPrefixList.build(params[:prefix_list], context: "#{context}[:prefix_list]") unless params[:prefix_list].nil?
        type
      end
    end

    module ModifyNetworkInterfaceAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyNetworkInterfaceAttributeInput, context: context)
        type = Types::ModifyNetworkInterfaceAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attachment = NetworkInterfaceAttachmentChanges.build(params[:attachment], context: "#{context}[:attachment]") unless params[:attachment].nil?
        type.description = AttributeValue.build(params[:description], context: "#{context}[:description]") unless params[:description].nil?
        type.dry_run = params[:dry_run]
        type.groups = SecurityGroupIdStringList.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.network_interface_id = params[:network_interface_id]
        type.source_dest_check = AttributeBooleanValue.build(params[:source_dest_check], context: "#{context}[:source_dest_check]") unless params[:source_dest_check].nil?
        type.ena_srd_specification = EnaSrdSpecification.build(params[:ena_srd_specification], context: "#{context}[:ena_srd_specification]") unless params[:ena_srd_specification].nil?
        type.enable_primary_ipv6 = params[:enable_primary_ipv6]
        type.connection_tracking_specification = ConnectionTrackingSpecificationRequest.build(params[:connection_tracking_specification], context: "#{context}[:connection_tracking_specification]") unless params[:connection_tracking_specification].nil?
        type
      end
    end

    module ModifyNetworkInterfaceAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyNetworkInterfaceAttributeOutput, context: context)
        type = Types::ModifyNetworkInterfaceAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ModifyPrivateDnsNameOptionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyPrivateDnsNameOptionsInput, context: context)
        type = Types::ModifyPrivateDnsNameOptionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.instance_id = params[:instance_id]
        type.private_dns_hostname_type = params[:private_dns_hostname_type]
        type.enable_resource_name_dns_a_record = params[:enable_resource_name_dns_a_record]
        type.enable_resource_name_dns_aaaa_record = params[:enable_resource_name_dns_aaaa_record]
        type
      end
    end

    module ModifyPrivateDnsNameOptionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyPrivateDnsNameOptionsOutput, context: context)
        type = Types::ModifyPrivateDnsNameOptionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ModifyReservedInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyReservedInstancesInput, context: context)
        type = Types::ModifyReservedInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.reserved_instances_ids = ReservedInstancesIdStringList.build(params[:reserved_instances_ids], context: "#{context}[:reserved_instances_ids]") unless params[:reserved_instances_ids].nil?
        type.client_token = params[:client_token]
        type.target_configurations = ReservedInstancesConfigurationList.build(params[:target_configurations], context: "#{context}[:target_configurations]") unless params[:target_configurations].nil?
        type
      end
    end

    module ModifyReservedInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyReservedInstancesOutput, context: context)
        type = Types::ModifyReservedInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.reserved_instances_modification_id = params[:reserved_instances_modification_id]
        type
      end
    end

    module ModifySecurityGroupRulesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifySecurityGroupRulesInput, context: context)
        type = Types::ModifySecurityGroupRulesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group_id = params[:group_id]
        type.security_group_rules = SecurityGroupRuleUpdateList.build(params[:security_group_rules], context: "#{context}[:security_group_rules]") unless params[:security_group_rules].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifySecurityGroupRulesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifySecurityGroupRulesOutput, context: context)
        type = Types::ModifySecurityGroupRulesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ModifySnapshotAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifySnapshotAttributeInput, context: context)
        type = Types::ModifySnapshotAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attribute = params[:attribute]
        type.create_volume_permission = CreateVolumePermissionModifications.build(params[:create_volume_permission], context: "#{context}[:create_volume_permission]") unless params[:create_volume_permission].nil?
        type.group_names = GroupNameStringList.build(params[:group_names], context: "#{context}[:group_names]") unless params[:group_names].nil?
        type.operation_type = params[:operation_type]
        type.snapshot_id = params[:snapshot_id]
        type.user_ids = UserIdStringList.build(params[:user_ids], context: "#{context}[:user_ids]") unless params[:user_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifySnapshotAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifySnapshotAttributeOutput, context: context)
        type = Types::ModifySnapshotAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ModifySnapshotTierInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifySnapshotTierInput, context: context)
        type = Types::ModifySnapshotTierInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.storage_tier = params[:storage_tier]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifySnapshotTierOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifySnapshotTierOutput, context: context)
        type = Types::ModifySnapshotTierOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.tiering_start_time = params[:tiering_start_time]
        type
      end
    end

    module ModifySpotFleetRequestInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifySpotFleetRequestInput, context: context)
        type = Types::ModifySpotFleetRequestInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.excess_capacity_termination_policy = params[:excess_capacity_termination_policy]
        type.launch_template_configs = LaunchTemplateConfigList.build(params[:launch_template_configs], context: "#{context}[:launch_template_configs]") unless params[:launch_template_configs].nil?
        type.spot_fleet_request_id = params[:spot_fleet_request_id]
        type.target_capacity = params[:target_capacity]
        type.on_demand_target_capacity = params[:on_demand_target_capacity]
        type.context = params[:context]
        type
      end
    end

    module ModifySpotFleetRequestOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifySpotFleetRequestOutput, context: context)
        type = Types::ModifySpotFleetRequestOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ModifySubnetAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifySubnetAttributeInput, context: context)
        type = Types::ModifySubnetAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.assign_ipv6_address_on_creation = AttributeBooleanValue.build(params[:assign_ipv6_address_on_creation], context: "#{context}[:assign_ipv6_address_on_creation]") unless params[:assign_ipv6_address_on_creation].nil?
        type.map_public_ip_on_launch = AttributeBooleanValue.build(params[:map_public_ip_on_launch], context: "#{context}[:map_public_ip_on_launch]") unless params[:map_public_ip_on_launch].nil?
        type.subnet_id = params[:subnet_id]
        type.map_customer_owned_ip_on_launch = AttributeBooleanValue.build(params[:map_customer_owned_ip_on_launch], context: "#{context}[:map_customer_owned_ip_on_launch]") unless params[:map_customer_owned_ip_on_launch].nil?
        type.customer_owned_ipv4_pool = params[:customer_owned_ipv4_pool]
        type.enable_dns64 = AttributeBooleanValue.build(params[:enable_dns64], context: "#{context}[:enable_dns64]") unless params[:enable_dns64].nil?
        type.private_dns_hostname_type_on_launch = params[:private_dns_hostname_type_on_launch]
        type.enable_resource_name_dns_a_record_on_launch = AttributeBooleanValue.build(params[:enable_resource_name_dns_a_record_on_launch], context: "#{context}[:enable_resource_name_dns_a_record_on_launch]") unless params[:enable_resource_name_dns_a_record_on_launch].nil?
        type.enable_resource_name_dns_aaaa_record_on_launch = AttributeBooleanValue.build(params[:enable_resource_name_dns_aaaa_record_on_launch], context: "#{context}[:enable_resource_name_dns_aaaa_record_on_launch]") unless params[:enable_resource_name_dns_aaaa_record_on_launch].nil?
        type.enable_lni_at_device_index = params[:enable_lni_at_device_index]
        type.disable_lni_at_device_index = AttributeBooleanValue.build(params[:disable_lni_at_device_index], context: "#{context}[:disable_lni_at_device_index]") unless params[:disable_lni_at_device_index].nil?
        type
      end
    end

    module ModifySubnetAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifySubnetAttributeOutput, context: context)
        type = Types::ModifySubnetAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ModifyTrafficMirrorFilterNetworkServicesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyTrafficMirrorFilterNetworkServicesInput, context: context)
        type = Types::ModifyTrafficMirrorFilterNetworkServicesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_filter_id = params[:traffic_mirror_filter_id]
        type.add_network_services = TrafficMirrorNetworkServiceList.build(params[:add_network_services], context: "#{context}[:add_network_services]") unless params[:add_network_services].nil?
        type.remove_network_services = TrafficMirrorNetworkServiceList.build(params[:remove_network_services], context: "#{context}[:remove_network_services]") unless params[:remove_network_services].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyTrafficMirrorFilterNetworkServicesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyTrafficMirrorFilterNetworkServicesOutput, context: context)
        type = Types::ModifyTrafficMirrorFilterNetworkServicesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_filter = TrafficMirrorFilter.build(params[:traffic_mirror_filter], context: "#{context}[:traffic_mirror_filter]") unless params[:traffic_mirror_filter].nil?
        type
      end
    end

    module ModifyTrafficMirrorFilterRuleInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyTrafficMirrorFilterRuleInput, context: context)
        type = Types::ModifyTrafficMirrorFilterRuleInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_filter_rule_id = params[:traffic_mirror_filter_rule_id]
        type.traffic_direction = params[:traffic_direction]
        type.rule_number = params[:rule_number]
        type.rule_action = params[:rule_action]
        type.destination_port_range = TrafficMirrorPortRangeRequest.build(params[:destination_port_range], context: "#{context}[:destination_port_range]") unless params[:destination_port_range].nil?
        type.source_port_range = TrafficMirrorPortRangeRequest.build(params[:source_port_range], context: "#{context}[:source_port_range]") unless params[:source_port_range].nil?
        type.protocol = params[:protocol]
        type.destination_cidr_block = params[:destination_cidr_block]
        type.source_cidr_block = params[:source_cidr_block]
        type.description = params[:description]
        type.remove_fields = TrafficMirrorFilterRuleFieldList.build(params[:remove_fields], context: "#{context}[:remove_fields]") unless params[:remove_fields].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyTrafficMirrorFilterRuleOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyTrafficMirrorFilterRuleOutput, context: context)
        type = Types::ModifyTrafficMirrorFilterRuleOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_filter_rule = TrafficMirrorFilterRule.build(params[:traffic_mirror_filter_rule], context: "#{context}[:traffic_mirror_filter_rule]") unless params[:traffic_mirror_filter_rule].nil?
        type
      end
    end

    module ModifyTrafficMirrorSessionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyTrafficMirrorSessionInput, context: context)
        type = Types::ModifyTrafficMirrorSessionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_session_id = params[:traffic_mirror_session_id]
        type.traffic_mirror_target_id = params[:traffic_mirror_target_id]
        type.traffic_mirror_filter_id = params[:traffic_mirror_filter_id]
        type.packet_length = params[:packet_length]
        type.session_number = params[:session_number]
        type.virtual_network_id = params[:virtual_network_id]
        type.description = params[:description]
        type.remove_fields = TrafficMirrorSessionFieldList.build(params[:remove_fields], context: "#{context}[:remove_fields]") unless params[:remove_fields].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyTrafficMirrorSessionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyTrafficMirrorSessionOutput, context: context)
        type = Types::ModifyTrafficMirrorSessionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_session = TrafficMirrorSession.build(params[:traffic_mirror_session], context: "#{context}[:traffic_mirror_session]") unless params[:traffic_mirror_session].nil?
        type
      end
    end

    module ModifyTransitGatewayInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyTransitGatewayInput, context: context)
        type = Types::ModifyTransitGatewayInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_id = params[:transit_gateway_id]
        type.description = params[:description]
        type.options = ModifyTransitGatewayOptions.build(params[:options], context: "#{context}[:options]") unless params[:options].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyTransitGatewayOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyTransitGatewayOptions, context: context)
        type = Types::ModifyTransitGatewayOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.add_transit_gateway_cidr_blocks = TransitGatewayCidrBlockStringList.build(params[:add_transit_gateway_cidr_blocks], context: "#{context}[:add_transit_gateway_cidr_blocks]") unless params[:add_transit_gateway_cidr_blocks].nil?
        type.remove_transit_gateway_cidr_blocks = TransitGatewayCidrBlockStringList.build(params[:remove_transit_gateway_cidr_blocks], context: "#{context}[:remove_transit_gateway_cidr_blocks]") unless params[:remove_transit_gateway_cidr_blocks].nil?
        type.vpn_ecmp_support = params[:vpn_ecmp_support]
        type.dns_support = params[:dns_support]
        type.security_group_referencing_support = params[:security_group_referencing_support]
        type.auto_accept_shared_attachments = params[:auto_accept_shared_attachments]
        type.default_route_table_association = params[:default_route_table_association]
        type.association_default_route_table_id = params[:association_default_route_table_id]
        type.default_route_table_propagation = params[:default_route_table_propagation]
        type.propagation_default_route_table_id = params[:propagation_default_route_table_id]
        type.amazon_side_asn = params[:amazon_side_asn]
        type
      end
    end

    module ModifyTransitGatewayOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyTransitGatewayOutput, context: context)
        type = Types::ModifyTransitGatewayOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway = TransitGateway.build(params[:transit_gateway], context: "#{context}[:transit_gateway]") unless params[:transit_gateway].nil?
        type
      end
    end

    module ModifyTransitGatewayPrefixListReferenceInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyTransitGatewayPrefixListReferenceInput, context: context)
        type = Types::ModifyTransitGatewayPrefixListReferenceInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.prefix_list_id = params[:prefix_list_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.blackhole = params[:blackhole]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyTransitGatewayPrefixListReferenceOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyTransitGatewayPrefixListReferenceOutput, context: context)
        type = Types::ModifyTransitGatewayPrefixListReferenceOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_prefix_list_reference = TransitGatewayPrefixListReference.build(params[:transit_gateway_prefix_list_reference], context: "#{context}[:transit_gateway_prefix_list_reference]") unless params[:transit_gateway_prefix_list_reference].nil?
        type
      end
    end

    module ModifyTransitGatewayVpcAttachmentInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyTransitGatewayVpcAttachmentInput, context: context)
        type = Types::ModifyTransitGatewayVpcAttachmentInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.add_subnet_ids = TransitGatewaySubnetIdList.build(params[:add_subnet_ids], context: "#{context}[:add_subnet_ids]") unless params[:add_subnet_ids].nil?
        type.remove_subnet_ids = TransitGatewaySubnetIdList.build(params[:remove_subnet_ids], context: "#{context}[:remove_subnet_ids]") unless params[:remove_subnet_ids].nil?
        type.options = ModifyTransitGatewayVpcAttachmentRequestOptions.build(params[:options], context: "#{context}[:options]") unless params[:options].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyTransitGatewayVpcAttachmentOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyTransitGatewayVpcAttachmentOutput, context: context)
        type = Types::ModifyTransitGatewayVpcAttachmentOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_vpc_attachment = TransitGatewayVpcAttachment.build(params[:transit_gateway_vpc_attachment], context: "#{context}[:transit_gateway_vpc_attachment]") unless params[:transit_gateway_vpc_attachment].nil?
        type
      end
    end

    module ModifyTransitGatewayVpcAttachmentRequestOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyTransitGatewayVpcAttachmentRequestOptions, context: context)
        type = Types::ModifyTransitGatewayVpcAttachmentRequestOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dns_support = params[:dns_support]
        type.security_group_referencing_support = params[:security_group_referencing_support]
        type.ipv6_support = params[:ipv6_support]
        type.appliance_mode_support = params[:appliance_mode_support]
        type
      end
    end

    module ModifyVerifiedAccessEndpointEniOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessEndpointEniOptions, context: context)
        type = Types::ModifyVerifiedAccessEndpointEniOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.protocol = params[:protocol]
        type.port = params[:port]
        type
      end
    end

    module ModifyVerifiedAccessEndpointInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessEndpointInput, context: context)
        type = Types::ModifyVerifiedAccessEndpointInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_endpoint_id = params[:verified_access_endpoint_id]
        type.verified_access_group_id = params[:verified_access_group_id]
        type.load_balancer_options = ModifyVerifiedAccessEndpointLoadBalancerOptions.build(params[:load_balancer_options], context: "#{context}[:load_balancer_options]") unless params[:load_balancer_options].nil?
        type.network_interface_options = ModifyVerifiedAccessEndpointEniOptions.build(params[:network_interface_options], context: "#{context}[:network_interface_options]") unless params[:network_interface_options].nil?
        type.description = params[:description]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyVerifiedAccessEndpointLoadBalancerOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessEndpointLoadBalancerOptions, context: context)
        type = Types::ModifyVerifiedAccessEndpointLoadBalancerOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.subnet_ids = ModifyVerifiedAccessEndpointSubnetIdList.build(params[:subnet_ids], context: "#{context}[:subnet_ids]") unless params[:subnet_ids].nil?
        type.protocol = params[:protocol]
        type.port = params[:port]
        type
      end
    end

    module ModifyVerifiedAccessEndpointOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessEndpointOutput, context: context)
        type = Types::ModifyVerifiedAccessEndpointOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_endpoint = VerifiedAccessEndpoint.build(params[:verified_access_endpoint], context: "#{context}[:verified_access_endpoint]") unless params[:verified_access_endpoint].nil?
        type
      end
    end

    module ModifyVerifiedAccessEndpointPolicyInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessEndpointPolicyInput, context: context)
        type = Types::ModifyVerifiedAccessEndpointPolicyInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_endpoint_id = params[:verified_access_endpoint_id]
        type.policy_enabled = params[:policy_enabled]
        type.policy_document = params[:policy_document]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type.sse_specification = VerifiedAccessSseSpecificationRequest.build(params[:sse_specification], context: "#{context}[:sse_specification]") unless params[:sse_specification].nil?
        type
      end
    end

    module ModifyVerifiedAccessEndpointPolicyOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessEndpointPolicyOutput, context: context)
        type = Types::ModifyVerifiedAccessEndpointPolicyOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.policy_enabled = params[:policy_enabled]
        type.policy_document = params[:policy_document]
        type.sse_specification = VerifiedAccessSseSpecificationResponse.build(params[:sse_specification], context: "#{context}[:sse_specification]") unless params[:sse_specification].nil?
        type
      end
    end

    module ModifyVerifiedAccessEndpointSubnetIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ModifyVerifiedAccessGroupInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessGroupInput, context: context)
        type = Types::ModifyVerifiedAccessGroupInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_group_id = params[:verified_access_group_id]
        type.verified_access_instance_id = params[:verified_access_instance_id]
        type.description = params[:description]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyVerifiedAccessGroupOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessGroupOutput, context: context)
        type = Types::ModifyVerifiedAccessGroupOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_group = VerifiedAccessGroup.build(params[:verified_access_group], context: "#{context}[:verified_access_group]") unless params[:verified_access_group].nil?
        type
      end
    end

    module ModifyVerifiedAccessGroupPolicyInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessGroupPolicyInput, context: context)
        type = Types::ModifyVerifiedAccessGroupPolicyInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_group_id = params[:verified_access_group_id]
        type.policy_enabled = params[:policy_enabled]
        type.policy_document = params[:policy_document]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type.sse_specification = VerifiedAccessSseSpecificationRequest.build(params[:sse_specification], context: "#{context}[:sse_specification]") unless params[:sse_specification].nil?
        type
      end
    end

    module ModifyVerifiedAccessGroupPolicyOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessGroupPolicyOutput, context: context)
        type = Types::ModifyVerifiedAccessGroupPolicyOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.policy_enabled = params[:policy_enabled]
        type.policy_document = params[:policy_document]
        type.sse_specification = VerifiedAccessSseSpecificationResponse.build(params[:sse_specification], context: "#{context}[:sse_specification]") unless params[:sse_specification].nil?
        type
      end
    end

    module ModifyVerifiedAccessInstanceInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessInstanceInput, context: context)
        type = Types::ModifyVerifiedAccessInstanceInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_instance_id = params[:verified_access_instance_id]
        type.description = params[:description]
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module ModifyVerifiedAccessInstanceLoggingConfigurationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessInstanceLoggingConfigurationInput, context: context)
        type = Types::ModifyVerifiedAccessInstanceLoggingConfigurationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_instance_id = params[:verified_access_instance_id]
        type.access_logs = VerifiedAccessLogOptions.build(params[:access_logs], context: "#{context}[:access_logs]") unless params[:access_logs].nil?
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module ModifyVerifiedAccessInstanceLoggingConfigurationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessInstanceLoggingConfigurationOutput, context: context)
        type = Types::ModifyVerifiedAccessInstanceLoggingConfigurationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.logging_configuration = VerifiedAccessInstanceLoggingConfiguration.build(params[:logging_configuration], context: "#{context}[:logging_configuration]") unless params[:logging_configuration].nil?
        type
      end
    end

    module ModifyVerifiedAccessInstanceOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessInstanceOutput, context: context)
        type = Types::ModifyVerifiedAccessInstanceOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_instance = VerifiedAccessInstance.build(params[:verified_access_instance], context: "#{context}[:verified_access_instance]") unless params[:verified_access_instance].nil?
        type
      end
    end

    module ModifyVerifiedAccessTrustProviderDeviceOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessTrustProviderDeviceOptions, context: context)
        type = Types::ModifyVerifiedAccessTrustProviderDeviceOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.public_signing_key_url = params[:public_signing_key_url]
        type
      end
    end

    module ModifyVerifiedAccessTrustProviderInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessTrustProviderInput, context: context)
        type = Types::ModifyVerifiedAccessTrustProviderInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_trust_provider_id = params[:verified_access_trust_provider_id]
        type.oidc_options = ModifyVerifiedAccessTrustProviderOidcOptions.build(params[:oidc_options], context: "#{context}[:oidc_options]") unless params[:oidc_options].nil?
        type.device_options = ModifyVerifiedAccessTrustProviderDeviceOptions.build(params[:device_options], context: "#{context}[:device_options]") unless params[:device_options].nil?
        type.description = params[:description]
        type.dry_run = params[:dry_run]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.sse_specification = VerifiedAccessSseSpecificationRequest.build(params[:sse_specification], context: "#{context}[:sse_specification]") unless params[:sse_specification].nil?
        type
      end
    end

    module ModifyVerifiedAccessTrustProviderOidcOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessTrustProviderOidcOptions, context: context)
        type = Types::ModifyVerifiedAccessTrustProviderOidcOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.issuer = params[:issuer]
        type.authorization_endpoint = params[:authorization_endpoint]
        type.token_endpoint = params[:token_endpoint]
        type.user_info_endpoint = params[:user_info_endpoint]
        type.client_id = params[:client_id]
        type.client_secret = params[:client_secret]
        type.scope = params[:scope]
        type
      end
    end

    module ModifyVerifiedAccessTrustProviderOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVerifiedAccessTrustProviderOutput, context: context)
        type = Types::ModifyVerifiedAccessTrustProviderOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_trust_provider = VerifiedAccessTrustProvider.build(params[:verified_access_trust_provider], context: "#{context}[:verified_access_trust_provider]") unless params[:verified_access_trust_provider].nil?
        type
      end
    end

    module ModifyVolumeAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVolumeAttributeInput, context: context)
        type = Types::ModifyVolumeAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.auto_enable_io = AttributeBooleanValue.build(params[:auto_enable_io], context: "#{context}[:auto_enable_io]") unless params[:auto_enable_io].nil?
        type.volume_id = params[:volume_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyVolumeAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVolumeAttributeOutput, context: context)
        type = Types::ModifyVolumeAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ModifyVolumeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVolumeInput, context: context)
        type = Types::ModifyVolumeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.volume_id = params[:volume_id]
        type.size = params[:size]
        type.volume_type = params[:volume_type]
        type.iops = params[:iops]
        type.throughput = params[:throughput]
        type.multi_attach_enabled = params[:multi_attach_enabled]
        type
      end
    end

    module ModifyVolumeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVolumeOutput, context: context)
        type = Types::ModifyVolumeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.volume_modification = VolumeModification.build(params[:volume_modification], context: "#{context}[:volume_modification]") unless params[:volume_modification].nil?
        type
      end
    end

    module ModifyVpcAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcAttributeInput, context: context)
        type = Types::ModifyVpcAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enable_dns_hostnames = AttributeBooleanValue.build(params[:enable_dns_hostnames], context: "#{context}[:enable_dns_hostnames]") unless params[:enable_dns_hostnames].nil?
        type.enable_dns_support = AttributeBooleanValue.build(params[:enable_dns_support], context: "#{context}[:enable_dns_support]") unless params[:enable_dns_support].nil?
        type.vpc_id = params[:vpc_id]
        type.enable_network_address_usage_metrics = AttributeBooleanValue.build(params[:enable_network_address_usage_metrics], context: "#{context}[:enable_network_address_usage_metrics]") unless params[:enable_network_address_usage_metrics].nil?
        type
      end
    end

    module ModifyVpcAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcAttributeOutput, context: context)
        type = Types::ModifyVpcAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ModifyVpcEndpointConnectionNotificationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcEndpointConnectionNotificationInput, context: context)
        type = Types::ModifyVpcEndpointConnectionNotificationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.connection_notification_id = params[:connection_notification_id]
        type.connection_notification_arn = params[:connection_notification_arn]
        type.connection_events = ValueStringList.build(params[:connection_events], context: "#{context}[:connection_events]") unless params[:connection_events].nil?
        type
      end
    end

    module ModifyVpcEndpointConnectionNotificationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcEndpointConnectionNotificationOutput, context: context)
        type = Types::ModifyVpcEndpointConnectionNotificationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return_value = params[:return_value]
        type
      end
    end

    module ModifyVpcEndpointInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcEndpointInput, context: context)
        type = Types::ModifyVpcEndpointInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.vpc_endpoint_id = params[:vpc_endpoint_id]
        type.reset_policy = params[:reset_policy]
        type.policy_document = params[:policy_document]
        type.add_route_table_ids = VpcEndpointRouteTableIdList.build(params[:add_route_table_ids], context: "#{context}[:add_route_table_ids]") unless params[:add_route_table_ids].nil?
        type.remove_route_table_ids = VpcEndpointRouteTableIdList.build(params[:remove_route_table_ids], context: "#{context}[:remove_route_table_ids]") unless params[:remove_route_table_ids].nil?
        type.add_subnet_ids = VpcEndpointSubnetIdList.build(params[:add_subnet_ids], context: "#{context}[:add_subnet_ids]") unless params[:add_subnet_ids].nil?
        type.remove_subnet_ids = VpcEndpointSubnetIdList.build(params[:remove_subnet_ids], context: "#{context}[:remove_subnet_ids]") unless params[:remove_subnet_ids].nil?
        type.add_security_group_ids = VpcEndpointSecurityGroupIdList.build(params[:add_security_group_ids], context: "#{context}[:add_security_group_ids]") unless params[:add_security_group_ids].nil?
        type.remove_security_group_ids = VpcEndpointSecurityGroupIdList.build(params[:remove_security_group_ids], context: "#{context}[:remove_security_group_ids]") unless params[:remove_security_group_ids].nil?
        type.ip_address_type = params[:ip_address_type]
        type.dns_options = DnsOptionsSpecification.build(params[:dns_options], context: "#{context}[:dns_options]") unless params[:dns_options].nil?
        type.private_dns_enabled = params[:private_dns_enabled]
        type.subnet_configurations = SubnetConfigurationsList.build(params[:subnet_configurations], context: "#{context}[:subnet_configurations]") unless params[:subnet_configurations].nil?
        type
      end
    end

    module ModifyVpcEndpointOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcEndpointOutput, context: context)
        type = Types::ModifyVpcEndpointOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ModifyVpcEndpointServiceConfigurationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcEndpointServiceConfigurationInput, context: context)
        type = Types::ModifyVpcEndpointServiceConfigurationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.service_id = params[:service_id]
        type.private_dns_name = params[:private_dns_name]
        type.remove_private_dns_name = params[:remove_private_dns_name]
        type.acceptance_required = params[:acceptance_required]
        type.add_network_load_balancer_arns = ValueStringList.build(params[:add_network_load_balancer_arns], context: "#{context}[:add_network_load_balancer_arns]") unless params[:add_network_load_balancer_arns].nil?
        type.remove_network_load_balancer_arns = ValueStringList.build(params[:remove_network_load_balancer_arns], context: "#{context}[:remove_network_load_balancer_arns]") unless params[:remove_network_load_balancer_arns].nil?
        type.add_gateway_load_balancer_arns = ValueStringList.build(params[:add_gateway_load_balancer_arns], context: "#{context}[:add_gateway_load_balancer_arns]") unless params[:add_gateway_load_balancer_arns].nil?
        type.remove_gateway_load_balancer_arns = ValueStringList.build(params[:remove_gateway_load_balancer_arns], context: "#{context}[:remove_gateway_load_balancer_arns]") unless params[:remove_gateway_load_balancer_arns].nil?
        type.add_supported_ip_address_types = ValueStringList.build(params[:add_supported_ip_address_types], context: "#{context}[:add_supported_ip_address_types]") unless params[:add_supported_ip_address_types].nil?
        type.remove_supported_ip_address_types = ValueStringList.build(params[:remove_supported_ip_address_types], context: "#{context}[:remove_supported_ip_address_types]") unless params[:remove_supported_ip_address_types].nil?
        type
      end
    end

    module ModifyVpcEndpointServiceConfigurationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcEndpointServiceConfigurationOutput, context: context)
        type = Types::ModifyVpcEndpointServiceConfigurationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ModifyVpcEndpointServicePayerResponsibilityInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcEndpointServicePayerResponsibilityInput, context: context)
        type = Types::ModifyVpcEndpointServicePayerResponsibilityInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.service_id = params[:service_id]
        type.payer_responsibility = params[:payer_responsibility]
        type
      end
    end

    module ModifyVpcEndpointServicePayerResponsibilityOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcEndpointServicePayerResponsibilityOutput, context: context)
        type = Types::ModifyVpcEndpointServicePayerResponsibilityOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return_value = params[:return_value]
        type
      end
    end

    module ModifyVpcEndpointServicePermissionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcEndpointServicePermissionsInput, context: context)
        type = Types::ModifyVpcEndpointServicePermissionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.service_id = params[:service_id]
        type.add_allowed_principals = ValueStringList.build(params[:add_allowed_principals], context: "#{context}[:add_allowed_principals]") unless params[:add_allowed_principals].nil?
        type.remove_allowed_principals = ValueStringList.build(params[:remove_allowed_principals], context: "#{context}[:remove_allowed_principals]") unless params[:remove_allowed_principals].nil?
        type
      end
    end

    module ModifyVpcEndpointServicePermissionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcEndpointServicePermissionsOutput, context: context)
        type = Types::ModifyVpcEndpointServicePermissionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.added_principals = AddedPrincipalSet.build(params[:added_principals], context: "#{context}[:added_principals]") unless params[:added_principals].nil?
        type.return_value = params[:return_value]
        type
      end
    end

    module ModifyVpcPeeringConnectionOptionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcPeeringConnectionOptionsInput, context: context)
        type = Types::ModifyVpcPeeringConnectionOptionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.accepter_peering_connection_options = PeeringConnectionOptionsRequest.build(params[:accepter_peering_connection_options], context: "#{context}[:accepter_peering_connection_options]") unless params[:accepter_peering_connection_options].nil?
        type.dry_run = params[:dry_run]
        type.requester_peering_connection_options = PeeringConnectionOptionsRequest.build(params[:requester_peering_connection_options], context: "#{context}[:requester_peering_connection_options]") unless params[:requester_peering_connection_options].nil?
        type.vpc_peering_connection_id = params[:vpc_peering_connection_id]
        type
      end
    end

    module ModifyVpcPeeringConnectionOptionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcPeeringConnectionOptionsOutput, context: context)
        type = Types::ModifyVpcPeeringConnectionOptionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.accepter_peering_connection_options = PeeringConnectionOptions.build(params[:accepter_peering_connection_options], context: "#{context}[:accepter_peering_connection_options]") unless params[:accepter_peering_connection_options].nil?
        type.requester_peering_connection_options = PeeringConnectionOptions.build(params[:requester_peering_connection_options], context: "#{context}[:requester_peering_connection_options]") unless params[:requester_peering_connection_options].nil?
        type
      end
    end

    module ModifyVpcTenancyInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcTenancyInput, context: context)
        type = Types::ModifyVpcTenancyInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_id = params[:vpc_id]
        type.instance_tenancy = params[:instance_tenancy]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyVpcTenancyOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpcTenancyOutput, context: context)
        type = Types::ModifyVpcTenancyOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return_value = params[:return_value]
        type
      end
    end

    module ModifyVpnConnectionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpnConnectionInput, context: context)
        type = Types::ModifyVpnConnectionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection_id = params[:vpn_connection_id]
        type.transit_gateway_id = params[:transit_gateway_id]
        type.customer_gateway_id = params[:customer_gateway_id]
        type.vpn_gateway_id = params[:vpn_gateway_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyVpnConnectionOptionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpnConnectionOptionsInput, context: context)
        type = Types::ModifyVpnConnectionOptionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection_id = params[:vpn_connection_id]
        type.local_ipv4_network_cidr = params[:local_ipv4_network_cidr]
        type.remote_ipv4_network_cidr = params[:remote_ipv4_network_cidr]
        type.local_ipv6_network_cidr = params[:local_ipv6_network_cidr]
        type.remote_ipv6_network_cidr = params[:remote_ipv6_network_cidr]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyVpnConnectionOptionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpnConnectionOptionsOutput, context: context)
        type = Types::ModifyVpnConnectionOptionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection = VpnConnection.build(params[:vpn_connection], context: "#{context}[:vpn_connection]") unless params[:vpn_connection].nil?
        type
      end
    end

    module ModifyVpnConnectionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpnConnectionOutput, context: context)
        type = Types::ModifyVpnConnectionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection = VpnConnection.build(params[:vpn_connection], context: "#{context}[:vpn_connection]") unless params[:vpn_connection].nil?
        type
      end
    end

    module ModifyVpnTunnelCertificateInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpnTunnelCertificateInput, context: context)
        type = Types::ModifyVpnTunnelCertificateInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection_id = params[:vpn_connection_id]
        type.vpn_tunnel_outside_ip_address = params[:vpn_tunnel_outside_ip_address]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ModifyVpnTunnelCertificateOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpnTunnelCertificateOutput, context: context)
        type = Types::ModifyVpnTunnelCertificateOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection = VpnConnection.build(params[:vpn_connection], context: "#{context}[:vpn_connection]") unless params[:vpn_connection].nil?
        type
      end
    end

    module ModifyVpnTunnelOptionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpnTunnelOptionsInput, context: context)
        type = Types::ModifyVpnTunnelOptionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection_id = params[:vpn_connection_id]
        type.vpn_tunnel_outside_ip_address = params[:vpn_tunnel_outside_ip_address]
        type.tunnel_options = ModifyVpnTunnelOptionsSpecification.build(params[:tunnel_options], context: "#{context}[:tunnel_options]") unless params[:tunnel_options].nil?
        type.dry_run = params[:dry_run]
        type.skip_tunnel_replacement = params[:skip_tunnel_replacement]
        type
      end
    end

    module ModifyVpnTunnelOptionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpnTunnelOptionsOutput, context: context)
        type = Types::ModifyVpnTunnelOptionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection = VpnConnection.build(params[:vpn_connection], context: "#{context}[:vpn_connection]") unless params[:vpn_connection].nil?
        type
      end
    end

    module ModifyVpnTunnelOptionsSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ModifyVpnTunnelOptionsSpecification, context: context)
        type = Types::ModifyVpnTunnelOptionsSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.tunnel_inside_cidr = params[:tunnel_inside_cidr]
        type.tunnel_inside_ipv6_cidr = params[:tunnel_inside_ipv6_cidr]
        type.pre_shared_key = params[:pre_shared_key]
        type.phase1_lifetime_seconds = params[:phase1_lifetime_seconds]
        type.phase2_lifetime_seconds = params[:phase2_lifetime_seconds]
        type.rekey_margin_time_seconds = params[:rekey_margin_time_seconds]
        type.rekey_fuzz_percentage = params[:rekey_fuzz_percentage]
        type.replay_window_size = params[:replay_window_size]
        type.dpd_timeout_seconds = params[:dpd_timeout_seconds]
        type.dpd_timeout_action = params[:dpd_timeout_action]
        type.phase1_encryption_algorithms = Phase1EncryptionAlgorithmsRequestList.build(params[:phase1_encryption_algorithms], context: "#{context}[:phase1_encryption_algorithms]") unless params[:phase1_encryption_algorithms].nil?
        type.phase2_encryption_algorithms = Phase2EncryptionAlgorithmsRequestList.build(params[:phase2_encryption_algorithms], context: "#{context}[:phase2_encryption_algorithms]") unless params[:phase2_encryption_algorithms].nil?
        type.phase1_integrity_algorithms = Phase1IntegrityAlgorithmsRequestList.build(params[:phase1_integrity_algorithms], context: "#{context}[:phase1_integrity_algorithms]") unless params[:phase1_integrity_algorithms].nil?
        type.phase2_integrity_algorithms = Phase2IntegrityAlgorithmsRequestList.build(params[:phase2_integrity_algorithms], context: "#{context}[:phase2_integrity_algorithms]") unless params[:phase2_integrity_algorithms].nil?
        type.phase1_dh_group_numbers = Phase1DHGroupNumbersRequestList.build(params[:phase1_dh_group_numbers], context: "#{context}[:phase1_dh_group_numbers]") unless params[:phase1_dh_group_numbers].nil?
        type.phase2_dh_group_numbers = Phase2DHGroupNumbersRequestList.build(params[:phase2_dh_group_numbers], context: "#{context}[:phase2_dh_group_numbers]") unless params[:phase2_dh_group_numbers].nil?
        type.ike_versions = IKEVersionsRequestList.build(params[:ike_versions], context: "#{context}[:ike_versions]") unless params[:ike_versions].nil?
        type.startup_action = params[:startup_action]
        type.log_options = VpnTunnelLogOptionsSpecification.build(params[:log_options], context: "#{context}[:log_options]") unless params[:log_options].nil?
        type.enable_tunnel_lifecycle_control = params[:enable_tunnel_lifecycle_control]
        type
      end
    end

    module MonitorInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::MonitorInstancesInput, context: context)
        type = Types::MonitorInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_ids = InstanceIdStringList.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module MonitorInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::MonitorInstancesOutput, context: context)
        type = Types::MonitorInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_monitorings = InstanceMonitoringList.build(params[:instance_monitorings], context: "#{context}[:instance_monitorings]") unless params[:instance_monitorings].nil?
        type
      end
    end

    module Monitoring
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Monitoring, context: context)
        type = Types::Monitoring.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.state = params[:state]
        type
      end
    end

    module MoveAddressToVpcInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::MoveAddressToVpcInput, context: context)
        type = Types::MoveAddressToVpcInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.public_ip = params[:public_ip]
        type
      end
    end

    module MoveAddressToVpcOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::MoveAddressToVpcOutput, context: context)
        type = Types::MoveAddressToVpcOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_id = params[:allocation_id]
        type.status = params[:status]
        type
      end
    end

    module MoveByoipCidrToIpamInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::MoveByoipCidrToIpamInput, context: context)
        type = Types::MoveByoipCidrToIpamInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.cidr = params[:cidr]
        type.ipam_pool_id = params[:ipam_pool_id]
        type.ipam_pool_owner = params[:ipam_pool_owner]
        type
      end
    end

    module MoveByoipCidrToIpamOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::MoveByoipCidrToIpamOutput, context: context)
        type = Types::MoveByoipCidrToIpamOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.byoip_cidr = ByoipCidr.build(params[:byoip_cidr], context: "#{context}[:byoip_cidr]") unless params[:byoip_cidr].nil?
        type
      end
    end

    module MovingAddressStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::MovingAddressStatus, context: context)
        type = Types::MovingAddressStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.move_status = params[:move_status]
        type.public_ip = params[:public_ip]
        type
      end
    end

    module MovingAddressStatusSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << MovingAddressStatus.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NatGateway
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NatGateway, context: context)
        type = Types::NatGateway.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.create_time = params[:create_time]
        type.delete_time = params[:delete_time]
        type.failure_code = params[:failure_code]
        type.failure_message = params[:failure_message]
        type.nat_gateway_addresses = NatGatewayAddressList.build(params[:nat_gateway_addresses], context: "#{context}[:nat_gateway_addresses]") unless params[:nat_gateway_addresses].nil?
        type.nat_gateway_id = params[:nat_gateway_id]
        type.provisioned_bandwidth = ProvisionedBandwidth.build(params[:provisioned_bandwidth], context: "#{context}[:provisioned_bandwidth]") unless params[:provisioned_bandwidth].nil?
        type.state = params[:state]
        type.subnet_id = params[:subnet_id]
        type.vpc_id = params[:vpc_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.connectivity_type = params[:connectivity_type]
        type
      end
    end

    module NatGatewayAddress
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NatGatewayAddress, context: context)
        type = Types::NatGatewayAddress.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_id = params[:allocation_id]
        type.network_interface_id = params[:network_interface_id]
        type.private_ip = params[:private_ip]
        type.public_ip = params[:public_ip]
        type.association_id = params[:association_id]
        type.is_primary = params[:is_primary]
        type.failure_message = params[:failure_message]
        type.status = params[:status]
        type
      end
    end

    module NatGatewayAddressList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << NatGatewayAddress.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NatGatewayIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module NatGatewayList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << NatGateway.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NetworkAcl
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkAcl, context: context)
        type = Types::NetworkAcl.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.associations = NetworkAclAssociationList.build(params[:associations], context: "#{context}[:associations]") unless params[:associations].nil?
        type.entries = NetworkAclEntryList.build(params[:entries], context: "#{context}[:entries]") unless params[:entries].nil?
        type.is_default = params[:is_default]
        type.network_acl_id = params[:network_acl_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.vpc_id = params[:vpc_id]
        type.owner_id = params[:owner_id]
        type
      end
    end

    module NetworkAclAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkAclAssociation, context: context)
        type = Types::NetworkAclAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_acl_association_id = params[:network_acl_association_id]
        type.network_acl_id = params[:network_acl_id]
        type.subnet_id = params[:subnet_id]
        type
      end
    end

    module NetworkAclAssociationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << NetworkAclAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NetworkAclEntry
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkAclEntry, context: context)
        type = Types::NetworkAclEntry.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr_block = params[:cidr_block]
        type.egress = params[:egress]
        type.icmp_type_code = IcmpTypeCode.build(params[:icmp_type_code], context: "#{context}[:icmp_type_code]") unless params[:icmp_type_code].nil?
        type.ipv6_cidr_block = params[:ipv6_cidr_block]
        type.port_range = PortRange.build(params[:port_range], context: "#{context}[:port_range]") unless params[:port_range].nil?
        type.protocol = params[:protocol]
        type.rule_action = params[:rule_action]
        type.rule_number = params[:rule_number]
        type
      end
    end

    module NetworkAclEntryList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << NetworkAclEntry.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NetworkAclIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module NetworkAclList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << NetworkAcl.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NetworkBandwidthGbps
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkBandwidthGbps, context: context)
        type = Types::NetworkBandwidthGbps.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]&.to_f
        type.max = params[:max]&.to_f
        type
      end
    end

    module NetworkBandwidthGbpsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkBandwidthGbpsRequest, context: context)
        type = Types::NetworkBandwidthGbpsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]&.to_f
        type.max = params[:max]&.to_f
        type
      end
    end

    module NetworkCardInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkCardInfo, context: context)
        type = Types::NetworkCardInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_card_index = params[:network_card_index]
        type.network_performance = params[:network_performance]
        type.maximum_network_interfaces = params[:maximum_network_interfaces]
        type.baseline_bandwidth_in_gbps = params[:baseline_bandwidth_in_gbps]&.to_f
        type.peak_bandwidth_in_gbps = params[:peak_bandwidth_in_gbps]&.to_f
        type
      end
    end

    module NetworkCardInfoList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << NetworkCardInfo.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NetworkInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInfo, context: context)
        type = Types::NetworkInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_performance = params[:network_performance]
        type.maximum_network_interfaces = params[:maximum_network_interfaces]
        type.maximum_network_cards = params[:maximum_network_cards]
        type.default_network_card_index = params[:default_network_card_index]
        type.network_cards = NetworkCardInfoList.build(params[:network_cards], context: "#{context}[:network_cards]") unless params[:network_cards].nil?
        type.ipv4_addresses_per_interface = params[:ipv4_addresses_per_interface]
        type.ipv6_addresses_per_interface = params[:ipv6_addresses_per_interface]
        type.ipv6_supported = params[:ipv6_supported]
        type.ena_support = params[:ena_support]
        type.efa_supported = params[:efa_supported]
        type.efa_info = EfaInfo.build(params[:efa_info], context: "#{context}[:efa_info]") unless params[:efa_info].nil?
        type.encryption_in_transit_supported = params[:encryption_in_transit_supported]
        type.ena_srd_supported = params[:ena_srd_supported]
        type
      end
    end

    module NetworkInsightsAccessScope
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInsightsAccessScope, context: context)
        type = Types::NetworkInsightsAccessScope.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_id = params[:network_insights_access_scope_id]
        type.network_insights_access_scope_arn = params[:network_insights_access_scope_arn]
        type.created_date = params[:created_date]
        type.updated_date = params[:updated_date]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module NetworkInsightsAccessScopeAnalysis
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInsightsAccessScopeAnalysis, context: context)
        type = Types::NetworkInsightsAccessScopeAnalysis.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_analysis_id = params[:network_insights_access_scope_analysis_id]
        type.network_insights_access_scope_analysis_arn = params[:network_insights_access_scope_analysis_arn]
        type.network_insights_access_scope_id = params[:network_insights_access_scope_id]
        type.status = params[:status]
        type.status_message = params[:status_message]
        type.warning_message = params[:warning_message]
        type.start_date = params[:start_date]
        type.end_date = params[:end_date]
        type.findings_found = params[:findings_found]
        type.analyzed_eni_count = params[:analyzed_eni_count]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module NetworkInsightsAccessScopeAnalysisIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module NetworkInsightsAccessScopeAnalysisList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << NetworkInsightsAccessScopeAnalysis.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NetworkInsightsAccessScopeContent
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInsightsAccessScopeContent, context: context)
        type = Types::NetworkInsightsAccessScopeContent.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_id = params[:network_insights_access_scope_id]
        type.match_paths = AccessScopePathList.build(params[:match_paths], context: "#{context}[:match_paths]") unless params[:match_paths].nil?
        type.exclude_paths = AccessScopePathList.build(params[:exclude_paths], context: "#{context}[:exclude_paths]") unless params[:exclude_paths].nil?
        type
      end
    end

    module NetworkInsightsAccessScopeIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module NetworkInsightsAccessScopeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << NetworkInsightsAccessScope.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NetworkInsightsAnalysis
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInsightsAnalysis, context: context)
        type = Types::NetworkInsightsAnalysis.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_analysis_id = params[:network_insights_analysis_id]
        type.network_insights_analysis_arn = params[:network_insights_analysis_arn]
        type.network_insights_path_id = params[:network_insights_path_id]
        type.additional_accounts = ValueStringList.build(params[:additional_accounts], context: "#{context}[:additional_accounts]") unless params[:additional_accounts].nil?
        type.filter_in_arns = ArnList.build(params[:filter_in_arns], context: "#{context}[:filter_in_arns]") unless params[:filter_in_arns].nil?
        type.start_date = params[:start_date]
        type.status = params[:status]
        type.status_message = params[:status_message]
        type.warning_message = params[:warning_message]
        type.network_path_found = params[:network_path_found]
        type.forward_path_components = PathComponentList.build(params[:forward_path_components], context: "#{context}[:forward_path_components]") unless params[:forward_path_components].nil?
        type.return_path_components = PathComponentList.build(params[:return_path_components], context: "#{context}[:return_path_components]") unless params[:return_path_components].nil?
        type.explanations = ExplanationList.build(params[:explanations], context: "#{context}[:explanations]") unless params[:explanations].nil?
        type.alternate_path_hints = AlternatePathHintList.build(params[:alternate_path_hints], context: "#{context}[:alternate_path_hints]") unless params[:alternate_path_hints].nil?
        type.suggested_accounts = ValueStringList.build(params[:suggested_accounts], context: "#{context}[:suggested_accounts]") unless params[:suggested_accounts].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module NetworkInsightsAnalysisIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module NetworkInsightsAnalysisList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << NetworkInsightsAnalysis.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NetworkInsightsPath
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInsightsPath, context: context)
        type = Types::NetworkInsightsPath.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_path_id = params[:network_insights_path_id]
        type.network_insights_path_arn = params[:network_insights_path_arn]
        type.created_date = params[:created_date]
        type.source = params[:source]
        type.destination = params[:destination]
        type.source_arn = params[:source_arn]
        type.destination_arn = params[:destination_arn]
        type.source_ip = params[:source_ip]
        type.destination_ip = params[:destination_ip]
        type.protocol = params[:protocol]
        type.destination_port = params[:destination_port]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.filter_at_source = PathFilter.build(params[:filter_at_source], context: "#{context}[:filter_at_source]") unless params[:filter_at_source].nil?
        type.filter_at_destination = PathFilter.build(params[:filter_at_destination], context: "#{context}[:filter_at_destination]") unless params[:filter_at_destination].nil?
        type
      end
    end

    module NetworkInsightsPathIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module NetworkInsightsPathList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << NetworkInsightsPath.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NetworkInterface
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInterface, context: context)
        type = Types::NetworkInterface.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association = NetworkInterfaceAssociation.build(params[:association], context: "#{context}[:association]") unless params[:association].nil?
        type.attachment = NetworkInterfaceAttachment.build(params[:attachment], context: "#{context}[:attachment]") unless params[:attachment].nil?
        type.availability_zone = params[:availability_zone]
        type.connection_tracking_configuration = ConnectionTrackingConfiguration.build(params[:connection_tracking_configuration], context: "#{context}[:connection_tracking_configuration]") unless params[:connection_tracking_configuration].nil?
        type.description = params[:description]
        type.groups = GroupIdentifierList.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.interface_type = params[:interface_type]
        type.ipv6_addresses = NetworkInterfaceIpv6AddressesList.build(params[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless params[:ipv6_addresses].nil?
        type.mac_address = params[:mac_address]
        type.network_interface_id = params[:network_interface_id]
        type.outpost_arn = params[:outpost_arn]
        type.owner_id = params[:owner_id]
        type.private_dns_name = params[:private_dns_name]
        type.private_ip_address = params[:private_ip_address]
        type.private_ip_addresses = NetworkInterfacePrivateIpAddressList.build(params[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless params[:private_ip_addresses].nil?
        type.ipv4_prefixes = Ipv4PrefixesList.build(params[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless params[:ipv4_prefixes].nil?
        type.ipv6_prefixes = Ipv6PrefixesList.build(params[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless params[:ipv6_prefixes].nil?
        type.requester_id = params[:requester_id]
        type.requester_managed = params[:requester_managed]
        type.source_dest_check = params[:source_dest_check]
        type.status = params[:status]
        type.subnet_id = params[:subnet_id]
        type.tag_set = TagList.build(params[:tag_set], context: "#{context}[:tag_set]") unless params[:tag_set].nil?
        type.vpc_id = params[:vpc_id]
        type.deny_all_igw_traffic = params[:deny_all_igw_traffic]
        type.ipv6_native = params[:ipv6_native]
        type.ipv6_address = params[:ipv6_address]
        type
      end
    end

    module NetworkInterfaceAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInterfaceAssociation, context: context)
        type = Types::NetworkInterfaceAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_id = params[:allocation_id]
        type.association_id = params[:association_id]
        type.ip_owner_id = params[:ip_owner_id]
        type.public_dns_name = params[:public_dns_name]
        type.public_ip = params[:public_ip]
        type.customer_owned_ip = params[:customer_owned_ip]
        type.carrier_ip = params[:carrier_ip]
        type
      end
    end

    module NetworkInterfaceAttachment
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInterfaceAttachment, context: context)
        type = Types::NetworkInterfaceAttachment.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attach_time = params[:attach_time]
        type.attachment_id = params[:attachment_id]
        type.delete_on_termination = params[:delete_on_termination]
        type.device_index = params[:device_index]
        type.network_card_index = params[:network_card_index]
        type.instance_id = params[:instance_id]
        type.instance_owner_id = params[:instance_owner_id]
        type.status = params[:status]
        type.ena_srd_specification = AttachmentEnaSrdSpecification.build(params[:ena_srd_specification], context: "#{context}[:ena_srd_specification]") unless params[:ena_srd_specification].nil?
        type
      end
    end

    module NetworkInterfaceAttachmentChanges
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInterfaceAttachmentChanges, context: context)
        type = Types::NetworkInterfaceAttachmentChanges.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attachment_id = params[:attachment_id]
        type.delete_on_termination = params[:delete_on_termination]
        type
      end
    end

    module NetworkInterfaceCount
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInterfaceCount, context: context)
        type = Types::NetworkInterfaceCount.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]
        type.max = params[:max]
        type
      end
    end

    module NetworkInterfaceCountRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInterfaceCountRequest, context: context)
        type = Types::NetworkInterfaceCountRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]
        type.max = params[:max]
        type
      end
    end

    module NetworkInterfaceIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module NetworkInterfaceIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module NetworkInterfaceIpv6Address
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInterfaceIpv6Address, context: context)
        type = Types::NetworkInterfaceIpv6Address.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_address = params[:ipv6_address]
        type.is_primary_ipv6 = params[:is_primary_ipv6]
        type
      end
    end

    module NetworkInterfaceIpv6AddressesList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << NetworkInterfaceIpv6Address.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NetworkInterfaceList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << NetworkInterface.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NetworkInterfacePermission
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInterfacePermission, context: context)
        type = Types::NetworkInterfacePermission.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_interface_permission_id = params[:network_interface_permission_id]
        type.network_interface_id = params[:network_interface_id]
        type.aws_account_id = params[:aws_account_id]
        type.aws_service = params[:aws_service]
        type.permission = params[:permission]
        type.permission_state = NetworkInterfacePermissionState.build(params[:permission_state], context: "#{context}[:permission_state]") unless params[:permission_state].nil?
        type
      end
    end

    module NetworkInterfacePermissionIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module NetworkInterfacePermissionList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << NetworkInterfacePermission.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NetworkInterfacePermissionState
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInterfacePermissionState, context: context)
        type = Types::NetworkInterfacePermissionState.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.state = params[:state]
        type.status_message = params[:status_message]
        type
      end
    end

    module NetworkInterfacePrivateIpAddress
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NetworkInterfacePrivateIpAddress, context: context)
        type = Types::NetworkInterfacePrivateIpAddress.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association = NetworkInterfaceAssociation.build(params[:association], context: "#{context}[:association]") unless params[:association].nil?
        type.primary = params[:primary]
        type.private_dns_name = params[:private_dns_name]
        type.private_ip_address = params[:private_ip_address]
        type
      end
    end

    module NetworkInterfacePrivateIpAddressList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << NetworkInterfacePrivateIpAddress.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NetworkNodesList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module NewDhcpConfiguration
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NewDhcpConfiguration, context: context)
        type = Types::NewDhcpConfiguration.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.key = params[:key]
        type.values = ValueStringList.build(params[:values], context: "#{context}[:values]") unless params[:values].nil?
        type
      end
    end

    module NewDhcpConfigurationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << NewDhcpConfiguration.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module NitroTpmInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::NitroTpmInfo, context: context)
        type = Types::NitroTpmInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.supported_versions = NitroTpmSupportedVersionsList.build(params[:supported_versions], context: "#{context}[:supported_versions]") unless params[:supported_versions].nil?
        type
      end
    end

    module NitroTpmSupportedVersionsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module OccurrenceDayRequestSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module OccurrenceDaySet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module OidcOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::OidcOptions, context: context)
        type = Types::OidcOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.issuer = params[:issuer]
        type.authorization_endpoint = params[:authorization_endpoint]
        type.token_endpoint = params[:token_endpoint]
        type.user_info_endpoint = params[:user_info_endpoint]
        type.client_id = params[:client_id]
        type.client_secret = params[:client_secret]
        type.scope = params[:scope]
        type
      end
    end

    module OnDemandOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::OnDemandOptions, context: context)
        type = Types::OnDemandOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_strategy = params[:allocation_strategy]
        type.capacity_reservation_options = CapacityReservationOptions.build(params[:capacity_reservation_options], context: "#{context}[:capacity_reservation_options]") unless params[:capacity_reservation_options].nil?
        type.single_instance_type = params[:single_instance_type]
        type.single_availability_zone = params[:single_availability_zone]
        type.min_target_capacity = params[:min_target_capacity]
        type.max_total_price = params[:max_total_price]
        type
      end
    end

    module OnDemandOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::OnDemandOptionsRequest, context: context)
        type = Types::OnDemandOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_strategy = params[:allocation_strategy]
        type.capacity_reservation_options = CapacityReservationOptionsRequest.build(params[:capacity_reservation_options], context: "#{context}[:capacity_reservation_options]") unless params[:capacity_reservation_options].nil?
        type.single_instance_type = params[:single_instance_type]
        type.single_availability_zone = params[:single_availability_zone]
        type.min_target_capacity = params[:min_target_capacity]
        type.max_total_price = params[:max_total_price]
        type
      end
    end

    module OrganizationArnStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module OrganizationalUnitArnStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module OwnerStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module PacketHeaderStatement
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PacketHeaderStatement, context: context)
        type = Types::PacketHeaderStatement.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.source_addresses = ValueStringList.build(params[:source_addresses], context: "#{context}[:source_addresses]") unless params[:source_addresses].nil?
        type.destination_addresses = ValueStringList.build(params[:destination_addresses], context: "#{context}[:destination_addresses]") unless params[:destination_addresses].nil?
        type.source_ports = ValueStringList.build(params[:source_ports], context: "#{context}[:source_ports]") unless params[:source_ports].nil?
        type.destination_ports = ValueStringList.build(params[:destination_ports], context: "#{context}[:destination_ports]") unless params[:destination_ports].nil?
        type.source_prefix_lists = ValueStringList.build(params[:source_prefix_lists], context: "#{context}[:source_prefix_lists]") unless params[:source_prefix_lists].nil?
        type.destination_prefix_lists = ValueStringList.build(params[:destination_prefix_lists], context: "#{context}[:destination_prefix_lists]") unless params[:destination_prefix_lists].nil?
        type.protocols = ProtocolList.build(params[:protocols], context: "#{context}[:protocols]") unless params[:protocols].nil?
        type
      end
    end

    module PacketHeaderStatementRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PacketHeaderStatementRequest, context: context)
        type = Types::PacketHeaderStatementRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.source_addresses = ValueStringList.build(params[:source_addresses], context: "#{context}[:source_addresses]") unless params[:source_addresses].nil?
        type.destination_addresses = ValueStringList.build(params[:destination_addresses], context: "#{context}[:destination_addresses]") unless params[:destination_addresses].nil?
        type.source_ports = ValueStringList.build(params[:source_ports], context: "#{context}[:source_ports]") unless params[:source_ports].nil?
        type.destination_ports = ValueStringList.build(params[:destination_ports], context: "#{context}[:destination_ports]") unless params[:destination_ports].nil?
        type.source_prefix_lists = ValueStringList.build(params[:source_prefix_lists], context: "#{context}[:source_prefix_lists]") unless params[:source_prefix_lists].nil?
        type.destination_prefix_lists = ValueStringList.build(params[:destination_prefix_lists], context: "#{context}[:destination_prefix_lists]") unless params[:destination_prefix_lists].nil?
        type.protocols = ProtocolList.build(params[:protocols], context: "#{context}[:protocols]") unless params[:protocols].nil?
        type
      end
    end

    module PathComponent
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PathComponent, context: context)
        type = Types::PathComponent.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.sequence_number = params[:sequence_number]
        type.acl_rule = AnalysisAclRule.build(params[:acl_rule], context: "#{context}[:acl_rule]") unless params[:acl_rule].nil?
        type.attached_to = AnalysisComponent.build(params[:attached_to], context: "#{context}[:attached_to]") unless params[:attached_to].nil?
        type.component = AnalysisComponent.build(params[:component], context: "#{context}[:component]") unless params[:component].nil?
        type.destination_vpc = AnalysisComponent.build(params[:destination_vpc], context: "#{context}[:destination_vpc]") unless params[:destination_vpc].nil?
        type.outbound_header = AnalysisPacketHeader.build(params[:outbound_header], context: "#{context}[:outbound_header]") unless params[:outbound_header].nil?
        type.inbound_header = AnalysisPacketHeader.build(params[:inbound_header], context: "#{context}[:inbound_header]") unless params[:inbound_header].nil?
        type.route_table_route = AnalysisRouteTableRoute.build(params[:route_table_route], context: "#{context}[:route_table_route]") unless params[:route_table_route].nil?
        type.security_group_rule = AnalysisSecurityGroupRule.build(params[:security_group_rule], context: "#{context}[:security_group_rule]") unless params[:security_group_rule].nil?
        type.source_vpc = AnalysisComponent.build(params[:source_vpc], context: "#{context}[:source_vpc]") unless params[:source_vpc].nil?
        type.subnet = AnalysisComponent.build(params[:subnet], context: "#{context}[:subnet]") unless params[:subnet].nil?
        type.vpc = AnalysisComponent.build(params[:vpc], context: "#{context}[:vpc]") unless params[:vpc].nil?
        type.additional_details = AdditionalDetailList.build(params[:additional_details], context: "#{context}[:additional_details]") unless params[:additional_details].nil?
        type.transit_gateway = AnalysisComponent.build(params[:transit_gateway], context: "#{context}[:transit_gateway]") unless params[:transit_gateway].nil?
        type.transit_gateway_route_table_route = TransitGatewayRouteTableRoute.build(params[:transit_gateway_route_table_route], context: "#{context}[:transit_gateway_route_table_route]") unless params[:transit_gateway_route_table_route].nil?
        type.explanations = ExplanationList.build(params[:explanations], context: "#{context}[:explanations]") unless params[:explanations].nil?
        type.elastic_load_balancer_listener = AnalysisComponent.build(params[:elastic_load_balancer_listener], context: "#{context}[:elastic_load_balancer_listener]") unless params[:elastic_load_balancer_listener].nil?
        type.firewall_stateless_rule = FirewallStatelessRule.build(params[:firewall_stateless_rule], context: "#{context}[:firewall_stateless_rule]") unless params[:firewall_stateless_rule].nil?
        type.firewall_stateful_rule = FirewallStatefulRule.build(params[:firewall_stateful_rule], context: "#{context}[:firewall_stateful_rule]") unless params[:firewall_stateful_rule].nil?
        type.service_name = params[:service_name]
        type
      end
    end

    module PathComponentList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PathComponent.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PathFilter
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PathFilter, context: context)
        type = Types::PathFilter.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.source_address = params[:source_address]
        type.source_port_range = FilterPortRange.build(params[:source_port_range], context: "#{context}[:source_port_range]") unless params[:source_port_range].nil?
        type.destination_address = params[:destination_address]
        type.destination_port_range = FilterPortRange.build(params[:destination_port_range], context: "#{context}[:destination_port_range]") unless params[:destination_port_range].nil?
        type
      end
    end

    module PathRequestFilter
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PathRequestFilter, context: context)
        type = Types::PathRequestFilter.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.source_address = params[:source_address]
        type.source_port_range = RequestFilterPortRange.build(params[:source_port_range], context: "#{context}[:source_port_range]") unless params[:source_port_range].nil?
        type.destination_address = params[:destination_address]
        type.destination_port_range = RequestFilterPortRange.build(params[:destination_port_range], context: "#{context}[:destination_port_range]") unless params[:destination_port_range].nil?
        type
      end
    end

    module PathStatement
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PathStatement, context: context)
        type = Types::PathStatement.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.packet_header_statement = PacketHeaderStatement.build(params[:packet_header_statement], context: "#{context}[:packet_header_statement]") unless params[:packet_header_statement].nil?
        type.resource_statement = ResourceStatement.build(params[:resource_statement], context: "#{context}[:resource_statement]") unless params[:resource_statement].nil?
        type
      end
    end

    module PathStatementRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PathStatementRequest, context: context)
        type = Types::PathStatementRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.packet_header_statement = PacketHeaderStatementRequest.build(params[:packet_header_statement], context: "#{context}[:packet_header_statement]") unless params[:packet_header_statement].nil?
        type.resource_statement = ResourceStatementRequest.build(params[:resource_statement], context: "#{context}[:resource_statement]") unless params[:resource_statement].nil?
        type
      end
    end

    module PciId
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PciId, context: context)
        type = Types::PciId.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.device_id = params[:device_id]
        type.vendor_id = params[:vendor_id]
        type.subsystem_id = params[:subsystem_id]
        type.subsystem_vendor_id = params[:subsystem_vendor_id]
        type
      end
    end

    module PeeringAttachmentStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PeeringAttachmentStatus, context: context)
        type = Types::PeeringAttachmentStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module PeeringConnectionOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PeeringConnectionOptions, context: context)
        type = Types::PeeringConnectionOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allow_dns_resolution_from_remote_vpc = params[:allow_dns_resolution_from_remote_vpc]
        type.allow_egress_from_local_classic_link_to_remote_vpc = params[:allow_egress_from_local_classic_link_to_remote_vpc]
        type.allow_egress_from_local_vpc_to_remote_classic_link = params[:allow_egress_from_local_vpc_to_remote_classic_link]
        type
      end
    end

    module PeeringConnectionOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PeeringConnectionOptionsRequest, context: context)
        type = Types::PeeringConnectionOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allow_dns_resolution_from_remote_vpc = params[:allow_dns_resolution_from_remote_vpc]
        type.allow_egress_from_local_classic_link_to_remote_vpc = params[:allow_egress_from_local_classic_link_to_remote_vpc]
        type.allow_egress_from_local_vpc_to_remote_classic_link = params[:allow_egress_from_local_vpc_to_remote_classic_link]
        type
      end
    end

    module PeeringTgwInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PeeringTgwInfo, context: context)
        type = Types::PeeringTgwInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_id = params[:transit_gateway_id]
        type.core_network_id = params[:core_network_id]
        type.owner_id = params[:owner_id]
        type.region = params[:region]
        type
      end
    end

    module Phase1DHGroupNumbersList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Phase1DHGroupNumbersListValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Phase1DHGroupNumbersListValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Phase1DHGroupNumbersListValue, context: context)
        type = Types::Phase1DHGroupNumbersListValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module Phase1DHGroupNumbersRequestList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Phase1DHGroupNumbersRequestListValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Phase1DHGroupNumbersRequestListValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Phase1DHGroupNumbersRequestListValue, context: context)
        type = Types::Phase1DHGroupNumbersRequestListValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module Phase1EncryptionAlgorithmsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Phase1EncryptionAlgorithmsListValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Phase1EncryptionAlgorithmsListValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Phase1EncryptionAlgorithmsListValue, context: context)
        type = Types::Phase1EncryptionAlgorithmsListValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module Phase1EncryptionAlgorithmsRequestList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Phase1EncryptionAlgorithmsRequestListValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Phase1EncryptionAlgorithmsRequestListValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Phase1EncryptionAlgorithmsRequestListValue, context: context)
        type = Types::Phase1EncryptionAlgorithmsRequestListValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module Phase1IntegrityAlgorithmsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Phase1IntegrityAlgorithmsListValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Phase1IntegrityAlgorithmsListValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Phase1IntegrityAlgorithmsListValue, context: context)
        type = Types::Phase1IntegrityAlgorithmsListValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module Phase1IntegrityAlgorithmsRequestList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Phase1IntegrityAlgorithmsRequestListValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Phase1IntegrityAlgorithmsRequestListValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Phase1IntegrityAlgorithmsRequestListValue, context: context)
        type = Types::Phase1IntegrityAlgorithmsRequestListValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module Phase2DHGroupNumbersList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Phase2DHGroupNumbersListValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Phase2DHGroupNumbersListValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Phase2DHGroupNumbersListValue, context: context)
        type = Types::Phase2DHGroupNumbersListValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module Phase2DHGroupNumbersRequestList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Phase2DHGroupNumbersRequestListValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Phase2DHGroupNumbersRequestListValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Phase2DHGroupNumbersRequestListValue, context: context)
        type = Types::Phase2DHGroupNumbersRequestListValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module Phase2EncryptionAlgorithmsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Phase2EncryptionAlgorithmsListValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Phase2EncryptionAlgorithmsListValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Phase2EncryptionAlgorithmsListValue, context: context)
        type = Types::Phase2EncryptionAlgorithmsListValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module Phase2EncryptionAlgorithmsRequestList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Phase2EncryptionAlgorithmsRequestListValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Phase2EncryptionAlgorithmsRequestListValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Phase2EncryptionAlgorithmsRequestListValue, context: context)
        type = Types::Phase2EncryptionAlgorithmsRequestListValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module Phase2IntegrityAlgorithmsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Phase2IntegrityAlgorithmsListValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Phase2IntegrityAlgorithmsListValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Phase2IntegrityAlgorithmsListValue, context: context)
        type = Types::Phase2IntegrityAlgorithmsListValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module Phase2IntegrityAlgorithmsRequestList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Phase2IntegrityAlgorithmsRequestListValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Phase2IntegrityAlgorithmsRequestListValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Phase2IntegrityAlgorithmsRequestListValue, context: context)
        type = Types::Phase2IntegrityAlgorithmsRequestListValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type
      end
    end

    module Placement
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Placement, context: context)
        type = Types::Placement.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.affinity = params[:affinity]
        type.group_name = params[:group_name]
        type.partition_number = params[:partition_number]
        type.host_id = params[:host_id]
        type.tenancy = params[:tenancy]
        type.spread_domain = params[:spread_domain]
        type.host_resource_group_arn = params[:host_resource_group_arn]
        type.group_id = params[:group_id]
        type
      end
    end

    module PlacementGroup
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PlacementGroup, context: context)
        type = Types::PlacementGroup.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group_name = params[:group_name]
        type.state = params[:state]
        type.strategy = params[:strategy]
        type.partition_count = params[:partition_count]
        type.group_id = params[:group_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.group_arn = params[:group_arn]
        type.spread_level = params[:spread_level]
        type
      end
    end

    module PlacementGroupIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module PlacementGroupInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PlacementGroupInfo, context: context)
        type = Types::PlacementGroupInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.supported_strategies = PlacementGroupStrategyList.build(params[:supported_strategies], context: "#{context}[:supported_strategies]") unless params[:supported_strategies].nil?
        type
      end
    end

    module PlacementGroupList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PlacementGroup.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PlacementGroupStrategyList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module PlacementGroupStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module PlacementResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PlacementResponse, context: context)
        type = Types::PlacementResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group_name = params[:group_name]
        type
      end
    end

    module PoolCidrBlock
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PoolCidrBlock, context: context)
        type = Types::PoolCidrBlock.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type
      end
    end

    module PoolCidrBlocksSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PoolCidrBlock.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PortRange
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PortRange, context: context)
        type = Types::PortRange.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.from = params[:from]
        type.to = params[:to]
        type
      end
    end

    module PortRangeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PortRange.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PrefixList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PrefixList, context: context)
        type = Types::PrefixList.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidrs = ValueStringList.build(params[:cidrs], context: "#{context}[:cidrs]") unless params[:cidrs].nil?
        type.prefix_list_id = params[:prefix_list_id]
        type.prefix_list_name = params[:prefix_list_name]
        type
      end
    end

    module PrefixListAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PrefixListAssociation, context: context)
        type = Types::PrefixListAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.resource_id = params[:resource_id]
        type.resource_owner = params[:resource_owner]
        type
      end
    end

    module PrefixListAssociationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PrefixListAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PrefixListEntry
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PrefixListEntry, context: context)
        type = Types::PrefixListEntry.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type.description = params[:description]
        type
      end
    end

    module PrefixListEntrySet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PrefixListEntry.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PrefixListId
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PrefixListId, context: context)
        type = Types::PrefixListId.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.prefix_list_id = params[:prefix_list_id]
        type
      end
    end

    module PrefixListIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PrefixListId.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PrefixListIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module PrefixListResourceIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module PrefixListSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PrefixList.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PriceSchedule
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PriceSchedule, context: context)
        type = Types::PriceSchedule.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.active = params[:active]
        type.currency_code = params[:currency_code]
        type.price = params[:price]&.to_f
        type.term = params[:term]
        type
      end
    end

    module PriceScheduleList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PriceSchedule.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PriceScheduleSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PriceScheduleSpecification, context: context)
        type = Types::PriceScheduleSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.currency_code = params[:currency_code]
        type.price = params[:price]&.to_f
        type.term = params[:term]
        type
      end
    end

    module PriceScheduleSpecificationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PriceScheduleSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PricingDetail
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PricingDetail, context: context)
        type = Types::PricingDetail.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.count = params[:count]
        type.price = params[:price]&.to_f
        type
      end
    end

    module PricingDetailsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PricingDetail.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PrincipalIdFormat
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PrincipalIdFormat, context: context)
        type = Types::PrincipalIdFormat.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.arn = params[:arn]
        type.statuses = IdFormatList.build(params[:statuses], context: "#{context}[:statuses]") unless params[:statuses].nil?
        type
      end
    end

    module PrincipalIdFormatList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PrincipalIdFormat.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PrivateDnsDetails
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PrivateDnsDetails, context: context)
        type = Types::PrivateDnsDetails.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.private_dns_name = params[:private_dns_name]
        type
      end
    end

    module PrivateDnsDetailsSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PrivateDnsDetails.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PrivateDnsNameConfiguration
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PrivateDnsNameConfiguration, context: context)
        type = Types::PrivateDnsNameConfiguration.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.state = params[:state]
        type.type = params[:type]
        type.value = params[:value]
        type.name = params[:name]
        type
      end
    end

    module PrivateDnsNameOptionsOnLaunch
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PrivateDnsNameOptionsOnLaunch, context: context)
        type = Types::PrivateDnsNameOptionsOnLaunch.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.hostname_type = params[:hostname_type]
        type.enable_resource_name_dns_a_record = params[:enable_resource_name_dns_a_record]
        type.enable_resource_name_dns_aaaa_record = params[:enable_resource_name_dns_aaaa_record]
        type
      end
    end

    module PrivateDnsNameOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PrivateDnsNameOptionsRequest, context: context)
        type = Types::PrivateDnsNameOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.hostname_type = params[:hostname_type]
        type.enable_resource_name_dns_a_record = params[:enable_resource_name_dns_a_record]
        type.enable_resource_name_dns_aaaa_record = params[:enable_resource_name_dns_aaaa_record]
        type
      end
    end

    module PrivateDnsNameOptionsResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PrivateDnsNameOptionsResponse, context: context)
        type = Types::PrivateDnsNameOptionsResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.hostname_type = params[:hostname_type]
        type.enable_resource_name_dns_a_record = params[:enable_resource_name_dns_a_record]
        type.enable_resource_name_dns_aaaa_record = params[:enable_resource_name_dns_aaaa_record]
        type
      end
    end

    module PrivateIpAddressConfigSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ScheduledInstancesPrivateIpAddressConfig.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PrivateIpAddressSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PrivateIpAddressSpecification, context: context)
        type = Types::PrivateIpAddressSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.primary = params[:primary]
        type.private_ip_address = params[:private_ip_address]
        type
      end
    end

    module PrivateIpAddressSpecificationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PrivateIpAddressSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PrivateIpAddressStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ProcessorInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ProcessorInfo, context: context)
        type = Types::ProcessorInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.supported_architectures = ArchitectureTypeList.build(params[:supported_architectures], context: "#{context}[:supported_architectures]") unless params[:supported_architectures].nil?
        type.sustained_clock_speed_in_ghz = params[:sustained_clock_speed_in_ghz]&.to_f
        type.supported_features = SupportedAdditionalProcessorFeatureList.build(params[:supported_features], context: "#{context}[:supported_features]") unless params[:supported_features].nil?
        type.manufacturer = params[:manufacturer]
        type
      end
    end

    module ProductCode
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ProductCode, context: context)
        type = Types::ProductCode.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.product_code_id = params[:product_code_id]
        type.product_code_type = params[:product_code_type]
        type
      end
    end

    module ProductCodeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ProductCode.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ProductCodeStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ProductDescriptionList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module PropagatingVgw
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PropagatingVgw, context: context)
        type = Types::PropagatingVgw.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.gateway_id = params[:gateway_id]
        type
      end
    end

    module PropagatingVgwList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PropagatingVgw.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ProtocolIntList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ProtocolList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ProvisionByoipCidrInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ProvisionByoipCidrInput, context: context)
        type = Types::ProvisionByoipCidrInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type.cidr_authorization_context = CidrAuthorizationContext.build(params[:cidr_authorization_context], context: "#{context}[:cidr_authorization_context]") unless params[:cidr_authorization_context].nil?
        type.publicly_advertisable = params[:publicly_advertisable]
        type.description = params[:description]
        type.dry_run = params[:dry_run]
        type.pool_tag_specifications = TagSpecificationList.build(params[:pool_tag_specifications], context: "#{context}[:pool_tag_specifications]") unless params[:pool_tag_specifications].nil?
        type.multi_region = params[:multi_region]
        type.network_border_group = params[:network_border_group]
        type
      end
    end

    module ProvisionByoipCidrOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ProvisionByoipCidrOutput, context: context)
        type = Types::ProvisionByoipCidrOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.byoip_cidr = ByoipCidr.build(params[:byoip_cidr], context: "#{context}[:byoip_cidr]") unless params[:byoip_cidr].nil?
        type
      end
    end

    module ProvisionIpamByoasnInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ProvisionIpamByoasnInput, context: context)
        type = Types::ProvisionIpamByoasnInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_id = params[:ipam_id]
        type.asn = params[:asn]
        type.asn_authorization_context = AsnAuthorizationContext.build(params[:asn_authorization_context], context: "#{context}[:asn_authorization_context]") unless params[:asn_authorization_context].nil?
        type
      end
    end

    module ProvisionIpamByoasnOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ProvisionIpamByoasnOutput, context: context)
        type = Types::ProvisionIpamByoasnOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.byoasn = Byoasn.build(params[:byoasn], context: "#{context}[:byoasn]") unless params[:byoasn].nil?
        type
      end
    end

    module ProvisionIpamPoolCidrInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ProvisionIpamPoolCidrInput, context: context)
        type = Types::ProvisionIpamPoolCidrInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_pool_id = params[:ipam_pool_id]
        type.cidr = params[:cidr]
        type.cidr_authorization_context = IpamCidrAuthorizationContext.build(params[:cidr_authorization_context], context: "#{context}[:cidr_authorization_context]") unless params[:cidr_authorization_context].nil?
        type.netmask_length = params[:netmask_length]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module ProvisionIpamPoolCidrOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ProvisionIpamPoolCidrOutput, context: context)
        type = Types::ProvisionIpamPoolCidrOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipam_pool_cidr = IpamPoolCidr.build(params[:ipam_pool_cidr], context: "#{context}[:ipam_pool_cidr]") unless params[:ipam_pool_cidr].nil?
        type
      end
    end

    module ProvisionPublicIpv4PoolCidrInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ProvisionPublicIpv4PoolCidrInput, context: context)
        type = Types::ProvisionPublicIpv4PoolCidrInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_pool_id = params[:ipam_pool_id]
        type.pool_id = params[:pool_id]
        type.netmask_length = params[:netmask_length]
        type
      end
    end

    module ProvisionPublicIpv4PoolCidrOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ProvisionPublicIpv4PoolCidrOutput, context: context)
        type = Types::ProvisionPublicIpv4PoolCidrOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.pool_id = params[:pool_id]
        type.pool_address_range = PublicIpv4PoolRange.build(params[:pool_address_range], context: "#{context}[:pool_address_range]") unless params[:pool_address_range].nil?
        type
      end
    end

    module ProvisionedBandwidth
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ProvisionedBandwidth, context: context)
        type = Types::ProvisionedBandwidth.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.provision_time = params[:provision_time]
        type.provisioned = params[:provisioned]
        type.request_time = params[:request_time]
        type.requested = params[:requested]
        type.status = params[:status]
        type
      end
    end

    module PtrUpdateStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PtrUpdateStatus, context: context)
        type = Types::PtrUpdateStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.value = params[:value]
        type.status = params[:status]
        type.reason = params[:reason]
        type
      end
    end

    module PublicIpStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module PublicIpv4Pool
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PublicIpv4Pool, context: context)
        type = Types::PublicIpv4Pool.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.pool_id = params[:pool_id]
        type.description = params[:description]
        type.pool_address_ranges = PublicIpv4PoolRangeSet.build(params[:pool_address_ranges], context: "#{context}[:pool_address_ranges]") unless params[:pool_address_ranges].nil?
        type.total_address_count = params[:total_address_count]
        type.total_available_address_count = params[:total_available_address_count]
        type.network_border_group = params[:network_border_group]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module PublicIpv4PoolIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module PublicIpv4PoolRange
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PublicIpv4PoolRange, context: context)
        type = Types::PublicIpv4PoolRange.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.first_address = params[:first_address]
        type.last_address = params[:last_address]
        type.address_count = params[:address_count]
        type.available_address_count = params[:available_address_count]
        type
      end
    end

    module PublicIpv4PoolRangeSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PublicIpv4PoolRange.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PublicIpv4PoolSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PublicIpv4Pool.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Purchase
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Purchase, context: context)
        type = Types::Purchase.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.currency_code = params[:currency_code]
        type.duration = params[:duration]
        type.host_id_set = ResponseHostIdSet.build(params[:host_id_set], context: "#{context}[:host_id_set]") unless params[:host_id_set].nil?
        type.host_reservation_id = params[:host_reservation_id]
        type.hourly_price = params[:hourly_price]
        type.instance_family = params[:instance_family]
        type.payment_option = params[:payment_option]
        type.upfront_price = params[:upfront_price]
        type
      end
    end

    module PurchaseCapacityBlockInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PurchaseCapacityBlockInput, context: context)
        type = Types::PurchaseCapacityBlockInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.capacity_block_offering_id = params[:capacity_block_offering_id]
        type.instance_platform = params[:instance_platform]
        type
      end
    end

    module PurchaseCapacityBlockOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PurchaseCapacityBlockOutput, context: context)
        type = Types::PurchaseCapacityBlockOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_reservation = CapacityReservation.build(params[:capacity_reservation], context: "#{context}[:capacity_reservation]") unless params[:capacity_reservation].nil?
        type
      end
    end

    module PurchaseHostReservationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PurchaseHostReservationInput, context: context)
        type = Types::PurchaseHostReservationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_token = params[:client_token]
        type.currency_code = params[:currency_code]
        type.host_id_set = RequestHostIdSet.build(params[:host_id_set], context: "#{context}[:host_id_set]") unless params[:host_id_set].nil?
        type.limit_price = params[:limit_price]
        type.offering_id = params[:offering_id]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module PurchaseHostReservationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PurchaseHostReservationOutput, context: context)
        type = Types::PurchaseHostReservationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_token = params[:client_token]
        type.currency_code = params[:currency_code]
        type.purchase = PurchaseSet.build(params[:purchase], context: "#{context}[:purchase]") unless params[:purchase].nil?
        type.total_hourly_price = params[:total_hourly_price]
        type.total_upfront_price = params[:total_upfront_price]
        type
      end
    end

    module PurchaseRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PurchaseRequest, context: context)
        type = Types::PurchaseRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_count = params[:instance_count]
        type.purchase_token = params[:purchase_token]
        type
      end
    end

    module PurchaseRequestSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << PurchaseRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PurchaseReservedInstancesOfferingInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PurchaseReservedInstancesOfferingInput, context: context)
        type = Types::PurchaseReservedInstancesOfferingInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_count = params[:instance_count]
        type.reserved_instances_offering_id = params[:reserved_instances_offering_id]
        type.dry_run = params[:dry_run]
        type.limit_price = ReservedInstanceLimitPrice.build(params[:limit_price], context: "#{context}[:limit_price]") unless params[:limit_price].nil?
        type.purchase_time = params[:purchase_time]
        type
      end
    end

    module PurchaseReservedInstancesOfferingOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PurchaseReservedInstancesOfferingOutput, context: context)
        type = Types::PurchaseReservedInstancesOfferingOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.reserved_instances_id = params[:reserved_instances_id]
        type
      end
    end

    module PurchaseScheduledInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PurchaseScheduledInstancesInput, context: context)
        type = Types::PurchaseScheduledInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type.purchase_requests = PurchaseRequestSet.build(params[:purchase_requests], context: "#{context}[:purchase_requests]") unless params[:purchase_requests].nil?
        type
      end
    end

    module PurchaseScheduledInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::PurchaseScheduledInstancesOutput, context: context)
        type = Types::PurchaseScheduledInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.scheduled_instance_set = PurchasedScheduledInstanceSet.build(params[:scheduled_instance_set], context: "#{context}[:scheduled_instance_set]") unless params[:scheduled_instance_set].nil?
        type
      end
    end

    module PurchaseSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Purchase.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module PurchasedScheduledInstanceSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ScheduledInstance.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ReasonCodesList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module RebootInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RebootInstancesInput, context: context)
        type = Types::RebootInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_ids = InstanceIdStringList.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module RebootInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RebootInstancesOutput, context: context)
        type = Types::RebootInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module RecurringCharge
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RecurringCharge, context: context)
        type = Types::RecurringCharge.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.amount = params[:amount]&.to_f
        type.frequency = params[:frequency]
        type
      end
    end

    module RecurringChargesList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << RecurringCharge.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ReferencedSecurityGroup
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReferencedSecurityGroup, context: context)
        type = Types::ReferencedSecurityGroup.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group_id = params[:group_id]
        type.peering_status = params[:peering_status]
        type.user_id = params[:user_id]
        type.vpc_id = params[:vpc_id]
        type.vpc_peering_connection_id = params[:vpc_peering_connection_id]
        type
      end
    end

    module Region
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Region, context: context)
        type = Types::Region.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.endpoint = params[:endpoint]
        type.region_name = params[:region_name]
        type.opt_in_status = params[:opt_in_status]
        type
      end
    end

    module RegionList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Region.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module RegionNameStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module RegionNames
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module RegisterImageInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RegisterImageInput, context: context)
        type = Types::RegisterImageInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_location = params[:image_location]
        type.architecture = params[:architecture]
        type.block_device_mappings = BlockDeviceMappingRequestList.build(params[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless params[:block_device_mappings].nil?
        type.description = params[:description]
        type.dry_run = params[:dry_run]
        type.ena_support = params[:ena_support]
        type.kernel_id = params[:kernel_id]
        type.name = params[:name]
        type.billing_products = BillingProductList.build(params[:billing_products], context: "#{context}[:billing_products]") unless params[:billing_products].nil?
        type.ramdisk_id = params[:ramdisk_id]
        type.root_device_name = params[:root_device_name]
        type.sriov_net_support = params[:sriov_net_support]
        type.virtualization_type = params[:virtualization_type]
        type.boot_mode = params[:boot_mode]
        type.tpm_support = params[:tpm_support]
        type.uefi_data = params[:uefi_data]
        type.imds_support = params[:imds_support]
        type
      end
    end

    module RegisterImageOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RegisterImageOutput, context: context)
        type = Types::RegisterImageOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type
      end
    end

    module RegisterInstanceEventNotificationAttributesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RegisterInstanceEventNotificationAttributesInput, context: context)
        type = Types::RegisterInstanceEventNotificationAttributesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.instance_tag_attribute = RegisterInstanceTagAttributeRequest.build(params[:instance_tag_attribute], context: "#{context}[:instance_tag_attribute]") unless params[:instance_tag_attribute].nil?
        type
      end
    end

    module RegisterInstanceEventNotificationAttributesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RegisterInstanceEventNotificationAttributesOutput, context: context)
        type = Types::RegisterInstanceEventNotificationAttributesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_tag_attribute = InstanceTagNotificationAttribute.build(params[:instance_tag_attribute], context: "#{context}[:instance_tag_attribute]") unless params[:instance_tag_attribute].nil?
        type
      end
    end

    module RegisterInstanceTagAttributeRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RegisterInstanceTagAttributeRequest, context: context)
        type = Types::RegisterInstanceTagAttributeRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.include_all_tags_of_instance = params[:include_all_tags_of_instance]
        type.instance_tag_keys = InstanceTagKeySet.build(params[:instance_tag_keys], context: "#{context}[:instance_tag_keys]") unless params[:instance_tag_keys].nil?
        type
      end
    end

    module RegisterTransitGatewayMulticastGroupMembersInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RegisterTransitGatewayMulticastGroupMembersInput, context: context)
        type = Types::RegisterTransitGatewayMulticastGroupMembersInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.group_ip_address = params[:group_ip_address]
        type.network_interface_ids = TransitGatewayNetworkInterfaceIdList.build(params[:network_interface_ids], context: "#{context}[:network_interface_ids]") unless params[:network_interface_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module RegisterTransitGatewayMulticastGroupMembersOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RegisterTransitGatewayMulticastGroupMembersOutput, context: context)
        type = Types::RegisterTransitGatewayMulticastGroupMembersOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.registered_multicast_group_members = TransitGatewayMulticastRegisteredGroupMembers.build(params[:registered_multicast_group_members], context: "#{context}[:registered_multicast_group_members]") unless params[:registered_multicast_group_members].nil?
        type
      end
    end

    module RegisterTransitGatewayMulticastGroupSourcesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RegisterTransitGatewayMulticastGroupSourcesInput, context: context)
        type = Types::RegisterTransitGatewayMulticastGroupSourcesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.group_ip_address = params[:group_ip_address]
        type.network_interface_ids = TransitGatewayNetworkInterfaceIdList.build(params[:network_interface_ids], context: "#{context}[:network_interface_ids]") unless params[:network_interface_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module RegisterTransitGatewayMulticastGroupSourcesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RegisterTransitGatewayMulticastGroupSourcesOutput, context: context)
        type = Types::RegisterTransitGatewayMulticastGroupSourcesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.registered_multicast_group_sources = TransitGatewayMulticastRegisteredGroupSources.build(params[:registered_multicast_group_sources], context: "#{context}[:registered_multicast_group_sources]") unless params[:registered_multicast_group_sources].nil?
        type
      end
    end

    module RejectTransitGatewayMulticastDomainAssociationsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RejectTransitGatewayMulticastDomainAssociationsInput, context: context)
        type = Types::RejectTransitGatewayMulticastDomainAssociationsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.subnet_ids = ValueStringList.build(params[:subnet_ids], context: "#{context}[:subnet_ids]") unless params[:subnet_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module RejectTransitGatewayMulticastDomainAssociationsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RejectTransitGatewayMulticastDomainAssociationsOutput, context: context)
        type = Types::RejectTransitGatewayMulticastDomainAssociationsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.associations = TransitGatewayMulticastDomainAssociations.build(params[:associations], context: "#{context}[:associations]") unless params[:associations].nil?
        type
      end
    end

    module RejectTransitGatewayPeeringAttachmentInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RejectTransitGatewayPeeringAttachmentInput, context: context)
        type = Types::RejectTransitGatewayPeeringAttachmentInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module RejectTransitGatewayPeeringAttachmentOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RejectTransitGatewayPeeringAttachmentOutput, context: context)
        type = Types::RejectTransitGatewayPeeringAttachmentOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_peering_attachment = TransitGatewayPeeringAttachment.build(params[:transit_gateway_peering_attachment], context: "#{context}[:transit_gateway_peering_attachment]") unless params[:transit_gateway_peering_attachment].nil?
        type
      end
    end

    module RejectTransitGatewayVpcAttachmentInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RejectTransitGatewayVpcAttachmentInput, context: context)
        type = Types::RejectTransitGatewayVpcAttachmentInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module RejectTransitGatewayVpcAttachmentOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RejectTransitGatewayVpcAttachmentOutput, context: context)
        type = Types::RejectTransitGatewayVpcAttachmentOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_vpc_attachment = TransitGatewayVpcAttachment.build(params[:transit_gateway_vpc_attachment], context: "#{context}[:transit_gateway_vpc_attachment]") unless params[:transit_gateway_vpc_attachment].nil?
        type
      end
    end

    module RejectVpcEndpointConnectionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RejectVpcEndpointConnectionsInput, context: context)
        type = Types::RejectVpcEndpointConnectionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.service_id = params[:service_id]
        type.vpc_endpoint_ids = VpcEndpointIdList.build(params[:vpc_endpoint_ids], context: "#{context}[:vpc_endpoint_ids]") unless params[:vpc_endpoint_ids].nil?
        type
      end
    end

    module RejectVpcEndpointConnectionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RejectVpcEndpointConnectionsOutput, context: context)
        type = Types::RejectVpcEndpointConnectionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.unsuccessful = UnsuccessfulItemSet.build(params[:unsuccessful], context: "#{context}[:unsuccessful]") unless params[:unsuccessful].nil?
        type
      end
    end

    module RejectVpcPeeringConnectionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RejectVpcPeeringConnectionInput, context: context)
        type = Types::RejectVpcPeeringConnectionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.vpc_peering_connection_id = params[:vpc_peering_connection_id]
        type
      end
    end

    module RejectVpcPeeringConnectionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RejectVpcPeeringConnectionOutput, context: context)
        type = Types::RejectVpcPeeringConnectionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ReleaseAddressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReleaseAddressInput, context: context)
        type = Types::ReleaseAddressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_id = params[:allocation_id]
        type.public_ip = params[:public_ip]
        type.network_border_group = params[:network_border_group]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ReleaseAddressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReleaseAddressOutput, context: context)
        type = Types::ReleaseAddressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ReleaseHostsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReleaseHostsInput, context: context)
        type = Types::ReleaseHostsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.host_ids = RequestHostIdList.build(params[:host_ids], context: "#{context}[:host_ids]") unless params[:host_ids].nil?
        type
      end
    end

    module ReleaseHostsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReleaseHostsOutput, context: context)
        type = Types::ReleaseHostsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.successful = ResponseHostIdList.build(params[:successful], context: "#{context}[:successful]") unless params[:successful].nil?
        type.unsuccessful = UnsuccessfulItemList.build(params[:unsuccessful], context: "#{context}[:unsuccessful]") unless params[:unsuccessful].nil?
        type
      end
    end

    module ReleaseIpamPoolAllocationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReleaseIpamPoolAllocationInput, context: context)
        type = Types::ReleaseIpamPoolAllocationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.ipam_pool_id = params[:ipam_pool_id]
        type.cidr = params[:cidr]
        type.ipam_pool_allocation_id = params[:ipam_pool_allocation_id]
        type
      end
    end

    module ReleaseIpamPoolAllocationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReleaseIpamPoolAllocationOutput, context: context)
        type = Types::ReleaseIpamPoolAllocationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.success = params[:success]
        type
      end
    end

    module RemoveIpamOperatingRegion
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RemoveIpamOperatingRegion, context: context)
        type = Types::RemoveIpamOperatingRegion.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.region_name = params[:region_name]
        type
      end
    end

    module RemoveIpamOperatingRegionSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << RemoveIpamOperatingRegion.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module RemovePrefixListEntries
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << RemovePrefixListEntry.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module RemovePrefixListEntry
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RemovePrefixListEntry, context: context)
        type = Types::RemovePrefixListEntry.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type
      end
    end

    module ReplaceIamInstanceProfileAssociationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReplaceIamInstanceProfileAssociationInput, context: context)
        type = Types::ReplaceIamInstanceProfileAssociationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.iam_instance_profile = IamInstanceProfileSpecification.build(params[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless params[:iam_instance_profile].nil?
        type.association_id = params[:association_id]
        type
      end
    end

    module ReplaceIamInstanceProfileAssociationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReplaceIamInstanceProfileAssociationOutput, context: context)
        type = Types::ReplaceIamInstanceProfileAssociationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.iam_instance_profile_association = IamInstanceProfileAssociation.build(params[:iam_instance_profile_association], context: "#{context}[:iam_instance_profile_association]") unless params[:iam_instance_profile_association].nil?
        type
      end
    end

    module ReplaceNetworkAclAssociationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReplaceNetworkAclAssociationInput, context: context)
        type = Types::ReplaceNetworkAclAssociationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type.dry_run = params[:dry_run]
        type.network_acl_id = params[:network_acl_id]
        type
      end
    end

    module ReplaceNetworkAclAssociationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReplaceNetworkAclAssociationOutput, context: context)
        type = Types::ReplaceNetworkAclAssociationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.new_association_id = params[:new_association_id]
        type
      end
    end

    module ReplaceNetworkAclEntryInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReplaceNetworkAclEntryInput, context: context)
        type = Types::ReplaceNetworkAclEntryInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr_block = params[:cidr_block]
        type.dry_run = params[:dry_run]
        type.egress = params[:egress]
        type.icmp_type_code = IcmpTypeCode.build(params[:icmp_type_code], context: "#{context}[:icmp_type_code]") unless params[:icmp_type_code].nil?
        type.ipv6_cidr_block = params[:ipv6_cidr_block]
        type.network_acl_id = params[:network_acl_id]
        type.port_range = PortRange.build(params[:port_range], context: "#{context}[:port_range]") unless params[:port_range].nil?
        type.protocol = params[:protocol]
        type.rule_action = params[:rule_action]
        type.rule_number = params[:rule_number]
        type
      end
    end

    module ReplaceNetworkAclEntryOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReplaceNetworkAclEntryOutput, context: context)
        type = Types::ReplaceNetworkAclEntryOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ReplaceRootVolumeTask
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReplaceRootVolumeTask, context: context)
        type = Types::ReplaceRootVolumeTask.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.replace_root_volume_task_id = params[:replace_root_volume_task_id]
        type.instance_id = params[:instance_id]
        type.task_state = params[:task_state]
        type.start_time = params[:start_time]
        type.complete_time = params[:complete_time]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.image_id = params[:image_id]
        type.snapshot_id = params[:snapshot_id]
        type.delete_replaced_root_volume = params[:delete_replaced_root_volume]
        type
      end
    end

    module ReplaceRootVolumeTaskIds
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ReplaceRootVolumeTasks
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ReplaceRootVolumeTask.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ReplaceRouteInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReplaceRouteInput, context: context)
        type = Types::ReplaceRouteInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr_block = params[:destination_cidr_block]
        type.destination_ipv6_cidr_block = params[:destination_ipv6_cidr_block]
        type.destination_prefix_list_id = params[:destination_prefix_list_id]
        type.dry_run = params[:dry_run]
        type.vpc_endpoint_id = params[:vpc_endpoint_id]
        type.egress_only_internet_gateway_id = params[:egress_only_internet_gateway_id]
        type.gateway_id = params[:gateway_id]
        type.instance_id = params[:instance_id]
        type.local_target = params[:local_target]
        type.nat_gateway_id = params[:nat_gateway_id]
        type.transit_gateway_id = params[:transit_gateway_id]
        type.local_gateway_id = params[:local_gateway_id]
        type.carrier_gateway_id = params[:carrier_gateway_id]
        type.network_interface_id = params[:network_interface_id]
        type.route_table_id = params[:route_table_id]
        type.vpc_peering_connection_id = params[:vpc_peering_connection_id]
        type.core_network_arn = params[:core_network_arn]
        type
      end
    end

    module ReplaceRouteOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReplaceRouteOutput, context: context)
        type = Types::ReplaceRouteOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ReplaceRouteTableAssociationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReplaceRouteTableAssociationInput, context: context)
        type = Types::ReplaceRouteTableAssociationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type.dry_run = params[:dry_run]
        type.route_table_id = params[:route_table_id]
        type
      end
    end

    module ReplaceRouteTableAssociationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReplaceRouteTableAssociationOutput, context: context)
        type = Types::ReplaceRouteTableAssociationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.new_association_id = params[:new_association_id]
        type.association_state = RouteTableAssociationState.build(params[:association_state], context: "#{context}[:association_state]") unless params[:association_state].nil?
        type
      end
    end

    module ReplaceTransitGatewayRouteInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReplaceTransitGatewayRouteInput, context: context)
        type = Types::ReplaceTransitGatewayRouteInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr_block = params[:destination_cidr_block]
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.blackhole = params[:blackhole]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ReplaceTransitGatewayRouteOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReplaceTransitGatewayRouteOutput, context: context)
        type = Types::ReplaceTransitGatewayRouteOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.route = TransitGatewayRoute.build(params[:route], context: "#{context}[:route]") unless params[:route].nil?
        type
      end
    end

    module ReplaceVpnTunnelInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReplaceVpnTunnelInput, context: context)
        type = Types::ReplaceVpnTunnelInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection_id = params[:vpn_connection_id]
        type.vpn_tunnel_outside_ip_address = params[:vpn_tunnel_outside_ip_address]
        type.apply_pending_maintenance = params[:apply_pending_maintenance]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ReplaceVpnTunnelOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReplaceVpnTunnelOutput, context: context)
        type = Types::ReplaceVpnTunnelOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ReportInstanceStatusInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReportInstanceStatusInput, context: context)
        type = Types::ReportInstanceStatusInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.dry_run = params[:dry_run]
        type.end_time = params[:end_time]
        type.instances = InstanceIdStringList.build(params[:instances], context: "#{context}[:instances]") unless params[:instances].nil?
        type.reason_codes = ReasonCodesList.build(params[:reason_codes], context: "#{context}[:reason_codes]") unless params[:reason_codes].nil?
        type.start_time = params[:start_time]
        type.status = params[:status]
        type
      end
    end

    module ReportInstanceStatusOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReportInstanceStatusOutput, context: context)
        type = Types::ReportInstanceStatusOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module RequestFilterPortRange
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RequestFilterPortRange, context: context)
        type = Types::RequestFilterPortRange.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.from_port = params[:from_port]
        type.to_port = params[:to_port]
        type
      end
    end

    module RequestHostIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module RequestHostIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module RequestInstanceTypeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module RequestIpamResourceTag
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RequestIpamResourceTag, context: context)
        type = Types::RequestIpamResourceTag.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.key = params[:key]
        type.value = params[:value]
        type
      end
    end

    module RequestIpamResourceTagList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << RequestIpamResourceTag.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module RequestLaunchTemplateData
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RequestLaunchTemplateData, context: context)
        type = Types::RequestLaunchTemplateData.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.kernel_id = params[:kernel_id]
        type.ebs_optimized = params[:ebs_optimized]
        type.iam_instance_profile = LaunchTemplateIamInstanceProfileSpecificationRequest.build(params[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless params[:iam_instance_profile].nil?
        type.block_device_mappings = LaunchTemplateBlockDeviceMappingRequestList.build(params[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless params[:block_device_mappings].nil?
        type.network_interfaces = LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList.build(params[:network_interfaces], context: "#{context}[:network_interfaces]") unless params[:network_interfaces].nil?
        type.image_id = params[:image_id]
        type.instance_type = params[:instance_type]
        type.key_name = params[:key_name]
        type.monitoring = LaunchTemplatesMonitoringRequest.build(params[:monitoring], context: "#{context}[:monitoring]") unless params[:monitoring].nil?
        type.placement = LaunchTemplatePlacementRequest.build(params[:placement], context: "#{context}[:placement]") unless params[:placement].nil?
        type.ram_disk_id = params[:ram_disk_id]
        type.disable_api_termination = params[:disable_api_termination]
        type.instance_initiated_shutdown_behavior = params[:instance_initiated_shutdown_behavior]
        type.user_data = params[:user_data]
        type.tag_specifications = LaunchTemplateTagSpecificationRequestList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.elastic_gpu_specifications = ElasticGpuSpecificationList.build(params[:elastic_gpu_specifications], context: "#{context}[:elastic_gpu_specifications]") unless params[:elastic_gpu_specifications].nil?
        type.elastic_inference_accelerators = LaunchTemplateElasticInferenceAcceleratorList.build(params[:elastic_inference_accelerators], context: "#{context}[:elastic_inference_accelerators]") unless params[:elastic_inference_accelerators].nil?
        type.security_group_ids = SecurityGroupIdStringList.build(params[:security_group_ids], context: "#{context}[:security_group_ids]") unless params[:security_group_ids].nil?
        type.security_groups = SecurityGroupStringList.build(params[:security_groups], context: "#{context}[:security_groups]") unless params[:security_groups].nil?
        type.instance_market_options = LaunchTemplateInstanceMarketOptionsRequest.build(params[:instance_market_options], context: "#{context}[:instance_market_options]") unless params[:instance_market_options].nil?
        type.credit_specification = CreditSpecificationRequest.build(params[:credit_specification], context: "#{context}[:credit_specification]") unless params[:credit_specification].nil?
        type.cpu_options = LaunchTemplateCpuOptionsRequest.build(params[:cpu_options], context: "#{context}[:cpu_options]") unless params[:cpu_options].nil?
        type.capacity_reservation_specification = LaunchTemplateCapacityReservationSpecificationRequest.build(params[:capacity_reservation_specification], context: "#{context}[:capacity_reservation_specification]") unless params[:capacity_reservation_specification].nil?
        type.license_specifications = LaunchTemplateLicenseSpecificationListRequest.build(params[:license_specifications], context: "#{context}[:license_specifications]") unless params[:license_specifications].nil?
        type.hibernation_options = LaunchTemplateHibernationOptionsRequest.build(params[:hibernation_options], context: "#{context}[:hibernation_options]") unless params[:hibernation_options].nil?
        type.metadata_options = LaunchTemplateInstanceMetadataOptionsRequest.build(params[:metadata_options], context: "#{context}[:metadata_options]") unless params[:metadata_options].nil?
        type.enclave_options = LaunchTemplateEnclaveOptionsRequest.build(params[:enclave_options], context: "#{context}[:enclave_options]") unless params[:enclave_options].nil?
        type.instance_requirements = InstanceRequirementsRequest.build(params[:instance_requirements], context: "#{context}[:instance_requirements]") unless params[:instance_requirements].nil?
        type.private_dns_name_options = LaunchTemplatePrivateDnsNameOptionsRequest.build(params[:private_dns_name_options], context: "#{context}[:private_dns_name_options]") unless params[:private_dns_name_options].nil?
        type.maintenance_options = LaunchTemplateInstanceMaintenanceOptionsRequest.build(params[:maintenance_options], context: "#{context}[:maintenance_options]") unless params[:maintenance_options].nil?
        type.disable_api_stop = params[:disable_api_stop]
        type
      end
    end

    module RequestSpotFleetInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RequestSpotFleetInput, context: context)
        type = Types::RequestSpotFleetInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.spot_fleet_request_config = SpotFleetRequestConfigData.build(params[:spot_fleet_request_config], context: "#{context}[:spot_fleet_request_config]") unless params[:spot_fleet_request_config].nil?
        type
      end
    end

    module RequestSpotFleetOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RequestSpotFleetOutput, context: context)
        type = Types::RequestSpotFleetOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.spot_fleet_request_id = params[:spot_fleet_request_id]
        type
      end
    end

    module RequestSpotInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RequestSpotInstancesInput, context: context)
        type = Types::RequestSpotInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone_group = params[:availability_zone_group]
        type.block_duration_minutes = params[:block_duration_minutes]
        type.client_token = params[:client_token]
        type.dry_run = params[:dry_run]
        type.instance_count = params[:instance_count]
        type.launch_group = params[:launch_group]
        type.launch_specification = RequestSpotLaunchSpecification.build(params[:launch_specification], context: "#{context}[:launch_specification]") unless params[:launch_specification].nil?
        type.spot_price = params[:spot_price]
        type.type = params[:type]
        type.valid_from = params[:valid_from]
        type.valid_until = params[:valid_until]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.instance_interruption_behavior = params[:instance_interruption_behavior]
        type
      end
    end

    module RequestSpotInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RequestSpotInstancesOutput, context: context)
        type = Types::RequestSpotInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.spot_instance_requests = SpotInstanceRequestList.build(params[:spot_instance_requests], context: "#{context}[:spot_instance_requests]") unless params[:spot_instance_requests].nil?
        type
      end
    end

    module RequestSpotLaunchSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RequestSpotLaunchSpecification, context: context)
        type = Types::RequestSpotLaunchSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.security_group_ids = RequestSpotLaunchSpecificationSecurityGroupIdList.build(params[:security_group_ids], context: "#{context}[:security_group_ids]") unless params[:security_group_ids].nil?
        type.security_groups = RequestSpotLaunchSpecificationSecurityGroupList.build(params[:security_groups], context: "#{context}[:security_groups]") unless params[:security_groups].nil?
        type.addressing_type = params[:addressing_type]
        type.block_device_mappings = BlockDeviceMappingList.build(params[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless params[:block_device_mappings].nil?
        type.ebs_optimized = params[:ebs_optimized]
        type.iam_instance_profile = IamInstanceProfileSpecification.build(params[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless params[:iam_instance_profile].nil?
        type.image_id = params[:image_id]
        type.instance_type = params[:instance_type]
        type.kernel_id = params[:kernel_id]
        type.key_name = params[:key_name]
        type.monitoring = RunInstancesMonitoringEnabled.build(params[:monitoring], context: "#{context}[:monitoring]") unless params[:monitoring].nil?
        type.network_interfaces = InstanceNetworkInterfaceSpecificationList.build(params[:network_interfaces], context: "#{context}[:network_interfaces]") unless params[:network_interfaces].nil?
        type.placement = SpotPlacement.build(params[:placement], context: "#{context}[:placement]") unless params[:placement].nil?
        type.ramdisk_id = params[:ramdisk_id]
        type.subnet_id = params[:subnet_id]
        type.user_data = params[:user_data]
        type
      end
    end

    module RequestSpotLaunchSpecificationSecurityGroupIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module RequestSpotLaunchSpecificationSecurityGroupList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module Reservation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Reservation, context: context)
        type = Types::Reservation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.groups = GroupIdentifierList.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.instances = InstanceList.build(params[:instances], context: "#{context}[:instances]") unless params[:instances].nil?
        type.owner_id = params[:owner_id]
        type.requester_id = params[:requester_id]
        type.reservation_id = params[:reservation_id]
        type
      end
    end

    module ReservationFleetInstanceSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReservationFleetInstanceSpecification, context: context)
        type = Types::ReservationFleetInstanceSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_type = params[:instance_type]
        type.instance_platform = params[:instance_platform]
        type.weight = params[:weight]&.to_f
        type.availability_zone = params[:availability_zone]
        type.availability_zone_id = params[:availability_zone_id]
        type.ebs_optimized = params[:ebs_optimized]
        type.priority = params[:priority]
        type
      end
    end

    module ReservationFleetInstanceSpecificationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ReservationFleetInstanceSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ReservationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Reservation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ReservationValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReservationValue, context: context)
        type = Types::ReservationValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.hourly_price = params[:hourly_price]
        type.remaining_total_value = params[:remaining_total_value]
        type.remaining_upfront_value = params[:remaining_upfront_value]
        type
      end
    end

    module ReservedInstanceIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ReservedInstanceLimitPrice
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReservedInstanceLimitPrice, context: context)
        type = Types::ReservedInstanceLimitPrice.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.amount = params[:amount]&.to_f
        type.currency_code = params[:currency_code]
        type
      end
    end

    module ReservedInstanceReservationValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReservedInstanceReservationValue, context: context)
        type = Types::ReservedInstanceReservationValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.reservation_value = ReservationValue.build(params[:reservation_value], context: "#{context}[:reservation_value]") unless params[:reservation_value].nil?
        type.reserved_instance_id = params[:reserved_instance_id]
        type
      end
    end

    module ReservedInstanceReservationValueSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ReservedInstanceReservationValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ReservedInstances
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReservedInstances, context: context)
        type = Types::ReservedInstances.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.duration = params[:duration]
        type.end = params[:end]
        type.fixed_price = params[:fixed_price]&.to_f
        type.instance_count = params[:instance_count]
        type.instance_type = params[:instance_type]
        type.product_description = params[:product_description]
        type.reserved_instances_id = params[:reserved_instances_id]
        type.start = params[:start]
        type.state = params[:state]
        type.usage_price = params[:usage_price]&.to_f
        type.currency_code = params[:currency_code]
        type.instance_tenancy = params[:instance_tenancy]
        type.offering_class = params[:offering_class]
        type.offering_type = params[:offering_type]
        type.recurring_charges = RecurringChargesList.build(params[:recurring_charges], context: "#{context}[:recurring_charges]") unless params[:recurring_charges].nil?
        type.scope = params[:scope]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module ReservedInstancesConfiguration
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReservedInstancesConfiguration, context: context)
        type = Types::ReservedInstancesConfiguration.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.instance_count = params[:instance_count]
        type.instance_type = params[:instance_type]
        type.platform = params[:platform]
        type.scope = params[:scope]
        type
      end
    end

    module ReservedInstancesConfigurationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ReservedInstancesConfiguration.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ReservedInstancesId
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReservedInstancesId, context: context)
        type = Types::ReservedInstancesId.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.reserved_instances_id = params[:reserved_instances_id]
        type
      end
    end

    module ReservedInstancesIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ReservedInstancesList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ReservedInstances.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ReservedInstancesListing
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReservedInstancesListing, context: context)
        type = Types::ReservedInstancesListing.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_token = params[:client_token]
        type.create_date = params[:create_date]
        type.instance_counts = InstanceCountList.build(params[:instance_counts], context: "#{context}[:instance_counts]") unless params[:instance_counts].nil?
        type.price_schedules = PriceScheduleList.build(params[:price_schedules], context: "#{context}[:price_schedules]") unless params[:price_schedules].nil?
        type.reserved_instances_id = params[:reserved_instances_id]
        type.reserved_instances_listing_id = params[:reserved_instances_listing_id]
        type.status = params[:status]
        type.status_message = params[:status_message]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.update_date = params[:update_date]
        type
      end
    end

    module ReservedInstancesListingList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ReservedInstancesListing.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ReservedInstancesModification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReservedInstancesModification, context: context)
        type = Types::ReservedInstancesModification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_token = params[:client_token]
        type.create_date = params[:create_date]
        type.effective_date = params[:effective_date]
        type.modification_results = ReservedInstancesModificationResultList.build(params[:modification_results], context: "#{context}[:modification_results]") unless params[:modification_results].nil?
        type.reserved_instances_ids = ReservedIntancesIds.build(params[:reserved_instances_ids], context: "#{context}[:reserved_instances_ids]") unless params[:reserved_instances_ids].nil?
        type.reserved_instances_modification_id = params[:reserved_instances_modification_id]
        type.status = params[:status]
        type.status_message = params[:status_message]
        type.update_date = params[:update_date]
        type
      end
    end

    module ReservedInstancesModificationIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ReservedInstancesModificationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ReservedInstancesModification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ReservedInstancesModificationResult
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReservedInstancesModificationResult, context: context)
        type = Types::ReservedInstancesModificationResult.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.reserved_instances_id = params[:reserved_instances_id]
        type.target_configuration = ReservedInstancesConfiguration.build(params[:target_configuration], context: "#{context}[:target_configuration]") unless params[:target_configuration].nil?
        type
      end
    end

    module ReservedInstancesModificationResultList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ReservedInstancesModificationResult.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ReservedInstancesOffering
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ReservedInstancesOffering, context: context)
        type = Types::ReservedInstancesOffering.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.duration = params[:duration]
        type.fixed_price = params[:fixed_price]&.to_f
        type.instance_type = params[:instance_type]
        type.product_description = params[:product_description]
        type.reserved_instances_offering_id = params[:reserved_instances_offering_id]
        type.usage_price = params[:usage_price]&.to_f
        type.currency_code = params[:currency_code]
        type.instance_tenancy = params[:instance_tenancy]
        type.marketplace = params[:marketplace]
        type.offering_class = params[:offering_class]
        type.offering_type = params[:offering_type]
        type.pricing_details = PricingDetailsList.build(params[:pricing_details], context: "#{context}[:pricing_details]") unless params[:pricing_details].nil?
        type.recurring_charges = RecurringChargesList.build(params[:recurring_charges], context: "#{context}[:recurring_charges]") unless params[:recurring_charges].nil?
        type.scope = params[:scope]
        type
      end
    end

    module ReservedInstancesOfferingIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ReservedInstancesOfferingList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ReservedInstancesOffering.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ReservedIntancesIds
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ReservedInstancesId.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ResetAddressAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResetAddressAttributeInput, context: context)
        type = Types::ResetAddressAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_id = params[:allocation_id]
        type.attribute = params[:attribute]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ResetAddressAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResetAddressAttributeOutput, context: context)
        type = Types::ResetAddressAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.address = AddressAttribute.build(params[:address], context: "#{context}[:address]") unless params[:address].nil?
        type
      end
    end

    module ResetEbsDefaultKmsKeyIdInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResetEbsDefaultKmsKeyIdInput, context: context)
        type = Types::ResetEbsDefaultKmsKeyIdInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ResetEbsDefaultKmsKeyIdOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResetEbsDefaultKmsKeyIdOutput, context: context)
        type = Types::ResetEbsDefaultKmsKeyIdOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.kms_key_id = params[:kms_key_id]
        type
      end
    end

    module ResetFpgaImageAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResetFpgaImageAttributeInput, context: context)
        type = Types::ResetFpgaImageAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.fpga_image_id = params[:fpga_image_id]
        type.attribute = params[:attribute]
        type
      end
    end

    module ResetFpgaImageAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResetFpgaImageAttributeOutput, context: context)
        type = Types::ResetFpgaImageAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module ResetImageAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResetImageAttributeInput, context: context)
        type = Types::ResetImageAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attribute = params[:attribute]
        type.image_id = params[:image_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ResetImageAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResetImageAttributeOutput, context: context)
        type = Types::ResetImageAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ResetInstanceAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResetInstanceAttributeInput, context: context)
        type = Types::ResetInstanceAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attribute = params[:attribute]
        type.dry_run = params[:dry_run]
        type.instance_id = params[:instance_id]
        type
      end
    end

    module ResetInstanceAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResetInstanceAttributeOutput, context: context)
        type = Types::ResetInstanceAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ResetNetworkInterfaceAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResetNetworkInterfaceAttributeInput, context: context)
        type = Types::ResetNetworkInterfaceAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.network_interface_id = params[:network_interface_id]
        type.source_dest_check = params[:source_dest_check]
        type
      end
    end

    module ResetNetworkInterfaceAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResetNetworkInterfaceAttributeOutput, context: context)
        type = Types::ResetNetworkInterfaceAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ResetSnapshotAttributeInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResetSnapshotAttributeInput, context: context)
        type = Types::ResetSnapshotAttributeInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attribute = params[:attribute]
        type.snapshot_id = params[:snapshot_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module ResetSnapshotAttributeOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResetSnapshotAttributeOutput, context: context)
        type = Types::ResetSnapshotAttributeOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ResourceIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ResourceList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ResourceStatement
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResourceStatement, context: context)
        type = Types::ResourceStatement.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.resources = ValueStringList.build(params[:resources], context: "#{context}[:resources]") unless params[:resources].nil?
        type.resource_types = ValueStringList.build(params[:resource_types], context: "#{context}[:resource_types]") unless params[:resource_types].nil?
        type
      end
    end

    module ResourceStatementRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResourceStatementRequest, context: context)
        type = Types::ResourceStatementRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.resources = ValueStringList.build(params[:resources], context: "#{context}[:resources]") unless params[:resources].nil?
        type.resource_types = ValueStringList.build(params[:resource_types], context: "#{context}[:resource_types]") unless params[:resource_types].nil?
        type
      end
    end

    module ResponseError
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResponseError, context: context)
        type = Types::ResponseError.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module ResponseHostIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ResponseHostIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ResponseLaunchTemplateData
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ResponseLaunchTemplateData, context: context)
        type = Types::ResponseLaunchTemplateData.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.kernel_id = params[:kernel_id]
        type.ebs_optimized = params[:ebs_optimized]
        type.iam_instance_profile = LaunchTemplateIamInstanceProfileSpecification.build(params[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless params[:iam_instance_profile].nil?
        type.block_device_mappings = LaunchTemplateBlockDeviceMappingList.build(params[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless params[:block_device_mappings].nil?
        type.network_interfaces = LaunchTemplateInstanceNetworkInterfaceSpecificationList.build(params[:network_interfaces], context: "#{context}[:network_interfaces]") unless params[:network_interfaces].nil?
        type.image_id = params[:image_id]
        type.instance_type = params[:instance_type]
        type.key_name = params[:key_name]
        type.monitoring = LaunchTemplatesMonitoring.build(params[:monitoring], context: "#{context}[:monitoring]") unless params[:monitoring].nil?
        type.placement = LaunchTemplatePlacement.build(params[:placement], context: "#{context}[:placement]") unless params[:placement].nil?
        type.ram_disk_id = params[:ram_disk_id]
        type.disable_api_termination = params[:disable_api_termination]
        type.instance_initiated_shutdown_behavior = params[:instance_initiated_shutdown_behavior]
        type.user_data = params[:user_data]
        type.tag_specifications = LaunchTemplateTagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.elastic_gpu_specifications = ElasticGpuSpecificationResponseList.build(params[:elastic_gpu_specifications], context: "#{context}[:elastic_gpu_specifications]") unless params[:elastic_gpu_specifications].nil?
        type.elastic_inference_accelerators = LaunchTemplateElasticInferenceAcceleratorResponseList.build(params[:elastic_inference_accelerators], context: "#{context}[:elastic_inference_accelerators]") unless params[:elastic_inference_accelerators].nil?
        type.security_group_ids = ValueStringList.build(params[:security_group_ids], context: "#{context}[:security_group_ids]") unless params[:security_group_ids].nil?
        type.security_groups = ValueStringList.build(params[:security_groups], context: "#{context}[:security_groups]") unless params[:security_groups].nil?
        type.instance_market_options = LaunchTemplateInstanceMarketOptions.build(params[:instance_market_options], context: "#{context}[:instance_market_options]") unless params[:instance_market_options].nil?
        type.credit_specification = CreditSpecification.build(params[:credit_specification], context: "#{context}[:credit_specification]") unless params[:credit_specification].nil?
        type.cpu_options = LaunchTemplateCpuOptions.build(params[:cpu_options], context: "#{context}[:cpu_options]") unless params[:cpu_options].nil?
        type.capacity_reservation_specification = LaunchTemplateCapacityReservationSpecificationResponse.build(params[:capacity_reservation_specification], context: "#{context}[:capacity_reservation_specification]") unless params[:capacity_reservation_specification].nil?
        type.license_specifications = LaunchTemplateLicenseList.build(params[:license_specifications], context: "#{context}[:license_specifications]") unless params[:license_specifications].nil?
        type.hibernation_options = LaunchTemplateHibernationOptions.build(params[:hibernation_options], context: "#{context}[:hibernation_options]") unless params[:hibernation_options].nil?
        type.metadata_options = LaunchTemplateInstanceMetadataOptions.build(params[:metadata_options], context: "#{context}[:metadata_options]") unless params[:metadata_options].nil?
        type.enclave_options = LaunchTemplateEnclaveOptions.build(params[:enclave_options], context: "#{context}[:enclave_options]") unless params[:enclave_options].nil?
        type.instance_requirements = InstanceRequirements.build(params[:instance_requirements], context: "#{context}[:instance_requirements]") unless params[:instance_requirements].nil?
        type.private_dns_name_options = LaunchTemplatePrivateDnsNameOptions.build(params[:private_dns_name_options], context: "#{context}[:private_dns_name_options]") unless params[:private_dns_name_options].nil?
        type.maintenance_options = LaunchTemplateInstanceMaintenanceOptions.build(params[:maintenance_options], context: "#{context}[:maintenance_options]") unless params[:maintenance_options].nil?
        type.disable_api_stop = params[:disable_api_stop]
        type
      end
    end

    module RestorableByStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module RestoreAddressToClassicInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RestoreAddressToClassicInput, context: context)
        type = Types::RestoreAddressToClassicInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.public_ip = params[:public_ip]
        type
      end
    end

    module RestoreAddressToClassicOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RestoreAddressToClassicOutput, context: context)
        type = Types::RestoreAddressToClassicOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.public_ip = params[:public_ip]
        type.status = params[:status]
        type
      end
    end

    module RestoreImageFromRecycleBinInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RestoreImageFromRecycleBinInput, context: context)
        type = Types::RestoreImageFromRecycleBinInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.image_id = params[:image_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module RestoreImageFromRecycleBinOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RestoreImageFromRecycleBinOutput, context: context)
        type = Types::RestoreImageFromRecycleBinOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module RestoreManagedPrefixListVersionInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RestoreManagedPrefixListVersionInput, context: context)
        type = Types::RestoreManagedPrefixListVersionInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.prefix_list_id = params[:prefix_list_id]
        type.previous_version = params[:previous_version]
        type.current_version = params[:current_version]
        type
      end
    end

    module RestoreManagedPrefixListVersionOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RestoreManagedPrefixListVersionOutput, context: context)
        type = Types::RestoreManagedPrefixListVersionOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.prefix_list = ManagedPrefixList.build(params[:prefix_list], context: "#{context}[:prefix_list]") unless params[:prefix_list].nil?
        type
      end
    end

    module RestoreSnapshotFromRecycleBinInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RestoreSnapshotFromRecycleBinInput, context: context)
        type = Types::RestoreSnapshotFromRecycleBinInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module RestoreSnapshotFromRecycleBinOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RestoreSnapshotFromRecycleBinOutput, context: context)
        type = Types::RestoreSnapshotFromRecycleBinOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.outpost_arn = params[:outpost_arn]
        type.description = params[:description]
        type.encrypted = params[:encrypted]
        type.owner_id = params[:owner_id]
        type.progress = params[:progress]
        type.start_time = params[:start_time]
        type.state = params[:state]
        type.volume_id = params[:volume_id]
        type.volume_size = params[:volume_size]
        type.sse_type = params[:sse_type]
        type
      end
    end

    module RestoreSnapshotTierInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RestoreSnapshotTierInput, context: context)
        type = Types::RestoreSnapshotTierInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.temporary_restore_days = params[:temporary_restore_days]
        type.permanent_restore = params[:permanent_restore]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module RestoreSnapshotTierOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RestoreSnapshotTierOutput, context: context)
        type = Types::RestoreSnapshotTierOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.restore_start_time = params[:restore_start_time]
        type.restore_duration = params[:restore_duration]
        type.is_permanent_restore = params[:is_permanent_restore]
        type
      end
    end

    module RevokeClientVpnIngressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RevokeClientVpnIngressInput, context: context)
        type = Types::RevokeClientVpnIngressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.target_network_cidr = params[:target_network_cidr]
        type.access_group_id = params[:access_group_id]
        type.revoke_all_groups = params[:revoke_all_groups]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module RevokeClientVpnIngressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RevokeClientVpnIngressOutput, context: context)
        type = Types::RevokeClientVpnIngressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.status = ClientVpnAuthorizationRuleStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type
      end
    end

    module RevokeSecurityGroupEgressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RevokeSecurityGroupEgressInput, context: context)
        type = Types::RevokeSecurityGroupEgressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.group_id = params[:group_id]
        type.ip_permissions = IpPermissionList.build(params[:ip_permissions], context: "#{context}[:ip_permissions]") unless params[:ip_permissions].nil?
        type.security_group_rule_ids = SecurityGroupRuleIdList.build(params[:security_group_rule_ids], context: "#{context}[:security_group_rule_ids]") unless params[:security_group_rule_ids].nil?
        type.cidr_ip = params[:cidr_ip]
        type.from_port = params[:from_port]
        type.ip_protocol = params[:ip_protocol]
        type.to_port = params[:to_port]
        type.source_security_group_name = params[:source_security_group_name]
        type.source_security_group_owner_id = params[:source_security_group_owner_id]
        type
      end
    end

    module RevokeSecurityGroupEgressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RevokeSecurityGroupEgressOutput, context: context)
        type = Types::RevokeSecurityGroupEgressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type.unknown_ip_permissions = IpPermissionList.build(params[:unknown_ip_permissions], context: "#{context}[:unknown_ip_permissions]") unless params[:unknown_ip_permissions].nil?
        type
      end
    end

    module RevokeSecurityGroupIngressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RevokeSecurityGroupIngressInput, context: context)
        type = Types::RevokeSecurityGroupIngressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr_ip = params[:cidr_ip]
        type.from_port = params[:from_port]
        type.group_id = params[:group_id]
        type.group_name = params[:group_name]
        type.ip_permissions = IpPermissionList.build(params[:ip_permissions], context: "#{context}[:ip_permissions]") unless params[:ip_permissions].nil?
        type.ip_protocol = params[:ip_protocol]
        type.source_security_group_name = params[:source_security_group_name]
        type.source_security_group_owner_id = params[:source_security_group_owner_id]
        type.to_port = params[:to_port]
        type.dry_run = params[:dry_run]
        type.security_group_rule_ids = SecurityGroupRuleIdList.build(params[:security_group_rule_ids], context: "#{context}[:security_group_rule_ids]") unless params[:security_group_rule_ids].nil?
        type
      end
    end

    module RevokeSecurityGroupIngressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RevokeSecurityGroupIngressOutput, context: context)
        type = Types::RevokeSecurityGroupIngressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type.unknown_ip_permissions = IpPermissionList.build(params[:unknown_ip_permissions], context: "#{context}[:unknown_ip_permissions]") unless params[:unknown_ip_permissions].nil?
        type
      end
    end

    module RootDeviceTypeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module Route
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Route, context: context)
        type = Types::Route.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr_block = params[:destination_cidr_block]
        type.destination_ipv6_cidr_block = params[:destination_ipv6_cidr_block]
        type.destination_prefix_list_id = params[:destination_prefix_list_id]
        type.egress_only_internet_gateway_id = params[:egress_only_internet_gateway_id]
        type.gateway_id = params[:gateway_id]
        type.instance_id = params[:instance_id]
        type.instance_owner_id = params[:instance_owner_id]
        type.nat_gateway_id = params[:nat_gateway_id]
        type.transit_gateway_id = params[:transit_gateway_id]
        type.local_gateway_id = params[:local_gateway_id]
        type.carrier_gateway_id = params[:carrier_gateway_id]
        type.network_interface_id = params[:network_interface_id]
        type.origin = params[:origin]
        type.state = params[:state]
        type.vpc_peering_connection_id = params[:vpc_peering_connection_id]
        type.core_network_arn = params[:core_network_arn]
        type
      end
    end

    module RouteList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Route.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module RouteTable
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RouteTable, context: context)
        type = Types::RouteTable.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.associations = RouteTableAssociationList.build(params[:associations], context: "#{context}[:associations]") unless params[:associations].nil?
        type.propagating_vgws = PropagatingVgwList.build(params[:propagating_vgws], context: "#{context}[:propagating_vgws]") unless params[:propagating_vgws].nil?
        type.route_table_id = params[:route_table_id]
        type.routes = RouteList.build(params[:routes], context: "#{context}[:routes]") unless params[:routes].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.vpc_id = params[:vpc_id]
        type.owner_id = params[:owner_id]
        type
      end
    end

    module RouteTableAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RouteTableAssociation, context: context)
        type = Types::RouteTableAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.main = params[:main]
        type.route_table_association_id = params[:route_table_association_id]
        type.route_table_id = params[:route_table_id]
        type.subnet_id = params[:subnet_id]
        type.gateway_id = params[:gateway_id]
        type.association_state = RouteTableAssociationState.build(params[:association_state], context: "#{context}[:association_state]") unless params[:association_state].nil?
        type
      end
    end

    module RouteTableAssociationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << RouteTableAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module RouteTableAssociationState
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RouteTableAssociationState, context: context)
        type = Types::RouteTableAssociationState.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.state = params[:state]
        type.status_message = params[:status_message]
        type
      end
    end

    module RouteTableIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module RouteTableList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << RouteTable.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module RuleGroupRuleOptionsPair
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RuleGroupRuleOptionsPair, context: context)
        type = Types::RuleGroupRuleOptionsPair.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.rule_group_arn = params[:rule_group_arn]
        type.rule_options = RuleOptionList.build(params[:rule_options], context: "#{context}[:rule_options]") unless params[:rule_options].nil?
        type
      end
    end

    module RuleGroupRuleOptionsPairList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << RuleGroupRuleOptionsPair.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module RuleGroupTypePair
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RuleGroupTypePair, context: context)
        type = Types::RuleGroupTypePair.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.rule_group_arn = params[:rule_group_arn]
        type.rule_group_type = params[:rule_group_type]
        type
      end
    end

    module RuleGroupTypePairList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << RuleGroupTypePair.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module RuleOption
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RuleOption, context: context)
        type = Types::RuleOption.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.keyword = params[:keyword]
        type.settings = StringList.build(params[:settings], context: "#{context}[:settings]") unless params[:settings].nil?
        type
      end
    end

    module RuleOptionList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << RuleOption.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module RunInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RunInstancesInput, context: context)
        type = Types::RunInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.block_device_mappings = BlockDeviceMappingRequestList.build(params[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless params[:block_device_mappings].nil?
        type.image_id = params[:image_id]
        type.instance_type = params[:instance_type]
        type.ipv6_address_count = params[:ipv6_address_count]
        type.ipv6_addresses = InstanceIpv6AddressList.build(params[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless params[:ipv6_addresses].nil?
        type.kernel_id = params[:kernel_id]
        type.key_name = params[:key_name]
        type.max_count = params[:max_count]
        type.min_count = params[:min_count]
        type.monitoring = RunInstancesMonitoringEnabled.build(params[:monitoring], context: "#{context}[:monitoring]") unless params[:monitoring].nil?
        type.placement = Placement.build(params[:placement], context: "#{context}[:placement]") unless params[:placement].nil?
        type.ramdisk_id = params[:ramdisk_id]
        type.security_group_ids = SecurityGroupIdStringList.build(params[:security_group_ids], context: "#{context}[:security_group_ids]") unless params[:security_group_ids].nil?
        type.security_groups = SecurityGroupStringList.build(params[:security_groups], context: "#{context}[:security_groups]") unless params[:security_groups].nil?
        type.subnet_id = params[:subnet_id]
        type.user_data = params[:user_data]
        type.additional_info = params[:additional_info]
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.disable_api_termination = params[:disable_api_termination]
        type.dry_run = params[:dry_run]
        type.ebs_optimized = params[:ebs_optimized]
        type.iam_instance_profile = IamInstanceProfileSpecification.build(params[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless params[:iam_instance_profile].nil?
        type.instance_initiated_shutdown_behavior = params[:instance_initiated_shutdown_behavior]
        type.network_interfaces = InstanceNetworkInterfaceSpecificationList.build(params[:network_interfaces], context: "#{context}[:network_interfaces]") unless params[:network_interfaces].nil?
        type.private_ip_address = params[:private_ip_address]
        type.elastic_gpu_specification = ElasticGpuSpecifications.build(params[:elastic_gpu_specification], context: "#{context}[:elastic_gpu_specification]") unless params[:elastic_gpu_specification].nil?
        type.elastic_inference_accelerators = ElasticInferenceAccelerators.build(params[:elastic_inference_accelerators], context: "#{context}[:elastic_inference_accelerators]") unless params[:elastic_inference_accelerators].nil?
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.launch_template = LaunchTemplateSpecification.build(params[:launch_template], context: "#{context}[:launch_template]") unless params[:launch_template].nil?
        type.instance_market_options = InstanceMarketOptionsRequest.build(params[:instance_market_options], context: "#{context}[:instance_market_options]") unless params[:instance_market_options].nil?
        type.credit_specification = CreditSpecificationRequest.build(params[:credit_specification], context: "#{context}[:credit_specification]") unless params[:credit_specification].nil?
        type.cpu_options = CpuOptionsRequest.build(params[:cpu_options], context: "#{context}[:cpu_options]") unless params[:cpu_options].nil?
        type.capacity_reservation_specification = CapacityReservationSpecification.build(params[:capacity_reservation_specification], context: "#{context}[:capacity_reservation_specification]") unless params[:capacity_reservation_specification].nil?
        type.hibernation_options = HibernationOptionsRequest.build(params[:hibernation_options], context: "#{context}[:hibernation_options]") unless params[:hibernation_options].nil?
        type.license_specifications = LicenseSpecificationListRequest.build(params[:license_specifications], context: "#{context}[:license_specifications]") unless params[:license_specifications].nil?
        type.metadata_options = InstanceMetadataOptionsRequest.build(params[:metadata_options], context: "#{context}[:metadata_options]") unless params[:metadata_options].nil?
        type.enclave_options = EnclaveOptionsRequest.build(params[:enclave_options], context: "#{context}[:enclave_options]") unless params[:enclave_options].nil?
        type.private_dns_name_options = PrivateDnsNameOptionsRequest.build(params[:private_dns_name_options], context: "#{context}[:private_dns_name_options]") unless params[:private_dns_name_options].nil?
        type.maintenance_options = InstanceMaintenanceOptionsRequest.build(params[:maintenance_options], context: "#{context}[:maintenance_options]") unless params[:maintenance_options].nil?
        type.disable_api_stop = params[:disable_api_stop]
        type.enable_primary_ipv6 = params[:enable_primary_ipv6]
        type
      end
    end

    module RunInstancesMonitoringEnabled
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RunInstancesMonitoringEnabled, context: context)
        type = Types::RunInstancesMonitoringEnabled.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type
      end
    end

    module RunInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RunInstancesOutput, context: context)
        type = Types::RunInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.groups = GroupIdentifierList.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.instances = InstanceList.build(params[:instances], context: "#{context}[:instances]") unless params[:instances].nil?
        type.owner_id = params[:owner_id]
        type.requester_id = params[:requester_id]
        type.reservation_id = params[:reservation_id]
        type
      end
    end

    module RunScheduledInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RunScheduledInstancesInput, context: context)
        type = Types::RunScheduledInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type.dry_run = params[:dry_run]
        type.instance_count = params[:instance_count]
        type.launch_specification = ScheduledInstancesLaunchSpecification.build(params[:launch_specification], context: "#{context}[:launch_specification]") unless params[:launch_specification].nil?
        type.scheduled_instance_id = params[:scheduled_instance_id]
        type
      end
    end

    module RunScheduledInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::RunScheduledInstancesOutput, context: context)
        type = Types::RunScheduledInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id_set = InstanceIdSet.build(params[:instance_id_set], context: "#{context}[:instance_id_set]") unless params[:instance_id_set].nil?
        type
      end
    end

    module S3ObjectTag
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::S3ObjectTag, context: context)
        type = Types::S3ObjectTag.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.key = params[:key]
        type.value = params[:value]
        type
      end
    end

    module S3ObjectTagList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << S3ObjectTag.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module S3Storage
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::S3Storage, context: context)
        type = Types::S3Storage.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.aws_access_key_id = params[:aws_access_key_id]
        type.bucket = params[:bucket]
        type.prefix = params[:prefix]
        type.upload_policy = params[:upload_policy]
        type.upload_policy_signature = params[:upload_policy_signature]
        type
      end
    end

    module ScheduledInstance
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ScheduledInstance, context: context)
        type = Types::ScheduledInstance.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.create_date = params[:create_date]
        type.hourly_price = params[:hourly_price]
        type.instance_count = params[:instance_count]
        type.instance_type = params[:instance_type]
        type.network_platform = params[:network_platform]
        type.next_slot_start_time = params[:next_slot_start_time]
        type.platform = params[:platform]
        type.previous_slot_end_time = params[:previous_slot_end_time]
        type.recurrence = ScheduledInstanceRecurrence.build(params[:recurrence], context: "#{context}[:recurrence]") unless params[:recurrence].nil?
        type.scheduled_instance_id = params[:scheduled_instance_id]
        type.slot_duration_in_hours = params[:slot_duration_in_hours]
        type.term_end_date = params[:term_end_date]
        type.term_start_date = params[:term_start_date]
        type.total_scheduled_instance_hours = params[:total_scheduled_instance_hours]
        type
      end
    end

    module ScheduledInstanceAvailability
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ScheduledInstanceAvailability, context: context)
        type = Types::ScheduledInstanceAvailability.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.available_instance_count = params[:available_instance_count]
        type.first_slot_start_time = params[:first_slot_start_time]
        type.hourly_price = params[:hourly_price]
        type.instance_type = params[:instance_type]
        type.max_term_duration_in_days = params[:max_term_duration_in_days]
        type.min_term_duration_in_days = params[:min_term_duration_in_days]
        type.network_platform = params[:network_platform]
        type.platform = params[:platform]
        type.purchase_token = params[:purchase_token]
        type.recurrence = ScheduledInstanceRecurrence.build(params[:recurrence], context: "#{context}[:recurrence]") unless params[:recurrence].nil?
        type.slot_duration_in_hours = params[:slot_duration_in_hours]
        type.total_scheduled_instance_hours = params[:total_scheduled_instance_hours]
        type
      end
    end

    module ScheduledInstanceAvailabilitySet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ScheduledInstanceAvailability.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ScheduledInstanceIdRequestSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ScheduledInstanceRecurrence
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ScheduledInstanceRecurrence, context: context)
        type = Types::ScheduledInstanceRecurrence.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.frequency = params[:frequency]
        type.interval = params[:interval]
        type.occurrence_day_set = OccurrenceDaySet.build(params[:occurrence_day_set], context: "#{context}[:occurrence_day_set]") unless params[:occurrence_day_set].nil?
        type.occurrence_relative_to_end = params[:occurrence_relative_to_end]
        type.occurrence_unit = params[:occurrence_unit]
        type
      end
    end

    module ScheduledInstanceRecurrenceRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ScheduledInstanceRecurrenceRequest, context: context)
        type = Types::ScheduledInstanceRecurrenceRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.frequency = params[:frequency]
        type.interval = params[:interval]
        type.occurrence_days = OccurrenceDayRequestSet.build(params[:occurrence_days], context: "#{context}[:occurrence_days]") unless params[:occurrence_days].nil?
        type.occurrence_relative_to_end = params[:occurrence_relative_to_end]
        type.occurrence_unit = params[:occurrence_unit]
        type
      end
    end

    module ScheduledInstanceSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ScheduledInstance.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ScheduledInstancesBlockDeviceMapping
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ScheduledInstancesBlockDeviceMapping, context: context)
        type = Types::ScheduledInstancesBlockDeviceMapping.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.device_name = params[:device_name]
        type.ebs = ScheduledInstancesEbs.build(params[:ebs], context: "#{context}[:ebs]") unless params[:ebs].nil?
        type.no_device = params[:no_device]
        type.virtual_name = params[:virtual_name]
        type
      end
    end

    module ScheduledInstancesBlockDeviceMappingSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ScheduledInstancesBlockDeviceMapping.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ScheduledInstancesEbs
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ScheduledInstancesEbs, context: context)
        type = Types::ScheduledInstancesEbs.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.delete_on_termination = params[:delete_on_termination]
        type.encrypted = params[:encrypted]
        type.iops = params[:iops]
        type.snapshot_id = params[:snapshot_id]
        type.volume_size = params[:volume_size]
        type.volume_type = params[:volume_type]
        type
      end
    end

    module ScheduledInstancesIamInstanceProfile
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ScheduledInstancesIamInstanceProfile, context: context)
        type = Types::ScheduledInstancesIamInstanceProfile.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.arn = params[:arn]
        type.name = params[:name]
        type
      end
    end

    module ScheduledInstancesIpv6Address
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ScheduledInstancesIpv6Address, context: context)
        type = Types::ScheduledInstancesIpv6Address.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_address = params[:ipv6_address]
        type
      end
    end

    module ScheduledInstancesIpv6AddressList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ScheduledInstancesIpv6Address.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ScheduledInstancesLaunchSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ScheduledInstancesLaunchSpecification, context: context)
        type = Types::ScheduledInstancesLaunchSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.block_device_mappings = ScheduledInstancesBlockDeviceMappingSet.build(params[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless params[:block_device_mappings].nil?
        type.ebs_optimized = params[:ebs_optimized]
        type.iam_instance_profile = ScheduledInstancesIamInstanceProfile.build(params[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless params[:iam_instance_profile].nil?
        type.image_id = params[:image_id]
        type.instance_type = params[:instance_type]
        type.kernel_id = params[:kernel_id]
        type.key_name = params[:key_name]
        type.monitoring = ScheduledInstancesMonitoring.build(params[:monitoring], context: "#{context}[:monitoring]") unless params[:monitoring].nil?
        type.network_interfaces = ScheduledInstancesNetworkInterfaceSet.build(params[:network_interfaces], context: "#{context}[:network_interfaces]") unless params[:network_interfaces].nil?
        type.placement = ScheduledInstancesPlacement.build(params[:placement], context: "#{context}[:placement]") unless params[:placement].nil?
        type.ramdisk_id = params[:ramdisk_id]
        type.security_group_ids = ScheduledInstancesSecurityGroupIdSet.build(params[:security_group_ids], context: "#{context}[:security_group_ids]") unless params[:security_group_ids].nil?
        type.subnet_id = params[:subnet_id]
        type.user_data = params[:user_data]
        type
      end
    end

    module ScheduledInstancesMonitoring
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ScheduledInstancesMonitoring, context: context)
        type = Types::ScheduledInstancesMonitoring.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type
      end
    end

    module ScheduledInstancesNetworkInterface
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ScheduledInstancesNetworkInterface, context: context)
        type = Types::ScheduledInstancesNetworkInterface.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.associate_public_ip_address = params[:associate_public_ip_address]
        type.delete_on_termination = params[:delete_on_termination]
        type.description = params[:description]
        type.device_index = params[:device_index]
        type.groups = ScheduledInstancesSecurityGroupIdSet.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.ipv6_address_count = params[:ipv6_address_count]
        type.ipv6_addresses = ScheduledInstancesIpv6AddressList.build(params[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless params[:ipv6_addresses].nil?
        type.network_interface_id = params[:network_interface_id]
        type.private_ip_address = params[:private_ip_address]
        type.private_ip_address_configs = PrivateIpAddressConfigSet.build(params[:private_ip_address_configs], context: "#{context}[:private_ip_address_configs]") unless params[:private_ip_address_configs].nil?
        type.secondary_private_ip_address_count = params[:secondary_private_ip_address_count]
        type.subnet_id = params[:subnet_id]
        type
      end
    end

    module ScheduledInstancesNetworkInterfaceSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ScheduledInstancesNetworkInterface.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ScheduledInstancesPlacement
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ScheduledInstancesPlacement, context: context)
        type = Types::ScheduledInstancesPlacement.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.group_name = params[:group_name]
        type
      end
    end

    module ScheduledInstancesPrivateIpAddressConfig
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ScheduledInstancesPrivateIpAddressConfig, context: context)
        type = Types::ScheduledInstancesPrivateIpAddressConfig.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.primary = params[:primary]
        type.private_ip_address = params[:private_ip_address]
        type
      end
    end

    module ScheduledInstancesSecurityGroupIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module SearchLocalGatewayRoutesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SearchLocalGatewayRoutesInput, context: context)
        type = Types::SearchLocalGatewayRoutesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.local_gateway_route_table_id = params[:local_gateway_route_table_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module SearchLocalGatewayRoutesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SearchLocalGatewayRoutesOutput, context: context)
        type = Types::SearchLocalGatewayRoutesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.routes = LocalGatewayRouteList.build(params[:routes], context: "#{context}[:routes]") unless params[:routes].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module SearchTransitGatewayMulticastGroupsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SearchTransitGatewayMulticastGroupsInput, context: context)
        type = Types::SearchTransitGatewayMulticastGroupsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.next_token = params[:next_token]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module SearchTransitGatewayMulticastGroupsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SearchTransitGatewayMulticastGroupsOutput, context: context)
        type = Types::SearchTransitGatewayMulticastGroupsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.multicast_groups = TransitGatewayMulticastGroupList.build(params[:multicast_groups], context: "#{context}[:multicast_groups]") unless params[:multicast_groups].nil?
        type.next_token = params[:next_token]
        type
      end
    end

    module SearchTransitGatewayRoutesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SearchTransitGatewayRoutesInput, context: context)
        type = Types::SearchTransitGatewayRoutesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.filters = FilterList.build(params[:filters], context: "#{context}[:filters]") unless params[:filters].nil?
        type.max_results = params[:max_results]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module SearchTransitGatewayRoutesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SearchTransitGatewayRoutesOutput, context: context)
        type = Types::SearchTransitGatewayRoutesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.routes = TransitGatewayRouteList.build(params[:routes], context: "#{context}[:routes]") unless params[:routes].nil?
        type.additional_routes_available = params[:additional_routes_available]
        type
      end
    end

    module SecurityGroup
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SecurityGroup, context: context)
        type = Types::SecurityGroup.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.group_name = params[:group_name]
        type.ip_permissions = IpPermissionList.build(params[:ip_permissions], context: "#{context}[:ip_permissions]") unless params[:ip_permissions].nil?
        type.owner_id = params[:owner_id]
        type.group_id = params[:group_id]
        type.ip_permissions_egress = IpPermissionList.build(params[:ip_permissions_egress], context: "#{context}[:ip_permissions_egress]") unless params[:ip_permissions_egress].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module SecurityGroupForVpc
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SecurityGroupForVpc, context: context)
        type = Types::SecurityGroupForVpc.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.group_name = params[:group_name]
        type.owner_id = params[:owner_id]
        type.group_id = params[:group_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.primary_vpc_id = params[:primary_vpc_id]
        type
      end
    end

    module SecurityGroupForVpcList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SecurityGroupForVpc.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SecurityGroupIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module SecurityGroupIdSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module SecurityGroupIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module SecurityGroupIdStringListRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module SecurityGroupIdentifier
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SecurityGroupIdentifier, context: context)
        type = Types::SecurityGroupIdentifier.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group_id = params[:group_id]
        type.group_name = params[:group_name]
        type
      end
    end

    module SecurityGroupList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SecurityGroup.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SecurityGroupReference
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SecurityGroupReference, context: context)
        type = Types::SecurityGroupReference.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group_id = params[:group_id]
        type.referencing_vpc_id = params[:referencing_vpc_id]
        type.vpc_peering_connection_id = params[:vpc_peering_connection_id]
        type.transit_gateway_id = params[:transit_gateway_id]
        type
      end
    end

    module SecurityGroupReferences
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SecurityGroupReference.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SecurityGroupRule
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SecurityGroupRule, context: context)
        type = Types::SecurityGroupRule.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.security_group_rule_id = params[:security_group_rule_id]
        type.group_id = params[:group_id]
        type.group_owner_id = params[:group_owner_id]
        type.is_egress = params[:is_egress]
        type.ip_protocol = params[:ip_protocol]
        type.from_port = params[:from_port]
        type.to_port = params[:to_port]
        type.cidr_ipv4 = params[:cidr_ipv4]
        type.cidr_ipv6 = params[:cidr_ipv6]
        type.prefix_list_id = params[:prefix_list_id]
        type.referenced_group_info = ReferencedSecurityGroup.build(params[:referenced_group_info], context: "#{context}[:referenced_group_info]") unless params[:referenced_group_info].nil?
        type.description = params[:description]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module SecurityGroupRuleDescription
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SecurityGroupRuleDescription, context: context)
        type = Types::SecurityGroupRuleDescription.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.security_group_rule_id = params[:security_group_rule_id]
        type.description = params[:description]
        type
      end
    end

    module SecurityGroupRuleDescriptionList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SecurityGroupRuleDescription.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SecurityGroupRuleIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module SecurityGroupRuleList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SecurityGroupRule.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SecurityGroupRuleRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SecurityGroupRuleRequest, context: context)
        type = Types::SecurityGroupRuleRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ip_protocol = params[:ip_protocol]
        type.from_port = params[:from_port]
        type.to_port = params[:to_port]
        type.cidr_ipv4 = params[:cidr_ipv4]
        type.cidr_ipv6 = params[:cidr_ipv6]
        type.prefix_list_id = params[:prefix_list_id]
        type.referenced_group_id = params[:referenced_group_id]
        type.description = params[:description]
        type
      end
    end

    module SecurityGroupRuleUpdate
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SecurityGroupRuleUpdate, context: context)
        type = Types::SecurityGroupRuleUpdate.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.security_group_rule_id = params[:security_group_rule_id]
        type.security_group_rule = SecurityGroupRuleRequest.build(params[:security_group_rule], context: "#{context}[:security_group_rule]") unless params[:security_group_rule].nil?
        type
      end
    end

    module SecurityGroupRuleUpdateList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SecurityGroupRuleUpdate.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SecurityGroupStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module SendDiagnosticInterruptInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SendDiagnosticInterruptInput, context: context)
        type = Types::SendDiagnosticInterruptInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module SendDiagnosticInterruptOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SendDiagnosticInterruptOutput, context: context)
        type = Types::SendDiagnosticInterruptOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module ServiceConfiguration
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ServiceConfiguration, context: context)
        type = Types::ServiceConfiguration.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.service_type = ServiceTypeDetailSet.build(params[:service_type], context: "#{context}[:service_type]") unless params[:service_type].nil?
        type.service_id = params[:service_id]
        type.service_name = params[:service_name]
        type.service_state = params[:service_state]
        type.availability_zones = ValueStringList.build(params[:availability_zones], context: "#{context}[:availability_zones]") unless params[:availability_zones].nil?
        type.acceptance_required = params[:acceptance_required]
        type.manages_vpc_endpoints = params[:manages_vpc_endpoints]
        type.network_load_balancer_arns = ValueStringList.build(params[:network_load_balancer_arns], context: "#{context}[:network_load_balancer_arns]") unless params[:network_load_balancer_arns].nil?
        type.gateway_load_balancer_arns = ValueStringList.build(params[:gateway_load_balancer_arns], context: "#{context}[:gateway_load_balancer_arns]") unless params[:gateway_load_balancer_arns].nil?
        type.supported_ip_address_types = SupportedIpAddressTypes.build(params[:supported_ip_address_types], context: "#{context}[:supported_ip_address_types]") unless params[:supported_ip_address_types].nil?
        type.base_endpoint_dns_names = ValueStringList.build(params[:base_endpoint_dns_names], context: "#{context}[:base_endpoint_dns_names]") unless params[:base_endpoint_dns_names].nil?
        type.private_dns_name = params[:private_dns_name]
        type.private_dns_name_configuration = PrivateDnsNameConfiguration.build(params[:private_dns_name_configuration], context: "#{context}[:private_dns_name_configuration]") unless params[:private_dns_name_configuration].nil?
        type.payer_responsibility = params[:payer_responsibility]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module ServiceConfigurationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ServiceConfiguration.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ServiceDetail
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ServiceDetail, context: context)
        type = Types::ServiceDetail.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.service_name = params[:service_name]
        type.service_id = params[:service_id]
        type.service_type = ServiceTypeDetailSet.build(params[:service_type], context: "#{context}[:service_type]") unless params[:service_type].nil?
        type.availability_zones = ValueStringList.build(params[:availability_zones], context: "#{context}[:availability_zones]") unless params[:availability_zones].nil?
        type.owner = params[:owner]
        type.base_endpoint_dns_names = ValueStringList.build(params[:base_endpoint_dns_names], context: "#{context}[:base_endpoint_dns_names]") unless params[:base_endpoint_dns_names].nil?
        type.private_dns_name = params[:private_dns_name]
        type.private_dns_names = PrivateDnsDetailsSet.build(params[:private_dns_names], context: "#{context}[:private_dns_names]") unless params[:private_dns_names].nil?
        type.vpc_endpoint_policy_supported = params[:vpc_endpoint_policy_supported]
        type.acceptance_required = params[:acceptance_required]
        type.manages_vpc_endpoints = params[:manages_vpc_endpoints]
        type.payer_responsibility = params[:payer_responsibility]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.private_dns_name_verification_state = params[:private_dns_name_verification_state]
        type.supported_ip_address_types = SupportedIpAddressTypes.build(params[:supported_ip_address_types], context: "#{context}[:supported_ip_address_types]") unless params[:supported_ip_address_types].nil?
        type
      end
    end

    module ServiceDetailSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ServiceDetail.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ServiceTypeDetail
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ServiceTypeDetail, context: context)
        type = Types::ServiceTypeDetail.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.service_type = params[:service_type]
        type
      end
    end

    module ServiceTypeDetailSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ServiceTypeDetail.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SlotDateTimeRangeRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SlotDateTimeRangeRequest, context: context)
        type = Types::SlotDateTimeRangeRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.earliest_time = params[:earliest_time]
        type.latest_time = params[:latest_time]
        type
      end
    end

    module SlotStartTimeRangeRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SlotStartTimeRangeRequest, context: context)
        type = Types::SlotStartTimeRangeRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.earliest_time = params[:earliest_time]
        type.latest_time = params[:latest_time]
        type
      end
    end

    module Snapshot
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Snapshot, context: context)
        type = Types::Snapshot.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.data_encryption_key_id = params[:data_encryption_key_id]
        type.description = params[:description]
        type.encrypted = params[:encrypted]
        type.kms_key_id = params[:kms_key_id]
        type.owner_id = params[:owner_id]
        type.progress = params[:progress]
        type.snapshot_id = params[:snapshot_id]
        type.start_time = params[:start_time]
        type.state = params[:state]
        type.state_message = params[:state_message]
        type.volume_id = params[:volume_id]
        type.volume_size = params[:volume_size]
        type.owner_alias = params[:owner_alias]
        type.outpost_arn = params[:outpost_arn]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.storage_tier = params[:storage_tier]
        type.restore_expiry_time = params[:restore_expiry_time]
        type.sse_type = params[:sse_type]
        type
      end
    end

    module SnapshotDetail
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SnapshotDetail, context: context)
        type = Types::SnapshotDetail.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.device_name = params[:device_name]
        type.disk_image_size = params[:disk_image_size]&.to_f
        type.format = params[:format]
        type.progress = params[:progress]
        type.snapshot_id = params[:snapshot_id]
        type.status = params[:status]
        type.status_message = params[:status_message]
        type.url = params[:url]
        type.user_bucket = UserBucketDetails.build(params[:user_bucket], context: "#{context}[:user_bucket]") unless params[:user_bucket].nil?
        type
      end
    end

    module SnapshotDetailList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SnapshotDetail.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SnapshotDiskContainer
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SnapshotDiskContainer, context: context)
        type = Types::SnapshotDiskContainer.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.format = params[:format]
        type.url = params[:url]
        type.user_bucket = UserBucket.build(params[:user_bucket], context: "#{context}[:user_bucket]") unless params[:user_bucket].nil?
        type
      end
    end

    module SnapshotIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module SnapshotInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SnapshotInfo, context: context)
        type = Types::SnapshotInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.encrypted = params[:encrypted]
        type.volume_id = params[:volume_id]
        type.state = params[:state]
        type.volume_size = params[:volume_size]
        type.start_time = params[:start_time]
        type.progress = params[:progress]
        type.owner_id = params[:owner_id]
        type.snapshot_id = params[:snapshot_id]
        type.outpost_arn = params[:outpost_arn]
        type.sse_type = params[:sse_type]
        type
      end
    end

    module SnapshotList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Snapshot.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SnapshotRecycleBinInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SnapshotRecycleBinInfo, context: context)
        type = Types::SnapshotRecycleBinInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.recycle_bin_enter_time = params[:recycle_bin_enter_time]
        type.recycle_bin_exit_time = params[:recycle_bin_exit_time]
        type.description = params[:description]
        type.volume_id = params[:volume_id]
        type
      end
    end

    module SnapshotRecycleBinInfoList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SnapshotRecycleBinInfo.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SnapshotSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SnapshotInfo.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SnapshotTaskDetail
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SnapshotTaskDetail, context: context)
        type = Types::SnapshotTaskDetail.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.disk_image_size = params[:disk_image_size]&.to_f
        type.encrypted = params[:encrypted]
        type.format = params[:format]
        type.kms_key_id = params[:kms_key_id]
        type.progress = params[:progress]
        type.snapshot_id = params[:snapshot_id]
        type.status = params[:status]
        type.status_message = params[:status_message]
        type.url = params[:url]
        type.user_bucket = UserBucketDetails.build(params[:user_bucket], context: "#{context}[:user_bucket]") unless params[:user_bucket].nil?
        type
      end
    end

    module SnapshotTierStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SnapshotTierStatus, context: context)
        type = Types::SnapshotTierStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.volume_id = params[:volume_id]
        type.status = params[:status]
        type.owner_id = params[:owner_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.storage_tier = params[:storage_tier]
        type.last_tiering_start_time = params[:last_tiering_start_time]
        type.last_tiering_progress = params[:last_tiering_progress]
        type.last_tiering_operation_status = params[:last_tiering_operation_status]
        type.last_tiering_operation_status_detail = params[:last_tiering_operation_status_detail]
        type.archival_complete_time = params[:archival_complete_time]
        type.restore_expiry_time = params[:restore_expiry_time]
        type
      end
    end

    module SpotCapacityRebalance
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotCapacityRebalance, context: context)
        type = Types::SpotCapacityRebalance.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.replacement_strategy = params[:replacement_strategy]
        type.termination_delay = params[:termination_delay]
        type
      end
    end

    module SpotDatafeedSubscription
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotDatafeedSubscription, context: context)
        type = Types::SpotDatafeedSubscription.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.bucket = params[:bucket]
        type.fault = SpotInstanceStateFault.build(params[:fault], context: "#{context}[:fault]") unless params[:fault].nil?
        type.owner_id = params[:owner_id]
        type.prefix = params[:prefix]
        type.state = params[:state]
        type
      end
    end

    module SpotFleetLaunchSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotFleetLaunchSpecification, context: context)
        type = Types::SpotFleetLaunchSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.security_groups = GroupIdentifierList.build(params[:security_groups], context: "#{context}[:security_groups]") unless params[:security_groups].nil?
        type.addressing_type = params[:addressing_type]
        type.block_device_mappings = BlockDeviceMappingList.build(params[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless params[:block_device_mappings].nil?
        type.ebs_optimized = params[:ebs_optimized]
        type.iam_instance_profile = IamInstanceProfileSpecification.build(params[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless params[:iam_instance_profile].nil?
        type.image_id = params[:image_id]
        type.instance_type = params[:instance_type]
        type.kernel_id = params[:kernel_id]
        type.key_name = params[:key_name]
        type.monitoring = SpotFleetMonitoring.build(params[:monitoring], context: "#{context}[:monitoring]") unless params[:monitoring].nil?
        type.network_interfaces = InstanceNetworkInterfaceSpecificationList.build(params[:network_interfaces], context: "#{context}[:network_interfaces]") unless params[:network_interfaces].nil?
        type.placement = SpotPlacement.build(params[:placement], context: "#{context}[:placement]") unless params[:placement].nil?
        type.ramdisk_id = params[:ramdisk_id]
        type.spot_price = params[:spot_price]
        type.subnet_id = params[:subnet_id]
        type.user_data = params[:user_data]
        type.weighted_capacity = params[:weighted_capacity]&.to_f
        type.tag_specifications = SpotFleetTagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.instance_requirements = InstanceRequirements.build(params[:instance_requirements], context: "#{context}[:instance_requirements]") unless params[:instance_requirements].nil?
        type
      end
    end

    module SpotFleetMonitoring
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotFleetMonitoring, context: context)
        type = Types::SpotFleetMonitoring.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type
      end
    end

    module SpotFleetRequestConfig
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotFleetRequestConfig, context: context)
        type = Types::SpotFleetRequestConfig.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.activity_status = params[:activity_status]
        type.create_time = params[:create_time]
        type.spot_fleet_request_config = SpotFleetRequestConfigData.build(params[:spot_fleet_request_config], context: "#{context}[:spot_fleet_request_config]") unless params[:spot_fleet_request_config].nil?
        type.spot_fleet_request_id = params[:spot_fleet_request_id]
        type.spot_fleet_request_state = params[:spot_fleet_request_state]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module SpotFleetRequestConfigData
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotFleetRequestConfigData, context: context)
        type = Types::SpotFleetRequestConfigData.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_strategy = params[:allocation_strategy]
        type.on_demand_allocation_strategy = params[:on_demand_allocation_strategy]
        type.spot_maintenance_strategies = SpotMaintenanceStrategies.build(params[:spot_maintenance_strategies], context: "#{context}[:spot_maintenance_strategies]") unless params[:spot_maintenance_strategies].nil?
        type.client_token = params[:client_token]
        type.excess_capacity_termination_policy = params[:excess_capacity_termination_policy]
        type.fulfilled_capacity = params[:fulfilled_capacity]&.to_f
        type.on_demand_fulfilled_capacity = params[:on_demand_fulfilled_capacity]&.to_f
        type.iam_fleet_role = params[:iam_fleet_role]
        type.launch_specifications = LaunchSpecsList.build(params[:launch_specifications], context: "#{context}[:launch_specifications]") unless params[:launch_specifications].nil?
        type.launch_template_configs = LaunchTemplateConfigList.build(params[:launch_template_configs], context: "#{context}[:launch_template_configs]") unless params[:launch_template_configs].nil?
        type.spot_price = params[:spot_price]
        type.target_capacity = params[:target_capacity]
        type.on_demand_target_capacity = params[:on_demand_target_capacity]
        type.on_demand_max_total_price = params[:on_demand_max_total_price]
        type.spot_max_total_price = params[:spot_max_total_price]
        type.terminate_instances_with_expiration = params[:terminate_instances_with_expiration]
        type.type = params[:type]
        type.valid_from = params[:valid_from]
        type.valid_until = params[:valid_until]
        type.replace_unhealthy_instances = params[:replace_unhealthy_instances]
        type.instance_interruption_behavior = params[:instance_interruption_behavior]
        type.load_balancers_config = LoadBalancersConfig.build(params[:load_balancers_config], context: "#{context}[:load_balancers_config]") unless params[:load_balancers_config].nil?
        type.instance_pools_to_use_count = params[:instance_pools_to_use_count]
        type.context = params[:context]
        type.target_capacity_unit_type = params[:target_capacity_unit_type]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type
      end
    end

    module SpotFleetRequestConfigSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SpotFleetRequestConfig.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SpotFleetRequestIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module SpotFleetTagSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotFleetTagSpecification, context: context)
        type = Types::SpotFleetTagSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.resource_type = params[:resource_type]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module SpotFleetTagSpecificationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SpotFleetTagSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SpotInstanceRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotInstanceRequest, context: context)
        type = Types::SpotInstanceRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.actual_block_hourly_price = params[:actual_block_hourly_price]
        type.availability_zone_group = params[:availability_zone_group]
        type.block_duration_minutes = params[:block_duration_minutes]
        type.create_time = params[:create_time]
        type.fault = SpotInstanceStateFault.build(params[:fault], context: "#{context}[:fault]") unless params[:fault].nil?
        type.instance_id = params[:instance_id]
        type.launch_group = params[:launch_group]
        type.launch_specification = LaunchSpecification.build(params[:launch_specification], context: "#{context}[:launch_specification]") unless params[:launch_specification].nil?
        type.launched_availability_zone = params[:launched_availability_zone]
        type.product_description = params[:product_description]
        type.spot_instance_request_id = params[:spot_instance_request_id]
        type.spot_price = params[:spot_price]
        type.state = params[:state]
        type.status = SpotInstanceStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.type = params[:type]
        type.valid_from = params[:valid_from]
        type.valid_until = params[:valid_until]
        type.instance_interruption_behavior = params[:instance_interruption_behavior]
        type
      end
    end

    module SpotInstanceRequestIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module SpotInstanceRequestList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SpotInstanceRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SpotInstanceStateFault
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotInstanceStateFault, context: context)
        type = Types::SpotInstanceStateFault.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module SpotInstanceStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotInstanceStatus, context: context)
        type = Types::SpotInstanceStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type.update_time = params[:update_time]
        type
      end
    end

    module SpotMaintenanceStrategies
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotMaintenanceStrategies, context: context)
        type = Types::SpotMaintenanceStrategies.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.capacity_rebalance = SpotCapacityRebalance.build(params[:capacity_rebalance], context: "#{context}[:capacity_rebalance]") unless params[:capacity_rebalance].nil?
        type
      end
    end

    module SpotMarketOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotMarketOptions, context: context)
        type = Types::SpotMarketOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.max_price = params[:max_price]
        type.spot_instance_type = params[:spot_instance_type]
        type.block_duration_minutes = params[:block_duration_minutes]
        type.valid_until = params[:valid_until]
        type.instance_interruption_behavior = params[:instance_interruption_behavior]
        type
      end
    end

    module SpotOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotOptions, context: context)
        type = Types::SpotOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_strategy = params[:allocation_strategy]
        type.maintenance_strategies = FleetSpotMaintenanceStrategies.build(params[:maintenance_strategies], context: "#{context}[:maintenance_strategies]") unless params[:maintenance_strategies].nil?
        type.instance_interruption_behavior = params[:instance_interruption_behavior]
        type.instance_pools_to_use_count = params[:instance_pools_to_use_count]
        type.single_instance_type = params[:single_instance_type]
        type.single_availability_zone = params[:single_availability_zone]
        type.min_target_capacity = params[:min_target_capacity]
        type.max_total_price = params[:max_total_price]
        type
      end
    end

    module SpotOptionsRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotOptionsRequest, context: context)
        type = Types::SpotOptionsRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allocation_strategy = params[:allocation_strategy]
        type.maintenance_strategies = FleetSpotMaintenanceStrategiesRequest.build(params[:maintenance_strategies], context: "#{context}[:maintenance_strategies]") unless params[:maintenance_strategies].nil?
        type.instance_interruption_behavior = params[:instance_interruption_behavior]
        type.instance_pools_to_use_count = params[:instance_pools_to_use_count]
        type.single_instance_type = params[:single_instance_type]
        type.single_availability_zone = params[:single_availability_zone]
        type.min_target_capacity = params[:min_target_capacity]
        type.max_total_price = params[:max_total_price]
        type
      end
    end

    module SpotPlacement
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotPlacement, context: context)
        type = Types::SpotPlacement.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.group_name = params[:group_name]
        type.tenancy = params[:tenancy]
        type
      end
    end

    module SpotPlacementScore
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotPlacementScore, context: context)
        type = Types::SpotPlacementScore.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.region = params[:region]
        type.availability_zone_id = params[:availability_zone_id]
        type.score = params[:score]
        type
      end
    end

    module SpotPlacementScores
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SpotPlacementScore.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SpotPrice
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SpotPrice, context: context)
        type = Types::SpotPrice.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.instance_type = params[:instance_type]
        type.product_description = params[:product_description]
        type.spot_price = params[:spot_price]
        type.timestamp = params[:timestamp]
        type
      end
    end

    module SpotPriceHistoryList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SpotPrice.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module StaleIpPermission
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::StaleIpPermission, context: context)
        type = Types::StaleIpPermission.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.from_port = params[:from_port]
        type.ip_protocol = params[:ip_protocol]
        type.ip_ranges = IpRanges.build(params[:ip_ranges], context: "#{context}[:ip_ranges]") unless params[:ip_ranges].nil?
        type.prefix_list_ids = PrefixListIdSet.build(params[:prefix_list_ids], context: "#{context}[:prefix_list_ids]") unless params[:prefix_list_ids].nil?
        type.to_port = params[:to_port]
        type.user_id_group_pairs = UserIdGroupPairSet.build(params[:user_id_group_pairs], context: "#{context}[:user_id_group_pairs]") unless params[:user_id_group_pairs].nil?
        type
      end
    end

    module StaleIpPermissionSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << StaleIpPermission.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module StaleSecurityGroup
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::StaleSecurityGroup, context: context)
        type = Types::StaleSecurityGroup.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.group_id = params[:group_id]
        type.group_name = params[:group_name]
        type.stale_ip_permissions = StaleIpPermissionSet.build(params[:stale_ip_permissions], context: "#{context}[:stale_ip_permissions]") unless params[:stale_ip_permissions].nil?
        type.stale_ip_permissions_egress = StaleIpPermissionSet.build(params[:stale_ip_permissions_egress], context: "#{context}[:stale_ip_permissions_egress]") unless params[:stale_ip_permissions_egress].nil?
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module StaleSecurityGroupSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << StaleSecurityGroup.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module StartInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::StartInstancesInput, context: context)
        type = Types::StartInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_ids = InstanceIdStringList.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.additional_info = params[:additional_info]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module StartInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::StartInstancesOutput, context: context)
        type = Types::StartInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.starting_instances = InstanceStateChangeList.build(params[:starting_instances], context: "#{context}[:starting_instances]") unless params[:starting_instances].nil?
        type
      end
    end

    module StartNetworkInsightsAccessScopeAnalysisInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::StartNetworkInsightsAccessScopeAnalysisInput, context: context)
        type = Types::StartNetworkInsightsAccessScopeAnalysisInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_id = params[:network_insights_access_scope_id]
        type.dry_run = params[:dry_run]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module StartNetworkInsightsAccessScopeAnalysisOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::StartNetworkInsightsAccessScopeAnalysisOutput, context: context)
        type = Types::StartNetworkInsightsAccessScopeAnalysisOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_access_scope_analysis = NetworkInsightsAccessScopeAnalysis.build(params[:network_insights_access_scope_analysis], context: "#{context}[:network_insights_access_scope_analysis]") unless params[:network_insights_access_scope_analysis].nil?
        type
      end
    end

    module StartNetworkInsightsAnalysisInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::StartNetworkInsightsAnalysisInput, context: context)
        type = Types::StartNetworkInsightsAnalysisInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_path_id = params[:network_insights_path_id]
        type.additional_accounts = ValueStringList.build(params[:additional_accounts], context: "#{context}[:additional_accounts]") unless params[:additional_accounts].nil?
        type.filter_in_arns = ArnList.build(params[:filter_in_arns], context: "#{context}[:filter_in_arns]") unless params[:filter_in_arns].nil?
        type.dry_run = params[:dry_run]
        type.tag_specifications = TagSpecificationList.build(params[:tag_specifications], context: "#{context}[:tag_specifications]") unless params[:tag_specifications].nil?
        type.client_token = params[:client_token] || ::SecureRandom.uuid
        type
      end
    end

    module StartNetworkInsightsAnalysisOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::StartNetworkInsightsAnalysisOutput, context: context)
        type = Types::StartNetworkInsightsAnalysisOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_insights_analysis = NetworkInsightsAnalysis.build(params[:network_insights_analysis], context: "#{context}[:network_insights_analysis]") unless params[:network_insights_analysis].nil?
        type
      end
    end

    module StartVpcEndpointServicePrivateDnsVerificationInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::StartVpcEndpointServicePrivateDnsVerificationInput, context: context)
        type = Types::StartVpcEndpointServicePrivateDnsVerificationInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.service_id = params[:service_id]
        type
      end
    end

    module StartVpcEndpointServicePrivateDnsVerificationOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::StartVpcEndpointServicePrivateDnsVerificationOutput, context: context)
        type = Types::StartVpcEndpointServicePrivateDnsVerificationOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return_value = params[:return_value]
        type
      end
    end

    module StateReason
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::StateReason, context: context)
        type = Types::StateReason.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module StopInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::StopInstancesInput, context: context)
        type = Types::StopInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_ids = InstanceIdStringList.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.hibernate = params[:hibernate]
        type.dry_run = params[:dry_run]
        type.force = params[:force]
        type
      end
    end

    module StopInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::StopInstancesOutput, context: context)
        type = Types::StopInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.stopping_instances = InstanceStateChangeList.build(params[:stopping_instances], context: "#{context}[:stopping_instances]") unless params[:stopping_instances].nil?
        type
      end
    end

    module Storage
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Storage, context: context)
        type = Types::Storage.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.s3 = S3Storage.build(params[:s3], context: "#{context}[:s3]") unless params[:s3].nil?
        type
      end
    end

    module StorageLocation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::StorageLocation, context: context)
        type = Types::StorageLocation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.bucket = params[:bucket]
        type.key = params[:key]
        type
      end
    end

    module StoreImageTaskResult
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::StoreImageTaskResult, context: context)
        type = Types::StoreImageTaskResult.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ami_id = params[:ami_id]
        type.task_start_time = params[:task_start_time]
        type.bucket = params[:bucket]
        type.s3object_key = params[:s3object_key]
        type.progress_percentage = params[:progress_percentage]
        type.store_task_state = params[:store_task_state]
        type.store_task_failure_reason = params[:store_task_failure_reason]
        type
      end
    end

    module StoreImageTaskResultSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << StoreImageTaskResult.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module StringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module Subnet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Subnet, context: context)
        type = Types::Subnet.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.availability_zone_id = params[:availability_zone_id]
        type.available_ip_address_count = params[:available_ip_address_count]
        type.cidr_block = params[:cidr_block]
        type.default_for_az = params[:default_for_az]
        type.enable_lni_at_device_index = params[:enable_lni_at_device_index]
        type.map_public_ip_on_launch = params[:map_public_ip_on_launch]
        type.map_customer_owned_ip_on_launch = params[:map_customer_owned_ip_on_launch]
        type.customer_owned_ipv4_pool = params[:customer_owned_ipv4_pool]
        type.state = params[:state]
        type.subnet_id = params[:subnet_id]
        type.vpc_id = params[:vpc_id]
        type.owner_id = params[:owner_id]
        type.assign_ipv6_address_on_creation = params[:assign_ipv6_address_on_creation]
        type.ipv6_cidr_block_association_set = SubnetIpv6CidrBlockAssociationSet.build(params[:ipv6_cidr_block_association_set], context: "#{context}[:ipv6_cidr_block_association_set]") unless params[:ipv6_cidr_block_association_set].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.subnet_arn = params[:subnet_arn]
        type.outpost_arn = params[:outpost_arn]
        type.enable_dns64 = params[:enable_dns64]
        type.ipv6_native = params[:ipv6_native]
        type.private_dns_name_options_on_launch = PrivateDnsNameOptionsOnLaunch.build(params[:private_dns_name_options_on_launch], context: "#{context}[:private_dns_name_options_on_launch]") unless params[:private_dns_name_options_on_launch].nil?
        type
      end
    end

    module SubnetAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SubnetAssociation, context: context)
        type = Types::SubnetAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.subnet_id = params[:subnet_id]
        type.state = params[:state]
        type
      end
    end

    module SubnetAssociationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SubnetAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SubnetCidrBlockState
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SubnetCidrBlockState, context: context)
        type = Types::SubnetCidrBlockState.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.state = params[:state]
        type.status_message = params[:status_message]
        type
      end
    end

    module SubnetCidrReservation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SubnetCidrReservation, context: context)
        type = Types::SubnetCidrReservation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.subnet_cidr_reservation_id = params[:subnet_cidr_reservation_id]
        type.subnet_id = params[:subnet_id]
        type.cidr = params[:cidr]
        type.reservation_type = params[:reservation_type]
        type.owner_id = params[:owner_id]
        type.description = params[:description]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module SubnetCidrReservationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SubnetCidrReservation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SubnetConfiguration
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SubnetConfiguration, context: context)
        type = Types::SubnetConfiguration.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.subnet_id = params[:subnet_id]
        type.ipv4 = params[:ipv4]
        type.ipv6 = params[:ipv6]
        type
      end
    end

    module SubnetConfigurationsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SubnetConfiguration.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SubnetIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module SubnetIpv6CidrBlockAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SubnetIpv6CidrBlockAssociation, context: context)
        type = Types::SubnetIpv6CidrBlockAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type.ipv6_cidr_block = params[:ipv6_cidr_block]
        type.ipv6_cidr_block_state = SubnetCidrBlockState.build(params[:ipv6_cidr_block_state], context: "#{context}[:ipv6_cidr_block_state]") unless params[:ipv6_cidr_block_state].nil?
        type
      end
    end

    module SubnetIpv6CidrBlockAssociationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SubnetIpv6CidrBlockAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SubnetList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Subnet.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Subscription
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Subscription, context: context)
        type = Types::Subscription.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.source = params[:source]
        type.destination = params[:destination]
        type.metric = params[:metric]
        type.statistic = params[:statistic]
        type.period = params[:period]
        type
      end
    end

    module SubscriptionList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Subscription.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SuccessfulInstanceCreditSpecificationItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SuccessfulInstanceCreditSpecificationItem, context: context)
        type = Types::SuccessfulInstanceCreditSpecificationItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type
      end
    end

    module SuccessfulInstanceCreditSpecificationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SuccessfulInstanceCreditSpecificationItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SuccessfulQueuedPurchaseDeletion
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::SuccessfulQueuedPurchaseDeletion, context: context)
        type = Types::SuccessfulQueuedPurchaseDeletion.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.reserved_instances_id = params[:reserved_instances_id]
        type
      end
    end

    module SuccessfulQueuedPurchaseDeletionSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SuccessfulQueuedPurchaseDeletion.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module SupportedAdditionalProcessorFeatureList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module SupportedIpAddressTypes
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module Tag
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Tag, context: context)
        type = Types::Tag.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.key = params[:key]
        type.value = params[:value]
        type
      end
    end

    module TagDescription
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TagDescription, context: context)
        type = Types::TagDescription.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.key = params[:key]
        type.resource_id = params[:resource_id]
        type.resource_type = params[:resource_type]
        type.value = params[:value]
        type
      end
    end

    module TagDescriptionList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TagDescription.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TagList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Tag.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TagSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TagSpecification, context: context)
        type = Types::TagSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.resource_type = params[:resource_type]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module TagSpecificationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TagSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TargetCapacitySpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TargetCapacitySpecification, context: context)
        type = Types::TargetCapacitySpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.total_target_capacity = params[:total_target_capacity]
        type.on_demand_target_capacity = params[:on_demand_target_capacity]
        type.spot_target_capacity = params[:spot_target_capacity]
        type.default_target_capacity_type = params[:default_target_capacity_type]
        type.target_capacity_unit_type = params[:target_capacity_unit_type]
        type
      end
    end

    module TargetCapacitySpecificationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TargetCapacitySpecificationRequest, context: context)
        type = Types::TargetCapacitySpecificationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.total_target_capacity = params[:total_target_capacity]
        type.on_demand_target_capacity = params[:on_demand_target_capacity]
        type.spot_target_capacity = params[:spot_target_capacity]
        type.default_target_capacity_type = params[:default_target_capacity_type]
        type.target_capacity_unit_type = params[:target_capacity_unit_type]
        type
      end
    end

    module TargetConfiguration
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TargetConfiguration, context: context)
        type = Types::TargetConfiguration.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_count = params[:instance_count]
        type.offering_id = params[:offering_id]
        type
      end
    end

    module TargetConfigurationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TargetConfigurationRequest, context: context)
        type = Types::TargetConfigurationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_count = params[:instance_count]
        type.offering_id = params[:offering_id]
        type
      end
    end

    module TargetConfigurationRequestSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TargetConfigurationRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TargetGroup
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TargetGroup, context: context)
        type = Types::TargetGroup.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.arn = params[:arn]
        type
      end
    end

    module TargetGroups
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TargetGroup.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TargetGroupsConfig
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TargetGroupsConfig, context: context)
        type = Types::TargetGroupsConfig.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.target_groups = TargetGroups.build(params[:target_groups], context: "#{context}[:target_groups]") unless params[:target_groups].nil?
        type
      end
    end

    module TargetNetwork
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TargetNetwork, context: context)
        type = Types::TargetNetwork.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type.vpc_id = params[:vpc_id]
        type.target_network_id = params[:target_network_id]
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.status = AssociationStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type.security_groups = ValueStringList.build(params[:security_groups], context: "#{context}[:security_groups]") unless params[:security_groups].nil?
        type
      end
    end

    module TargetNetworkSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TargetNetwork.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TargetReservationValue
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TargetReservationValue, context: context)
        type = Types::TargetReservationValue.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.reservation_value = ReservationValue.build(params[:reservation_value], context: "#{context}[:reservation_value]") unless params[:reservation_value].nil?
        type.target_configuration = TargetConfiguration.build(params[:target_configuration], context: "#{context}[:target_configuration]") unless params[:target_configuration].nil?
        type
      end
    end

    module TargetReservationValueSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TargetReservationValue.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TerminateClientVpnConnectionsInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TerminateClientVpnConnectionsInput, context: context)
        type = Types::TerminateClientVpnConnectionsInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.connection_id = params[:connection_id]
        type.username = params[:username]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module TerminateClientVpnConnectionsOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TerminateClientVpnConnectionsOutput, context: context)
        type = Types::TerminateClientVpnConnectionsOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.client_vpn_endpoint_id = params[:client_vpn_endpoint_id]
        type.username = params[:username]
        type.connection_statuses = TerminateConnectionStatusSet.build(params[:connection_statuses], context: "#{context}[:connection_statuses]") unless params[:connection_statuses].nil?
        type
      end
    end

    module TerminateConnectionStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TerminateConnectionStatus, context: context)
        type = Types::TerminateConnectionStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.connection_id = params[:connection_id]
        type.previous_status = ClientVpnConnectionStatus.build(params[:previous_status], context: "#{context}[:previous_status]") unless params[:previous_status].nil?
        type.current_status = ClientVpnConnectionStatus.build(params[:current_status], context: "#{context}[:current_status]") unless params[:current_status].nil?
        type
      end
    end

    module TerminateConnectionStatusSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TerminateConnectionStatus.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TerminateInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TerminateInstancesInput, context: context)
        type = Types::TerminateInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_ids = InstanceIdStringList.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module TerminateInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TerminateInstancesOutput, context: context)
        type = Types::TerminateInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.terminating_instances = InstanceStateChangeList.build(params[:terminating_instances], context: "#{context}[:terminating_instances]") unless params[:terminating_instances].nil?
        type
      end
    end

    module ThreadsPerCoreList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ThroughResourcesStatement
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ThroughResourcesStatement, context: context)
        type = Types::ThroughResourcesStatement.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.resource_statement = ResourceStatement.build(params[:resource_statement], context: "#{context}[:resource_statement]") unless params[:resource_statement].nil?
        type
      end
    end

    module ThroughResourcesStatementList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ThroughResourcesStatement.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module ThroughResourcesStatementRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ThroughResourcesStatementRequest, context: context)
        type = Types::ThroughResourcesStatementRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.resource_statement = ResourceStatementRequest.build(params[:resource_statement], context: "#{context}[:resource_statement]") unless params[:resource_statement].nil?
        type
      end
    end

    module ThroughResourcesStatementRequestList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << ThroughResourcesStatementRequest.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TotalLocalStorageGB
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TotalLocalStorageGB, context: context)
        type = Types::TotalLocalStorageGB.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]&.to_f
        type.max = params[:max]&.to_f
        type
      end
    end

    module TotalLocalStorageGBRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TotalLocalStorageGBRequest, context: context)
        type = Types::TotalLocalStorageGBRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]&.to_f
        type.max = params[:max]&.to_f
        type
      end
    end

    module TrafficMirrorFilter
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TrafficMirrorFilter, context: context)
        type = Types::TrafficMirrorFilter.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_filter_id = params[:traffic_mirror_filter_id]
        type.ingress_filter_rules = TrafficMirrorFilterRuleList.build(params[:ingress_filter_rules], context: "#{context}[:ingress_filter_rules]") unless params[:ingress_filter_rules].nil?
        type.egress_filter_rules = TrafficMirrorFilterRuleList.build(params[:egress_filter_rules], context: "#{context}[:egress_filter_rules]") unless params[:egress_filter_rules].nil?
        type.network_services = TrafficMirrorNetworkServiceList.build(params[:network_services], context: "#{context}[:network_services]") unless params[:network_services].nil?
        type.description = params[:description]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module TrafficMirrorFilterIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TrafficMirrorFilterRule
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TrafficMirrorFilterRule, context: context)
        type = Types::TrafficMirrorFilterRule.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_filter_rule_id = params[:traffic_mirror_filter_rule_id]
        type.traffic_mirror_filter_id = params[:traffic_mirror_filter_id]
        type.traffic_direction = params[:traffic_direction]
        type.rule_number = params[:rule_number]
        type.rule_action = params[:rule_action]
        type.protocol = params[:protocol]
        type.destination_port_range = TrafficMirrorPortRange.build(params[:destination_port_range], context: "#{context}[:destination_port_range]") unless params[:destination_port_range].nil?
        type.source_port_range = TrafficMirrorPortRange.build(params[:source_port_range], context: "#{context}[:source_port_range]") unless params[:source_port_range].nil?
        type.destination_cidr_block = params[:destination_cidr_block]
        type.source_cidr_block = params[:source_cidr_block]
        type.description = params[:description]
        type
      end
    end

    module TrafficMirrorFilterRuleFieldList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TrafficMirrorFilterRuleList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TrafficMirrorFilterRule.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TrafficMirrorFilterSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TrafficMirrorFilter.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TrafficMirrorNetworkServiceList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TrafficMirrorPortRange
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TrafficMirrorPortRange, context: context)
        type = Types::TrafficMirrorPortRange.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.from_port = params[:from_port]
        type.to_port = params[:to_port]
        type
      end
    end

    module TrafficMirrorPortRangeRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TrafficMirrorPortRangeRequest, context: context)
        type = Types::TrafficMirrorPortRangeRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.from_port = params[:from_port]
        type.to_port = params[:to_port]
        type
      end
    end

    module TrafficMirrorSession
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TrafficMirrorSession, context: context)
        type = Types::TrafficMirrorSession.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_session_id = params[:traffic_mirror_session_id]
        type.traffic_mirror_target_id = params[:traffic_mirror_target_id]
        type.traffic_mirror_filter_id = params[:traffic_mirror_filter_id]
        type.network_interface_id = params[:network_interface_id]
        type.owner_id = params[:owner_id]
        type.packet_length = params[:packet_length]
        type.session_number = params[:session_number]
        type.virtual_network_id = params[:virtual_network_id]
        type.description = params[:description]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module TrafficMirrorSessionFieldList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TrafficMirrorSessionIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TrafficMirrorSessionSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TrafficMirrorSession.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TrafficMirrorTarget
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TrafficMirrorTarget, context: context)
        type = Types::TrafficMirrorTarget.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.traffic_mirror_target_id = params[:traffic_mirror_target_id]
        type.network_interface_id = params[:network_interface_id]
        type.network_load_balancer_arn = params[:network_load_balancer_arn]
        type.type = params[:type]
        type.description = params[:description]
        type.owner_id = params[:owner_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.gateway_load_balancer_endpoint_id = params[:gateway_load_balancer_endpoint_id]
        type
      end
    end

    module TrafficMirrorTargetIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TrafficMirrorTargetSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TrafficMirrorTarget.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGateway
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGateway, context: context)
        type = Types::TransitGateway.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_id = params[:transit_gateway_id]
        type.transit_gateway_arn = params[:transit_gateway_arn]
        type.state = params[:state]
        type.owner_id = params[:owner_id]
        type.description = params[:description]
        type.creation_time = params[:creation_time]
        type.options = TransitGatewayOptions.build(params[:options], context: "#{context}[:options]") unless params[:options].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module TransitGatewayAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayAssociation, context: context)
        type = Types::TransitGatewayAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.resource_id = params[:resource_id]
        type.resource_type = params[:resource_type]
        type.state = params[:state]
        type
      end
    end

    module TransitGatewayAttachment
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayAttachment, context: context)
        type = Types::TransitGatewayAttachment.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.transit_gateway_id = params[:transit_gateway_id]
        type.transit_gateway_owner_id = params[:transit_gateway_owner_id]
        type.resource_owner_id = params[:resource_owner_id]
        type.resource_type = params[:resource_type]
        type.resource_id = params[:resource_id]
        type.state = params[:state]
        type.association = TransitGatewayAttachmentAssociation.build(params[:association], context: "#{context}[:association]") unless params[:association].nil?
        type.creation_time = params[:creation_time]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module TransitGatewayAttachmentAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayAttachmentAssociation, context: context)
        type = Types::TransitGatewayAttachmentAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.state = params[:state]
        type
      end
    end

    module TransitGatewayAttachmentBgpConfiguration
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayAttachmentBgpConfiguration, context: context)
        type = Types::TransitGatewayAttachmentBgpConfiguration.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_asn = params[:transit_gateway_asn]
        type.peer_asn = params[:peer_asn]
        type.transit_gateway_address = params[:transit_gateway_address]
        type.peer_address = params[:peer_address]
        type.bgp_status = params[:bgp_status]
        type
      end
    end

    module TransitGatewayAttachmentBgpConfigurationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayAttachmentBgpConfiguration.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayAttachmentIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TransitGatewayAttachmentList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayAttachment.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayAttachmentPropagation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayAttachmentPropagation, context: context)
        type = Types::TransitGatewayAttachmentPropagation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.state = params[:state]
        type
      end
    end

    module TransitGatewayAttachmentPropagationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayAttachmentPropagation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayCidrBlockStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TransitGatewayConnect
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayConnect, context: context)
        type = Types::TransitGatewayConnect.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.transport_transit_gateway_attachment_id = params[:transport_transit_gateway_attachment_id]
        type.transit_gateway_id = params[:transit_gateway_id]
        type.state = params[:state]
        type.creation_time = params[:creation_time]
        type.options = TransitGatewayConnectOptions.build(params[:options], context: "#{context}[:options]") unless params[:options].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module TransitGatewayConnectList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayConnect.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayConnectOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayConnectOptions, context: context)
        type = Types::TransitGatewayConnectOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.protocol = params[:protocol]
        type
      end
    end

    module TransitGatewayConnectPeer
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayConnectPeer, context: context)
        type = Types::TransitGatewayConnectPeer.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.transit_gateway_connect_peer_id = params[:transit_gateway_connect_peer_id]
        type.state = params[:state]
        type.creation_time = params[:creation_time]
        type.connect_peer_configuration = TransitGatewayConnectPeerConfiguration.build(params[:connect_peer_configuration], context: "#{context}[:connect_peer_configuration]") unless params[:connect_peer_configuration].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module TransitGatewayConnectPeerConfiguration
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayConnectPeerConfiguration, context: context)
        type = Types::TransitGatewayConnectPeerConfiguration.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_address = params[:transit_gateway_address]
        type.peer_address = params[:peer_address]
        type.inside_cidr_blocks = InsideCidrBlocksStringList.build(params[:inside_cidr_blocks], context: "#{context}[:inside_cidr_blocks]") unless params[:inside_cidr_blocks].nil?
        type.protocol = params[:protocol]
        type.bgp_configurations = TransitGatewayAttachmentBgpConfigurationList.build(params[:bgp_configurations], context: "#{context}[:bgp_configurations]") unless params[:bgp_configurations].nil?
        type
      end
    end

    module TransitGatewayConnectPeerIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TransitGatewayConnectPeerList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayConnectPeer.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayConnectRequestBgpOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayConnectRequestBgpOptions, context: context)
        type = Types::TransitGatewayConnectRequestBgpOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.peer_asn = params[:peer_asn]
        type
      end
    end

    module TransitGatewayIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TransitGatewayList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGateway.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayMulticastDeregisteredGroupMembers
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayMulticastDeregisteredGroupMembers, context: context)
        type = Types::TransitGatewayMulticastDeregisteredGroupMembers.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.deregistered_network_interface_ids = ValueStringList.build(params[:deregistered_network_interface_ids], context: "#{context}[:deregistered_network_interface_ids]") unless params[:deregistered_network_interface_ids].nil?
        type.group_ip_address = params[:group_ip_address]
        type
      end
    end

    module TransitGatewayMulticastDeregisteredGroupSources
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayMulticastDeregisteredGroupSources, context: context)
        type = Types::TransitGatewayMulticastDeregisteredGroupSources.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.deregistered_network_interface_ids = ValueStringList.build(params[:deregistered_network_interface_ids], context: "#{context}[:deregistered_network_interface_ids]") unless params[:deregistered_network_interface_ids].nil?
        type.group_ip_address = params[:group_ip_address]
        type
      end
    end

    module TransitGatewayMulticastDomain
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayMulticastDomain, context: context)
        type = Types::TransitGatewayMulticastDomain.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.transit_gateway_id = params[:transit_gateway_id]
        type.transit_gateway_multicast_domain_arn = params[:transit_gateway_multicast_domain_arn]
        type.owner_id = params[:owner_id]
        type.options = TransitGatewayMulticastDomainOptions.build(params[:options], context: "#{context}[:options]") unless params[:options].nil?
        type.state = params[:state]
        type.creation_time = params[:creation_time]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module TransitGatewayMulticastDomainAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayMulticastDomainAssociation, context: context)
        type = Types::TransitGatewayMulticastDomainAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.resource_id = params[:resource_id]
        type.resource_type = params[:resource_type]
        type.resource_owner_id = params[:resource_owner_id]
        type.subnet = SubnetAssociation.build(params[:subnet], context: "#{context}[:subnet]") unless params[:subnet].nil?
        type
      end
    end

    module TransitGatewayMulticastDomainAssociationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayMulticastDomainAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayMulticastDomainAssociations
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayMulticastDomainAssociations, context: context)
        type = Types::TransitGatewayMulticastDomainAssociations.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.resource_id = params[:resource_id]
        type.resource_type = params[:resource_type]
        type.resource_owner_id = params[:resource_owner_id]
        type.subnets = SubnetAssociationList.build(params[:subnets], context: "#{context}[:subnets]") unless params[:subnets].nil?
        type
      end
    end

    module TransitGatewayMulticastDomainIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TransitGatewayMulticastDomainList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayMulticastDomain.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayMulticastDomainOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayMulticastDomainOptions, context: context)
        type = Types::TransitGatewayMulticastDomainOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.igmpv2_support = params[:igmpv2_support]
        type.static_sources_support = params[:static_sources_support]
        type.auto_accept_shared_associations = params[:auto_accept_shared_associations]
        type
      end
    end

    module TransitGatewayMulticastGroup
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayMulticastGroup, context: context)
        type = Types::TransitGatewayMulticastGroup.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.group_ip_address = params[:group_ip_address]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.subnet_id = params[:subnet_id]
        type.resource_id = params[:resource_id]
        type.resource_type = params[:resource_type]
        type.resource_owner_id = params[:resource_owner_id]
        type.network_interface_id = params[:network_interface_id]
        type.group_member = params[:group_member]
        type.group_source = params[:group_source]
        type.member_type = params[:member_type]
        type.source_type = params[:source_type]
        type
      end
    end

    module TransitGatewayMulticastGroupList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayMulticastGroup.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayMulticastRegisteredGroupMembers
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayMulticastRegisteredGroupMembers, context: context)
        type = Types::TransitGatewayMulticastRegisteredGroupMembers.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.registered_network_interface_ids = ValueStringList.build(params[:registered_network_interface_ids], context: "#{context}[:registered_network_interface_ids]") unless params[:registered_network_interface_ids].nil?
        type.group_ip_address = params[:group_ip_address]
        type
      end
    end

    module TransitGatewayMulticastRegisteredGroupSources
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayMulticastRegisteredGroupSources, context: context)
        type = Types::TransitGatewayMulticastRegisteredGroupSources.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_multicast_domain_id = params[:transit_gateway_multicast_domain_id]
        type.registered_network_interface_ids = ValueStringList.build(params[:registered_network_interface_ids], context: "#{context}[:registered_network_interface_ids]") unless params[:registered_network_interface_ids].nil?
        type.group_ip_address = params[:group_ip_address]
        type
      end
    end

    module TransitGatewayNetworkInterfaceIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TransitGatewayOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayOptions, context: context)
        type = Types::TransitGatewayOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.amazon_side_asn = params[:amazon_side_asn]
        type.transit_gateway_cidr_blocks = ValueStringList.build(params[:transit_gateway_cidr_blocks], context: "#{context}[:transit_gateway_cidr_blocks]") unless params[:transit_gateway_cidr_blocks].nil?
        type.auto_accept_shared_attachments = params[:auto_accept_shared_attachments]
        type.default_route_table_association = params[:default_route_table_association]
        type.association_default_route_table_id = params[:association_default_route_table_id]
        type.default_route_table_propagation = params[:default_route_table_propagation]
        type.propagation_default_route_table_id = params[:propagation_default_route_table_id]
        type.vpn_ecmp_support = params[:vpn_ecmp_support]
        type.dns_support = params[:dns_support]
        type.security_group_referencing_support = params[:security_group_referencing_support]
        type.multicast_support = params[:multicast_support]
        type
      end
    end

    module TransitGatewayPeeringAttachment
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayPeeringAttachment, context: context)
        type = Types::TransitGatewayPeeringAttachment.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.accepter_transit_gateway_attachment_id = params[:accepter_transit_gateway_attachment_id]
        type.requester_tgw_info = PeeringTgwInfo.build(params[:requester_tgw_info], context: "#{context}[:requester_tgw_info]") unless params[:requester_tgw_info].nil?
        type.accepter_tgw_info = PeeringTgwInfo.build(params[:accepter_tgw_info], context: "#{context}[:accepter_tgw_info]") unless params[:accepter_tgw_info].nil?
        type.options = TransitGatewayPeeringAttachmentOptions.build(params[:options], context: "#{context}[:options]") unless params[:options].nil?
        type.status = PeeringAttachmentStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type.state = params[:state]
        type.creation_time = params[:creation_time]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module TransitGatewayPeeringAttachmentList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayPeeringAttachment.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayPeeringAttachmentOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayPeeringAttachmentOptions, context: context)
        type = Types::TransitGatewayPeeringAttachmentOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dynamic_routing = params[:dynamic_routing]
        type
      end
    end

    module TransitGatewayPolicyRule
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayPolicyRule, context: context)
        type = Types::TransitGatewayPolicyRule.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.source_cidr_block = params[:source_cidr_block]
        type.source_port_range = params[:source_port_range]
        type.destination_cidr_block = params[:destination_cidr_block]
        type.destination_port_range = params[:destination_port_range]
        type.protocol = params[:protocol]
        type.meta_data = TransitGatewayPolicyRuleMetaData.build(params[:meta_data], context: "#{context}[:meta_data]") unless params[:meta_data].nil?
        type
      end
    end

    module TransitGatewayPolicyRuleMetaData
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayPolicyRuleMetaData, context: context)
        type = Types::TransitGatewayPolicyRuleMetaData.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.meta_data_key = params[:meta_data_key]
        type.meta_data_value = params[:meta_data_value]
        type
      end
    end

    module TransitGatewayPolicyTable
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayPolicyTable, context: context)
        type = Types::TransitGatewayPolicyTable.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_policy_table_id = params[:transit_gateway_policy_table_id]
        type.transit_gateway_id = params[:transit_gateway_id]
        type.state = params[:state]
        type.creation_time = params[:creation_time]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module TransitGatewayPolicyTableAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayPolicyTableAssociation, context: context)
        type = Types::TransitGatewayPolicyTableAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_policy_table_id = params[:transit_gateway_policy_table_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.resource_id = params[:resource_id]
        type.resource_type = params[:resource_type]
        type.state = params[:state]
        type
      end
    end

    module TransitGatewayPolicyTableAssociationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayPolicyTableAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayPolicyTableEntry
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayPolicyTableEntry, context: context)
        type = Types::TransitGatewayPolicyTableEntry.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.policy_rule_number = params[:policy_rule_number]
        type.policy_rule = TransitGatewayPolicyRule.build(params[:policy_rule], context: "#{context}[:policy_rule]") unless params[:policy_rule].nil?
        type.target_route_table_id = params[:target_route_table_id]
        type
      end
    end

    module TransitGatewayPolicyTableEntryList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayPolicyTableEntry.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayPolicyTableIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TransitGatewayPolicyTableList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayPolicyTable.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayPrefixListAttachment
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayPrefixListAttachment, context: context)
        type = Types::TransitGatewayPrefixListAttachment.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.resource_type = params[:resource_type]
        type.resource_id = params[:resource_id]
        type
      end
    end

    module TransitGatewayPrefixListReference
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayPrefixListReference, context: context)
        type = Types::TransitGatewayPrefixListReference.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.prefix_list_id = params[:prefix_list_id]
        type.prefix_list_owner_id = params[:prefix_list_owner_id]
        type.state = params[:state]
        type.blackhole = params[:blackhole]
        type.transit_gateway_attachment = TransitGatewayPrefixListAttachment.build(params[:transit_gateway_attachment], context: "#{context}[:transit_gateway_attachment]") unless params[:transit_gateway_attachment].nil?
        type
      end
    end

    module TransitGatewayPrefixListReferenceSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayPrefixListReference.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayPropagation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayPropagation, context: context)
        type = Types::TransitGatewayPropagation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.resource_id = params[:resource_id]
        type.resource_type = params[:resource_type]
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.state = params[:state]
        type.transit_gateway_route_table_announcement_id = params[:transit_gateway_route_table_announcement_id]
        type
      end
    end

    module TransitGatewayRequestOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayRequestOptions, context: context)
        type = Types::TransitGatewayRequestOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.amazon_side_asn = params[:amazon_side_asn]
        type.auto_accept_shared_attachments = params[:auto_accept_shared_attachments]
        type.default_route_table_association = params[:default_route_table_association]
        type.default_route_table_propagation = params[:default_route_table_propagation]
        type.vpn_ecmp_support = params[:vpn_ecmp_support]
        type.dns_support = params[:dns_support]
        type.security_group_referencing_support = params[:security_group_referencing_support]
        type.multicast_support = params[:multicast_support]
        type.transit_gateway_cidr_blocks = TransitGatewayCidrBlockStringList.build(params[:transit_gateway_cidr_blocks], context: "#{context}[:transit_gateway_cidr_blocks]") unless params[:transit_gateway_cidr_blocks].nil?
        type
      end
    end

    module TransitGatewayRoute
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayRoute, context: context)
        type = Types::TransitGatewayRoute.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr_block = params[:destination_cidr_block]
        type.prefix_list_id = params[:prefix_list_id]
        type.transit_gateway_route_table_announcement_id = params[:transit_gateway_route_table_announcement_id]
        type.transit_gateway_attachments = TransitGatewayRouteAttachmentList.build(params[:transit_gateway_attachments], context: "#{context}[:transit_gateway_attachments]") unless params[:transit_gateway_attachments].nil?
        type.type = params[:type]
        type.state = params[:state]
        type
      end
    end

    module TransitGatewayRouteAttachment
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayRouteAttachment, context: context)
        type = Types::TransitGatewayRouteAttachment.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.resource_id = params[:resource_id]
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.resource_type = params[:resource_type]
        type
      end
    end

    module TransitGatewayRouteAttachmentList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayRouteAttachment.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayRouteList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayRoute.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayRouteTable
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayRouteTable, context: context)
        type = Types::TransitGatewayRouteTable.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.transit_gateway_id = params[:transit_gateway_id]
        type.state = params[:state]
        type.default_association_route_table = params[:default_association_route_table]
        type.default_propagation_route_table = params[:default_propagation_route_table]
        type.creation_time = params[:creation_time]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module TransitGatewayRouteTableAnnouncement
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayRouteTableAnnouncement, context: context)
        type = Types::TransitGatewayRouteTableAnnouncement.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_route_table_announcement_id = params[:transit_gateway_route_table_announcement_id]
        type.transit_gateway_id = params[:transit_gateway_id]
        type.core_network_id = params[:core_network_id]
        type.peer_transit_gateway_id = params[:peer_transit_gateway_id]
        type.peer_core_network_id = params[:peer_core_network_id]
        type.peering_attachment_id = params[:peering_attachment_id]
        type.announcement_direction = params[:announcement_direction]
        type.transit_gateway_route_table_id = params[:transit_gateway_route_table_id]
        type.state = params[:state]
        type.creation_time = params[:creation_time]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module TransitGatewayRouteTableAnnouncementIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TransitGatewayRouteTableAnnouncementList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayRouteTableAnnouncement.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayRouteTableAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayRouteTableAssociation, context: context)
        type = Types::TransitGatewayRouteTableAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.resource_id = params[:resource_id]
        type.resource_type = params[:resource_type]
        type.state = params[:state]
        type
      end
    end

    module TransitGatewayRouteTableAssociationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayRouteTableAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayRouteTableIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TransitGatewayRouteTableList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayRouteTable.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayRouteTablePropagation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayRouteTablePropagation, context: context)
        type = Types::TransitGatewayRouteTablePropagation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.resource_id = params[:resource_id]
        type.resource_type = params[:resource_type]
        type.state = params[:state]
        type.transit_gateway_route_table_announcement_id = params[:transit_gateway_route_table_announcement_id]
        type
      end
    end

    module TransitGatewayRouteTablePropagationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayRouteTablePropagation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayRouteTableRoute
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayRouteTableRoute, context: context)
        type = Types::TransitGatewayRouteTableRoute.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr = params[:destination_cidr]
        type.state = params[:state]
        type.route_origin = params[:route_origin]
        type.prefix_list_id = params[:prefix_list_id]
        type.attachment_id = params[:attachment_id]
        type.resource_id = params[:resource_id]
        type.resource_type = params[:resource_type]
        type
      end
    end

    module TransitGatewaySubnetIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TransitGatewayVpcAttachment
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayVpcAttachment, context: context)
        type = Types::TransitGatewayVpcAttachment.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.transit_gateway_attachment_id = params[:transit_gateway_attachment_id]
        type.transit_gateway_id = params[:transit_gateway_id]
        type.vpc_id = params[:vpc_id]
        type.vpc_owner_id = params[:vpc_owner_id]
        type.state = params[:state]
        type.subnet_ids = ValueStringList.build(params[:subnet_ids], context: "#{context}[:subnet_ids]") unless params[:subnet_ids].nil?
        type.creation_time = params[:creation_time]
        type.options = TransitGatewayVpcAttachmentOptions.build(params[:options], context: "#{context}[:options]") unless params[:options].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module TransitGatewayVpcAttachmentList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TransitGatewayVpcAttachment.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TransitGatewayVpcAttachmentOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TransitGatewayVpcAttachmentOptions, context: context)
        type = Types::TransitGatewayVpcAttachmentOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dns_support = params[:dns_support]
        type.security_group_referencing_support = params[:security_group_referencing_support]
        type.ipv6_support = params[:ipv6_support]
        type.appliance_mode_support = params[:appliance_mode_support]
        type
      end
    end

    module TrunkInterfaceAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TrunkInterfaceAssociation, context: context)
        type = Types::TrunkInterfaceAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type.branch_interface_id = params[:branch_interface_id]
        type.trunk_interface_id = params[:trunk_interface_id]
        type.interface_protocol = params[:interface_protocol]
        type.vlan_id = params[:vlan_id]
        type.gre_key = params[:gre_key]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module TrunkInterfaceAssociationIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module TrunkInterfaceAssociationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TrunkInterfaceAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module TunnelOption
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::TunnelOption, context: context)
        type = Types::TunnelOption.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.outside_ip_address = params[:outside_ip_address]
        type.tunnel_inside_cidr = params[:tunnel_inside_cidr]
        type.tunnel_inside_ipv6_cidr = params[:tunnel_inside_ipv6_cidr]
        type.pre_shared_key = params[:pre_shared_key]
        type.phase1_lifetime_seconds = params[:phase1_lifetime_seconds]
        type.phase2_lifetime_seconds = params[:phase2_lifetime_seconds]
        type.rekey_margin_time_seconds = params[:rekey_margin_time_seconds]
        type.rekey_fuzz_percentage = params[:rekey_fuzz_percentage]
        type.replay_window_size = params[:replay_window_size]
        type.dpd_timeout_seconds = params[:dpd_timeout_seconds]
        type.dpd_timeout_action = params[:dpd_timeout_action]
        type.phase1_encryption_algorithms = Phase1EncryptionAlgorithmsList.build(params[:phase1_encryption_algorithms], context: "#{context}[:phase1_encryption_algorithms]") unless params[:phase1_encryption_algorithms].nil?
        type.phase2_encryption_algorithms = Phase2EncryptionAlgorithmsList.build(params[:phase2_encryption_algorithms], context: "#{context}[:phase2_encryption_algorithms]") unless params[:phase2_encryption_algorithms].nil?
        type.phase1_integrity_algorithms = Phase1IntegrityAlgorithmsList.build(params[:phase1_integrity_algorithms], context: "#{context}[:phase1_integrity_algorithms]") unless params[:phase1_integrity_algorithms].nil?
        type.phase2_integrity_algorithms = Phase2IntegrityAlgorithmsList.build(params[:phase2_integrity_algorithms], context: "#{context}[:phase2_integrity_algorithms]") unless params[:phase2_integrity_algorithms].nil?
        type.phase1_dh_group_numbers = Phase1DHGroupNumbersList.build(params[:phase1_dh_group_numbers], context: "#{context}[:phase1_dh_group_numbers]") unless params[:phase1_dh_group_numbers].nil?
        type.phase2_dh_group_numbers = Phase2DHGroupNumbersList.build(params[:phase2_dh_group_numbers], context: "#{context}[:phase2_dh_group_numbers]") unless params[:phase2_dh_group_numbers].nil?
        type.ike_versions = IKEVersionsList.build(params[:ike_versions], context: "#{context}[:ike_versions]") unless params[:ike_versions].nil?
        type.startup_action = params[:startup_action]
        type.log_options = VpnTunnelLogOptions.build(params[:log_options], context: "#{context}[:log_options]") unless params[:log_options].nil?
        type.enable_tunnel_lifecycle_control = params[:enable_tunnel_lifecycle_control]
        type
      end
    end

    module TunnelOptionsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << TunnelOption.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module UnassignIpv6AddressesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UnassignIpv6AddressesInput, context: context)
        type = Types::UnassignIpv6AddressesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.ipv6_addresses = Ipv6AddressList.build(params[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless params[:ipv6_addresses].nil?
        type.ipv6_prefixes = IpPrefixList.build(params[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless params[:ipv6_prefixes].nil?
        type.network_interface_id = params[:network_interface_id]
        type
      end
    end

    module UnassignIpv6AddressesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UnassignIpv6AddressesOutput, context: context)
        type = Types::UnassignIpv6AddressesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_interface_id = params[:network_interface_id]
        type.unassigned_ipv6_addresses = Ipv6AddressList.build(params[:unassigned_ipv6_addresses], context: "#{context}[:unassigned_ipv6_addresses]") unless params[:unassigned_ipv6_addresses].nil?
        type.unassigned_ipv6_prefixes = IpPrefixList.build(params[:unassigned_ipv6_prefixes], context: "#{context}[:unassigned_ipv6_prefixes]") unless params[:unassigned_ipv6_prefixes].nil?
        type
      end
    end

    module UnassignPrivateIpAddressesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UnassignPrivateIpAddressesInput, context: context)
        type = Types::UnassignPrivateIpAddressesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_interface_id = params[:network_interface_id]
        type.private_ip_addresses = PrivateIpAddressStringList.build(params[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless params[:private_ip_addresses].nil?
        type.ipv4_prefixes = IpPrefixList.build(params[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless params[:ipv4_prefixes].nil?
        type
      end
    end

    module UnassignPrivateIpAddressesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UnassignPrivateIpAddressesOutput, context: context)
        type = Types::UnassignPrivateIpAddressesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type
      end
    end

    module UnassignPrivateNatGatewayAddressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UnassignPrivateNatGatewayAddressInput, context: context)
        type = Types::UnassignPrivateNatGatewayAddressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.nat_gateway_id = params[:nat_gateway_id]
        type.private_ip_addresses = IpList.build(params[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless params[:private_ip_addresses].nil?
        type.max_drain_duration_seconds = params[:max_drain_duration_seconds]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module UnassignPrivateNatGatewayAddressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UnassignPrivateNatGatewayAddressOutput, context: context)
        type = Types::UnassignPrivateNatGatewayAddressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.nat_gateway_id = params[:nat_gateway_id]
        type.nat_gateway_addresses = NatGatewayAddressList.build(params[:nat_gateway_addresses], context: "#{context}[:nat_gateway_addresses]") unless params[:nat_gateway_addresses].nil?
        type
      end
    end

    module UnlockSnapshotInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UnlockSnapshotInput, context: context)
        type = Types::UnlockSnapshotInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module UnlockSnapshotOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UnlockSnapshotOutput, context: context)
        type = Types::UnlockSnapshotOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.snapshot_id = params[:snapshot_id]
        type
      end
    end

    module UnmonitorInstancesInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UnmonitorInstancesInput, context: context)
        type = Types::UnmonitorInstancesInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_ids = InstanceIdStringList.build(params[:instance_ids], context: "#{context}[:instance_ids]") unless params[:instance_ids].nil?
        type.dry_run = params[:dry_run]
        type
      end
    end

    module UnmonitorInstancesOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UnmonitorInstancesOutput, context: context)
        type = Types::UnmonitorInstancesOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_monitorings = InstanceMonitoringList.build(params[:instance_monitorings], context: "#{context}[:instance_monitorings]") unless params[:instance_monitorings].nil?
        type
      end
    end

    module UnsuccessfulInstanceCreditSpecificationItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UnsuccessfulInstanceCreditSpecificationItem, context: context)
        type = Types::UnsuccessfulInstanceCreditSpecificationItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.instance_id = params[:instance_id]
        type.error = UnsuccessfulInstanceCreditSpecificationItemError.build(params[:error], context: "#{context}[:error]") unless params[:error].nil?
        type
      end
    end

    module UnsuccessfulInstanceCreditSpecificationItemError
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UnsuccessfulInstanceCreditSpecificationItemError, context: context)
        type = Types::UnsuccessfulInstanceCreditSpecificationItemError.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module UnsuccessfulInstanceCreditSpecificationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << UnsuccessfulInstanceCreditSpecificationItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module UnsuccessfulItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UnsuccessfulItem, context: context)
        type = Types::UnsuccessfulItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.error = UnsuccessfulItemError.build(params[:error], context: "#{context}[:error]") unless params[:error].nil?
        type.resource_id = params[:resource_id]
        type
      end
    end

    module UnsuccessfulItemError
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UnsuccessfulItemError, context: context)
        type = Types::UnsuccessfulItemError.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module UnsuccessfulItemList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << UnsuccessfulItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module UnsuccessfulItemSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << UnsuccessfulItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module UpdateSecurityGroupRuleDescriptionsEgressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UpdateSecurityGroupRuleDescriptionsEgressInput, context: context)
        type = Types::UpdateSecurityGroupRuleDescriptionsEgressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.group_id = params[:group_id]
        type.group_name = params[:group_name]
        type.ip_permissions = IpPermissionList.build(params[:ip_permissions], context: "#{context}[:ip_permissions]") unless params[:ip_permissions].nil?
        type.security_group_rule_descriptions = SecurityGroupRuleDescriptionList.build(params[:security_group_rule_descriptions], context: "#{context}[:security_group_rule_descriptions]") unless params[:security_group_rule_descriptions].nil?
        type
      end
    end

    module UpdateSecurityGroupRuleDescriptionsEgressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UpdateSecurityGroupRuleDescriptionsEgressOutput, context: context)
        type = Types::UpdateSecurityGroupRuleDescriptionsEgressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module UpdateSecurityGroupRuleDescriptionsIngressInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UpdateSecurityGroupRuleDescriptionsIngressInput, context: context)
        type = Types::UpdateSecurityGroupRuleDescriptionsIngressInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.dry_run = params[:dry_run]
        type.group_id = params[:group_id]
        type.group_name = params[:group_name]
        type.ip_permissions = IpPermissionList.build(params[:ip_permissions], context: "#{context}[:ip_permissions]") unless params[:ip_permissions].nil?
        type.security_group_rule_descriptions = SecurityGroupRuleDescriptionList.build(params[:security_group_rule_descriptions], context: "#{context}[:security_group_rule_descriptions]") unless params[:security_group_rule_descriptions].nil?
        type
      end
    end

    module UpdateSecurityGroupRuleDescriptionsIngressOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UpdateSecurityGroupRuleDescriptionsIngressOutput, context: context)
        type = Types::UpdateSecurityGroupRuleDescriptionsIngressOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.return = params[:return]
        type
      end
    end

    module UsageClassTypeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module UserBucket
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UserBucket, context: context)
        type = Types::UserBucket.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.s3_bucket = params[:s3_bucket]
        type.s3_key = params[:s3_key]
        type
      end
    end

    module UserBucketDetails
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UserBucketDetails, context: context)
        type = Types::UserBucketDetails.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.s3_bucket = params[:s3_bucket]
        type.s3_key = params[:s3_key]
        type
      end
    end

    module UserData
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UserData, context: context)
        type = Types::UserData.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.data = params[:data]
        type
      end
    end

    module UserGroupStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module UserIdGroupPair
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::UserIdGroupPair, context: context)
        type = Types::UserIdGroupPair.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.group_id = params[:group_id]
        type.group_name = params[:group_name]
        type.peering_status = params[:peering_status]
        type.user_id = params[:user_id]
        type.vpc_id = params[:vpc_id]
        type.vpc_peering_connection_id = params[:vpc_peering_connection_id]
        type
      end
    end

    module UserIdGroupPairList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << UserIdGroupPair.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module UserIdGroupPairSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << UserIdGroupPair.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module UserIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VCpuCountRange
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VCpuCountRange, context: context)
        type = Types::VCpuCountRange.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]
        type.max = params[:max]
        type
      end
    end

    module VCpuCountRangeRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VCpuCountRangeRequest, context: context)
        type = Types::VCpuCountRangeRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.min = params[:min]
        type.max = params[:max]
        type
      end
    end

    module VCpuInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VCpuInfo, context: context)
        type = Types::VCpuInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.default_v_cpus = params[:default_v_cpus]
        type.default_cores = params[:default_cores]
        type.default_threads_per_core = params[:default_threads_per_core]
        type.valid_cores = CoreCountList.build(params[:valid_cores], context: "#{context}[:valid_cores]") unless params[:valid_cores].nil?
        type.valid_threads_per_core = ThreadsPerCoreList.build(params[:valid_threads_per_core], context: "#{context}[:valid_threads_per_core]") unless params[:valid_threads_per_core].nil?
        type
      end
    end

    module ValidationError
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ValidationError, context: context)
        type = Types::ValidationError.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module ValidationWarning
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::ValidationWarning, context: context)
        type = Types::ValidationWarning.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.errors = ErrorSet.build(params[:errors], context: "#{context}[:errors]") unless params[:errors].nil?
        type
      end
    end

    module ValueStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VerifiedAccessEndpoint
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessEndpoint, context: context)
        type = Types::VerifiedAccessEndpoint.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_instance_id = params[:verified_access_instance_id]
        type.verified_access_group_id = params[:verified_access_group_id]
        type.verified_access_endpoint_id = params[:verified_access_endpoint_id]
        type.application_domain = params[:application_domain]
        type.endpoint_type = params[:endpoint_type]
        type.attachment_type = params[:attachment_type]
        type.domain_certificate_arn = params[:domain_certificate_arn]
        type.endpoint_domain = params[:endpoint_domain]
        type.device_validation_domain = params[:device_validation_domain]
        type.security_group_ids = SecurityGroupIdList.build(params[:security_group_ids], context: "#{context}[:security_group_ids]") unless params[:security_group_ids].nil?
        type.load_balancer_options = VerifiedAccessEndpointLoadBalancerOptions.build(params[:load_balancer_options], context: "#{context}[:load_balancer_options]") unless params[:load_balancer_options].nil?
        type.network_interface_options = VerifiedAccessEndpointEniOptions.build(params[:network_interface_options], context: "#{context}[:network_interface_options]") unless params[:network_interface_options].nil?
        type.status = VerifiedAccessEndpointStatus.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type.description = params[:description]
        type.creation_time = params[:creation_time]
        type.last_updated_time = params[:last_updated_time]
        type.deletion_time = params[:deletion_time]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.sse_specification = VerifiedAccessSseSpecificationResponse.build(params[:sse_specification], context: "#{context}[:sse_specification]") unless params[:sse_specification].nil?
        type
      end
    end

    module VerifiedAccessEndpointEniOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessEndpointEniOptions, context: context)
        type = Types::VerifiedAccessEndpointEniOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.network_interface_id = params[:network_interface_id]
        type.protocol = params[:protocol]
        type.port = params[:port]
        type
      end
    end

    module VerifiedAccessEndpointIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VerifiedAccessEndpointList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VerifiedAccessEndpoint.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VerifiedAccessEndpointLoadBalancerOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessEndpointLoadBalancerOptions, context: context)
        type = Types::VerifiedAccessEndpointLoadBalancerOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.protocol = params[:protocol]
        type.port = params[:port]
        type.load_balancer_arn = params[:load_balancer_arn]
        type.subnet_ids = VerifiedAccessEndpointSubnetIdList.build(params[:subnet_ids], context: "#{context}[:subnet_ids]") unless params[:subnet_ids].nil?
        type
      end
    end

    module VerifiedAccessEndpointStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessEndpointStatus, context: context)
        type = Types::VerifiedAccessEndpointStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module VerifiedAccessEndpointSubnetIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VerifiedAccessGroup
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessGroup, context: context)
        type = Types::VerifiedAccessGroup.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_group_id = params[:verified_access_group_id]
        type.verified_access_instance_id = params[:verified_access_instance_id]
        type.description = params[:description]
        type.owner = params[:owner]
        type.verified_access_group_arn = params[:verified_access_group_arn]
        type.creation_time = params[:creation_time]
        type.last_updated_time = params[:last_updated_time]
        type.deletion_time = params[:deletion_time]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.sse_specification = VerifiedAccessSseSpecificationResponse.build(params[:sse_specification], context: "#{context}[:sse_specification]") unless params[:sse_specification].nil?
        type
      end
    end

    module VerifiedAccessGroupIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VerifiedAccessGroupList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VerifiedAccessGroup.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VerifiedAccessInstance
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessInstance, context: context)
        type = Types::VerifiedAccessInstance.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_instance_id = params[:verified_access_instance_id]
        type.description = params[:description]
        type.verified_access_trust_providers = VerifiedAccessTrustProviderCondensedList.build(params[:verified_access_trust_providers], context: "#{context}[:verified_access_trust_providers]") unless params[:verified_access_trust_providers].nil?
        type.creation_time = params[:creation_time]
        type.last_updated_time = params[:last_updated_time]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.fips_enabled = params[:fips_enabled]
        type
      end
    end

    module VerifiedAccessInstanceIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VerifiedAccessInstanceList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VerifiedAccessInstance.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VerifiedAccessInstanceLoggingConfiguration
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessInstanceLoggingConfiguration, context: context)
        type = Types::VerifiedAccessInstanceLoggingConfiguration.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_instance_id = params[:verified_access_instance_id]
        type.access_logs = VerifiedAccessLogs.build(params[:access_logs], context: "#{context}[:access_logs]") unless params[:access_logs].nil?
        type
      end
    end

    module VerifiedAccessInstanceLoggingConfigurationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VerifiedAccessInstanceLoggingConfiguration.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VerifiedAccessLogCloudWatchLogsDestination
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessLogCloudWatchLogsDestination, context: context)
        type = Types::VerifiedAccessLogCloudWatchLogsDestination.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type.delivery_status = VerifiedAccessLogDeliveryStatus.build(params[:delivery_status], context: "#{context}[:delivery_status]") unless params[:delivery_status].nil?
        type.log_group = params[:log_group]
        type
      end
    end

    module VerifiedAccessLogCloudWatchLogsDestinationOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessLogCloudWatchLogsDestinationOptions, context: context)
        type = Types::VerifiedAccessLogCloudWatchLogsDestinationOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type.log_group = params[:log_group]
        type
      end
    end

    module VerifiedAccessLogDeliveryStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessLogDeliveryStatus, context: context)
        type = Types::VerifiedAccessLogDeliveryStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module VerifiedAccessLogKinesisDataFirehoseDestination
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessLogKinesisDataFirehoseDestination, context: context)
        type = Types::VerifiedAccessLogKinesisDataFirehoseDestination.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type.delivery_status = VerifiedAccessLogDeliveryStatus.build(params[:delivery_status], context: "#{context}[:delivery_status]") unless params[:delivery_status].nil?
        type.delivery_stream = params[:delivery_stream]
        type
      end
    end

    module VerifiedAccessLogKinesisDataFirehoseDestinationOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessLogKinesisDataFirehoseDestinationOptions, context: context)
        type = Types::VerifiedAccessLogKinesisDataFirehoseDestinationOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type.delivery_stream = params[:delivery_stream]
        type
      end
    end

    module VerifiedAccessLogOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessLogOptions, context: context)
        type = Types::VerifiedAccessLogOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.s3 = VerifiedAccessLogS3DestinationOptions.build(params[:s3], context: "#{context}[:s3]") unless params[:s3].nil?
        type.cloud_watch_logs = VerifiedAccessLogCloudWatchLogsDestinationOptions.build(params[:cloud_watch_logs], context: "#{context}[:cloud_watch_logs]") unless params[:cloud_watch_logs].nil?
        type.kinesis_data_firehose = VerifiedAccessLogKinesisDataFirehoseDestinationOptions.build(params[:kinesis_data_firehose], context: "#{context}[:kinesis_data_firehose]") unless params[:kinesis_data_firehose].nil?
        type.log_version = params[:log_version]
        type.include_trust_context = params[:include_trust_context]
        type
      end
    end

    module VerifiedAccessLogS3Destination
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessLogS3Destination, context: context)
        type = Types::VerifiedAccessLogS3Destination.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type.delivery_status = VerifiedAccessLogDeliveryStatus.build(params[:delivery_status], context: "#{context}[:delivery_status]") unless params[:delivery_status].nil?
        type.bucket_name = params[:bucket_name]
        type.prefix = params[:prefix]
        type.bucket_owner = params[:bucket_owner]
        type
      end
    end

    module VerifiedAccessLogS3DestinationOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessLogS3DestinationOptions, context: context)
        type = Types::VerifiedAccessLogS3DestinationOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enabled = params[:enabled]
        type.bucket_name = params[:bucket_name]
        type.prefix = params[:prefix]
        type.bucket_owner = params[:bucket_owner]
        type
      end
    end

    module VerifiedAccessLogs
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessLogs, context: context)
        type = Types::VerifiedAccessLogs.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.s3 = VerifiedAccessLogS3Destination.build(params[:s3], context: "#{context}[:s3]") unless params[:s3].nil?
        type.cloud_watch_logs = VerifiedAccessLogCloudWatchLogsDestination.build(params[:cloud_watch_logs], context: "#{context}[:cloud_watch_logs]") unless params[:cloud_watch_logs].nil?
        type.kinesis_data_firehose = VerifiedAccessLogKinesisDataFirehoseDestination.build(params[:kinesis_data_firehose], context: "#{context}[:kinesis_data_firehose]") unless params[:kinesis_data_firehose].nil?
        type.log_version = params[:log_version]
        type.include_trust_context = params[:include_trust_context]
        type
      end
    end

    module VerifiedAccessSseSpecificationRequest
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessSseSpecificationRequest, context: context)
        type = Types::VerifiedAccessSseSpecificationRequest.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.customer_managed_key_enabled = params[:customer_managed_key_enabled]
        type.kms_key_arn = params[:kms_key_arn]
        type
      end
    end

    module VerifiedAccessSseSpecificationResponse
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessSseSpecificationResponse, context: context)
        type = Types::VerifiedAccessSseSpecificationResponse.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.customer_managed_key_enabled = params[:customer_managed_key_enabled]
        type.kms_key_arn = params[:kms_key_arn]
        type
      end
    end

    module VerifiedAccessTrustProvider
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessTrustProvider, context: context)
        type = Types::VerifiedAccessTrustProvider.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_trust_provider_id = params[:verified_access_trust_provider_id]
        type.description = params[:description]
        type.trust_provider_type = params[:trust_provider_type]
        type.user_trust_provider_type = params[:user_trust_provider_type]
        type.device_trust_provider_type = params[:device_trust_provider_type]
        type.oidc_options = OidcOptions.build(params[:oidc_options], context: "#{context}[:oidc_options]") unless params[:oidc_options].nil?
        type.device_options = DeviceOptions.build(params[:device_options], context: "#{context}[:device_options]") unless params[:device_options].nil?
        type.policy_reference_name = params[:policy_reference_name]
        type.creation_time = params[:creation_time]
        type.last_updated_time = params[:last_updated_time]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.sse_specification = VerifiedAccessSseSpecificationResponse.build(params[:sse_specification], context: "#{context}[:sse_specification]") unless params[:sse_specification].nil?
        type
      end
    end

    module VerifiedAccessTrustProviderCondensed
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VerifiedAccessTrustProviderCondensed, context: context)
        type = Types::VerifiedAccessTrustProviderCondensed.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.verified_access_trust_provider_id = params[:verified_access_trust_provider_id]
        type.description = params[:description]
        type.trust_provider_type = params[:trust_provider_type]
        type.user_trust_provider_type = params[:user_trust_provider_type]
        type.device_trust_provider_type = params[:device_trust_provider_type]
        type
      end
    end

    module VerifiedAccessTrustProviderCondensedList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VerifiedAccessTrustProviderCondensed.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VerifiedAccessTrustProviderIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VerifiedAccessTrustProviderList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VerifiedAccessTrustProvider.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VersionStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VgwTelemetry
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VgwTelemetry, context: context)
        type = Types::VgwTelemetry.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.accepted_route_count = params[:accepted_route_count]
        type.last_status_change = params[:last_status_change]
        type.outside_ip_address = params[:outside_ip_address]
        type.status = params[:status]
        type.status_message = params[:status_message]
        type.certificate_arn = params[:certificate_arn]
        type
      end
    end

    module VgwTelemetryList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VgwTelemetry.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VirtualizationTypeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VirtualizationTypeSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module Volume
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Volume, context: context)
        type = Types::Volume.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attachments = VolumeAttachmentList.build(params[:attachments], context: "#{context}[:attachments]") unless params[:attachments].nil?
        type.availability_zone = params[:availability_zone]
        type.create_time = params[:create_time]
        type.encrypted = params[:encrypted]
        type.kms_key_id = params[:kms_key_id]
        type.outpost_arn = params[:outpost_arn]
        type.size = params[:size]
        type.snapshot_id = params[:snapshot_id]
        type.state = params[:state]
        type.volume_id = params[:volume_id]
        type.iops = params[:iops]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.volume_type = params[:volume_type]
        type.fast_restored = params[:fast_restored]
        type.multi_attach_enabled = params[:multi_attach_enabled]
        type.throughput = params[:throughput]
        type.sse_type = params[:sse_type]
        type
      end
    end

    module VolumeAttachment
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VolumeAttachment, context: context)
        type = Types::VolumeAttachment.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.attach_time = params[:attach_time]
        type.device = params[:device]
        type.instance_id = params[:instance_id]
        type.state = params[:state]
        type.volume_id = params[:volume_id]
        type.delete_on_termination = params[:delete_on_termination]
        type.associated_resource = params[:associated_resource]
        type.instance_owning_service = params[:instance_owning_service]
        type
      end
    end

    module VolumeAttachmentList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VolumeAttachment.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VolumeDetail
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VolumeDetail, context: context)
        type = Types::VolumeDetail.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.size = params[:size]
        type
      end
    end

    module VolumeIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VolumeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Volume.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VolumeModification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VolumeModification, context: context)
        type = Types::VolumeModification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.volume_id = params[:volume_id]
        type.modification_state = params[:modification_state]
        type.status_message = params[:status_message]
        type.target_size = params[:target_size]
        type.target_iops = params[:target_iops]
        type.target_volume_type = params[:target_volume_type]
        type.target_throughput = params[:target_throughput]
        type.target_multi_attach_enabled = params[:target_multi_attach_enabled]
        type.original_size = params[:original_size]
        type.original_iops = params[:original_iops]
        type.original_volume_type = params[:original_volume_type]
        type.original_throughput = params[:original_throughput]
        type.original_multi_attach_enabled = params[:original_multi_attach_enabled]
        type.progress = params[:progress]
        type.start_time = params[:start_time]
        type.end_time = params[:end_time]
        type
      end
    end

    module VolumeModificationList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VolumeModification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VolumeStatusAction
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VolumeStatusAction, context: context)
        type = Types::VolumeStatusAction.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.description = params[:description]
        type.event_id = params[:event_id]
        type.event_type = params[:event_type]
        type
      end
    end

    module VolumeStatusActionsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VolumeStatusAction.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VolumeStatusAttachmentStatus
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VolumeStatusAttachmentStatus, context: context)
        type = Types::VolumeStatusAttachmentStatus.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.io_performance = params[:io_performance]
        type.instance_id = params[:instance_id]
        type
      end
    end

    module VolumeStatusAttachmentStatusList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VolumeStatusAttachmentStatus.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VolumeStatusDetails
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VolumeStatusDetails, context: context)
        type = Types::VolumeStatusDetails.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.name = params[:name]
        type.status = params[:status]
        type
      end
    end

    module VolumeStatusDetailsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VolumeStatusDetails.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VolumeStatusEvent
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VolumeStatusEvent, context: context)
        type = Types::VolumeStatusEvent.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.description = params[:description]
        type.event_id = params[:event_id]
        type.event_type = params[:event_type]
        type.not_after = params[:not_after]
        type.not_before = params[:not_before]
        type.instance_id = params[:instance_id]
        type
      end
    end

    module VolumeStatusEventsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VolumeStatusEvent.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VolumeStatusInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VolumeStatusInfo, context: context)
        type = Types::VolumeStatusInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.details = VolumeStatusDetailsList.build(params[:details], context: "#{context}[:details]") unless params[:details].nil?
        type.status = params[:status]
        type
      end
    end

    module VolumeStatusItem
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VolumeStatusItem, context: context)
        type = Types::VolumeStatusItem.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.actions = VolumeStatusActionsList.build(params[:actions], context: "#{context}[:actions]") unless params[:actions].nil?
        type.availability_zone = params[:availability_zone]
        type.outpost_arn = params[:outpost_arn]
        type.events = VolumeStatusEventsList.build(params[:events], context: "#{context}[:events]") unless params[:events].nil?
        type.volume_id = params[:volume_id]
        type.volume_status = VolumeStatusInfo.build(params[:volume_status], context: "#{context}[:volume_status]") unless params[:volume_status].nil?
        type.attachment_statuses = VolumeStatusAttachmentStatusList.build(params[:attachment_statuses], context: "#{context}[:attachment_statuses]") unless params[:attachment_statuses].nil?
        type
      end
    end

    module VolumeStatusList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VolumeStatusItem.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module Vpc
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::Vpc, context: context)
        type = Types::Vpc.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr_block = params[:cidr_block]
        type.dhcp_options_id = params[:dhcp_options_id]
        type.state = params[:state]
        type.vpc_id = params[:vpc_id]
        type.owner_id = params[:owner_id]
        type.instance_tenancy = params[:instance_tenancy]
        type.ipv6_cidr_block_association_set = VpcIpv6CidrBlockAssociationSet.build(params[:ipv6_cidr_block_association_set], context: "#{context}[:ipv6_cidr_block_association_set]") unless params[:ipv6_cidr_block_association_set].nil?
        type.cidr_block_association_set = VpcCidrBlockAssociationSet.build(params[:cidr_block_association_set], context: "#{context}[:cidr_block_association_set]") unless params[:cidr_block_association_set].nil?
        type.is_default = params[:is_default]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module VpcAttachment
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpcAttachment, context: context)
        type = Types::VpcAttachment.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.state = params[:state]
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module VpcAttachmentList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VpcAttachment.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VpcCidrBlockAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpcCidrBlockAssociation, context: context)
        type = Types::VpcCidrBlockAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type.cidr_block = params[:cidr_block]
        type.cidr_block_state = VpcCidrBlockState.build(params[:cidr_block_state], context: "#{context}[:cidr_block_state]") unless params[:cidr_block_state].nil?
        type
      end
    end

    module VpcCidrBlockAssociationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VpcCidrBlockAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VpcCidrBlockState
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpcCidrBlockState, context: context)
        type = Types::VpcCidrBlockState.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.state = params[:state]
        type.status_message = params[:status_message]
        type
      end
    end

    module VpcClassicLink
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpcClassicLink, context: context)
        type = Types::VpcClassicLink.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.classic_link_enabled = params[:classic_link_enabled]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.vpc_id = params[:vpc_id]
        type
      end
    end

    module VpcClassicLinkIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VpcClassicLinkList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VpcClassicLink.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VpcEndpoint
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpcEndpoint, context: context)
        type = Types::VpcEndpoint.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpc_endpoint_id = params[:vpc_endpoint_id]
        type.vpc_endpoint_type = params[:vpc_endpoint_type]
        type.vpc_id = params[:vpc_id]
        type.service_name = params[:service_name]
        type.state = params[:state]
        type.policy_document = params[:policy_document]
        type.route_table_ids = ValueStringList.build(params[:route_table_ids], context: "#{context}[:route_table_ids]") unless params[:route_table_ids].nil?
        type.subnet_ids = ValueStringList.build(params[:subnet_ids], context: "#{context}[:subnet_ids]") unless params[:subnet_ids].nil?
        type.groups = GroupIdentifierSet.build(params[:groups], context: "#{context}[:groups]") unless params[:groups].nil?
        type.ip_address_type = params[:ip_address_type]
        type.dns_options = DnsOptions.build(params[:dns_options], context: "#{context}[:dns_options]") unless params[:dns_options].nil?
        type.private_dns_enabled = params[:private_dns_enabled]
        type.requester_managed = params[:requester_managed]
        type.network_interface_ids = ValueStringList.build(params[:network_interface_ids], context: "#{context}[:network_interface_ids]") unless params[:network_interface_ids].nil?
        type.dns_entries = DnsEntrySet.build(params[:dns_entries], context: "#{context}[:dns_entries]") unless params[:dns_entries].nil?
        type.creation_timestamp = params[:creation_timestamp]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.owner_id = params[:owner_id]
        type.last_error = LastError.build(params[:last_error], context: "#{context}[:last_error]") unless params[:last_error].nil?
        type
      end
    end

    module VpcEndpointConnection
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpcEndpointConnection, context: context)
        type = Types::VpcEndpointConnection.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.service_id = params[:service_id]
        type.vpc_endpoint_id = params[:vpc_endpoint_id]
        type.vpc_endpoint_owner = params[:vpc_endpoint_owner]
        type.vpc_endpoint_state = params[:vpc_endpoint_state]
        type.creation_timestamp = params[:creation_timestamp]
        type.dns_entries = DnsEntrySet.build(params[:dns_entries], context: "#{context}[:dns_entries]") unless params[:dns_entries].nil?
        type.network_load_balancer_arns = ValueStringList.build(params[:network_load_balancer_arns], context: "#{context}[:network_load_balancer_arns]") unless params[:network_load_balancer_arns].nil?
        type.gateway_load_balancer_arns = ValueStringList.build(params[:gateway_load_balancer_arns], context: "#{context}[:gateway_load_balancer_arns]") unless params[:gateway_load_balancer_arns].nil?
        type.ip_address_type = params[:ip_address_type]
        type.vpc_endpoint_connection_id = params[:vpc_endpoint_connection_id]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module VpcEndpointConnectionSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VpcEndpointConnection.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VpcEndpointIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VpcEndpointRouteTableIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VpcEndpointSecurityGroupIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VpcEndpointServiceIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VpcEndpointSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VpcEndpoint.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VpcEndpointSubnetIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VpcIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VpcIpv6CidrBlockAssociation
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpcIpv6CidrBlockAssociation, context: context)
        type = Types::VpcIpv6CidrBlockAssociation.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.association_id = params[:association_id]
        type.ipv6_cidr_block = params[:ipv6_cidr_block]
        type.ipv6_cidr_block_state = VpcCidrBlockState.build(params[:ipv6_cidr_block_state], context: "#{context}[:ipv6_cidr_block_state]") unless params[:ipv6_cidr_block_state].nil?
        type.network_border_group = params[:network_border_group]
        type.ipv6_pool = params[:ipv6_pool]
        type
      end
    end

    module VpcIpv6CidrBlockAssociationSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VpcIpv6CidrBlockAssociation.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VpcList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << Vpc.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VpcPeeringConnection
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpcPeeringConnection, context: context)
        type = Types::VpcPeeringConnection.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.accepter_vpc_info = VpcPeeringConnectionVpcInfo.build(params[:accepter_vpc_info], context: "#{context}[:accepter_vpc_info]") unless params[:accepter_vpc_info].nil?
        type.expiration_time = params[:expiration_time]
        type.requester_vpc_info = VpcPeeringConnectionVpcInfo.build(params[:requester_vpc_info], context: "#{context}[:requester_vpc_info]") unless params[:requester_vpc_info].nil?
        type.status = VpcPeeringConnectionStateReason.build(params[:status], context: "#{context}[:status]") unless params[:status].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.vpc_peering_connection_id = params[:vpc_peering_connection_id]
        type
      end
    end

    module VpcPeeringConnectionIdList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VpcPeeringConnectionList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VpcPeeringConnection.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VpcPeeringConnectionOptionsDescription
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpcPeeringConnectionOptionsDescription, context: context)
        type = Types::VpcPeeringConnectionOptionsDescription.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.allow_dns_resolution_from_remote_vpc = params[:allow_dns_resolution_from_remote_vpc]
        type.allow_egress_from_local_classic_link_to_remote_vpc = params[:allow_egress_from_local_classic_link_to_remote_vpc]
        type.allow_egress_from_local_vpc_to_remote_classic_link = params[:allow_egress_from_local_vpc_to_remote_classic_link]
        type
      end
    end

    module VpcPeeringConnectionStateReason
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpcPeeringConnectionStateReason, context: context)
        type = Types::VpcPeeringConnectionStateReason.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.code = params[:code]
        type.message = params[:message]
        type
      end
    end

    module VpcPeeringConnectionVpcInfo
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpcPeeringConnectionVpcInfo, context: context)
        type = Types::VpcPeeringConnectionVpcInfo.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr_block = params[:cidr_block]
        type.ipv6_cidr_block_set = Ipv6CidrBlockSet.build(params[:ipv6_cidr_block_set], context: "#{context}[:ipv6_cidr_block_set]") unless params[:ipv6_cidr_block_set].nil?
        type.cidr_block_set = CidrBlockSet.build(params[:cidr_block_set], context: "#{context}[:cidr_block_set]") unless params[:cidr_block_set].nil?
        type.owner_id = params[:owner_id]
        type.peering_options = VpcPeeringConnectionOptionsDescription.build(params[:peering_options], context: "#{context}[:peering_options]") unless params[:peering_options].nil?
        type.vpc_id = params[:vpc_id]
        type.region = params[:region]
        type
      end
    end

    module VpnConnection
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpnConnection, context: context)
        type = Types::VpnConnection.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.customer_gateway_configuration = params[:customer_gateway_configuration]
        type.customer_gateway_id = params[:customer_gateway_id]
        type.category = params[:category]
        type.state = params[:state]
        type.type = params[:type]
        type.vpn_connection_id = params[:vpn_connection_id]
        type.vpn_gateway_id = params[:vpn_gateway_id]
        type.transit_gateway_id = params[:transit_gateway_id]
        type.core_network_arn = params[:core_network_arn]
        type.core_network_attachment_arn = params[:core_network_attachment_arn]
        type.gateway_association_state = params[:gateway_association_state]
        type.options = VpnConnectionOptions.build(params[:options], context: "#{context}[:options]") unless params[:options].nil?
        type.routes = VpnStaticRouteList.build(params[:routes], context: "#{context}[:routes]") unless params[:routes].nil?
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type.vgw_telemetry = VgwTelemetryList.build(params[:vgw_telemetry], context: "#{context}[:vgw_telemetry]") unless params[:vgw_telemetry].nil?
        type
      end
    end

    module VpnConnectionDeviceType
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpnConnectionDeviceType, context: context)
        type = Types::VpnConnectionDeviceType.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.vpn_connection_device_type_id = params[:vpn_connection_device_type_id]
        type.vendor = params[:vendor]
        type.platform = params[:platform]
        type.software = params[:software]
        type
      end
    end

    module VpnConnectionDeviceTypeList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VpnConnectionDeviceType.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VpnConnectionIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VpnConnectionList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VpnConnection.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VpnConnectionOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpnConnectionOptions, context: context)
        type = Types::VpnConnectionOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enable_acceleration = params[:enable_acceleration]
        type.static_routes_only = params[:static_routes_only]
        type.local_ipv4_network_cidr = params[:local_ipv4_network_cidr]
        type.remote_ipv4_network_cidr = params[:remote_ipv4_network_cidr]
        type.local_ipv6_network_cidr = params[:local_ipv6_network_cidr]
        type.remote_ipv6_network_cidr = params[:remote_ipv6_network_cidr]
        type.outside_ip_address_type = params[:outside_ip_address_type]
        type.transport_transit_gateway_attachment_id = params[:transport_transit_gateway_attachment_id]
        type.tunnel_inside_ip_version = params[:tunnel_inside_ip_version]
        type.tunnel_options = TunnelOptionsList.build(params[:tunnel_options], context: "#{context}[:tunnel_options]") unless params[:tunnel_options].nil?
        type
      end
    end

    module VpnConnectionOptionsSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpnConnectionOptionsSpecification, context: context)
        type = Types::VpnConnectionOptionsSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.enable_acceleration = params[:enable_acceleration]
        type.static_routes_only = params[:static_routes_only]
        type.tunnel_inside_ip_version = params[:tunnel_inside_ip_version]
        type.tunnel_options = VpnTunnelOptionsSpecificationsList.build(params[:tunnel_options], context: "#{context}[:tunnel_options]") unless params[:tunnel_options].nil?
        type.local_ipv4_network_cidr = params[:local_ipv4_network_cidr]
        type.remote_ipv4_network_cidr = params[:remote_ipv4_network_cidr]
        type.local_ipv6_network_cidr = params[:local_ipv6_network_cidr]
        type.remote_ipv6_network_cidr = params[:remote_ipv6_network_cidr]
        type.outside_ip_address_type = params[:outside_ip_address_type]
        type.transport_transit_gateway_attachment_id = params[:transport_transit_gateway_attachment_id]
        type
      end
    end

    module VpnGateway
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpnGateway, context: context)
        type = Types::VpnGateway.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.availability_zone = params[:availability_zone]
        type.state = params[:state]
        type.type = params[:type]
        type.vpc_attachments = VpcAttachmentList.build(params[:vpc_attachments], context: "#{context}[:vpc_attachments]") unless params[:vpc_attachments].nil?
        type.vpn_gateway_id = params[:vpn_gateway_id]
        type.amazon_side_asn = params[:amazon_side_asn]
        type.tags = TagList.build(params[:tags], context: "#{context}[:tags]") unless params[:tags].nil?
        type
      end
    end

    module VpnGatewayIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module VpnGatewayList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VpnGateway.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VpnStaticRoute
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpnStaticRoute, context: context)
        type = Types::VpnStaticRoute.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.destination_cidr_block = params[:destination_cidr_block]
        type.source = params[:source]
        type.state = params[:state]
        type
      end
    end

    module VpnStaticRouteList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VpnStaticRoute.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module VpnTunnelLogOptions
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpnTunnelLogOptions, context: context)
        type = Types::VpnTunnelLogOptions.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cloud_watch_log_options = CloudWatchLogOptions.build(params[:cloud_watch_log_options], context: "#{context}[:cloud_watch_log_options]") unless params[:cloud_watch_log_options].nil?
        type
      end
    end

    module VpnTunnelLogOptionsSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpnTunnelLogOptionsSpecification, context: context)
        type = Types::VpnTunnelLogOptionsSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cloud_watch_log_options = CloudWatchLogOptionsSpecification.build(params[:cloud_watch_log_options], context: "#{context}[:cloud_watch_log_options]") unless params[:cloud_watch_log_options].nil?
        type
      end
    end

    module VpnTunnelOptionsSpecification
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::VpnTunnelOptionsSpecification, context: context)
        type = Types::VpnTunnelOptionsSpecification.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.tunnel_inside_cidr = params[:tunnel_inside_cidr]
        type.tunnel_inside_ipv6_cidr = params[:tunnel_inside_ipv6_cidr]
        type.pre_shared_key = params[:pre_shared_key]
        type.phase1_lifetime_seconds = params[:phase1_lifetime_seconds]
        type.phase2_lifetime_seconds = params[:phase2_lifetime_seconds]
        type.rekey_margin_time_seconds = params[:rekey_margin_time_seconds]
        type.rekey_fuzz_percentage = params[:rekey_fuzz_percentage]
        type.replay_window_size = params[:replay_window_size]
        type.dpd_timeout_seconds = params[:dpd_timeout_seconds]
        type.dpd_timeout_action = params[:dpd_timeout_action]
        type.phase1_encryption_algorithms = Phase1EncryptionAlgorithmsRequestList.build(params[:phase1_encryption_algorithms], context: "#{context}[:phase1_encryption_algorithms]") unless params[:phase1_encryption_algorithms].nil?
        type.phase2_encryption_algorithms = Phase2EncryptionAlgorithmsRequestList.build(params[:phase2_encryption_algorithms], context: "#{context}[:phase2_encryption_algorithms]") unless params[:phase2_encryption_algorithms].nil?
        type.phase1_integrity_algorithms = Phase1IntegrityAlgorithmsRequestList.build(params[:phase1_integrity_algorithms], context: "#{context}[:phase1_integrity_algorithms]") unless params[:phase1_integrity_algorithms].nil?
        type.phase2_integrity_algorithms = Phase2IntegrityAlgorithmsRequestList.build(params[:phase2_integrity_algorithms], context: "#{context}[:phase2_integrity_algorithms]") unless params[:phase2_integrity_algorithms].nil?
        type.phase1_dh_group_numbers = Phase1DHGroupNumbersRequestList.build(params[:phase1_dh_group_numbers], context: "#{context}[:phase1_dh_group_numbers]") unless params[:phase1_dh_group_numbers].nil?
        type.phase2_dh_group_numbers = Phase2DHGroupNumbersRequestList.build(params[:phase2_dh_group_numbers], context: "#{context}[:phase2_dh_group_numbers]") unless params[:phase2_dh_group_numbers].nil?
        type.ike_versions = IKEVersionsRequestList.build(params[:ike_versions], context: "#{context}[:ike_versions]") unless params[:ike_versions].nil?
        type.startup_action = params[:startup_action]
        type.log_options = VpnTunnelLogOptionsSpecification.build(params[:log_options], context: "#{context}[:log_options]") unless params[:log_options].nil?
        type.enable_tunnel_lifecycle_control = params[:enable_tunnel_lifecycle_control]
        type
      end
    end

    module VpnTunnelOptionsSpecificationsList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << VpnTunnelOptionsSpecification.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

    module WithdrawByoipCidrInput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::WithdrawByoipCidrInput, context: context)
        type = Types::WithdrawByoipCidrInput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.cidr = params[:cidr]
        type.dry_run = params[:dry_run]
        type
      end
    end

    module WithdrawByoipCidrOutput
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Hash, Types::WithdrawByoipCidrOutput, context: context)
        type = Types::WithdrawByoipCidrOutput.new
        Hearth::Validator.validate_unknown!(type, params, context: context) if params.is_a?(Hash)
        type.byoip_cidr = ByoipCidr.build(params[:byoip_cidr], context: "#{context}[:byoip_cidr]") unless params[:byoip_cidr].nil?
        type
      end
    end

    module ZoneIdStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module ZoneNameStringList
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each do |element|
          data << element
        end
        data
      end
    end

    module SnapshotTierStatusSet
      def self.build(params, context:)
        Hearth::Validator.validate_types!(params, ::Array, context: context)
        data = []
        params.each_with_index do |element, index|
          data << SnapshotTierStatus.build(element, context: "#{context}[#{index}]") unless element.nil?
        end
        data
      end
    end

  end
end
