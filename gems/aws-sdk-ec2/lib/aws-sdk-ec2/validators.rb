# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/awslabs/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

require 'time'

module AWS::SDK::EC2
  module Validators

    class AcceleratorCount
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceleratorCount, context: context)
        Hearth::Validator.validate!(input[:min], ::Integer, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Integer, context: "#{context}[:max]")
      end
    end

    class AcceleratorCountRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceleratorCountRequest, context: context)
        Hearth::Validator.validate!(input[:min], ::Integer, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Integer, context: "#{context}[:max]")
      end
    end

    class AcceleratorManufacturerSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class AcceleratorNameSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class AcceleratorTotalMemoryMiB
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceleratorTotalMemoryMiB, context: context)
        Hearth::Validator.validate!(input[:min], ::Integer, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Integer, context: "#{context}[:max]")
      end
    end

    class AcceleratorTotalMemoryMiBRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceleratorTotalMemoryMiBRequest, context: context)
        Hearth::Validator.validate!(input[:min], ::Integer, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Integer, context: "#{context}[:max]")
      end
    end

    class AcceleratorTypeSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class AcceptReservedInstancesExchangeQuoteInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceptReservedInstancesExchangeQuoteInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        ReservedInstanceIdSet.validate!(input[:reserved_instance_ids], context: "#{context}[:reserved_instance_ids]") unless input[:reserved_instance_ids].nil?
        TargetConfigurationRequestSet.validate!(input[:target_configurations], context: "#{context}[:target_configurations]") unless input[:target_configurations].nil?
      end
    end

    class AcceptReservedInstancesExchangeQuoteOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceptReservedInstancesExchangeQuoteOutput, context: context)
        Hearth::Validator.validate!(input[:exchange_id], ::String, context: "#{context}[:exchange_id]")
      end
    end

    class AcceptTransitGatewayMulticastDomainAssociationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceptTransitGatewayMulticastDomainAssociationsInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        ValueStringList.validate!(input[:subnet_ids], context: "#{context}[:subnet_ids]") unless input[:subnet_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class AcceptTransitGatewayMulticastDomainAssociationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceptTransitGatewayMulticastDomainAssociationsOutput, context: context)
        TransitGatewayMulticastDomainAssociations.validate!(input[:associations], context: "#{context}[:associations]") unless input[:associations].nil?
      end
    end

    class AcceptTransitGatewayPeeringAttachmentInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceptTransitGatewayPeeringAttachmentInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class AcceptTransitGatewayPeeringAttachmentOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceptTransitGatewayPeeringAttachmentOutput, context: context)
        TransitGatewayPeeringAttachment.validate!(input[:transit_gateway_peering_attachment], context: "#{context}[:transit_gateway_peering_attachment]") unless input[:transit_gateway_peering_attachment].nil?
      end
    end

    class AcceptTransitGatewayVpcAttachmentInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceptTransitGatewayVpcAttachmentInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class AcceptTransitGatewayVpcAttachmentOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceptTransitGatewayVpcAttachmentOutput, context: context)
        TransitGatewayVpcAttachment.validate!(input[:transit_gateway_vpc_attachment], context: "#{context}[:transit_gateway_vpc_attachment]") unless input[:transit_gateway_vpc_attachment].nil?
      end
    end

    class AcceptVpcEndpointConnectionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceptVpcEndpointConnectionsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:service_id], ::String, context: "#{context}[:service_id]")
        VpcEndpointIdList.validate!(input[:vpc_endpoint_ids], context: "#{context}[:vpc_endpoint_ids]") unless input[:vpc_endpoint_ids].nil?
      end
    end

    class AcceptVpcEndpointConnectionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceptVpcEndpointConnectionsOutput, context: context)
        UnsuccessfulItemSet.validate!(input[:unsuccessful], context: "#{context}[:unsuccessful]") unless input[:unsuccessful].nil?
      end
    end

    class AcceptVpcPeeringConnectionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceptVpcPeeringConnectionInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:vpc_peering_connection_id], ::String, context: "#{context}[:vpc_peering_connection_id]")
      end
    end

    class AcceptVpcPeeringConnectionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AcceptVpcPeeringConnectionOutput, context: context)
        VpcPeeringConnection.validate!(input[:vpc_peering_connection], context: "#{context}[:vpc_peering_connection]") unless input[:vpc_peering_connection].nil?
      end
    end

    class AccessScopeAnalysisFinding
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AccessScopeAnalysisFinding, context: context)
        Hearth::Validator.validate!(input[:network_insights_access_scope_analysis_id], ::String, context: "#{context}[:network_insights_access_scope_analysis_id]")
        Hearth::Validator.validate!(input[:network_insights_access_scope_id], ::String, context: "#{context}[:network_insights_access_scope_id]")
        Hearth::Validator.validate!(input[:finding_id], ::String, context: "#{context}[:finding_id]")
        PathComponentList.validate!(input[:finding_components], context: "#{context}[:finding_components]") unless input[:finding_components].nil?
      end
    end

    class AccessScopeAnalysisFindingList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AccessScopeAnalysisFinding.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AccessScopePath
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AccessScopePath, context: context)
        PathStatement.validate!(input[:source], context: "#{context}[:source]") unless input[:source].nil?
        PathStatement.validate!(input[:destination], context: "#{context}[:destination]") unless input[:destination].nil?
        ThroughResourcesStatementList.validate!(input[:through_resources], context: "#{context}[:through_resources]") unless input[:through_resources].nil?
      end
    end

    class AccessScopePathList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AccessScopePath.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AccessScopePathListRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AccessScopePathRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AccessScopePathRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AccessScopePathRequest, context: context)
        PathStatementRequest.validate!(input[:source], context: "#{context}[:source]") unless input[:source].nil?
        PathStatementRequest.validate!(input[:destination], context: "#{context}[:destination]") unless input[:destination].nil?
        ThroughResourcesStatementRequestList.validate!(input[:through_resources], context: "#{context}[:through_resources]") unless input[:through_resources].nil?
      end
    end

    class AccountAttribute
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AccountAttribute, context: context)
        Hearth::Validator.validate!(input[:attribute_name], ::String, context: "#{context}[:attribute_name]")
        AccountAttributeValueList.validate!(input[:attribute_values], context: "#{context}[:attribute_values]") unless input[:attribute_values].nil?
      end
    end

    class AccountAttributeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AccountAttribute.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AccountAttributeNameStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class AccountAttributeValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AccountAttributeValue, context: context)
        Hearth::Validator.validate!(input[:attribute_value], ::String, context: "#{context}[:attribute_value]")
      end
    end

    class AccountAttributeValueList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AccountAttributeValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ActiveInstance
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ActiveInstance, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:spot_instance_request_id], ::String, context: "#{context}[:spot_instance_request_id]")
        Hearth::Validator.validate!(input[:instance_health], ::String, context: "#{context}[:instance_health]")
      end
    end

    class ActiveInstanceSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ActiveInstance.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AddIpamOperatingRegion
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AddIpamOperatingRegion, context: context)
        Hearth::Validator.validate!(input[:region_name], ::String, context: "#{context}[:region_name]")
      end
    end

    class AddIpamOperatingRegionSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AddIpamOperatingRegion.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AddPrefixListEntries
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AddPrefixListEntry.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AddPrefixListEntry
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AddPrefixListEntry, context: context)
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
      end
    end

    class AdditionalDetail
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AdditionalDetail, context: context)
        Hearth::Validator.validate!(input[:additional_detail_type], ::String, context: "#{context}[:additional_detail_type]")
        AnalysisComponent.validate!(input[:component], context: "#{context}[:component]") unless input[:component].nil?
      end
    end

    class AdditionalDetailList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AdditionalDetail.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Address
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Address, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:public_ip], ::String, context: "#{context}[:public_ip]")
        Hearth::Validator.validate!(input[:allocation_id], ::String, context: "#{context}[:allocation_id]")
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        Hearth::Validator.validate!(input[:domain], ::String, context: "#{context}[:domain]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:network_interface_owner_id], ::String, context: "#{context}[:network_interface_owner_id]")
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:public_ipv4_pool], ::String, context: "#{context}[:public_ipv4_pool]")
        Hearth::Validator.validate!(input[:network_border_group], ::String, context: "#{context}[:network_border_group]")
        Hearth::Validator.validate!(input[:customer_owned_ip], ::String, context: "#{context}[:customer_owned_ip]")
        Hearth::Validator.validate!(input[:customer_owned_ipv4_pool], ::String, context: "#{context}[:customer_owned_ipv4_pool]")
        Hearth::Validator.validate!(input[:carrier_ip], ::String, context: "#{context}[:carrier_ip]")
      end
    end

    class AddressAttribute
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AddressAttribute, context: context)
        Hearth::Validator.validate!(input[:public_ip], ::String, context: "#{context}[:public_ip]")
        Hearth::Validator.validate!(input[:allocation_id], ::String, context: "#{context}[:allocation_id]")
        Hearth::Validator.validate!(input[:ptr_record], ::String, context: "#{context}[:ptr_record]")
        PtrUpdateStatus.validate!(input[:ptr_record_update], context: "#{context}[:ptr_record_update]") unless input[:ptr_record_update].nil?
      end
    end

    class AddressList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Address.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AddressSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AddressAttribute.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AdvertiseByoipCidrInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AdvertiseByoipCidrInput, context: context)
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class AdvertiseByoipCidrOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AdvertiseByoipCidrOutput, context: context)
        ByoipCidr.validate!(input[:byoip_cidr], context: "#{context}[:byoip_cidr]") unless input[:byoip_cidr].nil?
      end
    end

    class AllocateAddressInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AllocateAddressInput, context: context)
        Hearth::Validator.validate!(input[:domain], ::String, context: "#{context}[:domain]")
        Hearth::Validator.validate!(input[:address], ::String, context: "#{context}[:address]")
        Hearth::Validator.validate!(input[:public_ipv4_pool], ::String, context: "#{context}[:public_ipv4_pool]")
        Hearth::Validator.validate!(input[:network_border_group], ::String, context: "#{context}[:network_border_group]")
        Hearth::Validator.validate!(input[:customer_owned_ipv4_pool], ::String, context: "#{context}[:customer_owned_ipv4_pool]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class AllocateAddressOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AllocateAddressOutput, context: context)
        Hearth::Validator.validate!(input[:public_ip], ::String, context: "#{context}[:public_ip]")
        Hearth::Validator.validate!(input[:allocation_id], ::String, context: "#{context}[:allocation_id]")
        Hearth::Validator.validate!(input[:public_ipv4_pool], ::String, context: "#{context}[:public_ipv4_pool]")
        Hearth::Validator.validate!(input[:network_border_group], ::String, context: "#{context}[:network_border_group]")
        Hearth::Validator.validate!(input[:domain], ::String, context: "#{context}[:domain]")
        Hearth::Validator.validate!(input[:customer_owned_ip], ::String, context: "#{context}[:customer_owned_ip]")
        Hearth::Validator.validate!(input[:customer_owned_ipv4_pool], ::String, context: "#{context}[:customer_owned_ipv4_pool]")
        Hearth::Validator.validate!(input[:carrier_ip], ::String, context: "#{context}[:carrier_ip]")
      end
    end

    class AllocateHostsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AllocateHostsInput, context: context)
        Hearth::Validator.validate!(input[:auto_placement], ::String, context: "#{context}[:auto_placement]")
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:instance_family], ::String, context: "#{context}[:instance_family]")
        Hearth::Validator.validate!(input[:quantity], ::Integer, context: "#{context}[:quantity]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:host_recovery], ::String, context: "#{context}[:host_recovery]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
      end
    end

    class AllocateHostsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AllocateHostsOutput, context: context)
        ResponseHostIdList.validate!(input[:host_ids], context: "#{context}[:host_ids]") unless input[:host_ids].nil?
      end
    end

    class AllocateIpamPoolCidrInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AllocateIpamPoolCidrInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipam_pool_id], ::String, context: "#{context}[:ipam_pool_id]")
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:netmask_length], ::Integer, context: "#{context}[:netmask_length]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:preview_next_cidr], ::TrueClass, ::FalseClass, context: "#{context}[:preview_next_cidr]")
        IpamPoolAllocationDisallowedCidrs.validate!(input[:disallowed_cidrs], context: "#{context}[:disallowed_cidrs]") unless input[:disallowed_cidrs].nil?
      end
    end

    class AllocateIpamPoolCidrOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AllocateIpamPoolCidrOutput, context: context)
        IpamPoolAllocation.validate!(input[:ipam_pool_allocation], context: "#{context}[:ipam_pool_allocation]") unless input[:ipam_pool_allocation].nil?
      end
    end

    class AllocationIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class AllocationIds
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class AllowedPrincipal
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AllowedPrincipal, context: context)
        Hearth::Validator.validate!(input[:principal_type], ::String, context: "#{context}[:principal_type]")
        Hearth::Validator.validate!(input[:principal], ::String, context: "#{context}[:principal]")
      end
    end

    class AllowedPrincipalSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AllowedPrincipal.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AlternatePathHint
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AlternatePathHint, context: context)
        Hearth::Validator.validate!(input[:component_id], ::String, context: "#{context}[:component_id]")
        Hearth::Validator.validate!(input[:component_arn], ::String, context: "#{context}[:component_arn]")
      end
    end

    class AlternatePathHintList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AlternatePathHint.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AnalysisAclRule
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AnalysisAclRule, context: context)
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:egress], ::TrueClass, ::FalseClass, context: "#{context}[:egress]")
        PortRange.validate!(input[:port_range], context: "#{context}[:port_range]") unless input[:port_range].nil?
        Hearth::Validator.validate!(input[:protocol], ::String, context: "#{context}[:protocol]")
        Hearth::Validator.validate!(input[:rule_action], ::String, context: "#{context}[:rule_action]")
        Hearth::Validator.validate!(input[:rule_number], ::Integer, context: "#{context}[:rule_number]")
      end
    end

    class AnalysisComponent
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AnalysisComponent, context: context)
        Hearth::Validator.validate!(input[:id], ::String, context: "#{context}[:id]")
        Hearth::Validator.validate!(input[:arn], ::String, context: "#{context}[:arn]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
      end
    end

    class AnalysisComponentList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AnalysisComponent.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AnalysisLoadBalancerListener
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AnalysisLoadBalancerListener, context: context)
        Hearth::Validator.validate!(input[:load_balancer_port], ::Integer, context: "#{context}[:load_balancer_port]")
        Hearth::Validator.validate!(input[:instance_port], ::Integer, context: "#{context}[:instance_port]")
      end
    end

    class AnalysisLoadBalancerTarget
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AnalysisLoadBalancerTarget, context: context)
        Hearth::Validator.validate!(input[:address], ::String, context: "#{context}[:address]")
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        AnalysisComponent.validate!(input[:instance], context: "#{context}[:instance]") unless input[:instance].nil?
        Hearth::Validator.validate!(input[:port], ::Integer, context: "#{context}[:port]")
      end
    end

    class AnalysisPacketHeader
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AnalysisPacketHeader, context: context)
        IpAddressList.validate!(input[:destination_addresses], context: "#{context}[:destination_addresses]") unless input[:destination_addresses].nil?
        PortRangeList.validate!(input[:destination_port_ranges], context: "#{context}[:destination_port_ranges]") unless input[:destination_port_ranges].nil?
        Hearth::Validator.validate!(input[:protocol], ::String, context: "#{context}[:protocol]")
        IpAddressList.validate!(input[:source_addresses], context: "#{context}[:source_addresses]") unless input[:source_addresses].nil?
        PortRangeList.validate!(input[:source_port_ranges], context: "#{context}[:source_port_ranges]") unless input[:source_port_ranges].nil?
      end
    end

    class AnalysisRouteTableRoute
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AnalysisRouteTableRoute, context: context)
        Hearth::Validator.validate!(input[:destination_cidr], ::String, context: "#{context}[:destination_cidr]")
        Hearth::Validator.validate!(input[:destination_prefix_list_id], ::String, context: "#{context}[:destination_prefix_list_id]")
        Hearth::Validator.validate!(input[:egress_only_internet_gateway_id], ::String, context: "#{context}[:egress_only_internet_gateway_id]")
        Hearth::Validator.validate!(input[:gateway_id], ::String, context: "#{context}[:gateway_id]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:nat_gateway_id], ::String, context: "#{context}[:nat_gateway_id]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:origin], ::String, context: "#{context}[:origin]")
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:vpc_peering_connection_id], ::String, context: "#{context}[:vpc_peering_connection_id]")
      end
    end

    class AnalysisSecurityGroupRule
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AnalysisSecurityGroupRule, context: context)
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:direction], ::String, context: "#{context}[:direction]")
        Hearth::Validator.validate!(input[:security_group_id], ::String, context: "#{context}[:security_group_id]")
        PortRange.validate!(input[:port_range], context: "#{context}[:port_range]") unless input[:port_range].nil?
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
        Hearth::Validator.validate!(input[:protocol], ::String, context: "#{context}[:protocol]")
      end
    end

    class ApplySecurityGroupsToClientVpnTargetNetworkInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ApplySecurityGroupsToClientVpnTargetNetworkInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        ClientVpnSecurityGroupIdSet.validate!(input[:security_group_ids], context: "#{context}[:security_group_ids]") unless input[:security_group_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ApplySecurityGroupsToClientVpnTargetNetworkOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ApplySecurityGroupsToClientVpnTargetNetworkOutput, context: context)
        ClientVpnSecurityGroupIdSet.validate!(input[:security_group_ids], context: "#{context}[:security_group_ids]") unless input[:security_group_ids].nil?
      end
    end

    class ArchitectureTypeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ArchitectureTypeSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ArnList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class AssignIpv6AddressesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssignIpv6AddressesInput, context: context)
        Hearth::Validator.validate!(input[:ipv6_address_count], ::Integer, context: "#{context}[:ipv6_address_count]")
        Ipv6AddressList.validate!(input[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless input[:ipv6_addresses].nil?
        Hearth::Validator.validate!(input[:ipv6_prefix_count], ::Integer, context: "#{context}[:ipv6_prefix_count]")
        IpPrefixList.validate!(input[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless input[:ipv6_prefixes].nil?
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
      end
    end

    class AssignIpv6AddressesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssignIpv6AddressesOutput, context: context)
        Ipv6AddressList.validate!(input[:assigned_ipv6_addresses], context: "#{context}[:assigned_ipv6_addresses]") unless input[:assigned_ipv6_addresses].nil?
        IpPrefixList.validate!(input[:assigned_ipv6_prefixes], context: "#{context}[:assigned_ipv6_prefixes]") unless input[:assigned_ipv6_prefixes].nil?
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
      end
    end

    class AssignPrivateIpAddressesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssignPrivateIpAddressesInput, context: context)
        Hearth::Validator.validate!(input[:allow_reassignment], ::TrueClass, ::FalseClass, context: "#{context}[:allow_reassignment]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        PrivateIpAddressStringList.validate!(input[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless input[:private_ip_addresses].nil?
        Hearth::Validator.validate!(input[:secondary_private_ip_address_count], ::Integer, context: "#{context}[:secondary_private_ip_address_count]")
        IpPrefixList.validate!(input[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless input[:ipv4_prefixes].nil?
        Hearth::Validator.validate!(input[:ipv4_prefix_count], ::Integer, context: "#{context}[:ipv4_prefix_count]")
      end
    end

    class AssignPrivateIpAddressesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssignPrivateIpAddressesOutput, context: context)
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        AssignedPrivateIpAddressList.validate!(input[:assigned_private_ip_addresses], context: "#{context}[:assigned_private_ip_addresses]") unless input[:assigned_private_ip_addresses].nil?
        Ipv4PrefixesList.validate!(input[:assigned_ipv4_prefixes], context: "#{context}[:assigned_ipv4_prefixes]") unless input[:assigned_ipv4_prefixes].nil?
      end
    end

    class AssignedPrivateIpAddress
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssignedPrivateIpAddress, context: context)
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
      end
    end

    class AssignedPrivateIpAddressList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AssignedPrivateIpAddress.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AssociateAddressInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateAddressInput, context: context)
        Hearth::Validator.validate!(input[:allocation_id], ::String, context: "#{context}[:allocation_id]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:public_ip], ::String, context: "#{context}[:public_ip]")
        Hearth::Validator.validate!(input[:allow_reassociation], ::TrueClass, ::FalseClass, context: "#{context}[:allow_reassociation]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
      end
    end

    class AssociateAddressOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateAddressOutput, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
      end
    end

    class AssociateClientVpnTargetNetworkInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateClientVpnTargetNetworkInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class AssociateClientVpnTargetNetworkOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateClientVpnTargetNetworkOutput, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        AssociationStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
      end
    end

    class AssociateDhcpOptionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateDhcpOptionsInput, context: context)
        Hearth::Validator.validate!(input[:dhcp_options_id], ::String, context: "#{context}[:dhcp_options_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class AssociateDhcpOptionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateDhcpOptionsOutput, context: context)
      end
    end

    class AssociateEnclaveCertificateIamRoleInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateEnclaveCertificateIamRoleInput, context: context)
        Hearth::Validator.validate!(input[:certificate_arn], ::String, context: "#{context}[:certificate_arn]")
        Hearth::Validator.validate!(input[:role_arn], ::String, context: "#{context}[:role_arn]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class AssociateEnclaveCertificateIamRoleOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateEnclaveCertificateIamRoleOutput, context: context)
        Hearth::Validator.validate!(input[:certificate_s3_bucket_name], ::String, context: "#{context}[:certificate_s3_bucket_name]")
        Hearth::Validator.validate!(input[:certificate_s3_object_key], ::String, context: "#{context}[:certificate_s3_object_key]")
        Hearth::Validator.validate!(input[:encryption_kms_key_id], ::String, context: "#{context}[:encryption_kms_key_id]")
      end
    end

    class AssociateIamInstanceProfileInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateIamInstanceProfileInput, context: context)
        IamInstanceProfileSpecification.validate!(input[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless input[:iam_instance_profile].nil?
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
      end
    end

    class AssociateIamInstanceProfileOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateIamInstanceProfileOutput, context: context)
        IamInstanceProfileAssociation.validate!(input[:iam_instance_profile_association], context: "#{context}[:iam_instance_profile_association]") unless input[:iam_instance_profile_association].nil?
      end
    end

    class AssociateInstanceEventWindowInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateInstanceEventWindowInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_event_window_id], ::String, context: "#{context}[:instance_event_window_id]")
        InstanceEventWindowAssociationRequest.validate!(input[:association_target], context: "#{context}[:association_target]") unless input[:association_target].nil?
      end
    end

    class AssociateInstanceEventWindowOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateInstanceEventWindowOutput, context: context)
        InstanceEventWindow.validate!(input[:instance_event_window], context: "#{context}[:instance_event_window]") unless input[:instance_event_window].nil?
      end
    end

    class AssociateRouteTableInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateRouteTableInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:route_table_id], ::String, context: "#{context}[:route_table_id]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:gateway_id], ::String, context: "#{context}[:gateway_id]")
      end
    end

    class AssociateRouteTableOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateRouteTableOutput, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        RouteTableAssociationState.validate!(input[:association_state], context: "#{context}[:association_state]") unless input[:association_state].nil?
      end
    end

    class AssociateSubnetCidrBlockInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateSubnetCidrBlockInput, context: context)
        Hearth::Validator.validate!(input[:ipv6_cidr_block], ::String, context: "#{context}[:ipv6_cidr_block]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
      end
    end

    class AssociateSubnetCidrBlockOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateSubnetCidrBlockOutput, context: context)
        SubnetIpv6CidrBlockAssociation.validate!(input[:ipv6_cidr_block_association], context: "#{context}[:ipv6_cidr_block_association]") unless input[:ipv6_cidr_block_association].nil?
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
      end
    end

    class AssociateTransitGatewayMulticastDomainInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateTransitGatewayMulticastDomainInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        TransitGatewaySubnetIdList.validate!(input[:subnet_ids], context: "#{context}[:subnet_ids]") unless input[:subnet_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class AssociateTransitGatewayMulticastDomainOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateTransitGatewayMulticastDomainOutput, context: context)
        TransitGatewayMulticastDomainAssociations.validate!(input[:associations], context: "#{context}[:associations]") unless input[:associations].nil?
      end
    end

    class AssociateTransitGatewayRouteTableInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateTransitGatewayRouteTableInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class AssociateTransitGatewayRouteTableOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateTransitGatewayRouteTableOutput, context: context)
        TransitGatewayAssociation.validate!(input[:association], context: "#{context}[:association]") unless input[:association].nil?
      end
    end

    class AssociateTrunkInterfaceInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateTrunkInterfaceInput, context: context)
        Hearth::Validator.validate!(input[:branch_interface_id], ::String, context: "#{context}[:branch_interface_id]")
        Hearth::Validator.validate!(input[:trunk_interface_id], ::String, context: "#{context}[:trunk_interface_id]")
        Hearth::Validator.validate!(input[:vlan_id], ::Integer, context: "#{context}[:vlan_id]")
        Hearth::Validator.validate!(input[:gre_key], ::Integer, context: "#{context}[:gre_key]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class AssociateTrunkInterfaceOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateTrunkInterfaceOutput, context: context)
        TrunkInterfaceAssociation.validate!(input[:interface_association], context: "#{context}[:interface_association]") unless input[:interface_association].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class AssociateVpcCidrBlockInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateVpcCidrBlockInput, context: context)
        Hearth::Validator.validate!(input[:amazon_provided_ipv6_cidr_block], ::TrueClass, ::FalseClass, context: "#{context}[:amazon_provided_ipv6_cidr_block]")
        Hearth::Validator.validate!(input[:cidr_block], ::String, context: "#{context}[:cidr_block]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:ipv6_cidr_block_network_border_group], ::String, context: "#{context}[:ipv6_cidr_block_network_border_group]")
        Hearth::Validator.validate!(input[:ipv6_pool], ::String, context: "#{context}[:ipv6_pool]")
        Hearth::Validator.validate!(input[:ipv6_cidr_block], ::String, context: "#{context}[:ipv6_cidr_block]")
        Hearth::Validator.validate!(input[:ipv4_ipam_pool_id], ::String, context: "#{context}[:ipv4_ipam_pool_id]")
        Hearth::Validator.validate!(input[:ipv4_netmask_length], ::Integer, context: "#{context}[:ipv4_netmask_length]")
        Hearth::Validator.validate!(input[:ipv6_ipam_pool_id], ::String, context: "#{context}[:ipv6_ipam_pool_id]")
        Hearth::Validator.validate!(input[:ipv6_netmask_length], ::Integer, context: "#{context}[:ipv6_netmask_length]")
      end
    end

    class AssociateVpcCidrBlockOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociateVpcCidrBlockOutput, context: context)
        VpcIpv6CidrBlockAssociation.validate!(input[:ipv6_cidr_block_association], context: "#{context}[:ipv6_cidr_block_association]") unless input[:ipv6_cidr_block_association].nil?
        VpcCidrBlockAssociation.validate!(input[:cidr_block_association], context: "#{context}[:cidr_block_association]") unless input[:cidr_block_association].nil?
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class AssociatedRole
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociatedRole, context: context)
        Hearth::Validator.validate!(input[:associated_role_arn], ::String, context: "#{context}[:associated_role_arn]")
        Hearth::Validator.validate!(input[:certificate_s3_bucket_name], ::String, context: "#{context}[:certificate_s3_bucket_name]")
        Hearth::Validator.validate!(input[:certificate_s3_object_key], ::String, context: "#{context}[:certificate_s3_object_key]")
        Hearth::Validator.validate!(input[:encryption_kms_key_id], ::String, context: "#{context}[:encryption_kms_key_id]")
      end
    end

    class AssociatedRolesList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AssociatedRole.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AssociatedTargetNetwork
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociatedTargetNetwork, context: context)
        Hearth::Validator.validate!(input[:network_id], ::String, context: "#{context}[:network_id]")
        Hearth::Validator.validate!(input[:network_type], ::String, context: "#{context}[:network_type]")
      end
    end

    class AssociatedTargetNetworkSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AssociatedTargetNetwork.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AssociationIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class AssociationStatus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AssociationStatus, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class AthenaIntegration
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AthenaIntegration, context: context)
        Hearth::Validator.validate!(input[:integration_result_s3_destination_arn], ::String, context: "#{context}[:integration_result_s3_destination_arn]")
        Hearth::Validator.validate!(input[:partition_load_frequency], ::String, context: "#{context}[:partition_load_frequency]")
        Hearth::Validator.validate!(input[:partition_start_date], ::Time, context: "#{context}[:partition_start_date]")
        Hearth::Validator.validate!(input[:partition_end_date], ::Time, context: "#{context}[:partition_end_date]")
      end
    end

    class AthenaIntegrationsSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AthenaIntegration.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AttachClassicLinkVpcInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AttachClassicLinkVpcInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        GroupIdStringList.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class AttachClassicLinkVpcOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AttachClassicLinkVpcOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class AttachInternetGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AttachInternetGatewayInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:internet_gateway_id], ::String, context: "#{context}[:internet_gateway_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class AttachInternetGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AttachInternetGatewayOutput, context: context)
      end
    end

    class AttachNetworkInterfaceInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AttachNetworkInterfaceInput, context: context)
        Hearth::Validator.validate!(input[:device_index], ::Integer, context: "#{context}[:device_index]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:network_card_index], ::Integer, context: "#{context}[:network_card_index]")
      end
    end

    class AttachNetworkInterfaceOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AttachNetworkInterfaceOutput, context: context)
        Hearth::Validator.validate!(input[:attachment_id], ::String, context: "#{context}[:attachment_id]")
        Hearth::Validator.validate!(input[:network_card_index], ::Integer, context: "#{context}[:network_card_index]")
      end
    end

    class AttachVolumeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AttachVolumeInput, context: context)
        Hearth::Validator.validate!(input[:device], ::String, context: "#{context}[:device]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class AttachVolumeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AttachVolumeOutput, context: context)
        Hearth::Validator.validate!(input[:attach_time], ::Time, context: "#{context}[:attach_time]")
        Hearth::Validator.validate!(input[:device], ::String, context: "#{context}[:device]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
      end
    end

    class AttachVpnGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AttachVpnGatewayInput, context: context)
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:vpn_gateway_id], ::String, context: "#{context}[:vpn_gateway_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class AttachVpnGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AttachVpnGatewayOutput, context: context)
        VpcAttachment.validate!(input[:vpc_attachment], context: "#{context}[:vpc_attachment]") unless input[:vpc_attachment].nil?
      end
    end

    class AttributeBooleanValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AttributeBooleanValue, context: context)
        Hearth::Validator.validate!(input[:value], ::TrueClass, ::FalseClass, context: "#{context}[:value]")
      end
    end

    class AttributeValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AttributeValue, context: context)
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class AuthorizationRule
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AuthorizationRule, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        Hearth::Validator.validate!(input[:access_all], ::TrueClass, ::FalseClass, context: "#{context}[:access_all]")
        Hearth::Validator.validate!(input[:destination_cidr], ::String, context: "#{context}[:destination_cidr]")
        ClientVpnAuthorizationRuleStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
      end
    end

    class AuthorizationRuleSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AuthorizationRule.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AuthorizeClientVpnIngressInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AuthorizeClientVpnIngressInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:target_network_cidr], ::String, context: "#{context}[:target_network_cidr]")
        Hearth::Validator.validate!(input[:access_group_id], ::String, context: "#{context}[:access_group_id]")
        Hearth::Validator.validate!(input[:authorize_all_groups], ::TrueClass, ::FalseClass, context: "#{context}[:authorize_all_groups]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class AuthorizeClientVpnIngressOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AuthorizeClientVpnIngressOutput, context: context)
        ClientVpnAuthorizationRuleStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
      end
    end

    class AuthorizeSecurityGroupEgressInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AuthorizeSecurityGroupEgressInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        IpPermissionList.validate!(input[:ip_permissions], context: "#{context}[:ip_permissions]") unless input[:ip_permissions].nil?
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:cidr_ip], ::String, context: "#{context}[:cidr_ip]")
        Hearth::Validator.validate!(input[:from_port], ::Integer, context: "#{context}[:from_port]")
        Hearth::Validator.validate!(input[:ip_protocol], ::String, context: "#{context}[:ip_protocol]")
        Hearth::Validator.validate!(input[:to_port], ::Integer, context: "#{context}[:to_port]")
        Hearth::Validator.validate!(input[:source_security_group_name], ::String, context: "#{context}[:source_security_group_name]")
        Hearth::Validator.validate!(input[:source_security_group_owner_id], ::String, context: "#{context}[:source_security_group_owner_id]")
      end
    end

    class AuthorizeSecurityGroupEgressOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AuthorizeSecurityGroupEgressOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
        SecurityGroupRuleList.validate!(input[:security_group_rules], context: "#{context}[:security_group_rules]") unless input[:security_group_rules].nil?
      end
    end

    class AuthorizeSecurityGroupIngressInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AuthorizeSecurityGroupIngressInput, context: context)
        Hearth::Validator.validate!(input[:cidr_ip], ::String, context: "#{context}[:cidr_ip]")
        Hearth::Validator.validate!(input[:from_port], ::Integer, context: "#{context}[:from_port]")
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        IpPermissionList.validate!(input[:ip_permissions], context: "#{context}[:ip_permissions]") unless input[:ip_permissions].nil?
        Hearth::Validator.validate!(input[:ip_protocol], ::String, context: "#{context}[:ip_protocol]")
        Hearth::Validator.validate!(input[:source_security_group_name], ::String, context: "#{context}[:source_security_group_name]")
        Hearth::Validator.validate!(input[:source_security_group_owner_id], ::String, context: "#{context}[:source_security_group_owner_id]")
        Hearth::Validator.validate!(input[:to_port], ::Integer, context: "#{context}[:to_port]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class AuthorizeSecurityGroupIngressOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AuthorizeSecurityGroupIngressOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
        SecurityGroupRuleList.validate!(input[:security_group_rules], context: "#{context}[:security_group_rules]") unless input[:security_group_rules].nil?
      end
    end

    class AvailabilityZone
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AvailabilityZone, context: context)
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:opt_in_status], ::String, context: "#{context}[:opt_in_status]")
        AvailabilityZoneMessageList.validate!(input[:messages], context: "#{context}[:messages]") unless input[:messages].nil?
        Hearth::Validator.validate!(input[:region_name], ::String, context: "#{context}[:region_name]")
        Hearth::Validator.validate!(input[:zone_name], ::String, context: "#{context}[:zone_name]")
        Hearth::Validator.validate!(input[:zone_id], ::String, context: "#{context}[:zone_id]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        Hearth::Validator.validate!(input[:network_border_group], ::String, context: "#{context}[:network_border_group]")
        Hearth::Validator.validate!(input[:zone_type], ::String, context: "#{context}[:zone_type]")
        Hearth::Validator.validate!(input[:parent_zone_name], ::String, context: "#{context}[:parent_zone_name]")
        Hearth::Validator.validate!(input[:parent_zone_id], ::String, context: "#{context}[:parent_zone_id]")
      end
    end

    class AvailabilityZoneList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AvailabilityZone.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AvailabilityZoneMessage
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AvailabilityZoneMessage, context: context)
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class AvailabilityZoneMessageList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AvailabilityZoneMessage.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class AvailabilityZoneStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class AvailableCapacity
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::AvailableCapacity, context: context)
        AvailableInstanceCapacityList.validate!(input[:available_instance_capacity], context: "#{context}[:available_instance_capacity]") unless input[:available_instance_capacity].nil?
        Hearth::Validator.validate!(input[:available_v_cpus], ::Integer, context: "#{context}[:available_v_cpus]")
      end
    end

    class AvailableInstanceCapacityList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceCapacity.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class BaselineEbsBandwidthMbps
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::BaselineEbsBandwidthMbps, context: context)
        Hearth::Validator.validate!(input[:min], ::Integer, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Integer, context: "#{context}[:max]")
      end
    end

    class BaselineEbsBandwidthMbpsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::BaselineEbsBandwidthMbpsRequest, context: context)
        Hearth::Validator.validate!(input[:min], ::Integer, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Integer, context: "#{context}[:max]")
      end
    end

    class BillingProductList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class BlobAttributeValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::BlobAttributeValue, context: context)
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class BlockDeviceMapping
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::BlockDeviceMapping, context: context)
        Hearth::Validator.validate!(input[:device_name], ::String, context: "#{context}[:device_name]")
        Hearth::Validator.validate!(input[:virtual_name], ::String, context: "#{context}[:virtual_name]")
        EbsBlockDevice.validate!(input[:ebs], context: "#{context}[:ebs]") unless input[:ebs].nil?
        Hearth::Validator.validate!(input[:no_device], ::String, context: "#{context}[:no_device]")
      end
    end

    class BlockDeviceMappingList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          BlockDeviceMapping.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class BlockDeviceMappingRequestList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          BlockDeviceMapping.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class BootModeTypeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class BundleIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class BundleInstanceInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::BundleInstanceInput, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Storage.validate!(input[:storage], context: "#{context}[:storage]") unless input[:storage].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class BundleInstanceOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::BundleInstanceOutput, context: context)
        BundleTask.validate!(input[:bundle_task], context: "#{context}[:bundle_task]") unless input[:bundle_task].nil?
      end
    end

    class BundleTask
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::BundleTask, context: context)
        Hearth::Validator.validate!(input[:bundle_id], ::String, context: "#{context}[:bundle_id]")
        BundleTaskError.validate!(input[:bundle_task_error], context: "#{context}[:bundle_task_error]") unless input[:bundle_task_error].nil?
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:progress], ::String, context: "#{context}[:progress]")
        Hearth::Validator.validate!(input[:start_time], ::Time, context: "#{context}[:start_time]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Storage.validate!(input[:storage], context: "#{context}[:storage]") unless input[:storage].nil?
        Hearth::Validator.validate!(input[:update_time], ::Time, context: "#{context}[:update_time]")
      end
    end

    class BundleTaskError
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::BundleTaskError, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class BundleTaskList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          BundleTask.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ByoipCidr
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ByoipCidr, context: context)
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class ByoipCidrSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ByoipCidr.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class CancelBundleTaskInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelBundleTaskInput, context: context)
        Hearth::Validator.validate!(input[:bundle_id], ::String, context: "#{context}[:bundle_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CancelBundleTaskOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelBundleTaskOutput, context: context)
        BundleTask.validate!(input[:bundle_task], context: "#{context}[:bundle_task]") unless input[:bundle_task].nil?
      end
    end

    class CancelCapacityReservationFleetError
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelCapacityReservationFleetError, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class CancelCapacityReservationFleetsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelCapacityReservationFleetsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        CapacityReservationFleetIdSet.validate!(input[:capacity_reservation_fleet_ids], context: "#{context}[:capacity_reservation_fleet_ids]") unless input[:capacity_reservation_fleet_ids].nil?
      end
    end

    class CancelCapacityReservationFleetsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelCapacityReservationFleetsOutput, context: context)
        CapacityReservationFleetCancellationStateSet.validate!(input[:successful_fleet_cancellations], context: "#{context}[:successful_fleet_cancellations]") unless input[:successful_fleet_cancellations].nil?
        FailedCapacityReservationFleetCancellationResultSet.validate!(input[:failed_fleet_cancellations], context: "#{context}[:failed_fleet_cancellations]") unless input[:failed_fleet_cancellations].nil?
      end
    end

    class CancelCapacityReservationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelCapacityReservationInput, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_id], ::String, context: "#{context}[:capacity_reservation_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CancelCapacityReservationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelCapacityReservationOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class CancelConversionTaskInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelConversionTaskInput, context: context)
        Hearth::Validator.validate!(input[:conversion_task_id], ::String, context: "#{context}[:conversion_task_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:reason_message], ::String, context: "#{context}[:reason_message]")
      end
    end

    class CancelConversionTaskOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelConversionTaskOutput, context: context)
      end
    end

    class CancelExportTaskInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelExportTaskInput, context: context)
        Hearth::Validator.validate!(input[:export_task_id], ::String, context: "#{context}[:export_task_id]")
      end
    end

    class CancelExportTaskOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelExportTaskOutput, context: context)
      end
    end

    class CancelImportTaskInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelImportTaskInput, context: context)
        Hearth::Validator.validate!(input[:cancel_reason], ::String, context: "#{context}[:cancel_reason]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:import_task_id], ::String, context: "#{context}[:import_task_id]")
      end
    end

    class CancelImportTaskOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelImportTaskOutput, context: context)
        Hearth::Validator.validate!(input[:import_task_id], ::String, context: "#{context}[:import_task_id]")
        Hearth::Validator.validate!(input[:previous_state], ::String, context: "#{context}[:previous_state]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class CancelReservedInstancesListingInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelReservedInstancesListingInput, context: context)
        Hearth::Validator.validate!(input[:reserved_instances_listing_id], ::String, context: "#{context}[:reserved_instances_listing_id]")
      end
    end

    class CancelReservedInstancesListingOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelReservedInstancesListingOutput, context: context)
        ReservedInstancesListingList.validate!(input[:reserved_instances_listings], context: "#{context}[:reserved_instances_listings]") unless input[:reserved_instances_listings].nil?
      end
    end

    class CancelSpotFleetRequestsError
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelSpotFleetRequestsError, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class CancelSpotFleetRequestsErrorItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelSpotFleetRequestsErrorItem, context: context)
        CancelSpotFleetRequestsError.validate!(input[:error], context: "#{context}[:error]") unless input[:error].nil?
        Hearth::Validator.validate!(input[:spot_fleet_request_id], ::String, context: "#{context}[:spot_fleet_request_id]")
      end
    end

    class CancelSpotFleetRequestsErrorSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          CancelSpotFleetRequestsErrorItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class CancelSpotFleetRequestsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelSpotFleetRequestsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        SpotFleetRequestIdList.validate!(input[:spot_fleet_request_ids], context: "#{context}[:spot_fleet_request_ids]") unless input[:spot_fleet_request_ids].nil?
        Hearth::Validator.validate!(input[:terminate_instances], ::TrueClass, ::FalseClass, context: "#{context}[:terminate_instances]")
      end
    end

    class CancelSpotFleetRequestsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelSpotFleetRequestsOutput, context: context)
        CancelSpotFleetRequestsSuccessSet.validate!(input[:successful_fleet_requests], context: "#{context}[:successful_fleet_requests]") unless input[:successful_fleet_requests].nil?
        CancelSpotFleetRequestsErrorSet.validate!(input[:unsuccessful_fleet_requests], context: "#{context}[:unsuccessful_fleet_requests]") unless input[:unsuccessful_fleet_requests].nil?
      end
    end

    class CancelSpotFleetRequestsSuccessItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelSpotFleetRequestsSuccessItem, context: context)
        Hearth::Validator.validate!(input[:current_spot_fleet_request_state], ::String, context: "#{context}[:current_spot_fleet_request_state]")
        Hearth::Validator.validate!(input[:previous_spot_fleet_request_state], ::String, context: "#{context}[:previous_spot_fleet_request_state]")
        Hearth::Validator.validate!(input[:spot_fleet_request_id], ::String, context: "#{context}[:spot_fleet_request_id]")
      end
    end

    class CancelSpotFleetRequestsSuccessSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          CancelSpotFleetRequestsSuccessItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class CancelSpotInstanceRequestsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelSpotInstanceRequestsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        SpotInstanceRequestIdList.validate!(input[:spot_instance_request_ids], context: "#{context}[:spot_instance_request_ids]") unless input[:spot_instance_request_ids].nil?
      end
    end

    class CancelSpotInstanceRequestsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelSpotInstanceRequestsOutput, context: context)
        CancelledSpotInstanceRequestList.validate!(input[:cancelled_spot_instance_requests], context: "#{context}[:cancelled_spot_instance_requests]") unless input[:cancelled_spot_instance_requests].nil?
      end
    end

    class CancelledSpotInstanceRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CancelledSpotInstanceRequest, context: context)
        Hearth::Validator.validate!(input[:spot_instance_request_id], ::String, context: "#{context}[:spot_instance_request_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class CancelledSpotInstanceRequestList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          CancelledSpotInstanceRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class CapacityReservation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CapacityReservation, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_id], ::String, context: "#{context}[:capacity_reservation_id]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:capacity_reservation_arn], ::String, context: "#{context}[:capacity_reservation_arn]")
        Hearth::Validator.validate!(input[:availability_zone_id], ::String, context: "#{context}[:availability_zone_id]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:instance_platform], ::String, context: "#{context}[:instance_platform]")
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:tenancy], ::String, context: "#{context}[:tenancy]")
        Hearth::Validator.validate!(input[:total_instance_count], ::Integer, context: "#{context}[:total_instance_count]")
        Hearth::Validator.validate!(input[:available_instance_count], ::Integer, context: "#{context}[:available_instance_count]")
        Hearth::Validator.validate!(input[:ebs_optimized], ::TrueClass, ::FalseClass, context: "#{context}[:ebs_optimized]")
        Hearth::Validator.validate!(input[:ephemeral_storage], ::TrueClass, ::FalseClass, context: "#{context}[:ephemeral_storage]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:start_date], ::Time, context: "#{context}[:start_date]")
        Hearth::Validator.validate!(input[:end_date], ::Time, context: "#{context}[:end_date]")
        Hearth::Validator.validate!(input[:end_date_type], ::String, context: "#{context}[:end_date_type]")
        Hearth::Validator.validate!(input[:instance_match_criteria], ::String, context: "#{context}[:instance_match_criteria]")
        Hearth::Validator.validate!(input[:create_date], ::Time, context: "#{context}[:create_date]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        Hearth::Validator.validate!(input[:capacity_reservation_fleet_id], ::String, context: "#{context}[:capacity_reservation_fleet_id]")
        Hearth::Validator.validate!(input[:placement_group_arn], ::String, context: "#{context}[:placement_group_arn]")
      end
    end

    class CapacityReservationFleet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CapacityReservationFleet, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_fleet_id], ::String, context: "#{context}[:capacity_reservation_fleet_id]")
        Hearth::Validator.validate!(input[:capacity_reservation_fleet_arn], ::String, context: "#{context}[:capacity_reservation_fleet_arn]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:total_target_capacity], ::Integer, context: "#{context}[:total_target_capacity]")
        Hearth::Validator.validate!(input[:total_fulfilled_capacity], ::Float, context: "#{context}[:total_fulfilled_capacity]")
        Hearth::Validator.validate!(input[:tenancy], ::String, context: "#{context}[:tenancy]")
        Hearth::Validator.validate!(input[:end_date], ::Time, context: "#{context}[:end_date]")
        Hearth::Validator.validate!(input[:create_time], ::Time, context: "#{context}[:create_time]")
        Hearth::Validator.validate!(input[:instance_match_criteria], ::String, context: "#{context}[:instance_match_criteria]")
        Hearth::Validator.validate!(input[:allocation_strategy], ::String, context: "#{context}[:allocation_strategy]")
        FleetCapacityReservationSet.validate!(input[:instance_type_specifications], context: "#{context}[:instance_type_specifications]") unless input[:instance_type_specifications].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class CapacityReservationFleetCancellationState
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CapacityReservationFleetCancellationState, context: context)
        Hearth::Validator.validate!(input[:current_fleet_state], ::String, context: "#{context}[:current_fleet_state]")
        Hearth::Validator.validate!(input[:previous_fleet_state], ::String, context: "#{context}[:previous_fleet_state]")
        Hearth::Validator.validate!(input[:capacity_reservation_fleet_id], ::String, context: "#{context}[:capacity_reservation_fleet_id]")
      end
    end

    class CapacityReservationFleetCancellationStateSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          CapacityReservationFleetCancellationState.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class CapacityReservationFleetIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class CapacityReservationFleetSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          CapacityReservationFleet.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class CapacityReservationGroup
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CapacityReservationGroup, context: context)
        Hearth::Validator.validate!(input[:group_arn], ::String, context: "#{context}[:group_arn]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
      end
    end

    class CapacityReservationGroupSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          CapacityReservationGroup.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class CapacityReservationIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class CapacityReservationOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CapacityReservationOptions, context: context)
        Hearth::Validator.validate!(input[:usage_strategy], ::String, context: "#{context}[:usage_strategy]")
      end
    end

    class CapacityReservationOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CapacityReservationOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:usage_strategy], ::String, context: "#{context}[:usage_strategy]")
      end
    end

    class CapacityReservationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          CapacityReservation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class CapacityReservationSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CapacityReservationSpecification, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_preference], ::String, context: "#{context}[:capacity_reservation_preference]")
        CapacityReservationTarget.validate!(input[:capacity_reservation_target], context: "#{context}[:capacity_reservation_target]") unless input[:capacity_reservation_target].nil?
      end
    end

    class CapacityReservationSpecificationResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CapacityReservationSpecificationResponse, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_preference], ::String, context: "#{context}[:capacity_reservation_preference]")
        CapacityReservationTargetResponse.validate!(input[:capacity_reservation_target], context: "#{context}[:capacity_reservation_target]") unless input[:capacity_reservation_target].nil?
      end
    end

    class CapacityReservationTarget
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CapacityReservationTarget, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_id], ::String, context: "#{context}[:capacity_reservation_id]")
        Hearth::Validator.validate!(input[:capacity_reservation_resource_group_arn], ::String, context: "#{context}[:capacity_reservation_resource_group_arn]")
      end
    end

    class CapacityReservationTargetResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CapacityReservationTargetResponse, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_id], ::String, context: "#{context}[:capacity_reservation_id]")
        Hearth::Validator.validate!(input[:capacity_reservation_resource_group_arn], ::String, context: "#{context}[:capacity_reservation_resource_group_arn]")
      end
    end

    class CarrierGateway
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CarrierGateway, context: context)
        Hearth::Validator.validate!(input[:carrier_gateway_id], ::String, context: "#{context}[:carrier_gateway_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class CarrierGatewayIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class CarrierGatewaySet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          CarrierGateway.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class CertificateAuthentication
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CertificateAuthentication, context: context)
        Hearth::Validator.validate!(input[:client_root_certificate_chain], ::String, context: "#{context}[:client_root_certificate_chain]")
      end
    end

    class CertificateAuthenticationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CertificateAuthenticationRequest, context: context)
        Hearth::Validator.validate!(input[:client_root_certificate_chain_arn], ::String, context: "#{context}[:client_root_certificate_chain_arn]")
      end
    end

    class CidrAuthorizationContext
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CidrAuthorizationContext, context: context)
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
        Hearth::Validator.validate!(input[:signature], ::String, context: "#{context}[:signature]")
      end
    end

    class CidrBlock
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CidrBlock, context: context)
        Hearth::Validator.validate!(input[:cidr_block], ::String, context: "#{context}[:cidr_block]")
      end
    end

    class CidrBlockSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          CidrBlock.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ClassicLinkDnsSupport
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClassicLinkDnsSupport, context: context)
        Hearth::Validator.validate!(input[:classic_link_dns_supported], ::TrueClass, ::FalseClass, context: "#{context}[:classic_link_dns_supported]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class ClassicLinkDnsSupportList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ClassicLinkDnsSupport.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ClassicLinkInstance
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClassicLinkInstance, context: context)
        GroupIdentifierList.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class ClassicLinkInstanceList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ClassicLinkInstance.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ClassicLoadBalancer
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClassicLoadBalancer, context: context)
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
      end
    end

    class ClassicLoadBalancers
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ClassicLoadBalancer.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ClassicLoadBalancersConfig
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClassicLoadBalancersConfig, context: context)
        ClassicLoadBalancers.validate!(input[:classic_load_balancers], context: "#{context}[:classic_load_balancers]") unless input[:classic_load_balancers].nil?
      end
    end

    class ClientCertificateRevocationListStatus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientCertificateRevocationListStatus, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class ClientConnectOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientConnectOptions, context: context)
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
        Hearth::Validator.validate!(input[:lambda_function_arn], ::String, context: "#{context}[:lambda_function_arn]")
      end
    end

    class ClientConnectResponseOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientConnectResponseOptions, context: context)
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
        Hearth::Validator.validate!(input[:lambda_function_arn], ::String, context: "#{context}[:lambda_function_arn]")
        ClientVpnEndpointAttributeStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
      end
    end

    class ClientData
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientData, context: context)
        Hearth::Validator.validate!(input[:comment], ::String, context: "#{context}[:comment]")
        Hearth::Validator.validate!(input[:upload_end], ::Time, context: "#{context}[:upload_end]")
        Hearth::Validator.validate!(input[:upload_size], ::Float, context: "#{context}[:upload_size]")
        Hearth::Validator.validate!(input[:upload_start], ::Time, context: "#{context}[:upload_start]")
      end
    end

    class ClientLoginBannerOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientLoginBannerOptions, context: context)
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
        Hearth::Validator.validate!(input[:banner_text], ::String, context: "#{context}[:banner_text]")
      end
    end

    class ClientLoginBannerResponseOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientLoginBannerResponseOptions, context: context)
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
        Hearth::Validator.validate!(input[:banner_text], ::String, context: "#{context}[:banner_text]")
      end
    end

    class ClientVpnAuthentication
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientVpnAuthentication, context: context)
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        DirectoryServiceAuthentication.validate!(input[:active_directory], context: "#{context}[:active_directory]") unless input[:active_directory].nil?
        CertificateAuthentication.validate!(input[:mutual_authentication], context: "#{context}[:mutual_authentication]") unless input[:mutual_authentication].nil?
        FederatedAuthentication.validate!(input[:federated_authentication], context: "#{context}[:federated_authentication]") unless input[:federated_authentication].nil?
      end
    end

    class ClientVpnAuthenticationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ClientVpnAuthentication.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ClientVpnAuthenticationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientVpnAuthenticationRequest, context: context)
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        DirectoryServiceAuthenticationRequest.validate!(input[:active_directory], context: "#{context}[:active_directory]") unless input[:active_directory].nil?
        CertificateAuthenticationRequest.validate!(input[:mutual_authentication], context: "#{context}[:mutual_authentication]") unless input[:mutual_authentication].nil?
        FederatedAuthenticationRequest.validate!(input[:federated_authentication], context: "#{context}[:federated_authentication]") unless input[:federated_authentication].nil?
      end
    end

    class ClientVpnAuthenticationRequestList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ClientVpnAuthenticationRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ClientVpnAuthorizationRuleStatus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientVpnAuthorizationRuleStatus, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class ClientVpnConnection
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientVpnConnection, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:timestamp], ::String, context: "#{context}[:timestamp]")
        Hearth::Validator.validate!(input[:connection_id], ::String, context: "#{context}[:connection_id]")
        Hearth::Validator.validate!(input[:username], ::String, context: "#{context}[:username]")
        Hearth::Validator.validate!(input[:connection_established_time], ::String, context: "#{context}[:connection_established_time]")
        Hearth::Validator.validate!(input[:ingress_bytes], ::String, context: "#{context}[:ingress_bytes]")
        Hearth::Validator.validate!(input[:egress_bytes], ::String, context: "#{context}[:egress_bytes]")
        Hearth::Validator.validate!(input[:ingress_packets], ::String, context: "#{context}[:ingress_packets]")
        Hearth::Validator.validate!(input[:egress_packets], ::String, context: "#{context}[:egress_packets]")
        Hearth::Validator.validate!(input[:client_ip], ::String, context: "#{context}[:client_ip]")
        Hearth::Validator.validate!(input[:common_name], ::String, context: "#{context}[:common_name]")
        ClientVpnConnectionStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
        Hearth::Validator.validate!(input[:connection_end_time], ::String, context: "#{context}[:connection_end_time]")
        ValueStringList.validate!(input[:posture_compliance_statuses], context: "#{context}[:posture_compliance_statuses]") unless input[:posture_compliance_statuses].nil?
      end
    end

    class ClientVpnConnectionSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ClientVpnConnection.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ClientVpnConnectionStatus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientVpnConnectionStatus, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class ClientVpnEndpoint
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientVpnEndpoint, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        ClientVpnEndpointStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
        Hearth::Validator.validate!(input[:creation_time], ::String, context: "#{context}[:creation_time]")
        Hearth::Validator.validate!(input[:deletion_time], ::String, context: "#{context}[:deletion_time]")
        Hearth::Validator.validate!(input[:dns_name], ::String, context: "#{context}[:dns_name]")
        Hearth::Validator.validate!(input[:client_cidr_block], ::String, context: "#{context}[:client_cidr_block]")
        ValueStringList.validate!(input[:dns_servers], context: "#{context}[:dns_servers]") unless input[:dns_servers].nil?
        Hearth::Validator.validate!(input[:split_tunnel], ::TrueClass, ::FalseClass, context: "#{context}[:split_tunnel]")
        Hearth::Validator.validate!(input[:vpn_protocol], ::String, context: "#{context}[:vpn_protocol]")
        Hearth::Validator.validate!(input[:transport_protocol], ::String, context: "#{context}[:transport_protocol]")
        Hearth::Validator.validate!(input[:vpn_port], ::Integer, context: "#{context}[:vpn_port]")
        AssociatedTargetNetworkSet.validate!(input[:associated_target_networks], context: "#{context}[:associated_target_networks]") unless input[:associated_target_networks].nil?
        Hearth::Validator.validate!(input[:server_certificate_arn], ::String, context: "#{context}[:server_certificate_arn]")
        ClientVpnAuthenticationList.validate!(input[:authentication_options], context: "#{context}[:authentication_options]") unless input[:authentication_options].nil?
        ConnectionLogResponseOptions.validate!(input[:connection_log_options], context: "#{context}[:connection_log_options]") unless input[:connection_log_options].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        ClientVpnSecurityGroupIdSet.validate!(input[:security_group_ids], context: "#{context}[:security_group_ids]") unless input[:security_group_ids].nil?
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:self_service_portal_url], ::String, context: "#{context}[:self_service_portal_url]")
        ClientConnectResponseOptions.validate!(input[:client_connect_options], context: "#{context}[:client_connect_options]") unless input[:client_connect_options].nil?
        Hearth::Validator.validate!(input[:session_timeout_hours], ::Integer, context: "#{context}[:session_timeout_hours]")
        ClientLoginBannerResponseOptions.validate!(input[:client_login_banner_options], context: "#{context}[:client_login_banner_options]") unless input[:client_login_banner_options].nil?
      end
    end

    class ClientVpnEndpointAttributeStatus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientVpnEndpointAttributeStatus, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class ClientVpnEndpointIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ClientVpnEndpointStatus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientVpnEndpointStatus, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class ClientVpnRoute
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientVpnRoute, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:destination_cidr], ::String, context: "#{context}[:destination_cidr]")
        Hearth::Validator.validate!(input[:target_subnet], ::String, context: "#{context}[:target_subnet]")
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:origin], ::String, context: "#{context}[:origin]")
        ClientVpnRouteStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
      end
    end

    class ClientVpnRouteSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ClientVpnRoute.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ClientVpnRouteStatus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ClientVpnRouteStatus, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class ClientVpnSecurityGroupIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class CoipAddressUsage
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CoipAddressUsage, context: context)
        Hearth::Validator.validate!(input[:allocation_id], ::String, context: "#{context}[:allocation_id]")
        Hearth::Validator.validate!(input[:aws_account_id], ::String, context: "#{context}[:aws_account_id]")
        Hearth::Validator.validate!(input[:aws_service], ::String, context: "#{context}[:aws_service]")
        Hearth::Validator.validate!(input[:co_ip], ::String, context: "#{context}[:co_ip]")
      end
    end

    class CoipAddressUsageSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          CoipAddressUsage.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class CoipPool
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CoipPool, context: context)
        Hearth::Validator.validate!(input[:pool_id], ::String, context: "#{context}[:pool_id]")
        ValueStringList.validate!(input[:pool_cidrs], context: "#{context}[:pool_cidrs]") unless input[:pool_cidrs].nil?
        Hearth::Validator.validate!(input[:local_gateway_route_table_id], ::String, context: "#{context}[:local_gateway_route_table_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:pool_arn], ::String, context: "#{context}[:pool_arn]")
      end
    end

    class CoipPoolIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class CoipPoolSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          CoipPool.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ConfirmProductInstanceInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ConfirmProductInstanceInput, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:product_code], ::String, context: "#{context}[:product_code]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ConfirmProductInstanceOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ConfirmProductInstanceOutput, context: context)
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ConnectionLogOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ConnectionLogOptions, context: context)
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
        Hearth::Validator.validate!(input[:cloudwatch_log_group], ::String, context: "#{context}[:cloudwatch_log_group]")
        Hearth::Validator.validate!(input[:cloudwatch_log_stream], ::String, context: "#{context}[:cloudwatch_log_stream]")
      end
    end

    class ConnectionLogResponseOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ConnectionLogResponseOptions, context: context)
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
        Hearth::Validator.validate!(input[:cloudwatch_log_group], ::String, context: "#{context}[:cloudwatch_log_group]")
        Hearth::Validator.validate!(input[:cloudwatch_log_stream], ::String, context: "#{context}[:cloudwatch_log_stream]")
      end
    end

    class ConnectionNotification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ConnectionNotification, context: context)
        Hearth::Validator.validate!(input[:connection_notification_id], ::String, context: "#{context}[:connection_notification_id]")
        Hearth::Validator.validate!(input[:service_id], ::String, context: "#{context}[:service_id]")
        Hearth::Validator.validate!(input[:vpc_endpoint_id], ::String, context: "#{context}[:vpc_endpoint_id]")
        Hearth::Validator.validate!(input[:connection_notification_type], ::String, context: "#{context}[:connection_notification_type]")
        Hearth::Validator.validate!(input[:connection_notification_arn], ::String, context: "#{context}[:connection_notification_arn]")
        ValueStringList.validate!(input[:connection_events], context: "#{context}[:connection_events]") unless input[:connection_events].nil?
        Hearth::Validator.validate!(input[:connection_notification_state], ::String, context: "#{context}[:connection_notification_state]")
      end
    end

    class ConnectionNotificationIdsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ConnectionNotificationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ConnectionNotification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ConversionIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ConversionTask
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ConversionTask, context: context)
        Hearth::Validator.validate!(input[:conversion_task_id], ::String, context: "#{context}[:conversion_task_id]")
        Hearth::Validator.validate!(input[:expiration_time], ::String, context: "#{context}[:expiration_time]")
        ImportInstanceTaskDetails.validate!(input[:import_instance], context: "#{context}[:import_instance]") unless input[:import_instance].nil?
        ImportVolumeTaskDetails.validate!(input[:import_volume], context: "#{context}[:import_volume]") unless input[:import_volume].nil?
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class CopyFpgaImageInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CopyFpgaImageInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:source_fpga_image_id], ::String, context: "#{context}[:source_fpga_image_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        Hearth::Validator.validate!(input[:source_region], ::String, context: "#{context}[:source_region]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CopyFpgaImageOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CopyFpgaImageOutput, context: context)
        Hearth::Validator.validate!(input[:fpga_image_id], ::String, context: "#{context}[:fpga_image_id]")
      end
    end

    class CopyImageInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CopyImageInput, context: context)
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        Hearth::Validator.validate!(input[:source_image_id], ::String, context: "#{context}[:source_image_id]")
        Hearth::Validator.validate!(input[:source_region], ::String, context: "#{context}[:source_region]")
        Hearth::Validator.validate!(input[:destination_outpost_arn], ::String, context: "#{context}[:destination_outpost_arn]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CopyImageOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CopyImageOutput, context: context)
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
      end
    end

    class CopySnapshotInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CopySnapshotInput, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:destination_outpost_arn], ::String, context: "#{context}[:destination_outpost_arn]")
        Hearth::Validator.validate!(input[:destination_region], ::String, context: "#{context}[:destination_region]")
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:presigned_url], ::String, context: "#{context}[:presigned_url]")
        Hearth::Validator.validate!(input[:source_region], ::String, context: "#{context}[:source_region]")
        Hearth::Validator.validate!(input[:source_snapshot_id], ::String, context: "#{context}[:source_snapshot_id]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CopySnapshotOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CopySnapshotOutput, context: context)
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class CoreCountList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::Integer, context: "#{context}[#{index}]")
        end
      end
    end

    class CpuManufacturerSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class CpuOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CpuOptions, context: context)
        Hearth::Validator.validate!(input[:core_count], ::Integer, context: "#{context}[:core_count]")
        Hearth::Validator.validate!(input[:threads_per_core], ::Integer, context: "#{context}[:threads_per_core]")
      end
    end

    class CpuOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CpuOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:core_count], ::Integer, context: "#{context}[:core_count]")
        Hearth::Validator.validate!(input[:threads_per_core], ::Integer, context: "#{context}[:threads_per_core]")
      end
    end

    class CreateCapacityReservationFleetInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateCapacityReservationFleetInput, context: context)
        Hearth::Validator.validate!(input[:allocation_strategy], ::String, context: "#{context}[:allocation_strategy]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        ReservationFleetInstanceSpecificationList.validate!(input[:instance_type_specifications], context: "#{context}[:instance_type_specifications]") unless input[:instance_type_specifications].nil?
        Hearth::Validator.validate!(input[:tenancy], ::String, context: "#{context}[:tenancy]")
        Hearth::Validator.validate!(input[:total_target_capacity], ::Integer, context: "#{context}[:total_target_capacity]")
        Hearth::Validator.validate!(input[:end_date], ::Time, context: "#{context}[:end_date]")
        Hearth::Validator.validate!(input[:instance_match_criteria], ::String, context: "#{context}[:instance_match_criteria]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateCapacityReservationFleetOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateCapacityReservationFleetOutput, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_fleet_id], ::String, context: "#{context}[:capacity_reservation_fleet_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:total_target_capacity], ::Integer, context: "#{context}[:total_target_capacity]")
        Hearth::Validator.validate!(input[:total_fulfilled_capacity], ::Float, context: "#{context}[:total_fulfilled_capacity]")
        Hearth::Validator.validate!(input[:instance_match_criteria], ::String, context: "#{context}[:instance_match_criteria]")
        Hearth::Validator.validate!(input[:allocation_strategy], ::String, context: "#{context}[:allocation_strategy]")
        Hearth::Validator.validate!(input[:create_time], ::Time, context: "#{context}[:create_time]")
        Hearth::Validator.validate!(input[:end_date], ::Time, context: "#{context}[:end_date]")
        Hearth::Validator.validate!(input[:tenancy], ::String, context: "#{context}[:tenancy]")
        FleetCapacityReservationSet.validate!(input[:fleet_capacity_reservations], context: "#{context}[:fleet_capacity_reservations]") unless input[:fleet_capacity_reservations].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class CreateCapacityReservationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateCapacityReservationInput, context: context)
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:instance_platform], ::String, context: "#{context}[:instance_platform]")
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:availability_zone_id], ::String, context: "#{context}[:availability_zone_id]")
        Hearth::Validator.validate!(input[:tenancy], ::String, context: "#{context}[:tenancy]")
        Hearth::Validator.validate!(input[:instance_count], ::Integer, context: "#{context}[:instance_count]")
        Hearth::Validator.validate!(input[:ebs_optimized], ::TrueClass, ::FalseClass, context: "#{context}[:ebs_optimized]")
        Hearth::Validator.validate!(input[:ephemeral_storage], ::TrueClass, ::FalseClass, context: "#{context}[:ephemeral_storage]")
        Hearth::Validator.validate!(input[:end_date], ::Time, context: "#{context}[:end_date]")
        Hearth::Validator.validate!(input[:end_date_type], ::String, context: "#{context}[:end_date_type]")
        Hearth::Validator.validate!(input[:instance_match_criteria], ::String, context: "#{context}[:instance_match_criteria]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        Hearth::Validator.validate!(input[:placement_group_arn], ::String, context: "#{context}[:placement_group_arn]")
      end
    end

    class CreateCapacityReservationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateCapacityReservationOutput, context: context)
        CapacityReservation.validate!(input[:capacity_reservation], context: "#{context}[:capacity_reservation]") unless input[:capacity_reservation].nil?
      end
    end

    class CreateCarrierGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateCarrierGatewayInput, context: context)
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateCarrierGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateCarrierGatewayOutput, context: context)
        CarrierGateway.validate!(input[:carrier_gateway], context: "#{context}[:carrier_gateway]") unless input[:carrier_gateway].nil?
      end
    end

    class CreateClientVpnEndpointInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateClientVpnEndpointInput, context: context)
        Hearth::Validator.validate!(input[:client_cidr_block], ::String, context: "#{context}[:client_cidr_block]")
        Hearth::Validator.validate!(input[:server_certificate_arn], ::String, context: "#{context}[:server_certificate_arn]")
        ClientVpnAuthenticationRequestList.validate!(input[:authentication_options], context: "#{context}[:authentication_options]") unless input[:authentication_options].nil?
        ConnectionLogOptions.validate!(input[:connection_log_options], context: "#{context}[:connection_log_options]") unless input[:connection_log_options].nil?
        ValueStringList.validate!(input[:dns_servers], context: "#{context}[:dns_servers]") unless input[:dns_servers].nil?
        Hearth::Validator.validate!(input[:transport_protocol], ::String, context: "#{context}[:transport_protocol]")
        Hearth::Validator.validate!(input[:vpn_port], ::Integer, context: "#{context}[:vpn_port]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:split_tunnel], ::TrueClass, ::FalseClass, context: "#{context}[:split_tunnel]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        ClientVpnSecurityGroupIdSet.validate!(input[:security_group_ids], context: "#{context}[:security_group_ids]") unless input[:security_group_ids].nil?
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:self_service_portal], ::String, context: "#{context}[:self_service_portal]")
        ClientConnectOptions.validate!(input[:client_connect_options], context: "#{context}[:client_connect_options]") unless input[:client_connect_options].nil?
        Hearth::Validator.validate!(input[:session_timeout_hours], ::Integer, context: "#{context}[:session_timeout_hours]")
        ClientLoginBannerOptions.validate!(input[:client_login_banner_options], context: "#{context}[:client_login_banner_options]") unless input[:client_login_banner_options].nil?
      end
    end

    class CreateClientVpnEndpointOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateClientVpnEndpointOutput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        ClientVpnEndpointStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
        Hearth::Validator.validate!(input[:dns_name], ::String, context: "#{context}[:dns_name]")
      end
    end

    class CreateClientVpnRouteInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateClientVpnRouteInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:target_vpc_subnet_id], ::String, context: "#{context}[:target_vpc_subnet_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateClientVpnRouteOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateClientVpnRouteOutput, context: context)
        ClientVpnRouteStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
      end
    end

    class CreateCustomerGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateCustomerGatewayInput, context: context)
        Hearth::Validator.validate!(input[:bgp_asn], ::Integer, context: "#{context}[:bgp_asn]")
        Hearth::Validator.validate!(input[:public_ip], ::String, context: "#{context}[:public_ip]")
        Hearth::Validator.validate!(input[:certificate_arn], ::String, context: "#{context}[:certificate_arn]")
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:device_name], ::String, context: "#{context}[:device_name]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateCustomerGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateCustomerGatewayOutput, context: context)
        CustomerGateway.validate!(input[:customer_gateway], context: "#{context}[:customer_gateway]") unless input[:customer_gateway].nil?
      end
    end

    class CreateDefaultSubnetInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateDefaultSubnetInput, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipv6_native], ::TrueClass, ::FalseClass, context: "#{context}[:ipv6_native]")
      end
    end

    class CreateDefaultSubnetOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateDefaultSubnetOutput, context: context)
        Subnet.validate!(input[:subnet], context: "#{context}[:subnet]") unless input[:subnet].nil?
      end
    end

    class CreateDefaultVpcInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateDefaultVpcInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateDefaultVpcOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateDefaultVpcOutput, context: context)
        Vpc.validate!(input[:vpc], context: "#{context}[:vpc]") unless input[:vpc].nil?
      end
    end

    class CreateDhcpOptionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateDhcpOptionsInput, context: context)
        NewDhcpConfigurationList.validate!(input[:dhcp_configurations], context: "#{context}[:dhcp_configurations]") unless input[:dhcp_configurations].nil?
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateDhcpOptionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateDhcpOptionsOutput, context: context)
        DhcpOptions.validate!(input[:dhcp_options], context: "#{context}[:dhcp_options]") unless input[:dhcp_options].nil?
      end
    end

    class CreateEgressOnlyInternetGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateEgressOnlyInternetGatewayInput, context: context)
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreateEgressOnlyInternetGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateEgressOnlyInternetGatewayOutput, context: context)
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        EgressOnlyInternetGateway.validate!(input[:egress_only_internet_gateway], context: "#{context}[:egress_only_internet_gateway]") unless input[:egress_only_internet_gateway].nil?
      end
    end

    class CreateFleetError
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateFleetError, context: context)
        LaunchTemplateAndOverridesResponse.validate!(input[:launch_template_and_overrides], context: "#{context}[:launch_template_and_overrides]") unless input[:launch_template_and_overrides].nil?
        Hearth::Validator.validate!(input[:lifecycle], ::String, context: "#{context}[:lifecycle]")
        Hearth::Validator.validate!(input[:error_code], ::String, context: "#{context}[:error_code]")
        Hearth::Validator.validate!(input[:error_message], ::String, context: "#{context}[:error_message]")
      end
    end

    class CreateFleetErrorsSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          CreateFleetError.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class CreateFleetInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateFleetInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        SpotOptionsRequest.validate!(input[:spot_options], context: "#{context}[:spot_options]") unless input[:spot_options].nil?
        OnDemandOptionsRequest.validate!(input[:on_demand_options], context: "#{context}[:on_demand_options]") unless input[:on_demand_options].nil?
        Hearth::Validator.validate!(input[:excess_capacity_termination_policy], ::String, context: "#{context}[:excess_capacity_termination_policy]")
        FleetLaunchTemplateConfigListRequest.validate!(input[:launch_template_configs], context: "#{context}[:launch_template_configs]") unless input[:launch_template_configs].nil?
        TargetCapacitySpecificationRequest.validate!(input[:target_capacity_specification], context: "#{context}[:target_capacity_specification]") unless input[:target_capacity_specification].nil?
        Hearth::Validator.validate!(input[:terminate_instances_with_expiration], ::TrueClass, ::FalseClass, context: "#{context}[:terminate_instances_with_expiration]")
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:valid_from], ::Time, context: "#{context}[:valid_from]")
        Hearth::Validator.validate!(input[:valid_until], ::Time, context: "#{context}[:valid_until]")
        Hearth::Validator.validate!(input[:replace_unhealthy_instances], ::TrueClass, ::FalseClass, context: "#{context}[:replace_unhealthy_instances]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:context], ::String, context: "#{context}[:context]")
      end
    end

    class CreateFleetInstance
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateFleetInstance, context: context)
        LaunchTemplateAndOverridesResponse.validate!(input[:launch_template_and_overrides], context: "#{context}[:launch_template_and_overrides]") unless input[:launch_template_and_overrides].nil?
        Hearth::Validator.validate!(input[:lifecycle], ::String, context: "#{context}[:lifecycle]")
        InstanceIdsSet.validate!(input[:instance_ids], context: "#{context}[:instance_ids]") unless input[:instance_ids].nil?
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:platform], ::String, context: "#{context}[:platform]")
      end
    end

    class CreateFleetInstancesSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          CreateFleetInstance.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class CreateFleetOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateFleetOutput, context: context)
        Hearth::Validator.validate!(input[:fleet_id], ::String, context: "#{context}[:fleet_id]")
        CreateFleetErrorsSet.validate!(input[:errors], context: "#{context}[:errors]") unless input[:errors].nil?
        CreateFleetInstancesSet.validate!(input[:instances], context: "#{context}[:instances]") unless input[:instances].nil?
      end
    end

    class CreateFlowLogsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateFlowLogsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:deliver_logs_permission_arn], ::String, context: "#{context}[:deliver_logs_permission_arn]")
        Hearth::Validator.validate!(input[:log_group_name], ::String, context: "#{context}[:log_group_name]")
        FlowLogResourceIds.validate!(input[:resource_ids], context: "#{context}[:resource_ids]") unless input[:resource_ids].nil?
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        Hearth::Validator.validate!(input[:traffic_type], ::String, context: "#{context}[:traffic_type]")
        Hearth::Validator.validate!(input[:log_destination_type], ::String, context: "#{context}[:log_destination_type]")
        Hearth::Validator.validate!(input[:log_destination], ::String, context: "#{context}[:log_destination]")
        Hearth::Validator.validate!(input[:log_format], ::String, context: "#{context}[:log_format]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:max_aggregation_interval], ::Integer, context: "#{context}[:max_aggregation_interval]")
        DestinationOptionsRequest.validate!(input[:destination_options], context: "#{context}[:destination_options]") unless input[:destination_options].nil?
      end
    end

    class CreateFlowLogsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateFlowLogsOutput, context: context)
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        ValueStringList.validate!(input[:flow_log_ids], context: "#{context}[:flow_log_ids]") unless input[:flow_log_ids].nil?
        UnsuccessfulItemSet.validate!(input[:unsuccessful], context: "#{context}[:unsuccessful]") unless input[:unsuccessful].nil?
      end
    end

    class CreateFpgaImageInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateFpgaImageInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        StorageLocation.validate!(input[:input_storage_location], context: "#{context}[:input_storage_location]") unless input[:input_storage_location].nil?
        StorageLocation.validate!(input[:logs_storage_location], context: "#{context}[:logs_storage_location]") unless input[:logs_storage_location].nil?
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreateFpgaImageOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateFpgaImageOutput, context: context)
        Hearth::Validator.validate!(input[:fpga_image_id], ::String, context: "#{context}[:fpga_image_id]")
        Hearth::Validator.validate!(input[:fpga_image_global_id], ::String, context: "#{context}[:fpga_image_global_id]")
      end
    end

    class CreateImageInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateImageInput, context: context)
        BlockDeviceMappingRequestList.validate!(input[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless input[:block_device_mappings].nil?
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        Hearth::Validator.validate!(input[:no_reboot], ::TrueClass, ::FalseClass, context: "#{context}[:no_reboot]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreateImageOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateImageOutput, context: context)
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
      end
    end

    class CreateInstanceEventWindowInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateInstanceEventWindowInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        InstanceEventWindowTimeRangeRequestSet.validate!(input[:time_ranges], context: "#{context}[:time_ranges]") unless input[:time_ranges].nil?
        Hearth::Validator.validate!(input[:cron_expression], ::String, context: "#{context}[:cron_expression]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreateInstanceEventWindowOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateInstanceEventWindowOutput, context: context)
        InstanceEventWindow.validate!(input[:instance_event_window], context: "#{context}[:instance_event_window]") unless input[:instance_event_window].nil?
      end
    end

    class CreateInstanceExportTaskInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateInstanceExportTaskInput, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        ExportToS3TaskSpecification.validate!(input[:export_to_s3_task], context: "#{context}[:export_to_s3_task]") unless input[:export_to_s3_task].nil?
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:target_environment], ::String, context: "#{context}[:target_environment]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreateInstanceExportTaskOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateInstanceExportTaskOutput, context: context)
        ExportTask.validate!(input[:export_task], context: "#{context}[:export_task]") unless input[:export_task].nil?
      end
    end

    class CreateInternetGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateInternetGatewayInput, context: context)
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateInternetGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateInternetGatewayOutput, context: context)
        InternetGateway.validate!(input[:internet_gateway], context: "#{context}[:internet_gateway]") unless input[:internet_gateway].nil?
      end
    end

    class CreateIpamInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateIpamInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        AddIpamOperatingRegionSet.validate!(input[:operating_regions], context: "#{context}[:operating_regions]") unless input[:operating_regions].nil?
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateIpamOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateIpamOutput, context: context)
        Ipam.validate!(input[:ipam], context: "#{context}[:ipam]") unless input[:ipam].nil?
      end
    end

    class CreateIpamPoolInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateIpamPoolInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipam_scope_id], ::String, context: "#{context}[:ipam_scope_id]")
        Hearth::Validator.validate!(input[:locale], ::String, context: "#{context}[:locale]")
        Hearth::Validator.validate!(input[:source_ipam_pool_id], ::String, context: "#{context}[:source_ipam_pool_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:address_family], ::String, context: "#{context}[:address_family]")
        Hearth::Validator.validate!(input[:auto_import], ::TrueClass, ::FalseClass, context: "#{context}[:auto_import]")
        Hearth::Validator.validate!(input[:publicly_advertisable], ::TrueClass, ::FalseClass, context: "#{context}[:publicly_advertisable]")
        Hearth::Validator.validate!(input[:allocation_min_netmask_length], ::Integer, context: "#{context}[:allocation_min_netmask_length]")
        Hearth::Validator.validate!(input[:allocation_max_netmask_length], ::Integer, context: "#{context}[:allocation_max_netmask_length]")
        Hearth::Validator.validate!(input[:allocation_default_netmask_length], ::Integer, context: "#{context}[:allocation_default_netmask_length]")
        RequestIpamResourceTagList.validate!(input[:allocation_resource_tags], context: "#{context}[:allocation_resource_tags]") unless input[:allocation_resource_tags].nil?
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:aws_service], ::String, context: "#{context}[:aws_service]")
      end
    end

    class CreateIpamPoolOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateIpamPoolOutput, context: context)
        IpamPool.validate!(input[:ipam_pool], context: "#{context}[:ipam_pool]") unless input[:ipam_pool].nil?
      end
    end

    class CreateIpamScopeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateIpamScopeInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipam_id], ::String, context: "#{context}[:ipam_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateIpamScopeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateIpamScopeOutput, context: context)
        IpamScope.validate!(input[:ipam_scope], context: "#{context}[:ipam_scope]") unless input[:ipam_scope].nil?
      end
    end

    class CreateKeyPairInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateKeyPairInput, context: context)
        Hearth::Validator.validate!(input[:key_name], ::String, context: "#{context}[:key_name]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:key_type], ::String, context: "#{context}[:key_type]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:key_format], ::String, context: "#{context}[:key_format]")
      end
    end

    class CreateKeyPairOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateKeyPairOutput, context: context)
        Hearth::Validator.validate!(input[:key_fingerprint], ::String, context: "#{context}[:key_fingerprint]")
        Hearth::Validator.validate!(input[:key_material], ::String, context: "#{context}[:key_material]")
        Hearth::Validator.validate!(input[:key_name], ::String, context: "#{context}[:key_name]")
        Hearth::Validator.validate!(input[:key_pair_id], ::String, context: "#{context}[:key_pair_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class CreateLaunchTemplateInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateLaunchTemplateInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:launch_template_name], ::String, context: "#{context}[:launch_template_name]")
        Hearth::Validator.validate!(input[:version_description], ::String, context: "#{context}[:version_description]")
        RequestLaunchTemplateData.validate!(input[:launch_template_data], context: "#{context}[:launch_template_data]") unless input[:launch_template_data].nil?
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreateLaunchTemplateOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateLaunchTemplateOutput, context: context)
        LaunchTemplate.validate!(input[:launch_template], context: "#{context}[:launch_template]") unless input[:launch_template].nil?
        ValidationWarning.validate!(input[:warning], context: "#{context}[:warning]") unless input[:warning].nil?
      end
    end

    class CreateLaunchTemplateVersionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateLaunchTemplateVersionInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:launch_template_id], ::String, context: "#{context}[:launch_template_id]")
        Hearth::Validator.validate!(input[:launch_template_name], ::String, context: "#{context}[:launch_template_name]")
        Hearth::Validator.validate!(input[:source_version], ::String, context: "#{context}[:source_version]")
        Hearth::Validator.validate!(input[:version_description], ::String, context: "#{context}[:version_description]")
        RequestLaunchTemplateData.validate!(input[:launch_template_data], context: "#{context}[:launch_template_data]") unless input[:launch_template_data].nil?
      end
    end

    class CreateLaunchTemplateVersionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateLaunchTemplateVersionOutput, context: context)
        LaunchTemplateVersion.validate!(input[:launch_template_version], context: "#{context}[:launch_template_version]") unless input[:launch_template_version].nil?
        ValidationWarning.validate!(input[:warning], context: "#{context}[:warning]") unless input[:warning].nil?
      end
    end

    class CreateLocalGatewayRouteInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateLocalGatewayRouteInput, context: context)
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:local_gateway_route_table_id], ::String, context: "#{context}[:local_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:local_gateway_virtual_interface_group_id], ::String, context: "#{context}[:local_gateway_virtual_interface_group_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateLocalGatewayRouteOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateLocalGatewayRouteOutput, context: context)
        LocalGatewayRoute.validate!(input[:route], context: "#{context}[:route]") unless input[:route].nil?
      end
    end

    class CreateLocalGatewayRouteTableVpcAssociationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateLocalGatewayRouteTableVpcAssociationInput, context: context)
        Hearth::Validator.validate!(input[:local_gateway_route_table_id], ::String, context: "#{context}[:local_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateLocalGatewayRouteTableVpcAssociationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateLocalGatewayRouteTableVpcAssociationOutput, context: context)
        LocalGatewayRouteTableVpcAssociation.validate!(input[:local_gateway_route_table_vpc_association], context: "#{context}[:local_gateway_route_table_vpc_association]") unless input[:local_gateway_route_table_vpc_association].nil?
      end
    end

    class CreateManagedPrefixListInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateManagedPrefixListInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:prefix_list_name], ::String, context: "#{context}[:prefix_list_name]")
        AddPrefixListEntries.validate!(input[:entries], context: "#{context}[:entries]") unless input[:entries].nil?
        Hearth::Validator.validate!(input[:max_entries], ::Integer, context: "#{context}[:max_entries]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:address_family], ::String, context: "#{context}[:address_family]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateManagedPrefixListOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateManagedPrefixListOutput, context: context)
        ManagedPrefixList.validate!(input[:prefix_list], context: "#{context}[:prefix_list]") unless input[:prefix_list].nil?
      end
    end

    class CreateNatGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateNatGatewayInput, context: context)
        Hearth::Validator.validate!(input[:allocation_id], ::String, context: "#{context}[:allocation_id]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:connectivity_type], ::String, context: "#{context}[:connectivity_type]")
      end
    end

    class CreateNatGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateNatGatewayOutput, context: context)
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        NatGateway.validate!(input[:nat_gateway], context: "#{context}[:nat_gateway]") unless input[:nat_gateway].nil?
      end
    end

    class CreateNetworkAclEntryInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateNetworkAclEntryInput, context: context)
        Hearth::Validator.validate!(input[:cidr_block], ::String, context: "#{context}[:cidr_block]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:egress], ::TrueClass, ::FalseClass, context: "#{context}[:egress]")
        IcmpTypeCode.validate!(input[:icmp_type_code], context: "#{context}[:icmp_type_code]") unless input[:icmp_type_code].nil?
        Hearth::Validator.validate!(input[:ipv6_cidr_block], ::String, context: "#{context}[:ipv6_cidr_block]")
        Hearth::Validator.validate!(input[:network_acl_id], ::String, context: "#{context}[:network_acl_id]")
        PortRange.validate!(input[:port_range], context: "#{context}[:port_range]") unless input[:port_range].nil?
        Hearth::Validator.validate!(input[:protocol], ::String, context: "#{context}[:protocol]")
        Hearth::Validator.validate!(input[:rule_action], ::String, context: "#{context}[:rule_action]")
        Hearth::Validator.validate!(input[:rule_number], ::Integer, context: "#{context}[:rule_number]")
      end
    end

    class CreateNetworkAclEntryOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateNetworkAclEntryOutput, context: context)
      end
    end

    class CreateNetworkAclInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateNetworkAclInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreateNetworkAclOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateNetworkAclOutput, context: context)
        NetworkAcl.validate!(input[:network_acl], context: "#{context}[:network_acl]") unless input[:network_acl].nil?
      end
    end

    class CreateNetworkInsightsAccessScopeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateNetworkInsightsAccessScopeInput, context: context)
        AccessScopePathListRequest.validate!(input[:match_paths], context: "#{context}[:match_paths]") unless input[:match_paths].nil?
        AccessScopePathListRequest.validate!(input[:exclude_paths], context: "#{context}[:exclude_paths]") unless input[:exclude_paths].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateNetworkInsightsAccessScopeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateNetworkInsightsAccessScopeOutput, context: context)
        NetworkInsightsAccessScope.validate!(input[:network_insights_access_scope], context: "#{context}[:network_insights_access_scope]") unless input[:network_insights_access_scope].nil?
        NetworkInsightsAccessScopeContent.validate!(input[:network_insights_access_scope_content], context: "#{context}[:network_insights_access_scope_content]") unless input[:network_insights_access_scope_content].nil?
      end
    end

    class CreateNetworkInsightsPathInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateNetworkInsightsPathInput, context: context)
        Hearth::Validator.validate!(input[:source_ip], ::String, context: "#{context}[:source_ip]")
        Hearth::Validator.validate!(input[:destination_ip], ::String, context: "#{context}[:destination_ip]")
        Hearth::Validator.validate!(input[:source], ::String, context: "#{context}[:source]")
        Hearth::Validator.validate!(input[:destination], ::String, context: "#{context}[:destination]")
        Hearth::Validator.validate!(input[:protocol], ::String, context: "#{context}[:protocol]")
        Hearth::Validator.validate!(input[:destination_port], ::Integer, context: "#{context}[:destination_port]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateNetworkInsightsPathOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateNetworkInsightsPathOutput, context: context)
        NetworkInsightsPath.validate!(input[:network_insights_path], context: "#{context}[:network_insights_path]") unless input[:network_insights_path].nil?
      end
    end

    class CreateNetworkInterfaceInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateNetworkInterfaceInput, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        SecurityGroupIdStringList.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        Hearth::Validator.validate!(input[:ipv6_address_count], ::Integer, context: "#{context}[:ipv6_address_count]")
        InstanceIpv6AddressList.validate!(input[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless input[:ipv6_addresses].nil?
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
        PrivateIpAddressSpecificationList.validate!(input[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless input[:private_ip_addresses].nil?
        Hearth::Validator.validate!(input[:secondary_private_ip_address_count], ::Integer, context: "#{context}[:secondary_private_ip_address_count]")
        Ipv4PrefixList.validate!(input[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless input[:ipv4_prefixes].nil?
        Hearth::Validator.validate!(input[:ipv4_prefix_count], ::Integer, context: "#{context}[:ipv4_prefix_count]")
        Ipv6PrefixList.validate!(input[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless input[:ipv6_prefixes].nil?
        Hearth::Validator.validate!(input[:ipv6_prefix_count], ::Integer, context: "#{context}[:ipv6_prefix_count]")
        Hearth::Validator.validate!(input[:interface_type], ::String, context: "#{context}[:interface_type]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateNetworkInterfaceOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateNetworkInterfaceOutput, context: context)
        NetworkInterface.validate!(input[:network_interface], context: "#{context}[:network_interface]") unless input[:network_interface].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateNetworkInterfacePermissionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateNetworkInterfacePermissionInput, context: context)
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:aws_account_id], ::String, context: "#{context}[:aws_account_id]")
        Hearth::Validator.validate!(input[:aws_service], ::String, context: "#{context}[:aws_service]")
        Hearth::Validator.validate!(input[:permission], ::String, context: "#{context}[:permission]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateNetworkInterfacePermissionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateNetworkInterfacePermissionOutput, context: context)
        NetworkInterfacePermission.validate!(input[:interface_permission], context: "#{context}[:interface_permission]") unless input[:interface_permission].nil?
      end
    end

    class CreatePlacementGroupInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreatePlacementGroupInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        Hearth::Validator.validate!(input[:strategy], ::String, context: "#{context}[:strategy]")
        Hearth::Validator.validate!(input[:partition_count], ::Integer, context: "#{context}[:partition_count]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreatePlacementGroupOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreatePlacementGroupOutput, context: context)
        PlacementGroup.validate!(input[:placement_group], context: "#{context}[:placement_group]") unless input[:placement_group].nil?
      end
    end

    class CreatePublicIpv4PoolInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreatePublicIpv4PoolInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreatePublicIpv4PoolOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreatePublicIpv4PoolOutput, context: context)
        Hearth::Validator.validate!(input[:pool_id], ::String, context: "#{context}[:pool_id]")
      end
    end

    class CreateReplaceRootVolumeTaskInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateReplaceRootVolumeTaskInput, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreateReplaceRootVolumeTaskOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateReplaceRootVolumeTaskOutput, context: context)
        ReplaceRootVolumeTask.validate!(input[:replace_root_volume_task], context: "#{context}[:replace_root_volume_task]") unless input[:replace_root_volume_task].nil?
      end
    end

    class CreateReservedInstancesListingInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateReservedInstancesListingInput, context: context)
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:instance_count], ::Integer, context: "#{context}[:instance_count]")
        PriceScheduleSpecificationList.validate!(input[:price_schedules], context: "#{context}[:price_schedules]") unless input[:price_schedules].nil?
        Hearth::Validator.validate!(input[:reserved_instances_id], ::String, context: "#{context}[:reserved_instances_id]")
      end
    end

    class CreateReservedInstancesListingOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateReservedInstancesListingOutput, context: context)
        ReservedInstancesListingList.validate!(input[:reserved_instances_listings], context: "#{context}[:reserved_instances_listings]") unless input[:reserved_instances_listings].nil?
      end
    end

    class CreateRestoreImageTaskInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateRestoreImageTaskInput, context: context)
        Hearth::Validator.validate!(input[:bucket], ::String, context: "#{context}[:bucket]")
        Hearth::Validator.validate!(input[:object_key], ::String, context: "#{context}[:object_key]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateRestoreImageTaskOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateRestoreImageTaskOutput, context: context)
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
      end
    end

    class CreateRouteInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateRouteInput, context: context)
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:destination_ipv6_cidr_block], ::String, context: "#{context}[:destination_ipv6_cidr_block]")
        Hearth::Validator.validate!(input[:destination_prefix_list_id], ::String, context: "#{context}[:destination_prefix_list_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:vpc_endpoint_id], ::String, context: "#{context}[:vpc_endpoint_id]")
        Hearth::Validator.validate!(input[:egress_only_internet_gateway_id], ::String, context: "#{context}[:egress_only_internet_gateway_id]")
        Hearth::Validator.validate!(input[:gateway_id], ::String, context: "#{context}[:gateway_id]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:nat_gateway_id], ::String, context: "#{context}[:nat_gateway_id]")
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:local_gateway_id], ::String, context: "#{context}[:local_gateway_id]")
        Hearth::Validator.validate!(input[:carrier_gateway_id], ::String, context: "#{context}[:carrier_gateway_id]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:route_table_id], ::String, context: "#{context}[:route_table_id]")
        Hearth::Validator.validate!(input[:vpc_peering_connection_id], ::String, context: "#{context}[:vpc_peering_connection_id]")
        Hearth::Validator.validate!(input[:core_network_arn], ::String, context: "#{context}[:core_network_arn]")
      end
    end

    class CreateRouteOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateRouteOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class CreateRouteTableInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateRouteTableInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreateRouteTableOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateRouteTableOutput, context: context)
        RouteTable.validate!(input[:route_table], context: "#{context}[:route_table]") unless input[:route_table].nil?
      end
    end

    class CreateSecurityGroupInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateSecurityGroupInput, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateSecurityGroupOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateSecurityGroupOutput, context: context)
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class CreateSnapshotInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateSnapshotInput, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateSnapshotOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateSnapshotOutput, context: context)
        Hearth::Validator.validate!(input[:data_encryption_key_id], ::String, context: "#{context}[:data_encryption_key_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:progress], ::String, context: "#{context}[:progress]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:start_time], ::Time, context: "#{context}[:start_time]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:state_message], ::String, context: "#{context}[:state_message]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:volume_size], ::Integer, context: "#{context}[:volume_size]")
        Hearth::Validator.validate!(input[:owner_alias], ::String, context: "#{context}[:owner_alias]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:storage_tier], ::String, context: "#{context}[:storage_tier]")
        Hearth::Validator.validate!(input[:restore_expiry_time], ::Time, context: "#{context}[:restore_expiry_time]")
      end
    end

    class CreateSnapshotsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateSnapshotsInput, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        InstanceSpecification.validate!(input[:instance_specification], context: "#{context}[:instance_specification]") unless input[:instance_specification].nil?
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:copy_tags_from_source], ::String, context: "#{context}[:copy_tags_from_source]")
      end
    end

    class CreateSnapshotsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateSnapshotsOutput, context: context)
        SnapshotSet.validate!(input[:snapshots], context: "#{context}[:snapshots]") unless input[:snapshots].nil?
      end
    end

    class CreateSpotDatafeedSubscriptionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateSpotDatafeedSubscriptionInput, context: context)
        Hearth::Validator.validate!(input[:bucket], ::String, context: "#{context}[:bucket]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:prefix], ::String, context: "#{context}[:prefix]")
      end
    end

    class CreateSpotDatafeedSubscriptionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateSpotDatafeedSubscriptionOutput, context: context)
        SpotDatafeedSubscription.validate!(input[:spot_datafeed_subscription], context: "#{context}[:spot_datafeed_subscription]") unless input[:spot_datafeed_subscription].nil?
      end
    end

    class CreateStoreImageTaskInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateStoreImageTaskInput, context: context)
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:bucket], ::String, context: "#{context}[:bucket]")
        S3ObjectTagList.validate!(input[:s3_object_tags], context: "#{context}[:s3_object_tags]") unless input[:s3_object_tags].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateStoreImageTaskOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateStoreImageTaskOutput, context: context)
        Hearth::Validator.validate!(input[:object_key], ::String, context: "#{context}[:object_key]")
      end
    end

    class CreateSubnetCidrReservationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateSubnetCidrReservationInput, context: context)
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:reservation_type], ::String, context: "#{context}[:reservation_type]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreateSubnetCidrReservationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateSubnetCidrReservationOutput, context: context)
        SubnetCidrReservation.validate!(input[:subnet_cidr_reservation], context: "#{context}[:subnet_cidr_reservation]") unless input[:subnet_cidr_reservation].nil?
      end
    end

    class CreateSubnetInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateSubnetInput, context: context)
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:availability_zone_id], ::String, context: "#{context}[:availability_zone_id]")
        Hearth::Validator.validate!(input[:cidr_block], ::String, context: "#{context}[:cidr_block]")
        Hearth::Validator.validate!(input[:ipv6_cidr_block], ::String, context: "#{context}[:ipv6_cidr_block]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipv6_native], ::TrueClass, ::FalseClass, context: "#{context}[:ipv6_native]")
      end
    end

    class CreateSubnetOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateSubnetOutput, context: context)
        Subnet.validate!(input[:subnet], context: "#{context}[:subnet]") unless input[:subnet].nil?
      end
    end

    class CreateTagsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTagsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        ResourceIdList.validate!(input[:resources], context: "#{context}[:resources]") unless input[:resources].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class CreateTagsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTagsOutput, context: context)
      end
    end

    class CreateTrafficMirrorFilterInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTrafficMirrorFilterInput, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateTrafficMirrorFilterOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTrafficMirrorFilterOutput, context: context)
        TrafficMirrorFilter.validate!(input[:traffic_mirror_filter], context: "#{context}[:traffic_mirror_filter]") unless input[:traffic_mirror_filter].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateTrafficMirrorFilterRuleInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTrafficMirrorFilterRuleInput, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_filter_id], ::String, context: "#{context}[:traffic_mirror_filter_id]")
        Hearth::Validator.validate!(input[:traffic_direction], ::String, context: "#{context}[:traffic_direction]")
        Hearth::Validator.validate!(input[:rule_number], ::Integer, context: "#{context}[:rule_number]")
        Hearth::Validator.validate!(input[:rule_action], ::String, context: "#{context}[:rule_action]")
        TrafficMirrorPortRangeRequest.validate!(input[:destination_port_range], context: "#{context}[:destination_port_range]") unless input[:destination_port_range].nil?
        TrafficMirrorPortRangeRequest.validate!(input[:source_port_range], context: "#{context}[:source_port_range]") unless input[:source_port_range].nil?
        Hearth::Validator.validate!(input[:protocol], ::Integer, context: "#{context}[:protocol]")
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:source_cidr_block], ::String, context: "#{context}[:source_cidr_block]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateTrafficMirrorFilterRuleOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTrafficMirrorFilterRuleOutput, context: context)
        TrafficMirrorFilterRule.validate!(input[:traffic_mirror_filter_rule], context: "#{context}[:traffic_mirror_filter_rule]") unless input[:traffic_mirror_filter_rule].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateTrafficMirrorSessionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTrafficMirrorSessionInput, context: context)
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:traffic_mirror_target_id], ::String, context: "#{context}[:traffic_mirror_target_id]")
        Hearth::Validator.validate!(input[:traffic_mirror_filter_id], ::String, context: "#{context}[:traffic_mirror_filter_id]")
        Hearth::Validator.validate!(input[:packet_length], ::Integer, context: "#{context}[:packet_length]")
        Hearth::Validator.validate!(input[:session_number], ::Integer, context: "#{context}[:session_number]")
        Hearth::Validator.validate!(input[:virtual_network_id], ::Integer, context: "#{context}[:virtual_network_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateTrafficMirrorSessionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTrafficMirrorSessionOutput, context: context)
        TrafficMirrorSession.validate!(input[:traffic_mirror_session], context: "#{context}[:traffic_mirror_session]") unless input[:traffic_mirror_session].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateTrafficMirrorTargetInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTrafficMirrorTargetInput, context: context)
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:network_load_balancer_arn], ::String, context: "#{context}[:network_load_balancer_arn]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:gateway_load_balancer_endpoint_id], ::String, context: "#{context}[:gateway_load_balancer_endpoint_id]")
      end
    end

    class CreateTrafficMirrorTargetOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTrafficMirrorTargetOutput, context: context)
        TrafficMirrorTarget.validate!(input[:traffic_mirror_target], context: "#{context}[:traffic_mirror_target]") unless input[:traffic_mirror_target].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateTransitGatewayConnectInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayConnectInput, context: context)
        Hearth::Validator.validate!(input[:transport_transit_gateway_attachment_id], ::String, context: "#{context}[:transport_transit_gateway_attachment_id]")
        CreateTransitGatewayConnectRequestOptions.validate!(input[:options], context: "#{context}[:options]") unless input[:options].nil?
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateTransitGatewayConnectOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayConnectOutput, context: context)
        TransitGatewayConnect.validate!(input[:transit_gateway_connect], context: "#{context}[:transit_gateway_connect]") unless input[:transit_gateway_connect].nil?
      end
    end

    class CreateTransitGatewayConnectPeerInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayConnectPeerInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:transit_gateway_address], ::String, context: "#{context}[:transit_gateway_address]")
        Hearth::Validator.validate!(input[:peer_address], ::String, context: "#{context}[:peer_address]")
        TransitGatewayConnectRequestBgpOptions.validate!(input[:bgp_options], context: "#{context}[:bgp_options]") unless input[:bgp_options].nil?
        InsideCidrBlocksStringList.validate!(input[:inside_cidr_blocks], context: "#{context}[:inside_cidr_blocks]") unless input[:inside_cidr_blocks].nil?
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateTransitGatewayConnectPeerOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayConnectPeerOutput, context: context)
        TransitGatewayConnectPeer.validate!(input[:transit_gateway_connect_peer], context: "#{context}[:transit_gateway_connect_peer]") unless input[:transit_gateway_connect_peer].nil?
      end
    end

    class CreateTransitGatewayConnectRequestOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayConnectRequestOptions, context: context)
        Hearth::Validator.validate!(input[:protocol], ::String, context: "#{context}[:protocol]")
      end
    end

    class CreateTransitGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayInput, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        TransitGatewayRequestOptions.validate!(input[:options], context: "#{context}[:options]") unless input[:options].nil?
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateTransitGatewayMulticastDomainInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayMulticastDomainInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        CreateTransitGatewayMulticastDomainRequestOptions.validate!(input[:options], context: "#{context}[:options]") unless input[:options].nil?
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateTransitGatewayMulticastDomainOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayMulticastDomainOutput, context: context)
        TransitGatewayMulticastDomain.validate!(input[:transit_gateway_multicast_domain], context: "#{context}[:transit_gateway_multicast_domain]") unless input[:transit_gateway_multicast_domain].nil?
      end
    end

    class CreateTransitGatewayMulticastDomainRequestOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayMulticastDomainRequestOptions, context: context)
        Hearth::Validator.validate!(input[:igmpv2_support], ::String, context: "#{context}[:igmpv2_support]")
        Hearth::Validator.validate!(input[:static_sources_support], ::String, context: "#{context}[:static_sources_support]")
        Hearth::Validator.validate!(input[:auto_accept_shared_associations], ::String, context: "#{context}[:auto_accept_shared_associations]")
      end
    end

    class CreateTransitGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayOutput, context: context)
        TransitGateway.validate!(input[:transit_gateway], context: "#{context}[:transit_gateway]") unless input[:transit_gateway].nil?
      end
    end

    class CreateTransitGatewayPeeringAttachmentInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayPeeringAttachmentInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:peer_transit_gateway_id], ::String, context: "#{context}[:peer_transit_gateway_id]")
        Hearth::Validator.validate!(input[:peer_account_id], ::String, context: "#{context}[:peer_account_id]")
        Hearth::Validator.validate!(input[:peer_region], ::String, context: "#{context}[:peer_region]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateTransitGatewayPeeringAttachmentOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayPeeringAttachmentOutput, context: context)
        TransitGatewayPeeringAttachment.validate!(input[:transit_gateway_peering_attachment], context: "#{context}[:transit_gateway_peering_attachment]") unless input[:transit_gateway_peering_attachment].nil?
      end
    end

    class CreateTransitGatewayPrefixListReferenceInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayPrefixListReferenceInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:blackhole], ::TrueClass, ::FalseClass, context: "#{context}[:blackhole]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateTransitGatewayPrefixListReferenceOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayPrefixListReferenceOutput, context: context)
        TransitGatewayPrefixListReference.validate!(input[:transit_gateway_prefix_list_reference], context: "#{context}[:transit_gateway_prefix_list_reference]") unless input[:transit_gateway_prefix_list_reference].nil?
      end
    end

    class CreateTransitGatewayRouteInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayRouteInput, context: context)
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:blackhole], ::TrueClass, ::FalseClass, context: "#{context}[:blackhole]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateTransitGatewayRouteOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayRouteOutput, context: context)
        TransitGatewayRoute.validate!(input[:route], context: "#{context}[:route]") unless input[:route].nil?
      end
    end

    class CreateTransitGatewayRouteTableInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayRouteTableInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateTransitGatewayRouteTableOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayRouteTableOutput, context: context)
        TransitGatewayRouteTable.validate!(input[:transit_gateway_route_table], context: "#{context}[:transit_gateway_route_table]") unless input[:transit_gateway_route_table].nil?
      end
    end

    class CreateTransitGatewayVpcAttachmentInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayVpcAttachmentInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        TransitGatewaySubnetIdList.validate!(input[:subnet_ids], context: "#{context}[:subnet_ids]") unless input[:subnet_ids].nil?
        CreateTransitGatewayVpcAttachmentRequestOptions.validate!(input[:options], context: "#{context}[:options]") unless input[:options].nil?
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateTransitGatewayVpcAttachmentOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayVpcAttachmentOutput, context: context)
        TransitGatewayVpcAttachment.validate!(input[:transit_gateway_vpc_attachment], context: "#{context}[:transit_gateway_vpc_attachment]") unless input[:transit_gateway_vpc_attachment].nil?
      end
    end

    class CreateTransitGatewayVpcAttachmentRequestOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateTransitGatewayVpcAttachmentRequestOptions, context: context)
        Hearth::Validator.validate!(input[:dns_support], ::String, context: "#{context}[:dns_support]")
        Hearth::Validator.validate!(input[:ipv6_support], ::String, context: "#{context}[:ipv6_support]")
        Hearth::Validator.validate!(input[:appliance_mode_support], ::String, context: "#{context}[:appliance_mode_support]")
      end
    end

    class CreateVolumeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVolumeInput, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:iops], ::Integer, context: "#{context}[:iops]")
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        Hearth::Validator.validate!(input[:size], ::Integer, context: "#{context}[:size]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:volume_type], ::String, context: "#{context}[:volume_type]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:multi_attach_enabled], ::TrueClass, ::FalseClass, context: "#{context}[:multi_attach_enabled]")
        Hearth::Validator.validate!(input[:throughput], ::Integer, context: "#{context}[:throughput]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateVolumeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVolumeOutput, context: context)
        VolumeAttachmentList.validate!(input[:attachments], context: "#{context}[:attachments]") unless input[:attachments].nil?
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:create_time], ::Time, context: "#{context}[:create_time]")
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        Hearth::Validator.validate!(input[:size], ::Integer, context: "#{context}[:size]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:iops], ::Integer, context: "#{context}[:iops]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:volume_type], ::String, context: "#{context}[:volume_type]")
        Hearth::Validator.validate!(input[:fast_restored], ::TrueClass, ::FalseClass, context: "#{context}[:fast_restored]")
        Hearth::Validator.validate!(input[:multi_attach_enabled], ::TrueClass, ::FalseClass, context: "#{context}[:multi_attach_enabled]")
        Hearth::Validator.validate!(input[:throughput], ::Integer, context: "#{context}[:throughput]")
      end
    end

    class CreateVolumePermission
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVolumePermission, context: context)
        Hearth::Validator.validate!(input[:group], ::String, context: "#{context}[:group]")
        Hearth::Validator.validate!(input[:user_id], ::String, context: "#{context}[:user_id]")
      end
    end

    class CreateVolumePermissionList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          CreateVolumePermission.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class CreateVolumePermissionModifications
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVolumePermissionModifications, context: context)
        CreateVolumePermissionList.validate!(input[:add], context: "#{context}[:add]") unless input[:add].nil?
        CreateVolumePermissionList.validate!(input[:remove], context: "#{context}[:remove]") unless input[:remove].nil?
      end
    end

    class CreateVpcEndpointConnectionNotificationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpcEndpointConnectionNotificationInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:service_id], ::String, context: "#{context}[:service_id]")
        Hearth::Validator.validate!(input[:vpc_endpoint_id], ::String, context: "#{context}[:vpc_endpoint_id]")
        Hearth::Validator.validate!(input[:connection_notification_arn], ::String, context: "#{context}[:connection_notification_arn]")
        ValueStringList.validate!(input[:connection_events], context: "#{context}[:connection_events]") unless input[:connection_events].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateVpcEndpointConnectionNotificationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpcEndpointConnectionNotificationOutput, context: context)
        ConnectionNotification.validate!(input[:connection_notification], context: "#{context}[:connection_notification]") unless input[:connection_notification].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateVpcEndpointInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpcEndpointInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:vpc_endpoint_type], ::String, context: "#{context}[:vpc_endpoint_type]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:service_name], ::String, context: "#{context}[:service_name]")
        Hearth::Validator.validate!(input[:policy_document], ::String, context: "#{context}[:policy_document]")
        VpcEndpointRouteTableIdList.validate!(input[:route_table_ids], context: "#{context}[:route_table_ids]") unless input[:route_table_ids].nil?
        VpcEndpointSubnetIdList.validate!(input[:subnet_ids], context: "#{context}[:subnet_ids]") unless input[:subnet_ids].nil?
        VpcEndpointSecurityGroupIdList.validate!(input[:security_group_ids], context: "#{context}[:security_group_ids]") unless input[:security_group_ids].nil?
        Hearth::Validator.validate!(input[:ip_address_type], ::String, context: "#{context}[:ip_address_type]")
        DnsOptionsSpecification.validate!(input[:dns_options], context: "#{context}[:dns_options]") unless input[:dns_options].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:private_dns_enabled], ::TrueClass, ::FalseClass, context: "#{context}[:private_dns_enabled]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreateVpcEndpointOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpcEndpointOutput, context: context)
        VpcEndpoint.validate!(input[:vpc_endpoint], context: "#{context}[:vpc_endpoint]") unless input[:vpc_endpoint].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateVpcEndpointServiceConfigurationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpcEndpointServiceConfigurationInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:acceptance_required], ::TrueClass, ::FalseClass, context: "#{context}[:acceptance_required]")
        Hearth::Validator.validate!(input[:private_dns_name], ::String, context: "#{context}[:private_dns_name]")
        ValueStringList.validate!(input[:network_load_balancer_arns], context: "#{context}[:network_load_balancer_arns]") unless input[:network_load_balancer_arns].nil?
        ValueStringList.validate!(input[:gateway_load_balancer_arns], context: "#{context}[:gateway_load_balancer_arns]") unless input[:gateway_load_balancer_arns].nil?
        ValueStringList.validate!(input[:supported_ip_address_types], context: "#{context}[:supported_ip_address_types]") unless input[:supported_ip_address_types].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreateVpcEndpointServiceConfigurationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpcEndpointServiceConfigurationOutput, context: context)
        ServiceConfiguration.validate!(input[:service_configuration], context: "#{context}[:service_configuration]") unless input[:service_configuration].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class CreateVpcInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpcInput, context: context)
        Hearth::Validator.validate!(input[:cidr_block], ::String, context: "#{context}[:cidr_block]")
        Hearth::Validator.validate!(input[:amazon_provided_ipv6_cidr_block], ::TrueClass, ::FalseClass, context: "#{context}[:amazon_provided_ipv6_cidr_block]")
        Hearth::Validator.validate!(input[:ipv6_pool], ::String, context: "#{context}[:ipv6_pool]")
        Hearth::Validator.validate!(input[:ipv6_cidr_block], ::String, context: "#{context}[:ipv6_cidr_block]")
        Hearth::Validator.validate!(input[:ipv4_ipam_pool_id], ::String, context: "#{context}[:ipv4_ipam_pool_id]")
        Hearth::Validator.validate!(input[:ipv4_netmask_length], ::Integer, context: "#{context}[:ipv4_netmask_length]")
        Hearth::Validator.validate!(input[:ipv6_ipam_pool_id], ::String, context: "#{context}[:ipv6_ipam_pool_id]")
        Hearth::Validator.validate!(input[:ipv6_netmask_length], ::Integer, context: "#{context}[:ipv6_netmask_length]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_tenancy], ::String, context: "#{context}[:instance_tenancy]")
        Hearth::Validator.validate!(input[:ipv6_cidr_block_network_border_group], ::String, context: "#{context}[:ipv6_cidr_block_network_border_group]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreateVpcOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpcOutput, context: context)
        Vpc.validate!(input[:vpc], context: "#{context}[:vpc]") unless input[:vpc].nil?
      end
    end

    class CreateVpcPeeringConnectionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpcPeeringConnectionInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:peer_owner_id], ::String, context: "#{context}[:peer_owner_id]")
        Hearth::Validator.validate!(input[:peer_vpc_id], ::String, context: "#{context}[:peer_vpc_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:peer_region], ::String, context: "#{context}[:peer_region]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreateVpcPeeringConnectionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpcPeeringConnectionOutput, context: context)
        VpcPeeringConnection.validate!(input[:vpc_peering_connection], context: "#{context}[:vpc_peering_connection]") unless input[:vpc_peering_connection].nil?
      end
    end

    class CreateVpnConnectionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpnConnectionInput, context: context)
        Hearth::Validator.validate!(input[:customer_gateway_id], ::String, context: "#{context}[:customer_gateway_id]")
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:vpn_gateway_id], ::String, context: "#{context}[:vpn_gateway_id]")
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        VpnConnectionOptionsSpecification.validate!(input[:options], context: "#{context}[:options]") unless input[:options].nil?
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class CreateVpnConnectionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpnConnectionOutput, context: context)
        VpnConnection.validate!(input[:vpn_connection], context: "#{context}[:vpn_connection]") unless input[:vpn_connection].nil?
      end
    end

    class CreateVpnConnectionRouteInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpnConnectionRouteInput, context: context)
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:vpn_connection_id], ::String, context: "#{context}[:vpn_connection_id]")
      end
    end

    class CreateVpnConnectionRouteOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpnConnectionRouteOutput, context: context)
      end
    end

    class CreateVpnGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpnGatewayInput, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:amazon_side_asn], ::Integer, context: "#{context}[:amazon_side_asn]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class CreateVpnGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreateVpnGatewayOutput, context: context)
        VpnGateway.validate!(input[:vpn_gateway], context: "#{context}[:vpn_gateway]") unless input[:vpn_gateway].nil?
      end
    end

    class CreditSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreditSpecification, context: context)
        Hearth::Validator.validate!(input[:cpu_credits], ::String, context: "#{context}[:cpu_credits]")
      end
    end

    class CreditSpecificationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CreditSpecificationRequest, context: context)
        Hearth::Validator.validate!(input[:cpu_credits], ::String, context: "#{context}[:cpu_credits]")
      end
    end

    class CustomerGateway
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::CustomerGateway, context: context)
        Hearth::Validator.validate!(input[:bgp_asn], ::String, context: "#{context}[:bgp_asn]")
        Hearth::Validator.validate!(input[:customer_gateway_id], ::String, context: "#{context}[:customer_gateway_id]")
        Hearth::Validator.validate!(input[:ip_address], ::String, context: "#{context}[:ip_address]")
        Hearth::Validator.validate!(input[:certificate_arn], ::String, context: "#{context}[:certificate_arn]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:device_name], ::String, context: "#{context}[:device_name]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class CustomerGatewayIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class CustomerGatewayList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          CustomerGateway.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DedicatedHostIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class DeleteCarrierGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteCarrierGatewayInput, context: context)
        Hearth::Validator.validate!(input[:carrier_gateway_id], ::String, context: "#{context}[:carrier_gateway_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteCarrierGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteCarrierGatewayOutput, context: context)
        CarrierGateway.validate!(input[:carrier_gateway], context: "#{context}[:carrier_gateway]") unless input[:carrier_gateway].nil?
      end
    end

    class DeleteClientVpnEndpointInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteClientVpnEndpointInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteClientVpnEndpointOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteClientVpnEndpointOutput, context: context)
        ClientVpnEndpointStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
      end
    end

    class DeleteClientVpnRouteInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteClientVpnRouteInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:target_vpc_subnet_id], ::String, context: "#{context}[:target_vpc_subnet_id]")
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteClientVpnRouteOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteClientVpnRouteOutput, context: context)
        ClientVpnRouteStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
      end
    end

    class DeleteCustomerGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteCustomerGatewayInput, context: context)
        Hearth::Validator.validate!(input[:customer_gateway_id], ::String, context: "#{context}[:customer_gateway_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteCustomerGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteCustomerGatewayOutput, context: context)
      end
    end

    class DeleteDhcpOptionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteDhcpOptionsInput, context: context)
        Hearth::Validator.validate!(input[:dhcp_options_id], ::String, context: "#{context}[:dhcp_options_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteDhcpOptionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteDhcpOptionsOutput, context: context)
      end
    end

    class DeleteEgressOnlyInternetGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteEgressOnlyInternetGatewayInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:egress_only_internet_gateway_id], ::String, context: "#{context}[:egress_only_internet_gateway_id]")
      end
    end

    class DeleteEgressOnlyInternetGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteEgressOnlyInternetGatewayOutput, context: context)
        Hearth::Validator.validate!(input[:return_code], ::TrueClass, ::FalseClass, context: "#{context}[:return_code]")
      end
    end

    class DeleteFleetError
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteFleetError, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class DeleteFleetErrorItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteFleetErrorItem, context: context)
        DeleteFleetError.validate!(input[:error], context: "#{context}[:error]") unless input[:error].nil?
        Hearth::Validator.validate!(input[:fleet_id], ::String, context: "#{context}[:fleet_id]")
      end
    end

    class DeleteFleetErrorSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DeleteFleetErrorItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DeleteFleetSuccessItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteFleetSuccessItem, context: context)
        Hearth::Validator.validate!(input[:current_fleet_state], ::String, context: "#{context}[:current_fleet_state]")
        Hearth::Validator.validate!(input[:previous_fleet_state], ::String, context: "#{context}[:previous_fleet_state]")
        Hearth::Validator.validate!(input[:fleet_id], ::String, context: "#{context}[:fleet_id]")
      end
    end

    class DeleteFleetSuccessSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DeleteFleetSuccessItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DeleteFleetsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteFleetsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FleetIdSet.validate!(input[:fleet_ids], context: "#{context}[:fleet_ids]") unless input[:fleet_ids].nil?
        Hearth::Validator.validate!(input[:terminate_instances], ::TrueClass, ::FalseClass, context: "#{context}[:terminate_instances]")
      end
    end

    class DeleteFleetsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteFleetsOutput, context: context)
        DeleteFleetSuccessSet.validate!(input[:successful_fleet_deletions], context: "#{context}[:successful_fleet_deletions]") unless input[:successful_fleet_deletions].nil?
        DeleteFleetErrorSet.validate!(input[:unsuccessful_fleet_deletions], context: "#{context}[:unsuccessful_fleet_deletions]") unless input[:unsuccessful_fleet_deletions].nil?
      end
    end

    class DeleteFlowLogsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteFlowLogsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FlowLogIdList.validate!(input[:flow_log_ids], context: "#{context}[:flow_log_ids]") unless input[:flow_log_ids].nil?
      end
    end

    class DeleteFlowLogsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteFlowLogsOutput, context: context)
        UnsuccessfulItemSet.validate!(input[:unsuccessful], context: "#{context}[:unsuccessful]") unless input[:unsuccessful].nil?
      end
    end

    class DeleteFpgaImageInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteFpgaImageInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:fpga_image_id], ::String, context: "#{context}[:fpga_image_id]")
      end
    end

    class DeleteFpgaImageOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteFpgaImageOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class DeleteInstanceEventWindowInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteInstanceEventWindowInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:force_delete], ::TrueClass, ::FalseClass, context: "#{context}[:force_delete]")
        Hearth::Validator.validate!(input[:instance_event_window_id], ::String, context: "#{context}[:instance_event_window_id]")
      end
    end

    class DeleteInstanceEventWindowOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteInstanceEventWindowOutput, context: context)
        InstanceEventWindowStateChange.validate!(input[:instance_event_window_state], context: "#{context}[:instance_event_window_state]") unless input[:instance_event_window_state].nil?
      end
    end

    class DeleteInternetGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteInternetGatewayInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:internet_gateway_id], ::String, context: "#{context}[:internet_gateway_id]")
      end
    end

    class DeleteInternetGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteInternetGatewayOutput, context: context)
      end
    end

    class DeleteIpamInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteIpamInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipam_id], ::String, context: "#{context}[:ipam_id]")
        Hearth::Validator.validate!(input[:cascade], ::TrueClass, ::FalseClass, context: "#{context}[:cascade]")
      end
    end

    class DeleteIpamOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteIpamOutput, context: context)
        Ipam.validate!(input[:ipam], context: "#{context}[:ipam]") unless input[:ipam].nil?
      end
    end

    class DeleteIpamPoolInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteIpamPoolInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipam_pool_id], ::String, context: "#{context}[:ipam_pool_id]")
      end
    end

    class DeleteIpamPoolOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteIpamPoolOutput, context: context)
        IpamPool.validate!(input[:ipam_pool], context: "#{context}[:ipam_pool]") unless input[:ipam_pool].nil?
      end
    end

    class DeleteIpamScopeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteIpamScopeInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipam_scope_id], ::String, context: "#{context}[:ipam_scope_id]")
      end
    end

    class DeleteIpamScopeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteIpamScopeOutput, context: context)
        IpamScope.validate!(input[:ipam_scope], context: "#{context}[:ipam_scope]") unless input[:ipam_scope].nil?
      end
    end

    class DeleteKeyPairInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteKeyPairInput, context: context)
        Hearth::Validator.validate!(input[:key_name], ::String, context: "#{context}[:key_name]")
        Hearth::Validator.validate!(input[:key_pair_id], ::String, context: "#{context}[:key_pair_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteKeyPairOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteKeyPairOutput, context: context)
      end
    end

    class DeleteLaunchTemplateInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteLaunchTemplateInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:launch_template_id], ::String, context: "#{context}[:launch_template_id]")
        Hearth::Validator.validate!(input[:launch_template_name], ::String, context: "#{context}[:launch_template_name]")
      end
    end

    class DeleteLaunchTemplateOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteLaunchTemplateOutput, context: context)
        LaunchTemplate.validate!(input[:launch_template], context: "#{context}[:launch_template]") unless input[:launch_template].nil?
      end
    end

    class DeleteLaunchTemplateVersionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteLaunchTemplateVersionsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:launch_template_id], ::String, context: "#{context}[:launch_template_id]")
        Hearth::Validator.validate!(input[:launch_template_name], ::String, context: "#{context}[:launch_template_name]")
        VersionStringList.validate!(input[:versions], context: "#{context}[:versions]") unless input[:versions].nil?
      end
    end

    class DeleteLaunchTemplateVersionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteLaunchTemplateVersionsOutput, context: context)
        DeleteLaunchTemplateVersionsResponseSuccessSet.validate!(input[:successfully_deleted_launch_template_versions], context: "#{context}[:successfully_deleted_launch_template_versions]") unless input[:successfully_deleted_launch_template_versions].nil?
        DeleteLaunchTemplateVersionsResponseErrorSet.validate!(input[:unsuccessfully_deleted_launch_template_versions], context: "#{context}[:unsuccessfully_deleted_launch_template_versions]") unless input[:unsuccessfully_deleted_launch_template_versions].nil?
      end
    end

    class DeleteLaunchTemplateVersionsResponseErrorItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteLaunchTemplateVersionsResponseErrorItem, context: context)
        Hearth::Validator.validate!(input[:launch_template_id], ::String, context: "#{context}[:launch_template_id]")
        Hearth::Validator.validate!(input[:launch_template_name], ::String, context: "#{context}[:launch_template_name]")
        Hearth::Validator.validate!(input[:version_number], ::Integer, context: "#{context}[:version_number]")
        ResponseError.validate!(input[:response_error], context: "#{context}[:response_error]") unless input[:response_error].nil?
      end
    end

    class DeleteLaunchTemplateVersionsResponseErrorSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DeleteLaunchTemplateVersionsResponseErrorItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DeleteLaunchTemplateVersionsResponseSuccessItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteLaunchTemplateVersionsResponseSuccessItem, context: context)
        Hearth::Validator.validate!(input[:launch_template_id], ::String, context: "#{context}[:launch_template_id]")
        Hearth::Validator.validate!(input[:launch_template_name], ::String, context: "#{context}[:launch_template_name]")
        Hearth::Validator.validate!(input[:version_number], ::Integer, context: "#{context}[:version_number]")
      end
    end

    class DeleteLaunchTemplateVersionsResponseSuccessSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DeleteLaunchTemplateVersionsResponseSuccessItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DeleteLocalGatewayRouteInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteLocalGatewayRouteInput, context: context)
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:local_gateway_route_table_id], ::String, context: "#{context}[:local_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteLocalGatewayRouteOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteLocalGatewayRouteOutput, context: context)
        LocalGatewayRoute.validate!(input[:route], context: "#{context}[:route]") unless input[:route].nil?
      end
    end

    class DeleteLocalGatewayRouteTableVpcAssociationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteLocalGatewayRouteTableVpcAssociationInput, context: context)
        Hearth::Validator.validate!(input[:local_gateway_route_table_vpc_association_id], ::String, context: "#{context}[:local_gateway_route_table_vpc_association_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteLocalGatewayRouteTableVpcAssociationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteLocalGatewayRouteTableVpcAssociationOutput, context: context)
        LocalGatewayRouteTableVpcAssociation.validate!(input[:local_gateway_route_table_vpc_association], context: "#{context}[:local_gateway_route_table_vpc_association]") unless input[:local_gateway_route_table_vpc_association].nil?
      end
    end

    class DeleteManagedPrefixListInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteManagedPrefixListInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
      end
    end

    class DeleteManagedPrefixListOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteManagedPrefixListOutput, context: context)
        ManagedPrefixList.validate!(input[:prefix_list], context: "#{context}[:prefix_list]") unless input[:prefix_list].nil?
      end
    end

    class DeleteNatGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNatGatewayInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:nat_gateway_id], ::String, context: "#{context}[:nat_gateway_id]")
      end
    end

    class DeleteNatGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNatGatewayOutput, context: context)
        Hearth::Validator.validate!(input[:nat_gateway_id], ::String, context: "#{context}[:nat_gateway_id]")
      end
    end

    class DeleteNetworkAclEntryInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkAclEntryInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:egress], ::TrueClass, ::FalseClass, context: "#{context}[:egress]")
        Hearth::Validator.validate!(input[:network_acl_id], ::String, context: "#{context}[:network_acl_id]")
        Hearth::Validator.validate!(input[:rule_number], ::Integer, context: "#{context}[:rule_number]")
      end
    end

    class DeleteNetworkAclEntryOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkAclEntryOutput, context: context)
      end
    end

    class DeleteNetworkAclInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkAclInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:network_acl_id], ::String, context: "#{context}[:network_acl_id]")
      end
    end

    class DeleteNetworkAclOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkAclOutput, context: context)
      end
    end

    class DeleteNetworkInsightsAccessScopeAnalysisInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkInsightsAccessScopeAnalysisInput, context: context)
        Hearth::Validator.validate!(input[:network_insights_access_scope_analysis_id], ::String, context: "#{context}[:network_insights_access_scope_analysis_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteNetworkInsightsAccessScopeAnalysisOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkInsightsAccessScopeAnalysisOutput, context: context)
        Hearth::Validator.validate!(input[:network_insights_access_scope_analysis_id], ::String, context: "#{context}[:network_insights_access_scope_analysis_id]")
      end
    end

    class DeleteNetworkInsightsAccessScopeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkInsightsAccessScopeInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:network_insights_access_scope_id], ::String, context: "#{context}[:network_insights_access_scope_id]")
      end
    end

    class DeleteNetworkInsightsAccessScopeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkInsightsAccessScopeOutput, context: context)
        Hearth::Validator.validate!(input[:network_insights_access_scope_id], ::String, context: "#{context}[:network_insights_access_scope_id]")
      end
    end

    class DeleteNetworkInsightsAnalysisInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkInsightsAnalysisInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:network_insights_analysis_id], ::String, context: "#{context}[:network_insights_analysis_id]")
      end
    end

    class DeleteNetworkInsightsAnalysisOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkInsightsAnalysisOutput, context: context)
        Hearth::Validator.validate!(input[:network_insights_analysis_id], ::String, context: "#{context}[:network_insights_analysis_id]")
      end
    end

    class DeleteNetworkInsightsPathInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkInsightsPathInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:network_insights_path_id], ::String, context: "#{context}[:network_insights_path_id]")
      end
    end

    class DeleteNetworkInsightsPathOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkInsightsPathOutput, context: context)
        Hearth::Validator.validate!(input[:network_insights_path_id], ::String, context: "#{context}[:network_insights_path_id]")
      end
    end

    class DeleteNetworkInterfaceInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkInterfaceInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
      end
    end

    class DeleteNetworkInterfaceOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkInterfaceOutput, context: context)
      end
    end

    class DeleteNetworkInterfacePermissionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkInterfacePermissionInput, context: context)
        Hearth::Validator.validate!(input[:network_interface_permission_id], ::String, context: "#{context}[:network_interface_permission_id]")
        Hearth::Validator.validate!(input[:force], ::TrueClass, ::FalseClass, context: "#{context}[:force]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteNetworkInterfacePermissionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteNetworkInterfacePermissionOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class DeletePlacementGroupInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeletePlacementGroupInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
      end
    end

    class DeletePlacementGroupOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeletePlacementGroupOutput, context: context)
      end
    end

    class DeletePublicIpv4PoolInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeletePublicIpv4PoolInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:pool_id], ::String, context: "#{context}[:pool_id]")
      end
    end

    class DeletePublicIpv4PoolOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeletePublicIpv4PoolOutput, context: context)
        Hearth::Validator.validate!(input[:return_value], ::TrueClass, ::FalseClass, context: "#{context}[:return_value]")
      end
    end

    class DeleteQueuedReservedInstancesError
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteQueuedReservedInstancesError, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class DeleteQueuedReservedInstancesIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class DeleteQueuedReservedInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteQueuedReservedInstancesInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        DeleteQueuedReservedInstancesIdList.validate!(input[:reserved_instances_ids], context: "#{context}[:reserved_instances_ids]") unless input[:reserved_instances_ids].nil?
      end
    end

    class DeleteQueuedReservedInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteQueuedReservedInstancesOutput, context: context)
        SuccessfulQueuedPurchaseDeletionSet.validate!(input[:successful_queued_purchase_deletions], context: "#{context}[:successful_queued_purchase_deletions]") unless input[:successful_queued_purchase_deletions].nil?
        FailedQueuedPurchaseDeletionSet.validate!(input[:failed_queued_purchase_deletions], context: "#{context}[:failed_queued_purchase_deletions]") unless input[:failed_queued_purchase_deletions].nil?
      end
    end

    class DeleteRouteInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteRouteInput, context: context)
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:destination_ipv6_cidr_block], ::String, context: "#{context}[:destination_ipv6_cidr_block]")
        Hearth::Validator.validate!(input[:destination_prefix_list_id], ::String, context: "#{context}[:destination_prefix_list_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:route_table_id], ::String, context: "#{context}[:route_table_id]")
      end
    end

    class DeleteRouteOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteRouteOutput, context: context)
      end
    end

    class DeleteRouteTableInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteRouteTableInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:route_table_id], ::String, context: "#{context}[:route_table_id]")
      end
    end

    class DeleteRouteTableOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteRouteTableOutput, context: context)
      end
    end

    class DeleteSecurityGroupInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteSecurityGroupInput, context: context)
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteSecurityGroupOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteSecurityGroupOutput, context: context)
      end
    end

    class DeleteSnapshotInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteSnapshotInput, context: context)
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteSnapshotOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteSnapshotOutput, context: context)
      end
    end

    class DeleteSpotDatafeedSubscriptionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteSpotDatafeedSubscriptionInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteSpotDatafeedSubscriptionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteSpotDatafeedSubscriptionOutput, context: context)
      end
    end

    class DeleteSubnetCidrReservationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteSubnetCidrReservationInput, context: context)
        Hearth::Validator.validate!(input[:subnet_cidr_reservation_id], ::String, context: "#{context}[:subnet_cidr_reservation_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteSubnetCidrReservationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteSubnetCidrReservationOutput, context: context)
        SubnetCidrReservation.validate!(input[:deleted_subnet_cidr_reservation], context: "#{context}[:deleted_subnet_cidr_reservation]") unless input[:deleted_subnet_cidr_reservation].nil?
      end
    end

    class DeleteSubnetInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteSubnetInput, context: context)
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteSubnetOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteSubnetOutput, context: context)
      end
    end

    class DeleteTagsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTagsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        ResourceIdList.validate!(input[:resources], context: "#{context}[:resources]") unless input[:resources].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class DeleteTagsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTagsOutput, context: context)
      end
    end

    class DeleteTrafficMirrorFilterInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTrafficMirrorFilterInput, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_filter_id], ::String, context: "#{context}[:traffic_mirror_filter_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteTrafficMirrorFilterOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTrafficMirrorFilterOutput, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_filter_id], ::String, context: "#{context}[:traffic_mirror_filter_id]")
      end
    end

    class DeleteTrafficMirrorFilterRuleInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTrafficMirrorFilterRuleInput, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_filter_rule_id], ::String, context: "#{context}[:traffic_mirror_filter_rule_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteTrafficMirrorFilterRuleOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTrafficMirrorFilterRuleOutput, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_filter_rule_id], ::String, context: "#{context}[:traffic_mirror_filter_rule_id]")
      end
    end

    class DeleteTrafficMirrorSessionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTrafficMirrorSessionInput, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_session_id], ::String, context: "#{context}[:traffic_mirror_session_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteTrafficMirrorSessionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTrafficMirrorSessionOutput, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_session_id], ::String, context: "#{context}[:traffic_mirror_session_id]")
      end
    end

    class DeleteTrafficMirrorTargetInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTrafficMirrorTargetInput, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_target_id], ::String, context: "#{context}[:traffic_mirror_target_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteTrafficMirrorTargetOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTrafficMirrorTargetOutput, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_target_id], ::String, context: "#{context}[:traffic_mirror_target_id]")
      end
    end

    class DeleteTransitGatewayConnectInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayConnectInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteTransitGatewayConnectOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayConnectOutput, context: context)
        TransitGatewayConnect.validate!(input[:transit_gateway_connect], context: "#{context}[:transit_gateway_connect]") unless input[:transit_gateway_connect].nil?
      end
    end

    class DeleteTransitGatewayConnectPeerInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayConnectPeerInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_connect_peer_id], ::String, context: "#{context}[:transit_gateway_connect_peer_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteTransitGatewayConnectPeerOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayConnectPeerOutput, context: context)
        TransitGatewayConnectPeer.validate!(input[:transit_gateway_connect_peer], context: "#{context}[:transit_gateway_connect_peer]") unless input[:transit_gateway_connect_peer].nil?
      end
    end

    class DeleteTransitGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteTransitGatewayMulticastDomainInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayMulticastDomainInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteTransitGatewayMulticastDomainOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayMulticastDomainOutput, context: context)
        TransitGatewayMulticastDomain.validate!(input[:transit_gateway_multicast_domain], context: "#{context}[:transit_gateway_multicast_domain]") unless input[:transit_gateway_multicast_domain].nil?
      end
    end

    class DeleteTransitGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayOutput, context: context)
        TransitGateway.validate!(input[:transit_gateway], context: "#{context}[:transit_gateway]") unless input[:transit_gateway].nil?
      end
    end

    class DeleteTransitGatewayPeeringAttachmentInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayPeeringAttachmentInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteTransitGatewayPeeringAttachmentOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayPeeringAttachmentOutput, context: context)
        TransitGatewayPeeringAttachment.validate!(input[:transit_gateway_peering_attachment], context: "#{context}[:transit_gateway_peering_attachment]") unless input[:transit_gateway_peering_attachment].nil?
      end
    end

    class DeleteTransitGatewayPrefixListReferenceInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayPrefixListReferenceInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteTransitGatewayPrefixListReferenceOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayPrefixListReferenceOutput, context: context)
        TransitGatewayPrefixListReference.validate!(input[:transit_gateway_prefix_list_reference], context: "#{context}[:transit_gateway_prefix_list_reference]") unless input[:transit_gateway_prefix_list_reference].nil?
      end
    end

    class DeleteTransitGatewayRouteInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayRouteInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteTransitGatewayRouteOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayRouteOutput, context: context)
        TransitGatewayRoute.validate!(input[:route], context: "#{context}[:route]") unless input[:route].nil?
      end
    end

    class DeleteTransitGatewayRouteTableInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayRouteTableInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteTransitGatewayRouteTableOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayRouteTableOutput, context: context)
        TransitGatewayRouteTable.validate!(input[:transit_gateway_route_table], context: "#{context}[:transit_gateway_route_table]") unless input[:transit_gateway_route_table].nil?
      end
    end

    class DeleteTransitGatewayVpcAttachmentInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayVpcAttachmentInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteTransitGatewayVpcAttachmentOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteTransitGatewayVpcAttachmentOutput, context: context)
        TransitGatewayVpcAttachment.validate!(input[:transit_gateway_vpc_attachment], context: "#{context}[:transit_gateway_vpc_attachment]") unless input[:transit_gateway_vpc_attachment].nil?
      end
    end

    class DeleteVolumeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVolumeInput, context: context)
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteVolumeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVolumeOutput, context: context)
      end
    end

    class DeleteVpcEndpointConnectionNotificationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpcEndpointConnectionNotificationsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        ConnectionNotificationIdsList.validate!(input[:connection_notification_ids], context: "#{context}[:connection_notification_ids]") unless input[:connection_notification_ids].nil?
      end
    end

    class DeleteVpcEndpointConnectionNotificationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpcEndpointConnectionNotificationsOutput, context: context)
        UnsuccessfulItemSet.validate!(input[:unsuccessful], context: "#{context}[:unsuccessful]") unless input[:unsuccessful].nil?
      end
    end

    class DeleteVpcEndpointServiceConfigurationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpcEndpointServiceConfigurationsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        VpcEndpointServiceIdList.validate!(input[:service_ids], context: "#{context}[:service_ids]") unless input[:service_ids].nil?
      end
    end

    class DeleteVpcEndpointServiceConfigurationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpcEndpointServiceConfigurationsOutput, context: context)
        UnsuccessfulItemSet.validate!(input[:unsuccessful], context: "#{context}[:unsuccessful]") unless input[:unsuccessful].nil?
      end
    end

    class DeleteVpcEndpointsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpcEndpointsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        VpcEndpointIdList.validate!(input[:vpc_endpoint_ids], context: "#{context}[:vpc_endpoint_ids]") unless input[:vpc_endpoint_ids].nil?
      end
    end

    class DeleteVpcEndpointsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpcEndpointsOutput, context: context)
        UnsuccessfulItemSet.validate!(input[:unsuccessful], context: "#{context}[:unsuccessful]") unless input[:unsuccessful].nil?
      end
    end

    class DeleteVpcInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpcInput, context: context)
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteVpcOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpcOutput, context: context)
      end
    end

    class DeleteVpcPeeringConnectionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpcPeeringConnectionInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:vpc_peering_connection_id], ::String, context: "#{context}[:vpc_peering_connection_id]")
      end
    end

    class DeleteVpcPeeringConnectionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpcPeeringConnectionOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class DeleteVpnConnectionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpnConnectionInput, context: context)
        Hearth::Validator.validate!(input[:vpn_connection_id], ::String, context: "#{context}[:vpn_connection_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteVpnConnectionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpnConnectionOutput, context: context)
      end
    end

    class DeleteVpnConnectionRouteInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpnConnectionRouteInput, context: context)
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:vpn_connection_id], ::String, context: "#{context}[:vpn_connection_id]")
      end
    end

    class DeleteVpnConnectionRouteOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpnConnectionRouteOutput, context: context)
      end
    end

    class DeleteVpnGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpnGatewayInput, context: context)
        Hearth::Validator.validate!(input[:vpn_gateway_id], ::String, context: "#{context}[:vpn_gateway_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeleteVpnGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeleteVpnGatewayOutput, context: context)
      end
    end

    class DeprovisionByoipCidrInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeprovisionByoipCidrInput, context: context)
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeprovisionByoipCidrOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeprovisionByoipCidrOutput, context: context)
        ByoipCidr.validate!(input[:byoip_cidr], context: "#{context}[:byoip_cidr]") unless input[:byoip_cidr].nil?
      end
    end

    class DeprovisionIpamPoolCidrInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeprovisionIpamPoolCidrInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipam_pool_id], ::String, context: "#{context}[:ipam_pool_id]")
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
      end
    end

    class DeprovisionIpamPoolCidrOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeprovisionIpamPoolCidrOutput, context: context)
        IpamPoolCidr.validate!(input[:ipam_pool_cidr], context: "#{context}[:ipam_pool_cidr]") unless input[:ipam_pool_cidr].nil?
      end
    end

    class DeprovisionPublicIpv4PoolCidrInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeprovisionPublicIpv4PoolCidrInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:pool_id], ::String, context: "#{context}[:pool_id]")
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
      end
    end

    class DeprovisionPublicIpv4PoolCidrOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeprovisionPublicIpv4PoolCidrOutput, context: context)
        Hearth::Validator.validate!(input[:pool_id], ::String, context: "#{context}[:pool_id]")
        DeprovisionedAddressSet.validate!(input[:deprovisioned_addresses], context: "#{context}[:deprovisioned_addresses]") unless input[:deprovisioned_addresses].nil?
      end
    end

    class DeprovisionedAddressSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class DeregisterImageInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeregisterImageInput, context: context)
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeregisterImageOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeregisterImageOutput, context: context)
      end
    end

    class DeregisterInstanceEventNotificationAttributesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeregisterInstanceEventNotificationAttributesInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        DeregisterInstanceTagAttributeRequest.validate!(input[:instance_tag_attribute], context: "#{context}[:instance_tag_attribute]") unless input[:instance_tag_attribute].nil?
      end
    end

    class DeregisterInstanceEventNotificationAttributesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeregisterInstanceEventNotificationAttributesOutput, context: context)
        InstanceTagNotificationAttribute.validate!(input[:instance_tag_attribute], context: "#{context}[:instance_tag_attribute]") unless input[:instance_tag_attribute].nil?
      end
    end

    class DeregisterInstanceTagAttributeRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeregisterInstanceTagAttributeRequest, context: context)
        Hearth::Validator.validate!(input[:include_all_tags_of_instance], ::TrueClass, ::FalseClass, context: "#{context}[:include_all_tags_of_instance]")
        InstanceTagKeySet.validate!(input[:instance_tag_keys], context: "#{context}[:instance_tag_keys]") unless input[:instance_tag_keys].nil?
      end
    end

    class DeregisterTransitGatewayMulticastGroupMembersInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeregisterTransitGatewayMulticastGroupMembersInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        Hearth::Validator.validate!(input[:group_ip_address], ::String, context: "#{context}[:group_ip_address]")
        TransitGatewayNetworkInterfaceIdList.validate!(input[:network_interface_ids], context: "#{context}[:network_interface_ids]") unless input[:network_interface_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeregisterTransitGatewayMulticastGroupMembersOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeregisterTransitGatewayMulticastGroupMembersOutput, context: context)
        TransitGatewayMulticastDeregisteredGroupMembers.validate!(input[:deregistered_multicast_group_members], context: "#{context}[:deregistered_multicast_group_members]") unless input[:deregistered_multicast_group_members].nil?
      end
    end

    class DeregisterTransitGatewayMulticastGroupSourcesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeregisterTransitGatewayMulticastGroupSourcesInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        Hearth::Validator.validate!(input[:group_ip_address], ::String, context: "#{context}[:group_ip_address]")
        TransitGatewayNetworkInterfaceIdList.validate!(input[:network_interface_ids], context: "#{context}[:network_interface_ids]") unless input[:network_interface_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DeregisterTransitGatewayMulticastGroupSourcesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DeregisterTransitGatewayMulticastGroupSourcesOutput, context: context)
        TransitGatewayMulticastDeregisteredGroupSources.validate!(input[:deregistered_multicast_group_sources], context: "#{context}[:deregistered_multicast_group_sources]") unless input[:deregistered_multicast_group_sources].nil?
      end
    end

    class DescribeAccountAttributesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeAccountAttributesInput, context: context)
        AccountAttributeNameStringList.validate!(input[:attribute_names], context: "#{context}[:attribute_names]") unless input[:attribute_names].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeAccountAttributesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeAccountAttributesOutput, context: context)
        AccountAttributeList.validate!(input[:account_attributes], context: "#{context}[:account_attributes]") unless input[:account_attributes].nil?
      end
    end

    class DescribeAddressesAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeAddressesAttributeInput, context: context)
        AllocationIds.validate!(input[:allocation_ids], context: "#{context}[:allocation_ids]") unless input[:allocation_ids].nil?
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeAddressesAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeAddressesAttributeOutput, context: context)
        AddressSet.validate!(input[:addresses], context: "#{context}[:addresses]") unless input[:addresses].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeAddressesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeAddressesInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        PublicIpStringList.validate!(input[:public_ips], context: "#{context}[:public_ips]") unless input[:public_ips].nil?
        AllocationIdList.validate!(input[:allocation_ids], context: "#{context}[:allocation_ids]") unless input[:allocation_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeAddressesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeAddressesOutput, context: context)
        AddressList.validate!(input[:addresses], context: "#{context}[:addresses]") unless input[:addresses].nil?
      end
    end

    class DescribeAggregateIdFormatInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeAggregateIdFormatInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeAggregateIdFormatOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeAggregateIdFormatOutput, context: context)
        Hearth::Validator.validate!(input[:use_long_ids_aggregated], ::TrueClass, ::FalseClass, context: "#{context}[:use_long_ids_aggregated]")
        IdFormatList.validate!(input[:statuses], context: "#{context}[:statuses]") unless input[:statuses].nil?
      end
    end

    class DescribeAvailabilityZonesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeAvailabilityZonesInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        ZoneNameStringList.validate!(input[:zone_names], context: "#{context}[:zone_names]") unless input[:zone_names].nil?
        ZoneIdStringList.validate!(input[:zone_ids], context: "#{context}[:zone_ids]") unless input[:zone_ids].nil?
        Hearth::Validator.validate!(input[:all_availability_zones], ::TrueClass, ::FalseClass, context: "#{context}[:all_availability_zones]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeAvailabilityZonesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeAvailabilityZonesOutput, context: context)
        AvailabilityZoneList.validate!(input[:availability_zones], context: "#{context}[:availability_zones]") unless input[:availability_zones].nil?
      end
    end

    class DescribeBundleTasksInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeBundleTasksInput, context: context)
        BundleIdStringList.validate!(input[:bundle_ids], context: "#{context}[:bundle_ids]") unless input[:bundle_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeBundleTasksOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeBundleTasksOutput, context: context)
        BundleTaskList.validate!(input[:bundle_tasks], context: "#{context}[:bundle_tasks]") unless input[:bundle_tasks].nil?
      end
    end

    class DescribeByoipCidrsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeByoipCidrsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeByoipCidrsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeByoipCidrsOutput, context: context)
        ByoipCidrSet.validate!(input[:byoip_cidrs], context: "#{context}[:byoip_cidrs]") unless input[:byoip_cidrs].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeCapacityReservationFleetsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeCapacityReservationFleetsInput, context: context)
        CapacityReservationFleetIdSet.validate!(input[:capacity_reservation_fleet_ids], context: "#{context}[:capacity_reservation_fleet_ids]") unless input[:capacity_reservation_fleet_ids].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeCapacityReservationFleetsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeCapacityReservationFleetsOutput, context: context)
        CapacityReservationFleetSet.validate!(input[:capacity_reservation_fleets], context: "#{context}[:capacity_reservation_fleets]") unless input[:capacity_reservation_fleets].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeCapacityReservationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeCapacityReservationsInput, context: context)
        CapacityReservationIdSet.validate!(input[:capacity_reservation_ids], context: "#{context}[:capacity_reservation_ids]") unless input[:capacity_reservation_ids].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeCapacityReservationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeCapacityReservationsOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        CapacityReservationSet.validate!(input[:capacity_reservations], context: "#{context}[:capacity_reservations]") unless input[:capacity_reservations].nil?
      end
    end

    class DescribeCarrierGatewaysInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeCarrierGatewaysInput, context: context)
        CarrierGatewayIdSet.validate!(input[:carrier_gateway_ids], context: "#{context}[:carrier_gateway_ids]") unless input[:carrier_gateway_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeCarrierGatewaysOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeCarrierGatewaysOutput, context: context)
        CarrierGatewaySet.validate!(input[:carrier_gateways], context: "#{context}[:carrier_gateways]") unless input[:carrier_gateways].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeClassicLinkInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeClassicLinkInstancesInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        InstanceIdStringList.validate!(input[:instance_ids], context: "#{context}[:instance_ids]") unless input[:instance_ids].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeClassicLinkInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeClassicLinkInstancesOutput, context: context)
        ClassicLinkInstanceList.validate!(input[:instances], context: "#{context}[:instances]") unless input[:instances].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeClientVpnAuthorizationRulesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeClientVpnAuthorizationRulesInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeClientVpnAuthorizationRulesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeClientVpnAuthorizationRulesOutput, context: context)
        AuthorizationRuleSet.validate!(input[:authorization_rules], context: "#{context}[:authorization_rules]") unless input[:authorization_rules].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeClientVpnConnectionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeClientVpnConnectionsInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeClientVpnConnectionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeClientVpnConnectionsOutput, context: context)
        ClientVpnConnectionSet.validate!(input[:connections], context: "#{context}[:connections]") unless input[:connections].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeClientVpnEndpointsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeClientVpnEndpointsInput, context: context)
        ClientVpnEndpointIdList.validate!(input[:client_vpn_endpoint_ids], context: "#{context}[:client_vpn_endpoint_ids]") unless input[:client_vpn_endpoint_ids].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeClientVpnEndpointsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeClientVpnEndpointsOutput, context: context)
        EndpointSet.validate!(input[:client_vpn_endpoints], context: "#{context}[:client_vpn_endpoints]") unless input[:client_vpn_endpoints].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeClientVpnRoutesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeClientVpnRoutesInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeClientVpnRoutesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeClientVpnRoutesOutput, context: context)
        ClientVpnRouteSet.validate!(input[:routes], context: "#{context}[:routes]") unless input[:routes].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeClientVpnTargetNetworksInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeClientVpnTargetNetworksInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        ValueStringList.validate!(input[:association_ids], context: "#{context}[:association_ids]") unless input[:association_ids].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeClientVpnTargetNetworksOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeClientVpnTargetNetworksOutput, context: context)
        TargetNetworkSet.validate!(input[:client_vpn_target_networks], context: "#{context}[:client_vpn_target_networks]") unless input[:client_vpn_target_networks].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeCoipPoolsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeCoipPoolsInput, context: context)
        CoipPoolIdSet.validate!(input[:pool_ids], context: "#{context}[:pool_ids]") unless input[:pool_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeCoipPoolsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeCoipPoolsOutput, context: context)
        CoipPoolSet.validate!(input[:coip_pools], context: "#{context}[:coip_pools]") unless input[:coip_pools].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeConversionTaskList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ConversionTask.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DescribeConversionTasksInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeConversionTasksInput, context: context)
        ConversionIdStringList.validate!(input[:conversion_task_ids], context: "#{context}[:conversion_task_ids]") unless input[:conversion_task_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeConversionTasksOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeConversionTasksOutput, context: context)
        DescribeConversionTaskList.validate!(input[:conversion_tasks], context: "#{context}[:conversion_tasks]") unless input[:conversion_tasks].nil?
      end
    end

    class DescribeCustomerGatewaysInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeCustomerGatewaysInput, context: context)
        CustomerGatewayIdStringList.validate!(input[:customer_gateway_ids], context: "#{context}[:customer_gateway_ids]") unless input[:customer_gateway_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeCustomerGatewaysOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeCustomerGatewaysOutput, context: context)
        CustomerGatewayList.validate!(input[:customer_gateways], context: "#{context}[:customer_gateways]") unless input[:customer_gateways].nil?
      end
    end

    class DescribeDhcpOptionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeDhcpOptionsInput, context: context)
        DhcpOptionsIdStringList.validate!(input[:dhcp_options_ids], context: "#{context}[:dhcp_options_ids]") unless input[:dhcp_options_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeDhcpOptionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeDhcpOptionsOutput, context: context)
        DhcpOptionsList.validate!(input[:dhcp_options], context: "#{context}[:dhcp_options]") unless input[:dhcp_options].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeEgressOnlyInternetGatewaysInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeEgressOnlyInternetGatewaysInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        EgressOnlyInternetGatewayIdList.validate!(input[:egress_only_internet_gateway_ids], context: "#{context}[:egress_only_internet_gateway_ids]") unless input[:egress_only_internet_gateway_ids].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
      end
    end

    class DescribeEgressOnlyInternetGatewaysOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeEgressOnlyInternetGatewaysOutput, context: context)
        EgressOnlyInternetGatewayList.validate!(input[:egress_only_internet_gateways], context: "#{context}[:egress_only_internet_gateways]") unless input[:egress_only_internet_gateways].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeElasticGpusInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeElasticGpusInput, context: context)
        ElasticGpuIdSet.validate!(input[:elastic_gpu_ids], context: "#{context}[:elastic_gpu_ids]") unless input[:elastic_gpu_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeElasticGpusOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeElasticGpusOutput, context: context)
        ElasticGpuSet.validate!(input[:elastic_gpu_set], context: "#{context}[:elastic_gpu_set]") unless input[:elastic_gpu_set].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeExportImageTasksInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeExportImageTasksInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        ExportImageTaskIdList.validate!(input[:export_image_task_ids], context: "#{context}[:export_image_task_ids]") unless input[:export_image_task_ids].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeExportImageTasksOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeExportImageTasksOutput, context: context)
        ExportImageTaskList.validate!(input[:export_image_tasks], context: "#{context}[:export_image_tasks]") unless input[:export_image_tasks].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeExportTasksInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeExportTasksInput, context: context)
        ExportTaskIdStringList.validate!(input[:export_task_ids], context: "#{context}[:export_task_ids]") unless input[:export_task_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
      end
    end

    class DescribeExportTasksOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeExportTasksOutput, context: context)
        ExportTaskList.validate!(input[:export_tasks], context: "#{context}[:export_tasks]") unless input[:export_tasks].nil?
      end
    end

    class DescribeFastLaunchImagesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFastLaunchImagesInput, context: context)
        FastLaunchImageIdList.validate!(input[:image_ids], context: "#{context}[:image_ids]") unless input[:image_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeFastLaunchImagesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFastLaunchImagesOutput, context: context)
        DescribeFastLaunchImagesSuccessSet.validate!(input[:fast_launch_images], context: "#{context}[:fast_launch_images]") unless input[:fast_launch_images].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeFastLaunchImagesSuccessItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFastLaunchImagesSuccessItem, context: context)
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        FastLaunchSnapshotConfigurationResponse.validate!(input[:snapshot_configuration], context: "#{context}[:snapshot_configuration]") unless input[:snapshot_configuration].nil?
        FastLaunchLaunchTemplateSpecificationResponse.validate!(input[:launch_template], context: "#{context}[:launch_template]") unless input[:launch_template].nil?
        Hearth::Validator.validate!(input[:max_parallel_launches], ::Integer, context: "#{context}[:max_parallel_launches]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:state_transition_reason], ::String, context: "#{context}[:state_transition_reason]")
        Hearth::Validator.validate!(input[:state_transition_time], ::Time, context: "#{context}[:state_transition_time]")
      end
    end

    class DescribeFastLaunchImagesSuccessSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DescribeFastLaunchImagesSuccessItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DescribeFastSnapshotRestoreSuccessItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFastSnapshotRestoreSuccessItem, context: context)
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:state_transition_reason], ::String, context: "#{context}[:state_transition_reason]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:owner_alias], ::String, context: "#{context}[:owner_alias]")
        Hearth::Validator.validate!(input[:enabling_time], ::Time, context: "#{context}[:enabling_time]")
        Hearth::Validator.validate!(input[:optimizing_time], ::Time, context: "#{context}[:optimizing_time]")
        Hearth::Validator.validate!(input[:enabled_time], ::Time, context: "#{context}[:enabled_time]")
        Hearth::Validator.validate!(input[:disabling_time], ::Time, context: "#{context}[:disabling_time]")
        Hearth::Validator.validate!(input[:disabled_time], ::Time, context: "#{context}[:disabled_time]")
      end
    end

    class DescribeFastSnapshotRestoreSuccessSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DescribeFastSnapshotRestoreSuccessItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DescribeFastSnapshotRestoresInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFastSnapshotRestoresInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeFastSnapshotRestoresOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFastSnapshotRestoresOutput, context: context)
        DescribeFastSnapshotRestoreSuccessSet.validate!(input[:fast_snapshot_restores], context: "#{context}[:fast_snapshot_restores]") unless input[:fast_snapshot_restores].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeFleetError
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFleetError, context: context)
        LaunchTemplateAndOverridesResponse.validate!(input[:launch_template_and_overrides], context: "#{context}[:launch_template_and_overrides]") unless input[:launch_template_and_overrides].nil?
        Hearth::Validator.validate!(input[:lifecycle], ::String, context: "#{context}[:lifecycle]")
        Hearth::Validator.validate!(input[:error_code], ::String, context: "#{context}[:error_code]")
        Hearth::Validator.validate!(input[:error_message], ::String, context: "#{context}[:error_message]")
      end
    end

    class DescribeFleetHistoryInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFleetHistoryInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:event_type], ::String, context: "#{context}[:event_type]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:fleet_id], ::String, context: "#{context}[:fleet_id]")
        Hearth::Validator.validate!(input[:start_time], ::Time, context: "#{context}[:start_time]")
      end
    end

    class DescribeFleetHistoryOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFleetHistoryOutput, context: context)
        HistoryRecordSet.validate!(input[:history_records], context: "#{context}[:history_records]") unless input[:history_records].nil?
        Hearth::Validator.validate!(input[:last_evaluated_time], ::Time, context: "#{context}[:last_evaluated_time]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:fleet_id], ::String, context: "#{context}[:fleet_id]")
        Hearth::Validator.validate!(input[:start_time], ::Time, context: "#{context}[:start_time]")
      end
    end

    class DescribeFleetInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFleetInstancesInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:fleet_id], ::String, context: "#{context}[:fleet_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
      end
    end

    class DescribeFleetInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFleetInstancesOutput, context: context)
        ActiveInstanceSet.validate!(input[:active_instances], context: "#{context}[:active_instances]") unless input[:active_instances].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:fleet_id], ::String, context: "#{context}[:fleet_id]")
      end
    end

    class DescribeFleetsErrorSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DescribeFleetError.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DescribeFleetsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFleetsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        FleetIdSet.validate!(input[:fleet_ids], context: "#{context}[:fleet_ids]") unless input[:fleet_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
      end
    end

    class DescribeFleetsInstances
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFleetsInstances, context: context)
        LaunchTemplateAndOverridesResponse.validate!(input[:launch_template_and_overrides], context: "#{context}[:launch_template_and_overrides]") unless input[:launch_template_and_overrides].nil?
        Hearth::Validator.validate!(input[:lifecycle], ::String, context: "#{context}[:lifecycle]")
        InstanceIdsSet.validate!(input[:instance_ids], context: "#{context}[:instance_ids]") unless input[:instance_ids].nil?
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:platform], ::String, context: "#{context}[:platform]")
      end
    end

    class DescribeFleetsInstancesSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DescribeFleetsInstances.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DescribeFleetsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFleetsOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        FleetSet.validate!(input[:fleets], context: "#{context}[:fleets]") unless input[:fleets].nil?
      end
    end

    class DescribeFlowLogsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFlowLogsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filter], context: "#{context}[:filter]") unless input[:filter].nil?
        FlowLogIdList.validate!(input[:flow_log_ids], context: "#{context}[:flow_log_ids]") unless input[:flow_log_ids].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeFlowLogsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFlowLogsOutput, context: context)
        FlowLogSet.validate!(input[:flow_logs], context: "#{context}[:flow_logs]") unless input[:flow_logs].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeFpgaImageAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFpgaImageAttributeInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:fpga_image_id], ::String, context: "#{context}[:fpga_image_id]")
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
      end
    end

    class DescribeFpgaImageAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFpgaImageAttributeOutput, context: context)
        FpgaImageAttribute.validate!(input[:fpga_image_attribute], context: "#{context}[:fpga_image_attribute]") unless input[:fpga_image_attribute].nil?
      end
    end

    class DescribeFpgaImagesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFpgaImagesInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FpgaImageIdList.validate!(input[:fpga_image_ids], context: "#{context}[:fpga_image_ids]") unless input[:fpga_image_ids].nil?
        OwnerStringList.validate!(input[:owners], context: "#{context}[:owners]") unless input[:owners].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeFpgaImagesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeFpgaImagesOutput, context: context)
        FpgaImageList.validate!(input[:fpga_images], context: "#{context}[:fpga_images]") unless input[:fpga_images].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeHostReservationOfferingsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeHostReservationOfferingsInput, context: context)
        FilterList.validate!(input[:filter], context: "#{context}[:filter]") unless input[:filter].nil?
        Hearth::Validator.validate!(input[:max_duration], ::Integer, context: "#{context}[:max_duration]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:min_duration], ::Integer, context: "#{context}[:min_duration]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:offering_id], ::String, context: "#{context}[:offering_id]")
      end
    end

    class DescribeHostReservationOfferingsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeHostReservationOfferingsOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        HostOfferingSet.validate!(input[:offering_set], context: "#{context}[:offering_set]") unless input[:offering_set].nil?
      end
    end

    class DescribeHostReservationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeHostReservationsInput, context: context)
        FilterList.validate!(input[:filter], context: "#{context}[:filter]") unless input[:filter].nil?
        HostReservationIdSet.validate!(input[:host_reservation_id_set], context: "#{context}[:host_reservation_id_set]") unless input[:host_reservation_id_set].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeHostReservationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeHostReservationsOutput, context: context)
        HostReservationSet.validate!(input[:host_reservation_set], context: "#{context}[:host_reservation_set]") unless input[:host_reservation_set].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeHostsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeHostsInput, context: context)
        FilterList.validate!(input[:filter], context: "#{context}[:filter]") unless input[:filter].nil?
        RequestHostIdList.validate!(input[:host_ids], context: "#{context}[:host_ids]") unless input[:host_ids].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeHostsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeHostsOutput, context: context)
        HostList.validate!(input[:hosts], context: "#{context}[:hosts]") unless input[:hosts].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeIamInstanceProfileAssociationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeIamInstanceProfileAssociationsInput, context: context)
        AssociationIdList.validate!(input[:association_ids], context: "#{context}[:association_ids]") unless input[:association_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeIamInstanceProfileAssociationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeIamInstanceProfileAssociationsOutput, context: context)
        IamInstanceProfileAssociationSet.validate!(input[:iam_instance_profile_associations], context: "#{context}[:iam_instance_profile_associations]") unless input[:iam_instance_profile_associations].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeIdFormatInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeIdFormatInput, context: context)
        Hearth::Validator.validate!(input[:resource], ::String, context: "#{context}[:resource]")
      end
    end

    class DescribeIdFormatOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeIdFormatOutput, context: context)
        IdFormatList.validate!(input[:statuses], context: "#{context}[:statuses]") unless input[:statuses].nil?
      end
    end

    class DescribeIdentityIdFormatInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeIdentityIdFormatInput, context: context)
        Hearth::Validator.validate!(input[:principal_arn], ::String, context: "#{context}[:principal_arn]")
        Hearth::Validator.validate!(input[:resource], ::String, context: "#{context}[:resource]")
      end
    end

    class DescribeIdentityIdFormatOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeIdentityIdFormatOutput, context: context)
        IdFormatList.validate!(input[:statuses], context: "#{context}[:statuses]") unless input[:statuses].nil?
      end
    end

    class DescribeImageAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeImageAttributeInput, context: context)
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeImageAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeImageAttributeOutput, context: context)
        BlockDeviceMappingList.validate!(input[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless input[:block_device_mappings].nil?
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        LaunchPermissionList.validate!(input[:launch_permissions], context: "#{context}[:launch_permissions]") unless input[:launch_permissions].nil?
        ProductCodeList.validate!(input[:product_codes], context: "#{context}[:product_codes]") unless input[:product_codes].nil?
        AttributeValue.validate!(input[:description], context: "#{context}[:description]") unless input[:description].nil?
        AttributeValue.validate!(input[:kernel_id], context: "#{context}[:kernel_id]") unless input[:kernel_id].nil?
        AttributeValue.validate!(input[:ramdisk_id], context: "#{context}[:ramdisk_id]") unless input[:ramdisk_id].nil?
        AttributeValue.validate!(input[:sriov_net_support], context: "#{context}[:sriov_net_support]") unless input[:sriov_net_support].nil?
        AttributeValue.validate!(input[:boot_mode], context: "#{context}[:boot_mode]") unless input[:boot_mode].nil?
        AttributeValue.validate!(input[:tpm_support], context: "#{context}[:tpm_support]") unless input[:tpm_support].nil?
        AttributeValue.validate!(input[:uefi_data], context: "#{context}[:uefi_data]") unless input[:uefi_data].nil?
        AttributeValue.validate!(input[:last_launched_time], context: "#{context}[:last_launched_time]") unless input[:last_launched_time].nil?
      end
    end

    class DescribeImagesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeImagesInput, context: context)
        ExecutableByStringList.validate!(input[:executable_users], context: "#{context}[:executable_users]") unless input[:executable_users].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        ImageIdStringList.validate!(input[:image_ids], context: "#{context}[:image_ids]") unless input[:image_ids].nil?
        OwnerStringList.validate!(input[:owners], context: "#{context}[:owners]") unless input[:owners].nil?
        Hearth::Validator.validate!(input[:include_deprecated], ::TrueClass, ::FalseClass, context: "#{context}[:include_deprecated]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeImagesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeImagesOutput, context: context)
        ImageList.validate!(input[:images], context: "#{context}[:images]") unless input[:images].nil?
      end
    end

    class DescribeImportImageTasksInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeImportImageTasksInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        ImportTaskIdList.validate!(input[:import_task_ids], context: "#{context}[:import_task_ids]") unless input[:import_task_ids].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeImportImageTasksOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeImportImageTasksOutput, context: context)
        ImportImageTaskList.validate!(input[:import_image_tasks], context: "#{context}[:import_image_tasks]") unless input[:import_image_tasks].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeImportSnapshotTasksInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeImportSnapshotTasksInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        ImportSnapshotTaskIdList.validate!(input[:import_task_ids], context: "#{context}[:import_task_ids]") unless input[:import_task_ids].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeImportSnapshotTasksOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeImportSnapshotTasksOutput, context: context)
        ImportSnapshotTaskList.validate!(input[:import_snapshot_tasks], context: "#{context}[:import_snapshot_tasks]") unless input[:import_snapshot_tasks].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeInstanceAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstanceAttributeInput, context: context)
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
      end
    end

    class DescribeInstanceAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstanceAttributeOutput, context: context)
        GroupIdentifierList.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        InstanceBlockDeviceMappingList.validate!(input[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless input[:block_device_mappings].nil?
        AttributeBooleanValue.validate!(input[:disable_api_termination], context: "#{context}[:disable_api_termination]") unless input[:disable_api_termination].nil?
        AttributeBooleanValue.validate!(input[:ena_support], context: "#{context}[:ena_support]") unless input[:ena_support].nil?
        EnclaveOptions.validate!(input[:enclave_options], context: "#{context}[:enclave_options]") unless input[:enclave_options].nil?
        AttributeBooleanValue.validate!(input[:ebs_optimized], context: "#{context}[:ebs_optimized]") unless input[:ebs_optimized].nil?
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        AttributeValue.validate!(input[:instance_initiated_shutdown_behavior], context: "#{context}[:instance_initiated_shutdown_behavior]") unless input[:instance_initiated_shutdown_behavior].nil?
        AttributeValue.validate!(input[:instance_type], context: "#{context}[:instance_type]") unless input[:instance_type].nil?
        AttributeValue.validate!(input[:kernel_id], context: "#{context}[:kernel_id]") unless input[:kernel_id].nil?
        ProductCodeList.validate!(input[:product_codes], context: "#{context}[:product_codes]") unless input[:product_codes].nil?
        AttributeValue.validate!(input[:ramdisk_id], context: "#{context}[:ramdisk_id]") unless input[:ramdisk_id].nil?
        AttributeValue.validate!(input[:root_device_name], context: "#{context}[:root_device_name]") unless input[:root_device_name].nil?
        AttributeBooleanValue.validate!(input[:source_dest_check], context: "#{context}[:source_dest_check]") unless input[:source_dest_check].nil?
        AttributeValue.validate!(input[:sriov_net_support], context: "#{context}[:sriov_net_support]") unless input[:sriov_net_support].nil?
        AttributeValue.validate!(input[:user_data], context: "#{context}[:user_data]") unless input[:user_data].nil?
        AttributeBooleanValue.validate!(input[:disable_api_stop], context: "#{context}[:disable_api_stop]") unless input[:disable_api_stop].nil?
      end
    end

    class DescribeInstanceCreditSpecificationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstanceCreditSpecificationsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        InstanceIdStringList.validate!(input[:instance_ids], context: "#{context}[:instance_ids]") unless input[:instance_ids].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeInstanceCreditSpecificationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstanceCreditSpecificationsOutput, context: context)
        InstanceCreditSpecificationList.validate!(input[:instance_credit_specifications], context: "#{context}[:instance_credit_specifications]") unless input[:instance_credit_specifications].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeInstanceEventNotificationAttributesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstanceEventNotificationAttributesInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeInstanceEventNotificationAttributesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstanceEventNotificationAttributesOutput, context: context)
        InstanceTagNotificationAttribute.validate!(input[:instance_tag_attribute], context: "#{context}[:instance_tag_attribute]") unless input[:instance_tag_attribute].nil?
      end
    end

    class DescribeInstanceEventWindowsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstanceEventWindowsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        InstanceEventWindowIdSet.validate!(input[:instance_event_window_ids], context: "#{context}[:instance_event_window_ids]") unless input[:instance_event_window_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeInstanceEventWindowsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstanceEventWindowsOutput, context: context)
        InstanceEventWindowSet.validate!(input[:instance_event_windows], context: "#{context}[:instance_event_windows]") unless input[:instance_event_windows].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeInstanceStatusInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstanceStatusInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        InstanceIdStringList.validate!(input[:instance_ids], context: "#{context}[:instance_ids]") unless input[:instance_ids].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:include_all_instances], ::TrueClass, ::FalseClass, context: "#{context}[:include_all_instances]")
      end
    end

    class DescribeInstanceStatusOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstanceStatusOutput, context: context)
        InstanceStatusList.validate!(input[:instance_statuses], context: "#{context}[:instance_statuses]") unless input[:instance_statuses].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeInstanceTypeOfferingsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstanceTypeOfferingsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:location_type], ::String, context: "#{context}[:location_type]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeInstanceTypeOfferingsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstanceTypeOfferingsOutput, context: context)
        InstanceTypeOfferingsList.validate!(input[:instance_type_offerings], context: "#{context}[:instance_type_offerings]") unless input[:instance_type_offerings].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeInstanceTypesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstanceTypesInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        RequestInstanceTypeList.validate!(input[:instance_types], context: "#{context}[:instance_types]") unless input[:instance_types].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeInstanceTypesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstanceTypesOutput, context: context)
        InstanceTypeInfoList.validate!(input[:instance_types], context: "#{context}[:instance_types]") unless input[:instance_types].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstancesInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        InstanceIdStringList.validate!(input[:instance_ids], context: "#{context}[:instance_ids]") unless input[:instance_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInstancesOutput, context: context)
        ReservationList.validate!(input[:reservations], context: "#{context}[:reservations]") unless input[:reservations].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeInternetGatewaysInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInternetGatewaysInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        InternetGatewayIdList.validate!(input[:internet_gateway_ids], context: "#{context}[:internet_gateway_ids]") unless input[:internet_gateway_ids].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeInternetGatewaysOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeInternetGatewaysOutput, context: context)
        InternetGatewayList.validate!(input[:internet_gateways], context: "#{context}[:internet_gateways]") unless input[:internet_gateways].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeIpamPoolsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeIpamPoolsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        ValueStringList.validate!(input[:ipam_pool_ids], context: "#{context}[:ipam_pool_ids]") unless input[:ipam_pool_ids].nil?
      end
    end

    class DescribeIpamPoolsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeIpamPoolsOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        IpamPoolSet.validate!(input[:ipam_pools], context: "#{context}[:ipam_pools]") unless input[:ipam_pools].nil?
      end
    end

    class DescribeIpamScopesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeIpamScopesInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        ValueStringList.validate!(input[:ipam_scope_ids], context: "#{context}[:ipam_scope_ids]") unless input[:ipam_scope_ids].nil?
      end
    end

    class DescribeIpamScopesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeIpamScopesOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        IpamScopeSet.validate!(input[:ipam_scopes], context: "#{context}[:ipam_scopes]") unless input[:ipam_scopes].nil?
      end
    end

    class DescribeIpamsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeIpamsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        ValueStringList.validate!(input[:ipam_ids], context: "#{context}[:ipam_ids]") unless input[:ipam_ids].nil?
      end
    end

    class DescribeIpamsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeIpamsOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        IpamSet.validate!(input[:ipams], context: "#{context}[:ipams]") unless input[:ipams].nil?
      end
    end

    class DescribeIpv6PoolsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeIpv6PoolsInput, context: context)
        Ipv6PoolIdList.validate!(input[:pool_ids], context: "#{context}[:pool_ids]") unless input[:pool_ids].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
      end
    end

    class DescribeIpv6PoolsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeIpv6PoolsOutput, context: context)
        Ipv6PoolSet.validate!(input[:ipv6_pools], context: "#{context}[:ipv6_pools]") unless input[:ipv6_pools].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeKeyPairsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeKeyPairsInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        KeyNameStringList.validate!(input[:key_names], context: "#{context}[:key_names]") unless input[:key_names].nil?
        KeyPairIdStringList.validate!(input[:key_pair_ids], context: "#{context}[:key_pair_ids]") unless input[:key_pair_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:include_public_key], ::TrueClass, ::FalseClass, context: "#{context}[:include_public_key]")
      end
    end

    class DescribeKeyPairsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeKeyPairsOutput, context: context)
        KeyPairList.validate!(input[:key_pairs], context: "#{context}[:key_pairs]") unless input[:key_pairs].nil?
      end
    end

    class DescribeLaunchTemplateVersionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLaunchTemplateVersionsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:launch_template_id], ::String, context: "#{context}[:launch_template_id]")
        Hearth::Validator.validate!(input[:launch_template_name], ::String, context: "#{context}[:launch_template_name]")
        VersionStringList.validate!(input[:versions], context: "#{context}[:versions]") unless input[:versions].nil?
        Hearth::Validator.validate!(input[:min_version], ::String, context: "#{context}[:min_version]")
        Hearth::Validator.validate!(input[:max_version], ::String, context: "#{context}[:max_version]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
      end
    end

    class DescribeLaunchTemplateVersionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLaunchTemplateVersionsOutput, context: context)
        LaunchTemplateVersionSet.validate!(input[:launch_template_versions], context: "#{context}[:launch_template_versions]") unless input[:launch_template_versions].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeLaunchTemplatesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLaunchTemplatesInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        LaunchTemplateIdStringList.validate!(input[:launch_template_ids], context: "#{context}[:launch_template_ids]") unless input[:launch_template_ids].nil?
        LaunchTemplateNameStringList.validate!(input[:launch_template_names], context: "#{context}[:launch_template_names]") unless input[:launch_template_names].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeLaunchTemplatesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLaunchTemplatesOutput, context: context)
        LaunchTemplateSet.validate!(input[:launch_templates], context: "#{context}[:launch_templates]") unless input[:launch_templates].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, context: context)
        LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet.validate!(input[:local_gateway_route_table_virtual_interface_group_association_ids], context: "#{context}[:local_gateway_route_table_virtual_interface_group_association_ids]") unless input[:local_gateway_route_table_virtual_interface_group_association_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, context: context)
        LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet.validate!(input[:local_gateway_route_table_virtual_interface_group_associations], context: "#{context}[:local_gateway_route_table_virtual_interface_group_associations]") unless input[:local_gateway_route_table_virtual_interface_group_associations].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeLocalGatewayRouteTableVpcAssociationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLocalGatewayRouteTableVpcAssociationsInput, context: context)
        LocalGatewayRouteTableVpcAssociationIdSet.validate!(input[:local_gateway_route_table_vpc_association_ids], context: "#{context}[:local_gateway_route_table_vpc_association_ids]") unless input[:local_gateway_route_table_vpc_association_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeLocalGatewayRouteTableVpcAssociationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLocalGatewayRouteTableVpcAssociationsOutput, context: context)
        LocalGatewayRouteTableVpcAssociationSet.validate!(input[:local_gateway_route_table_vpc_associations], context: "#{context}[:local_gateway_route_table_vpc_associations]") unless input[:local_gateway_route_table_vpc_associations].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeLocalGatewayRouteTablesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLocalGatewayRouteTablesInput, context: context)
        LocalGatewayRouteTableIdSet.validate!(input[:local_gateway_route_table_ids], context: "#{context}[:local_gateway_route_table_ids]") unless input[:local_gateway_route_table_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeLocalGatewayRouteTablesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLocalGatewayRouteTablesOutput, context: context)
        LocalGatewayRouteTableSet.validate!(input[:local_gateway_route_tables], context: "#{context}[:local_gateway_route_tables]") unless input[:local_gateway_route_tables].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeLocalGatewayVirtualInterfaceGroupsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLocalGatewayVirtualInterfaceGroupsInput, context: context)
        LocalGatewayVirtualInterfaceGroupIdSet.validate!(input[:local_gateway_virtual_interface_group_ids], context: "#{context}[:local_gateway_virtual_interface_group_ids]") unless input[:local_gateway_virtual_interface_group_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeLocalGatewayVirtualInterfaceGroupsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLocalGatewayVirtualInterfaceGroupsOutput, context: context)
        LocalGatewayVirtualInterfaceGroupSet.validate!(input[:local_gateway_virtual_interface_groups], context: "#{context}[:local_gateway_virtual_interface_groups]") unless input[:local_gateway_virtual_interface_groups].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeLocalGatewayVirtualInterfacesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLocalGatewayVirtualInterfacesInput, context: context)
        LocalGatewayVirtualInterfaceIdSet.validate!(input[:local_gateway_virtual_interface_ids], context: "#{context}[:local_gateway_virtual_interface_ids]") unless input[:local_gateway_virtual_interface_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeLocalGatewayVirtualInterfacesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLocalGatewayVirtualInterfacesOutput, context: context)
        LocalGatewayVirtualInterfaceSet.validate!(input[:local_gateway_virtual_interfaces], context: "#{context}[:local_gateway_virtual_interfaces]") unless input[:local_gateway_virtual_interfaces].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeLocalGatewaysInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLocalGatewaysInput, context: context)
        LocalGatewayIdSet.validate!(input[:local_gateway_ids], context: "#{context}[:local_gateway_ids]") unless input[:local_gateway_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeLocalGatewaysOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeLocalGatewaysOutput, context: context)
        LocalGatewaySet.validate!(input[:local_gateways], context: "#{context}[:local_gateways]") unless input[:local_gateways].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeManagedPrefixListsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeManagedPrefixListsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        ValueStringList.validate!(input[:prefix_list_ids], context: "#{context}[:prefix_list_ids]") unless input[:prefix_list_ids].nil?
      end
    end

    class DescribeManagedPrefixListsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeManagedPrefixListsOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        ManagedPrefixListSet.validate!(input[:prefix_lists], context: "#{context}[:prefix_lists]") unless input[:prefix_lists].nil?
      end
    end

    class DescribeMovingAddressesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeMovingAddressesInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        ValueStringList.validate!(input[:public_ips], context: "#{context}[:public_ips]") unless input[:public_ips].nil?
      end
    end

    class DescribeMovingAddressesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeMovingAddressesOutput, context: context)
        MovingAddressStatusSet.validate!(input[:moving_address_statuses], context: "#{context}[:moving_address_statuses]") unless input[:moving_address_statuses].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeNatGatewaysInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNatGatewaysInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filter], context: "#{context}[:filter]") unless input[:filter].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        NatGatewayIdStringList.validate!(input[:nat_gateway_ids], context: "#{context}[:nat_gateway_ids]") unless input[:nat_gateway_ids].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeNatGatewaysOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNatGatewaysOutput, context: context)
        NatGatewayList.validate!(input[:nat_gateways], context: "#{context}[:nat_gateways]") unless input[:nat_gateways].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeNetworkAclsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkAclsInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        NetworkAclIdStringList.validate!(input[:network_acl_ids], context: "#{context}[:network_acl_ids]") unless input[:network_acl_ids].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeNetworkAclsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkAclsOutput, context: context)
        NetworkAclList.validate!(input[:network_acls], context: "#{context}[:network_acls]") unless input[:network_acls].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeNetworkInsightsAccessScopeAnalysesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkInsightsAccessScopeAnalysesInput, context: context)
        NetworkInsightsAccessScopeAnalysisIdList.validate!(input[:network_insights_access_scope_analysis_ids], context: "#{context}[:network_insights_access_scope_analysis_ids]") unless input[:network_insights_access_scope_analysis_ids].nil?
        Hearth::Validator.validate!(input[:network_insights_access_scope_id], ::String, context: "#{context}[:network_insights_access_scope_id]")
        Hearth::Validator.validate!(input[:analysis_start_time_begin], ::Time, context: "#{context}[:analysis_start_time_begin]")
        Hearth::Validator.validate!(input[:analysis_start_time_end], ::Time, context: "#{context}[:analysis_start_time_end]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeNetworkInsightsAccessScopeAnalysesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkInsightsAccessScopeAnalysesOutput, context: context)
        NetworkInsightsAccessScopeAnalysisList.validate!(input[:network_insights_access_scope_analyses], context: "#{context}[:network_insights_access_scope_analyses]") unless input[:network_insights_access_scope_analyses].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeNetworkInsightsAccessScopesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkInsightsAccessScopesInput, context: context)
        NetworkInsightsAccessScopeIdList.validate!(input[:network_insights_access_scope_ids], context: "#{context}[:network_insights_access_scope_ids]") unless input[:network_insights_access_scope_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeNetworkInsightsAccessScopesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkInsightsAccessScopesOutput, context: context)
        NetworkInsightsAccessScopeList.validate!(input[:network_insights_access_scopes], context: "#{context}[:network_insights_access_scopes]") unless input[:network_insights_access_scopes].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeNetworkInsightsAnalysesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkInsightsAnalysesInput, context: context)
        NetworkInsightsAnalysisIdList.validate!(input[:network_insights_analysis_ids], context: "#{context}[:network_insights_analysis_ids]") unless input[:network_insights_analysis_ids].nil?
        Hearth::Validator.validate!(input[:network_insights_path_id], ::String, context: "#{context}[:network_insights_path_id]")
        Hearth::Validator.validate!(input[:analysis_start_time], ::Time, context: "#{context}[:analysis_start_time]")
        Hearth::Validator.validate!(input[:analysis_end_time], ::Time, context: "#{context}[:analysis_end_time]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeNetworkInsightsAnalysesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkInsightsAnalysesOutput, context: context)
        NetworkInsightsAnalysisList.validate!(input[:network_insights_analyses], context: "#{context}[:network_insights_analyses]") unless input[:network_insights_analyses].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeNetworkInsightsPathsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkInsightsPathsInput, context: context)
        NetworkInsightsPathIdList.validate!(input[:network_insights_path_ids], context: "#{context}[:network_insights_path_ids]") unless input[:network_insights_path_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeNetworkInsightsPathsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkInsightsPathsOutput, context: context)
        NetworkInsightsPathList.validate!(input[:network_insights_paths], context: "#{context}[:network_insights_paths]") unless input[:network_insights_paths].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeNetworkInterfaceAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkInterfaceAttributeInput, context: context)
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
      end
    end

    class DescribeNetworkInterfaceAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkInterfaceAttributeOutput, context: context)
        NetworkInterfaceAttachment.validate!(input[:attachment], context: "#{context}[:attachment]") unless input[:attachment].nil?
        AttributeValue.validate!(input[:description], context: "#{context}[:description]") unless input[:description].nil?
        GroupIdentifierList.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        AttributeBooleanValue.validate!(input[:source_dest_check], context: "#{context}[:source_dest_check]") unless input[:source_dest_check].nil?
      end
    end

    class DescribeNetworkInterfacePermissionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkInterfacePermissionsInput, context: context)
        NetworkInterfacePermissionIdList.validate!(input[:network_interface_permission_ids], context: "#{context}[:network_interface_permission_ids]") unless input[:network_interface_permission_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeNetworkInterfacePermissionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkInterfacePermissionsOutput, context: context)
        NetworkInterfacePermissionList.validate!(input[:network_interface_permissions], context: "#{context}[:network_interface_permissions]") unless input[:network_interface_permissions].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeNetworkInterfacesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkInterfacesInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        NetworkInterfaceIdList.validate!(input[:network_interface_ids], context: "#{context}[:network_interface_ids]") unless input[:network_interface_ids].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeNetworkInterfacesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeNetworkInterfacesOutput, context: context)
        NetworkInterfaceList.validate!(input[:network_interfaces], context: "#{context}[:network_interfaces]") unless input[:network_interfaces].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribePlacementGroupsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribePlacementGroupsInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        PlacementGroupStringList.validate!(input[:group_names], context: "#{context}[:group_names]") unless input[:group_names].nil?
        PlacementGroupIdStringList.validate!(input[:group_ids], context: "#{context}[:group_ids]") unless input[:group_ids].nil?
      end
    end

    class DescribePlacementGroupsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribePlacementGroupsOutput, context: context)
        PlacementGroupList.validate!(input[:placement_groups], context: "#{context}[:placement_groups]") unless input[:placement_groups].nil?
      end
    end

    class DescribePrefixListsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribePrefixListsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        PrefixListResourceIdStringList.validate!(input[:prefix_list_ids], context: "#{context}[:prefix_list_ids]") unless input[:prefix_list_ids].nil?
      end
    end

    class DescribePrefixListsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribePrefixListsOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        PrefixListSet.validate!(input[:prefix_lists], context: "#{context}[:prefix_lists]") unless input[:prefix_lists].nil?
      end
    end

    class DescribePrincipalIdFormatInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribePrincipalIdFormatInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        ResourceList.validate!(input[:resources], context: "#{context}[:resources]") unless input[:resources].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribePrincipalIdFormatOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribePrincipalIdFormatOutput, context: context)
        PrincipalIdFormatList.validate!(input[:principals], context: "#{context}[:principals]") unless input[:principals].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribePublicIpv4PoolsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribePublicIpv4PoolsInput, context: context)
        PublicIpv4PoolIdStringList.validate!(input[:pool_ids], context: "#{context}[:pool_ids]") unless input[:pool_ids].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
      end
    end

    class DescribePublicIpv4PoolsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribePublicIpv4PoolsOutput, context: context)
        PublicIpv4PoolSet.validate!(input[:public_ipv4_pools], context: "#{context}[:public_ipv4_pools]") unless input[:public_ipv4_pools].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeRegionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeRegionsInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        RegionNameStringList.validate!(input[:region_names], context: "#{context}[:region_names]") unless input[:region_names].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:all_regions], ::TrueClass, ::FalseClass, context: "#{context}[:all_regions]")
      end
    end

    class DescribeRegionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeRegionsOutput, context: context)
        RegionList.validate!(input[:regions], context: "#{context}[:regions]") unless input[:regions].nil?
      end
    end

    class DescribeReplaceRootVolumeTasksInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeReplaceRootVolumeTasksInput, context: context)
        ReplaceRootVolumeTaskIds.validate!(input[:replace_root_volume_task_ids], context: "#{context}[:replace_root_volume_task_ids]") unless input[:replace_root_volume_task_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeReplaceRootVolumeTasksOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeReplaceRootVolumeTasksOutput, context: context)
        ReplaceRootVolumeTasks.validate!(input[:replace_root_volume_tasks], context: "#{context}[:replace_root_volume_tasks]") unless input[:replace_root_volume_tasks].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeReservedInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeReservedInstancesInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:offering_class], ::String, context: "#{context}[:offering_class]")
        ReservedInstancesIdStringList.validate!(input[:reserved_instances_ids], context: "#{context}[:reserved_instances_ids]") unless input[:reserved_instances_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:offering_type], ::String, context: "#{context}[:offering_type]")
      end
    end

    class DescribeReservedInstancesListingsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeReservedInstancesListingsInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:reserved_instances_id], ::String, context: "#{context}[:reserved_instances_id]")
        Hearth::Validator.validate!(input[:reserved_instances_listing_id], ::String, context: "#{context}[:reserved_instances_listing_id]")
      end
    end

    class DescribeReservedInstancesListingsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeReservedInstancesListingsOutput, context: context)
        ReservedInstancesListingList.validate!(input[:reserved_instances_listings], context: "#{context}[:reserved_instances_listings]") unless input[:reserved_instances_listings].nil?
      end
    end

    class DescribeReservedInstancesModificationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeReservedInstancesModificationsInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        ReservedInstancesModificationIdStringList.validate!(input[:reserved_instances_modification_ids], context: "#{context}[:reserved_instances_modification_ids]") unless input[:reserved_instances_modification_ids].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeReservedInstancesModificationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeReservedInstancesModificationsOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        ReservedInstancesModificationList.validate!(input[:reserved_instances_modifications], context: "#{context}[:reserved_instances_modifications]") unless input[:reserved_instances_modifications].nil?
      end
    end

    class DescribeReservedInstancesOfferingsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeReservedInstancesOfferingsInput, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:include_marketplace], ::TrueClass, ::FalseClass, context: "#{context}[:include_marketplace]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:max_duration], ::Integer, context: "#{context}[:max_duration]")
        Hearth::Validator.validate!(input[:max_instance_count], ::Integer, context: "#{context}[:max_instance_count]")
        Hearth::Validator.validate!(input[:min_duration], ::Integer, context: "#{context}[:min_duration]")
        Hearth::Validator.validate!(input[:offering_class], ::String, context: "#{context}[:offering_class]")
        Hearth::Validator.validate!(input[:product_description], ::String, context: "#{context}[:product_description]")
        ReservedInstancesOfferingIdStringList.validate!(input[:reserved_instances_offering_ids], context: "#{context}[:reserved_instances_offering_ids]") unless input[:reserved_instances_offering_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_tenancy], ::String, context: "#{context}[:instance_tenancy]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:offering_type], ::String, context: "#{context}[:offering_type]")
      end
    end

    class DescribeReservedInstancesOfferingsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeReservedInstancesOfferingsOutput, context: context)
        ReservedInstancesOfferingList.validate!(input[:reserved_instances_offerings], context: "#{context}[:reserved_instances_offerings]") unless input[:reserved_instances_offerings].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeReservedInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeReservedInstancesOutput, context: context)
        ReservedInstancesList.validate!(input[:reserved_instances], context: "#{context}[:reserved_instances]") unless input[:reserved_instances].nil?
      end
    end

    class DescribeRouteTablesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeRouteTablesInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        RouteTableIdStringList.validate!(input[:route_table_ids], context: "#{context}[:route_table_ids]") unless input[:route_table_ids].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeRouteTablesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeRouteTablesOutput, context: context)
        RouteTableList.validate!(input[:route_tables], context: "#{context}[:route_tables]") unless input[:route_tables].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeScheduledInstanceAvailabilityInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeScheduledInstanceAvailabilityInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        SlotDateTimeRangeRequest.validate!(input[:first_slot_start_time_range], context: "#{context}[:first_slot_start_time_range]") unless input[:first_slot_start_time_range].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:max_slot_duration_in_hours], ::Integer, context: "#{context}[:max_slot_duration_in_hours]")
        Hearth::Validator.validate!(input[:min_slot_duration_in_hours], ::Integer, context: "#{context}[:min_slot_duration_in_hours]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        ScheduledInstanceRecurrenceRequest.validate!(input[:recurrence], context: "#{context}[:recurrence]") unless input[:recurrence].nil?
      end
    end

    class DescribeScheduledInstanceAvailabilityOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeScheduledInstanceAvailabilityOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        ScheduledInstanceAvailabilitySet.validate!(input[:scheduled_instance_availability_set], context: "#{context}[:scheduled_instance_availability_set]") unless input[:scheduled_instance_availability_set].nil?
      end
    end

    class DescribeScheduledInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeScheduledInstancesInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        ScheduledInstanceIdRequestSet.validate!(input[:scheduled_instance_ids], context: "#{context}[:scheduled_instance_ids]") unless input[:scheduled_instance_ids].nil?
        SlotStartTimeRangeRequest.validate!(input[:slot_start_time_range], context: "#{context}[:slot_start_time_range]") unless input[:slot_start_time_range].nil?
      end
    end

    class DescribeScheduledInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeScheduledInstancesOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        ScheduledInstanceSet.validate!(input[:scheduled_instance_set], context: "#{context}[:scheduled_instance_set]") unless input[:scheduled_instance_set].nil?
      end
    end

    class DescribeSecurityGroupReferencesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSecurityGroupReferencesInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        GroupIds.validate!(input[:group_id], context: "#{context}[:group_id]") unless input[:group_id].nil?
      end
    end

    class DescribeSecurityGroupReferencesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSecurityGroupReferencesOutput, context: context)
        SecurityGroupReferences.validate!(input[:security_group_reference_set], context: "#{context}[:security_group_reference_set]") unless input[:security_group_reference_set].nil?
      end
    end

    class DescribeSecurityGroupRulesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSecurityGroupRulesInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        SecurityGroupRuleIdList.validate!(input[:security_group_rule_ids], context: "#{context}[:security_group_rule_ids]") unless input[:security_group_rule_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeSecurityGroupRulesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSecurityGroupRulesOutput, context: context)
        SecurityGroupRuleList.validate!(input[:security_group_rules], context: "#{context}[:security_group_rules]") unless input[:security_group_rules].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeSecurityGroupsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSecurityGroupsInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        GroupIdStringList.validate!(input[:group_ids], context: "#{context}[:group_ids]") unless input[:group_ids].nil?
        GroupNameStringList.validate!(input[:group_names], context: "#{context}[:group_names]") unless input[:group_names].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeSecurityGroupsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSecurityGroupsOutput, context: context)
        SecurityGroupList.validate!(input[:security_groups], context: "#{context}[:security_groups]") unless input[:security_groups].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeSnapshotAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSnapshotAttributeInput, context: context)
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeSnapshotAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSnapshotAttributeOutput, context: context)
        CreateVolumePermissionList.validate!(input[:create_volume_permissions], context: "#{context}[:create_volume_permissions]") unless input[:create_volume_permissions].nil?
        ProductCodeList.validate!(input[:product_codes], context: "#{context}[:product_codes]") unless input[:product_codes].nil?
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
      end
    end

    class DescribeSnapshotTierStatusInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSnapshotTierStatusInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeSnapshotTierStatusOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSnapshotTierStatusOutput, context: context)
        SnapshotTierStatusSet.validate!(input[:snapshot_tier_statuses], context: "#{context}[:snapshot_tier_statuses]") unless input[:snapshot_tier_statuses].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeSnapshotsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSnapshotsInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        OwnerStringList.validate!(input[:owner_ids], context: "#{context}[:owner_ids]") unless input[:owner_ids].nil?
        RestorableByStringList.validate!(input[:restorable_by_user_ids], context: "#{context}[:restorable_by_user_ids]") unless input[:restorable_by_user_ids].nil?
        SnapshotIdStringList.validate!(input[:snapshot_ids], context: "#{context}[:snapshot_ids]") unless input[:snapshot_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeSnapshotsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSnapshotsOutput, context: context)
        SnapshotList.validate!(input[:snapshots], context: "#{context}[:snapshots]") unless input[:snapshots].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeSpotDatafeedSubscriptionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSpotDatafeedSubscriptionInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeSpotDatafeedSubscriptionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSpotDatafeedSubscriptionOutput, context: context)
        SpotDatafeedSubscription.validate!(input[:spot_datafeed_subscription], context: "#{context}[:spot_datafeed_subscription]") unless input[:spot_datafeed_subscription].nil?
      end
    end

    class DescribeSpotFleetInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSpotFleetInstancesInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:spot_fleet_request_id], ::String, context: "#{context}[:spot_fleet_request_id]")
      end
    end

    class DescribeSpotFleetInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSpotFleetInstancesOutput, context: context)
        ActiveInstanceSet.validate!(input[:active_instances], context: "#{context}[:active_instances]") unless input[:active_instances].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:spot_fleet_request_id], ::String, context: "#{context}[:spot_fleet_request_id]")
      end
    end

    class DescribeSpotFleetRequestHistoryInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSpotFleetRequestHistoryInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:event_type], ::String, context: "#{context}[:event_type]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:spot_fleet_request_id], ::String, context: "#{context}[:spot_fleet_request_id]")
        Hearth::Validator.validate!(input[:start_time], ::Time, context: "#{context}[:start_time]")
      end
    end

    class DescribeSpotFleetRequestHistoryOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSpotFleetRequestHistoryOutput, context: context)
        HistoryRecords.validate!(input[:history_records], context: "#{context}[:history_records]") unless input[:history_records].nil?
        Hearth::Validator.validate!(input[:last_evaluated_time], ::Time, context: "#{context}[:last_evaluated_time]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:spot_fleet_request_id], ::String, context: "#{context}[:spot_fleet_request_id]")
        Hearth::Validator.validate!(input[:start_time], ::Time, context: "#{context}[:start_time]")
      end
    end

    class DescribeSpotFleetRequestsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSpotFleetRequestsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        SpotFleetRequestIdList.validate!(input[:spot_fleet_request_ids], context: "#{context}[:spot_fleet_request_ids]") unless input[:spot_fleet_request_ids].nil?
      end
    end

    class DescribeSpotFleetRequestsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSpotFleetRequestsOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        SpotFleetRequestConfigSet.validate!(input[:spot_fleet_request_configs], context: "#{context}[:spot_fleet_request_configs]") unless input[:spot_fleet_request_configs].nil?
      end
    end

    class DescribeSpotInstanceRequestsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSpotInstanceRequestsInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        SpotInstanceRequestIdList.validate!(input[:spot_instance_request_ids], context: "#{context}[:spot_instance_request_ids]") unless input[:spot_instance_request_ids].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeSpotInstanceRequestsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSpotInstanceRequestsOutput, context: context)
        SpotInstanceRequestList.validate!(input[:spot_instance_requests], context: "#{context}[:spot_instance_requests]") unless input[:spot_instance_requests].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeSpotPriceHistoryInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSpotPriceHistoryInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:end_time], ::Time, context: "#{context}[:end_time]")
        InstanceTypeList.validate!(input[:instance_types], context: "#{context}[:instance_types]") unless input[:instance_types].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        ProductDescriptionList.validate!(input[:product_descriptions], context: "#{context}[:product_descriptions]") unless input[:product_descriptions].nil?
        Hearth::Validator.validate!(input[:start_time], ::Time, context: "#{context}[:start_time]")
      end
    end

    class DescribeSpotPriceHistoryOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSpotPriceHistoryOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        SpotPriceHistoryList.validate!(input[:spot_price_history], context: "#{context}[:spot_price_history]") unless input[:spot_price_history].nil?
      end
    end

    class DescribeStaleSecurityGroupsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeStaleSecurityGroupsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class DescribeStaleSecurityGroupsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeStaleSecurityGroupsOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        StaleSecurityGroupSet.validate!(input[:stale_security_group_set], context: "#{context}[:stale_security_group_set]") unless input[:stale_security_group_set].nil?
      end
    end

    class DescribeStoreImageTasksInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeStoreImageTasksInput, context: context)
        ImageIdList.validate!(input[:image_ids], context: "#{context}[:image_ids]") unless input[:image_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeStoreImageTasksOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeStoreImageTasksOutput, context: context)
        StoreImageTaskResultSet.validate!(input[:store_image_task_results], context: "#{context}[:store_image_task_results]") unless input[:store_image_task_results].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeSubnetsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSubnetsInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        SubnetIdStringList.validate!(input[:subnet_ids], context: "#{context}[:subnet_ids]") unless input[:subnet_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeSubnetsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeSubnetsOutput, context: context)
        SubnetList.validate!(input[:subnets], context: "#{context}[:subnets]") unless input[:subnets].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTagsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTagsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTagsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTagsOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        TagDescriptionList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class DescribeTrafficMirrorFiltersInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTrafficMirrorFiltersInput, context: context)
        TrafficMirrorFilterIdList.validate!(input[:traffic_mirror_filter_ids], context: "#{context}[:traffic_mirror_filter_ids]") unless input[:traffic_mirror_filter_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTrafficMirrorFiltersOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTrafficMirrorFiltersOutput, context: context)
        TrafficMirrorFilterSet.validate!(input[:traffic_mirror_filters], context: "#{context}[:traffic_mirror_filters]") unless input[:traffic_mirror_filters].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTrafficMirrorSessionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTrafficMirrorSessionsInput, context: context)
        TrafficMirrorSessionIdList.validate!(input[:traffic_mirror_session_ids], context: "#{context}[:traffic_mirror_session_ids]") unless input[:traffic_mirror_session_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTrafficMirrorSessionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTrafficMirrorSessionsOutput, context: context)
        TrafficMirrorSessionSet.validate!(input[:traffic_mirror_sessions], context: "#{context}[:traffic_mirror_sessions]") unless input[:traffic_mirror_sessions].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTrafficMirrorTargetsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTrafficMirrorTargetsInput, context: context)
        TrafficMirrorTargetIdList.validate!(input[:traffic_mirror_target_ids], context: "#{context}[:traffic_mirror_target_ids]") unless input[:traffic_mirror_target_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTrafficMirrorTargetsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTrafficMirrorTargetsOutput, context: context)
        TrafficMirrorTargetSet.validate!(input[:traffic_mirror_targets], context: "#{context}[:traffic_mirror_targets]") unless input[:traffic_mirror_targets].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTransitGatewayAttachmentsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewayAttachmentsInput, context: context)
        TransitGatewayAttachmentIdStringList.validate!(input[:transit_gateway_attachment_ids], context: "#{context}[:transit_gateway_attachment_ids]") unless input[:transit_gateway_attachment_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeTransitGatewayAttachmentsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewayAttachmentsOutput, context: context)
        TransitGatewayAttachmentList.validate!(input[:transit_gateway_attachments], context: "#{context}[:transit_gateway_attachments]") unless input[:transit_gateway_attachments].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTransitGatewayConnectPeersInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewayConnectPeersInput, context: context)
        TransitGatewayConnectPeerIdStringList.validate!(input[:transit_gateway_connect_peer_ids], context: "#{context}[:transit_gateway_connect_peer_ids]") unless input[:transit_gateway_connect_peer_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeTransitGatewayConnectPeersOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewayConnectPeersOutput, context: context)
        TransitGatewayConnectPeerList.validate!(input[:transit_gateway_connect_peers], context: "#{context}[:transit_gateway_connect_peers]") unless input[:transit_gateway_connect_peers].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTransitGatewayConnectsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewayConnectsInput, context: context)
        TransitGatewayAttachmentIdStringList.validate!(input[:transit_gateway_attachment_ids], context: "#{context}[:transit_gateway_attachment_ids]") unless input[:transit_gateway_attachment_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeTransitGatewayConnectsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewayConnectsOutput, context: context)
        TransitGatewayConnectList.validate!(input[:transit_gateway_connects], context: "#{context}[:transit_gateway_connects]") unless input[:transit_gateway_connects].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTransitGatewayMulticastDomainsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewayMulticastDomainsInput, context: context)
        TransitGatewayMulticastDomainIdStringList.validate!(input[:transit_gateway_multicast_domain_ids], context: "#{context}[:transit_gateway_multicast_domain_ids]") unless input[:transit_gateway_multicast_domain_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeTransitGatewayMulticastDomainsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewayMulticastDomainsOutput, context: context)
        TransitGatewayMulticastDomainList.validate!(input[:transit_gateway_multicast_domains], context: "#{context}[:transit_gateway_multicast_domains]") unless input[:transit_gateway_multicast_domains].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTransitGatewayPeeringAttachmentsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewayPeeringAttachmentsInput, context: context)
        TransitGatewayAttachmentIdStringList.validate!(input[:transit_gateway_attachment_ids], context: "#{context}[:transit_gateway_attachment_ids]") unless input[:transit_gateway_attachment_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeTransitGatewayPeeringAttachmentsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewayPeeringAttachmentsOutput, context: context)
        TransitGatewayPeeringAttachmentList.validate!(input[:transit_gateway_peering_attachments], context: "#{context}[:transit_gateway_peering_attachments]") unless input[:transit_gateway_peering_attachments].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTransitGatewayRouteTablesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewayRouteTablesInput, context: context)
        TransitGatewayRouteTableIdStringList.validate!(input[:transit_gateway_route_table_ids], context: "#{context}[:transit_gateway_route_table_ids]") unless input[:transit_gateway_route_table_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeTransitGatewayRouteTablesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewayRouteTablesOutput, context: context)
        TransitGatewayRouteTableList.validate!(input[:transit_gateway_route_tables], context: "#{context}[:transit_gateway_route_tables]") unless input[:transit_gateway_route_tables].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTransitGatewayVpcAttachmentsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewayVpcAttachmentsInput, context: context)
        TransitGatewayAttachmentIdStringList.validate!(input[:transit_gateway_attachment_ids], context: "#{context}[:transit_gateway_attachment_ids]") unless input[:transit_gateway_attachment_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeTransitGatewayVpcAttachmentsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewayVpcAttachmentsOutput, context: context)
        TransitGatewayVpcAttachmentList.validate!(input[:transit_gateway_vpc_attachments], context: "#{context}[:transit_gateway_vpc_attachments]") unless input[:transit_gateway_vpc_attachments].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTransitGatewaysInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewaysInput, context: context)
        TransitGatewayIdStringList.validate!(input[:transit_gateway_ids], context: "#{context}[:transit_gateway_ids]") unless input[:transit_gateway_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeTransitGatewaysOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTransitGatewaysOutput, context: context)
        TransitGatewayList.validate!(input[:transit_gateways], context: "#{context}[:transit_gateways]") unless input[:transit_gateways].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeTrunkInterfaceAssociationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTrunkInterfaceAssociationsInput, context: context)
        TrunkInterfaceAssociationIdList.validate!(input[:association_ids], context: "#{context}[:association_ids]") unless input[:association_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeTrunkInterfaceAssociationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeTrunkInterfaceAssociationsOutput, context: context)
        TrunkInterfaceAssociationList.validate!(input[:interface_associations], context: "#{context}[:interface_associations]") unless input[:interface_associations].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVolumeAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVolumeAttributeInput, context: context)
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeVolumeAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVolumeAttributeOutput, context: context)
        AttributeBooleanValue.validate!(input[:auto_enable_io], context: "#{context}[:auto_enable_io]") unless input[:auto_enable_io].nil?
        ProductCodeList.validate!(input[:product_codes], context: "#{context}[:product_codes]") unless input[:product_codes].nil?
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
      end
    end

    class DescribeVolumeStatusInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVolumeStatusInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        VolumeIdStringList.validate!(input[:volume_ids], context: "#{context}[:volume_ids]") unless input[:volume_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeVolumeStatusOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVolumeStatusOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        VolumeStatusList.validate!(input[:volume_statuses], context: "#{context}[:volume_statuses]") unless input[:volume_statuses].nil?
      end
    end

    class DescribeVolumesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVolumesInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        VolumeIdStringList.validate!(input[:volume_ids], context: "#{context}[:volume_ids]") unless input[:volume_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVolumesModificationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVolumesModificationsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        VolumeIdStringList.validate!(input[:volume_ids], context: "#{context}[:volume_ids]") unless input[:volume_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeVolumesModificationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVolumesModificationsOutput, context: context)
        VolumeModificationList.validate!(input[:volumes_modifications], context: "#{context}[:volumes_modifications]") unless input[:volumes_modifications].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVolumesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVolumesOutput, context: context)
        VolumeList.validate!(input[:volumes], context: "#{context}[:volumes]") unless input[:volumes].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVpcAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcAttributeInput, context: context)
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeVpcAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcAttributeOutput, context: context)
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        AttributeBooleanValue.validate!(input[:enable_dns_hostnames], context: "#{context}[:enable_dns_hostnames]") unless input[:enable_dns_hostnames].nil?
        AttributeBooleanValue.validate!(input[:enable_dns_support], context: "#{context}[:enable_dns_support]") unless input[:enable_dns_support].nil?
      end
    end

    class DescribeVpcClassicLinkDnsSupportInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcClassicLinkDnsSupportInput, context: context)
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        VpcClassicLinkIdList.validate!(input[:vpc_ids], context: "#{context}[:vpc_ids]") unless input[:vpc_ids].nil?
      end
    end

    class DescribeVpcClassicLinkDnsSupportOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcClassicLinkDnsSupportOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        ClassicLinkDnsSupportList.validate!(input[:vpcs], context: "#{context}[:vpcs]") unless input[:vpcs].nil?
      end
    end

    class DescribeVpcClassicLinkInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcClassicLinkInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        VpcClassicLinkIdList.validate!(input[:vpc_ids], context: "#{context}[:vpc_ids]") unless input[:vpc_ids].nil?
      end
    end

    class DescribeVpcClassicLinkOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcClassicLinkOutput, context: context)
        VpcClassicLinkList.validate!(input[:vpcs], context: "#{context}[:vpcs]") unless input[:vpcs].nil?
      end
    end

    class DescribeVpcEndpointConnectionNotificationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcEndpointConnectionNotificationsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:connection_notification_id], ::String, context: "#{context}[:connection_notification_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVpcEndpointConnectionNotificationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcEndpointConnectionNotificationsOutput, context: context)
        ConnectionNotificationSet.validate!(input[:connection_notification_set], context: "#{context}[:connection_notification_set]") unless input[:connection_notification_set].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVpcEndpointConnectionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcEndpointConnectionsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVpcEndpointConnectionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcEndpointConnectionsOutput, context: context)
        VpcEndpointConnectionSet.validate!(input[:vpc_endpoint_connections], context: "#{context}[:vpc_endpoint_connections]") unless input[:vpc_endpoint_connections].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVpcEndpointServiceConfigurationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcEndpointServiceConfigurationsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        VpcEndpointServiceIdList.validate!(input[:service_ids], context: "#{context}[:service_ids]") unless input[:service_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVpcEndpointServiceConfigurationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcEndpointServiceConfigurationsOutput, context: context)
        ServiceConfigurationSet.validate!(input[:service_configurations], context: "#{context}[:service_configurations]") unless input[:service_configurations].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVpcEndpointServicePermissionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcEndpointServicePermissionsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:service_id], ::String, context: "#{context}[:service_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVpcEndpointServicePermissionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcEndpointServicePermissionsOutput, context: context)
        AllowedPrincipalSet.validate!(input[:allowed_principals], context: "#{context}[:allowed_principals]") unless input[:allowed_principals].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVpcEndpointServicesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcEndpointServicesInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        ValueStringList.validate!(input[:service_names], context: "#{context}[:service_names]") unless input[:service_names].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVpcEndpointServicesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcEndpointServicesOutput, context: context)
        ValueStringList.validate!(input[:service_names], context: "#{context}[:service_names]") unless input[:service_names].nil?
        ServiceDetailSet.validate!(input[:service_details], context: "#{context}[:service_details]") unless input[:service_details].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVpcEndpointsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcEndpointsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        VpcEndpointIdList.validate!(input[:vpc_endpoint_ids], context: "#{context}[:vpc_endpoint_ids]") unless input[:vpc_endpoint_ids].nil?
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVpcEndpointsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcEndpointsOutput, context: context)
        VpcEndpointSet.validate!(input[:vpc_endpoints], context: "#{context}[:vpc_endpoints]") unless input[:vpc_endpoints].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVpcPeeringConnectionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcPeeringConnectionsInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        VpcPeeringConnectionIdList.validate!(input[:vpc_peering_connection_ids], context: "#{context}[:vpc_peering_connection_ids]") unless input[:vpc_peering_connection_ids].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeVpcPeeringConnectionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcPeeringConnectionsOutput, context: context)
        VpcPeeringConnectionList.validate!(input[:vpc_peering_connections], context: "#{context}[:vpc_peering_connections]") unless input[:vpc_peering_connections].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVpcsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcsInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        VpcIdStringList.validate!(input[:vpc_ids], context: "#{context}[:vpc_ids]") unless input[:vpc_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class DescribeVpcsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpcsOutput, context: context)
        VpcList.validate!(input[:vpcs], context: "#{context}[:vpcs]") unless input[:vpcs].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class DescribeVpnConnectionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpnConnectionsInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        VpnConnectionIdStringList.validate!(input[:vpn_connection_ids], context: "#{context}[:vpn_connection_ids]") unless input[:vpn_connection_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeVpnConnectionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpnConnectionsOutput, context: context)
        VpnConnectionList.validate!(input[:vpn_connections], context: "#{context}[:vpn_connections]") unless input[:vpn_connections].nil?
      end
    end

    class DescribeVpnGatewaysInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpnGatewaysInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        VpnGatewayIdStringList.validate!(input[:vpn_gateway_ids], context: "#{context}[:vpn_gateway_ids]") unless input[:vpn_gateway_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DescribeVpnGatewaysOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DescribeVpnGatewaysOutput, context: context)
        VpnGatewayList.validate!(input[:vpn_gateways], context: "#{context}[:vpn_gateways]") unless input[:vpn_gateways].nil?
      end
    end

    class DestinationOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DestinationOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:file_format], ::String, context: "#{context}[:file_format]")
        Hearth::Validator.validate!(input[:hive_compatible_partitions], ::TrueClass, ::FalseClass, context: "#{context}[:hive_compatible_partitions]")
        Hearth::Validator.validate!(input[:per_hour_partition], ::TrueClass, ::FalseClass, context: "#{context}[:per_hour_partition]")
      end
    end

    class DestinationOptionsResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DestinationOptionsResponse, context: context)
        Hearth::Validator.validate!(input[:file_format], ::String, context: "#{context}[:file_format]")
        Hearth::Validator.validate!(input[:hive_compatible_partitions], ::TrueClass, ::FalseClass, context: "#{context}[:hive_compatible_partitions]")
        Hearth::Validator.validate!(input[:per_hour_partition], ::TrueClass, ::FalseClass, context: "#{context}[:per_hour_partition]")
      end
    end

    class DetachClassicLinkVpcInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DetachClassicLinkVpcInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class DetachClassicLinkVpcOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DetachClassicLinkVpcOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class DetachInternetGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DetachInternetGatewayInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:internet_gateway_id], ::String, context: "#{context}[:internet_gateway_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class DetachInternetGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DetachInternetGatewayOutput, context: context)
      end
    end

    class DetachNetworkInterfaceInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DetachNetworkInterfaceInput, context: context)
        Hearth::Validator.validate!(input[:attachment_id], ::String, context: "#{context}[:attachment_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:force], ::TrueClass, ::FalseClass, context: "#{context}[:force]")
      end
    end

    class DetachNetworkInterfaceOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DetachNetworkInterfaceOutput, context: context)
      end
    end

    class DetachVolumeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DetachVolumeInput, context: context)
        Hearth::Validator.validate!(input[:device], ::String, context: "#{context}[:device]")
        Hearth::Validator.validate!(input[:force], ::TrueClass, ::FalseClass, context: "#{context}[:force]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DetachVolumeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DetachVolumeOutput, context: context)
        Hearth::Validator.validate!(input[:attach_time], ::Time, context: "#{context}[:attach_time]")
        Hearth::Validator.validate!(input[:device], ::String, context: "#{context}[:device]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
      end
    end

    class DetachVpnGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DetachVpnGatewayInput, context: context)
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:vpn_gateway_id], ::String, context: "#{context}[:vpn_gateway_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DetachVpnGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DetachVpnGatewayOutput, context: context)
      end
    end

    class DhcpConfiguration
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DhcpConfiguration, context: context)
        Hearth::Validator.validate!(input[:key], ::String, context: "#{context}[:key]")
        DhcpConfigurationValueList.validate!(input[:values], context: "#{context}[:values]") unless input[:values].nil?
      end
    end

    class DhcpConfigurationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DhcpConfiguration.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DhcpConfigurationValueList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          AttributeValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DhcpOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DhcpOptions, context: context)
        DhcpConfigurationList.validate!(input[:dhcp_configurations], context: "#{context}[:dhcp_configurations]") unless input[:dhcp_configurations].nil?
        Hearth::Validator.validate!(input[:dhcp_options_id], ::String, context: "#{context}[:dhcp_options_id]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class DhcpOptionsIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class DhcpOptionsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DhcpOptions.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DirectoryServiceAuthentication
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DirectoryServiceAuthentication, context: context)
        Hearth::Validator.validate!(input[:directory_id], ::String, context: "#{context}[:directory_id]")
      end
    end

    class DirectoryServiceAuthenticationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DirectoryServiceAuthenticationRequest, context: context)
        Hearth::Validator.validate!(input[:directory_id], ::String, context: "#{context}[:directory_id]")
      end
    end

    class DisableEbsEncryptionByDefaultInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableEbsEncryptionByDefaultInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DisableEbsEncryptionByDefaultOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableEbsEncryptionByDefaultOutput, context: context)
        Hearth::Validator.validate!(input[:ebs_encryption_by_default], ::TrueClass, ::FalseClass, context: "#{context}[:ebs_encryption_by_default]")
      end
    end

    class DisableFastLaunchInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableFastLaunchInput, context: context)
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:force], ::TrueClass, ::FalseClass, context: "#{context}[:force]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DisableFastLaunchOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableFastLaunchOutput, context: context)
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        FastLaunchSnapshotConfigurationResponse.validate!(input[:snapshot_configuration], context: "#{context}[:snapshot_configuration]") unless input[:snapshot_configuration].nil?
        FastLaunchLaunchTemplateSpecificationResponse.validate!(input[:launch_template], context: "#{context}[:launch_template]") unless input[:launch_template].nil?
        Hearth::Validator.validate!(input[:max_parallel_launches], ::Integer, context: "#{context}[:max_parallel_launches]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:state_transition_reason], ::String, context: "#{context}[:state_transition_reason]")
        Hearth::Validator.validate!(input[:state_transition_time], ::Time, context: "#{context}[:state_transition_time]")
      end
    end

    class DisableFastSnapshotRestoreErrorItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableFastSnapshotRestoreErrorItem, context: context)
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        DisableFastSnapshotRestoreStateErrorSet.validate!(input[:fast_snapshot_restore_state_errors], context: "#{context}[:fast_snapshot_restore_state_errors]") unless input[:fast_snapshot_restore_state_errors].nil?
      end
    end

    class DisableFastSnapshotRestoreErrorSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DisableFastSnapshotRestoreErrorItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DisableFastSnapshotRestoreStateError
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableFastSnapshotRestoreStateError, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class DisableFastSnapshotRestoreStateErrorItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableFastSnapshotRestoreStateErrorItem, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        DisableFastSnapshotRestoreStateError.validate!(input[:error], context: "#{context}[:error]") unless input[:error].nil?
      end
    end

    class DisableFastSnapshotRestoreStateErrorSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DisableFastSnapshotRestoreStateErrorItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DisableFastSnapshotRestoreSuccessItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableFastSnapshotRestoreSuccessItem, context: context)
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:state_transition_reason], ::String, context: "#{context}[:state_transition_reason]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:owner_alias], ::String, context: "#{context}[:owner_alias]")
        Hearth::Validator.validate!(input[:enabling_time], ::Time, context: "#{context}[:enabling_time]")
        Hearth::Validator.validate!(input[:optimizing_time], ::Time, context: "#{context}[:optimizing_time]")
        Hearth::Validator.validate!(input[:enabled_time], ::Time, context: "#{context}[:enabled_time]")
        Hearth::Validator.validate!(input[:disabling_time], ::Time, context: "#{context}[:disabling_time]")
        Hearth::Validator.validate!(input[:disabled_time], ::Time, context: "#{context}[:disabled_time]")
      end
    end

    class DisableFastSnapshotRestoreSuccessSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DisableFastSnapshotRestoreSuccessItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DisableFastSnapshotRestoresInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableFastSnapshotRestoresInput, context: context)
        AvailabilityZoneStringList.validate!(input[:availability_zones], context: "#{context}[:availability_zones]") unless input[:availability_zones].nil?
        SnapshotIdStringList.validate!(input[:source_snapshot_ids], context: "#{context}[:source_snapshot_ids]") unless input[:source_snapshot_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DisableFastSnapshotRestoresOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableFastSnapshotRestoresOutput, context: context)
        DisableFastSnapshotRestoreSuccessSet.validate!(input[:successful], context: "#{context}[:successful]") unless input[:successful].nil?
        DisableFastSnapshotRestoreErrorSet.validate!(input[:unsuccessful], context: "#{context}[:unsuccessful]") unless input[:unsuccessful].nil?
      end
    end

    class DisableImageDeprecationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableImageDeprecationInput, context: context)
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DisableImageDeprecationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableImageDeprecationOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class DisableIpamOrganizationAdminAccountInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableIpamOrganizationAdminAccountInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:delegated_admin_account_id], ::String, context: "#{context}[:delegated_admin_account_id]")
      end
    end

    class DisableIpamOrganizationAdminAccountOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableIpamOrganizationAdminAccountOutput, context: context)
        Hearth::Validator.validate!(input[:success], ::TrueClass, ::FalseClass, context: "#{context}[:success]")
      end
    end

    class DisableSerialConsoleAccessInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableSerialConsoleAccessInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DisableSerialConsoleAccessOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableSerialConsoleAccessOutput, context: context)
        Hearth::Validator.validate!(input[:serial_console_access_enabled], ::TrueClass, ::FalseClass, context: "#{context}[:serial_console_access_enabled]")
      end
    end

    class DisableTransitGatewayRouteTablePropagationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableTransitGatewayRouteTablePropagationInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DisableTransitGatewayRouteTablePropagationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableTransitGatewayRouteTablePropagationOutput, context: context)
        TransitGatewayPropagation.validate!(input[:propagation], context: "#{context}[:propagation]") unless input[:propagation].nil?
      end
    end

    class DisableVgwRoutePropagationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableVgwRoutePropagationInput, context: context)
        Hearth::Validator.validate!(input[:gateway_id], ::String, context: "#{context}[:gateway_id]")
        Hearth::Validator.validate!(input[:route_table_id], ::String, context: "#{context}[:route_table_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DisableVgwRoutePropagationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableVgwRoutePropagationOutput, context: context)
      end
    end

    class DisableVpcClassicLinkDnsSupportInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableVpcClassicLinkDnsSupportInput, context: context)
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class DisableVpcClassicLinkDnsSupportOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableVpcClassicLinkDnsSupportOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class DisableVpcClassicLinkInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableVpcClassicLinkInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class DisableVpcClassicLinkOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisableVpcClassicLinkOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class DisassociateAddressInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateAddressInput, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        Hearth::Validator.validate!(input[:public_ip], ::String, context: "#{context}[:public_ip]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DisassociateAddressOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateAddressOutput, context: context)
      end
    end

    class DisassociateClientVpnTargetNetworkInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateClientVpnTargetNetworkInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DisassociateClientVpnTargetNetworkOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateClientVpnTargetNetworkOutput, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        AssociationStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
      end
    end

    class DisassociateEnclaveCertificateIamRoleInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateEnclaveCertificateIamRoleInput, context: context)
        Hearth::Validator.validate!(input[:certificate_arn], ::String, context: "#{context}[:certificate_arn]")
        Hearth::Validator.validate!(input[:role_arn], ::String, context: "#{context}[:role_arn]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DisassociateEnclaveCertificateIamRoleOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateEnclaveCertificateIamRoleOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class DisassociateIamInstanceProfileInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateIamInstanceProfileInput, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
      end
    end

    class DisassociateIamInstanceProfileOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateIamInstanceProfileOutput, context: context)
        IamInstanceProfileAssociation.validate!(input[:iam_instance_profile_association], context: "#{context}[:iam_instance_profile_association]") unless input[:iam_instance_profile_association].nil?
      end
    end

    class DisassociateInstanceEventWindowInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateInstanceEventWindowInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_event_window_id], ::String, context: "#{context}[:instance_event_window_id]")
        InstanceEventWindowDisassociationRequest.validate!(input[:association_target], context: "#{context}[:association_target]") unless input[:association_target].nil?
      end
    end

    class DisassociateInstanceEventWindowOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateInstanceEventWindowOutput, context: context)
        InstanceEventWindow.validate!(input[:instance_event_window], context: "#{context}[:instance_event_window]") unless input[:instance_event_window].nil?
      end
    end

    class DisassociateRouteTableInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateRouteTableInput, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DisassociateRouteTableOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateRouteTableOutput, context: context)
      end
    end

    class DisassociateSubnetCidrBlockInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateSubnetCidrBlockInput, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
      end
    end

    class DisassociateSubnetCidrBlockOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateSubnetCidrBlockOutput, context: context)
        SubnetIpv6CidrBlockAssociation.validate!(input[:ipv6_cidr_block_association], context: "#{context}[:ipv6_cidr_block_association]") unless input[:ipv6_cidr_block_association].nil?
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
      end
    end

    class DisassociateTransitGatewayMulticastDomainInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateTransitGatewayMulticastDomainInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        TransitGatewaySubnetIdList.validate!(input[:subnet_ids], context: "#{context}[:subnet_ids]") unless input[:subnet_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DisassociateTransitGatewayMulticastDomainOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateTransitGatewayMulticastDomainOutput, context: context)
        TransitGatewayMulticastDomainAssociations.validate!(input[:associations], context: "#{context}[:associations]") unless input[:associations].nil?
      end
    end

    class DisassociateTransitGatewayRouteTableInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateTransitGatewayRouteTableInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DisassociateTransitGatewayRouteTableOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateTransitGatewayRouteTableOutput, context: context)
        TransitGatewayAssociation.validate!(input[:association], context: "#{context}[:association]") unless input[:association].nil?
      end
    end

    class DisassociateTrunkInterfaceInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateTrunkInterfaceInput, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class DisassociateTrunkInterfaceOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateTrunkInterfaceOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class DisassociateVpcCidrBlockInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateVpcCidrBlockInput, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
      end
    end

    class DisassociateVpcCidrBlockOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DisassociateVpcCidrBlockOutput, context: context)
        VpcIpv6CidrBlockAssociation.validate!(input[:ipv6_cidr_block_association], context: "#{context}[:ipv6_cidr_block_association]") unless input[:ipv6_cidr_block_association].nil?
        VpcCidrBlockAssociation.validate!(input[:cidr_block_association], context: "#{context}[:cidr_block_association]") unless input[:cidr_block_association].nil?
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class DiskImage
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DiskImage, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        DiskImageDetail.validate!(input[:image], context: "#{context}[:image]") unless input[:image].nil?
        VolumeDetail.validate!(input[:volume], context: "#{context}[:volume]") unless input[:volume].nil?
      end
    end

    class DiskImageDescription
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DiskImageDescription, context: context)
        Hearth::Validator.validate!(input[:checksum], ::String, context: "#{context}[:checksum]")
        Hearth::Validator.validate!(input[:format], ::String, context: "#{context}[:format]")
        Hearth::Validator.validate!(input[:import_manifest_url], ::String, context: "#{context}[:import_manifest_url]")
        Hearth::Validator.validate!(input[:size], ::Integer, context: "#{context}[:size]")
      end
    end

    class DiskImageDetail
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DiskImageDetail, context: context)
        Hearth::Validator.validate!(input[:bytes], ::Integer, context: "#{context}[:bytes]")
        Hearth::Validator.validate!(input[:format], ::String, context: "#{context}[:format]")
        Hearth::Validator.validate!(input[:import_manifest_url], ::String, context: "#{context}[:import_manifest_url]")
      end
    end

    class DiskImageList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DiskImage.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DiskImageVolumeDescription
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DiskImageVolumeDescription, context: context)
        Hearth::Validator.validate!(input[:id], ::String, context: "#{context}[:id]")
        Hearth::Validator.validate!(input[:size], ::Integer, context: "#{context}[:size]")
      end
    end

    class DiskInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DiskInfo, context: context)
        Hearth::Validator.validate!(input[:size_in_gb], ::Integer, context: "#{context}[:size_in_gb]")
        Hearth::Validator.validate!(input[:count], ::Integer, context: "#{context}[:count]")
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
      end
    end

    class DiskInfoList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DiskInfo.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DnsEntry
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DnsEntry, context: context)
        Hearth::Validator.validate!(input[:dns_name], ::String, context: "#{context}[:dns_name]")
        Hearth::Validator.validate!(input[:hosted_zone_id], ::String, context: "#{context}[:hosted_zone_id]")
      end
    end

    class DnsEntrySet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          DnsEntry.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class DnsOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DnsOptions, context: context)
        Hearth::Validator.validate!(input[:dns_record_ip_type], ::String, context: "#{context}[:dns_record_ip_type]")
      end
    end

    class DnsOptionsSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DnsOptionsSpecification, context: context)
        Hearth::Validator.validate!(input[:dns_record_ip_type], ::String, context: "#{context}[:dns_record_ip_type]")
      end
    end

    class DnsServersOptionsModifyStructure
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::DnsServersOptionsModifyStructure, context: context)
        ValueStringList.validate!(input[:custom_dns_servers], context: "#{context}[:custom_dns_servers]") unless input[:custom_dns_servers].nil?
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
      end
    end

    class EbsBlockDevice
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EbsBlockDevice, context: context)
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
        Hearth::Validator.validate!(input[:iops], ::Integer, context: "#{context}[:iops]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:volume_size], ::Integer, context: "#{context}[:volume_size]")
        Hearth::Validator.validate!(input[:volume_type], ::String, context: "#{context}[:volume_type]")
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:throughput], ::Integer, context: "#{context}[:throughput]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
      end
    end

    class EbsInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EbsInfo, context: context)
        Hearth::Validator.validate!(input[:ebs_optimized_support], ::String, context: "#{context}[:ebs_optimized_support]")
        Hearth::Validator.validate!(input[:encryption_support], ::String, context: "#{context}[:encryption_support]")
        EbsOptimizedInfo.validate!(input[:ebs_optimized_info], context: "#{context}[:ebs_optimized_info]") unless input[:ebs_optimized_info].nil?
        Hearth::Validator.validate!(input[:nvme_support], ::String, context: "#{context}[:nvme_support]")
      end
    end

    class EbsInstanceBlockDevice
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EbsInstanceBlockDevice, context: context)
        Hearth::Validator.validate!(input[:attach_time], ::Time, context: "#{context}[:attach_time]")
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
      end
    end

    class EbsInstanceBlockDeviceSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EbsInstanceBlockDeviceSpecification, context: context)
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
      end
    end

    class EbsOptimizedInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EbsOptimizedInfo, context: context)
        Hearth::Validator.validate!(input[:baseline_bandwidth_in_mbps], ::Integer, context: "#{context}[:baseline_bandwidth_in_mbps]")
        Hearth::Validator.validate!(input[:baseline_throughput_in_m_bps], ::Float, context: "#{context}[:baseline_throughput_in_m_bps]")
        Hearth::Validator.validate!(input[:baseline_iops], ::Integer, context: "#{context}[:baseline_iops]")
        Hearth::Validator.validate!(input[:maximum_bandwidth_in_mbps], ::Integer, context: "#{context}[:maximum_bandwidth_in_mbps]")
        Hearth::Validator.validate!(input[:maximum_throughput_in_m_bps], ::Float, context: "#{context}[:maximum_throughput_in_m_bps]")
        Hearth::Validator.validate!(input[:maximum_iops], ::Integer, context: "#{context}[:maximum_iops]")
      end
    end

    class EfaInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EfaInfo, context: context)
        Hearth::Validator.validate!(input[:maximum_efa_interfaces], ::Integer, context: "#{context}[:maximum_efa_interfaces]")
      end
    end

    class EgressOnlyInternetGateway
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EgressOnlyInternetGateway, context: context)
        InternetGatewayAttachmentList.validate!(input[:attachments], context: "#{context}[:attachments]") unless input[:attachments].nil?
        Hearth::Validator.validate!(input[:egress_only_internet_gateway_id], ::String, context: "#{context}[:egress_only_internet_gateway_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class EgressOnlyInternetGatewayIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class EgressOnlyInternetGatewayList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          EgressOnlyInternetGateway.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ElasticGpuAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ElasticGpuAssociation, context: context)
        Hearth::Validator.validate!(input[:elastic_gpu_id], ::String, context: "#{context}[:elastic_gpu_id]")
        Hearth::Validator.validate!(input[:elastic_gpu_association_id], ::String, context: "#{context}[:elastic_gpu_association_id]")
        Hearth::Validator.validate!(input[:elastic_gpu_association_state], ::String, context: "#{context}[:elastic_gpu_association_state]")
        Hearth::Validator.validate!(input[:elastic_gpu_association_time], ::String, context: "#{context}[:elastic_gpu_association_time]")
      end
    end

    class ElasticGpuAssociationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ElasticGpuAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ElasticGpuHealth
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ElasticGpuHealth, context: context)
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
      end
    end

    class ElasticGpuIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ElasticGpuSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ElasticGpus.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ElasticGpuSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ElasticGpuSpecification, context: context)
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
      end
    end

    class ElasticGpuSpecificationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ElasticGpuSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ElasticGpuSpecificationResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ElasticGpuSpecificationResponse, context: context)
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
      end
    end

    class ElasticGpuSpecificationResponseList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ElasticGpuSpecificationResponse.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ElasticGpuSpecifications
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ElasticGpuSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ElasticGpus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ElasticGpus, context: context)
        Hearth::Validator.validate!(input[:elastic_gpu_id], ::String, context: "#{context}[:elastic_gpu_id]")
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:elastic_gpu_type], ::String, context: "#{context}[:elastic_gpu_type]")
        ElasticGpuHealth.validate!(input[:elastic_gpu_health], context: "#{context}[:elastic_gpu_health]") unless input[:elastic_gpu_health].nil?
        Hearth::Validator.validate!(input[:elastic_gpu_state], ::String, context: "#{context}[:elastic_gpu_state]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class ElasticInferenceAccelerator
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ElasticInferenceAccelerator, context: context)
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:count], ::Integer, context: "#{context}[:count]")
      end
    end

    class ElasticInferenceAcceleratorAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ElasticInferenceAcceleratorAssociation, context: context)
        Hearth::Validator.validate!(input[:elastic_inference_accelerator_arn], ::String, context: "#{context}[:elastic_inference_accelerator_arn]")
        Hearth::Validator.validate!(input[:elastic_inference_accelerator_association_id], ::String, context: "#{context}[:elastic_inference_accelerator_association_id]")
        Hearth::Validator.validate!(input[:elastic_inference_accelerator_association_state], ::String, context: "#{context}[:elastic_inference_accelerator_association_state]")
        Hearth::Validator.validate!(input[:elastic_inference_accelerator_association_time], ::Time, context: "#{context}[:elastic_inference_accelerator_association_time]")
      end
    end

    class ElasticInferenceAcceleratorAssociationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ElasticInferenceAcceleratorAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ElasticInferenceAccelerators
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ElasticInferenceAccelerator.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class EnableEbsEncryptionByDefaultInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableEbsEncryptionByDefaultInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class EnableEbsEncryptionByDefaultOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableEbsEncryptionByDefaultOutput, context: context)
        Hearth::Validator.validate!(input[:ebs_encryption_by_default], ::TrueClass, ::FalseClass, context: "#{context}[:ebs_encryption_by_default]")
      end
    end

    class EnableFastLaunchInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableFastLaunchInput, context: context)
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        FastLaunchSnapshotConfigurationRequest.validate!(input[:snapshot_configuration], context: "#{context}[:snapshot_configuration]") unless input[:snapshot_configuration].nil?
        FastLaunchLaunchTemplateSpecificationRequest.validate!(input[:launch_template], context: "#{context}[:launch_template]") unless input[:launch_template].nil?
        Hearth::Validator.validate!(input[:max_parallel_launches], ::Integer, context: "#{context}[:max_parallel_launches]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class EnableFastLaunchOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableFastLaunchOutput, context: context)
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        FastLaunchSnapshotConfigurationResponse.validate!(input[:snapshot_configuration], context: "#{context}[:snapshot_configuration]") unless input[:snapshot_configuration].nil?
        FastLaunchLaunchTemplateSpecificationResponse.validate!(input[:launch_template], context: "#{context}[:launch_template]") unless input[:launch_template].nil?
        Hearth::Validator.validate!(input[:max_parallel_launches], ::Integer, context: "#{context}[:max_parallel_launches]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:state_transition_reason], ::String, context: "#{context}[:state_transition_reason]")
        Hearth::Validator.validate!(input[:state_transition_time], ::Time, context: "#{context}[:state_transition_time]")
      end
    end

    class EnableFastSnapshotRestoreErrorItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableFastSnapshotRestoreErrorItem, context: context)
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        EnableFastSnapshotRestoreStateErrorSet.validate!(input[:fast_snapshot_restore_state_errors], context: "#{context}[:fast_snapshot_restore_state_errors]") unless input[:fast_snapshot_restore_state_errors].nil?
      end
    end

    class EnableFastSnapshotRestoreErrorSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          EnableFastSnapshotRestoreErrorItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class EnableFastSnapshotRestoreStateError
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableFastSnapshotRestoreStateError, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class EnableFastSnapshotRestoreStateErrorItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableFastSnapshotRestoreStateErrorItem, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        EnableFastSnapshotRestoreStateError.validate!(input[:error], context: "#{context}[:error]") unless input[:error].nil?
      end
    end

    class EnableFastSnapshotRestoreStateErrorSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          EnableFastSnapshotRestoreStateErrorItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class EnableFastSnapshotRestoreSuccessItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableFastSnapshotRestoreSuccessItem, context: context)
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:state_transition_reason], ::String, context: "#{context}[:state_transition_reason]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:owner_alias], ::String, context: "#{context}[:owner_alias]")
        Hearth::Validator.validate!(input[:enabling_time], ::Time, context: "#{context}[:enabling_time]")
        Hearth::Validator.validate!(input[:optimizing_time], ::Time, context: "#{context}[:optimizing_time]")
        Hearth::Validator.validate!(input[:enabled_time], ::Time, context: "#{context}[:enabled_time]")
        Hearth::Validator.validate!(input[:disabling_time], ::Time, context: "#{context}[:disabling_time]")
        Hearth::Validator.validate!(input[:disabled_time], ::Time, context: "#{context}[:disabled_time]")
      end
    end

    class EnableFastSnapshotRestoreSuccessSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          EnableFastSnapshotRestoreSuccessItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class EnableFastSnapshotRestoresInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableFastSnapshotRestoresInput, context: context)
        AvailabilityZoneStringList.validate!(input[:availability_zones], context: "#{context}[:availability_zones]") unless input[:availability_zones].nil?
        SnapshotIdStringList.validate!(input[:source_snapshot_ids], context: "#{context}[:source_snapshot_ids]") unless input[:source_snapshot_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class EnableFastSnapshotRestoresOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableFastSnapshotRestoresOutput, context: context)
        EnableFastSnapshotRestoreSuccessSet.validate!(input[:successful], context: "#{context}[:successful]") unless input[:successful].nil?
        EnableFastSnapshotRestoreErrorSet.validate!(input[:unsuccessful], context: "#{context}[:unsuccessful]") unless input[:unsuccessful].nil?
      end
    end

    class EnableImageDeprecationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableImageDeprecationInput, context: context)
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:deprecate_at], ::Time, context: "#{context}[:deprecate_at]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class EnableImageDeprecationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableImageDeprecationOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class EnableIpamOrganizationAdminAccountInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableIpamOrganizationAdminAccountInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:delegated_admin_account_id], ::String, context: "#{context}[:delegated_admin_account_id]")
      end
    end

    class EnableIpamOrganizationAdminAccountOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableIpamOrganizationAdminAccountOutput, context: context)
        Hearth::Validator.validate!(input[:success], ::TrueClass, ::FalseClass, context: "#{context}[:success]")
      end
    end

    class EnableSerialConsoleAccessInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableSerialConsoleAccessInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class EnableSerialConsoleAccessOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableSerialConsoleAccessOutput, context: context)
        Hearth::Validator.validate!(input[:serial_console_access_enabled], ::TrueClass, ::FalseClass, context: "#{context}[:serial_console_access_enabled]")
      end
    end

    class EnableTransitGatewayRouteTablePropagationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableTransitGatewayRouteTablePropagationInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class EnableTransitGatewayRouteTablePropagationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableTransitGatewayRouteTablePropagationOutput, context: context)
        TransitGatewayPropagation.validate!(input[:propagation], context: "#{context}[:propagation]") unless input[:propagation].nil?
      end
    end

    class EnableVgwRoutePropagationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableVgwRoutePropagationInput, context: context)
        Hearth::Validator.validate!(input[:gateway_id], ::String, context: "#{context}[:gateway_id]")
        Hearth::Validator.validate!(input[:route_table_id], ::String, context: "#{context}[:route_table_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class EnableVgwRoutePropagationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableVgwRoutePropagationOutput, context: context)
      end
    end

    class EnableVolumeIOInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableVolumeIOInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
      end
    end

    class EnableVolumeIOOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableVolumeIOOutput, context: context)
      end
    end

    class EnableVpcClassicLinkDnsSupportInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableVpcClassicLinkDnsSupportInput, context: context)
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class EnableVpcClassicLinkDnsSupportOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableVpcClassicLinkDnsSupportOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class EnableVpcClassicLinkInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableVpcClassicLinkInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class EnableVpcClassicLinkOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnableVpcClassicLinkOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class EnclaveOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnclaveOptions, context: context)
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
      end
    end

    class EnclaveOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EnclaveOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
      end
    end

    class EndpointSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ClientVpnEndpoint.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ErrorSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ValidationError.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class EventInformation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::EventInformation, context: context)
        Hearth::Validator.validate!(input[:event_description], ::String, context: "#{context}[:event_description]")
        Hearth::Validator.validate!(input[:event_sub_type], ::String, context: "#{context}[:event_sub_type]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
      end
    end

    class ExcludedInstanceTypeSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ExecutableByStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class Explanation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Explanation, context: context)
        AnalysisComponent.validate!(input[:acl], context: "#{context}[:acl]") unless input[:acl].nil?
        AnalysisAclRule.validate!(input[:acl_rule], context: "#{context}[:acl_rule]") unless input[:acl_rule].nil?
        Hearth::Validator.validate!(input[:address], ::String, context: "#{context}[:address]")
        IpAddressList.validate!(input[:addresses], context: "#{context}[:addresses]") unless input[:addresses].nil?
        AnalysisComponent.validate!(input[:attached_to], context: "#{context}[:attached_to]") unless input[:attached_to].nil?
        ValueStringList.validate!(input[:availability_zones], context: "#{context}[:availability_zones]") unless input[:availability_zones].nil?
        ValueStringList.validate!(input[:cidrs], context: "#{context}[:cidrs]") unless input[:cidrs].nil?
        AnalysisComponent.validate!(input[:component], context: "#{context}[:component]") unless input[:component].nil?
        AnalysisComponent.validate!(input[:customer_gateway], context: "#{context}[:customer_gateway]") unless input[:customer_gateway].nil?
        AnalysisComponent.validate!(input[:destination], context: "#{context}[:destination]") unless input[:destination].nil?
        AnalysisComponent.validate!(input[:destination_vpc], context: "#{context}[:destination_vpc]") unless input[:destination_vpc].nil?
        Hearth::Validator.validate!(input[:direction], ::String, context: "#{context}[:direction]")
        Hearth::Validator.validate!(input[:explanation_code], ::String, context: "#{context}[:explanation_code]")
        AnalysisComponent.validate!(input[:ingress_route_table], context: "#{context}[:ingress_route_table]") unless input[:ingress_route_table].nil?
        AnalysisComponent.validate!(input[:internet_gateway], context: "#{context}[:internet_gateway]") unless input[:internet_gateway].nil?
        Hearth::Validator.validate!(input[:load_balancer_arn], ::String, context: "#{context}[:load_balancer_arn]")
        AnalysisLoadBalancerListener.validate!(input[:classic_load_balancer_listener], context: "#{context}[:classic_load_balancer_listener]") unless input[:classic_load_balancer_listener].nil?
        Hearth::Validator.validate!(input[:load_balancer_listener_port], ::Integer, context: "#{context}[:load_balancer_listener_port]")
        AnalysisLoadBalancerTarget.validate!(input[:load_balancer_target], context: "#{context}[:load_balancer_target]") unless input[:load_balancer_target].nil?
        AnalysisComponent.validate!(input[:load_balancer_target_group], context: "#{context}[:load_balancer_target_group]") unless input[:load_balancer_target_group].nil?
        AnalysisComponentList.validate!(input[:load_balancer_target_groups], context: "#{context}[:load_balancer_target_groups]") unless input[:load_balancer_target_groups].nil?
        Hearth::Validator.validate!(input[:load_balancer_target_port], ::Integer, context: "#{context}[:load_balancer_target_port]")
        AnalysisComponent.validate!(input[:elastic_load_balancer_listener], context: "#{context}[:elastic_load_balancer_listener]") unless input[:elastic_load_balancer_listener].nil?
        Hearth::Validator.validate!(input[:missing_component], ::String, context: "#{context}[:missing_component]")
        AnalysisComponent.validate!(input[:nat_gateway], context: "#{context}[:nat_gateway]") unless input[:nat_gateway].nil?
        AnalysisComponent.validate!(input[:network_interface], context: "#{context}[:network_interface]") unless input[:network_interface].nil?
        Hearth::Validator.validate!(input[:packet_field], ::String, context: "#{context}[:packet_field]")
        AnalysisComponent.validate!(input[:vpc_peering_connection], context: "#{context}[:vpc_peering_connection]") unless input[:vpc_peering_connection].nil?
        Hearth::Validator.validate!(input[:port], ::Integer, context: "#{context}[:port]")
        PortRangeList.validate!(input[:port_ranges], context: "#{context}[:port_ranges]") unless input[:port_ranges].nil?
        AnalysisComponent.validate!(input[:prefix_list], context: "#{context}[:prefix_list]") unless input[:prefix_list].nil?
        StringList.validate!(input[:protocols], context: "#{context}[:protocols]") unless input[:protocols].nil?
        AnalysisRouteTableRoute.validate!(input[:route_table_route], context: "#{context}[:route_table_route]") unless input[:route_table_route].nil?
        AnalysisComponent.validate!(input[:route_table], context: "#{context}[:route_table]") unless input[:route_table].nil?
        AnalysisComponent.validate!(input[:security_group], context: "#{context}[:security_group]") unless input[:security_group].nil?
        AnalysisSecurityGroupRule.validate!(input[:security_group_rule], context: "#{context}[:security_group_rule]") unless input[:security_group_rule].nil?
        AnalysisComponentList.validate!(input[:security_groups], context: "#{context}[:security_groups]") unless input[:security_groups].nil?
        AnalysisComponent.validate!(input[:source_vpc], context: "#{context}[:source_vpc]") unless input[:source_vpc].nil?
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        AnalysisComponent.validate!(input[:subnet], context: "#{context}[:subnet]") unless input[:subnet].nil?
        AnalysisComponent.validate!(input[:subnet_route_table], context: "#{context}[:subnet_route_table]") unless input[:subnet_route_table].nil?
        AnalysisComponent.validate!(input[:vpc], context: "#{context}[:vpc]") unless input[:vpc].nil?
        AnalysisComponent.validate!(input[:vpc_endpoint], context: "#{context}[:vpc_endpoint]") unless input[:vpc_endpoint].nil?
        AnalysisComponent.validate!(input[:vpn_connection], context: "#{context}[:vpn_connection]") unless input[:vpn_connection].nil?
        AnalysisComponent.validate!(input[:vpn_gateway], context: "#{context}[:vpn_gateway]") unless input[:vpn_gateway].nil?
        AnalysisComponent.validate!(input[:transit_gateway], context: "#{context}[:transit_gateway]") unless input[:transit_gateway].nil?
        AnalysisComponent.validate!(input[:transit_gateway_route_table], context: "#{context}[:transit_gateway_route_table]") unless input[:transit_gateway_route_table].nil?
        TransitGatewayRouteTableRoute.validate!(input[:transit_gateway_route_table_route], context: "#{context}[:transit_gateway_route_table_route]") unless input[:transit_gateway_route_table_route].nil?
        AnalysisComponent.validate!(input[:transit_gateway_attachment], context: "#{context}[:transit_gateway_attachment]") unless input[:transit_gateway_attachment].nil?
      end
    end

    class ExplanationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Explanation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ExportClientVpnClientCertificateRevocationListInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ExportClientVpnClientCertificateRevocationListInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ExportClientVpnClientCertificateRevocationListOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ExportClientVpnClientCertificateRevocationListOutput, context: context)
        Hearth::Validator.validate!(input[:certificate_revocation_list], ::String, context: "#{context}[:certificate_revocation_list]")
        ClientCertificateRevocationListStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
      end
    end

    class ExportClientVpnClientConfigurationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ExportClientVpnClientConfigurationInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ExportClientVpnClientConfigurationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ExportClientVpnClientConfigurationOutput, context: context)
        Hearth::Validator.validate!(input[:client_configuration], ::String, context: "#{context}[:client_configuration]")
      end
    end

    class ExportImageInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ExportImageInput, context: context)
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:disk_image_format], ::String, context: "#{context}[:disk_image_format]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        ExportTaskS3LocationRequest.validate!(input[:s3_export_location], context: "#{context}[:s3_export_location]") unless input[:s3_export_location].nil?
        Hearth::Validator.validate!(input[:role_name], ::String, context: "#{context}[:role_name]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class ExportImageOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ExportImageOutput, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:disk_image_format], ::String, context: "#{context}[:disk_image_format]")
        Hearth::Validator.validate!(input[:export_image_task_id], ::String, context: "#{context}[:export_image_task_id]")
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:role_name], ::String, context: "#{context}[:role_name]")
        Hearth::Validator.validate!(input[:progress], ::String, context: "#{context}[:progress]")
        ExportTaskS3Location.validate!(input[:s3_export_location], context: "#{context}[:s3_export_location]") unless input[:s3_export_location].nil?
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class ExportImageTask
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ExportImageTask, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:export_image_task_id], ::String, context: "#{context}[:export_image_task_id]")
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:progress], ::String, context: "#{context}[:progress]")
        ExportTaskS3Location.validate!(input[:s3_export_location], context: "#{context}[:s3_export_location]") unless input[:s3_export_location].nil?
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class ExportImageTaskIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ExportImageTaskList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ExportImageTask.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ExportTask
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ExportTask, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:export_task_id], ::String, context: "#{context}[:export_task_id]")
        ExportToS3Task.validate!(input[:export_to_s3_task], context: "#{context}[:export_to_s3_task]") unless input[:export_to_s3_task].nil?
        InstanceExportDetails.validate!(input[:instance_export_details], context: "#{context}[:instance_export_details]") unless input[:instance_export_details].nil?
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class ExportTaskIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ExportTaskList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ExportTask.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ExportTaskS3Location
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ExportTaskS3Location, context: context)
        Hearth::Validator.validate!(input[:s3_bucket], ::String, context: "#{context}[:s3_bucket]")
        Hearth::Validator.validate!(input[:s3_prefix], ::String, context: "#{context}[:s3_prefix]")
      end
    end

    class ExportTaskS3LocationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ExportTaskS3LocationRequest, context: context)
        Hearth::Validator.validate!(input[:s3_bucket], ::String, context: "#{context}[:s3_bucket]")
        Hearth::Validator.validate!(input[:s3_prefix], ::String, context: "#{context}[:s3_prefix]")
      end
    end

    class ExportToS3Task
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ExportToS3Task, context: context)
        Hearth::Validator.validate!(input[:container_format], ::String, context: "#{context}[:container_format]")
        Hearth::Validator.validate!(input[:disk_image_format], ::String, context: "#{context}[:disk_image_format]")
        Hearth::Validator.validate!(input[:s3_bucket], ::String, context: "#{context}[:s3_bucket]")
        Hearth::Validator.validate!(input[:s3_key], ::String, context: "#{context}[:s3_key]")
      end
    end

    class ExportToS3TaskSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ExportToS3TaskSpecification, context: context)
        Hearth::Validator.validate!(input[:container_format], ::String, context: "#{context}[:container_format]")
        Hearth::Validator.validate!(input[:disk_image_format], ::String, context: "#{context}[:disk_image_format]")
        Hearth::Validator.validate!(input[:s3_bucket], ::String, context: "#{context}[:s3_bucket]")
        Hearth::Validator.validate!(input[:s3_prefix], ::String, context: "#{context}[:s3_prefix]")
      end
    end

    class ExportTransitGatewayRoutesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ExportTransitGatewayRoutesInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:s3_bucket], ::String, context: "#{context}[:s3_bucket]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ExportTransitGatewayRoutesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ExportTransitGatewayRoutesOutput, context: context)
        Hearth::Validator.validate!(input[:s3_location], ::String, context: "#{context}[:s3_location]")
      end
    end

    class FailedCapacityReservationFleetCancellationResult
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FailedCapacityReservationFleetCancellationResult, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_fleet_id], ::String, context: "#{context}[:capacity_reservation_fleet_id]")
        CancelCapacityReservationFleetError.validate!(input[:cancel_capacity_reservation_fleet_error], context: "#{context}[:cancel_capacity_reservation_fleet_error]") unless input[:cancel_capacity_reservation_fleet_error].nil?
      end
    end

    class FailedCapacityReservationFleetCancellationResultSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          FailedCapacityReservationFleetCancellationResult.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class FailedQueuedPurchaseDeletion
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FailedQueuedPurchaseDeletion, context: context)
        DeleteQueuedReservedInstancesError.validate!(input[:error], context: "#{context}[:error]") unless input[:error].nil?
        Hearth::Validator.validate!(input[:reserved_instances_id], ::String, context: "#{context}[:reserved_instances_id]")
      end
    end

    class FailedQueuedPurchaseDeletionSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          FailedQueuedPurchaseDeletion.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class FastLaunchImageIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class FastLaunchLaunchTemplateSpecificationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FastLaunchLaunchTemplateSpecificationRequest, context: context)
        Hearth::Validator.validate!(input[:launch_template_id], ::String, context: "#{context}[:launch_template_id]")
        Hearth::Validator.validate!(input[:launch_template_name], ::String, context: "#{context}[:launch_template_name]")
        Hearth::Validator.validate!(input[:version], ::String, context: "#{context}[:version]")
      end
    end

    class FastLaunchLaunchTemplateSpecificationResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FastLaunchLaunchTemplateSpecificationResponse, context: context)
        Hearth::Validator.validate!(input[:launch_template_id], ::String, context: "#{context}[:launch_template_id]")
        Hearth::Validator.validate!(input[:launch_template_name], ::String, context: "#{context}[:launch_template_name]")
        Hearth::Validator.validate!(input[:version], ::String, context: "#{context}[:version]")
      end
    end

    class FastLaunchSnapshotConfigurationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FastLaunchSnapshotConfigurationRequest, context: context)
        Hearth::Validator.validate!(input[:target_resource_count], ::Integer, context: "#{context}[:target_resource_count]")
      end
    end

    class FastLaunchSnapshotConfigurationResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FastLaunchSnapshotConfigurationResponse, context: context)
        Hearth::Validator.validate!(input[:target_resource_count], ::Integer, context: "#{context}[:target_resource_count]")
      end
    end

    class FederatedAuthentication
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FederatedAuthentication, context: context)
        Hearth::Validator.validate!(input[:saml_provider_arn], ::String, context: "#{context}[:saml_provider_arn]")
        Hearth::Validator.validate!(input[:self_service_saml_provider_arn], ::String, context: "#{context}[:self_service_saml_provider_arn]")
      end
    end

    class FederatedAuthenticationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FederatedAuthenticationRequest, context: context)
        Hearth::Validator.validate!(input[:saml_provider_arn], ::String, context: "#{context}[:saml_provider_arn]")
        Hearth::Validator.validate!(input[:self_service_saml_provider_arn], ::String, context: "#{context}[:self_service_saml_provider_arn]")
      end
    end

    class Filter
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Filter, context: context)
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        ValueStringList.validate!(input[:values], context: "#{context}[:values]") unless input[:values].nil?
      end
    end

    class FilterList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Filter.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class FleetCapacityReservation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FleetCapacityReservation, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_id], ::String, context: "#{context}[:capacity_reservation_id]")
        Hearth::Validator.validate!(input[:availability_zone_id], ::String, context: "#{context}[:availability_zone_id]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:instance_platform], ::String, context: "#{context}[:instance_platform]")
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:total_instance_count], ::Integer, context: "#{context}[:total_instance_count]")
        Hearth::Validator.validate!(input[:fulfilled_capacity], ::Float, context: "#{context}[:fulfilled_capacity]")
        Hearth::Validator.validate!(input[:ebs_optimized], ::TrueClass, ::FalseClass, context: "#{context}[:ebs_optimized]")
        Hearth::Validator.validate!(input[:create_date], ::Time, context: "#{context}[:create_date]")
        Hearth::Validator.validate!(input[:weight], ::Float, context: "#{context}[:weight]")
        Hearth::Validator.validate!(input[:priority], ::Integer, context: "#{context}[:priority]")
      end
    end

    class FleetCapacityReservationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          FleetCapacityReservation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class FleetData
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FleetData, context: context)
        Hearth::Validator.validate!(input[:activity_status], ::String, context: "#{context}[:activity_status]")
        Hearth::Validator.validate!(input[:create_time], ::Time, context: "#{context}[:create_time]")
        Hearth::Validator.validate!(input[:fleet_id], ::String, context: "#{context}[:fleet_id]")
        Hearth::Validator.validate!(input[:fleet_state], ::String, context: "#{context}[:fleet_state]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:excess_capacity_termination_policy], ::String, context: "#{context}[:excess_capacity_termination_policy]")
        Hearth::Validator.validate!(input[:fulfilled_capacity], ::Float, context: "#{context}[:fulfilled_capacity]")
        Hearth::Validator.validate!(input[:fulfilled_on_demand_capacity], ::Float, context: "#{context}[:fulfilled_on_demand_capacity]")
        FleetLaunchTemplateConfigList.validate!(input[:launch_template_configs], context: "#{context}[:launch_template_configs]") unless input[:launch_template_configs].nil?
        TargetCapacitySpecification.validate!(input[:target_capacity_specification], context: "#{context}[:target_capacity_specification]") unless input[:target_capacity_specification].nil?
        Hearth::Validator.validate!(input[:terminate_instances_with_expiration], ::TrueClass, ::FalseClass, context: "#{context}[:terminate_instances_with_expiration]")
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:valid_from], ::Time, context: "#{context}[:valid_from]")
        Hearth::Validator.validate!(input[:valid_until], ::Time, context: "#{context}[:valid_until]")
        Hearth::Validator.validate!(input[:replace_unhealthy_instances], ::TrueClass, ::FalseClass, context: "#{context}[:replace_unhealthy_instances]")
        SpotOptions.validate!(input[:spot_options], context: "#{context}[:spot_options]") unless input[:spot_options].nil?
        OnDemandOptions.validate!(input[:on_demand_options], context: "#{context}[:on_demand_options]") unless input[:on_demand_options].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        DescribeFleetsErrorSet.validate!(input[:errors], context: "#{context}[:errors]") unless input[:errors].nil?
        DescribeFleetsInstancesSet.validate!(input[:instances], context: "#{context}[:instances]") unless input[:instances].nil?
        Hearth::Validator.validate!(input[:context], ::String, context: "#{context}[:context]")
      end
    end

    class FleetIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class FleetLaunchTemplateConfig
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FleetLaunchTemplateConfig, context: context)
        FleetLaunchTemplateSpecification.validate!(input[:launch_template_specification], context: "#{context}[:launch_template_specification]") unless input[:launch_template_specification].nil?
        FleetLaunchTemplateOverridesList.validate!(input[:overrides], context: "#{context}[:overrides]") unless input[:overrides].nil?
      end
    end

    class FleetLaunchTemplateConfigList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          FleetLaunchTemplateConfig.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class FleetLaunchTemplateConfigListRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          FleetLaunchTemplateConfigRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class FleetLaunchTemplateConfigRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FleetLaunchTemplateConfigRequest, context: context)
        FleetLaunchTemplateSpecificationRequest.validate!(input[:launch_template_specification], context: "#{context}[:launch_template_specification]") unless input[:launch_template_specification].nil?
        FleetLaunchTemplateOverridesListRequest.validate!(input[:overrides], context: "#{context}[:overrides]") unless input[:overrides].nil?
      end
    end

    class FleetLaunchTemplateOverrides
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FleetLaunchTemplateOverrides, context: context)
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:max_price], ::String, context: "#{context}[:max_price]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:weighted_capacity], ::Float, context: "#{context}[:weighted_capacity]")
        Hearth::Validator.validate!(input[:priority], ::Float, context: "#{context}[:priority]")
        PlacementResponse.validate!(input[:placement], context: "#{context}[:placement]") unless input[:placement].nil?
        InstanceRequirements.validate!(input[:instance_requirements], context: "#{context}[:instance_requirements]") unless input[:instance_requirements].nil?
      end
    end

    class FleetLaunchTemplateOverridesList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          FleetLaunchTemplateOverrides.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class FleetLaunchTemplateOverridesListRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          FleetLaunchTemplateOverridesRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class FleetLaunchTemplateOverridesRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FleetLaunchTemplateOverridesRequest, context: context)
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:max_price], ::String, context: "#{context}[:max_price]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:weighted_capacity], ::Float, context: "#{context}[:weighted_capacity]")
        Hearth::Validator.validate!(input[:priority], ::Float, context: "#{context}[:priority]")
        Placement.validate!(input[:placement], context: "#{context}[:placement]") unless input[:placement].nil?
        InstanceRequirementsRequest.validate!(input[:instance_requirements], context: "#{context}[:instance_requirements]") unless input[:instance_requirements].nil?
      end
    end

    class FleetLaunchTemplateSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FleetLaunchTemplateSpecification, context: context)
        Hearth::Validator.validate!(input[:launch_template_id], ::String, context: "#{context}[:launch_template_id]")
        Hearth::Validator.validate!(input[:launch_template_name], ::String, context: "#{context}[:launch_template_name]")
        Hearth::Validator.validate!(input[:version], ::String, context: "#{context}[:version]")
      end
    end

    class FleetLaunchTemplateSpecificationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FleetLaunchTemplateSpecificationRequest, context: context)
        Hearth::Validator.validate!(input[:launch_template_id], ::String, context: "#{context}[:launch_template_id]")
        Hearth::Validator.validate!(input[:launch_template_name], ::String, context: "#{context}[:launch_template_name]")
        Hearth::Validator.validate!(input[:version], ::String, context: "#{context}[:version]")
      end
    end

    class FleetSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          FleetData.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class FleetSpotCapacityRebalance
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FleetSpotCapacityRebalance, context: context)
        Hearth::Validator.validate!(input[:replacement_strategy], ::String, context: "#{context}[:replacement_strategy]")
        Hearth::Validator.validate!(input[:termination_delay], ::Integer, context: "#{context}[:termination_delay]")
      end
    end

    class FleetSpotCapacityRebalanceRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FleetSpotCapacityRebalanceRequest, context: context)
        Hearth::Validator.validate!(input[:replacement_strategy], ::String, context: "#{context}[:replacement_strategy]")
        Hearth::Validator.validate!(input[:termination_delay], ::Integer, context: "#{context}[:termination_delay]")
      end
    end

    class FleetSpotMaintenanceStrategies
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FleetSpotMaintenanceStrategies, context: context)
        FleetSpotCapacityRebalance.validate!(input[:capacity_rebalance], context: "#{context}[:capacity_rebalance]") unless input[:capacity_rebalance].nil?
      end
    end

    class FleetSpotMaintenanceStrategiesRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FleetSpotMaintenanceStrategiesRequest, context: context)
        FleetSpotCapacityRebalanceRequest.validate!(input[:capacity_rebalance], context: "#{context}[:capacity_rebalance]") unless input[:capacity_rebalance].nil?
      end
    end

    class FlowLog
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FlowLog, context: context)
        Hearth::Validator.validate!(input[:creation_time], ::Time, context: "#{context}[:creation_time]")
        Hearth::Validator.validate!(input[:deliver_logs_error_message], ::String, context: "#{context}[:deliver_logs_error_message]")
        Hearth::Validator.validate!(input[:deliver_logs_permission_arn], ::String, context: "#{context}[:deliver_logs_permission_arn]")
        Hearth::Validator.validate!(input[:deliver_logs_status], ::String, context: "#{context}[:deliver_logs_status]")
        Hearth::Validator.validate!(input[:flow_log_id], ::String, context: "#{context}[:flow_log_id]")
        Hearth::Validator.validate!(input[:flow_log_status], ::String, context: "#{context}[:flow_log_status]")
        Hearth::Validator.validate!(input[:log_group_name], ::String, context: "#{context}[:log_group_name]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:traffic_type], ::String, context: "#{context}[:traffic_type]")
        Hearth::Validator.validate!(input[:log_destination_type], ::String, context: "#{context}[:log_destination_type]")
        Hearth::Validator.validate!(input[:log_destination], ::String, context: "#{context}[:log_destination]")
        Hearth::Validator.validate!(input[:log_format], ::String, context: "#{context}[:log_format]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:max_aggregation_interval], ::Integer, context: "#{context}[:max_aggregation_interval]")
        DestinationOptionsResponse.validate!(input[:destination_options], context: "#{context}[:destination_options]") unless input[:destination_options].nil?
      end
    end

    class FlowLogIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class FlowLogResourceIds
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class FlowLogSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          FlowLog.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class FpgaDeviceInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FpgaDeviceInfo, context: context)
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        Hearth::Validator.validate!(input[:manufacturer], ::String, context: "#{context}[:manufacturer]")
        Hearth::Validator.validate!(input[:count], ::Integer, context: "#{context}[:count]")
        FpgaDeviceMemoryInfo.validate!(input[:memory_info], context: "#{context}[:memory_info]") unless input[:memory_info].nil?
      end
    end

    class FpgaDeviceInfoList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          FpgaDeviceInfo.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class FpgaDeviceMemoryInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FpgaDeviceMemoryInfo, context: context)
        Hearth::Validator.validate!(input[:size_in_mi_b], ::Integer, context: "#{context}[:size_in_mi_b]")
      end
    end

    class FpgaImage
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FpgaImage, context: context)
        Hearth::Validator.validate!(input[:fpga_image_id], ::String, context: "#{context}[:fpga_image_id]")
        Hearth::Validator.validate!(input[:fpga_image_global_id], ::String, context: "#{context}[:fpga_image_global_id]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:shell_version], ::String, context: "#{context}[:shell_version]")
        PciId.validate!(input[:pci_id], context: "#{context}[:pci_id]") unless input[:pci_id].nil?
        FpgaImageState.validate!(input[:state], context: "#{context}[:state]") unless input[:state].nil?
        Hearth::Validator.validate!(input[:create_time], ::Time, context: "#{context}[:create_time]")
        Hearth::Validator.validate!(input[:update_time], ::Time, context: "#{context}[:update_time]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:owner_alias], ::String, context: "#{context}[:owner_alias]")
        ProductCodeList.validate!(input[:product_codes], context: "#{context}[:product_codes]") unless input[:product_codes].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:public], ::TrueClass, ::FalseClass, context: "#{context}[:public]")
        Hearth::Validator.validate!(input[:data_retention_support], ::TrueClass, ::FalseClass, context: "#{context}[:data_retention_support]")
      end
    end

    class FpgaImageAttribute
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FpgaImageAttribute, context: context)
        Hearth::Validator.validate!(input[:fpga_image_id], ::String, context: "#{context}[:fpga_image_id]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        LoadPermissionList.validate!(input[:load_permissions], context: "#{context}[:load_permissions]") unless input[:load_permissions].nil?
        ProductCodeList.validate!(input[:product_codes], context: "#{context}[:product_codes]") unless input[:product_codes].nil?
      end
    end

    class FpgaImageIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class FpgaImageList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          FpgaImage.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class FpgaImageState
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FpgaImageState, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class FpgaInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::FpgaInfo, context: context)
        FpgaDeviceInfoList.validate!(input[:fpgas], context: "#{context}[:fpgas]") unless input[:fpgas].nil?
        Hearth::Validator.validate!(input[:total_fpga_memory_in_mi_b], ::Integer, context: "#{context}[:total_fpga_memory_in_mi_b]")
      end
    end

    class GetAssociatedEnclaveCertificateIamRolesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetAssociatedEnclaveCertificateIamRolesInput, context: context)
        Hearth::Validator.validate!(input[:certificate_arn], ::String, context: "#{context}[:certificate_arn]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetAssociatedEnclaveCertificateIamRolesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetAssociatedEnclaveCertificateIamRolesOutput, context: context)
        AssociatedRolesList.validate!(input[:associated_roles], context: "#{context}[:associated_roles]") unless input[:associated_roles].nil?
      end
    end

    class GetAssociatedIpv6PoolCidrsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetAssociatedIpv6PoolCidrsInput, context: context)
        Hearth::Validator.validate!(input[:pool_id], ::String, context: "#{context}[:pool_id]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetAssociatedIpv6PoolCidrsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetAssociatedIpv6PoolCidrsOutput, context: context)
        Ipv6CidrAssociationSet.validate!(input[:ipv6_cidr_associations], context: "#{context}[:ipv6_cidr_associations]") unless input[:ipv6_cidr_associations].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetCapacityReservationUsageInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetCapacityReservationUsageInput, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_id], ::String, context: "#{context}[:capacity_reservation_id]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetCapacityReservationUsageOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetCapacityReservationUsageOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:capacity_reservation_id], ::String, context: "#{context}[:capacity_reservation_id]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:total_instance_count], ::Integer, context: "#{context}[:total_instance_count]")
        Hearth::Validator.validate!(input[:available_instance_count], ::Integer, context: "#{context}[:available_instance_count]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        InstanceUsageSet.validate!(input[:instance_usages], context: "#{context}[:instance_usages]") unless input[:instance_usages].nil?
      end
    end

    class GetCoipPoolUsageInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetCoipPoolUsageInput, context: context)
        Hearth::Validator.validate!(input[:pool_id], ::String, context: "#{context}[:pool_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetCoipPoolUsageOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetCoipPoolUsageOutput, context: context)
        Hearth::Validator.validate!(input[:coip_pool_id], ::String, context: "#{context}[:coip_pool_id]")
        CoipAddressUsageSet.validate!(input[:coip_address_usages], context: "#{context}[:coip_address_usages]") unless input[:coip_address_usages].nil?
        Hearth::Validator.validate!(input[:local_gateway_route_table_id], ::String, context: "#{context}[:local_gateway_route_table_id]")
      end
    end

    class GetConsoleOutputInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetConsoleOutputInput, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:latest], ::TrueClass, ::FalseClass, context: "#{context}[:latest]")
      end
    end

    class GetConsoleOutputOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetConsoleOutputOutput, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:output], ::String, context: "#{context}[:output]")
        Hearth::Validator.validate!(input[:timestamp], ::Time, context: "#{context}[:timestamp]")
      end
    end

    class GetConsoleScreenshotInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetConsoleScreenshotInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:wake_up], ::TrueClass, ::FalseClass, context: "#{context}[:wake_up]")
      end
    end

    class GetConsoleScreenshotOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetConsoleScreenshotOutput, context: context)
        Hearth::Validator.validate!(input[:image_data], ::String, context: "#{context}[:image_data]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
      end
    end

    class GetDefaultCreditSpecificationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetDefaultCreditSpecificationInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_family], ::String, context: "#{context}[:instance_family]")
      end
    end

    class GetDefaultCreditSpecificationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetDefaultCreditSpecificationOutput, context: context)
        InstanceFamilyCreditSpecification.validate!(input[:instance_family_credit_specification], context: "#{context}[:instance_family_credit_specification]") unless input[:instance_family_credit_specification].nil?
      end
    end

    class GetEbsDefaultKmsKeyIdInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetEbsDefaultKmsKeyIdInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetEbsDefaultKmsKeyIdOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetEbsDefaultKmsKeyIdOutput, context: context)
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
      end
    end

    class GetEbsEncryptionByDefaultInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetEbsEncryptionByDefaultInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetEbsEncryptionByDefaultOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetEbsEncryptionByDefaultOutput, context: context)
        Hearth::Validator.validate!(input[:ebs_encryption_by_default], ::TrueClass, ::FalseClass, context: "#{context}[:ebs_encryption_by_default]")
      end
    end

    class GetFlowLogsIntegrationTemplateInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetFlowLogsIntegrationTemplateInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:flow_log_id], ::String, context: "#{context}[:flow_log_id]")
        Hearth::Validator.validate!(input[:config_delivery_s3_destination_arn], ::String, context: "#{context}[:config_delivery_s3_destination_arn]")
        IntegrateServices.validate!(input[:integrate_services], context: "#{context}[:integrate_services]") unless input[:integrate_services].nil?
      end
    end

    class GetFlowLogsIntegrationTemplateOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetFlowLogsIntegrationTemplateOutput, context: context)
        Hearth::Validator.validate!(input[:result], ::String, context: "#{context}[:result]")
      end
    end

    class GetGroupsForCapacityReservationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetGroupsForCapacityReservationInput, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_id], ::String, context: "#{context}[:capacity_reservation_id]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetGroupsForCapacityReservationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetGroupsForCapacityReservationOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        CapacityReservationGroupSet.validate!(input[:capacity_reservation_groups], context: "#{context}[:capacity_reservation_groups]") unless input[:capacity_reservation_groups].nil?
      end
    end

    class GetHostReservationPurchasePreviewInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetHostReservationPurchasePreviewInput, context: context)
        RequestHostIdSet.validate!(input[:host_id_set], context: "#{context}[:host_id_set]") unless input[:host_id_set].nil?
        Hearth::Validator.validate!(input[:offering_id], ::String, context: "#{context}[:offering_id]")
      end
    end

    class GetHostReservationPurchasePreviewOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetHostReservationPurchasePreviewOutput, context: context)
        Hearth::Validator.validate!(input[:currency_code], ::String, context: "#{context}[:currency_code]")
        PurchaseSet.validate!(input[:purchase], context: "#{context}[:purchase]") unless input[:purchase].nil?
        Hearth::Validator.validate!(input[:total_hourly_price], ::String, context: "#{context}[:total_hourly_price]")
        Hearth::Validator.validate!(input[:total_upfront_price], ::String, context: "#{context}[:total_upfront_price]")
      end
    end

    class GetInstanceTypesFromInstanceRequirementsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetInstanceTypesFromInstanceRequirementsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        ArchitectureTypeSet.validate!(input[:architecture_types], context: "#{context}[:architecture_types]") unless input[:architecture_types].nil?
        VirtualizationTypeSet.validate!(input[:virtualization_types], context: "#{context}[:virtualization_types]") unless input[:virtualization_types].nil?
        InstanceRequirementsRequest.validate!(input[:instance_requirements], context: "#{context}[:instance_requirements]") unless input[:instance_requirements].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetInstanceTypesFromInstanceRequirementsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetInstanceTypesFromInstanceRequirementsOutput, context: context)
        InstanceTypeInfoFromInstanceRequirementsSet.validate!(input[:instance_types], context: "#{context}[:instance_types]") unless input[:instance_types].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetInstanceUefiDataInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetInstanceUefiDataInput, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetInstanceUefiDataOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetInstanceUefiDataOutput, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:uefi_data], ::String, context: "#{context}[:uefi_data]")
      end
    end

    class GetIpamAddressHistoryInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetIpamAddressHistoryInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:ipam_scope_id], ::String, context: "#{context}[:ipam_scope_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:start_time], ::Time, context: "#{context}[:start_time]")
        Hearth::Validator.validate!(input[:end_time], ::Time, context: "#{context}[:end_time]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetIpamAddressHistoryOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetIpamAddressHistoryOutput, context: context)
        IpamAddressHistoryRecordSet.validate!(input[:history_records], context: "#{context}[:history_records]") unless input[:history_records].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetIpamPoolAllocationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetIpamPoolAllocationsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipam_pool_id], ::String, context: "#{context}[:ipam_pool_id]")
        Hearth::Validator.validate!(input[:ipam_pool_allocation_id], ::String, context: "#{context}[:ipam_pool_allocation_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetIpamPoolAllocationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetIpamPoolAllocationsOutput, context: context)
        IpamPoolAllocationSet.validate!(input[:ipam_pool_allocations], context: "#{context}[:ipam_pool_allocations]") unless input[:ipam_pool_allocations].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetIpamPoolCidrsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetIpamPoolCidrsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipam_pool_id], ::String, context: "#{context}[:ipam_pool_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetIpamPoolCidrsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetIpamPoolCidrsOutput, context: context)
        IpamPoolCidrSet.validate!(input[:ipam_pool_cidrs], context: "#{context}[:ipam_pool_cidrs]") unless input[:ipam_pool_cidrs].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetIpamResourceCidrsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetIpamResourceCidrsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:ipam_scope_id], ::String, context: "#{context}[:ipam_scope_id]")
        Hearth::Validator.validate!(input[:ipam_pool_id], ::String, context: "#{context}[:ipam_pool_id]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        RequestIpamResourceTag.validate!(input[:resource_tag], context: "#{context}[:resource_tag]") unless input[:resource_tag].nil?
        Hearth::Validator.validate!(input[:resource_owner], ::String, context: "#{context}[:resource_owner]")
      end
    end

    class GetIpamResourceCidrsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetIpamResourceCidrsOutput, context: context)
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        IpamResourceCidrSet.validate!(input[:ipam_resource_cidrs], context: "#{context}[:ipam_resource_cidrs]") unless input[:ipam_resource_cidrs].nil?
      end
    end

    class GetLaunchTemplateDataInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetLaunchTemplateDataInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
      end
    end

    class GetLaunchTemplateDataOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetLaunchTemplateDataOutput, context: context)
        ResponseLaunchTemplateData.validate!(input[:launch_template_data], context: "#{context}[:launch_template_data]") unless input[:launch_template_data].nil?
      end
    end

    class GetManagedPrefixListAssociationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetManagedPrefixListAssociationsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetManagedPrefixListAssociationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetManagedPrefixListAssociationsOutput, context: context)
        PrefixListAssociationSet.validate!(input[:prefix_list_associations], context: "#{context}[:prefix_list_associations]") unless input[:prefix_list_associations].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetManagedPrefixListEntriesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetManagedPrefixListEntriesInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
        Hearth::Validator.validate!(input[:target_version], ::Integer, context: "#{context}[:target_version]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetManagedPrefixListEntriesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetManagedPrefixListEntriesOutput, context: context)
        PrefixListEntrySet.validate!(input[:entries], context: "#{context}[:entries]") unless input[:entries].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetNetworkInsightsAccessScopeAnalysisFindingsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetNetworkInsightsAccessScopeAnalysisFindingsInput, context: context)
        Hearth::Validator.validate!(input[:network_insights_access_scope_analysis_id], ::String, context: "#{context}[:network_insights_access_scope_analysis_id]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetNetworkInsightsAccessScopeAnalysisFindingsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetNetworkInsightsAccessScopeAnalysisFindingsOutput, context: context)
        Hearth::Validator.validate!(input[:network_insights_access_scope_analysis_id], ::String, context: "#{context}[:network_insights_access_scope_analysis_id]")
        Hearth::Validator.validate!(input[:analysis_status], ::String, context: "#{context}[:analysis_status]")
        AccessScopeAnalysisFindingList.validate!(input[:analysis_findings], context: "#{context}[:analysis_findings]") unless input[:analysis_findings].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetNetworkInsightsAccessScopeContentInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetNetworkInsightsAccessScopeContentInput, context: context)
        Hearth::Validator.validate!(input[:network_insights_access_scope_id], ::String, context: "#{context}[:network_insights_access_scope_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetNetworkInsightsAccessScopeContentOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetNetworkInsightsAccessScopeContentOutput, context: context)
        NetworkInsightsAccessScopeContent.validate!(input[:network_insights_access_scope_content], context: "#{context}[:network_insights_access_scope_content]") unless input[:network_insights_access_scope_content].nil?
      end
    end

    class GetPasswordDataInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetPasswordDataInput, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetPasswordDataOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetPasswordDataOutput, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:password_data], ::String, context: "#{context}[:password_data]")
        Hearth::Validator.validate!(input[:timestamp], ::Time, context: "#{context}[:timestamp]")
      end
    end

    class GetReservedInstancesExchangeQuoteInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetReservedInstancesExchangeQuoteInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        ReservedInstanceIdSet.validate!(input[:reserved_instance_ids], context: "#{context}[:reserved_instance_ids]") unless input[:reserved_instance_ids].nil?
        TargetConfigurationRequestSet.validate!(input[:target_configurations], context: "#{context}[:target_configurations]") unless input[:target_configurations].nil?
      end
    end

    class GetReservedInstancesExchangeQuoteOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetReservedInstancesExchangeQuoteOutput, context: context)
        Hearth::Validator.validate!(input[:currency_code], ::String, context: "#{context}[:currency_code]")
        Hearth::Validator.validate!(input[:is_valid_exchange], ::TrueClass, ::FalseClass, context: "#{context}[:is_valid_exchange]")
        Hearth::Validator.validate!(input[:output_reserved_instances_will_expire_at], ::Time, context: "#{context}[:output_reserved_instances_will_expire_at]")
        Hearth::Validator.validate!(input[:payment_due], ::String, context: "#{context}[:payment_due]")
        ReservationValue.validate!(input[:reserved_instance_value_rollup], context: "#{context}[:reserved_instance_value_rollup]") unless input[:reserved_instance_value_rollup].nil?
        ReservedInstanceReservationValueSet.validate!(input[:reserved_instance_value_set], context: "#{context}[:reserved_instance_value_set]") unless input[:reserved_instance_value_set].nil?
        ReservationValue.validate!(input[:target_configuration_value_rollup], context: "#{context}[:target_configuration_value_rollup]") unless input[:target_configuration_value_rollup].nil?
        TargetReservationValueSet.validate!(input[:target_configuration_value_set], context: "#{context}[:target_configuration_value_set]") unless input[:target_configuration_value_set].nil?
        Hearth::Validator.validate!(input[:validation_failure_reason], ::String, context: "#{context}[:validation_failure_reason]")
      end
    end

    class GetSerialConsoleAccessStatusInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetSerialConsoleAccessStatusInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetSerialConsoleAccessStatusOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetSerialConsoleAccessStatusOutput, context: context)
        Hearth::Validator.validate!(input[:serial_console_access_enabled], ::TrueClass, ::FalseClass, context: "#{context}[:serial_console_access_enabled]")
      end
    end

    class GetSpotPlacementScoresInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetSpotPlacementScoresInput, context: context)
        InstanceTypes.validate!(input[:instance_types], context: "#{context}[:instance_types]") unless input[:instance_types].nil?
        Hearth::Validator.validate!(input[:target_capacity], ::Integer, context: "#{context}[:target_capacity]")
        Hearth::Validator.validate!(input[:target_capacity_unit_type], ::String, context: "#{context}[:target_capacity_unit_type]")
        Hearth::Validator.validate!(input[:single_availability_zone], ::TrueClass, ::FalseClass, context: "#{context}[:single_availability_zone]")
        RegionNames.validate!(input[:region_names], context: "#{context}[:region_names]") unless input[:region_names].nil?
        InstanceRequirementsWithMetadataRequest.validate!(input[:instance_requirements_with_metadata], context: "#{context}[:instance_requirements_with_metadata]") unless input[:instance_requirements_with_metadata].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetSpotPlacementScoresOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetSpotPlacementScoresOutput, context: context)
        SpotPlacementScores.validate!(input[:spot_placement_scores], context: "#{context}[:spot_placement_scores]") unless input[:spot_placement_scores].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetSubnetCidrReservationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetSubnetCidrReservationsInput, context: context)
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
      end
    end

    class GetSubnetCidrReservationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetSubnetCidrReservationsOutput, context: context)
        SubnetCidrReservationList.validate!(input[:subnet_ipv4_cidr_reservations], context: "#{context}[:subnet_ipv4_cidr_reservations]") unless input[:subnet_ipv4_cidr_reservations].nil?
        SubnetCidrReservationList.validate!(input[:subnet_ipv6_cidr_reservations], context: "#{context}[:subnet_ipv6_cidr_reservations]") unless input[:subnet_ipv6_cidr_reservations].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetTransitGatewayAttachmentPropagationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetTransitGatewayAttachmentPropagationsInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetTransitGatewayAttachmentPropagationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetTransitGatewayAttachmentPropagationsOutput, context: context)
        TransitGatewayAttachmentPropagationList.validate!(input[:transit_gateway_attachment_propagations], context: "#{context}[:transit_gateway_attachment_propagations]") unless input[:transit_gateway_attachment_propagations].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetTransitGatewayMulticastDomainAssociationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetTransitGatewayMulticastDomainAssociationsInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetTransitGatewayMulticastDomainAssociationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetTransitGatewayMulticastDomainAssociationsOutput, context: context)
        TransitGatewayMulticastDomainAssociationList.validate!(input[:multicast_domain_associations], context: "#{context}[:multicast_domain_associations]") unless input[:multicast_domain_associations].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetTransitGatewayPrefixListReferencesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetTransitGatewayPrefixListReferencesInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetTransitGatewayPrefixListReferencesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetTransitGatewayPrefixListReferencesOutput, context: context)
        TransitGatewayPrefixListReferenceSet.validate!(input[:transit_gateway_prefix_list_references], context: "#{context}[:transit_gateway_prefix_list_references]") unless input[:transit_gateway_prefix_list_references].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetTransitGatewayRouteTableAssociationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetTransitGatewayRouteTableAssociationsInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetTransitGatewayRouteTableAssociationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetTransitGatewayRouteTableAssociationsOutput, context: context)
        TransitGatewayRouteTableAssociationList.validate!(input[:associations], context: "#{context}[:associations]") unless input[:associations].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetTransitGatewayRouteTablePropagationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetTransitGatewayRouteTablePropagationsInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetTransitGatewayRouteTablePropagationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetTransitGatewayRouteTablePropagationsOutput, context: context)
        TransitGatewayRouteTablePropagationList.validate!(input[:transit_gateway_route_table_propagations], context: "#{context}[:transit_gateway_route_table_propagations]") unless input[:transit_gateway_route_table_propagations].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GetVpnConnectionDeviceSampleConfigurationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetVpnConnectionDeviceSampleConfigurationInput, context: context)
        Hearth::Validator.validate!(input[:vpn_connection_id], ::String, context: "#{context}[:vpn_connection_id]")
        Hearth::Validator.validate!(input[:vpn_connection_device_type_id], ::String, context: "#{context}[:vpn_connection_device_type_id]")
        Hearth::Validator.validate!(input[:internet_key_exchange_version], ::String, context: "#{context}[:internet_key_exchange_version]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetVpnConnectionDeviceSampleConfigurationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetVpnConnectionDeviceSampleConfigurationOutput, context: context)
        Hearth::Validator.validate!(input[:vpn_connection_device_sample_configuration], ::String, context: "#{context}[:vpn_connection_device_sample_configuration]")
      end
    end

    class GetVpnConnectionDeviceTypesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetVpnConnectionDeviceTypesInput, context: context)
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class GetVpnConnectionDeviceTypesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GetVpnConnectionDeviceTypesOutput, context: context)
        VpnConnectionDeviceTypeList.validate!(input[:vpn_connection_device_types], context: "#{context}[:vpn_connection_device_types]") unless input[:vpn_connection_device_types].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class GpuDeviceInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GpuDeviceInfo, context: context)
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        Hearth::Validator.validate!(input[:manufacturer], ::String, context: "#{context}[:manufacturer]")
        Hearth::Validator.validate!(input[:count], ::Integer, context: "#{context}[:count]")
        GpuDeviceMemoryInfo.validate!(input[:memory_info], context: "#{context}[:memory_info]") unless input[:memory_info].nil?
      end
    end

    class GpuDeviceInfoList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          GpuDeviceInfo.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class GpuDeviceMemoryInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GpuDeviceMemoryInfo, context: context)
        Hearth::Validator.validate!(input[:size_in_mi_b], ::Integer, context: "#{context}[:size_in_mi_b]")
      end
    end

    class GpuInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GpuInfo, context: context)
        GpuDeviceInfoList.validate!(input[:gpus], context: "#{context}[:gpus]") unless input[:gpus].nil?
        Hearth::Validator.validate!(input[:total_gpu_memory_in_mi_b], ::Integer, context: "#{context}[:total_gpu_memory_in_mi_b]")
      end
    end

    class GroupIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class GroupIdentifier
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::GroupIdentifier, context: context)
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
      end
    end

    class GroupIdentifierList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          GroupIdentifier.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class GroupIdentifierSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SecurityGroupIdentifier.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class GroupIds
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class GroupNameStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class HibernationOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::HibernationOptions, context: context)
        Hearth::Validator.validate!(input[:configured], ::TrueClass, ::FalseClass, context: "#{context}[:configured]")
      end
    end

    class HibernationOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::HibernationOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:configured], ::TrueClass, ::FalseClass, context: "#{context}[:configured]")
      end
    end

    class HistoryRecord
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::HistoryRecord, context: context)
        EventInformation.validate!(input[:event_information], context: "#{context}[:event_information]") unless input[:event_information].nil?
        Hearth::Validator.validate!(input[:event_type], ::String, context: "#{context}[:event_type]")
        Hearth::Validator.validate!(input[:timestamp], ::Time, context: "#{context}[:timestamp]")
      end
    end

    class HistoryRecordEntry
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::HistoryRecordEntry, context: context)
        EventInformation.validate!(input[:event_information], context: "#{context}[:event_information]") unless input[:event_information].nil?
        Hearth::Validator.validate!(input[:event_type], ::String, context: "#{context}[:event_type]")
        Hearth::Validator.validate!(input[:timestamp], ::Time, context: "#{context}[:timestamp]")
      end
    end

    class HistoryRecordSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          HistoryRecordEntry.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class HistoryRecords
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          HistoryRecord.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Host
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Host, context: context)
        Hearth::Validator.validate!(input[:auto_placement], ::String, context: "#{context}[:auto_placement]")
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        AvailableCapacity.validate!(input[:available_capacity], context: "#{context}[:available_capacity]") unless input[:available_capacity].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:host_id], ::String, context: "#{context}[:host_id]")
        HostProperties.validate!(input[:host_properties], context: "#{context}[:host_properties]") unless input[:host_properties].nil?
        Hearth::Validator.validate!(input[:host_reservation_id], ::String, context: "#{context}[:host_reservation_id]")
        HostInstanceList.validate!(input[:instances], context: "#{context}[:instances]") unless input[:instances].nil?
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:allocation_time], ::Time, context: "#{context}[:allocation_time]")
        Hearth::Validator.validate!(input[:release_time], ::Time, context: "#{context}[:release_time]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:host_recovery], ::String, context: "#{context}[:host_recovery]")
        Hearth::Validator.validate!(input[:allows_multiple_instance_types], ::String, context: "#{context}[:allows_multiple_instance_types]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:availability_zone_id], ::String, context: "#{context}[:availability_zone_id]")
        Hearth::Validator.validate!(input[:member_of_service_linked_resource_group], ::TrueClass, ::FalseClass, context: "#{context}[:member_of_service_linked_resource_group]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
      end
    end

    class HostInstance
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::HostInstance, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
      end
    end

    class HostInstanceList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          HostInstance.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class HostList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Host.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class HostOffering
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::HostOffering, context: context)
        Hearth::Validator.validate!(input[:currency_code], ::String, context: "#{context}[:currency_code]")
        Hearth::Validator.validate!(input[:duration], ::Integer, context: "#{context}[:duration]")
        Hearth::Validator.validate!(input[:hourly_price], ::String, context: "#{context}[:hourly_price]")
        Hearth::Validator.validate!(input[:instance_family], ::String, context: "#{context}[:instance_family]")
        Hearth::Validator.validate!(input[:offering_id], ::String, context: "#{context}[:offering_id]")
        Hearth::Validator.validate!(input[:payment_option], ::String, context: "#{context}[:payment_option]")
        Hearth::Validator.validate!(input[:upfront_price], ::String, context: "#{context}[:upfront_price]")
      end
    end

    class HostOfferingSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          HostOffering.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class HostProperties
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::HostProperties, context: context)
        Hearth::Validator.validate!(input[:cores], ::Integer, context: "#{context}[:cores]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:instance_family], ::String, context: "#{context}[:instance_family]")
        Hearth::Validator.validate!(input[:sockets], ::Integer, context: "#{context}[:sockets]")
        Hearth::Validator.validate!(input[:total_v_cpus], ::Integer, context: "#{context}[:total_v_cpus]")
      end
    end

    class HostReservation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::HostReservation, context: context)
        Hearth::Validator.validate!(input[:count], ::Integer, context: "#{context}[:count]")
        Hearth::Validator.validate!(input[:currency_code], ::String, context: "#{context}[:currency_code]")
        Hearth::Validator.validate!(input[:duration], ::Integer, context: "#{context}[:duration]")
        Hearth::Validator.validate!(input[:end], ::Time, context: "#{context}[:end]")
        ResponseHostIdSet.validate!(input[:host_id_set], context: "#{context}[:host_id_set]") unless input[:host_id_set].nil?
        Hearth::Validator.validate!(input[:host_reservation_id], ::String, context: "#{context}[:host_reservation_id]")
        Hearth::Validator.validate!(input[:hourly_price], ::String, context: "#{context}[:hourly_price]")
        Hearth::Validator.validate!(input[:instance_family], ::String, context: "#{context}[:instance_family]")
        Hearth::Validator.validate!(input[:offering_id], ::String, context: "#{context}[:offering_id]")
        Hearth::Validator.validate!(input[:payment_option], ::String, context: "#{context}[:payment_option]")
        Hearth::Validator.validate!(input[:start], ::Time, context: "#{context}[:start]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:upfront_price], ::String, context: "#{context}[:upfront_price]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class HostReservationIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class HostReservationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          HostReservation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IKEVersionsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          IKEVersionsListValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IKEVersionsListValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IKEVersionsListValue, context: context)
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class IKEVersionsRequestList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          IKEVersionsRequestListValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IKEVersionsRequestListValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IKEVersionsRequestListValue, context: context)
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class IamInstanceProfile
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IamInstanceProfile, context: context)
        Hearth::Validator.validate!(input[:arn], ::String, context: "#{context}[:arn]")
        Hearth::Validator.validate!(input[:id], ::String, context: "#{context}[:id]")
      end
    end

    class IamInstanceProfileAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IamInstanceProfileAssociation, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        IamInstanceProfile.validate!(input[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless input[:iam_instance_profile].nil?
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:timestamp], ::Time, context: "#{context}[:timestamp]")
      end
    end

    class IamInstanceProfileAssociationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          IamInstanceProfileAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IamInstanceProfileSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IamInstanceProfileSpecification, context: context)
        Hearth::Validator.validate!(input[:arn], ::String, context: "#{context}[:arn]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
      end
    end

    class IcmpTypeCode
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IcmpTypeCode, context: context)
        Hearth::Validator.validate!(input[:code], ::Integer, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:type], ::Integer, context: "#{context}[:type]")
      end
    end

    class IdFormat
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IdFormat, context: context)
        Hearth::Validator.validate!(input[:deadline], ::Time, context: "#{context}[:deadline]")
        Hearth::Validator.validate!(input[:resource], ::String, context: "#{context}[:resource]")
        Hearth::Validator.validate!(input[:use_long_ids], ::TrueClass, ::FalseClass, context: "#{context}[:use_long_ids]")
      end
    end

    class IdFormatList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          IdFormat.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Image
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Image, context: context)
        Hearth::Validator.validate!(input[:architecture], ::String, context: "#{context}[:architecture]")
        Hearth::Validator.validate!(input[:creation_date], ::String, context: "#{context}[:creation_date]")
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:image_location], ::String, context: "#{context}[:image_location]")
        Hearth::Validator.validate!(input[:image_type], ::String, context: "#{context}[:image_type]")
        Hearth::Validator.validate!(input[:public], ::TrueClass, ::FalseClass, context: "#{context}[:public]")
        Hearth::Validator.validate!(input[:kernel_id], ::String, context: "#{context}[:kernel_id]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:platform], ::String, context: "#{context}[:platform]")
        Hearth::Validator.validate!(input[:platform_details], ::String, context: "#{context}[:platform_details]")
        Hearth::Validator.validate!(input[:usage_operation], ::String, context: "#{context}[:usage_operation]")
        ProductCodeList.validate!(input[:product_codes], context: "#{context}[:product_codes]") unless input[:product_codes].nil?
        Hearth::Validator.validate!(input[:ramdisk_id], ::String, context: "#{context}[:ramdisk_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        BlockDeviceMappingList.validate!(input[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless input[:block_device_mappings].nil?
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:ena_support], ::TrueClass, ::FalseClass, context: "#{context}[:ena_support]")
        Hearth::Validator.validate!(input[:hypervisor], ::String, context: "#{context}[:hypervisor]")
        Hearth::Validator.validate!(input[:image_owner_alias], ::String, context: "#{context}[:image_owner_alias]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        Hearth::Validator.validate!(input[:root_device_name], ::String, context: "#{context}[:root_device_name]")
        Hearth::Validator.validate!(input[:root_device_type], ::String, context: "#{context}[:root_device_type]")
        Hearth::Validator.validate!(input[:sriov_net_support], ::String, context: "#{context}[:sriov_net_support]")
        StateReason.validate!(input[:state_reason], context: "#{context}[:state_reason]") unless input[:state_reason].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:virtualization_type], ::String, context: "#{context}[:virtualization_type]")
        Hearth::Validator.validate!(input[:boot_mode], ::String, context: "#{context}[:boot_mode]")
        Hearth::Validator.validate!(input[:tpm_support], ::String, context: "#{context}[:tpm_support]")
        Hearth::Validator.validate!(input[:deprecation_time], ::String, context: "#{context}[:deprecation_time]")
      end
    end

    class ImageDiskContainer
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImageDiskContainer, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:device_name], ::String, context: "#{context}[:device_name]")
        Hearth::Validator.validate!(input[:format], ::String, context: "#{context}[:format]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:url], ::String, context: "#{context}[:url]")
        UserBucket.validate!(input[:user_bucket], context: "#{context}[:user_bucket]") unless input[:user_bucket].nil?
      end
    end

    class ImageDiskContainerList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ImageDiskContainer.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ImageIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ImageIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ImageList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Image.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ImageRecycleBinInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImageRecycleBinInfo, context: context)
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:recycle_bin_enter_time], ::Time, context: "#{context}[:recycle_bin_enter_time]")
        Hearth::Validator.validate!(input[:recycle_bin_exit_time], ::Time, context: "#{context}[:recycle_bin_exit_time]")
      end
    end

    class ImageRecycleBinInfoList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ImageRecycleBinInfo.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ImportClientVpnClientCertificateRevocationListInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportClientVpnClientCertificateRevocationListInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:certificate_revocation_list], ::String, context: "#{context}[:certificate_revocation_list]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ImportClientVpnClientCertificateRevocationListOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportClientVpnClientCertificateRevocationListOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ImportImageInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportImageInput, context: context)
        Hearth::Validator.validate!(input[:architecture], ::String, context: "#{context}[:architecture]")
        ClientData.validate!(input[:client_data], context: "#{context}[:client_data]") unless input[:client_data].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        ImageDiskContainerList.validate!(input[:disk_containers], context: "#{context}[:disk_containers]") unless input[:disk_containers].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:hypervisor], ::String, context: "#{context}[:hypervisor]")
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:license_type], ::String, context: "#{context}[:license_type]")
        Hearth::Validator.validate!(input[:platform], ::String, context: "#{context}[:platform]")
        Hearth::Validator.validate!(input[:role_name], ::String, context: "#{context}[:role_name]")
        ImportImageLicenseSpecificationListRequest.validate!(input[:license_specifications], context: "#{context}[:license_specifications]") unless input[:license_specifications].nil?
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:usage_operation], ::String, context: "#{context}[:usage_operation]")
        Hearth::Validator.validate!(input[:boot_mode], ::String, context: "#{context}[:boot_mode]")
      end
    end

    class ImportImageLicenseConfigurationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportImageLicenseConfigurationRequest, context: context)
        Hearth::Validator.validate!(input[:license_configuration_arn], ::String, context: "#{context}[:license_configuration_arn]")
      end
    end

    class ImportImageLicenseConfigurationResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportImageLicenseConfigurationResponse, context: context)
        Hearth::Validator.validate!(input[:license_configuration_arn], ::String, context: "#{context}[:license_configuration_arn]")
      end
    end

    class ImportImageLicenseSpecificationListRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ImportImageLicenseConfigurationRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ImportImageLicenseSpecificationListResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ImportImageLicenseConfigurationResponse.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ImportImageOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportImageOutput, context: context)
        Hearth::Validator.validate!(input[:architecture], ::String, context: "#{context}[:architecture]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:hypervisor], ::String, context: "#{context}[:hypervisor]")
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:import_task_id], ::String, context: "#{context}[:import_task_id]")
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:license_type], ::String, context: "#{context}[:license_type]")
        Hearth::Validator.validate!(input[:platform], ::String, context: "#{context}[:platform]")
        Hearth::Validator.validate!(input[:progress], ::String, context: "#{context}[:progress]")
        SnapshotDetailList.validate!(input[:snapshot_details], context: "#{context}[:snapshot_details]") unless input[:snapshot_details].nil?
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        ImportImageLicenseSpecificationListResponse.validate!(input[:license_specifications], context: "#{context}[:license_specifications]") unless input[:license_specifications].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:usage_operation], ::String, context: "#{context}[:usage_operation]")
      end
    end

    class ImportImageTask
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportImageTask, context: context)
        Hearth::Validator.validate!(input[:architecture], ::String, context: "#{context}[:architecture]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:hypervisor], ::String, context: "#{context}[:hypervisor]")
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:import_task_id], ::String, context: "#{context}[:import_task_id]")
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:license_type], ::String, context: "#{context}[:license_type]")
        Hearth::Validator.validate!(input[:platform], ::String, context: "#{context}[:platform]")
        Hearth::Validator.validate!(input[:progress], ::String, context: "#{context}[:progress]")
        SnapshotDetailList.validate!(input[:snapshot_details], context: "#{context}[:snapshot_details]") unless input[:snapshot_details].nil?
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        ImportImageLicenseSpecificationListResponse.validate!(input[:license_specifications], context: "#{context}[:license_specifications]") unless input[:license_specifications].nil?
        Hearth::Validator.validate!(input[:usage_operation], ::String, context: "#{context}[:usage_operation]")
        Hearth::Validator.validate!(input[:boot_mode], ::String, context: "#{context}[:boot_mode]")
      end
    end

    class ImportImageTaskList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ImportImageTask.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ImportInstanceInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportInstanceInput, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        DiskImageList.validate!(input[:disk_images], context: "#{context}[:disk_images]") unless input[:disk_images].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        ImportInstanceLaunchSpecification.validate!(input[:launch_specification], context: "#{context}[:launch_specification]") unless input[:launch_specification].nil?
        Hearth::Validator.validate!(input[:platform], ::String, context: "#{context}[:platform]")
      end
    end

    class ImportInstanceLaunchSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportInstanceLaunchSpecification, context: context)
        Hearth::Validator.validate!(input[:additional_info], ::String, context: "#{context}[:additional_info]")
        Hearth::Validator.validate!(input[:architecture], ::String, context: "#{context}[:architecture]")
        SecurityGroupIdStringList.validate!(input[:group_ids], context: "#{context}[:group_ids]") unless input[:group_ids].nil?
        SecurityGroupStringList.validate!(input[:group_names], context: "#{context}[:group_names]") unless input[:group_names].nil?
        Hearth::Validator.validate!(input[:instance_initiated_shutdown_behavior], ::String, context: "#{context}[:instance_initiated_shutdown_behavior]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:monitoring], ::TrueClass, ::FalseClass, context: "#{context}[:monitoring]")
        Placement.validate!(input[:placement], context: "#{context}[:placement]") unless input[:placement].nil?
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        UserData.validate!(input[:user_data], context: "#{context}[:user_data]") unless input[:user_data].nil?
      end
    end

    class ImportInstanceOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportInstanceOutput, context: context)
        ConversionTask.validate!(input[:conversion_task], context: "#{context}[:conversion_task]") unless input[:conversion_task].nil?
      end
    end

    class ImportInstanceTaskDetails
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportInstanceTaskDetails, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:platform], ::String, context: "#{context}[:platform]")
        ImportInstanceVolumeDetailSet.validate!(input[:volumes], context: "#{context}[:volumes]") unless input[:volumes].nil?
      end
    end

    class ImportInstanceVolumeDetailItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportInstanceVolumeDetailItem, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:bytes_converted], ::Integer, context: "#{context}[:bytes_converted]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        DiskImageDescription.validate!(input[:image], context: "#{context}[:image]") unless input[:image].nil?
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        DiskImageVolumeDescription.validate!(input[:volume], context: "#{context}[:volume]") unless input[:volume].nil?
      end
    end

    class ImportInstanceVolumeDetailSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ImportInstanceVolumeDetailItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ImportKeyPairInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportKeyPairInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:key_name], ::String, context: "#{context}[:key_name]")
        Hearth::Validator.validate!(input[:public_key_material], ::String, context: "#{context}[:public_key_material]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class ImportKeyPairOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportKeyPairOutput, context: context)
        Hearth::Validator.validate!(input[:key_fingerprint], ::String, context: "#{context}[:key_fingerprint]")
        Hearth::Validator.validate!(input[:key_name], ::String, context: "#{context}[:key_name]")
        Hearth::Validator.validate!(input[:key_pair_id], ::String, context: "#{context}[:key_pair_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class ImportSnapshotInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportSnapshotInput, context: context)
        ClientData.validate!(input[:client_data], context: "#{context}[:client_data]") unless input[:client_data].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        SnapshotDiskContainer.validate!(input[:disk_container], context: "#{context}[:disk_container]") unless input[:disk_container].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:role_name], ::String, context: "#{context}[:role_name]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class ImportSnapshotOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportSnapshotOutput, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:import_task_id], ::String, context: "#{context}[:import_task_id]")
        SnapshotTaskDetail.validate!(input[:snapshot_task_detail], context: "#{context}[:snapshot_task_detail]") unless input[:snapshot_task_detail].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class ImportSnapshotTask
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportSnapshotTask, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:import_task_id], ::String, context: "#{context}[:import_task_id]")
        SnapshotTaskDetail.validate!(input[:snapshot_task_detail], context: "#{context}[:snapshot_task_detail]") unless input[:snapshot_task_detail].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class ImportSnapshotTaskIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ImportSnapshotTaskList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ImportSnapshotTask.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ImportTaskIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ImportVolumeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportVolumeInput, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        DiskImageDetail.validate!(input[:image], context: "#{context}[:image]") unless input[:image].nil?
        VolumeDetail.validate!(input[:volume], context: "#{context}[:volume]") unless input[:volume].nil?
      end
    end

    class ImportVolumeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportVolumeOutput, context: context)
        ConversionTask.validate!(input[:conversion_task], context: "#{context}[:conversion_task]") unless input[:conversion_task].nil?
      end
    end

    class ImportVolumeTaskDetails
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ImportVolumeTaskDetails, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:bytes_converted], ::Integer, context: "#{context}[:bytes_converted]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        DiskImageDescription.validate!(input[:image], context: "#{context}[:image]") unless input[:image].nil?
        DiskImageVolumeDescription.validate!(input[:volume], context: "#{context}[:volume]") unless input[:volume].nil?
      end
    end

    class InferenceAcceleratorInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InferenceAcceleratorInfo, context: context)
        InferenceDeviceInfoList.validate!(input[:accelerators], context: "#{context}[:accelerators]") unless input[:accelerators].nil?
      end
    end

    class InferenceDeviceInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InferenceDeviceInfo, context: context)
        Hearth::Validator.validate!(input[:count], ::Integer, context: "#{context}[:count]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        Hearth::Validator.validate!(input[:manufacturer], ::String, context: "#{context}[:manufacturer]")
      end
    end

    class InferenceDeviceInfoList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InferenceDeviceInfo.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InsideCidrBlocksStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class Instance
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Instance, context: context)
        Hearth::Validator.validate!(input[:ami_launch_index], ::Integer, context: "#{context}[:ami_launch_index]")
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:kernel_id], ::String, context: "#{context}[:kernel_id]")
        Hearth::Validator.validate!(input[:key_name], ::String, context: "#{context}[:key_name]")
        Hearth::Validator.validate!(input[:launch_time], ::Time, context: "#{context}[:launch_time]")
        Monitoring.validate!(input[:monitoring], context: "#{context}[:monitoring]") unless input[:monitoring].nil?
        Placement.validate!(input[:placement], context: "#{context}[:placement]") unless input[:placement].nil?
        Hearth::Validator.validate!(input[:platform], ::String, context: "#{context}[:platform]")
        Hearth::Validator.validate!(input[:private_dns_name], ::String, context: "#{context}[:private_dns_name]")
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
        ProductCodeList.validate!(input[:product_codes], context: "#{context}[:product_codes]") unless input[:product_codes].nil?
        Hearth::Validator.validate!(input[:public_dns_name], ::String, context: "#{context}[:public_dns_name]")
        Hearth::Validator.validate!(input[:public_ip_address], ::String, context: "#{context}[:public_ip_address]")
        Hearth::Validator.validate!(input[:ramdisk_id], ::String, context: "#{context}[:ramdisk_id]")
        InstanceState.validate!(input[:state], context: "#{context}[:state]") unless input[:state].nil?
        Hearth::Validator.validate!(input[:state_transition_reason], ::String, context: "#{context}[:state_transition_reason]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:architecture], ::String, context: "#{context}[:architecture]")
        InstanceBlockDeviceMappingList.validate!(input[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless input[:block_device_mappings].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:ebs_optimized], ::TrueClass, ::FalseClass, context: "#{context}[:ebs_optimized]")
        Hearth::Validator.validate!(input[:ena_support], ::TrueClass, ::FalseClass, context: "#{context}[:ena_support]")
        Hearth::Validator.validate!(input[:hypervisor], ::String, context: "#{context}[:hypervisor]")
        IamInstanceProfile.validate!(input[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless input[:iam_instance_profile].nil?
        Hearth::Validator.validate!(input[:instance_lifecycle], ::String, context: "#{context}[:instance_lifecycle]")
        ElasticGpuAssociationList.validate!(input[:elastic_gpu_associations], context: "#{context}[:elastic_gpu_associations]") unless input[:elastic_gpu_associations].nil?
        ElasticInferenceAcceleratorAssociationList.validate!(input[:elastic_inference_accelerator_associations], context: "#{context}[:elastic_inference_accelerator_associations]") unless input[:elastic_inference_accelerator_associations].nil?
        InstanceNetworkInterfaceList.validate!(input[:network_interfaces], context: "#{context}[:network_interfaces]") unless input[:network_interfaces].nil?
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        Hearth::Validator.validate!(input[:root_device_name], ::String, context: "#{context}[:root_device_name]")
        Hearth::Validator.validate!(input[:root_device_type], ::String, context: "#{context}[:root_device_type]")
        GroupIdentifierList.validate!(input[:security_groups], context: "#{context}[:security_groups]") unless input[:security_groups].nil?
        Hearth::Validator.validate!(input[:source_dest_check], ::TrueClass, ::FalseClass, context: "#{context}[:source_dest_check]")
        Hearth::Validator.validate!(input[:spot_instance_request_id], ::String, context: "#{context}[:spot_instance_request_id]")
        Hearth::Validator.validate!(input[:sriov_net_support], ::String, context: "#{context}[:sriov_net_support]")
        StateReason.validate!(input[:state_reason], context: "#{context}[:state_reason]") unless input[:state_reason].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:virtualization_type], ::String, context: "#{context}[:virtualization_type]")
        CpuOptions.validate!(input[:cpu_options], context: "#{context}[:cpu_options]") unless input[:cpu_options].nil?
        Hearth::Validator.validate!(input[:capacity_reservation_id], ::String, context: "#{context}[:capacity_reservation_id]")
        CapacityReservationSpecificationResponse.validate!(input[:capacity_reservation_specification], context: "#{context}[:capacity_reservation_specification]") unless input[:capacity_reservation_specification].nil?
        HibernationOptions.validate!(input[:hibernation_options], context: "#{context}[:hibernation_options]") unless input[:hibernation_options].nil?
        LicenseList.validate!(input[:licenses], context: "#{context}[:licenses]") unless input[:licenses].nil?
        InstanceMetadataOptionsResponse.validate!(input[:metadata_options], context: "#{context}[:metadata_options]") unless input[:metadata_options].nil?
        EnclaveOptions.validate!(input[:enclave_options], context: "#{context}[:enclave_options]") unless input[:enclave_options].nil?
        Hearth::Validator.validate!(input[:boot_mode], ::String, context: "#{context}[:boot_mode]")
        Hearth::Validator.validate!(input[:platform_details], ::String, context: "#{context}[:platform_details]")
        Hearth::Validator.validate!(input[:usage_operation], ::String, context: "#{context}[:usage_operation]")
        Hearth::Validator.validate!(input[:usage_operation_update_time], ::Time, context: "#{context}[:usage_operation_update_time]")
        PrivateDnsNameOptionsResponse.validate!(input[:private_dns_name_options], context: "#{context}[:private_dns_name_options]") unless input[:private_dns_name_options].nil?
        Hearth::Validator.validate!(input[:ipv6_address], ::String, context: "#{context}[:ipv6_address]")
        Hearth::Validator.validate!(input[:tpm_support], ::String, context: "#{context}[:tpm_support]")
        InstanceMaintenanceOptions.validate!(input[:maintenance_options], context: "#{context}[:maintenance_options]") unless input[:maintenance_options].nil?
      end
    end

    class InstanceBlockDeviceMapping
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceBlockDeviceMapping, context: context)
        Hearth::Validator.validate!(input[:device_name], ::String, context: "#{context}[:device_name]")
        EbsInstanceBlockDevice.validate!(input[:ebs], context: "#{context}[:ebs]") unless input[:ebs].nil?
      end
    end

    class InstanceBlockDeviceMappingList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceBlockDeviceMapping.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceBlockDeviceMappingSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceBlockDeviceMappingSpecification, context: context)
        Hearth::Validator.validate!(input[:device_name], ::String, context: "#{context}[:device_name]")
        EbsInstanceBlockDeviceSpecification.validate!(input[:ebs], context: "#{context}[:ebs]") unless input[:ebs].nil?
        Hearth::Validator.validate!(input[:no_device], ::String, context: "#{context}[:no_device]")
        Hearth::Validator.validate!(input[:virtual_name], ::String, context: "#{context}[:virtual_name]")
      end
    end

    class InstanceBlockDeviceMappingSpecificationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceBlockDeviceMappingSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceCapacity
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceCapacity, context: context)
        Hearth::Validator.validate!(input[:available_capacity], ::Integer, context: "#{context}[:available_capacity]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:total_capacity], ::Integer, context: "#{context}[:total_capacity]")
      end
    end

    class InstanceCount
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceCount, context: context)
        Hearth::Validator.validate!(input[:instance_count], ::Integer, context: "#{context}[:instance_count]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class InstanceCountList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceCount.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceCreditSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceCreditSpecification, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:cpu_credits], ::String, context: "#{context}[:cpu_credits]")
      end
    end

    class InstanceCreditSpecificationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceCreditSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceCreditSpecificationListRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceCreditSpecificationRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceCreditSpecificationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceCreditSpecificationRequest, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:cpu_credits], ::String, context: "#{context}[:cpu_credits]")
      end
    end

    class InstanceEventWindow
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceEventWindow, context: context)
        Hearth::Validator.validate!(input[:instance_event_window_id], ::String, context: "#{context}[:instance_event_window_id]")
        InstanceEventWindowTimeRangeList.validate!(input[:time_ranges], context: "#{context}[:time_ranges]") unless input[:time_ranges].nil?
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        Hearth::Validator.validate!(input[:cron_expression], ::String, context: "#{context}[:cron_expression]")
        InstanceEventWindowAssociationTarget.validate!(input[:association_target], context: "#{context}[:association_target]") unless input[:association_target].nil?
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class InstanceEventWindowAssociationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceEventWindowAssociationRequest, context: context)
        InstanceIdList.validate!(input[:instance_ids], context: "#{context}[:instance_ids]") unless input[:instance_ids].nil?
        TagList.validate!(input[:instance_tags], context: "#{context}[:instance_tags]") unless input[:instance_tags].nil?
        DedicatedHostIdList.validate!(input[:dedicated_host_ids], context: "#{context}[:dedicated_host_ids]") unless input[:dedicated_host_ids].nil?
      end
    end

    class InstanceEventWindowAssociationTarget
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceEventWindowAssociationTarget, context: context)
        InstanceIdList.validate!(input[:instance_ids], context: "#{context}[:instance_ids]") unless input[:instance_ids].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        DedicatedHostIdList.validate!(input[:dedicated_host_ids], context: "#{context}[:dedicated_host_ids]") unless input[:dedicated_host_ids].nil?
      end
    end

    class InstanceEventWindowDisassociationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceEventWindowDisassociationRequest, context: context)
        InstanceIdList.validate!(input[:instance_ids], context: "#{context}[:instance_ids]") unless input[:instance_ids].nil?
        TagList.validate!(input[:instance_tags], context: "#{context}[:instance_tags]") unless input[:instance_tags].nil?
        DedicatedHostIdList.validate!(input[:dedicated_host_ids], context: "#{context}[:dedicated_host_ids]") unless input[:dedicated_host_ids].nil?
      end
    end

    class InstanceEventWindowIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class InstanceEventWindowSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceEventWindow.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceEventWindowStateChange
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceEventWindowStateChange, context: context)
        Hearth::Validator.validate!(input[:instance_event_window_id], ::String, context: "#{context}[:instance_event_window_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class InstanceEventWindowTimeRange
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceEventWindowTimeRange, context: context)
        Hearth::Validator.validate!(input[:start_week_day], ::String, context: "#{context}[:start_week_day]")
        Hearth::Validator.validate!(input[:start_hour], ::Integer, context: "#{context}[:start_hour]")
        Hearth::Validator.validate!(input[:end_week_day], ::String, context: "#{context}[:end_week_day]")
        Hearth::Validator.validate!(input[:end_hour], ::Integer, context: "#{context}[:end_hour]")
      end
    end

    class InstanceEventWindowTimeRangeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceEventWindowTimeRange.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceEventWindowTimeRangeRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceEventWindowTimeRangeRequest, context: context)
        Hearth::Validator.validate!(input[:start_week_day], ::String, context: "#{context}[:start_week_day]")
        Hearth::Validator.validate!(input[:start_hour], ::Integer, context: "#{context}[:start_hour]")
        Hearth::Validator.validate!(input[:end_week_day], ::String, context: "#{context}[:end_week_day]")
        Hearth::Validator.validate!(input[:end_hour], ::Integer, context: "#{context}[:end_hour]")
      end
    end

    class InstanceEventWindowTimeRangeRequestSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceEventWindowTimeRangeRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceExportDetails
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceExportDetails, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:target_environment], ::String, context: "#{context}[:target_environment]")
      end
    end

    class InstanceFamilyCreditSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceFamilyCreditSpecification, context: context)
        Hearth::Validator.validate!(input[:instance_family], ::String, context: "#{context}[:instance_family]")
        Hearth::Validator.validate!(input[:cpu_credits], ::String, context: "#{context}[:cpu_credits]")
      end
    end

    class InstanceGenerationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class InstanceIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class InstanceIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class InstanceIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class InstanceIdsSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class InstanceIpv4Prefix
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceIpv4Prefix, context: context)
        Hearth::Validator.validate!(input[:ipv4_prefix], ::String, context: "#{context}[:ipv4_prefix]")
      end
    end

    class InstanceIpv4PrefixList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceIpv4Prefix.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceIpv6Address
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceIpv6Address, context: context)
        Hearth::Validator.validate!(input[:ipv6_address], ::String, context: "#{context}[:ipv6_address]")
      end
    end

    class InstanceIpv6AddressList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceIpv6Address.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceIpv6AddressListRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceIpv6AddressRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceIpv6AddressRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceIpv6AddressRequest, context: context)
        Hearth::Validator.validate!(input[:ipv6_address], ::String, context: "#{context}[:ipv6_address]")
      end
    end

    class InstanceIpv6Prefix
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceIpv6Prefix, context: context)
        Hearth::Validator.validate!(input[:ipv6_prefix], ::String, context: "#{context}[:ipv6_prefix]")
      end
    end

    class InstanceIpv6PrefixList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceIpv6Prefix.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Instance.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceMaintenanceOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceMaintenanceOptions, context: context)
        Hearth::Validator.validate!(input[:auto_recovery], ::String, context: "#{context}[:auto_recovery]")
      end
    end

    class InstanceMaintenanceOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceMaintenanceOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:auto_recovery], ::String, context: "#{context}[:auto_recovery]")
      end
    end

    class InstanceMarketOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceMarketOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:market_type], ::String, context: "#{context}[:market_type]")
        SpotMarketOptions.validate!(input[:spot_options], context: "#{context}[:spot_options]") unless input[:spot_options].nil?
      end
    end

    class InstanceMetadataOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceMetadataOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:http_tokens], ::String, context: "#{context}[:http_tokens]")
        Hearth::Validator.validate!(input[:http_put_response_hop_limit], ::Integer, context: "#{context}[:http_put_response_hop_limit]")
        Hearth::Validator.validate!(input[:http_endpoint], ::String, context: "#{context}[:http_endpoint]")
        Hearth::Validator.validate!(input[:http_protocol_ipv6], ::String, context: "#{context}[:http_protocol_ipv6]")
        Hearth::Validator.validate!(input[:instance_metadata_tags], ::String, context: "#{context}[:instance_metadata_tags]")
      end
    end

    class InstanceMetadataOptionsResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceMetadataOptionsResponse, context: context)
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:http_tokens], ::String, context: "#{context}[:http_tokens]")
        Hearth::Validator.validate!(input[:http_put_response_hop_limit], ::Integer, context: "#{context}[:http_put_response_hop_limit]")
        Hearth::Validator.validate!(input[:http_endpoint], ::String, context: "#{context}[:http_endpoint]")
        Hearth::Validator.validate!(input[:http_protocol_ipv6], ::String, context: "#{context}[:http_protocol_ipv6]")
        Hearth::Validator.validate!(input[:instance_metadata_tags], ::String, context: "#{context}[:instance_metadata_tags]")
      end
    end

    class InstanceMonitoring
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceMonitoring, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Monitoring.validate!(input[:monitoring], context: "#{context}[:monitoring]") unless input[:monitoring].nil?
      end
    end

    class InstanceMonitoringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceMonitoring.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceNetworkInterface
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceNetworkInterface, context: context)
        InstanceNetworkInterfaceAssociation.validate!(input[:association], context: "#{context}[:association]") unless input[:association].nil?
        InstanceNetworkInterfaceAttachment.validate!(input[:attachment], context: "#{context}[:attachment]") unless input[:attachment].nil?
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        GroupIdentifierList.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        InstanceIpv6AddressList.validate!(input[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless input[:ipv6_addresses].nil?
        Hearth::Validator.validate!(input[:mac_address], ::String, context: "#{context}[:mac_address]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:private_dns_name], ::String, context: "#{context}[:private_dns_name]")
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
        InstancePrivateIpAddressList.validate!(input[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless input[:private_ip_addresses].nil?
        Hearth::Validator.validate!(input[:source_dest_check], ::TrueClass, ::FalseClass, context: "#{context}[:source_dest_check]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:interface_type], ::String, context: "#{context}[:interface_type]")
        InstanceIpv4PrefixList.validate!(input[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless input[:ipv4_prefixes].nil?
        InstanceIpv6PrefixList.validate!(input[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless input[:ipv6_prefixes].nil?
      end
    end

    class InstanceNetworkInterfaceAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceNetworkInterfaceAssociation, context: context)
        Hearth::Validator.validate!(input[:carrier_ip], ::String, context: "#{context}[:carrier_ip]")
        Hearth::Validator.validate!(input[:customer_owned_ip], ::String, context: "#{context}[:customer_owned_ip]")
        Hearth::Validator.validate!(input[:ip_owner_id], ::String, context: "#{context}[:ip_owner_id]")
        Hearth::Validator.validate!(input[:public_dns_name], ::String, context: "#{context}[:public_dns_name]")
        Hearth::Validator.validate!(input[:public_ip], ::String, context: "#{context}[:public_ip]")
      end
    end

    class InstanceNetworkInterfaceAttachment
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceNetworkInterfaceAttachment, context: context)
        Hearth::Validator.validate!(input[:attach_time], ::Time, context: "#{context}[:attach_time]")
        Hearth::Validator.validate!(input[:attachment_id], ::String, context: "#{context}[:attachment_id]")
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
        Hearth::Validator.validate!(input[:device_index], ::Integer, context: "#{context}[:device_index]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:network_card_index], ::Integer, context: "#{context}[:network_card_index]")
      end
    end

    class InstanceNetworkInterfaceList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceNetworkInterface.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceNetworkInterfaceSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceNetworkInterfaceSpecification, context: context)
        Hearth::Validator.validate!(input[:associate_public_ip_address], ::TrueClass, ::FalseClass, context: "#{context}[:associate_public_ip_address]")
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:device_index], ::Integer, context: "#{context}[:device_index]")
        SecurityGroupIdStringList.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        Hearth::Validator.validate!(input[:ipv6_address_count], ::Integer, context: "#{context}[:ipv6_address_count]")
        InstanceIpv6AddressList.validate!(input[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless input[:ipv6_addresses].nil?
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
        PrivateIpAddressSpecificationList.validate!(input[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless input[:private_ip_addresses].nil?
        Hearth::Validator.validate!(input[:secondary_private_ip_address_count], ::Integer, context: "#{context}[:secondary_private_ip_address_count]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:associate_carrier_ip_address], ::TrueClass, ::FalseClass, context: "#{context}[:associate_carrier_ip_address]")
        Hearth::Validator.validate!(input[:interface_type], ::String, context: "#{context}[:interface_type]")
        Hearth::Validator.validate!(input[:network_card_index], ::Integer, context: "#{context}[:network_card_index]")
        Ipv4PrefixList.validate!(input[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless input[:ipv4_prefixes].nil?
        Hearth::Validator.validate!(input[:ipv4_prefix_count], ::Integer, context: "#{context}[:ipv4_prefix_count]")
        Ipv6PrefixList.validate!(input[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless input[:ipv6_prefixes].nil?
        Hearth::Validator.validate!(input[:ipv6_prefix_count], ::Integer, context: "#{context}[:ipv6_prefix_count]")
      end
    end

    class InstanceNetworkInterfaceSpecificationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceNetworkInterfaceSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstancePrivateIpAddress
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstancePrivateIpAddress, context: context)
        InstanceNetworkInterfaceAssociation.validate!(input[:association], context: "#{context}[:association]") unless input[:association].nil?
        Hearth::Validator.validate!(input[:primary], ::TrueClass, ::FalseClass, context: "#{context}[:primary]")
        Hearth::Validator.validate!(input[:private_dns_name], ::String, context: "#{context}[:private_dns_name]")
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
      end
    end

    class InstancePrivateIpAddressList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstancePrivateIpAddress.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceRequirements
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceRequirements, context: context)
        VCpuCountRange.validate!(input[:v_cpu_count], context: "#{context}[:v_cpu_count]") unless input[:v_cpu_count].nil?
        MemoryMiB.validate!(input[:memory_mi_b], context: "#{context}[:memory_mi_b]") unless input[:memory_mi_b].nil?
        CpuManufacturerSet.validate!(input[:cpu_manufacturers], context: "#{context}[:cpu_manufacturers]") unless input[:cpu_manufacturers].nil?
        MemoryGiBPerVCpu.validate!(input[:memory_gi_b_per_v_cpu], context: "#{context}[:memory_gi_b_per_v_cpu]") unless input[:memory_gi_b_per_v_cpu].nil?
        ExcludedInstanceTypeSet.validate!(input[:excluded_instance_types], context: "#{context}[:excluded_instance_types]") unless input[:excluded_instance_types].nil?
        InstanceGenerationSet.validate!(input[:instance_generations], context: "#{context}[:instance_generations]") unless input[:instance_generations].nil?
        Hearth::Validator.validate!(input[:spot_max_price_percentage_over_lowest_price], ::Integer, context: "#{context}[:spot_max_price_percentage_over_lowest_price]")
        Hearth::Validator.validate!(input[:on_demand_max_price_percentage_over_lowest_price], ::Integer, context: "#{context}[:on_demand_max_price_percentage_over_lowest_price]")
        Hearth::Validator.validate!(input[:bare_metal], ::String, context: "#{context}[:bare_metal]")
        Hearth::Validator.validate!(input[:burstable_performance], ::String, context: "#{context}[:burstable_performance]")
        Hearth::Validator.validate!(input[:require_hibernate_support], ::TrueClass, ::FalseClass, context: "#{context}[:require_hibernate_support]")
        NetworkInterfaceCount.validate!(input[:network_interface_count], context: "#{context}[:network_interface_count]") unless input[:network_interface_count].nil?
        Hearth::Validator.validate!(input[:local_storage], ::String, context: "#{context}[:local_storage]")
        LocalStorageTypeSet.validate!(input[:local_storage_types], context: "#{context}[:local_storage_types]") unless input[:local_storage_types].nil?
        TotalLocalStorageGB.validate!(input[:total_local_storage_gb], context: "#{context}[:total_local_storage_gb]") unless input[:total_local_storage_gb].nil?
        BaselineEbsBandwidthMbps.validate!(input[:baseline_ebs_bandwidth_mbps], context: "#{context}[:baseline_ebs_bandwidth_mbps]") unless input[:baseline_ebs_bandwidth_mbps].nil?
        AcceleratorTypeSet.validate!(input[:accelerator_types], context: "#{context}[:accelerator_types]") unless input[:accelerator_types].nil?
        AcceleratorCount.validate!(input[:accelerator_count], context: "#{context}[:accelerator_count]") unless input[:accelerator_count].nil?
        AcceleratorManufacturerSet.validate!(input[:accelerator_manufacturers], context: "#{context}[:accelerator_manufacturers]") unless input[:accelerator_manufacturers].nil?
        AcceleratorNameSet.validate!(input[:accelerator_names], context: "#{context}[:accelerator_names]") unless input[:accelerator_names].nil?
        AcceleratorTotalMemoryMiB.validate!(input[:accelerator_total_memory_mi_b], context: "#{context}[:accelerator_total_memory_mi_b]") unless input[:accelerator_total_memory_mi_b].nil?
      end
    end

    class InstanceRequirementsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceRequirementsRequest, context: context)
        VCpuCountRangeRequest.validate!(input[:v_cpu_count], context: "#{context}[:v_cpu_count]") unless input[:v_cpu_count].nil?
        MemoryMiBRequest.validate!(input[:memory_mi_b], context: "#{context}[:memory_mi_b]") unless input[:memory_mi_b].nil?
        CpuManufacturerSet.validate!(input[:cpu_manufacturers], context: "#{context}[:cpu_manufacturers]") unless input[:cpu_manufacturers].nil?
        MemoryGiBPerVCpuRequest.validate!(input[:memory_gi_b_per_v_cpu], context: "#{context}[:memory_gi_b_per_v_cpu]") unless input[:memory_gi_b_per_v_cpu].nil?
        ExcludedInstanceTypeSet.validate!(input[:excluded_instance_types], context: "#{context}[:excluded_instance_types]") unless input[:excluded_instance_types].nil?
        InstanceGenerationSet.validate!(input[:instance_generations], context: "#{context}[:instance_generations]") unless input[:instance_generations].nil?
        Hearth::Validator.validate!(input[:spot_max_price_percentage_over_lowest_price], ::Integer, context: "#{context}[:spot_max_price_percentage_over_lowest_price]")
        Hearth::Validator.validate!(input[:on_demand_max_price_percentage_over_lowest_price], ::Integer, context: "#{context}[:on_demand_max_price_percentage_over_lowest_price]")
        Hearth::Validator.validate!(input[:bare_metal], ::String, context: "#{context}[:bare_metal]")
        Hearth::Validator.validate!(input[:burstable_performance], ::String, context: "#{context}[:burstable_performance]")
        Hearth::Validator.validate!(input[:require_hibernate_support], ::TrueClass, ::FalseClass, context: "#{context}[:require_hibernate_support]")
        NetworkInterfaceCountRequest.validate!(input[:network_interface_count], context: "#{context}[:network_interface_count]") unless input[:network_interface_count].nil?
        Hearth::Validator.validate!(input[:local_storage], ::String, context: "#{context}[:local_storage]")
        LocalStorageTypeSet.validate!(input[:local_storage_types], context: "#{context}[:local_storage_types]") unless input[:local_storage_types].nil?
        TotalLocalStorageGBRequest.validate!(input[:total_local_storage_gb], context: "#{context}[:total_local_storage_gb]") unless input[:total_local_storage_gb].nil?
        BaselineEbsBandwidthMbpsRequest.validate!(input[:baseline_ebs_bandwidth_mbps], context: "#{context}[:baseline_ebs_bandwidth_mbps]") unless input[:baseline_ebs_bandwidth_mbps].nil?
        AcceleratorTypeSet.validate!(input[:accelerator_types], context: "#{context}[:accelerator_types]") unless input[:accelerator_types].nil?
        AcceleratorCountRequest.validate!(input[:accelerator_count], context: "#{context}[:accelerator_count]") unless input[:accelerator_count].nil?
        AcceleratorManufacturerSet.validate!(input[:accelerator_manufacturers], context: "#{context}[:accelerator_manufacturers]") unless input[:accelerator_manufacturers].nil?
        AcceleratorNameSet.validate!(input[:accelerator_names], context: "#{context}[:accelerator_names]") unless input[:accelerator_names].nil?
        AcceleratorTotalMemoryMiBRequest.validate!(input[:accelerator_total_memory_mi_b], context: "#{context}[:accelerator_total_memory_mi_b]") unless input[:accelerator_total_memory_mi_b].nil?
      end
    end

    class InstanceRequirementsWithMetadataRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceRequirementsWithMetadataRequest, context: context)
        ArchitectureTypeSet.validate!(input[:architecture_types], context: "#{context}[:architecture_types]") unless input[:architecture_types].nil?
        VirtualizationTypeSet.validate!(input[:virtualization_types], context: "#{context}[:virtualization_types]") unless input[:virtualization_types].nil?
        InstanceRequirementsRequest.validate!(input[:instance_requirements], context: "#{context}[:instance_requirements]") unless input[:instance_requirements].nil?
      end
    end

    class InstanceSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceSpecification, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:exclude_boot_volume], ::TrueClass, ::FalseClass, context: "#{context}[:exclude_boot_volume]")
      end
    end

    class InstanceState
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceState, context: context)
        Hearth::Validator.validate!(input[:code], ::Integer, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
      end
    end

    class InstanceStateChange
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceStateChange, context: context)
        InstanceState.validate!(input[:current_state], context: "#{context}[:current_state]") unless input[:current_state].nil?
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        InstanceState.validate!(input[:previous_state], context: "#{context}[:previous_state]") unless input[:previous_state].nil?
      end
    end

    class InstanceStateChangeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceStateChange.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceStatus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceStatus, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        InstanceStatusEventList.validate!(input[:events], context: "#{context}[:events]") unless input[:events].nil?
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        InstanceState.validate!(input[:instance_state], context: "#{context}[:instance_state]") unless input[:instance_state].nil?
        InstanceStatusSummary.validate!(input[:instance_status], context: "#{context}[:instance_status]") unless input[:instance_status].nil?
        InstanceStatusSummary.validate!(input[:system_status], context: "#{context}[:system_status]") unless input[:system_status].nil?
      end
    end

    class InstanceStatusDetails
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceStatusDetails, context: context)
        Hearth::Validator.validate!(input[:impaired_since], ::Time, context: "#{context}[:impaired_since]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
      end
    end

    class InstanceStatusDetailsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceStatusDetails.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceStatusEvent
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceStatusEvent, context: context)
        Hearth::Validator.validate!(input[:instance_event_id], ::String, context: "#{context}[:instance_event_id]")
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:not_after], ::Time, context: "#{context}[:not_after]")
        Hearth::Validator.validate!(input[:not_before], ::Time, context: "#{context}[:not_before]")
        Hearth::Validator.validate!(input[:not_before_deadline], ::Time, context: "#{context}[:not_before_deadline]")
      end
    end

    class InstanceStatusEventList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceStatusEvent.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceStatusList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceStatus.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceStatusSummary
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceStatusSummary, context: context)
        InstanceStatusDetailsList.validate!(input[:details], context: "#{context}[:details]") unless input[:details].nil?
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
      end
    end

    class InstanceStorageInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceStorageInfo, context: context)
        Hearth::Validator.validate!(input[:total_size_in_gb], ::Integer, context: "#{context}[:total_size_in_gb]")
        DiskInfoList.validate!(input[:disks], context: "#{context}[:disks]") unless input[:disks].nil?
        Hearth::Validator.validate!(input[:nvme_support], ::String, context: "#{context}[:nvme_support]")
        Hearth::Validator.validate!(input[:encryption_support], ::String, context: "#{context}[:encryption_support]")
      end
    end

    class InstanceTagKeySet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class InstanceTagNotificationAttribute
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceTagNotificationAttribute, context: context)
        InstanceTagKeySet.validate!(input[:instance_tag_keys], context: "#{context}[:instance_tag_keys]") unless input[:instance_tag_keys].nil?
        Hearth::Validator.validate!(input[:include_all_tags_of_instance], ::TrueClass, ::FalseClass, context: "#{context}[:include_all_tags_of_instance]")
      end
    end

    class InstanceTypeInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceTypeInfo, context: context)
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:current_generation], ::TrueClass, ::FalseClass, context: "#{context}[:current_generation]")
        Hearth::Validator.validate!(input[:free_tier_eligible], ::TrueClass, ::FalseClass, context: "#{context}[:free_tier_eligible]")
        UsageClassTypeList.validate!(input[:supported_usage_classes], context: "#{context}[:supported_usage_classes]") unless input[:supported_usage_classes].nil?
        RootDeviceTypeList.validate!(input[:supported_root_device_types], context: "#{context}[:supported_root_device_types]") unless input[:supported_root_device_types].nil?
        VirtualizationTypeList.validate!(input[:supported_virtualization_types], context: "#{context}[:supported_virtualization_types]") unless input[:supported_virtualization_types].nil?
        Hearth::Validator.validate!(input[:bare_metal], ::TrueClass, ::FalseClass, context: "#{context}[:bare_metal]")
        Hearth::Validator.validate!(input[:hypervisor], ::String, context: "#{context}[:hypervisor]")
        ProcessorInfo.validate!(input[:processor_info], context: "#{context}[:processor_info]") unless input[:processor_info].nil?
        VCpuInfo.validate!(input[:v_cpu_info], context: "#{context}[:v_cpu_info]") unless input[:v_cpu_info].nil?
        MemoryInfo.validate!(input[:memory_info], context: "#{context}[:memory_info]") unless input[:memory_info].nil?
        Hearth::Validator.validate!(input[:instance_storage_supported], ::TrueClass, ::FalseClass, context: "#{context}[:instance_storage_supported]")
        InstanceStorageInfo.validate!(input[:instance_storage_info], context: "#{context}[:instance_storage_info]") unless input[:instance_storage_info].nil?
        EbsInfo.validate!(input[:ebs_info], context: "#{context}[:ebs_info]") unless input[:ebs_info].nil?
        NetworkInfo.validate!(input[:network_info], context: "#{context}[:network_info]") unless input[:network_info].nil?
        GpuInfo.validate!(input[:gpu_info], context: "#{context}[:gpu_info]") unless input[:gpu_info].nil?
        FpgaInfo.validate!(input[:fpga_info], context: "#{context}[:fpga_info]") unless input[:fpga_info].nil?
        PlacementGroupInfo.validate!(input[:placement_group_info], context: "#{context}[:placement_group_info]") unless input[:placement_group_info].nil?
        InferenceAcceleratorInfo.validate!(input[:inference_accelerator_info], context: "#{context}[:inference_accelerator_info]") unless input[:inference_accelerator_info].nil?
        Hearth::Validator.validate!(input[:hibernation_supported], ::TrueClass, ::FalseClass, context: "#{context}[:hibernation_supported]")
        Hearth::Validator.validate!(input[:burstable_performance_supported], ::TrueClass, ::FalseClass, context: "#{context}[:burstable_performance_supported]")
        Hearth::Validator.validate!(input[:dedicated_hosts_supported], ::TrueClass, ::FalseClass, context: "#{context}[:dedicated_hosts_supported]")
        Hearth::Validator.validate!(input[:auto_recovery_supported], ::TrueClass, ::FalseClass, context: "#{context}[:auto_recovery_supported]")
        BootModeTypeList.validate!(input[:supported_boot_modes], context: "#{context}[:supported_boot_modes]") unless input[:supported_boot_modes].nil?
      end
    end

    class InstanceTypeInfoFromInstanceRequirements
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceTypeInfoFromInstanceRequirements, context: context)
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
      end
    end

    class InstanceTypeInfoFromInstanceRequirementsSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceTypeInfoFromInstanceRequirements.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceTypeInfoList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceTypeInfo.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceTypeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class InstanceTypeOffering
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceTypeOffering, context: context)
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:location_type], ::String, context: "#{context}[:location_type]")
        Hearth::Validator.validate!(input[:location], ::String, context: "#{context}[:location]")
      end
    end

    class InstanceTypeOfferingsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceTypeOffering.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InstanceTypes
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class InstanceUsage
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InstanceUsage, context: context)
        Hearth::Validator.validate!(input[:account_id], ::String, context: "#{context}[:account_id]")
        Hearth::Validator.validate!(input[:used_instance_count], ::Integer, context: "#{context}[:used_instance_count]")
      end
    end

    class InstanceUsageSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InstanceUsage.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IntegrateServices
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IntegrateServices, context: context)
        AthenaIntegrationsSet.validate!(input[:athena_integrations], context: "#{context}[:athena_integrations]") unless input[:athena_integrations].nil?
      end
    end

    class InternetGateway
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InternetGateway, context: context)
        InternetGatewayAttachmentList.validate!(input[:attachments], context: "#{context}[:attachments]") unless input[:attachments].nil?
        Hearth::Validator.validate!(input[:internet_gateway_id], ::String, context: "#{context}[:internet_gateway_id]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class InternetGatewayAttachment
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::InternetGatewayAttachment, context: context)
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class InternetGatewayAttachmentList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InternetGatewayAttachment.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class InternetGatewayIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class InternetGatewayList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          InternetGateway.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IpAddressList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class IpPermission
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IpPermission, context: context)
        Hearth::Validator.validate!(input[:from_port], ::Integer, context: "#{context}[:from_port]")
        Hearth::Validator.validate!(input[:ip_protocol], ::String, context: "#{context}[:ip_protocol]")
        IpRangeList.validate!(input[:ip_ranges], context: "#{context}[:ip_ranges]") unless input[:ip_ranges].nil?
        Ipv6RangeList.validate!(input[:ipv6_ranges], context: "#{context}[:ipv6_ranges]") unless input[:ipv6_ranges].nil?
        PrefixListIdList.validate!(input[:prefix_list_ids], context: "#{context}[:prefix_list_ids]") unless input[:prefix_list_ids].nil?
        Hearth::Validator.validate!(input[:to_port], ::Integer, context: "#{context}[:to_port]")
        UserIdGroupPairList.validate!(input[:user_id_group_pairs], context: "#{context}[:user_id_group_pairs]") unless input[:user_id_group_pairs].nil?
      end
    end

    class IpPermissionList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          IpPermission.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IpPrefixList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class IpRange
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IpRange, context: context)
        Hearth::Validator.validate!(input[:cidr_ip], ::String, context: "#{context}[:cidr_ip]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
      end
    end

    class IpRangeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          IpRange.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IpRanges
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class Ipam
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Ipam, context: context)
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:ipam_id], ::String, context: "#{context}[:ipam_id]")
        Hearth::Validator.validate!(input[:ipam_arn], ::String, context: "#{context}[:ipam_arn]")
        Hearth::Validator.validate!(input[:ipam_region], ::String, context: "#{context}[:ipam_region]")
        Hearth::Validator.validate!(input[:public_default_scope_id], ::String, context: "#{context}[:public_default_scope_id]")
        Hearth::Validator.validate!(input[:private_default_scope_id], ::String, context: "#{context}[:private_default_scope_id]")
        Hearth::Validator.validate!(input[:scope_count], ::Integer, context: "#{context}[:scope_count]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        IpamOperatingRegionSet.validate!(input[:operating_regions], context: "#{context}[:operating_regions]") unless input[:operating_regions].nil?
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class IpamAddressHistoryRecord
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IpamAddressHistoryRecord, context: context)
        Hearth::Validator.validate!(input[:resource_owner_id], ::String, context: "#{context}[:resource_owner_id]")
        Hearth::Validator.validate!(input[:resource_region], ::String, context: "#{context}[:resource_region]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:resource_cidr], ::String, context: "#{context}[:resource_cidr]")
        Hearth::Validator.validate!(input[:resource_name], ::String, context: "#{context}[:resource_name]")
        Hearth::Validator.validate!(input[:resource_compliance_status], ::String, context: "#{context}[:resource_compliance_status]")
        Hearth::Validator.validate!(input[:resource_overlap_status], ::String, context: "#{context}[:resource_overlap_status]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:sampled_start_time], ::Time, context: "#{context}[:sampled_start_time]")
        Hearth::Validator.validate!(input[:sampled_end_time], ::Time, context: "#{context}[:sampled_end_time]")
      end
    end

    class IpamAddressHistoryRecordSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          IpamAddressHistoryRecord.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IpamCidrAuthorizationContext
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IpamCidrAuthorizationContext, context: context)
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
        Hearth::Validator.validate!(input[:signature], ::String, context: "#{context}[:signature]")
      end
    end

    class IpamOperatingRegion
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IpamOperatingRegion, context: context)
        Hearth::Validator.validate!(input[:region_name], ::String, context: "#{context}[:region_name]")
      end
    end

    class IpamOperatingRegionSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          IpamOperatingRegion.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IpamPool
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IpamPool, context: context)
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:ipam_pool_id], ::String, context: "#{context}[:ipam_pool_id]")
        Hearth::Validator.validate!(input[:source_ipam_pool_id], ::String, context: "#{context}[:source_ipam_pool_id]")
        Hearth::Validator.validate!(input[:ipam_pool_arn], ::String, context: "#{context}[:ipam_pool_arn]")
        Hearth::Validator.validate!(input[:ipam_scope_arn], ::String, context: "#{context}[:ipam_scope_arn]")
        Hearth::Validator.validate!(input[:ipam_scope_type], ::String, context: "#{context}[:ipam_scope_type]")
        Hearth::Validator.validate!(input[:ipam_arn], ::String, context: "#{context}[:ipam_arn]")
        Hearth::Validator.validate!(input[:ipam_region], ::String, context: "#{context}[:ipam_region]")
        Hearth::Validator.validate!(input[:locale], ::String, context: "#{context}[:locale]")
        Hearth::Validator.validate!(input[:pool_depth], ::Integer, context: "#{context}[:pool_depth]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:state_message], ::String, context: "#{context}[:state_message]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:auto_import], ::TrueClass, ::FalseClass, context: "#{context}[:auto_import]")
        Hearth::Validator.validate!(input[:publicly_advertisable], ::TrueClass, ::FalseClass, context: "#{context}[:publicly_advertisable]")
        Hearth::Validator.validate!(input[:address_family], ::String, context: "#{context}[:address_family]")
        Hearth::Validator.validate!(input[:allocation_min_netmask_length], ::Integer, context: "#{context}[:allocation_min_netmask_length]")
        Hearth::Validator.validate!(input[:allocation_max_netmask_length], ::Integer, context: "#{context}[:allocation_max_netmask_length]")
        Hearth::Validator.validate!(input[:allocation_default_netmask_length], ::Integer, context: "#{context}[:allocation_default_netmask_length]")
        IpamResourceTagList.validate!(input[:allocation_resource_tags], context: "#{context}[:allocation_resource_tags]") unless input[:allocation_resource_tags].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:aws_service], ::String, context: "#{context}[:aws_service]")
      end
    end

    class IpamPoolAllocation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IpamPoolAllocation, context: context)
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:ipam_pool_allocation_id], ::String, context: "#{context}[:ipam_pool_allocation_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        Hearth::Validator.validate!(input[:resource_region], ::String, context: "#{context}[:resource_region]")
        Hearth::Validator.validate!(input[:resource_owner], ::String, context: "#{context}[:resource_owner]")
      end
    end

    class IpamPoolAllocationDisallowedCidrs
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class IpamPoolAllocationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          IpamPoolAllocation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IpamPoolCidr
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IpamPoolCidr, context: context)
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        IpamPoolCidrFailureReason.validate!(input[:failure_reason], context: "#{context}[:failure_reason]") unless input[:failure_reason].nil?
      end
    end

    class IpamPoolCidrFailureReason
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IpamPoolCidrFailureReason, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class IpamPoolCidrSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          IpamPoolCidr.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IpamPoolSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          IpamPool.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IpamResourceCidr
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IpamResourceCidr, context: context)
        Hearth::Validator.validate!(input[:ipam_id], ::String, context: "#{context}[:ipam_id]")
        Hearth::Validator.validate!(input[:ipam_scope_id], ::String, context: "#{context}[:ipam_scope_id]")
        Hearth::Validator.validate!(input[:ipam_pool_id], ::String, context: "#{context}[:ipam_pool_id]")
        Hearth::Validator.validate!(input[:resource_region], ::String, context: "#{context}[:resource_region]")
        Hearth::Validator.validate!(input[:resource_owner_id], ::String, context: "#{context}[:resource_owner_id]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:resource_name], ::String, context: "#{context}[:resource_name]")
        Hearth::Validator.validate!(input[:resource_cidr], ::String, context: "#{context}[:resource_cidr]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        IpamResourceTagList.validate!(input[:resource_tags], context: "#{context}[:resource_tags]") unless input[:resource_tags].nil?
        Hearth::Validator.validate!(input[:ip_usage], ::Float, context: "#{context}[:ip_usage]")
        Hearth::Validator.validate!(input[:compliance_status], ::String, context: "#{context}[:compliance_status]")
        Hearth::Validator.validate!(input[:management_state], ::String, context: "#{context}[:management_state]")
        Hearth::Validator.validate!(input[:overlap_status], ::String, context: "#{context}[:overlap_status]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class IpamResourceCidrSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          IpamResourceCidr.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IpamResourceTag
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IpamResourceTag, context: context)
        Hearth::Validator.validate!(input[:key], ::String, context: "#{context}[:key]")
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class IpamResourceTagList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          IpamResourceTag.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IpamScope
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::IpamScope, context: context)
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:ipam_scope_id], ::String, context: "#{context}[:ipam_scope_id]")
        Hearth::Validator.validate!(input[:ipam_scope_arn], ::String, context: "#{context}[:ipam_scope_arn]")
        Hearth::Validator.validate!(input[:ipam_arn], ::String, context: "#{context}[:ipam_arn]")
        Hearth::Validator.validate!(input[:ipam_region], ::String, context: "#{context}[:ipam_region]")
        Hearth::Validator.validate!(input[:ipam_scope_type], ::String, context: "#{context}[:ipam_scope_type]")
        Hearth::Validator.validate!(input[:is_default], ::TrueClass, ::FalseClass, context: "#{context}[:is_default]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:pool_count], ::Integer, context: "#{context}[:pool_count]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class IpamScopeSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          IpamScope.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class IpamSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Ipam.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Ipv4PrefixList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Ipv4PrefixSpecificationRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Ipv4PrefixListResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Ipv4PrefixSpecificationResponse.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Ipv4PrefixSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Ipv4PrefixSpecification, context: context)
        Hearth::Validator.validate!(input[:ipv4_prefix], ::String, context: "#{context}[:ipv4_prefix]")
      end
    end

    class Ipv4PrefixSpecificationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Ipv4PrefixSpecificationRequest, context: context)
        Hearth::Validator.validate!(input[:ipv4_prefix], ::String, context: "#{context}[:ipv4_prefix]")
      end
    end

    class Ipv4PrefixSpecificationResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Ipv4PrefixSpecificationResponse, context: context)
        Hearth::Validator.validate!(input[:ipv4_prefix], ::String, context: "#{context}[:ipv4_prefix]")
      end
    end

    class Ipv4PrefixesList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Ipv4PrefixSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Ipv6AddressList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class Ipv6CidrAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Ipv6CidrAssociation, context: context)
        Hearth::Validator.validate!(input[:ipv6_cidr], ::String, context: "#{context}[:ipv6_cidr]")
        Hearth::Validator.validate!(input[:associated_resource], ::String, context: "#{context}[:associated_resource]")
      end
    end

    class Ipv6CidrAssociationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Ipv6CidrAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Ipv6CidrBlock
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Ipv6CidrBlock, context: context)
        Hearth::Validator.validate!(input[:ipv6_cidr_block], ::String, context: "#{context}[:ipv6_cidr_block]")
      end
    end

    class Ipv6CidrBlockSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Ipv6CidrBlock.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Ipv6Pool
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Ipv6Pool, context: context)
        Hearth::Validator.validate!(input[:pool_id], ::String, context: "#{context}[:pool_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        PoolCidrBlocksSet.validate!(input[:pool_cidr_blocks], context: "#{context}[:pool_cidr_blocks]") unless input[:pool_cidr_blocks].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class Ipv6PoolIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class Ipv6PoolSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Ipv6Pool.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Ipv6PrefixList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Ipv6PrefixSpecificationRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Ipv6PrefixListResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Ipv6PrefixSpecificationResponse.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Ipv6PrefixSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Ipv6PrefixSpecification, context: context)
        Hearth::Validator.validate!(input[:ipv6_prefix], ::String, context: "#{context}[:ipv6_prefix]")
      end
    end

    class Ipv6PrefixSpecificationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Ipv6PrefixSpecificationRequest, context: context)
        Hearth::Validator.validate!(input[:ipv6_prefix], ::String, context: "#{context}[:ipv6_prefix]")
      end
    end

    class Ipv6PrefixSpecificationResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Ipv6PrefixSpecificationResponse, context: context)
        Hearth::Validator.validate!(input[:ipv6_prefix], ::String, context: "#{context}[:ipv6_prefix]")
      end
    end

    class Ipv6PrefixesList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Ipv6PrefixSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Ipv6Range
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Ipv6Range, context: context)
        Hearth::Validator.validate!(input[:cidr_ipv6], ::String, context: "#{context}[:cidr_ipv6]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
      end
    end

    class Ipv6RangeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Ipv6Range.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class KeyNameStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class KeyPairIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class KeyPairInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::KeyPairInfo, context: context)
        Hearth::Validator.validate!(input[:key_pair_id], ::String, context: "#{context}[:key_pair_id]")
        Hearth::Validator.validate!(input[:key_fingerprint], ::String, context: "#{context}[:key_fingerprint]")
        Hearth::Validator.validate!(input[:key_name], ::String, context: "#{context}[:key_name]")
        Hearth::Validator.validate!(input[:key_type], ::String, context: "#{context}[:key_type]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:public_key], ::String, context: "#{context}[:public_key]")
        Hearth::Validator.validate!(input[:create_time], ::Time, context: "#{context}[:create_time]")
      end
    end

    class KeyPairList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          KeyPairInfo.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LastError
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LastError, context: context)
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
      end
    end

    class LaunchPermission
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchPermission, context: context)
        Hearth::Validator.validate!(input[:group], ::String, context: "#{context}[:group]")
        Hearth::Validator.validate!(input[:user_id], ::String, context: "#{context}[:user_id]")
        Hearth::Validator.validate!(input[:organization_arn], ::String, context: "#{context}[:organization_arn]")
        Hearth::Validator.validate!(input[:organizational_unit_arn], ::String, context: "#{context}[:organizational_unit_arn]")
      end
    end

    class LaunchPermissionList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LaunchPermission.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchPermissionModifications
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchPermissionModifications, context: context)
        LaunchPermissionList.validate!(input[:add], context: "#{context}[:add]") unless input[:add].nil?
        LaunchPermissionList.validate!(input[:remove], context: "#{context}[:remove]") unless input[:remove].nil?
      end
    end

    class LaunchSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchSpecification, context: context)
        Hearth::Validator.validate!(input[:user_data], ::String, context: "#{context}[:user_data]")
        GroupIdentifierList.validate!(input[:security_groups], context: "#{context}[:security_groups]") unless input[:security_groups].nil?
        Hearth::Validator.validate!(input[:addressing_type], ::String, context: "#{context}[:addressing_type]")
        BlockDeviceMappingList.validate!(input[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless input[:block_device_mappings].nil?
        Hearth::Validator.validate!(input[:ebs_optimized], ::TrueClass, ::FalseClass, context: "#{context}[:ebs_optimized]")
        IamInstanceProfileSpecification.validate!(input[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless input[:iam_instance_profile].nil?
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:kernel_id], ::String, context: "#{context}[:kernel_id]")
        Hearth::Validator.validate!(input[:key_name], ::String, context: "#{context}[:key_name]")
        InstanceNetworkInterfaceSpecificationList.validate!(input[:network_interfaces], context: "#{context}[:network_interfaces]") unless input[:network_interfaces].nil?
        SpotPlacement.validate!(input[:placement], context: "#{context}[:placement]") unless input[:placement].nil?
        Hearth::Validator.validate!(input[:ramdisk_id], ::String, context: "#{context}[:ramdisk_id]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        RunInstancesMonitoringEnabled.validate!(input[:monitoring], context: "#{context}[:monitoring]") unless input[:monitoring].nil?
      end
    end

    class LaunchSpecsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SpotFleetLaunchSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchTemplate
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplate, context: context)
        Hearth::Validator.validate!(input[:launch_template_id], ::String, context: "#{context}[:launch_template_id]")
        Hearth::Validator.validate!(input[:launch_template_name], ::String, context: "#{context}[:launch_template_name]")
        Hearth::Validator.validate!(input[:create_time], ::Time, context: "#{context}[:create_time]")
        Hearth::Validator.validate!(input[:created_by], ::String, context: "#{context}[:created_by]")
        Hearth::Validator.validate!(input[:default_version_number], ::Integer, context: "#{context}[:default_version_number]")
        Hearth::Validator.validate!(input[:latest_version_number], ::Integer, context: "#{context}[:latest_version_number]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class LaunchTemplateAndOverridesResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateAndOverridesResponse, context: context)
        FleetLaunchTemplateSpecification.validate!(input[:launch_template_specification], context: "#{context}[:launch_template_specification]") unless input[:launch_template_specification].nil?
        FleetLaunchTemplateOverrides.validate!(input[:overrides], context: "#{context}[:overrides]") unless input[:overrides].nil?
      end
    end

    class LaunchTemplateBlockDeviceMapping
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateBlockDeviceMapping, context: context)
        Hearth::Validator.validate!(input[:device_name], ::String, context: "#{context}[:device_name]")
        Hearth::Validator.validate!(input[:virtual_name], ::String, context: "#{context}[:virtual_name]")
        LaunchTemplateEbsBlockDevice.validate!(input[:ebs], context: "#{context}[:ebs]") unless input[:ebs].nil?
        Hearth::Validator.validate!(input[:no_device], ::String, context: "#{context}[:no_device]")
      end
    end

    class LaunchTemplateBlockDeviceMappingList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LaunchTemplateBlockDeviceMapping.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchTemplateBlockDeviceMappingRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateBlockDeviceMappingRequest, context: context)
        Hearth::Validator.validate!(input[:device_name], ::String, context: "#{context}[:device_name]")
        Hearth::Validator.validate!(input[:virtual_name], ::String, context: "#{context}[:virtual_name]")
        LaunchTemplateEbsBlockDeviceRequest.validate!(input[:ebs], context: "#{context}[:ebs]") unless input[:ebs].nil?
        Hearth::Validator.validate!(input[:no_device], ::String, context: "#{context}[:no_device]")
      end
    end

    class LaunchTemplateBlockDeviceMappingRequestList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LaunchTemplateBlockDeviceMappingRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchTemplateCapacityReservationSpecificationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateCapacityReservationSpecificationRequest, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_preference], ::String, context: "#{context}[:capacity_reservation_preference]")
        CapacityReservationTarget.validate!(input[:capacity_reservation_target], context: "#{context}[:capacity_reservation_target]") unless input[:capacity_reservation_target].nil?
      end
    end

    class LaunchTemplateCapacityReservationSpecificationResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateCapacityReservationSpecificationResponse, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_preference], ::String, context: "#{context}[:capacity_reservation_preference]")
        CapacityReservationTargetResponse.validate!(input[:capacity_reservation_target], context: "#{context}[:capacity_reservation_target]") unless input[:capacity_reservation_target].nil?
      end
    end

    class LaunchTemplateConfig
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateConfig, context: context)
        FleetLaunchTemplateSpecification.validate!(input[:launch_template_specification], context: "#{context}[:launch_template_specification]") unless input[:launch_template_specification].nil?
        LaunchTemplateOverridesList.validate!(input[:overrides], context: "#{context}[:overrides]") unless input[:overrides].nil?
      end
    end

    class LaunchTemplateConfigList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LaunchTemplateConfig.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchTemplateCpuOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateCpuOptions, context: context)
        Hearth::Validator.validate!(input[:core_count], ::Integer, context: "#{context}[:core_count]")
        Hearth::Validator.validate!(input[:threads_per_core], ::Integer, context: "#{context}[:threads_per_core]")
      end
    end

    class LaunchTemplateCpuOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateCpuOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:core_count], ::Integer, context: "#{context}[:core_count]")
        Hearth::Validator.validate!(input[:threads_per_core], ::Integer, context: "#{context}[:threads_per_core]")
      end
    end

    class LaunchTemplateEbsBlockDevice
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateEbsBlockDevice, context: context)
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
        Hearth::Validator.validate!(input[:iops], ::Integer, context: "#{context}[:iops]")
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:volume_size], ::Integer, context: "#{context}[:volume_size]")
        Hearth::Validator.validate!(input[:volume_type], ::String, context: "#{context}[:volume_type]")
        Hearth::Validator.validate!(input[:throughput], ::Integer, context: "#{context}[:throughput]")
      end
    end

    class LaunchTemplateEbsBlockDeviceRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateEbsBlockDeviceRequest, context: context)
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
        Hearth::Validator.validate!(input[:iops], ::Integer, context: "#{context}[:iops]")
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:volume_size], ::Integer, context: "#{context}[:volume_size]")
        Hearth::Validator.validate!(input[:volume_type], ::String, context: "#{context}[:volume_type]")
        Hearth::Validator.validate!(input[:throughput], ::Integer, context: "#{context}[:throughput]")
      end
    end

    class LaunchTemplateElasticInferenceAccelerator
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateElasticInferenceAccelerator, context: context)
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:count], ::Integer, context: "#{context}[:count]")
      end
    end

    class LaunchTemplateElasticInferenceAcceleratorList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LaunchTemplateElasticInferenceAccelerator.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchTemplateElasticInferenceAcceleratorResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateElasticInferenceAcceleratorResponse, context: context)
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:count], ::Integer, context: "#{context}[:count]")
      end
    end

    class LaunchTemplateElasticInferenceAcceleratorResponseList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LaunchTemplateElasticInferenceAcceleratorResponse.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchTemplateEnclaveOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateEnclaveOptions, context: context)
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
      end
    end

    class LaunchTemplateEnclaveOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateEnclaveOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
      end
    end

    class LaunchTemplateHibernationOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateHibernationOptions, context: context)
        Hearth::Validator.validate!(input[:configured], ::TrueClass, ::FalseClass, context: "#{context}[:configured]")
      end
    end

    class LaunchTemplateHibernationOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateHibernationOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:configured], ::TrueClass, ::FalseClass, context: "#{context}[:configured]")
      end
    end

    class LaunchTemplateIamInstanceProfileSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateIamInstanceProfileSpecification, context: context)
        Hearth::Validator.validate!(input[:arn], ::String, context: "#{context}[:arn]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
      end
    end

    class LaunchTemplateIamInstanceProfileSpecificationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateIamInstanceProfileSpecificationRequest, context: context)
        Hearth::Validator.validate!(input[:arn], ::String, context: "#{context}[:arn]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
      end
    end

    class LaunchTemplateIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class LaunchTemplateInstanceMaintenanceOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateInstanceMaintenanceOptions, context: context)
        Hearth::Validator.validate!(input[:auto_recovery], ::String, context: "#{context}[:auto_recovery]")
      end
    end

    class LaunchTemplateInstanceMaintenanceOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateInstanceMaintenanceOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:auto_recovery], ::String, context: "#{context}[:auto_recovery]")
      end
    end

    class LaunchTemplateInstanceMarketOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateInstanceMarketOptions, context: context)
        Hearth::Validator.validate!(input[:market_type], ::String, context: "#{context}[:market_type]")
        LaunchTemplateSpotMarketOptions.validate!(input[:spot_options], context: "#{context}[:spot_options]") unless input[:spot_options].nil?
      end
    end

    class LaunchTemplateInstanceMarketOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateInstanceMarketOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:market_type], ::String, context: "#{context}[:market_type]")
        LaunchTemplateSpotMarketOptionsRequest.validate!(input[:spot_options], context: "#{context}[:spot_options]") unless input[:spot_options].nil?
      end
    end

    class LaunchTemplateInstanceMetadataOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateInstanceMetadataOptions, context: context)
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:http_tokens], ::String, context: "#{context}[:http_tokens]")
        Hearth::Validator.validate!(input[:http_put_response_hop_limit], ::Integer, context: "#{context}[:http_put_response_hop_limit]")
        Hearth::Validator.validate!(input[:http_endpoint], ::String, context: "#{context}[:http_endpoint]")
        Hearth::Validator.validate!(input[:http_protocol_ipv6], ::String, context: "#{context}[:http_protocol_ipv6]")
        Hearth::Validator.validate!(input[:instance_metadata_tags], ::String, context: "#{context}[:instance_metadata_tags]")
      end
    end

    class LaunchTemplateInstanceMetadataOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateInstanceMetadataOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:http_tokens], ::String, context: "#{context}[:http_tokens]")
        Hearth::Validator.validate!(input[:http_put_response_hop_limit], ::Integer, context: "#{context}[:http_put_response_hop_limit]")
        Hearth::Validator.validate!(input[:http_endpoint], ::String, context: "#{context}[:http_endpoint]")
        Hearth::Validator.validate!(input[:http_protocol_ipv6], ::String, context: "#{context}[:http_protocol_ipv6]")
        Hearth::Validator.validate!(input[:instance_metadata_tags], ::String, context: "#{context}[:instance_metadata_tags]")
      end
    end

    class LaunchTemplateInstanceNetworkInterfaceSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateInstanceNetworkInterfaceSpecification, context: context)
        Hearth::Validator.validate!(input[:associate_carrier_ip_address], ::TrueClass, ::FalseClass, context: "#{context}[:associate_carrier_ip_address]")
        Hearth::Validator.validate!(input[:associate_public_ip_address], ::TrueClass, ::FalseClass, context: "#{context}[:associate_public_ip_address]")
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:device_index], ::Integer, context: "#{context}[:device_index]")
        GroupIdStringList.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        Hearth::Validator.validate!(input[:interface_type], ::String, context: "#{context}[:interface_type]")
        Hearth::Validator.validate!(input[:ipv6_address_count], ::Integer, context: "#{context}[:ipv6_address_count]")
        InstanceIpv6AddressList.validate!(input[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless input[:ipv6_addresses].nil?
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
        PrivateIpAddressSpecificationList.validate!(input[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless input[:private_ip_addresses].nil?
        Hearth::Validator.validate!(input[:secondary_private_ip_address_count], ::Integer, context: "#{context}[:secondary_private_ip_address_count]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:network_card_index], ::Integer, context: "#{context}[:network_card_index]")
        Ipv4PrefixListResponse.validate!(input[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless input[:ipv4_prefixes].nil?
        Hearth::Validator.validate!(input[:ipv4_prefix_count], ::Integer, context: "#{context}[:ipv4_prefix_count]")
        Ipv6PrefixListResponse.validate!(input[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless input[:ipv6_prefixes].nil?
        Hearth::Validator.validate!(input[:ipv6_prefix_count], ::Integer, context: "#{context}[:ipv6_prefix_count]")
      end
    end

    class LaunchTemplateInstanceNetworkInterfaceSpecificationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LaunchTemplateInstanceNetworkInterfaceSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchTemplateInstanceNetworkInterfaceSpecificationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest, context: context)
        Hearth::Validator.validate!(input[:associate_carrier_ip_address], ::TrueClass, ::FalseClass, context: "#{context}[:associate_carrier_ip_address]")
        Hearth::Validator.validate!(input[:associate_public_ip_address], ::TrueClass, ::FalseClass, context: "#{context}[:associate_public_ip_address]")
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:device_index], ::Integer, context: "#{context}[:device_index]")
        SecurityGroupIdStringList.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        Hearth::Validator.validate!(input[:interface_type], ::String, context: "#{context}[:interface_type]")
        Hearth::Validator.validate!(input[:ipv6_address_count], ::Integer, context: "#{context}[:ipv6_address_count]")
        InstanceIpv6AddressListRequest.validate!(input[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless input[:ipv6_addresses].nil?
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
        PrivateIpAddressSpecificationList.validate!(input[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless input[:private_ip_addresses].nil?
        Hearth::Validator.validate!(input[:secondary_private_ip_address_count], ::Integer, context: "#{context}[:secondary_private_ip_address_count]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:network_card_index], ::Integer, context: "#{context}[:network_card_index]")
        Ipv4PrefixList.validate!(input[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless input[:ipv4_prefixes].nil?
        Hearth::Validator.validate!(input[:ipv4_prefix_count], ::Integer, context: "#{context}[:ipv4_prefix_count]")
        Ipv6PrefixList.validate!(input[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless input[:ipv6_prefixes].nil?
        Hearth::Validator.validate!(input[:ipv6_prefix_count], ::Integer, context: "#{context}[:ipv6_prefix_count]")
      end
    end

    class LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LaunchTemplateInstanceNetworkInterfaceSpecificationRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchTemplateLicenseConfiguration
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateLicenseConfiguration, context: context)
        Hearth::Validator.validate!(input[:license_configuration_arn], ::String, context: "#{context}[:license_configuration_arn]")
      end
    end

    class LaunchTemplateLicenseConfigurationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateLicenseConfigurationRequest, context: context)
        Hearth::Validator.validate!(input[:license_configuration_arn], ::String, context: "#{context}[:license_configuration_arn]")
      end
    end

    class LaunchTemplateLicenseList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LaunchTemplateLicenseConfiguration.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchTemplateLicenseSpecificationListRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LaunchTemplateLicenseConfigurationRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchTemplateNameStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class LaunchTemplateOverrides
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateOverrides, context: context)
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:spot_price], ::String, context: "#{context}[:spot_price]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:weighted_capacity], ::Float, context: "#{context}[:weighted_capacity]")
        Hearth::Validator.validate!(input[:priority], ::Float, context: "#{context}[:priority]")
        InstanceRequirements.validate!(input[:instance_requirements], context: "#{context}[:instance_requirements]") unless input[:instance_requirements].nil?
      end
    end

    class LaunchTemplateOverridesList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LaunchTemplateOverrides.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchTemplatePlacement
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplatePlacement, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:affinity], ::String, context: "#{context}[:affinity]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        Hearth::Validator.validate!(input[:host_id], ::String, context: "#{context}[:host_id]")
        Hearth::Validator.validate!(input[:tenancy], ::String, context: "#{context}[:tenancy]")
        Hearth::Validator.validate!(input[:spread_domain], ::String, context: "#{context}[:spread_domain]")
        Hearth::Validator.validate!(input[:host_resource_group_arn], ::String, context: "#{context}[:host_resource_group_arn]")
        Hearth::Validator.validate!(input[:partition_number], ::Integer, context: "#{context}[:partition_number]")
      end
    end

    class LaunchTemplatePlacementRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplatePlacementRequest, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:affinity], ::String, context: "#{context}[:affinity]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        Hearth::Validator.validate!(input[:host_id], ::String, context: "#{context}[:host_id]")
        Hearth::Validator.validate!(input[:tenancy], ::String, context: "#{context}[:tenancy]")
        Hearth::Validator.validate!(input[:spread_domain], ::String, context: "#{context}[:spread_domain]")
        Hearth::Validator.validate!(input[:host_resource_group_arn], ::String, context: "#{context}[:host_resource_group_arn]")
        Hearth::Validator.validate!(input[:partition_number], ::Integer, context: "#{context}[:partition_number]")
      end
    end

    class LaunchTemplatePrivateDnsNameOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplatePrivateDnsNameOptions, context: context)
        Hearth::Validator.validate!(input[:hostname_type], ::String, context: "#{context}[:hostname_type]")
        Hearth::Validator.validate!(input[:enable_resource_name_dns_a_record], ::TrueClass, ::FalseClass, context: "#{context}[:enable_resource_name_dns_a_record]")
        Hearth::Validator.validate!(input[:enable_resource_name_dns_aaaa_record], ::TrueClass, ::FalseClass, context: "#{context}[:enable_resource_name_dns_aaaa_record]")
      end
    end

    class LaunchTemplatePrivateDnsNameOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplatePrivateDnsNameOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:hostname_type], ::String, context: "#{context}[:hostname_type]")
        Hearth::Validator.validate!(input[:enable_resource_name_dns_a_record], ::TrueClass, ::FalseClass, context: "#{context}[:enable_resource_name_dns_a_record]")
        Hearth::Validator.validate!(input[:enable_resource_name_dns_aaaa_record], ::TrueClass, ::FalseClass, context: "#{context}[:enable_resource_name_dns_aaaa_record]")
      end
    end

    class LaunchTemplateSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LaunchTemplate.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchTemplateSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateSpecification, context: context)
        Hearth::Validator.validate!(input[:launch_template_id], ::String, context: "#{context}[:launch_template_id]")
        Hearth::Validator.validate!(input[:launch_template_name], ::String, context: "#{context}[:launch_template_name]")
        Hearth::Validator.validate!(input[:version], ::String, context: "#{context}[:version]")
      end
    end

    class LaunchTemplateSpotMarketOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateSpotMarketOptions, context: context)
        Hearth::Validator.validate!(input[:max_price], ::String, context: "#{context}[:max_price]")
        Hearth::Validator.validate!(input[:spot_instance_type], ::String, context: "#{context}[:spot_instance_type]")
        Hearth::Validator.validate!(input[:block_duration_minutes], ::Integer, context: "#{context}[:block_duration_minutes]")
        Hearth::Validator.validate!(input[:valid_until], ::Time, context: "#{context}[:valid_until]")
        Hearth::Validator.validate!(input[:instance_interruption_behavior], ::String, context: "#{context}[:instance_interruption_behavior]")
      end
    end

    class LaunchTemplateSpotMarketOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateSpotMarketOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:max_price], ::String, context: "#{context}[:max_price]")
        Hearth::Validator.validate!(input[:spot_instance_type], ::String, context: "#{context}[:spot_instance_type]")
        Hearth::Validator.validate!(input[:block_duration_minutes], ::Integer, context: "#{context}[:block_duration_minutes]")
        Hearth::Validator.validate!(input[:valid_until], ::Time, context: "#{context}[:valid_until]")
        Hearth::Validator.validate!(input[:instance_interruption_behavior], ::String, context: "#{context}[:instance_interruption_behavior]")
      end
    end

    class LaunchTemplateTagSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateTagSpecification, context: context)
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class LaunchTemplateTagSpecificationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LaunchTemplateTagSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchTemplateTagSpecificationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateTagSpecificationRequest, context: context)
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class LaunchTemplateTagSpecificationRequestList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LaunchTemplateTagSpecificationRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchTemplateVersion
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplateVersion, context: context)
        Hearth::Validator.validate!(input[:launch_template_id], ::String, context: "#{context}[:launch_template_id]")
        Hearth::Validator.validate!(input[:launch_template_name], ::String, context: "#{context}[:launch_template_name]")
        Hearth::Validator.validate!(input[:version_number], ::Integer, context: "#{context}[:version_number]")
        Hearth::Validator.validate!(input[:version_description], ::String, context: "#{context}[:version_description]")
        Hearth::Validator.validate!(input[:create_time], ::Time, context: "#{context}[:create_time]")
        Hearth::Validator.validate!(input[:created_by], ::String, context: "#{context}[:created_by]")
        Hearth::Validator.validate!(input[:default_version], ::TrueClass, ::FalseClass, context: "#{context}[:default_version]")
        ResponseLaunchTemplateData.validate!(input[:launch_template_data], context: "#{context}[:launch_template_data]") unless input[:launch_template_data].nil?
      end
    end

    class LaunchTemplateVersionSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LaunchTemplateVersion.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LaunchTemplatesMonitoring
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplatesMonitoring, context: context)
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
      end
    end

    class LaunchTemplatesMonitoringRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LaunchTemplatesMonitoringRequest, context: context)
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
      end
    end

    class LicenseConfiguration
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LicenseConfiguration, context: context)
        Hearth::Validator.validate!(input[:license_configuration_arn], ::String, context: "#{context}[:license_configuration_arn]")
      end
    end

    class LicenseConfigurationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LicenseConfigurationRequest, context: context)
        Hearth::Validator.validate!(input[:license_configuration_arn], ::String, context: "#{context}[:license_configuration_arn]")
      end
    end

    class LicenseList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LicenseConfiguration.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LicenseSpecificationListRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LicenseConfigurationRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ListImagesInRecycleBinInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ListImagesInRecycleBinInput, context: context)
        ImageIdStringList.validate!(input[:image_ids], context: "#{context}[:image_ids]") unless input[:image_ids].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ListImagesInRecycleBinOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ListImagesInRecycleBinOutput, context: context)
        ImageRecycleBinInfoList.validate!(input[:images], context: "#{context}[:images]") unless input[:images].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class ListSnapshotsInRecycleBinInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ListSnapshotsInRecycleBinInput, context: context)
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        SnapshotIdStringList.validate!(input[:snapshot_ids], context: "#{context}[:snapshot_ids]") unless input[:snapshot_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ListSnapshotsInRecycleBinOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ListSnapshotsInRecycleBinOutput, context: context)
        SnapshotRecycleBinInfoList.validate!(input[:snapshots], context: "#{context}[:snapshots]") unless input[:snapshots].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class LoadBalancersConfig
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LoadBalancersConfig, context: context)
        ClassicLoadBalancersConfig.validate!(input[:classic_load_balancers_config], context: "#{context}[:classic_load_balancers_config]") unless input[:classic_load_balancers_config].nil?
        TargetGroupsConfig.validate!(input[:target_groups_config], context: "#{context}[:target_groups_config]") unless input[:target_groups_config].nil?
      end
    end

    class LoadPermission
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LoadPermission, context: context)
        Hearth::Validator.validate!(input[:user_id], ::String, context: "#{context}[:user_id]")
        Hearth::Validator.validate!(input[:group], ::String, context: "#{context}[:group]")
      end
    end

    class LoadPermissionList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LoadPermission.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LoadPermissionListRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LoadPermissionRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LoadPermissionModifications
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LoadPermissionModifications, context: context)
        LoadPermissionListRequest.validate!(input[:add], context: "#{context}[:add]") unless input[:add].nil?
        LoadPermissionListRequest.validate!(input[:remove], context: "#{context}[:remove]") unless input[:remove].nil?
      end
    end

    class LoadPermissionRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LoadPermissionRequest, context: context)
        Hearth::Validator.validate!(input[:group], ::String, context: "#{context}[:group]")
        Hearth::Validator.validate!(input[:user_id], ::String, context: "#{context}[:user_id]")
      end
    end

    class LocalGateway
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LocalGateway, context: context)
        Hearth::Validator.validate!(input[:local_gateway_id], ::String, context: "#{context}[:local_gateway_id]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class LocalGatewayIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class LocalGatewayRoute
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LocalGatewayRoute, context: context)
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:local_gateway_virtual_interface_group_id], ::String, context: "#{context}[:local_gateway_virtual_interface_group_id]")
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:local_gateway_route_table_id], ::String, context: "#{context}[:local_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:local_gateway_route_table_arn], ::String, context: "#{context}[:local_gateway_route_table_arn]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
      end
    end

    class LocalGatewayRouteList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LocalGatewayRoute.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LocalGatewayRouteTable
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LocalGatewayRouteTable, context: context)
        Hearth::Validator.validate!(input[:local_gateway_route_table_id], ::String, context: "#{context}[:local_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:local_gateway_route_table_arn], ::String, context: "#{context}[:local_gateway_route_table_arn]")
        Hearth::Validator.validate!(input[:local_gateway_id], ::String, context: "#{context}[:local_gateway_id]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class LocalGatewayRouteTableIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class LocalGatewayRouteTableSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LocalGatewayRouteTable.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LocalGatewayRouteTableVirtualInterfaceGroupAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LocalGatewayRouteTableVirtualInterfaceGroupAssociation, context: context)
        Hearth::Validator.validate!(input[:local_gateway_route_table_virtual_interface_group_association_id], ::String, context: "#{context}[:local_gateway_route_table_virtual_interface_group_association_id]")
        Hearth::Validator.validate!(input[:local_gateway_virtual_interface_group_id], ::String, context: "#{context}[:local_gateway_virtual_interface_group_id]")
        Hearth::Validator.validate!(input[:local_gateway_id], ::String, context: "#{context}[:local_gateway_id]")
        Hearth::Validator.validate!(input[:local_gateway_route_table_id], ::String, context: "#{context}[:local_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:local_gateway_route_table_arn], ::String, context: "#{context}[:local_gateway_route_table_arn]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LocalGatewayRouteTableVirtualInterfaceGroupAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LocalGatewayRouteTableVpcAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LocalGatewayRouteTableVpcAssociation, context: context)
        Hearth::Validator.validate!(input[:local_gateway_route_table_vpc_association_id], ::String, context: "#{context}[:local_gateway_route_table_vpc_association_id]")
        Hearth::Validator.validate!(input[:local_gateway_route_table_id], ::String, context: "#{context}[:local_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:local_gateway_route_table_arn], ::String, context: "#{context}[:local_gateway_route_table_arn]")
        Hearth::Validator.validate!(input[:local_gateway_id], ::String, context: "#{context}[:local_gateway_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class LocalGatewayRouteTableVpcAssociationIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class LocalGatewayRouteTableVpcAssociationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LocalGatewayRouteTableVpcAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LocalGatewaySet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LocalGateway.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LocalGatewayVirtualInterface
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LocalGatewayVirtualInterface, context: context)
        Hearth::Validator.validate!(input[:local_gateway_virtual_interface_id], ::String, context: "#{context}[:local_gateway_virtual_interface_id]")
        Hearth::Validator.validate!(input[:local_gateway_id], ::String, context: "#{context}[:local_gateway_id]")
        Hearth::Validator.validate!(input[:vlan], ::Integer, context: "#{context}[:vlan]")
        Hearth::Validator.validate!(input[:local_address], ::String, context: "#{context}[:local_address]")
        Hearth::Validator.validate!(input[:peer_address], ::String, context: "#{context}[:peer_address]")
        Hearth::Validator.validate!(input[:local_bgp_asn], ::Integer, context: "#{context}[:local_bgp_asn]")
        Hearth::Validator.validate!(input[:peer_bgp_asn], ::Integer, context: "#{context}[:peer_bgp_asn]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class LocalGatewayVirtualInterfaceGroup
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::LocalGatewayVirtualInterfaceGroup, context: context)
        Hearth::Validator.validate!(input[:local_gateway_virtual_interface_group_id], ::String, context: "#{context}[:local_gateway_virtual_interface_group_id]")
        LocalGatewayVirtualInterfaceIdSet.validate!(input[:local_gateway_virtual_interface_ids], context: "#{context}[:local_gateway_virtual_interface_ids]") unless input[:local_gateway_virtual_interface_ids].nil?
        Hearth::Validator.validate!(input[:local_gateway_id], ::String, context: "#{context}[:local_gateway_id]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class LocalGatewayVirtualInterfaceGroupIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class LocalGatewayVirtualInterfaceGroupSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LocalGatewayVirtualInterfaceGroup.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LocalGatewayVirtualInterfaceIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class LocalGatewayVirtualInterfaceSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          LocalGatewayVirtualInterface.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class LocalStorageTypeSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ManagedPrefixList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ManagedPrefixList, context: context)
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
        Hearth::Validator.validate!(input[:address_family], ::String, context: "#{context}[:address_family]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:state_message], ::String, context: "#{context}[:state_message]")
        Hearth::Validator.validate!(input[:prefix_list_arn], ::String, context: "#{context}[:prefix_list_arn]")
        Hearth::Validator.validate!(input[:prefix_list_name], ::String, context: "#{context}[:prefix_list_name]")
        Hearth::Validator.validate!(input[:max_entries], ::Integer, context: "#{context}[:max_entries]")
        Hearth::Validator.validate!(input[:version], ::Integer, context: "#{context}[:version]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
      end
    end

    class ManagedPrefixListSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ManagedPrefixList.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class MemoryGiBPerVCpu
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::MemoryGiBPerVCpu, context: context)
        Hearth::Validator.validate!(input[:min], ::Float, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Float, context: "#{context}[:max]")
      end
    end

    class MemoryGiBPerVCpuRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::MemoryGiBPerVCpuRequest, context: context)
        Hearth::Validator.validate!(input[:min], ::Float, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Float, context: "#{context}[:max]")
      end
    end

    class MemoryInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::MemoryInfo, context: context)
        Hearth::Validator.validate!(input[:size_in_mi_b], ::Integer, context: "#{context}[:size_in_mi_b]")
      end
    end

    class MemoryMiB
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::MemoryMiB, context: context)
        Hearth::Validator.validate!(input[:min], ::Integer, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Integer, context: "#{context}[:max]")
      end
    end

    class MemoryMiBRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::MemoryMiBRequest, context: context)
        Hearth::Validator.validate!(input[:min], ::Integer, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Integer, context: "#{context}[:max]")
      end
    end

    class ModifyAddressAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyAddressAttributeInput, context: context)
        Hearth::Validator.validate!(input[:allocation_id], ::String, context: "#{context}[:allocation_id]")
        Hearth::Validator.validate!(input[:domain_name], ::String, context: "#{context}[:domain_name]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyAddressAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyAddressAttributeOutput, context: context)
        AddressAttribute.validate!(input[:address], context: "#{context}[:address]") unless input[:address].nil?
      end
    end

    class ModifyAvailabilityZoneGroupInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyAvailabilityZoneGroupInput, context: context)
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        Hearth::Validator.validate!(input[:opt_in_status], ::String, context: "#{context}[:opt_in_status]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyAvailabilityZoneGroupOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyAvailabilityZoneGroupOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ModifyCapacityReservationFleetInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyCapacityReservationFleetInput, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_fleet_id], ::String, context: "#{context}[:capacity_reservation_fleet_id]")
        Hearth::Validator.validate!(input[:total_target_capacity], ::Integer, context: "#{context}[:total_target_capacity]")
        Hearth::Validator.validate!(input[:end_date], ::Time, context: "#{context}[:end_date]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:remove_end_date], ::TrueClass, ::FalseClass, context: "#{context}[:remove_end_date]")
      end
    end

    class ModifyCapacityReservationFleetOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyCapacityReservationFleetOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ModifyCapacityReservationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyCapacityReservationInput, context: context)
        Hearth::Validator.validate!(input[:capacity_reservation_id], ::String, context: "#{context}[:capacity_reservation_id]")
        Hearth::Validator.validate!(input[:instance_count], ::Integer, context: "#{context}[:instance_count]")
        Hearth::Validator.validate!(input[:end_date], ::Time, context: "#{context}[:end_date]")
        Hearth::Validator.validate!(input[:end_date_type], ::String, context: "#{context}[:end_date_type]")
        Hearth::Validator.validate!(input[:accept], ::TrueClass, ::FalseClass, context: "#{context}[:accept]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:additional_info], ::String, context: "#{context}[:additional_info]")
      end
    end

    class ModifyCapacityReservationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyCapacityReservationOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ModifyClientVpnEndpointInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyClientVpnEndpointInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:server_certificate_arn], ::String, context: "#{context}[:server_certificate_arn]")
        ConnectionLogOptions.validate!(input[:connection_log_options], context: "#{context}[:connection_log_options]") unless input[:connection_log_options].nil?
        DnsServersOptionsModifyStructure.validate!(input[:dns_servers], context: "#{context}[:dns_servers]") unless input[:dns_servers].nil?
        Hearth::Validator.validate!(input[:vpn_port], ::Integer, context: "#{context}[:vpn_port]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:split_tunnel], ::TrueClass, ::FalseClass, context: "#{context}[:split_tunnel]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        ClientVpnSecurityGroupIdSet.validate!(input[:security_group_ids], context: "#{context}[:security_group_ids]") unless input[:security_group_ids].nil?
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:self_service_portal], ::String, context: "#{context}[:self_service_portal]")
        ClientConnectOptions.validate!(input[:client_connect_options], context: "#{context}[:client_connect_options]") unless input[:client_connect_options].nil?
        Hearth::Validator.validate!(input[:session_timeout_hours], ::Integer, context: "#{context}[:session_timeout_hours]")
        ClientLoginBannerOptions.validate!(input[:client_login_banner_options], context: "#{context}[:client_login_banner_options]") unless input[:client_login_banner_options].nil?
      end
    end

    class ModifyClientVpnEndpointOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyClientVpnEndpointOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ModifyDefaultCreditSpecificationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyDefaultCreditSpecificationInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_family], ::String, context: "#{context}[:instance_family]")
        Hearth::Validator.validate!(input[:cpu_credits], ::String, context: "#{context}[:cpu_credits]")
      end
    end

    class ModifyDefaultCreditSpecificationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyDefaultCreditSpecificationOutput, context: context)
        InstanceFamilyCreditSpecification.validate!(input[:instance_family_credit_specification], context: "#{context}[:instance_family_credit_specification]") unless input[:instance_family_credit_specification].nil?
      end
    end

    class ModifyEbsDefaultKmsKeyIdInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyEbsDefaultKmsKeyIdInput, context: context)
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyEbsDefaultKmsKeyIdOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyEbsDefaultKmsKeyIdOutput, context: context)
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
      end
    end

    class ModifyFleetInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyFleetInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:excess_capacity_termination_policy], ::String, context: "#{context}[:excess_capacity_termination_policy]")
        FleetLaunchTemplateConfigListRequest.validate!(input[:launch_template_configs], context: "#{context}[:launch_template_configs]") unless input[:launch_template_configs].nil?
        Hearth::Validator.validate!(input[:fleet_id], ::String, context: "#{context}[:fleet_id]")
        TargetCapacitySpecificationRequest.validate!(input[:target_capacity_specification], context: "#{context}[:target_capacity_specification]") unless input[:target_capacity_specification].nil?
        Hearth::Validator.validate!(input[:context], ::String, context: "#{context}[:context]")
      end
    end

    class ModifyFleetOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyFleetOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ModifyFpgaImageAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyFpgaImageAttributeInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:fpga_image_id], ::String, context: "#{context}[:fpga_image_id]")
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
        Hearth::Validator.validate!(input[:operation_type], ::String, context: "#{context}[:operation_type]")
        UserIdStringList.validate!(input[:user_ids], context: "#{context}[:user_ids]") unless input[:user_ids].nil?
        UserGroupStringList.validate!(input[:user_groups], context: "#{context}[:user_groups]") unless input[:user_groups].nil?
        ProductCodeStringList.validate!(input[:product_codes], context: "#{context}[:product_codes]") unless input[:product_codes].nil?
        LoadPermissionModifications.validate!(input[:load_permission], context: "#{context}[:load_permission]") unless input[:load_permission].nil?
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
      end
    end

    class ModifyFpgaImageAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyFpgaImageAttributeOutput, context: context)
        FpgaImageAttribute.validate!(input[:fpga_image_attribute], context: "#{context}[:fpga_image_attribute]") unless input[:fpga_image_attribute].nil?
      end
    end

    class ModifyHostsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyHostsInput, context: context)
        Hearth::Validator.validate!(input[:auto_placement], ::String, context: "#{context}[:auto_placement]")
        RequestHostIdList.validate!(input[:host_ids], context: "#{context}[:host_ids]") unless input[:host_ids].nil?
        Hearth::Validator.validate!(input[:host_recovery], ::String, context: "#{context}[:host_recovery]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:instance_family], ::String, context: "#{context}[:instance_family]")
      end
    end

    class ModifyHostsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyHostsOutput, context: context)
        ResponseHostIdList.validate!(input[:successful], context: "#{context}[:successful]") unless input[:successful].nil?
        UnsuccessfulItemList.validate!(input[:unsuccessful], context: "#{context}[:unsuccessful]") unless input[:unsuccessful].nil?
      end
    end

    class ModifyIdFormatInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyIdFormatInput, context: context)
        Hearth::Validator.validate!(input[:resource], ::String, context: "#{context}[:resource]")
        Hearth::Validator.validate!(input[:use_long_ids], ::TrueClass, ::FalseClass, context: "#{context}[:use_long_ids]")
      end
    end

    class ModifyIdFormatOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyIdFormatOutput, context: context)
      end
    end

    class ModifyIdentityIdFormatInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyIdentityIdFormatInput, context: context)
        Hearth::Validator.validate!(input[:principal_arn], ::String, context: "#{context}[:principal_arn]")
        Hearth::Validator.validate!(input[:resource], ::String, context: "#{context}[:resource]")
        Hearth::Validator.validate!(input[:use_long_ids], ::TrueClass, ::FalseClass, context: "#{context}[:use_long_ids]")
      end
    end

    class ModifyIdentityIdFormatOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyIdentityIdFormatOutput, context: context)
      end
    end

    class ModifyImageAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyImageAttributeInput, context: context)
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
        AttributeValue.validate!(input[:description], context: "#{context}[:description]") unless input[:description].nil?
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        LaunchPermissionModifications.validate!(input[:launch_permission], context: "#{context}[:launch_permission]") unless input[:launch_permission].nil?
        Hearth::Validator.validate!(input[:operation_type], ::String, context: "#{context}[:operation_type]")
        ProductCodeStringList.validate!(input[:product_codes], context: "#{context}[:product_codes]") unless input[:product_codes].nil?
        UserGroupStringList.validate!(input[:user_groups], context: "#{context}[:user_groups]") unless input[:user_groups].nil?
        UserIdStringList.validate!(input[:user_ids], context: "#{context}[:user_ids]") unless input[:user_ids].nil?
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        OrganizationArnStringList.validate!(input[:organization_arns], context: "#{context}[:organization_arns]") unless input[:organization_arns].nil?
        OrganizationalUnitArnStringList.validate!(input[:organizational_unit_arns], context: "#{context}[:organizational_unit_arns]") unless input[:organizational_unit_arns].nil?
      end
    end

    class ModifyImageAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyImageAttributeOutput, context: context)
      end
    end

    class ModifyInstanceAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstanceAttributeInput, context: context)
        AttributeBooleanValue.validate!(input[:source_dest_check], context: "#{context}[:source_dest_check]") unless input[:source_dest_check].nil?
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
        InstanceBlockDeviceMappingSpecificationList.validate!(input[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless input[:block_device_mappings].nil?
        AttributeBooleanValue.validate!(input[:disable_api_termination], context: "#{context}[:disable_api_termination]") unless input[:disable_api_termination].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        AttributeBooleanValue.validate!(input[:ebs_optimized], context: "#{context}[:ebs_optimized]") unless input[:ebs_optimized].nil?
        AttributeBooleanValue.validate!(input[:ena_support], context: "#{context}[:ena_support]") unless input[:ena_support].nil?
        GroupIdStringList.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        AttributeValue.validate!(input[:instance_initiated_shutdown_behavior], context: "#{context}[:instance_initiated_shutdown_behavior]") unless input[:instance_initiated_shutdown_behavior].nil?
        AttributeValue.validate!(input[:instance_type], context: "#{context}[:instance_type]") unless input[:instance_type].nil?
        AttributeValue.validate!(input[:kernel], context: "#{context}[:kernel]") unless input[:kernel].nil?
        AttributeValue.validate!(input[:ramdisk], context: "#{context}[:ramdisk]") unless input[:ramdisk].nil?
        AttributeValue.validate!(input[:sriov_net_support], context: "#{context}[:sriov_net_support]") unless input[:sriov_net_support].nil?
        BlobAttributeValue.validate!(input[:user_data], context: "#{context}[:user_data]") unless input[:user_data].nil?
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
        AttributeBooleanValue.validate!(input[:disable_api_stop], context: "#{context}[:disable_api_stop]") unless input[:disable_api_stop].nil?
      end
    end

    class ModifyInstanceAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstanceAttributeOutput, context: context)
      end
    end

    class ModifyInstanceCapacityReservationAttributesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstanceCapacityReservationAttributesInput, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        CapacityReservationSpecification.validate!(input[:capacity_reservation_specification], context: "#{context}[:capacity_reservation_specification]") unless input[:capacity_reservation_specification].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyInstanceCapacityReservationAttributesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstanceCapacityReservationAttributesOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ModifyInstanceCreditSpecificationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstanceCreditSpecificationInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        InstanceCreditSpecificationListRequest.validate!(input[:instance_credit_specifications], context: "#{context}[:instance_credit_specifications]") unless input[:instance_credit_specifications].nil?
      end
    end

    class ModifyInstanceCreditSpecificationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstanceCreditSpecificationOutput, context: context)
        SuccessfulInstanceCreditSpecificationSet.validate!(input[:successful_instance_credit_specifications], context: "#{context}[:successful_instance_credit_specifications]") unless input[:successful_instance_credit_specifications].nil?
        UnsuccessfulInstanceCreditSpecificationSet.validate!(input[:unsuccessful_instance_credit_specifications], context: "#{context}[:unsuccessful_instance_credit_specifications]") unless input[:unsuccessful_instance_credit_specifications].nil?
      end
    end

    class ModifyInstanceEventStartTimeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstanceEventStartTimeInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:instance_event_id], ::String, context: "#{context}[:instance_event_id]")
        Hearth::Validator.validate!(input[:not_before], ::Time, context: "#{context}[:not_before]")
      end
    end

    class ModifyInstanceEventStartTimeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstanceEventStartTimeOutput, context: context)
        InstanceStatusEvent.validate!(input[:event], context: "#{context}[:event]") unless input[:event].nil?
      end
    end

    class ModifyInstanceEventWindowInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstanceEventWindowInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        Hearth::Validator.validate!(input[:instance_event_window_id], ::String, context: "#{context}[:instance_event_window_id]")
        InstanceEventWindowTimeRangeRequestSet.validate!(input[:time_ranges], context: "#{context}[:time_ranges]") unless input[:time_ranges].nil?
        Hearth::Validator.validate!(input[:cron_expression], ::String, context: "#{context}[:cron_expression]")
      end
    end

    class ModifyInstanceEventWindowOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstanceEventWindowOutput, context: context)
        InstanceEventWindow.validate!(input[:instance_event_window], context: "#{context}[:instance_event_window]") unless input[:instance_event_window].nil?
      end
    end

    class ModifyInstanceMaintenanceOptionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstanceMaintenanceOptionsInput, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:auto_recovery], ::String, context: "#{context}[:auto_recovery]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyInstanceMaintenanceOptionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstanceMaintenanceOptionsOutput, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:auto_recovery], ::String, context: "#{context}[:auto_recovery]")
      end
    end

    class ModifyInstanceMetadataOptionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstanceMetadataOptionsInput, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:http_tokens], ::String, context: "#{context}[:http_tokens]")
        Hearth::Validator.validate!(input[:http_put_response_hop_limit], ::Integer, context: "#{context}[:http_put_response_hop_limit]")
        Hearth::Validator.validate!(input[:http_endpoint], ::String, context: "#{context}[:http_endpoint]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:http_protocol_ipv6], ::String, context: "#{context}[:http_protocol_ipv6]")
        Hearth::Validator.validate!(input[:instance_metadata_tags], ::String, context: "#{context}[:instance_metadata_tags]")
      end
    end

    class ModifyInstanceMetadataOptionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstanceMetadataOptionsOutput, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        InstanceMetadataOptionsResponse.validate!(input[:instance_metadata_options], context: "#{context}[:instance_metadata_options]") unless input[:instance_metadata_options].nil?
      end
    end

    class ModifyInstancePlacementInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstancePlacementInput, context: context)
        Hearth::Validator.validate!(input[:affinity], ::String, context: "#{context}[:affinity]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        Hearth::Validator.validate!(input[:host_id], ::String, context: "#{context}[:host_id]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:tenancy], ::String, context: "#{context}[:tenancy]")
        Hearth::Validator.validate!(input[:partition_number], ::Integer, context: "#{context}[:partition_number]")
        Hearth::Validator.validate!(input[:host_resource_group_arn], ::String, context: "#{context}[:host_resource_group_arn]")
      end
    end

    class ModifyInstancePlacementOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyInstancePlacementOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ModifyIpamInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyIpamInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipam_id], ::String, context: "#{context}[:ipam_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        AddIpamOperatingRegionSet.validate!(input[:add_operating_regions], context: "#{context}[:add_operating_regions]") unless input[:add_operating_regions].nil?
        RemoveIpamOperatingRegionSet.validate!(input[:remove_operating_regions], context: "#{context}[:remove_operating_regions]") unless input[:remove_operating_regions].nil?
      end
    end

    class ModifyIpamOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyIpamOutput, context: context)
        Ipam.validate!(input[:ipam], context: "#{context}[:ipam]") unless input[:ipam].nil?
      end
    end

    class ModifyIpamPoolInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyIpamPoolInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipam_pool_id], ::String, context: "#{context}[:ipam_pool_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:auto_import], ::TrueClass, ::FalseClass, context: "#{context}[:auto_import]")
        Hearth::Validator.validate!(input[:allocation_min_netmask_length], ::Integer, context: "#{context}[:allocation_min_netmask_length]")
        Hearth::Validator.validate!(input[:allocation_max_netmask_length], ::Integer, context: "#{context}[:allocation_max_netmask_length]")
        Hearth::Validator.validate!(input[:allocation_default_netmask_length], ::Integer, context: "#{context}[:allocation_default_netmask_length]")
        Hearth::Validator.validate!(input[:clear_allocation_default_netmask_length], ::TrueClass, ::FalseClass, context: "#{context}[:clear_allocation_default_netmask_length]")
        RequestIpamResourceTagList.validate!(input[:add_allocation_resource_tags], context: "#{context}[:add_allocation_resource_tags]") unless input[:add_allocation_resource_tags].nil?
        RequestIpamResourceTagList.validate!(input[:remove_allocation_resource_tags], context: "#{context}[:remove_allocation_resource_tags]") unless input[:remove_allocation_resource_tags].nil?
      end
    end

    class ModifyIpamPoolOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyIpamPoolOutput, context: context)
        IpamPool.validate!(input[:ipam_pool], context: "#{context}[:ipam_pool]") unless input[:ipam_pool].nil?
      end
    end

    class ModifyIpamResourceCidrInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyIpamResourceCidrInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:resource_cidr], ::String, context: "#{context}[:resource_cidr]")
        Hearth::Validator.validate!(input[:resource_region], ::String, context: "#{context}[:resource_region]")
        Hearth::Validator.validate!(input[:current_ipam_scope_id], ::String, context: "#{context}[:current_ipam_scope_id]")
        Hearth::Validator.validate!(input[:destination_ipam_scope_id], ::String, context: "#{context}[:destination_ipam_scope_id]")
        Hearth::Validator.validate!(input[:monitored], ::TrueClass, ::FalseClass, context: "#{context}[:monitored]")
      end
    end

    class ModifyIpamResourceCidrOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyIpamResourceCidrOutput, context: context)
        IpamResourceCidr.validate!(input[:ipam_resource_cidr], context: "#{context}[:ipam_resource_cidr]") unless input[:ipam_resource_cidr].nil?
      end
    end

    class ModifyIpamScopeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyIpamScopeInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipam_scope_id], ::String, context: "#{context}[:ipam_scope_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
      end
    end

    class ModifyIpamScopeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyIpamScopeOutput, context: context)
        IpamScope.validate!(input[:ipam_scope], context: "#{context}[:ipam_scope]") unless input[:ipam_scope].nil?
      end
    end

    class ModifyLaunchTemplateInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyLaunchTemplateInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:launch_template_id], ::String, context: "#{context}[:launch_template_id]")
        Hearth::Validator.validate!(input[:launch_template_name], ::String, context: "#{context}[:launch_template_name]")
        Hearth::Validator.validate!(input[:default_version], ::String, context: "#{context}[:default_version]")
      end
    end

    class ModifyLaunchTemplateOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyLaunchTemplateOutput, context: context)
        LaunchTemplate.validate!(input[:launch_template], context: "#{context}[:launch_template]") unless input[:launch_template].nil?
      end
    end

    class ModifyManagedPrefixListInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyManagedPrefixListInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
        Hearth::Validator.validate!(input[:current_version], ::Integer, context: "#{context}[:current_version]")
        Hearth::Validator.validate!(input[:prefix_list_name], ::String, context: "#{context}[:prefix_list_name]")
        AddPrefixListEntries.validate!(input[:add_entries], context: "#{context}[:add_entries]") unless input[:add_entries].nil?
        RemovePrefixListEntries.validate!(input[:remove_entries], context: "#{context}[:remove_entries]") unless input[:remove_entries].nil?
        Hearth::Validator.validate!(input[:max_entries], ::Integer, context: "#{context}[:max_entries]")
      end
    end

    class ModifyManagedPrefixListOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyManagedPrefixListOutput, context: context)
        ManagedPrefixList.validate!(input[:prefix_list], context: "#{context}[:prefix_list]") unless input[:prefix_list].nil?
      end
    end

    class ModifyNetworkInterfaceAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyNetworkInterfaceAttributeInput, context: context)
        NetworkInterfaceAttachmentChanges.validate!(input[:attachment], context: "#{context}[:attachment]") unless input[:attachment].nil?
        AttributeValue.validate!(input[:description], context: "#{context}[:description]") unless input[:description].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        SecurityGroupIdStringList.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        AttributeBooleanValue.validate!(input[:source_dest_check], context: "#{context}[:source_dest_check]") unless input[:source_dest_check].nil?
      end
    end

    class ModifyNetworkInterfaceAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyNetworkInterfaceAttributeOutput, context: context)
      end
    end

    class ModifyPrivateDnsNameOptionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyPrivateDnsNameOptionsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:private_dns_hostname_type], ::String, context: "#{context}[:private_dns_hostname_type]")
        Hearth::Validator.validate!(input[:enable_resource_name_dns_a_record], ::TrueClass, ::FalseClass, context: "#{context}[:enable_resource_name_dns_a_record]")
        Hearth::Validator.validate!(input[:enable_resource_name_dns_aaaa_record], ::TrueClass, ::FalseClass, context: "#{context}[:enable_resource_name_dns_aaaa_record]")
      end
    end

    class ModifyPrivateDnsNameOptionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyPrivateDnsNameOptionsOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ModifyReservedInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyReservedInstancesInput, context: context)
        ReservedInstancesIdStringList.validate!(input[:reserved_instances_ids], context: "#{context}[:reserved_instances_ids]") unless input[:reserved_instances_ids].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        ReservedInstancesConfigurationList.validate!(input[:target_configurations], context: "#{context}[:target_configurations]") unless input[:target_configurations].nil?
      end
    end

    class ModifyReservedInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyReservedInstancesOutput, context: context)
        Hearth::Validator.validate!(input[:reserved_instances_modification_id], ::String, context: "#{context}[:reserved_instances_modification_id]")
      end
    end

    class ModifySecurityGroupRulesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifySecurityGroupRulesInput, context: context)
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        SecurityGroupRuleUpdateList.validate!(input[:security_group_rules], context: "#{context}[:security_group_rules]") unless input[:security_group_rules].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifySecurityGroupRulesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifySecurityGroupRulesOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ModifySnapshotAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifySnapshotAttributeInput, context: context)
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
        CreateVolumePermissionModifications.validate!(input[:create_volume_permission], context: "#{context}[:create_volume_permission]") unless input[:create_volume_permission].nil?
        GroupNameStringList.validate!(input[:group_names], context: "#{context}[:group_names]") unless input[:group_names].nil?
        Hearth::Validator.validate!(input[:operation_type], ::String, context: "#{context}[:operation_type]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        UserIdStringList.validate!(input[:user_ids], context: "#{context}[:user_ids]") unless input[:user_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifySnapshotAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifySnapshotAttributeOutput, context: context)
      end
    end

    class ModifySnapshotTierInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifySnapshotTierInput, context: context)
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:storage_tier], ::String, context: "#{context}[:storage_tier]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifySnapshotTierOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifySnapshotTierOutput, context: context)
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:tiering_start_time], ::Time, context: "#{context}[:tiering_start_time]")
      end
    end

    class ModifySpotFleetRequestInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifySpotFleetRequestInput, context: context)
        Hearth::Validator.validate!(input[:excess_capacity_termination_policy], ::String, context: "#{context}[:excess_capacity_termination_policy]")
        LaunchTemplateConfigList.validate!(input[:launch_template_configs], context: "#{context}[:launch_template_configs]") unless input[:launch_template_configs].nil?
        Hearth::Validator.validate!(input[:spot_fleet_request_id], ::String, context: "#{context}[:spot_fleet_request_id]")
        Hearth::Validator.validate!(input[:target_capacity], ::Integer, context: "#{context}[:target_capacity]")
        Hearth::Validator.validate!(input[:on_demand_target_capacity], ::Integer, context: "#{context}[:on_demand_target_capacity]")
        Hearth::Validator.validate!(input[:context], ::String, context: "#{context}[:context]")
      end
    end

    class ModifySpotFleetRequestOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifySpotFleetRequestOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ModifySubnetAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifySubnetAttributeInput, context: context)
        AttributeBooleanValue.validate!(input[:assign_ipv6_address_on_creation], context: "#{context}[:assign_ipv6_address_on_creation]") unless input[:assign_ipv6_address_on_creation].nil?
        AttributeBooleanValue.validate!(input[:map_public_ip_on_launch], context: "#{context}[:map_public_ip_on_launch]") unless input[:map_public_ip_on_launch].nil?
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        AttributeBooleanValue.validate!(input[:map_customer_owned_ip_on_launch], context: "#{context}[:map_customer_owned_ip_on_launch]") unless input[:map_customer_owned_ip_on_launch].nil?
        Hearth::Validator.validate!(input[:customer_owned_ipv4_pool], ::String, context: "#{context}[:customer_owned_ipv4_pool]")
        AttributeBooleanValue.validate!(input[:enable_dns64], context: "#{context}[:enable_dns64]") unless input[:enable_dns64].nil?
        Hearth::Validator.validate!(input[:private_dns_hostname_type_on_launch], ::String, context: "#{context}[:private_dns_hostname_type_on_launch]")
        AttributeBooleanValue.validate!(input[:enable_resource_name_dns_a_record_on_launch], context: "#{context}[:enable_resource_name_dns_a_record_on_launch]") unless input[:enable_resource_name_dns_a_record_on_launch].nil?
        AttributeBooleanValue.validate!(input[:enable_resource_name_dns_aaaa_record_on_launch], context: "#{context}[:enable_resource_name_dns_aaaa_record_on_launch]") unless input[:enable_resource_name_dns_aaaa_record_on_launch].nil?
        Hearth::Validator.validate!(input[:enable_lni_at_device_index], ::Integer, context: "#{context}[:enable_lni_at_device_index]")
        AttributeBooleanValue.validate!(input[:disable_lni_at_device_index], context: "#{context}[:disable_lni_at_device_index]") unless input[:disable_lni_at_device_index].nil?
      end
    end

    class ModifySubnetAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifySubnetAttributeOutput, context: context)
      end
    end

    class ModifyTrafficMirrorFilterNetworkServicesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyTrafficMirrorFilterNetworkServicesInput, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_filter_id], ::String, context: "#{context}[:traffic_mirror_filter_id]")
        TrafficMirrorNetworkServiceList.validate!(input[:add_network_services], context: "#{context}[:add_network_services]") unless input[:add_network_services].nil?
        TrafficMirrorNetworkServiceList.validate!(input[:remove_network_services], context: "#{context}[:remove_network_services]") unless input[:remove_network_services].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyTrafficMirrorFilterNetworkServicesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyTrafficMirrorFilterNetworkServicesOutput, context: context)
        TrafficMirrorFilter.validate!(input[:traffic_mirror_filter], context: "#{context}[:traffic_mirror_filter]") unless input[:traffic_mirror_filter].nil?
      end
    end

    class ModifyTrafficMirrorFilterRuleInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyTrafficMirrorFilterRuleInput, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_filter_rule_id], ::String, context: "#{context}[:traffic_mirror_filter_rule_id]")
        Hearth::Validator.validate!(input[:traffic_direction], ::String, context: "#{context}[:traffic_direction]")
        Hearth::Validator.validate!(input[:rule_number], ::Integer, context: "#{context}[:rule_number]")
        Hearth::Validator.validate!(input[:rule_action], ::String, context: "#{context}[:rule_action]")
        TrafficMirrorPortRangeRequest.validate!(input[:destination_port_range], context: "#{context}[:destination_port_range]") unless input[:destination_port_range].nil?
        TrafficMirrorPortRangeRequest.validate!(input[:source_port_range], context: "#{context}[:source_port_range]") unless input[:source_port_range].nil?
        Hearth::Validator.validate!(input[:protocol], ::Integer, context: "#{context}[:protocol]")
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:source_cidr_block], ::String, context: "#{context}[:source_cidr_block]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        TrafficMirrorFilterRuleFieldList.validate!(input[:remove_fields], context: "#{context}[:remove_fields]") unless input[:remove_fields].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyTrafficMirrorFilterRuleOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyTrafficMirrorFilterRuleOutput, context: context)
        TrafficMirrorFilterRule.validate!(input[:traffic_mirror_filter_rule], context: "#{context}[:traffic_mirror_filter_rule]") unless input[:traffic_mirror_filter_rule].nil?
      end
    end

    class ModifyTrafficMirrorSessionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyTrafficMirrorSessionInput, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_session_id], ::String, context: "#{context}[:traffic_mirror_session_id]")
        Hearth::Validator.validate!(input[:traffic_mirror_target_id], ::String, context: "#{context}[:traffic_mirror_target_id]")
        Hearth::Validator.validate!(input[:traffic_mirror_filter_id], ::String, context: "#{context}[:traffic_mirror_filter_id]")
        Hearth::Validator.validate!(input[:packet_length], ::Integer, context: "#{context}[:packet_length]")
        Hearth::Validator.validate!(input[:session_number], ::Integer, context: "#{context}[:session_number]")
        Hearth::Validator.validate!(input[:virtual_network_id], ::Integer, context: "#{context}[:virtual_network_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        TrafficMirrorSessionFieldList.validate!(input[:remove_fields], context: "#{context}[:remove_fields]") unless input[:remove_fields].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyTrafficMirrorSessionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyTrafficMirrorSessionOutput, context: context)
        TrafficMirrorSession.validate!(input[:traffic_mirror_session], context: "#{context}[:traffic_mirror_session]") unless input[:traffic_mirror_session].nil?
      end
    end

    class ModifyTransitGatewayInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyTransitGatewayInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        ModifyTransitGatewayOptions.validate!(input[:options], context: "#{context}[:options]") unless input[:options].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyTransitGatewayOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyTransitGatewayOptions, context: context)
        TransitGatewayCidrBlockStringList.validate!(input[:add_transit_gateway_cidr_blocks], context: "#{context}[:add_transit_gateway_cidr_blocks]") unless input[:add_transit_gateway_cidr_blocks].nil?
        TransitGatewayCidrBlockStringList.validate!(input[:remove_transit_gateway_cidr_blocks], context: "#{context}[:remove_transit_gateway_cidr_blocks]") unless input[:remove_transit_gateway_cidr_blocks].nil?
        Hearth::Validator.validate!(input[:vpn_ecmp_support], ::String, context: "#{context}[:vpn_ecmp_support]")
        Hearth::Validator.validate!(input[:dns_support], ::String, context: "#{context}[:dns_support]")
        Hearth::Validator.validate!(input[:auto_accept_shared_attachments], ::String, context: "#{context}[:auto_accept_shared_attachments]")
        Hearth::Validator.validate!(input[:default_route_table_association], ::String, context: "#{context}[:default_route_table_association]")
        Hearth::Validator.validate!(input[:association_default_route_table_id], ::String, context: "#{context}[:association_default_route_table_id]")
        Hearth::Validator.validate!(input[:default_route_table_propagation], ::String, context: "#{context}[:default_route_table_propagation]")
        Hearth::Validator.validate!(input[:propagation_default_route_table_id], ::String, context: "#{context}[:propagation_default_route_table_id]")
      end
    end

    class ModifyTransitGatewayOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyTransitGatewayOutput, context: context)
        TransitGateway.validate!(input[:transit_gateway], context: "#{context}[:transit_gateway]") unless input[:transit_gateway].nil?
      end
    end

    class ModifyTransitGatewayPrefixListReferenceInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyTransitGatewayPrefixListReferenceInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:blackhole], ::TrueClass, ::FalseClass, context: "#{context}[:blackhole]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyTransitGatewayPrefixListReferenceOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyTransitGatewayPrefixListReferenceOutput, context: context)
        TransitGatewayPrefixListReference.validate!(input[:transit_gateway_prefix_list_reference], context: "#{context}[:transit_gateway_prefix_list_reference]") unless input[:transit_gateway_prefix_list_reference].nil?
      end
    end

    class ModifyTransitGatewayVpcAttachmentInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyTransitGatewayVpcAttachmentInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        TransitGatewaySubnetIdList.validate!(input[:add_subnet_ids], context: "#{context}[:add_subnet_ids]") unless input[:add_subnet_ids].nil?
        TransitGatewaySubnetIdList.validate!(input[:remove_subnet_ids], context: "#{context}[:remove_subnet_ids]") unless input[:remove_subnet_ids].nil?
        ModifyTransitGatewayVpcAttachmentRequestOptions.validate!(input[:options], context: "#{context}[:options]") unless input[:options].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyTransitGatewayVpcAttachmentOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyTransitGatewayVpcAttachmentOutput, context: context)
        TransitGatewayVpcAttachment.validate!(input[:transit_gateway_vpc_attachment], context: "#{context}[:transit_gateway_vpc_attachment]") unless input[:transit_gateway_vpc_attachment].nil?
      end
    end

    class ModifyTransitGatewayVpcAttachmentRequestOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyTransitGatewayVpcAttachmentRequestOptions, context: context)
        Hearth::Validator.validate!(input[:dns_support], ::String, context: "#{context}[:dns_support]")
        Hearth::Validator.validate!(input[:ipv6_support], ::String, context: "#{context}[:ipv6_support]")
        Hearth::Validator.validate!(input[:appliance_mode_support], ::String, context: "#{context}[:appliance_mode_support]")
      end
    end

    class ModifyVolumeAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVolumeAttributeInput, context: context)
        AttributeBooleanValue.validate!(input[:auto_enable_io], context: "#{context}[:auto_enable_io]") unless input[:auto_enable_io].nil?
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyVolumeAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVolumeAttributeOutput, context: context)
      end
    end

    class ModifyVolumeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVolumeInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:size], ::Integer, context: "#{context}[:size]")
        Hearth::Validator.validate!(input[:volume_type], ::String, context: "#{context}[:volume_type]")
        Hearth::Validator.validate!(input[:iops], ::Integer, context: "#{context}[:iops]")
        Hearth::Validator.validate!(input[:throughput], ::Integer, context: "#{context}[:throughput]")
        Hearth::Validator.validate!(input[:multi_attach_enabled], ::TrueClass, ::FalseClass, context: "#{context}[:multi_attach_enabled]")
      end
    end

    class ModifyVolumeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVolumeOutput, context: context)
        VolumeModification.validate!(input[:volume_modification], context: "#{context}[:volume_modification]") unless input[:volume_modification].nil?
      end
    end

    class ModifyVpcAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcAttributeInput, context: context)
        AttributeBooleanValue.validate!(input[:enable_dns_hostnames], context: "#{context}[:enable_dns_hostnames]") unless input[:enable_dns_hostnames].nil?
        AttributeBooleanValue.validate!(input[:enable_dns_support], context: "#{context}[:enable_dns_support]") unless input[:enable_dns_support].nil?
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class ModifyVpcAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcAttributeOutput, context: context)
      end
    end

    class ModifyVpcEndpointConnectionNotificationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcEndpointConnectionNotificationInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:connection_notification_id], ::String, context: "#{context}[:connection_notification_id]")
        Hearth::Validator.validate!(input[:connection_notification_arn], ::String, context: "#{context}[:connection_notification_arn]")
        ValueStringList.validate!(input[:connection_events], context: "#{context}[:connection_events]") unless input[:connection_events].nil?
      end
    end

    class ModifyVpcEndpointConnectionNotificationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcEndpointConnectionNotificationOutput, context: context)
        Hearth::Validator.validate!(input[:return_value], ::TrueClass, ::FalseClass, context: "#{context}[:return_value]")
      end
    end

    class ModifyVpcEndpointInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcEndpointInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:vpc_endpoint_id], ::String, context: "#{context}[:vpc_endpoint_id]")
        Hearth::Validator.validate!(input[:reset_policy], ::TrueClass, ::FalseClass, context: "#{context}[:reset_policy]")
        Hearth::Validator.validate!(input[:policy_document], ::String, context: "#{context}[:policy_document]")
        VpcEndpointRouteTableIdList.validate!(input[:add_route_table_ids], context: "#{context}[:add_route_table_ids]") unless input[:add_route_table_ids].nil?
        VpcEndpointRouteTableIdList.validate!(input[:remove_route_table_ids], context: "#{context}[:remove_route_table_ids]") unless input[:remove_route_table_ids].nil?
        VpcEndpointSubnetIdList.validate!(input[:add_subnet_ids], context: "#{context}[:add_subnet_ids]") unless input[:add_subnet_ids].nil?
        VpcEndpointSubnetIdList.validate!(input[:remove_subnet_ids], context: "#{context}[:remove_subnet_ids]") unless input[:remove_subnet_ids].nil?
        VpcEndpointSecurityGroupIdList.validate!(input[:add_security_group_ids], context: "#{context}[:add_security_group_ids]") unless input[:add_security_group_ids].nil?
        VpcEndpointSecurityGroupIdList.validate!(input[:remove_security_group_ids], context: "#{context}[:remove_security_group_ids]") unless input[:remove_security_group_ids].nil?
        Hearth::Validator.validate!(input[:ip_address_type], ::String, context: "#{context}[:ip_address_type]")
        DnsOptionsSpecification.validate!(input[:dns_options], context: "#{context}[:dns_options]") unless input[:dns_options].nil?
        Hearth::Validator.validate!(input[:private_dns_enabled], ::TrueClass, ::FalseClass, context: "#{context}[:private_dns_enabled]")
      end
    end

    class ModifyVpcEndpointOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcEndpointOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ModifyVpcEndpointServiceConfigurationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcEndpointServiceConfigurationInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:service_id], ::String, context: "#{context}[:service_id]")
        Hearth::Validator.validate!(input[:private_dns_name], ::String, context: "#{context}[:private_dns_name]")
        Hearth::Validator.validate!(input[:remove_private_dns_name], ::TrueClass, ::FalseClass, context: "#{context}[:remove_private_dns_name]")
        Hearth::Validator.validate!(input[:acceptance_required], ::TrueClass, ::FalseClass, context: "#{context}[:acceptance_required]")
        ValueStringList.validate!(input[:add_network_load_balancer_arns], context: "#{context}[:add_network_load_balancer_arns]") unless input[:add_network_load_balancer_arns].nil?
        ValueStringList.validate!(input[:remove_network_load_balancer_arns], context: "#{context}[:remove_network_load_balancer_arns]") unless input[:remove_network_load_balancer_arns].nil?
        ValueStringList.validate!(input[:add_gateway_load_balancer_arns], context: "#{context}[:add_gateway_load_balancer_arns]") unless input[:add_gateway_load_balancer_arns].nil?
        ValueStringList.validate!(input[:remove_gateway_load_balancer_arns], context: "#{context}[:remove_gateway_load_balancer_arns]") unless input[:remove_gateway_load_balancer_arns].nil?
        ValueStringList.validate!(input[:add_supported_ip_address_types], context: "#{context}[:add_supported_ip_address_types]") unless input[:add_supported_ip_address_types].nil?
        ValueStringList.validate!(input[:remove_supported_ip_address_types], context: "#{context}[:remove_supported_ip_address_types]") unless input[:remove_supported_ip_address_types].nil?
      end
    end

    class ModifyVpcEndpointServiceConfigurationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcEndpointServiceConfigurationOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ModifyVpcEndpointServicePayerResponsibilityInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcEndpointServicePayerResponsibilityInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:service_id], ::String, context: "#{context}[:service_id]")
        Hearth::Validator.validate!(input[:payer_responsibility], ::String, context: "#{context}[:payer_responsibility]")
      end
    end

    class ModifyVpcEndpointServicePayerResponsibilityOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcEndpointServicePayerResponsibilityOutput, context: context)
        Hearth::Validator.validate!(input[:return_value], ::TrueClass, ::FalseClass, context: "#{context}[:return_value]")
      end
    end

    class ModifyVpcEndpointServicePermissionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcEndpointServicePermissionsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:service_id], ::String, context: "#{context}[:service_id]")
        ValueStringList.validate!(input[:add_allowed_principals], context: "#{context}[:add_allowed_principals]") unless input[:add_allowed_principals].nil?
        ValueStringList.validate!(input[:remove_allowed_principals], context: "#{context}[:remove_allowed_principals]") unless input[:remove_allowed_principals].nil?
      end
    end

    class ModifyVpcEndpointServicePermissionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcEndpointServicePermissionsOutput, context: context)
        Hearth::Validator.validate!(input[:return_value], ::TrueClass, ::FalseClass, context: "#{context}[:return_value]")
      end
    end

    class ModifyVpcPeeringConnectionOptionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcPeeringConnectionOptionsInput, context: context)
        PeeringConnectionOptionsRequest.validate!(input[:accepter_peering_connection_options], context: "#{context}[:accepter_peering_connection_options]") unless input[:accepter_peering_connection_options].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        PeeringConnectionOptionsRequest.validate!(input[:requester_peering_connection_options], context: "#{context}[:requester_peering_connection_options]") unless input[:requester_peering_connection_options].nil?
        Hearth::Validator.validate!(input[:vpc_peering_connection_id], ::String, context: "#{context}[:vpc_peering_connection_id]")
      end
    end

    class ModifyVpcPeeringConnectionOptionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcPeeringConnectionOptionsOutput, context: context)
        PeeringConnectionOptions.validate!(input[:accepter_peering_connection_options], context: "#{context}[:accepter_peering_connection_options]") unless input[:accepter_peering_connection_options].nil?
        PeeringConnectionOptions.validate!(input[:requester_peering_connection_options], context: "#{context}[:requester_peering_connection_options]") unless input[:requester_peering_connection_options].nil?
      end
    end

    class ModifyVpcTenancyInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcTenancyInput, context: context)
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:instance_tenancy], ::String, context: "#{context}[:instance_tenancy]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyVpcTenancyOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpcTenancyOutput, context: context)
        Hearth::Validator.validate!(input[:return_value], ::TrueClass, ::FalseClass, context: "#{context}[:return_value]")
      end
    end

    class ModifyVpnConnectionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpnConnectionInput, context: context)
        Hearth::Validator.validate!(input[:vpn_connection_id], ::String, context: "#{context}[:vpn_connection_id]")
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:customer_gateway_id], ::String, context: "#{context}[:customer_gateway_id]")
        Hearth::Validator.validate!(input[:vpn_gateway_id], ::String, context: "#{context}[:vpn_gateway_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyVpnConnectionOptionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpnConnectionOptionsInput, context: context)
        Hearth::Validator.validate!(input[:vpn_connection_id], ::String, context: "#{context}[:vpn_connection_id]")
        Hearth::Validator.validate!(input[:local_ipv4_network_cidr], ::String, context: "#{context}[:local_ipv4_network_cidr]")
        Hearth::Validator.validate!(input[:remote_ipv4_network_cidr], ::String, context: "#{context}[:remote_ipv4_network_cidr]")
        Hearth::Validator.validate!(input[:local_ipv6_network_cidr], ::String, context: "#{context}[:local_ipv6_network_cidr]")
        Hearth::Validator.validate!(input[:remote_ipv6_network_cidr], ::String, context: "#{context}[:remote_ipv6_network_cidr]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyVpnConnectionOptionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpnConnectionOptionsOutput, context: context)
        VpnConnection.validate!(input[:vpn_connection], context: "#{context}[:vpn_connection]") unless input[:vpn_connection].nil?
      end
    end

    class ModifyVpnConnectionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpnConnectionOutput, context: context)
        VpnConnection.validate!(input[:vpn_connection], context: "#{context}[:vpn_connection]") unless input[:vpn_connection].nil?
      end
    end

    class ModifyVpnTunnelCertificateInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpnTunnelCertificateInput, context: context)
        Hearth::Validator.validate!(input[:vpn_connection_id], ::String, context: "#{context}[:vpn_connection_id]")
        Hearth::Validator.validate!(input[:vpn_tunnel_outside_ip_address], ::String, context: "#{context}[:vpn_tunnel_outside_ip_address]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyVpnTunnelCertificateOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpnTunnelCertificateOutput, context: context)
        VpnConnection.validate!(input[:vpn_connection], context: "#{context}[:vpn_connection]") unless input[:vpn_connection].nil?
      end
    end

    class ModifyVpnTunnelOptionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpnTunnelOptionsInput, context: context)
        Hearth::Validator.validate!(input[:vpn_connection_id], ::String, context: "#{context}[:vpn_connection_id]")
        Hearth::Validator.validate!(input[:vpn_tunnel_outside_ip_address], ::String, context: "#{context}[:vpn_tunnel_outside_ip_address]")
        ModifyVpnTunnelOptionsSpecification.validate!(input[:tunnel_options], context: "#{context}[:tunnel_options]") unless input[:tunnel_options].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ModifyVpnTunnelOptionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpnTunnelOptionsOutput, context: context)
        VpnConnection.validate!(input[:vpn_connection], context: "#{context}[:vpn_connection]") unless input[:vpn_connection].nil?
      end
    end

    class ModifyVpnTunnelOptionsSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ModifyVpnTunnelOptionsSpecification, context: context)
        Hearth::Validator.validate!(input[:tunnel_inside_cidr], ::String, context: "#{context}[:tunnel_inside_cidr]")
        Hearth::Validator.validate!(input[:tunnel_inside_ipv6_cidr], ::String, context: "#{context}[:tunnel_inside_ipv6_cidr]")
        Hearth::Validator.validate!(input[:pre_shared_key], ::String, context: "#{context}[:pre_shared_key]")
        Hearth::Validator.validate!(input[:phase1_lifetime_seconds], ::Integer, context: "#{context}[:phase1_lifetime_seconds]")
        Hearth::Validator.validate!(input[:phase2_lifetime_seconds], ::Integer, context: "#{context}[:phase2_lifetime_seconds]")
        Hearth::Validator.validate!(input[:rekey_margin_time_seconds], ::Integer, context: "#{context}[:rekey_margin_time_seconds]")
        Hearth::Validator.validate!(input[:rekey_fuzz_percentage], ::Integer, context: "#{context}[:rekey_fuzz_percentage]")
        Hearth::Validator.validate!(input[:replay_window_size], ::Integer, context: "#{context}[:replay_window_size]")
        Hearth::Validator.validate!(input[:dpd_timeout_seconds], ::Integer, context: "#{context}[:dpd_timeout_seconds]")
        Hearth::Validator.validate!(input[:dpd_timeout_action], ::String, context: "#{context}[:dpd_timeout_action]")
        Phase1EncryptionAlgorithmsRequestList.validate!(input[:phase1_encryption_algorithms], context: "#{context}[:phase1_encryption_algorithms]") unless input[:phase1_encryption_algorithms].nil?
        Phase2EncryptionAlgorithmsRequestList.validate!(input[:phase2_encryption_algorithms], context: "#{context}[:phase2_encryption_algorithms]") unless input[:phase2_encryption_algorithms].nil?
        Phase1IntegrityAlgorithmsRequestList.validate!(input[:phase1_integrity_algorithms], context: "#{context}[:phase1_integrity_algorithms]") unless input[:phase1_integrity_algorithms].nil?
        Phase2IntegrityAlgorithmsRequestList.validate!(input[:phase2_integrity_algorithms], context: "#{context}[:phase2_integrity_algorithms]") unless input[:phase2_integrity_algorithms].nil?
        Phase1DHGroupNumbersRequestList.validate!(input[:phase1_dh_group_numbers], context: "#{context}[:phase1_dh_group_numbers]") unless input[:phase1_dh_group_numbers].nil?
        Phase2DHGroupNumbersRequestList.validate!(input[:phase2_dh_group_numbers], context: "#{context}[:phase2_dh_group_numbers]") unless input[:phase2_dh_group_numbers].nil?
        IKEVersionsRequestList.validate!(input[:ike_versions], context: "#{context}[:ike_versions]") unless input[:ike_versions].nil?
        Hearth::Validator.validate!(input[:startup_action], ::String, context: "#{context}[:startup_action]")
      end
    end

    class MonitorInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::MonitorInstancesInput, context: context)
        InstanceIdStringList.validate!(input[:instance_ids], context: "#{context}[:instance_ids]") unless input[:instance_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class MonitorInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::MonitorInstancesOutput, context: context)
        InstanceMonitoringList.validate!(input[:instance_monitorings], context: "#{context}[:instance_monitorings]") unless input[:instance_monitorings].nil?
      end
    end

    class Monitoring
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Monitoring, context: context)
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class MoveAddressToVpcInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::MoveAddressToVpcInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:public_ip], ::String, context: "#{context}[:public_ip]")
      end
    end

    class MoveAddressToVpcOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::MoveAddressToVpcOutput, context: context)
        Hearth::Validator.validate!(input[:allocation_id], ::String, context: "#{context}[:allocation_id]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
      end
    end

    class MoveByoipCidrToIpamInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::MoveByoipCidrToIpamInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:ipam_pool_id], ::String, context: "#{context}[:ipam_pool_id]")
        Hearth::Validator.validate!(input[:ipam_pool_owner], ::String, context: "#{context}[:ipam_pool_owner]")
      end
    end

    class MoveByoipCidrToIpamOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::MoveByoipCidrToIpamOutput, context: context)
        ByoipCidr.validate!(input[:byoip_cidr], context: "#{context}[:byoip_cidr]") unless input[:byoip_cidr].nil?
      end
    end

    class MovingAddressStatus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::MovingAddressStatus, context: context)
        Hearth::Validator.validate!(input[:move_status], ::String, context: "#{context}[:move_status]")
        Hearth::Validator.validate!(input[:public_ip], ::String, context: "#{context}[:public_ip]")
      end
    end

    class MovingAddressStatusSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          MovingAddressStatus.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class NatGateway
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NatGateway, context: context)
        Hearth::Validator.validate!(input[:create_time], ::Time, context: "#{context}[:create_time]")
        Hearth::Validator.validate!(input[:delete_time], ::Time, context: "#{context}[:delete_time]")
        Hearth::Validator.validate!(input[:failure_code], ::String, context: "#{context}[:failure_code]")
        Hearth::Validator.validate!(input[:failure_message], ::String, context: "#{context}[:failure_message]")
        NatGatewayAddressList.validate!(input[:nat_gateway_addresses], context: "#{context}[:nat_gateway_addresses]") unless input[:nat_gateway_addresses].nil?
        Hearth::Validator.validate!(input[:nat_gateway_id], ::String, context: "#{context}[:nat_gateway_id]")
        ProvisionedBandwidth.validate!(input[:provisioned_bandwidth], context: "#{context}[:provisioned_bandwidth]") unless input[:provisioned_bandwidth].nil?
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:connectivity_type], ::String, context: "#{context}[:connectivity_type]")
      end
    end

    class NatGatewayAddress
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NatGatewayAddress, context: context)
        Hearth::Validator.validate!(input[:allocation_id], ::String, context: "#{context}[:allocation_id]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:private_ip], ::String, context: "#{context}[:private_ip]")
        Hearth::Validator.validate!(input[:public_ip], ::String, context: "#{context}[:public_ip]")
      end
    end

    class NatGatewayAddressList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          NatGatewayAddress.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class NatGatewayIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class NatGatewayList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          NatGateway.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class NetworkAcl
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkAcl, context: context)
        NetworkAclAssociationList.validate!(input[:associations], context: "#{context}[:associations]") unless input[:associations].nil?
        NetworkAclEntryList.validate!(input[:entries], context: "#{context}[:entries]") unless input[:entries].nil?
        Hearth::Validator.validate!(input[:is_default], ::TrueClass, ::FalseClass, context: "#{context}[:is_default]")
        Hearth::Validator.validate!(input[:network_acl_id], ::String, context: "#{context}[:network_acl_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
      end
    end

    class NetworkAclAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkAclAssociation, context: context)
        Hearth::Validator.validate!(input[:network_acl_association_id], ::String, context: "#{context}[:network_acl_association_id]")
        Hearth::Validator.validate!(input[:network_acl_id], ::String, context: "#{context}[:network_acl_id]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
      end
    end

    class NetworkAclAssociationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          NetworkAclAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class NetworkAclEntry
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkAclEntry, context: context)
        Hearth::Validator.validate!(input[:cidr_block], ::String, context: "#{context}[:cidr_block]")
        Hearth::Validator.validate!(input[:egress], ::TrueClass, ::FalseClass, context: "#{context}[:egress]")
        IcmpTypeCode.validate!(input[:icmp_type_code], context: "#{context}[:icmp_type_code]") unless input[:icmp_type_code].nil?
        Hearth::Validator.validate!(input[:ipv6_cidr_block], ::String, context: "#{context}[:ipv6_cidr_block]")
        PortRange.validate!(input[:port_range], context: "#{context}[:port_range]") unless input[:port_range].nil?
        Hearth::Validator.validate!(input[:protocol], ::String, context: "#{context}[:protocol]")
        Hearth::Validator.validate!(input[:rule_action], ::String, context: "#{context}[:rule_action]")
        Hearth::Validator.validate!(input[:rule_number], ::Integer, context: "#{context}[:rule_number]")
      end
    end

    class NetworkAclEntryList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          NetworkAclEntry.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class NetworkAclIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class NetworkAclList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          NetworkAcl.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class NetworkCardInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkCardInfo, context: context)
        Hearth::Validator.validate!(input[:network_card_index], ::Integer, context: "#{context}[:network_card_index]")
        Hearth::Validator.validate!(input[:network_performance], ::String, context: "#{context}[:network_performance]")
        Hearth::Validator.validate!(input[:maximum_network_interfaces], ::Integer, context: "#{context}[:maximum_network_interfaces]")
      end
    end

    class NetworkCardInfoList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          NetworkCardInfo.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class NetworkInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInfo, context: context)
        Hearth::Validator.validate!(input[:network_performance], ::String, context: "#{context}[:network_performance]")
        Hearth::Validator.validate!(input[:maximum_network_interfaces], ::Integer, context: "#{context}[:maximum_network_interfaces]")
        Hearth::Validator.validate!(input[:maximum_network_cards], ::Integer, context: "#{context}[:maximum_network_cards]")
        Hearth::Validator.validate!(input[:default_network_card_index], ::Integer, context: "#{context}[:default_network_card_index]")
        NetworkCardInfoList.validate!(input[:network_cards], context: "#{context}[:network_cards]") unless input[:network_cards].nil?
        Hearth::Validator.validate!(input[:ipv4_addresses_per_interface], ::Integer, context: "#{context}[:ipv4_addresses_per_interface]")
        Hearth::Validator.validate!(input[:ipv6_addresses_per_interface], ::Integer, context: "#{context}[:ipv6_addresses_per_interface]")
        Hearth::Validator.validate!(input[:ipv6_supported], ::TrueClass, ::FalseClass, context: "#{context}[:ipv6_supported]")
        Hearth::Validator.validate!(input[:ena_support], ::String, context: "#{context}[:ena_support]")
        Hearth::Validator.validate!(input[:efa_supported], ::TrueClass, ::FalseClass, context: "#{context}[:efa_supported]")
        EfaInfo.validate!(input[:efa_info], context: "#{context}[:efa_info]") unless input[:efa_info].nil?
        Hearth::Validator.validate!(input[:encryption_in_transit_supported], ::TrueClass, ::FalseClass, context: "#{context}[:encryption_in_transit_supported]")
      end
    end

    class NetworkInsightsAccessScope
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInsightsAccessScope, context: context)
        Hearth::Validator.validate!(input[:network_insights_access_scope_id], ::String, context: "#{context}[:network_insights_access_scope_id]")
        Hearth::Validator.validate!(input[:network_insights_access_scope_arn], ::String, context: "#{context}[:network_insights_access_scope_arn]")
        Hearth::Validator.validate!(input[:created_date], ::Time, context: "#{context}[:created_date]")
        Hearth::Validator.validate!(input[:updated_date], ::Time, context: "#{context}[:updated_date]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class NetworkInsightsAccessScopeAnalysis
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInsightsAccessScopeAnalysis, context: context)
        Hearth::Validator.validate!(input[:network_insights_access_scope_analysis_id], ::String, context: "#{context}[:network_insights_access_scope_analysis_id]")
        Hearth::Validator.validate!(input[:network_insights_access_scope_analysis_arn], ::String, context: "#{context}[:network_insights_access_scope_analysis_arn]")
        Hearth::Validator.validate!(input[:network_insights_access_scope_id], ::String, context: "#{context}[:network_insights_access_scope_id]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        Hearth::Validator.validate!(input[:warning_message], ::String, context: "#{context}[:warning_message]")
        Hearth::Validator.validate!(input[:start_date], ::Time, context: "#{context}[:start_date]")
        Hearth::Validator.validate!(input[:end_date], ::Time, context: "#{context}[:end_date]")
        Hearth::Validator.validate!(input[:findings_found], ::String, context: "#{context}[:findings_found]")
        Hearth::Validator.validate!(input[:analyzed_eni_count], ::Integer, context: "#{context}[:analyzed_eni_count]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class NetworkInsightsAccessScopeAnalysisIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class NetworkInsightsAccessScopeAnalysisList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          NetworkInsightsAccessScopeAnalysis.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class NetworkInsightsAccessScopeContent
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInsightsAccessScopeContent, context: context)
        Hearth::Validator.validate!(input[:network_insights_access_scope_id], ::String, context: "#{context}[:network_insights_access_scope_id]")
        AccessScopePathList.validate!(input[:match_paths], context: "#{context}[:match_paths]") unless input[:match_paths].nil?
        AccessScopePathList.validate!(input[:exclude_paths], context: "#{context}[:exclude_paths]") unless input[:exclude_paths].nil?
      end
    end

    class NetworkInsightsAccessScopeIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class NetworkInsightsAccessScopeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          NetworkInsightsAccessScope.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class NetworkInsightsAnalysis
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInsightsAnalysis, context: context)
        Hearth::Validator.validate!(input[:network_insights_analysis_id], ::String, context: "#{context}[:network_insights_analysis_id]")
        Hearth::Validator.validate!(input[:network_insights_analysis_arn], ::String, context: "#{context}[:network_insights_analysis_arn]")
        Hearth::Validator.validate!(input[:network_insights_path_id], ::String, context: "#{context}[:network_insights_path_id]")
        ArnList.validate!(input[:filter_in_arns], context: "#{context}[:filter_in_arns]") unless input[:filter_in_arns].nil?
        Hearth::Validator.validate!(input[:start_date], ::Time, context: "#{context}[:start_date]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        Hearth::Validator.validate!(input[:warning_message], ::String, context: "#{context}[:warning_message]")
        Hearth::Validator.validate!(input[:network_path_found], ::TrueClass, ::FalseClass, context: "#{context}[:network_path_found]")
        PathComponentList.validate!(input[:forward_path_components], context: "#{context}[:forward_path_components]") unless input[:forward_path_components].nil?
        PathComponentList.validate!(input[:return_path_components], context: "#{context}[:return_path_components]") unless input[:return_path_components].nil?
        ExplanationList.validate!(input[:explanations], context: "#{context}[:explanations]") unless input[:explanations].nil?
        AlternatePathHintList.validate!(input[:alternate_path_hints], context: "#{context}[:alternate_path_hints]") unless input[:alternate_path_hints].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class NetworkInsightsAnalysisIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class NetworkInsightsAnalysisList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          NetworkInsightsAnalysis.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class NetworkInsightsPath
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInsightsPath, context: context)
        Hearth::Validator.validate!(input[:network_insights_path_id], ::String, context: "#{context}[:network_insights_path_id]")
        Hearth::Validator.validate!(input[:network_insights_path_arn], ::String, context: "#{context}[:network_insights_path_arn]")
        Hearth::Validator.validate!(input[:created_date], ::Time, context: "#{context}[:created_date]")
        Hearth::Validator.validate!(input[:source], ::String, context: "#{context}[:source]")
        Hearth::Validator.validate!(input[:destination], ::String, context: "#{context}[:destination]")
        Hearth::Validator.validate!(input[:source_ip], ::String, context: "#{context}[:source_ip]")
        Hearth::Validator.validate!(input[:destination_ip], ::String, context: "#{context}[:destination_ip]")
        Hearth::Validator.validate!(input[:protocol], ::String, context: "#{context}[:protocol]")
        Hearth::Validator.validate!(input[:destination_port], ::Integer, context: "#{context}[:destination_port]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class NetworkInsightsPathIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class NetworkInsightsPathList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          NetworkInsightsPath.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class NetworkInterface
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInterface, context: context)
        NetworkInterfaceAssociation.validate!(input[:association], context: "#{context}[:association]") unless input[:association].nil?
        NetworkInterfaceAttachment.validate!(input[:attachment], context: "#{context}[:attachment]") unless input[:attachment].nil?
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        GroupIdentifierList.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        Hearth::Validator.validate!(input[:interface_type], ::String, context: "#{context}[:interface_type]")
        NetworkInterfaceIpv6AddressesList.validate!(input[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless input[:ipv6_addresses].nil?
        Hearth::Validator.validate!(input[:mac_address], ::String, context: "#{context}[:mac_address]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:private_dns_name], ::String, context: "#{context}[:private_dns_name]")
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
        NetworkInterfacePrivateIpAddressList.validate!(input[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless input[:private_ip_addresses].nil?
        Ipv4PrefixesList.validate!(input[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless input[:ipv4_prefixes].nil?
        Ipv6PrefixesList.validate!(input[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless input[:ipv6_prefixes].nil?
        Hearth::Validator.validate!(input[:requester_id], ::String, context: "#{context}[:requester_id]")
        Hearth::Validator.validate!(input[:requester_managed], ::TrueClass, ::FalseClass, context: "#{context}[:requester_managed]")
        Hearth::Validator.validate!(input[:source_dest_check], ::TrueClass, ::FalseClass, context: "#{context}[:source_dest_check]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        TagList.validate!(input[:tag_set], context: "#{context}[:tag_set]") unless input[:tag_set].nil?
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:deny_all_igw_traffic], ::TrueClass, ::FalseClass, context: "#{context}[:deny_all_igw_traffic]")
        Hearth::Validator.validate!(input[:ipv6_native], ::TrueClass, ::FalseClass, context: "#{context}[:ipv6_native]")
        Hearth::Validator.validate!(input[:ipv6_address], ::String, context: "#{context}[:ipv6_address]")
      end
    end

    class NetworkInterfaceAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInterfaceAssociation, context: context)
        Hearth::Validator.validate!(input[:allocation_id], ::String, context: "#{context}[:allocation_id]")
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        Hearth::Validator.validate!(input[:ip_owner_id], ::String, context: "#{context}[:ip_owner_id]")
        Hearth::Validator.validate!(input[:public_dns_name], ::String, context: "#{context}[:public_dns_name]")
        Hearth::Validator.validate!(input[:public_ip], ::String, context: "#{context}[:public_ip]")
        Hearth::Validator.validate!(input[:customer_owned_ip], ::String, context: "#{context}[:customer_owned_ip]")
        Hearth::Validator.validate!(input[:carrier_ip], ::String, context: "#{context}[:carrier_ip]")
      end
    end

    class NetworkInterfaceAttachment
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInterfaceAttachment, context: context)
        Hearth::Validator.validate!(input[:attach_time], ::Time, context: "#{context}[:attach_time]")
        Hearth::Validator.validate!(input[:attachment_id], ::String, context: "#{context}[:attachment_id]")
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
        Hearth::Validator.validate!(input[:device_index], ::Integer, context: "#{context}[:device_index]")
        Hearth::Validator.validate!(input[:network_card_index], ::Integer, context: "#{context}[:network_card_index]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:instance_owner_id], ::String, context: "#{context}[:instance_owner_id]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
      end
    end

    class NetworkInterfaceAttachmentChanges
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInterfaceAttachmentChanges, context: context)
        Hearth::Validator.validate!(input[:attachment_id], ::String, context: "#{context}[:attachment_id]")
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
      end
    end

    class NetworkInterfaceCount
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInterfaceCount, context: context)
        Hearth::Validator.validate!(input[:min], ::Integer, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Integer, context: "#{context}[:max]")
      end
    end

    class NetworkInterfaceCountRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInterfaceCountRequest, context: context)
        Hearth::Validator.validate!(input[:min], ::Integer, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Integer, context: "#{context}[:max]")
      end
    end

    class NetworkInterfaceIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class NetworkInterfaceIpv6Address
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInterfaceIpv6Address, context: context)
        Hearth::Validator.validate!(input[:ipv6_address], ::String, context: "#{context}[:ipv6_address]")
      end
    end

    class NetworkInterfaceIpv6AddressesList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          NetworkInterfaceIpv6Address.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class NetworkInterfaceList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          NetworkInterface.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class NetworkInterfacePermission
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInterfacePermission, context: context)
        Hearth::Validator.validate!(input[:network_interface_permission_id], ::String, context: "#{context}[:network_interface_permission_id]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:aws_account_id], ::String, context: "#{context}[:aws_account_id]")
        Hearth::Validator.validate!(input[:aws_service], ::String, context: "#{context}[:aws_service]")
        Hearth::Validator.validate!(input[:permission], ::String, context: "#{context}[:permission]")
        NetworkInterfacePermissionState.validate!(input[:permission_state], context: "#{context}[:permission_state]") unless input[:permission_state].nil?
      end
    end

    class NetworkInterfacePermissionIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class NetworkInterfacePermissionList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          NetworkInterfacePermission.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class NetworkInterfacePermissionState
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInterfacePermissionState, context: context)
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
      end
    end

    class NetworkInterfacePrivateIpAddress
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NetworkInterfacePrivateIpAddress, context: context)
        NetworkInterfaceAssociation.validate!(input[:association], context: "#{context}[:association]") unless input[:association].nil?
        Hearth::Validator.validate!(input[:primary], ::TrueClass, ::FalseClass, context: "#{context}[:primary]")
        Hearth::Validator.validate!(input[:private_dns_name], ::String, context: "#{context}[:private_dns_name]")
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
      end
    end

    class NetworkInterfacePrivateIpAddressList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          NetworkInterfacePrivateIpAddress.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class NewDhcpConfiguration
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::NewDhcpConfiguration, context: context)
        Hearth::Validator.validate!(input[:key], ::String, context: "#{context}[:key]")
        ValueStringList.validate!(input[:values], context: "#{context}[:values]") unless input[:values].nil?
      end
    end

    class NewDhcpConfigurationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          NewDhcpConfiguration.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class OccurrenceDayRequestSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::Integer, context: "#{context}[#{index}]")
        end
      end
    end

    class OccurrenceDaySet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::Integer, context: "#{context}[#{index}]")
        end
      end
    end

    class OnDemandOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::OnDemandOptions, context: context)
        Hearth::Validator.validate!(input[:allocation_strategy], ::String, context: "#{context}[:allocation_strategy]")
        CapacityReservationOptions.validate!(input[:capacity_reservation_options], context: "#{context}[:capacity_reservation_options]") unless input[:capacity_reservation_options].nil?
        Hearth::Validator.validate!(input[:single_instance_type], ::TrueClass, ::FalseClass, context: "#{context}[:single_instance_type]")
        Hearth::Validator.validate!(input[:single_availability_zone], ::TrueClass, ::FalseClass, context: "#{context}[:single_availability_zone]")
        Hearth::Validator.validate!(input[:min_target_capacity], ::Integer, context: "#{context}[:min_target_capacity]")
        Hearth::Validator.validate!(input[:max_total_price], ::String, context: "#{context}[:max_total_price]")
      end
    end

    class OnDemandOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::OnDemandOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:allocation_strategy], ::String, context: "#{context}[:allocation_strategy]")
        CapacityReservationOptionsRequest.validate!(input[:capacity_reservation_options], context: "#{context}[:capacity_reservation_options]") unless input[:capacity_reservation_options].nil?
        Hearth::Validator.validate!(input[:single_instance_type], ::TrueClass, ::FalseClass, context: "#{context}[:single_instance_type]")
        Hearth::Validator.validate!(input[:single_availability_zone], ::TrueClass, ::FalseClass, context: "#{context}[:single_availability_zone]")
        Hearth::Validator.validate!(input[:min_target_capacity], ::Integer, context: "#{context}[:min_target_capacity]")
        Hearth::Validator.validate!(input[:max_total_price], ::String, context: "#{context}[:max_total_price]")
      end
    end

    class OrganizationArnStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class OrganizationalUnitArnStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class OwnerStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class PacketHeaderStatement
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PacketHeaderStatement, context: context)
        ValueStringList.validate!(input[:source_addresses], context: "#{context}[:source_addresses]") unless input[:source_addresses].nil?
        ValueStringList.validate!(input[:destination_addresses], context: "#{context}[:destination_addresses]") unless input[:destination_addresses].nil?
        ValueStringList.validate!(input[:source_ports], context: "#{context}[:source_ports]") unless input[:source_ports].nil?
        ValueStringList.validate!(input[:destination_ports], context: "#{context}[:destination_ports]") unless input[:destination_ports].nil?
        ValueStringList.validate!(input[:source_prefix_lists], context: "#{context}[:source_prefix_lists]") unless input[:source_prefix_lists].nil?
        ValueStringList.validate!(input[:destination_prefix_lists], context: "#{context}[:destination_prefix_lists]") unless input[:destination_prefix_lists].nil?
        ProtocolList.validate!(input[:protocols], context: "#{context}[:protocols]") unless input[:protocols].nil?
      end
    end

    class PacketHeaderStatementRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PacketHeaderStatementRequest, context: context)
        ValueStringList.validate!(input[:source_addresses], context: "#{context}[:source_addresses]") unless input[:source_addresses].nil?
        ValueStringList.validate!(input[:destination_addresses], context: "#{context}[:destination_addresses]") unless input[:destination_addresses].nil?
        ValueStringList.validate!(input[:source_ports], context: "#{context}[:source_ports]") unless input[:source_ports].nil?
        ValueStringList.validate!(input[:destination_ports], context: "#{context}[:destination_ports]") unless input[:destination_ports].nil?
        ValueStringList.validate!(input[:source_prefix_lists], context: "#{context}[:source_prefix_lists]") unless input[:source_prefix_lists].nil?
        ValueStringList.validate!(input[:destination_prefix_lists], context: "#{context}[:destination_prefix_lists]") unless input[:destination_prefix_lists].nil?
        ProtocolList.validate!(input[:protocols], context: "#{context}[:protocols]") unless input[:protocols].nil?
      end
    end

    class PathComponent
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PathComponent, context: context)
        Hearth::Validator.validate!(input[:sequence_number], ::Integer, context: "#{context}[:sequence_number]")
        AnalysisAclRule.validate!(input[:acl_rule], context: "#{context}[:acl_rule]") unless input[:acl_rule].nil?
        AnalysisComponent.validate!(input[:attached_to], context: "#{context}[:attached_to]") unless input[:attached_to].nil?
        AnalysisComponent.validate!(input[:component], context: "#{context}[:component]") unless input[:component].nil?
        AnalysisComponent.validate!(input[:destination_vpc], context: "#{context}[:destination_vpc]") unless input[:destination_vpc].nil?
        AnalysisPacketHeader.validate!(input[:outbound_header], context: "#{context}[:outbound_header]") unless input[:outbound_header].nil?
        AnalysisPacketHeader.validate!(input[:inbound_header], context: "#{context}[:inbound_header]") unless input[:inbound_header].nil?
        AnalysisRouteTableRoute.validate!(input[:route_table_route], context: "#{context}[:route_table_route]") unless input[:route_table_route].nil?
        AnalysisSecurityGroupRule.validate!(input[:security_group_rule], context: "#{context}[:security_group_rule]") unless input[:security_group_rule].nil?
        AnalysisComponent.validate!(input[:source_vpc], context: "#{context}[:source_vpc]") unless input[:source_vpc].nil?
        AnalysisComponent.validate!(input[:subnet], context: "#{context}[:subnet]") unless input[:subnet].nil?
        AnalysisComponent.validate!(input[:vpc], context: "#{context}[:vpc]") unless input[:vpc].nil?
        AdditionalDetailList.validate!(input[:additional_details], context: "#{context}[:additional_details]") unless input[:additional_details].nil?
        AnalysisComponent.validate!(input[:transit_gateway], context: "#{context}[:transit_gateway]") unless input[:transit_gateway].nil?
        TransitGatewayRouteTableRoute.validate!(input[:transit_gateway_route_table_route], context: "#{context}[:transit_gateway_route_table_route]") unless input[:transit_gateway_route_table_route].nil?
      end
    end

    class PathComponentList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PathComponent.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PathStatement
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PathStatement, context: context)
        PacketHeaderStatement.validate!(input[:packet_header_statement], context: "#{context}[:packet_header_statement]") unless input[:packet_header_statement].nil?
        ResourceStatement.validate!(input[:resource_statement], context: "#{context}[:resource_statement]") unless input[:resource_statement].nil?
      end
    end

    class PathStatementRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PathStatementRequest, context: context)
        PacketHeaderStatementRequest.validate!(input[:packet_header_statement], context: "#{context}[:packet_header_statement]") unless input[:packet_header_statement].nil?
        ResourceStatementRequest.validate!(input[:resource_statement], context: "#{context}[:resource_statement]") unless input[:resource_statement].nil?
      end
    end

    class PciId
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PciId, context: context)
        Hearth::Validator.validate!(input[:device_id], ::String, context: "#{context}[:device_id]")
        Hearth::Validator.validate!(input[:vendor_id], ::String, context: "#{context}[:vendor_id]")
        Hearth::Validator.validate!(input[:subsystem_id], ::String, context: "#{context}[:subsystem_id]")
        Hearth::Validator.validate!(input[:subsystem_vendor_id], ::String, context: "#{context}[:subsystem_vendor_id]")
      end
    end

    class PeeringAttachmentStatus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PeeringAttachmentStatus, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class PeeringConnectionOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PeeringConnectionOptions, context: context)
        Hearth::Validator.validate!(input[:allow_dns_resolution_from_remote_vpc], ::TrueClass, ::FalseClass, context: "#{context}[:allow_dns_resolution_from_remote_vpc]")
        Hearth::Validator.validate!(input[:allow_egress_from_local_classic_link_to_remote_vpc], ::TrueClass, ::FalseClass, context: "#{context}[:allow_egress_from_local_classic_link_to_remote_vpc]")
        Hearth::Validator.validate!(input[:allow_egress_from_local_vpc_to_remote_classic_link], ::TrueClass, ::FalseClass, context: "#{context}[:allow_egress_from_local_vpc_to_remote_classic_link]")
      end
    end

    class PeeringConnectionOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PeeringConnectionOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:allow_dns_resolution_from_remote_vpc], ::TrueClass, ::FalseClass, context: "#{context}[:allow_dns_resolution_from_remote_vpc]")
        Hearth::Validator.validate!(input[:allow_egress_from_local_classic_link_to_remote_vpc], ::TrueClass, ::FalseClass, context: "#{context}[:allow_egress_from_local_classic_link_to_remote_vpc]")
        Hearth::Validator.validate!(input[:allow_egress_from_local_vpc_to_remote_classic_link], ::TrueClass, ::FalseClass, context: "#{context}[:allow_egress_from_local_vpc_to_remote_classic_link]")
      end
    end

    class PeeringTgwInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PeeringTgwInfo, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:region], ::String, context: "#{context}[:region]")
      end
    end

    class Phase1DHGroupNumbersList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Phase1DHGroupNumbersListValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Phase1DHGroupNumbersListValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Phase1DHGroupNumbersListValue, context: context)
        Hearth::Validator.validate!(input[:value], ::Integer, context: "#{context}[:value]")
      end
    end

    class Phase1DHGroupNumbersRequestList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Phase1DHGroupNumbersRequestListValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Phase1DHGroupNumbersRequestListValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Phase1DHGroupNumbersRequestListValue, context: context)
        Hearth::Validator.validate!(input[:value], ::Integer, context: "#{context}[:value]")
      end
    end

    class Phase1EncryptionAlgorithmsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Phase1EncryptionAlgorithmsListValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Phase1EncryptionAlgorithmsListValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Phase1EncryptionAlgorithmsListValue, context: context)
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class Phase1EncryptionAlgorithmsRequestList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Phase1EncryptionAlgorithmsRequestListValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Phase1EncryptionAlgorithmsRequestListValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Phase1EncryptionAlgorithmsRequestListValue, context: context)
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class Phase1IntegrityAlgorithmsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Phase1IntegrityAlgorithmsListValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Phase1IntegrityAlgorithmsListValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Phase1IntegrityAlgorithmsListValue, context: context)
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class Phase1IntegrityAlgorithmsRequestList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Phase1IntegrityAlgorithmsRequestListValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Phase1IntegrityAlgorithmsRequestListValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Phase1IntegrityAlgorithmsRequestListValue, context: context)
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class Phase2DHGroupNumbersList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Phase2DHGroupNumbersListValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Phase2DHGroupNumbersListValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Phase2DHGroupNumbersListValue, context: context)
        Hearth::Validator.validate!(input[:value], ::Integer, context: "#{context}[:value]")
      end
    end

    class Phase2DHGroupNumbersRequestList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Phase2DHGroupNumbersRequestListValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Phase2DHGroupNumbersRequestListValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Phase2DHGroupNumbersRequestListValue, context: context)
        Hearth::Validator.validate!(input[:value], ::Integer, context: "#{context}[:value]")
      end
    end

    class Phase2EncryptionAlgorithmsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Phase2EncryptionAlgorithmsListValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Phase2EncryptionAlgorithmsListValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Phase2EncryptionAlgorithmsListValue, context: context)
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class Phase2EncryptionAlgorithmsRequestList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Phase2EncryptionAlgorithmsRequestListValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Phase2EncryptionAlgorithmsRequestListValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Phase2EncryptionAlgorithmsRequestListValue, context: context)
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class Phase2IntegrityAlgorithmsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Phase2IntegrityAlgorithmsListValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Phase2IntegrityAlgorithmsListValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Phase2IntegrityAlgorithmsListValue, context: context)
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class Phase2IntegrityAlgorithmsRequestList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Phase2IntegrityAlgorithmsRequestListValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Phase2IntegrityAlgorithmsRequestListValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Phase2IntegrityAlgorithmsRequestListValue, context: context)
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class Placement
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Placement, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:affinity], ::String, context: "#{context}[:affinity]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        Hearth::Validator.validate!(input[:partition_number], ::Integer, context: "#{context}[:partition_number]")
        Hearth::Validator.validate!(input[:host_id], ::String, context: "#{context}[:host_id]")
        Hearth::Validator.validate!(input[:tenancy], ::String, context: "#{context}[:tenancy]")
        Hearth::Validator.validate!(input[:spread_domain], ::String, context: "#{context}[:spread_domain]")
        Hearth::Validator.validate!(input[:host_resource_group_arn], ::String, context: "#{context}[:host_resource_group_arn]")
      end
    end

    class PlacementGroup
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PlacementGroup, context: context)
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:strategy], ::String, context: "#{context}[:strategy]")
        Hearth::Validator.validate!(input[:partition_count], ::Integer, context: "#{context}[:partition_count]")
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:group_arn], ::String, context: "#{context}[:group_arn]")
      end
    end

    class PlacementGroupIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class PlacementGroupInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PlacementGroupInfo, context: context)
        PlacementGroupStrategyList.validate!(input[:supported_strategies], context: "#{context}[:supported_strategies]") unless input[:supported_strategies].nil?
      end
    end

    class PlacementGroupList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PlacementGroup.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PlacementGroupStrategyList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class PlacementGroupStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class PlacementResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PlacementResponse, context: context)
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
      end
    end

    class PoolCidrBlock
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PoolCidrBlock, context: context)
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
      end
    end

    class PoolCidrBlocksSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PoolCidrBlock.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PortRange
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PortRange, context: context)
        Hearth::Validator.validate!(input[:from], ::Integer, context: "#{context}[:from]")
        Hearth::Validator.validate!(input[:to], ::Integer, context: "#{context}[:to]")
      end
    end

    class PortRangeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PortRange.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PrefixList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PrefixList, context: context)
        ValueStringList.validate!(input[:cidrs], context: "#{context}[:cidrs]") unless input[:cidrs].nil?
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
        Hearth::Validator.validate!(input[:prefix_list_name], ::String, context: "#{context}[:prefix_list_name]")
      end
    end

    class PrefixListAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PrefixListAssociation, context: context)
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:resource_owner], ::String, context: "#{context}[:resource_owner]")
      end
    end

    class PrefixListAssociationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PrefixListAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PrefixListEntry
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PrefixListEntry, context: context)
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
      end
    end

    class PrefixListEntrySet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PrefixListEntry.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PrefixListId
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PrefixListId, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
      end
    end

    class PrefixListIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PrefixListId.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PrefixListIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class PrefixListResourceIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class PrefixListSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PrefixList.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PriceSchedule
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PriceSchedule, context: context)
        Hearth::Validator.validate!(input[:active], ::TrueClass, ::FalseClass, context: "#{context}[:active]")
        Hearth::Validator.validate!(input[:currency_code], ::String, context: "#{context}[:currency_code]")
        Hearth::Validator.validate!(input[:price], ::Float, context: "#{context}[:price]")
        Hearth::Validator.validate!(input[:term], ::Integer, context: "#{context}[:term]")
      end
    end

    class PriceScheduleList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PriceSchedule.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PriceScheduleSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PriceScheduleSpecification, context: context)
        Hearth::Validator.validate!(input[:currency_code], ::String, context: "#{context}[:currency_code]")
        Hearth::Validator.validate!(input[:price], ::Float, context: "#{context}[:price]")
        Hearth::Validator.validate!(input[:term], ::Integer, context: "#{context}[:term]")
      end
    end

    class PriceScheduleSpecificationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PriceScheduleSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PricingDetail
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PricingDetail, context: context)
        Hearth::Validator.validate!(input[:count], ::Integer, context: "#{context}[:count]")
        Hearth::Validator.validate!(input[:price], ::Float, context: "#{context}[:price]")
      end
    end

    class PricingDetailsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PricingDetail.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PrincipalIdFormat
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PrincipalIdFormat, context: context)
        Hearth::Validator.validate!(input[:arn], ::String, context: "#{context}[:arn]")
        IdFormatList.validate!(input[:statuses], context: "#{context}[:statuses]") unless input[:statuses].nil?
      end
    end

    class PrincipalIdFormatList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PrincipalIdFormat.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PrivateDnsDetails
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PrivateDnsDetails, context: context)
        Hearth::Validator.validate!(input[:private_dns_name], ::String, context: "#{context}[:private_dns_name]")
      end
    end

    class PrivateDnsDetailsSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PrivateDnsDetails.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PrivateDnsNameConfiguration
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PrivateDnsNameConfiguration, context: context)
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
      end
    end

    class PrivateDnsNameOptionsOnLaunch
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PrivateDnsNameOptionsOnLaunch, context: context)
        Hearth::Validator.validate!(input[:hostname_type], ::String, context: "#{context}[:hostname_type]")
        Hearth::Validator.validate!(input[:enable_resource_name_dns_a_record], ::TrueClass, ::FalseClass, context: "#{context}[:enable_resource_name_dns_a_record]")
        Hearth::Validator.validate!(input[:enable_resource_name_dns_aaaa_record], ::TrueClass, ::FalseClass, context: "#{context}[:enable_resource_name_dns_aaaa_record]")
      end
    end

    class PrivateDnsNameOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PrivateDnsNameOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:hostname_type], ::String, context: "#{context}[:hostname_type]")
        Hearth::Validator.validate!(input[:enable_resource_name_dns_a_record], ::TrueClass, ::FalseClass, context: "#{context}[:enable_resource_name_dns_a_record]")
        Hearth::Validator.validate!(input[:enable_resource_name_dns_aaaa_record], ::TrueClass, ::FalseClass, context: "#{context}[:enable_resource_name_dns_aaaa_record]")
      end
    end

    class PrivateDnsNameOptionsResponse
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PrivateDnsNameOptionsResponse, context: context)
        Hearth::Validator.validate!(input[:hostname_type], ::String, context: "#{context}[:hostname_type]")
        Hearth::Validator.validate!(input[:enable_resource_name_dns_a_record], ::TrueClass, ::FalseClass, context: "#{context}[:enable_resource_name_dns_a_record]")
        Hearth::Validator.validate!(input[:enable_resource_name_dns_aaaa_record], ::TrueClass, ::FalseClass, context: "#{context}[:enable_resource_name_dns_aaaa_record]")
      end
    end

    class PrivateIpAddressConfigSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ScheduledInstancesPrivateIpAddressConfig.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PrivateIpAddressSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PrivateIpAddressSpecification, context: context)
        Hearth::Validator.validate!(input[:primary], ::TrueClass, ::FalseClass, context: "#{context}[:primary]")
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
      end
    end

    class PrivateIpAddressSpecificationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PrivateIpAddressSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PrivateIpAddressStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ProcessorInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ProcessorInfo, context: context)
        ArchitectureTypeList.validate!(input[:supported_architectures], context: "#{context}[:supported_architectures]") unless input[:supported_architectures].nil?
        Hearth::Validator.validate!(input[:sustained_clock_speed_in_ghz], ::Float, context: "#{context}[:sustained_clock_speed_in_ghz]")
      end
    end

    class ProductCode
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ProductCode, context: context)
        Hearth::Validator.validate!(input[:product_code_id], ::String, context: "#{context}[:product_code_id]")
        Hearth::Validator.validate!(input[:product_code_type], ::String, context: "#{context}[:product_code_type]")
      end
    end

    class ProductCodeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ProductCode.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ProductCodeStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ProductDescriptionList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class PropagatingVgw
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PropagatingVgw, context: context)
        Hearth::Validator.validate!(input[:gateway_id], ::String, context: "#{context}[:gateway_id]")
      end
    end

    class PropagatingVgwList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PropagatingVgw.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ProtocolList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ProvisionByoipCidrInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ProvisionByoipCidrInput, context: context)
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        CidrAuthorizationContext.validate!(input[:cidr_authorization_context], context: "#{context}[:cidr_authorization_context]") unless input[:cidr_authorization_context].nil?
        Hearth::Validator.validate!(input[:publicly_advertisable], ::TrueClass, ::FalseClass, context: "#{context}[:publicly_advertisable]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        TagSpecificationList.validate!(input[:pool_tag_specifications], context: "#{context}[:pool_tag_specifications]") unless input[:pool_tag_specifications].nil?
        Hearth::Validator.validate!(input[:multi_region], ::TrueClass, ::FalseClass, context: "#{context}[:multi_region]")
      end
    end

    class ProvisionByoipCidrOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ProvisionByoipCidrOutput, context: context)
        ByoipCidr.validate!(input[:byoip_cidr], context: "#{context}[:byoip_cidr]") unless input[:byoip_cidr].nil?
      end
    end

    class ProvisionIpamPoolCidrInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ProvisionIpamPoolCidrInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipam_pool_id], ::String, context: "#{context}[:ipam_pool_id]")
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        IpamCidrAuthorizationContext.validate!(input[:cidr_authorization_context], context: "#{context}[:cidr_authorization_context]") unless input[:cidr_authorization_context].nil?
      end
    end

    class ProvisionIpamPoolCidrOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ProvisionIpamPoolCidrOutput, context: context)
        IpamPoolCidr.validate!(input[:ipam_pool_cidr], context: "#{context}[:ipam_pool_cidr]") unless input[:ipam_pool_cidr].nil?
      end
    end

    class ProvisionPublicIpv4PoolCidrInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ProvisionPublicIpv4PoolCidrInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipam_pool_id], ::String, context: "#{context}[:ipam_pool_id]")
        Hearth::Validator.validate!(input[:pool_id], ::String, context: "#{context}[:pool_id]")
        Hearth::Validator.validate!(input[:netmask_length], ::Integer, context: "#{context}[:netmask_length]")
      end
    end

    class ProvisionPublicIpv4PoolCidrOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ProvisionPublicIpv4PoolCidrOutput, context: context)
        Hearth::Validator.validate!(input[:pool_id], ::String, context: "#{context}[:pool_id]")
        PublicIpv4PoolRange.validate!(input[:pool_address_range], context: "#{context}[:pool_address_range]") unless input[:pool_address_range].nil?
      end
    end

    class ProvisionedBandwidth
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ProvisionedBandwidth, context: context)
        Hearth::Validator.validate!(input[:provision_time], ::Time, context: "#{context}[:provision_time]")
        Hearth::Validator.validate!(input[:provisioned], ::String, context: "#{context}[:provisioned]")
        Hearth::Validator.validate!(input[:request_time], ::Time, context: "#{context}[:request_time]")
        Hearth::Validator.validate!(input[:requested], ::String, context: "#{context}[:requested]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
      end
    end

    class PtrUpdateStatus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PtrUpdateStatus, context: context)
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:reason], ::String, context: "#{context}[:reason]")
      end
    end

    class PublicIpStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class PublicIpv4Pool
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PublicIpv4Pool, context: context)
        Hearth::Validator.validate!(input[:pool_id], ::String, context: "#{context}[:pool_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        PublicIpv4PoolRangeSet.validate!(input[:pool_address_ranges], context: "#{context}[:pool_address_ranges]") unless input[:pool_address_ranges].nil?
        Hearth::Validator.validate!(input[:total_address_count], ::Integer, context: "#{context}[:total_address_count]")
        Hearth::Validator.validate!(input[:total_available_address_count], ::Integer, context: "#{context}[:total_available_address_count]")
        Hearth::Validator.validate!(input[:network_border_group], ::String, context: "#{context}[:network_border_group]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class PublicIpv4PoolIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class PublicIpv4PoolRange
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PublicIpv4PoolRange, context: context)
        Hearth::Validator.validate!(input[:first_address], ::String, context: "#{context}[:first_address]")
        Hearth::Validator.validate!(input[:last_address], ::String, context: "#{context}[:last_address]")
        Hearth::Validator.validate!(input[:address_count], ::Integer, context: "#{context}[:address_count]")
        Hearth::Validator.validate!(input[:available_address_count], ::Integer, context: "#{context}[:available_address_count]")
      end
    end

    class PublicIpv4PoolRangeSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PublicIpv4PoolRange.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PublicIpv4PoolSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PublicIpv4Pool.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Purchase
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Purchase, context: context)
        Hearth::Validator.validate!(input[:currency_code], ::String, context: "#{context}[:currency_code]")
        Hearth::Validator.validate!(input[:duration], ::Integer, context: "#{context}[:duration]")
        ResponseHostIdSet.validate!(input[:host_id_set], context: "#{context}[:host_id_set]") unless input[:host_id_set].nil?
        Hearth::Validator.validate!(input[:host_reservation_id], ::String, context: "#{context}[:host_reservation_id]")
        Hearth::Validator.validate!(input[:hourly_price], ::String, context: "#{context}[:hourly_price]")
        Hearth::Validator.validate!(input[:instance_family], ::String, context: "#{context}[:instance_family]")
        Hearth::Validator.validate!(input[:payment_option], ::String, context: "#{context}[:payment_option]")
        Hearth::Validator.validate!(input[:upfront_price], ::String, context: "#{context}[:upfront_price]")
      end
    end

    class PurchaseHostReservationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PurchaseHostReservationInput, context: context)
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:currency_code], ::String, context: "#{context}[:currency_code]")
        RequestHostIdSet.validate!(input[:host_id_set], context: "#{context}[:host_id_set]") unless input[:host_id_set].nil?
        Hearth::Validator.validate!(input[:limit_price], ::String, context: "#{context}[:limit_price]")
        Hearth::Validator.validate!(input[:offering_id], ::String, context: "#{context}[:offering_id]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class PurchaseHostReservationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PurchaseHostReservationOutput, context: context)
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:currency_code], ::String, context: "#{context}[:currency_code]")
        PurchaseSet.validate!(input[:purchase], context: "#{context}[:purchase]") unless input[:purchase].nil?
        Hearth::Validator.validate!(input[:total_hourly_price], ::String, context: "#{context}[:total_hourly_price]")
        Hearth::Validator.validate!(input[:total_upfront_price], ::String, context: "#{context}[:total_upfront_price]")
      end
    end

    class PurchaseRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PurchaseRequest, context: context)
        Hearth::Validator.validate!(input[:instance_count], ::Integer, context: "#{context}[:instance_count]")
        Hearth::Validator.validate!(input[:purchase_token], ::String, context: "#{context}[:purchase_token]")
      end
    end

    class PurchaseRequestSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          PurchaseRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PurchaseReservedInstancesOfferingInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PurchaseReservedInstancesOfferingInput, context: context)
        Hearth::Validator.validate!(input[:instance_count], ::Integer, context: "#{context}[:instance_count]")
        Hearth::Validator.validate!(input[:reserved_instances_offering_id], ::String, context: "#{context}[:reserved_instances_offering_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        ReservedInstanceLimitPrice.validate!(input[:limit_price], context: "#{context}[:limit_price]") unless input[:limit_price].nil?
        Hearth::Validator.validate!(input[:purchase_time], ::Time, context: "#{context}[:purchase_time]")
      end
    end

    class PurchaseReservedInstancesOfferingOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PurchaseReservedInstancesOfferingOutput, context: context)
        Hearth::Validator.validate!(input[:reserved_instances_id], ::String, context: "#{context}[:reserved_instances_id]")
      end
    end

    class PurchaseScheduledInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PurchaseScheduledInstancesInput, context: context)
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        PurchaseRequestSet.validate!(input[:purchase_requests], context: "#{context}[:purchase_requests]") unless input[:purchase_requests].nil?
      end
    end

    class PurchaseScheduledInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::PurchaseScheduledInstancesOutput, context: context)
        PurchasedScheduledInstanceSet.validate!(input[:scheduled_instance_set], context: "#{context}[:scheduled_instance_set]") unless input[:scheduled_instance_set].nil?
      end
    end

    class PurchaseSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Purchase.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class PurchasedScheduledInstanceSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ScheduledInstance.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ReasonCodesList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class RebootInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RebootInstancesInput, context: context)
        InstanceIdStringList.validate!(input[:instance_ids], context: "#{context}[:instance_ids]") unless input[:instance_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class RebootInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RebootInstancesOutput, context: context)
      end
    end

    class RecurringCharge
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RecurringCharge, context: context)
        Hearth::Validator.validate!(input[:amount], ::Float, context: "#{context}[:amount]")
        Hearth::Validator.validate!(input[:frequency], ::String, context: "#{context}[:frequency]")
      end
    end

    class RecurringChargesList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          RecurringCharge.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ReferencedSecurityGroup
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReferencedSecurityGroup, context: context)
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        Hearth::Validator.validate!(input[:peering_status], ::String, context: "#{context}[:peering_status]")
        Hearth::Validator.validate!(input[:user_id], ::String, context: "#{context}[:user_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:vpc_peering_connection_id], ::String, context: "#{context}[:vpc_peering_connection_id]")
      end
    end

    class Region
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Region, context: context)
        Hearth::Validator.validate!(input[:endpoint], ::String, context: "#{context}[:endpoint]")
        Hearth::Validator.validate!(input[:region_name], ::String, context: "#{context}[:region_name]")
        Hearth::Validator.validate!(input[:opt_in_status], ::String, context: "#{context}[:opt_in_status]")
      end
    end

    class RegionList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Region.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class RegionNameStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class RegionNames
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class RegisterImageInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RegisterImageInput, context: context)
        Hearth::Validator.validate!(input[:image_location], ::String, context: "#{context}[:image_location]")
        Hearth::Validator.validate!(input[:architecture], ::String, context: "#{context}[:architecture]")
        BlockDeviceMappingRequestList.validate!(input[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless input[:block_device_mappings].nil?
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ena_support], ::TrueClass, ::FalseClass, context: "#{context}[:ena_support]")
        Hearth::Validator.validate!(input[:kernel_id], ::String, context: "#{context}[:kernel_id]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        BillingProductList.validate!(input[:billing_products], context: "#{context}[:billing_products]") unless input[:billing_products].nil?
        Hearth::Validator.validate!(input[:ramdisk_id], ::String, context: "#{context}[:ramdisk_id]")
        Hearth::Validator.validate!(input[:root_device_name], ::String, context: "#{context}[:root_device_name]")
        Hearth::Validator.validate!(input[:sriov_net_support], ::String, context: "#{context}[:sriov_net_support]")
        Hearth::Validator.validate!(input[:virtualization_type], ::String, context: "#{context}[:virtualization_type]")
        Hearth::Validator.validate!(input[:boot_mode], ::String, context: "#{context}[:boot_mode]")
        Hearth::Validator.validate!(input[:tpm_support], ::String, context: "#{context}[:tpm_support]")
        Hearth::Validator.validate!(input[:uefi_data], ::String, context: "#{context}[:uefi_data]")
      end
    end

    class RegisterImageOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RegisterImageOutput, context: context)
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
      end
    end

    class RegisterInstanceEventNotificationAttributesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RegisterInstanceEventNotificationAttributesInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        RegisterInstanceTagAttributeRequest.validate!(input[:instance_tag_attribute], context: "#{context}[:instance_tag_attribute]") unless input[:instance_tag_attribute].nil?
      end
    end

    class RegisterInstanceEventNotificationAttributesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RegisterInstanceEventNotificationAttributesOutput, context: context)
        InstanceTagNotificationAttribute.validate!(input[:instance_tag_attribute], context: "#{context}[:instance_tag_attribute]") unless input[:instance_tag_attribute].nil?
      end
    end

    class RegisterInstanceTagAttributeRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RegisterInstanceTagAttributeRequest, context: context)
        Hearth::Validator.validate!(input[:include_all_tags_of_instance], ::TrueClass, ::FalseClass, context: "#{context}[:include_all_tags_of_instance]")
        InstanceTagKeySet.validate!(input[:instance_tag_keys], context: "#{context}[:instance_tag_keys]") unless input[:instance_tag_keys].nil?
      end
    end

    class RegisterTransitGatewayMulticastGroupMembersInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RegisterTransitGatewayMulticastGroupMembersInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        Hearth::Validator.validate!(input[:group_ip_address], ::String, context: "#{context}[:group_ip_address]")
        TransitGatewayNetworkInterfaceIdList.validate!(input[:network_interface_ids], context: "#{context}[:network_interface_ids]") unless input[:network_interface_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class RegisterTransitGatewayMulticastGroupMembersOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RegisterTransitGatewayMulticastGroupMembersOutput, context: context)
        TransitGatewayMulticastRegisteredGroupMembers.validate!(input[:registered_multicast_group_members], context: "#{context}[:registered_multicast_group_members]") unless input[:registered_multicast_group_members].nil?
      end
    end

    class RegisterTransitGatewayMulticastGroupSourcesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RegisterTransitGatewayMulticastGroupSourcesInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        Hearth::Validator.validate!(input[:group_ip_address], ::String, context: "#{context}[:group_ip_address]")
        TransitGatewayNetworkInterfaceIdList.validate!(input[:network_interface_ids], context: "#{context}[:network_interface_ids]") unless input[:network_interface_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class RegisterTransitGatewayMulticastGroupSourcesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RegisterTransitGatewayMulticastGroupSourcesOutput, context: context)
        TransitGatewayMulticastRegisteredGroupSources.validate!(input[:registered_multicast_group_sources], context: "#{context}[:registered_multicast_group_sources]") unless input[:registered_multicast_group_sources].nil?
      end
    end

    class RejectTransitGatewayMulticastDomainAssociationsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RejectTransitGatewayMulticastDomainAssociationsInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        ValueStringList.validate!(input[:subnet_ids], context: "#{context}[:subnet_ids]") unless input[:subnet_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class RejectTransitGatewayMulticastDomainAssociationsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RejectTransitGatewayMulticastDomainAssociationsOutput, context: context)
        TransitGatewayMulticastDomainAssociations.validate!(input[:associations], context: "#{context}[:associations]") unless input[:associations].nil?
      end
    end

    class RejectTransitGatewayPeeringAttachmentInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RejectTransitGatewayPeeringAttachmentInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class RejectTransitGatewayPeeringAttachmentOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RejectTransitGatewayPeeringAttachmentOutput, context: context)
        TransitGatewayPeeringAttachment.validate!(input[:transit_gateway_peering_attachment], context: "#{context}[:transit_gateway_peering_attachment]") unless input[:transit_gateway_peering_attachment].nil?
      end
    end

    class RejectTransitGatewayVpcAttachmentInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RejectTransitGatewayVpcAttachmentInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class RejectTransitGatewayVpcAttachmentOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RejectTransitGatewayVpcAttachmentOutput, context: context)
        TransitGatewayVpcAttachment.validate!(input[:transit_gateway_vpc_attachment], context: "#{context}[:transit_gateway_vpc_attachment]") unless input[:transit_gateway_vpc_attachment].nil?
      end
    end

    class RejectVpcEndpointConnectionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RejectVpcEndpointConnectionsInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:service_id], ::String, context: "#{context}[:service_id]")
        VpcEndpointIdList.validate!(input[:vpc_endpoint_ids], context: "#{context}[:vpc_endpoint_ids]") unless input[:vpc_endpoint_ids].nil?
      end
    end

    class RejectVpcEndpointConnectionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RejectVpcEndpointConnectionsOutput, context: context)
        UnsuccessfulItemSet.validate!(input[:unsuccessful], context: "#{context}[:unsuccessful]") unless input[:unsuccessful].nil?
      end
    end

    class RejectVpcPeeringConnectionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RejectVpcPeeringConnectionInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:vpc_peering_connection_id], ::String, context: "#{context}[:vpc_peering_connection_id]")
      end
    end

    class RejectVpcPeeringConnectionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RejectVpcPeeringConnectionOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ReleaseAddressInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReleaseAddressInput, context: context)
        Hearth::Validator.validate!(input[:allocation_id], ::String, context: "#{context}[:allocation_id]")
        Hearth::Validator.validate!(input[:public_ip], ::String, context: "#{context}[:public_ip]")
        Hearth::Validator.validate!(input[:network_border_group], ::String, context: "#{context}[:network_border_group]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ReleaseAddressOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReleaseAddressOutput, context: context)
      end
    end

    class ReleaseHostsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReleaseHostsInput, context: context)
        RequestHostIdList.validate!(input[:host_ids], context: "#{context}[:host_ids]") unless input[:host_ids].nil?
      end
    end

    class ReleaseHostsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReleaseHostsOutput, context: context)
        ResponseHostIdList.validate!(input[:successful], context: "#{context}[:successful]") unless input[:successful].nil?
        UnsuccessfulItemList.validate!(input[:unsuccessful], context: "#{context}[:unsuccessful]") unless input[:unsuccessful].nil?
      end
    end

    class ReleaseIpamPoolAllocationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReleaseIpamPoolAllocationInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ipam_pool_id], ::String, context: "#{context}[:ipam_pool_id]")
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:ipam_pool_allocation_id], ::String, context: "#{context}[:ipam_pool_allocation_id]")
      end
    end

    class ReleaseIpamPoolAllocationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReleaseIpamPoolAllocationOutput, context: context)
        Hearth::Validator.validate!(input[:success], ::TrueClass, ::FalseClass, context: "#{context}[:success]")
      end
    end

    class RemoveIpamOperatingRegion
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RemoveIpamOperatingRegion, context: context)
        Hearth::Validator.validate!(input[:region_name], ::String, context: "#{context}[:region_name]")
      end
    end

    class RemoveIpamOperatingRegionSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          RemoveIpamOperatingRegion.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class RemovePrefixListEntries
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          RemovePrefixListEntry.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class RemovePrefixListEntry
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RemovePrefixListEntry, context: context)
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
      end
    end

    class ReplaceIamInstanceProfileAssociationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReplaceIamInstanceProfileAssociationInput, context: context)
        IamInstanceProfileSpecification.validate!(input[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless input[:iam_instance_profile].nil?
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
      end
    end

    class ReplaceIamInstanceProfileAssociationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReplaceIamInstanceProfileAssociationOutput, context: context)
        IamInstanceProfileAssociation.validate!(input[:iam_instance_profile_association], context: "#{context}[:iam_instance_profile_association]") unless input[:iam_instance_profile_association].nil?
      end
    end

    class ReplaceNetworkAclAssociationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReplaceNetworkAclAssociationInput, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:network_acl_id], ::String, context: "#{context}[:network_acl_id]")
      end
    end

    class ReplaceNetworkAclAssociationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReplaceNetworkAclAssociationOutput, context: context)
        Hearth::Validator.validate!(input[:new_association_id], ::String, context: "#{context}[:new_association_id]")
      end
    end

    class ReplaceNetworkAclEntryInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReplaceNetworkAclEntryInput, context: context)
        Hearth::Validator.validate!(input[:cidr_block], ::String, context: "#{context}[:cidr_block]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:egress], ::TrueClass, ::FalseClass, context: "#{context}[:egress]")
        IcmpTypeCode.validate!(input[:icmp_type_code], context: "#{context}[:icmp_type_code]") unless input[:icmp_type_code].nil?
        Hearth::Validator.validate!(input[:ipv6_cidr_block], ::String, context: "#{context}[:ipv6_cidr_block]")
        Hearth::Validator.validate!(input[:network_acl_id], ::String, context: "#{context}[:network_acl_id]")
        PortRange.validate!(input[:port_range], context: "#{context}[:port_range]") unless input[:port_range].nil?
        Hearth::Validator.validate!(input[:protocol], ::String, context: "#{context}[:protocol]")
        Hearth::Validator.validate!(input[:rule_action], ::String, context: "#{context}[:rule_action]")
        Hearth::Validator.validate!(input[:rule_number], ::Integer, context: "#{context}[:rule_number]")
      end
    end

    class ReplaceNetworkAclEntryOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReplaceNetworkAclEntryOutput, context: context)
      end
    end

    class ReplaceRootVolumeTask
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReplaceRootVolumeTask, context: context)
        Hearth::Validator.validate!(input[:replace_root_volume_task_id], ::String, context: "#{context}[:replace_root_volume_task_id]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:task_state], ::String, context: "#{context}[:task_state]")
        Hearth::Validator.validate!(input[:start_time], ::String, context: "#{context}[:start_time]")
        Hearth::Validator.validate!(input[:complete_time], ::String, context: "#{context}[:complete_time]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class ReplaceRootVolumeTaskIds
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ReplaceRootVolumeTasks
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ReplaceRootVolumeTask.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ReplaceRouteInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReplaceRouteInput, context: context)
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:destination_ipv6_cidr_block], ::String, context: "#{context}[:destination_ipv6_cidr_block]")
        Hearth::Validator.validate!(input[:destination_prefix_list_id], ::String, context: "#{context}[:destination_prefix_list_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:vpc_endpoint_id], ::String, context: "#{context}[:vpc_endpoint_id]")
        Hearth::Validator.validate!(input[:egress_only_internet_gateway_id], ::String, context: "#{context}[:egress_only_internet_gateway_id]")
        Hearth::Validator.validate!(input[:gateway_id], ::String, context: "#{context}[:gateway_id]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:local_target], ::TrueClass, ::FalseClass, context: "#{context}[:local_target]")
        Hearth::Validator.validate!(input[:nat_gateway_id], ::String, context: "#{context}[:nat_gateway_id]")
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:local_gateway_id], ::String, context: "#{context}[:local_gateway_id]")
        Hearth::Validator.validate!(input[:carrier_gateway_id], ::String, context: "#{context}[:carrier_gateway_id]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:route_table_id], ::String, context: "#{context}[:route_table_id]")
        Hearth::Validator.validate!(input[:vpc_peering_connection_id], ::String, context: "#{context}[:vpc_peering_connection_id]")
        Hearth::Validator.validate!(input[:core_network_arn], ::String, context: "#{context}[:core_network_arn]")
      end
    end

    class ReplaceRouteOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReplaceRouteOutput, context: context)
      end
    end

    class ReplaceRouteTableAssociationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReplaceRouteTableAssociationInput, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:route_table_id], ::String, context: "#{context}[:route_table_id]")
      end
    end

    class ReplaceRouteTableAssociationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReplaceRouteTableAssociationOutput, context: context)
        Hearth::Validator.validate!(input[:new_association_id], ::String, context: "#{context}[:new_association_id]")
        RouteTableAssociationState.validate!(input[:association_state], context: "#{context}[:association_state]") unless input[:association_state].nil?
      end
    end

    class ReplaceTransitGatewayRouteInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReplaceTransitGatewayRouteInput, context: context)
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:blackhole], ::TrueClass, ::FalseClass, context: "#{context}[:blackhole]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ReplaceTransitGatewayRouteOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReplaceTransitGatewayRouteOutput, context: context)
        TransitGatewayRoute.validate!(input[:route], context: "#{context}[:route]") unless input[:route].nil?
      end
    end

    class ReportInstanceStatusInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReportInstanceStatusInput, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:end_time], ::Time, context: "#{context}[:end_time]")
        InstanceIdStringList.validate!(input[:instances], context: "#{context}[:instances]") unless input[:instances].nil?
        ReasonCodesList.validate!(input[:reason_codes], context: "#{context}[:reason_codes]") unless input[:reason_codes].nil?
        Hearth::Validator.validate!(input[:start_time], ::Time, context: "#{context}[:start_time]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
      end
    end

    class ReportInstanceStatusOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReportInstanceStatusOutput, context: context)
      end
    end

    class RequestHostIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class RequestHostIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class RequestInstanceTypeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class RequestIpamResourceTag
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RequestIpamResourceTag, context: context)
        Hearth::Validator.validate!(input[:key], ::String, context: "#{context}[:key]")
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class RequestIpamResourceTagList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          RequestIpamResourceTag.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class RequestLaunchTemplateData
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RequestLaunchTemplateData, context: context)
        Hearth::Validator.validate!(input[:kernel_id], ::String, context: "#{context}[:kernel_id]")
        Hearth::Validator.validate!(input[:ebs_optimized], ::TrueClass, ::FalseClass, context: "#{context}[:ebs_optimized]")
        LaunchTemplateIamInstanceProfileSpecificationRequest.validate!(input[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless input[:iam_instance_profile].nil?
        LaunchTemplateBlockDeviceMappingRequestList.validate!(input[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless input[:block_device_mappings].nil?
        LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList.validate!(input[:network_interfaces], context: "#{context}[:network_interfaces]") unless input[:network_interfaces].nil?
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:key_name], ::String, context: "#{context}[:key_name]")
        LaunchTemplatesMonitoringRequest.validate!(input[:monitoring], context: "#{context}[:monitoring]") unless input[:monitoring].nil?
        LaunchTemplatePlacementRequest.validate!(input[:placement], context: "#{context}[:placement]") unless input[:placement].nil?
        Hearth::Validator.validate!(input[:ram_disk_id], ::String, context: "#{context}[:ram_disk_id]")
        Hearth::Validator.validate!(input[:disable_api_termination], ::TrueClass, ::FalseClass, context: "#{context}[:disable_api_termination]")
        Hearth::Validator.validate!(input[:instance_initiated_shutdown_behavior], ::String, context: "#{context}[:instance_initiated_shutdown_behavior]")
        Hearth::Validator.validate!(input[:user_data], ::String, context: "#{context}[:user_data]")
        LaunchTemplateTagSpecificationRequestList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        ElasticGpuSpecificationList.validate!(input[:elastic_gpu_specifications], context: "#{context}[:elastic_gpu_specifications]") unless input[:elastic_gpu_specifications].nil?
        LaunchTemplateElasticInferenceAcceleratorList.validate!(input[:elastic_inference_accelerators], context: "#{context}[:elastic_inference_accelerators]") unless input[:elastic_inference_accelerators].nil?
        SecurityGroupIdStringList.validate!(input[:security_group_ids], context: "#{context}[:security_group_ids]") unless input[:security_group_ids].nil?
        SecurityGroupStringList.validate!(input[:security_groups], context: "#{context}[:security_groups]") unless input[:security_groups].nil?
        LaunchTemplateInstanceMarketOptionsRequest.validate!(input[:instance_market_options], context: "#{context}[:instance_market_options]") unless input[:instance_market_options].nil?
        CreditSpecificationRequest.validate!(input[:credit_specification], context: "#{context}[:credit_specification]") unless input[:credit_specification].nil?
        LaunchTemplateCpuOptionsRequest.validate!(input[:cpu_options], context: "#{context}[:cpu_options]") unless input[:cpu_options].nil?
        LaunchTemplateCapacityReservationSpecificationRequest.validate!(input[:capacity_reservation_specification], context: "#{context}[:capacity_reservation_specification]") unless input[:capacity_reservation_specification].nil?
        LaunchTemplateLicenseSpecificationListRequest.validate!(input[:license_specifications], context: "#{context}[:license_specifications]") unless input[:license_specifications].nil?
        LaunchTemplateHibernationOptionsRequest.validate!(input[:hibernation_options], context: "#{context}[:hibernation_options]") unless input[:hibernation_options].nil?
        LaunchTemplateInstanceMetadataOptionsRequest.validate!(input[:metadata_options], context: "#{context}[:metadata_options]") unless input[:metadata_options].nil?
        LaunchTemplateEnclaveOptionsRequest.validate!(input[:enclave_options], context: "#{context}[:enclave_options]") unless input[:enclave_options].nil?
        InstanceRequirementsRequest.validate!(input[:instance_requirements], context: "#{context}[:instance_requirements]") unless input[:instance_requirements].nil?
        LaunchTemplatePrivateDnsNameOptionsRequest.validate!(input[:private_dns_name_options], context: "#{context}[:private_dns_name_options]") unless input[:private_dns_name_options].nil?
        LaunchTemplateInstanceMaintenanceOptionsRequest.validate!(input[:maintenance_options], context: "#{context}[:maintenance_options]") unless input[:maintenance_options].nil?
        Hearth::Validator.validate!(input[:disable_api_stop], ::TrueClass, ::FalseClass, context: "#{context}[:disable_api_stop]")
      end
    end

    class RequestSpotFleetInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RequestSpotFleetInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        SpotFleetRequestConfigData.validate!(input[:spot_fleet_request_config], context: "#{context}[:spot_fleet_request_config]") unless input[:spot_fleet_request_config].nil?
      end
    end

    class RequestSpotFleetOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RequestSpotFleetOutput, context: context)
        Hearth::Validator.validate!(input[:spot_fleet_request_id], ::String, context: "#{context}[:spot_fleet_request_id]")
      end
    end

    class RequestSpotInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RequestSpotInstancesInput, context: context)
        Hearth::Validator.validate!(input[:availability_zone_group], ::String, context: "#{context}[:availability_zone_group]")
        Hearth::Validator.validate!(input[:block_duration_minutes], ::Integer, context: "#{context}[:block_duration_minutes]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_count], ::Integer, context: "#{context}[:instance_count]")
        Hearth::Validator.validate!(input[:launch_group], ::String, context: "#{context}[:launch_group]")
        RequestSpotLaunchSpecification.validate!(input[:launch_specification], context: "#{context}[:launch_specification]") unless input[:launch_specification].nil?
        Hearth::Validator.validate!(input[:spot_price], ::String, context: "#{context}[:spot_price]")
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:valid_from], ::Time, context: "#{context}[:valid_from]")
        Hearth::Validator.validate!(input[:valid_until], ::Time, context: "#{context}[:valid_until]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:instance_interruption_behavior], ::String, context: "#{context}[:instance_interruption_behavior]")
      end
    end

    class RequestSpotInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RequestSpotInstancesOutput, context: context)
        SpotInstanceRequestList.validate!(input[:spot_instance_requests], context: "#{context}[:spot_instance_requests]") unless input[:spot_instance_requests].nil?
      end
    end

    class RequestSpotLaunchSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RequestSpotLaunchSpecification, context: context)
        RequestSpotLaunchSpecificationSecurityGroupIdList.validate!(input[:security_group_ids], context: "#{context}[:security_group_ids]") unless input[:security_group_ids].nil?
        RequestSpotLaunchSpecificationSecurityGroupList.validate!(input[:security_groups], context: "#{context}[:security_groups]") unless input[:security_groups].nil?
        Hearth::Validator.validate!(input[:addressing_type], ::String, context: "#{context}[:addressing_type]")
        BlockDeviceMappingList.validate!(input[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless input[:block_device_mappings].nil?
        Hearth::Validator.validate!(input[:ebs_optimized], ::TrueClass, ::FalseClass, context: "#{context}[:ebs_optimized]")
        IamInstanceProfileSpecification.validate!(input[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless input[:iam_instance_profile].nil?
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:kernel_id], ::String, context: "#{context}[:kernel_id]")
        Hearth::Validator.validate!(input[:key_name], ::String, context: "#{context}[:key_name]")
        RunInstancesMonitoringEnabled.validate!(input[:monitoring], context: "#{context}[:monitoring]") unless input[:monitoring].nil?
        InstanceNetworkInterfaceSpecificationList.validate!(input[:network_interfaces], context: "#{context}[:network_interfaces]") unless input[:network_interfaces].nil?
        SpotPlacement.validate!(input[:placement], context: "#{context}[:placement]") unless input[:placement].nil?
        Hearth::Validator.validate!(input[:ramdisk_id], ::String, context: "#{context}[:ramdisk_id]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:user_data], ::String, context: "#{context}[:user_data]")
      end
    end

    class RequestSpotLaunchSpecificationSecurityGroupIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class RequestSpotLaunchSpecificationSecurityGroupList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class Reservation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Reservation, context: context)
        GroupIdentifierList.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        InstanceList.validate!(input[:instances], context: "#{context}[:instances]") unless input[:instances].nil?
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:requester_id], ::String, context: "#{context}[:requester_id]")
        Hearth::Validator.validate!(input[:reservation_id], ::String, context: "#{context}[:reservation_id]")
      end
    end

    class ReservationFleetInstanceSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReservationFleetInstanceSpecification, context: context)
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:instance_platform], ::String, context: "#{context}[:instance_platform]")
        Hearth::Validator.validate!(input[:weight], ::Float, context: "#{context}[:weight]")
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:availability_zone_id], ::String, context: "#{context}[:availability_zone_id]")
        Hearth::Validator.validate!(input[:ebs_optimized], ::TrueClass, ::FalseClass, context: "#{context}[:ebs_optimized]")
        Hearth::Validator.validate!(input[:priority], ::Integer, context: "#{context}[:priority]")
      end
    end

    class ReservationFleetInstanceSpecificationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ReservationFleetInstanceSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ReservationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Reservation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ReservationValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReservationValue, context: context)
        Hearth::Validator.validate!(input[:hourly_price], ::String, context: "#{context}[:hourly_price]")
        Hearth::Validator.validate!(input[:remaining_total_value], ::String, context: "#{context}[:remaining_total_value]")
        Hearth::Validator.validate!(input[:remaining_upfront_value], ::String, context: "#{context}[:remaining_upfront_value]")
      end
    end

    class ReservedInstanceIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ReservedInstanceLimitPrice
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReservedInstanceLimitPrice, context: context)
        Hearth::Validator.validate!(input[:amount], ::Float, context: "#{context}[:amount]")
        Hearth::Validator.validate!(input[:currency_code], ::String, context: "#{context}[:currency_code]")
      end
    end

    class ReservedInstanceReservationValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReservedInstanceReservationValue, context: context)
        ReservationValue.validate!(input[:reservation_value], context: "#{context}[:reservation_value]") unless input[:reservation_value].nil?
        Hearth::Validator.validate!(input[:reserved_instance_id], ::String, context: "#{context}[:reserved_instance_id]")
      end
    end

    class ReservedInstanceReservationValueSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ReservedInstanceReservationValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ReservedInstances
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReservedInstances, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:duration], ::Integer, context: "#{context}[:duration]")
        Hearth::Validator.validate!(input[:end], ::Time, context: "#{context}[:end]")
        Hearth::Validator.validate!(input[:fixed_price], ::Float, context: "#{context}[:fixed_price]")
        Hearth::Validator.validate!(input[:instance_count], ::Integer, context: "#{context}[:instance_count]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:product_description], ::String, context: "#{context}[:product_description]")
        Hearth::Validator.validate!(input[:reserved_instances_id], ::String, context: "#{context}[:reserved_instances_id]")
        Hearth::Validator.validate!(input[:start], ::Time, context: "#{context}[:start]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:usage_price], ::Float, context: "#{context}[:usage_price]")
        Hearth::Validator.validate!(input[:currency_code], ::String, context: "#{context}[:currency_code]")
        Hearth::Validator.validate!(input[:instance_tenancy], ::String, context: "#{context}[:instance_tenancy]")
        Hearth::Validator.validate!(input[:offering_class], ::String, context: "#{context}[:offering_class]")
        Hearth::Validator.validate!(input[:offering_type], ::String, context: "#{context}[:offering_type]")
        RecurringChargesList.validate!(input[:recurring_charges], context: "#{context}[:recurring_charges]") unless input[:recurring_charges].nil?
        Hearth::Validator.validate!(input[:scope], ::String, context: "#{context}[:scope]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class ReservedInstancesConfiguration
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReservedInstancesConfiguration, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:instance_count], ::Integer, context: "#{context}[:instance_count]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:platform], ::String, context: "#{context}[:platform]")
        Hearth::Validator.validate!(input[:scope], ::String, context: "#{context}[:scope]")
      end
    end

    class ReservedInstancesConfigurationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ReservedInstancesConfiguration.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ReservedInstancesId
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReservedInstancesId, context: context)
        Hearth::Validator.validate!(input[:reserved_instances_id], ::String, context: "#{context}[:reserved_instances_id]")
      end
    end

    class ReservedInstancesIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ReservedInstancesList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ReservedInstances.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ReservedInstancesListing
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReservedInstancesListing, context: context)
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:create_date], ::Time, context: "#{context}[:create_date]")
        InstanceCountList.validate!(input[:instance_counts], context: "#{context}[:instance_counts]") unless input[:instance_counts].nil?
        PriceScheduleList.validate!(input[:price_schedules], context: "#{context}[:price_schedules]") unless input[:price_schedules].nil?
        Hearth::Validator.validate!(input[:reserved_instances_id], ::String, context: "#{context}[:reserved_instances_id]")
        Hearth::Validator.validate!(input[:reserved_instances_listing_id], ::String, context: "#{context}[:reserved_instances_listing_id]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:update_date], ::Time, context: "#{context}[:update_date]")
      end
    end

    class ReservedInstancesListingList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ReservedInstancesListing.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ReservedInstancesModification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReservedInstancesModification, context: context)
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:create_date], ::Time, context: "#{context}[:create_date]")
        Hearth::Validator.validate!(input[:effective_date], ::Time, context: "#{context}[:effective_date]")
        ReservedInstancesModificationResultList.validate!(input[:modification_results], context: "#{context}[:modification_results]") unless input[:modification_results].nil?
        ReservedIntancesIds.validate!(input[:reserved_instances_ids], context: "#{context}[:reserved_instances_ids]") unless input[:reserved_instances_ids].nil?
        Hearth::Validator.validate!(input[:reserved_instances_modification_id], ::String, context: "#{context}[:reserved_instances_modification_id]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        Hearth::Validator.validate!(input[:update_date], ::Time, context: "#{context}[:update_date]")
      end
    end

    class ReservedInstancesModificationIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ReservedInstancesModificationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ReservedInstancesModification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ReservedInstancesModificationResult
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReservedInstancesModificationResult, context: context)
        Hearth::Validator.validate!(input[:reserved_instances_id], ::String, context: "#{context}[:reserved_instances_id]")
        ReservedInstancesConfiguration.validate!(input[:target_configuration], context: "#{context}[:target_configuration]") unless input[:target_configuration].nil?
      end
    end

    class ReservedInstancesModificationResultList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ReservedInstancesModificationResult.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ReservedInstancesOffering
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ReservedInstancesOffering, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:duration], ::Integer, context: "#{context}[:duration]")
        Hearth::Validator.validate!(input[:fixed_price], ::Float, context: "#{context}[:fixed_price]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:product_description], ::String, context: "#{context}[:product_description]")
        Hearth::Validator.validate!(input[:reserved_instances_offering_id], ::String, context: "#{context}[:reserved_instances_offering_id]")
        Hearth::Validator.validate!(input[:usage_price], ::Float, context: "#{context}[:usage_price]")
        Hearth::Validator.validate!(input[:currency_code], ::String, context: "#{context}[:currency_code]")
        Hearth::Validator.validate!(input[:instance_tenancy], ::String, context: "#{context}[:instance_tenancy]")
        Hearth::Validator.validate!(input[:marketplace], ::TrueClass, ::FalseClass, context: "#{context}[:marketplace]")
        Hearth::Validator.validate!(input[:offering_class], ::String, context: "#{context}[:offering_class]")
        Hearth::Validator.validate!(input[:offering_type], ::String, context: "#{context}[:offering_type]")
        PricingDetailsList.validate!(input[:pricing_details], context: "#{context}[:pricing_details]") unless input[:pricing_details].nil?
        RecurringChargesList.validate!(input[:recurring_charges], context: "#{context}[:recurring_charges]") unless input[:recurring_charges].nil?
        Hearth::Validator.validate!(input[:scope], ::String, context: "#{context}[:scope]")
      end
    end

    class ReservedInstancesOfferingIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ReservedInstancesOfferingList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ReservedInstancesOffering.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ReservedIntancesIds
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ReservedInstancesId.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ResetAddressAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResetAddressAttributeInput, context: context)
        Hearth::Validator.validate!(input[:allocation_id], ::String, context: "#{context}[:allocation_id]")
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ResetAddressAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResetAddressAttributeOutput, context: context)
        AddressAttribute.validate!(input[:address], context: "#{context}[:address]") unless input[:address].nil?
      end
    end

    class ResetEbsDefaultKmsKeyIdInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResetEbsDefaultKmsKeyIdInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ResetEbsDefaultKmsKeyIdOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResetEbsDefaultKmsKeyIdOutput, context: context)
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
      end
    end

    class ResetFpgaImageAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResetFpgaImageAttributeInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:fpga_image_id], ::String, context: "#{context}[:fpga_image_id]")
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
      end
    end

    class ResetFpgaImageAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResetFpgaImageAttributeOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class ResetImageAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResetImageAttributeInput, context: context)
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ResetImageAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResetImageAttributeOutput, context: context)
      end
    end

    class ResetInstanceAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResetInstanceAttributeInput, context: context)
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
      end
    end

    class ResetInstanceAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResetInstanceAttributeOutput, context: context)
      end
    end

    class ResetNetworkInterfaceAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResetNetworkInterfaceAttributeInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:source_dest_check], ::String, context: "#{context}[:source_dest_check]")
      end
    end

    class ResetNetworkInterfaceAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResetNetworkInterfaceAttributeOutput, context: context)
      end
    end

    class ResetSnapshotAttributeInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResetSnapshotAttributeInput, context: context)
        Hearth::Validator.validate!(input[:attribute], ::String, context: "#{context}[:attribute]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class ResetSnapshotAttributeOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResetSnapshotAttributeOutput, context: context)
      end
    end

    class ResourceIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ResourceList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ResourceStatement
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResourceStatement, context: context)
        ValueStringList.validate!(input[:resources], context: "#{context}[:resources]") unless input[:resources].nil?
        ValueStringList.validate!(input[:resource_types], context: "#{context}[:resource_types]") unless input[:resource_types].nil?
      end
    end

    class ResourceStatementRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResourceStatementRequest, context: context)
        ValueStringList.validate!(input[:resources], context: "#{context}[:resources]") unless input[:resources].nil?
        ValueStringList.validate!(input[:resource_types], context: "#{context}[:resource_types]") unless input[:resource_types].nil?
      end
    end

    class ResponseError
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResponseError, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class ResponseHostIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ResponseHostIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ResponseLaunchTemplateData
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ResponseLaunchTemplateData, context: context)
        Hearth::Validator.validate!(input[:kernel_id], ::String, context: "#{context}[:kernel_id]")
        Hearth::Validator.validate!(input[:ebs_optimized], ::TrueClass, ::FalseClass, context: "#{context}[:ebs_optimized]")
        LaunchTemplateIamInstanceProfileSpecification.validate!(input[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless input[:iam_instance_profile].nil?
        LaunchTemplateBlockDeviceMappingList.validate!(input[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless input[:block_device_mappings].nil?
        LaunchTemplateInstanceNetworkInterfaceSpecificationList.validate!(input[:network_interfaces], context: "#{context}[:network_interfaces]") unless input[:network_interfaces].nil?
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:key_name], ::String, context: "#{context}[:key_name]")
        LaunchTemplatesMonitoring.validate!(input[:monitoring], context: "#{context}[:monitoring]") unless input[:monitoring].nil?
        LaunchTemplatePlacement.validate!(input[:placement], context: "#{context}[:placement]") unless input[:placement].nil?
        Hearth::Validator.validate!(input[:ram_disk_id], ::String, context: "#{context}[:ram_disk_id]")
        Hearth::Validator.validate!(input[:disable_api_termination], ::TrueClass, ::FalseClass, context: "#{context}[:disable_api_termination]")
        Hearth::Validator.validate!(input[:instance_initiated_shutdown_behavior], ::String, context: "#{context}[:instance_initiated_shutdown_behavior]")
        Hearth::Validator.validate!(input[:user_data], ::String, context: "#{context}[:user_data]")
        LaunchTemplateTagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        ElasticGpuSpecificationResponseList.validate!(input[:elastic_gpu_specifications], context: "#{context}[:elastic_gpu_specifications]") unless input[:elastic_gpu_specifications].nil?
        LaunchTemplateElasticInferenceAcceleratorResponseList.validate!(input[:elastic_inference_accelerators], context: "#{context}[:elastic_inference_accelerators]") unless input[:elastic_inference_accelerators].nil?
        ValueStringList.validate!(input[:security_group_ids], context: "#{context}[:security_group_ids]") unless input[:security_group_ids].nil?
        ValueStringList.validate!(input[:security_groups], context: "#{context}[:security_groups]") unless input[:security_groups].nil?
        LaunchTemplateInstanceMarketOptions.validate!(input[:instance_market_options], context: "#{context}[:instance_market_options]") unless input[:instance_market_options].nil?
        CreditSpecification.validate!(input[:credit_specification], context: "#{context}[:credit_specification]") unless input[:credit_specification].nil?
        LaunchTemplateCpuOptions.validate!(input[:cpu_options], context: "#{context}[:cpu_options]") unless input[:cpu_options].nil?
        LaunchTemplateCapacityReservationSpecificationResponse.validate!(input[:capacity_reservation_specification], context: "#{context}[:capacity_reservation_specification]") unless input[:capacity_reservation_specification].nil?
        LaunchTemplateLicenseList.validate!(input[:license_specifications], context: "#{context}[:license_specifications]") unless input[:license_specifications].nil?
        LaunchTemplateHibernationOptions.validate!(input[:hibernation_options], context: "#{context}[:hibernation_options]") unless input[:hibernation_options].nil?
        LaunchTemplateInstanceMetadataOptions.validate!(input[:metadata_options], context: "#{context}[:metadata_options]") unless input[:metadata_options].nil?
        LaunchTemplateEnclaveOptions.validate!(input[:enclave_options], context: "#{context}[:enclave_options]") unless input[:enclave_options].nil?
        InstanceRequirements.validate!(input[:instance_requirements], context: "#{context}[:instance_requirements]") unless input[:instance_requirements].nil?
        LaunchTemplatePrivateDnsNameOptions.validate!(input[:private_dns_name_options], context: "#{context}[:private_dns_name_options]") unless input[:private_dns_name_options].nil?
        LaunchTemplateInstanceMaintenanceOptions.validate!(input[:maintenance_options], context: "#{context}[:maintenance_options]") unless input[:maintenance_options].nil?
        Hearth::Validator.validate!(input[:disable_api_stop], ::TrueClass, ::FalseClass, context: "#{context}[:disable_api_stop]")
      end
    end

    class RestorableByStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class RestoreAddressToClassicInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RestoreAddressToClassicInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:public_ip], ::String, context: "#{context}[:public_ip]")
      end
    end

    class RestoreAddressToClassicOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RestoreAddressToClassicOutput, context: context)
        Hearth::Validator.validate!(input[:public_ip], ::String, context: "#{context}[:public_ip]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
      end
    end

    class RestoreImageFromRecycleBinInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RestoreImageFromRecycleBinInput, context: context)
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class RestoreImageFromRecycleBinOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RestoreImageFromRecycleBinOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class RestoreManagedPrefixListVersionInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RestoreManagedPrefixListVersionInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
        Hearth::Validator.validate!(input[:previous_version], ::Integer, context: "#{context}[:previous_version]")
        Hearth::Validator.validate!(input[:current_version], ::Integer, context: "#{context}[:current_version]")
      end
    end

    class RestoreManagedPrefixListVersionOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RestoreManagedPrefixListVersionOutput, context: context)
        ManagedPrefixList.validate!(input[:prefix_list], context: "#{context}[:prefix_list]") unless input[:prefix_list].nil?
      end
    end

    class RestoreSnapshotFromRecycleBinInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RestoreSnapshotFromRecycleBinInput, context: context)
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class RestoreSnapshotFromRecycleBinOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RestoreSnapshotFromRecycleBinOutput, context: context)
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:progress], ::String, context: "#{context}[:progress]")
        Hearth::Validator.validate!(input[:start_time], ::Time, context: "#{context}[:start_time]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:volume_size], ::Integer, context: "#{context}[:volume_size]")
      end
    end

    class RestoreSnapshotTierInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RestoreSnapshotTierInput, context: context)
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:temporary_restore_days], ::Integer, context: "#{context}[:temporary_restore_days]")
        Hearth::Validator.validate!(input[:permanent_restore], ::TrueClass, ::FalseClass, context: "#{context}[:permanent_restore]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class RestoreSnapshotTierOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RestoreSnapshotTierOutput, context: context)
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:restore_start_time], ::Time, context: "#{context}[:restore_start_time]")
        Hearth::Validator.validate!(input[:restore_duration], ::Integer, context: "#{context}[:restore_duration]")
        Hearth::Validator.validate!(input[:is_permanent_restore], ::TrueClass, ::FalseClass, context: "#{context}[:is_permanent_restore]")
      end
    end

    class RevokeClientVpnIngressInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RevokeClientVpnIngressInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:target_network_cidr], ::String, context: "#{context}[:target_network_cidr]")
        Hearth::Validator.validate!(input[:access_group_id], ::String, context: "#{context}[:access_group_id]")
        Hearth::Validator.validate!(input[:revoke_all_groups], ::TrueClass, ::FalseClass, context: "#{context}[:revoke_all_groups]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class RevokeClientVpnIngressOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RevokeClientVpnIngressOutput, context: context)
        ClientVpnAuthorizationRuleStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
      end
    end

    class RevokeSecurityGroupEgressInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RevokeSecurityGroupEgressInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        IpPermissionList.validate!(input[:ip_permissions], context: "#{context}[:ip_permissions]") unless input[:ip_permissions].nil?
        SecurityGroupRuleIdList.validate!(input[:security_group_rule_ids], context: "#{context}[:security_group_rule_ids]") unless input[:security_group_rule_ids].nil?
        Hearth::Validator.validate!(input[:cidr_ip], ::String, context: "#{context}[:cidr_ip]")
        Hearth::Validator.validate!(input[:from_port], ::Integer, context: "#{context}[:from_port]")
        Hearth::Validator.validate!(input[:ip_protocol], ::String, context: "#{context}[:ip_protocol]")
        Hearth::Validator.validate!(input[:to_port], ::Integer, context: "#{context}[:to_port]")
        Hearth::Validator.validate!(input[:source_security_group_name], ::String, context: "#{context}[:source_security_group_name]")
        Hearth::Validator.validate!(input[:source_security_group_owner_id], ::String, context: "#{context}[:source_security_group_owner_id]")
      end
    end

    class RevokeSecurityGroupEgressOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RevokeSecurityGroupEgressOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
        IpPermissionList.validate!(input[:unknown_ip_permissions], context: "#{context}[:unknown_ip_permissions]") unless input[:unknown_ip_permissions].nil?
      end
    end

    class RevokeSecurityGroupIngressInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RevokeSecurityGroupIngressInput, context: context)
        Hearth::Validator.validate!(input[:cidr_ip], ::String, context: "#{context}[:cidr_ip]")
        Hearth::Validator.validate!(input[:from_port], ::Integer, context: "#{context}[:from_port]")
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        IpPermissionList.validate!(input[:ip_permissions], context: "#{context}[:ip_permissions]") unless input[:ip_permissions].nil?
        Hearth::Validator.validate!(input[:ip_protocol], ::String, context: "#{context}[:ip_protocol]")
        Hearth::Validator.validate!(input[:source_security_group_name], ::String, context: "#{context}[:source_security_group_name]")
        Hearth::Validator.validate!(input[:source_security_group_owner_id], ::String, context: "#{context}[:source_security_group_owner_id]")
        Hearth::Validator.validate!(input[:to_port], ::Integer, context: "#{context}[:to_port]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        SecurityGroupRuleIdList.validate!(input[:security_group_rule_ids], context: "#{context}[:security_group_rule_ids]") unless input[:security_group_rule_ids].nil?
      end
    end

    class RevokeSecurityGroupIngressOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RevokeSecurityGroupIngressOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
        IpPermissionList.validate!(input[:unknown_ip_permissions], context: "#{context}[:unknown_ip_permissions]") unless input[:unknown_ip_permissions].nil?
      end
    end

    class RootDeviceTypeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class Route
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Route, context: context)
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:destination_ipv6_cidr_block], ::String, context: "#{context}[:destination_ipv6_cidr_block]")
        Hearth::Validator.validate!(input[:destination_prefix_list_id], ::String, context: "#{context}[:destination_prefix_list_id]")
        Hearth::Validator.validate!(input[:egress_only_internet_gateway_id], ::String, context: "#{context}[:egress_only_internet_gateway_id]")
        Hearth::Validator.validate!(input[:gateway_id], ::String, context: "#{context}[:gateway_id]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:instance_owner_id], ::String, context: "#{context}[:instance_owner_id]")
        Hearth::Validator.validate!(input[:nat_gateway_id], ::String, context: "#{context}[:nat_gateway_id]")
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:local_gateway_id], ::String, context: "#{context}[:local_gateway_id]")
        Hearth::Validator.validate!(input[:carrier_gateway_id], ::String, context: "#{context}[:carrier_gateway_id]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:origin], ::String, context: "#{context}[:origin]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:vpc_peering_connection_id], ::String, context: "#{context}[:vpc_peering_connection_id]")
        Hearth::Validator.validate!(input[:core_network_arn], ::String, context: "#{context}[:core_network_arn]")
      end
    end

    class RouteList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Route.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class RouteTable
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RouteTable, context: context)
        RouteTableAssociationList.validate!(input[:associations], context: "#{context}[:associations]") unless input[:associations].nil?
        PropagatingVgwList.validate!(input[:propagating_vgws], context: "#{context}[:propagating_vgws]") unless input[:propagating_vgws].nil?
        Hearth::Validator.validate!(input[:route_table_id], ::String, context: "#{context}[:route_table_id]")
        RouteList.validate!(input[:routes], context: "#{context}[:routes]") unless input[:routes].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
      end
    end

    class RouteTableAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RouteTableAssociation, context: context)
        Hearth::Validator.validate!(input[:main], ::TrueClass, ::FalseClass, context: "#{context}[:main]")
        Hearth::Validator.validate!(input[:route_table_association_id], ::String, context: "#{context}[:route_table_association_id]")
        Hearth::Validator.validate!(input[:route_table_id], ::String, context: "#{context}[:route_table_id]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:gateway_id], ::String, context: "#{context}[:gateway_id]")
        RouteTableAssociationState.validate!(input[:association_state], context: "#{context}[:association_state]") unless input[:association_state].nil?
      end
    end

    class RouteTableAssociationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          RouteTableAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class RouteTableAssociationState
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RouteTableAssociationState, context: context)
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
      end
    end

    class RouteTableIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class RouteTableList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          RouteTable.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class RunInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RunInstancesInput, context: context)
        BlockDeviceMappingRequestList.validate!(input[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless input[:block_device_mappings].nil?
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:ipv6_address_count], ::Integer, context: "#{context}[:ipv6_address_count]")
        InstanceIpv6AddressList.validate!(input[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless input[:ipv6_addresses].nil?
        Hearth::Validator.validate!(input[:kernel_id], ::String, context: "#{context}[:kernel_id]")
        Hearth::Validator.validate!(input[:key_name], ::String, context: "#{context}[:key_name]")
        Hearth::Validator.validate!(input[:max_count], ::Integer, context: "#{context}[:max_count]")
        Hearth::Validator.validate!(input[:min_count], ::Integer, context: "#{context}[:min_count]")
        RunInstancesMonitoringEnabled.validate!(input[:monitoring], context: "#{context}[:monitoring]") unless input[:monitoring].nil?
        Placement.validate!(input[:placement], context: "#{context}[:placement]") unless input[:placement].nil?
        Hearth::Validator.validate!(input[:ramdisk_id], ::String, context: "#{context}[:ramdisk_id]")
        SecurityGroupIdStringList.validate!(input[:security_group_ids], context: "#{context}[:security_group_ids]") unless input[:security_group_ids].nil?
        SecurityGroupStringList.validate!(input[:security_groups], context: "#{context}[:security_groups]") unless input[:security_groups].nil?
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:user_data], ::String, context: "#{context}[:user_data]")
        Hearth::Validator.validate!(input[:additional_info], ::String, context: "#{context}[:additional_info]")
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:disable_api_termination], ::TrueClass, ::FalseClass, context: "#{context}[:disable_api_termination]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:ebs_optimized], ::TrueClass, ::FalseClass, context: "#{context}[:ebs_optimized]")
        IamInstanceProfileSpecification.validate!(input[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless input[:iam_instance_profile].nil?
        Hearth::Validator.validate!(input[:instance_initiated_shutdown_behavior], ::String, context: "#{context}[:instance_initiated_shutdown_behavior]")
        InstanceNetworkInterfaceSpecificationList.validate!(input[:network_interfaces], context: "#{context}[:network_interfaces]") unless input[:network_interfaces].nil?
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
        ElasticGpuSpecifications.validate!(input[:elastic_gpu_specification], context: "#{context}[:elastic_gpu_specification]") unless input[:elastic_gpu_specification].nil?
        ElasticInferenceAccelerators.validate!(input[:elastic_inference_accelerators], context: "#{context}[:elastic_inference_accelerators]") unless input[:elastic_inference_accelerators].nil?
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        LaunchTemplateSpecification.validate!(input[:launch_template], context: "#{context}[:launch_template]") unless input[:launch_template].nil?
        InstanceMarketOptionsRequest.validate!(input[:instance_market_options], context: "#{context}[:instance_market_options]") unless input[:instance_market_options].nil?
        CreditSpecificationRequest.validate!(input[:credit_specification], context: "#{context}[:credit_specification]") unless input[:credit_specification].nil?
        CpuOptionsRequest.validate!(input[:cpu_options], context: "#{context}[:cpu_options]") unless input[:cpu_options].nil?
        CapacityReservationSpecification.validate!(input[:capacity_reservation_specification], context: "#{context}[:capacity_reservation_specification]") unless input[:capacity_reservation_specification].nil?
        HibernationOptionsRequest.validate!(input[:hibernation_options], context: "#{context}[:hibernation_options]") unless input[:hibernation_options].nil?
        LicenseSpecificationListRequest.validate!(input[:license_specifications], context: "#{context}[:license_specifications]") unless input[:license_specifications].nil?
        InstanceMetadataOptionsRequest.validate!(input[:metadata_options], context: "#{context}[:metadata_options]") unless input[:metadata_options].nil?
        EnclaveOptionsRequest.validate!(input[:enclave_options], context: "#{context}[:enclave_options]") unless input[:enclave_options].nil?
        PrivateDnsNameOptionsRequest.validate!(input[:private_dns_name_options], context: "#{context}[:private_dns_name_options]") unless input[:private_dns_name_options].nil?
        InstanceMaintenanceOptionsRequest.validate!(input[:maintenance_options], context: "#{context}[:maintenance_options]") unless input[:maintenance_options].nil?
        Hearth::Validator.validate!(input[:disable_api_stop], ::TrueClass, ::FalseClass, context: "#{context}[:disable_api_stop]")
      end
    end

    class RunInstancesMonitoringEnabled
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RunInstancesMonitoringEnabled, context: context)
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
      end
    end

    class RunInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RunInstancesOutput, context: context)
        GroupIdentifierList.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        InstanceList.validate!(input[:instances], context: "#{context}[:instances]") unless input[:instances].nil?
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:requester_id], ::String, context: "#{context}[:requester_id]")
        Hearth::Validator.validate!(input[:reservation_id], ::String, context: "#{context}[:reservation_id]")
      end
    end

    class RunScheduledInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RunScheduledInstancesInput, context: context)
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:instance_count], ::Integer, context: "#{context}[:instance_count]")
        ScheduledInstancesLaunchSpecification.validate!(input[:launch_specification], context: "#{context}[:launch_specification]") unless input[:launch_specification].nil?
        Hearth::Validator.validate!(input[:scheduled_instance_id], ::String, context: "#{context}[:scheduled_instance_id]")
      end
    end

    class RunScheduledInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::RunScheduledInstancesOutput, context: context)
        InstanceIdSet.validate!(input[:instance_id_set], context: "#{context}[:instance_id_set]") unless input[:instance_id_set].nil?
      end
    end

    class S3ObjectTag
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::S3ObjectTag, context: context)
        Hearth::Validator.validate!(input[:key], ::String, context: "#{context}[:key]")
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class S3ObjectTagList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          S3ObjectTag.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class S3Storage
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::S3Storage, context: context)
        Hearth::Validator.validate!(input[:aws_access_key_id], ::String, context: "#{context}[:aws_access_key_id]")
        Hearth::Validator.validate!(input[:bucket], ::String, context: "#{context}[:bucket]")
        Hearth::Validator.validate!(input[:prefix], ::String, context: "#{context}[:prefix]")
        Hearth::Validator.validate!(input[:upload_policy], ::String, context: "#{context}[:upload_policy]")
        Hearth::Validator.validate!(input[:upload_policy_signature], ::String, context: "#{context}[:upload_policy_signature]")
      end
    end

    class ScheduledInstance
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ScheduledInstance, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:create_date], ::Time, context: "#{context}[:create_date]")
        Hearth::Validator.validate!(input[:hourly_price], ::String, context: "#{context}[:hourly_price]")
        Hearth::Validator.validate!(input[:instance_count], ::Integer, context: "#{context}[:instance_count]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:network_platform], ::String, context: "#{context}[:network_platform]")
        Hearth::Validator.validate!(input[:next_slot_start_time], ::Time, context: "#{context}[:next_slot_start_time]")
        Hearth::Validator.validate!(input[:platform], ::String, context: "#{context}[:platform]")
        Hearth::Validator.validate!(input[:previous_slot_end_time], ::Time, context: "#{context}[:previous_slot_end_time]")
        ScheduledInstanceRecurrence.validate!(input[:recurrence], context: "#{context}[:recurrence]") unless input[:recurrence].nil?
        Hearth::Validator.validate!(input[:scheduled_instance_id], ::String, context: "#{context}[:scheduled_instance_id]")
        Hearth::Validator.validate!(input[:slot_duration_in_hours], ::Integer, context: "#{context}[:slot_duration_in_hours]")
        Hearth::Validator.validate!(input[:term_end_date], ::Time, context: "#{context}[:term_end_date]")
        Hearth::Validator.validate!(input[:term_start_date], ::Time, context: "#{context}[:term_start_date]")
        Hearth::Validator.validate!(input[:total_scheduled_instance_hours], ::Integer, context: "#{context}[:total_scheduled_instance_hours]")
      end
    end

    class ScheduledInstanceAvailability
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ScheduledInstanceAvailability, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:available_instance_count], ::Integer, context: "#{context}[:available_instance_count]")
        Hearth::Validator.validate!(input[:first_slot_start_time], ::Time, context: "#{context}[:first_slot_start_time]")
        Hearth::Validator.validate!(input[:hourly_price], ::String, context: "#{context}[:hourly_price]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:max_term_duration_in_days], ::Integer, context: "#{context}[:max_term_duration_in_days]")
        Hearth::Validator.validate!(input[:min_term_duration_in_days], ::Integer, context: "#{context}[:min_term_duration_in_days]")
        Hearth::Validator.validate!(input[:network_platform], ::String, context: "#{context}[:network_platform]")
        Hearth::Validator.validate!(input[:platform], ::String, context: "#{context}[:platform]")
        Hearth::Validator.validate!(input[:purchase_token], ::String, context: "#{context}[:purchase_token]")
        ScheduledInstanceRecurrence.validate!(input[:recurrence], context: "#{context}[:recurrence]") unless input[:recurrence].nil?
        Hearth::Validator.validate!(input[:slot_duration_in_hours], ::Integer, context: "#{context}[:slot_duration_in_hours]")
        Hearth::Validator.validate!(input[:total_scheduled_instance_hours], ::Integer, context: "#{context}[:total_scheduled_instance_hours]")
      end
    end

    class ScheduledInstanceAvailabilitySet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ScheduledInstanceAvailability.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ScheduledInstanceIdRequestSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ScheduledInstanceRecurrence
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ScheduledInstanceRecurrence, context: context)
        Hearth::Validator.validate!(input[:frequency], ::String, context: "#{context}[:frequency]")
        Hearth::Validator.validate!(input[:interval], ::Integer, context: "#{context}[:interval]")
        OccurrenceDaySet.validate!(input[:occurrence_day_set], context: "#{context}[:occurrence_day_set]") unless input[:occurrence_day_set].nil?
        Hearth::Validator.validate!(input[:occurrence_relative_to_end], ::TrueClass, ::FalseClass, context: "#{context}[:occurrence_relative_to_end]")
        Hearth::Validator.validate!(input[:occurrence_unit], ::String, context: "#{context}[:occurrence_unit]")
      end
    end

    class ScheduledInstanceRecurrenceRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ScheduledInstanceRecurrenceRequest, context: context)
        Hearth::Validator.validate!(input[:frequency], ::String, context: "#{context}[:frequency]")
        Hearth::Validator.validate!(input[:interval], ::Integer, context: "#{context}[:interval]")
        OccurrenceDayRequestSet.validate!(input[:occurrence_days], context: "#{context}[:occurrence_days]") unless input[:occurrence_days].nil?
        Hearth::Validator.validate!(input[:occurrence_relative_to_end], ::TrueClass, ::FalseClass, context: "#{context}[:occurrence_relative_to_end]")
        Hearth::Validator.validate!(input[:occurrence_unit], ::String, context: "#{context}[:occurrence_unit]")
      end
    end

    class ScheduledInstanceSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ScheduledInstance.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ScheduledInstancesBlockDeviceMapping
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ScheduledInstancesBlockDeviceMapping, context: context)
        Hearth::Validator.validate!(input[:device_name], ::String, context: "#{context}[:device_name]")
        ScheduledInstancesEbs.validate!(input[:ebs], context: "#{context}[:ebs]") unless input[:ebs].nil?
        Hearth::Validator.validate!(input[:no_device], ::String, context: "#{context}[:no_device]")
        Hearth::Validator.validate!(input[:virtual_name], ::String, context: "#{context}[:virtual_name]")
      end
    end

    class ScheduledInstancesBlockDeviceMappingSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ScheduledInstancesBlockDeviceMapping.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ScheduledInstancesEbs
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ScheduledInstancesEbs, context: context)
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:iops], ::Integer, context: "#{context}[:iops]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:volume_size], ::Integer, context: "#{context}[:volume_size]")
        Hearth::Validator.validate!(input[:volume_type], ::String, context: "#{context}[:volume_type]")
      end
    end

    class ScheduledInstancesIamInstanceProfile
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ScheduledInstancesIamInstanceProfile, context: context)
        Hearth::Validator.validate!(input[:arn], ::String, context: "#{context}[:arn]")
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
      end
    end

    class ScheduledInstancesIpv6Address
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ScheduledInstancesIpv6Address, context: context)
        Hearth::Validator.validate!(input[:ipv6_address], ::String, context: "#{context}[:ipv6_address]")
      end
    end

    class ScheduledInstancesIpv6AddressList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ScheduledInstancesIpv6Address.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ScheduledInstancesLaunchSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ScheduledInstancesLaunchSpecification, context: context)
        ScheduledInstancesBlockDeviceMappingSet.validate!(input[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless input[:block_device_mappings].nil?
        Hearth::Validator.validate!(input[:ebs_optimized], ::TrueClass, ::FalseClass, context: "#{context}[:ebs_optimized]")
        ScheduledInstancesIamInstanceProfile.validate!(input[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless input[:iam_instance_profile].nil?
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:kernel_id], ::String, context: "#{context}[:kernel_id]")
        Hearth::Validator.validate!(input[:key_name], ::String, context: "#{context}[:key_name]")
        ScheduledInstancesMonitoring.validate!(input[:monitoring], context: "#{context}[:monitoring]") unless input[:monitoring].nil?
        ScheduledInstancesNetworkInterfaceSet.validate!(input[:network_interfaces], context: "#{context}[:network_interfaces]") unless input[:network_interfaces].nil?
        ScheduledInstancesPlacement.validate!(input[:placement], context: "#{context}[:placement]") unless input[:placement].nil?
        Hearth::Validator.validate!(input[:ramdisk_id], ::String, context: "#{context}[:ramdisk_id]")
        ScheduledInstancesSecurityGroupIdSet.validate!(input[:security_group_ids], context: "#{context}[:security_group_ids]") unless input[:security_group_ids].nil?
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:user_data], ::String, context: "#{context}[:user_data]")
      end
    end

    class ScheduledInstancesMonitoring
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ScheduledInstancesMonitoring, context: context)
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
      end
    end

    class ScheduledInstancesNetworkInterface
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ScheduledInstancesNetworkInterface, context: context)
        Hearth::Validator.validate!(input[:associate_public_ip_address], ::TrueClass, ::FalseClass, context: "#{context}[:associate_public_ip_address]")
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:device_index], ::Integer, context: "#{context}[:device_index]")
        ScheduledInstancesSecurityGroupIdSet.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        Hearth::Validator.validate!(input[:ipv6_address_count], ::Integer, context: "#{context}[:ipv6_address_count]")
        ScheduledInstancesIpv6AddressList.validate!(input[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless input[:ipv6_addresses].nil?
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
        PrivateIpAddressConfigSet.validate!(input[:private_ip_address_configs], context: "#{context}[:private_ip_address_configs]") unless input[:private_ip_address_configs].nil?
        Hearth::Validator.validate!(input[:secondary_private_ip_address_count], ::Integer, context: "#{context}[:secondary_private_ip_address_count]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
      end
    end

    class ScheduledInstancesNetworkInterfaceSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ScheduledInstancesNetworkInterface.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ScheduledInstancesPlacement
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ScheduledInstancesPlacement, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
      end
    end

    class ScheduledInstancesPrivateIpAddressConfig
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ScheduledInstancesPrivateIpAddressConfig, context: context)
        Hearth::Validator.validate!(input[:primary], ::TrueClass, ::FalseClass, context: "#{context}[:primary]")
        Hearth::Validator.validate!(input[:private_ip_address], ::String, context: "#{context}[:private_ip_address]")
      end
    end

    class ScheduledInstancesSecurityGroupIdSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class SearchLocalGatewayRoutesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SearchLocalGatewayRoutesInput, context: context)
        Hearth::Validator.validate!(input[:local_gateway_route_table_id], ::String, context: "#{context}[:local_gateway_route_table_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class SearchLocalGatewayRoutesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SearchLocalGatewayRoutesOutput, context: context)
        LocalGatewayRouteList.validate!(input[:routes], context: "#{context}[:routes]") unless input[:routes].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class SearchTransitGatewayMulticastGroupsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SearchTransitGatewayMulticastGroupsInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class SearchTransitGatewayMulticastGroupsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SearchTransitGatewayMulticastGroupsOutput, context: context)
        TransitGatewayMulticastGroupList.validate!(input[:multicast_groups], context: "#{context}[:multicast_groups]") unless input[:multicast_groups].nil?
        Hearth::Validator.validate!(input[:next_token], ::String, context: "#{context}[:next_token]")
      end
    end

    class SearchTransitGatewayRoutesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SearchTransitGatewayRoutesInput, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        FilterList.validate!(input[:filters], context: "#{context}[:filters]") unless input[:filters].nil?
        Hearth::Validator.validate!(input[:max_results], ::Integer, context: "#{context}[:max_results]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class SearchTransitGatewayRoutesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SearchTransitGatewayRoutesOutput, context: context)
        TransitGatewayRouteList.validate!(input[:routes], context: "#{context}[:routes]") unless input[:routes].nil?
        Hearth::Validator.validate!(input[:additional_routes_available], ::TrueClass, ::FalseClass, context: "#{context}[:additional_routes_available]")
      end
    end

    class SecurityGroup
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SecurityGroup, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        IpPermissionList.validate!(input[:ip_permissions], context: "#{context}[:ip_permissions]") unless input[:ip_permissions].nil?
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        IpPermissionList.validate!(input[:ip_permissions_egress], context: "#{context}[:ip_permissions_egress]") unless input[:ip_permissions_egress].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class SecurityGroupIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class SecurityGroupIdentifier
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SecurityGroupIdentifier, context: context)
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
      end
    end

    class SecurityGroupList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SecurityGroup.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SecurityGroupReference
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SecurityGroupReference, context: context)
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        Hearth::Validator.validate!(input[:referencing_vpc_id], ::String, context: "#{context}[:referencing_vpc_id]")
        Hearth::Validator.validate!(input[:vpc_peering_connection_id], ::String, context: "#{context}[:vpc_peering_connection_id]")
      end
    end

    class SecurityGroupReferences
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SecurityGroupReference.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SecurityGroupRule
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SecurityGroupRule, context: context)
        Hearth::Validator.validate!(input[:security_group_rule_id], ::String, context: "#{context}[:security_group_rule_id]")
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        Hearth::Validator.validate!(input[:group_owner_id], ::String, context: "#{context}[:group_owner_id]")
        Hearth::Validator.validate!(input[:is_egress], ::TrueClass, ::FalseClass, context: "#{context}[:is_egress]")
        Hearth::Validator.validate!(input[:ip_protocol], ::String, context: "#{context}[:ip_protocol]")
        Hearth::Validator.validate!(input[:from_port], ::Integer, context: "#{context}[:from_port]")
        Hearth::Validator.validate!(input[:to_port], ::Integer, context: "#{context}[:to_port]")
        Hearth::Validator.validate!(input[:cidr_ipv4], ::String, context: "#{context}[:cidr_ipv4]")
        Hearth::Validator.validate!(input[:cidr_ipv6], ::String, context: "#{context}[:cidr_ipv6]")
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
        ReferencedSecurityGroup.validate!(input[:referenced_group_info], context: "#{context}[:referenced_group_info]") unless input[:referenced_group_info].nil?
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class SecurityGroupRuleDescription
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SecurityGroupRuleDescription, context: context)
        Hearth::Validator.validate!(input[:security_group_rule_id], ::String, context: "#{context}[:security_group_rule_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
      end
    end

    class SecurityGroupRuleDescriptionList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SecurityGroupRuleDescription.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SecurityGroupRuleIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class SecurityGroupRuleList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SecurityGroupRule.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SecurityGroupRuleRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SecurityGroupRuleRequest, context: context)
        Hearth::Validator.validate!(input[:ip_protocol], ::String, context: "#{context}[:ip_protocol]")
        Hearth::Validator.validate!(input[:from_port], ::Integer, context: "#{context}[:from_port]")
        Hearth::Validator.validate!(input[:to_port], ::Integer, context: "#{context}[:to_port]")
        Hearth::Validator.validate!(input[:cidr_ipv4], ::String, context: "#{context}[:cidr_ipv4]")
        Hearth::Validator.validate!(input[:cidr_ipv6], ::String, context: "#{context}[:cidr_ipv6]")
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
        Hearth::Validator.validate!(input[:referenced_group_id], ::String, context: "#{context}[:referenced_group_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
      end
    end

    class SecurityGroupRuleUpdate
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SecurityGroupRuleUpdate, context: context)
        Hearth::Validator.validate!(input[:security_group_rule_id], ::String, context: "#{context}[:security_group_rule_id]")
        SecurityGroupRuleRequest.validate!(input[:security_group_rule], context: "#{context}[:security_group_rule]") unless input[:security_group_rule].nil?
      end
    end

    class SecurityGroupRuleUpdateList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SecurityGroupRuleUpdate.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SecurityGroupStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class SendDiagnosticInterruptInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SendDiagnosticInterruptInput, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class SendDiagnosticInterruptOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SendDiagnosticInterruptOutput, context: context)
      end
    end

    class ServiceConfiguration
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ServiceConfiguration, context: context)
        ServiceTypeDetailSet.validate!(input[:service_type], context: "#{context}[:service_type]") unless input[:service_type].nil?
        Hearth::Validator.validate!(input[:service_id], ::String, context: "#{context}[:service_id]")
        Hearth::Validator.validate!(input[:service_name], ::String, context: "#{context}[:service_name]")
        Hearth::Validator.validate!(input[:service_state], ::String, context: "#{context}[:service_state]")
        ValueStringList.validate!(input[:availability_zones], context: "#{context}[:availability_zones]") unless input[:availability_zones].nil?
        Hearth::Validator.validate!(input[:acceptance_required], ::TrueClass, ::FalseClass, context: "#{context}[:acceptance_required]")
        Hearth::Validator.validate!(input[:manages_vpc_endpoints], ::TrueClass, ::FalseClass, context: "#{context}[:manages_vpc_endpoints]")
        ValueStringList.validate!(input[:network_load_balancer_arns], context: "#{context}[:network_load_balancer_arns]") unless input[:network_load_balancer_arns].nil?
        ValueStringList.validate!(input[:gateway_load_balancer_arns], context: "#{context}[:gateway_load_balancer_arns]") unless input[:gateway_load_balancer_arns].nil?
        SupportedIpAddressTypes.validate!(input[:supported_ip_address_types], context: "#{context}[:supported_ip_address_types]") unless input[:supported_ip_address_types].nil?
        ValueStringList.validate!(input[:base_endpoint_dns_names], context: "#{context}[:base_endpoint_dns_names]") unless input[:base_endpoint_dns_names].nil?
        Hearth::Validator.validate!(input[:private_dns_name], ::String, context: "#{context}[:private_dns_name]")
        PrivateDnsNameConfiguration.validate!(input[:private_dns_name_configuration], context: "#{context}[:private_dns_name_configuration]") unless input[:private_dns_name_configuration].nil?
        Hearth::Validator.validate!(input[:payer_responsibility], ::String, context: "#{context}[:payer_responsibility]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class ServiceConfigurationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ServiceConfiguration.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ServiceDetail
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ServiceDetail, context: context)
        Hearth::Validator.validate!(input[:service_name], ::String, context: "#{context}[:service_name]")
        Hearth::Validator.validate!(input[:service_id], ::String, context: "#{context}[:service_id]")
        ServiceTypeDetailSet.validate!(input[:service_type], context: "#{context}[:service_type]") unless input[:service_type].nil?
        ValueStringList.validate!(input[:availability_zones], context: "#{context}[:availability_zones]") unless input[:availability_zones].nil?
        Hearth::Validator.validate!(input[:owner], ::String, context: "#{context}[:owner]")
        ValueStringList.validate!(input[:base_endpoint_dns_names], context: "#{context}[:base_endpoint_dns_names]") unless input[:base_endpoint_dns_names].nil?
        Hearth::Validator.validate!(input[:private_dns_name], ::String, context: "#{context}[:private_dns_name]")
        PrivateDnsDetailsSet.validate!(input[:private_dns_names], context: "#{context}[:private_dns_names]") unless input[:private_dns_names].nil?
        Hearth::Validator.validate!(input[:vpc_endpoint_policy_supported], ::TrueClass, ::FalseClass, context: "#{context}[:vpc_endpoint_policy_supported]")
        Hearth::Validator.validate!(input[:acceptance_required], ::TrueClass, ::FalseClass, context: "#{context}[:acceptance_required]")
        Hearth::Validator.validate!(input[:manages_vpc_endpoints], ::TrueClass, ::FalseClass, context: "#{context}[:manages_vpc_endpoints]")
        Hearth::Validator.validate!(input[:payer_responsibility], ::String, context: "#{context}[:payer_responsibility]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:private_dns_name_verification_state], ::String, context: "#{context}[:private_dns_name_verification_state]")
        SupportedIpAddressTypes.validate!(input[:supported_ip_address_types], context: "#{context}[:supported_ip_address_types]") unless input[:supported_ip_address_types].nil?
      end
    end

    class ServiceDetailSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ServiceDetail.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ServiceTypeDetail
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ServiceTypeDetail, context: context)
        Hearth::Validator.validate!(input[:service_type], ::String, context: "#{context}[:service_type]")
      end
    end

    class ServiceTypeDetailSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ServiceTypeDetail.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SlotDateTimeRangeRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SlotDateTimeRangeRequest, context: context)
        Hearth::Validator.validate!(input[:earliest_time], ::Time, context: "#{context}[:earliest_time]")
        Hearth::Validator.validate!(input[:latest_time], ::Time, context: "#{context}[:latest_time]")
      end
    end

    class SlotStartTimeRangeRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SlotStartTimeRangeRequest, context: context)
        Hearth::Validator.validate!(input[:earliest_time], ::Time, context: "#{context}[:earliest_time]")
        Hearth::Validator.validate!(input[:latest_time], ::Time, context: "#{context}[:latest_time]")
      end
    end

    class Snapshot
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Snapshot, context: context)
        Hearth::Validator.validate!(input[:data_encryption_key_id], ::String, context: "#{context}[:data_encryption_key_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:progress], ::String, context: "#{context}[:progress]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:start_time], ::Time, context: "#{context}[:start_time]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:state_message], ::String, context: "#{context}[:state_message]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:volume_size], ::Integer, context: "#{context}[:volume_size]")
        Hearth::Validator.validate!(input[:owner_alias], ::String, context: "#{context}[:owner_alias]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:storage_tier], ::String, context: "#{context}[:storage_tier]")
        Hearth::Validator.validate!(input[:restore_expiry_time], ::Time, context: "#{context}[:restore_expiry_time]")
      end
    end

    class SnapshotDetail
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SnapshotDetail, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:device_name], ::String, context: "#{context}[:device_name]")
        Hearth::Validator.validate!(input[:disk_image_size], ::Float, context: "#{context}[:disk_image_size]")
        Hearth::Validator.validate!(input[:format], ::String, context: "#{context}[:format]")
        Hearth::Validator.validate!(input[:progress], ::String, context: "#{context}[:progress]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        Hearth::Validator.validate!(input[:url], ::String, context: "#{context}[:url]")
        UserBucketDetails.validate!(input[:user_bucket], context: "#{context}[:user_bucket]") unless input[:user_bucket].nil?
      end
    end

    class SnapshotDetailList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SnapshotDetail.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SnapshotDiskContainer
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SnapshotDiskContainer, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:format], ::String, context: "#{context}[:format]")
        Hearth::Validator.validate!(input[:url], ::String, context: "#{context}[:url]")
        UserBucket.validate!(input[:user_bucket], context: "#{context}[:user_bucket]") unless input[:user_bucket].nil?
      end
    end

    class SnapshotIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class SnapshotInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SnapshotInfo, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:volume_size], ::Integer, context: "#{context}[:volume_size]")
        Hearth::Validator.validate!(input[:start_time], ::Time, context: "#{context}[:start_time]")
        Hearth::Validator.validate!(input[:progress], ::String, context: "#{context}[:progress]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
      end
    end

    class SnapshotList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Snapshot.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SnapshotRecycleBinInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SnapshotRecycleBinInfo, context: context)
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:recycle_bin_enter_time], ::Time, context: "#{context}[:recycle_bin_enter_time]")
        Hearth::Validator.validate!(input[:recycle_bin_exit_time], ::Time, context: "#{context}[:recycle_bin_exit_time]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
      end
    end

    class SnapshotRecycleBinInfoList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SnapshotRecycleBinInfo.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SnapshotSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SnapshotInfo.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SnapshotTaskDetail
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SnapshotTaskDetail, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:disk_image_size], ::Float, context: "#{context}[:disk_image_size]")
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:format], ::String, context: "#{context}[:format]")
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:progress], ::String, context: "#{context}[:progress]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        Hearth::Validator.validate!(input[:url], ::String, context: "#{context}[:url]")
        UserBucketDetails.validate!(input[:user_bucket], context: "#{context}[:user_bucket]") unless input[:user_bucket].nil?
      end
    end

    class SnapshotTierStatus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SnapshotTierStatus, context: context)
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:storage_tier], ::String, context: "#{context}[:storage_tier]")
        Hearth::Validator.validate!(input[:last_tiering_start_time], ::Time, context: "#{context}[:last_tiering_start_time]")
        Hearth::Validator.validate!(input[:last_tiering_progress], ::Integer, context: "#{context}[:last_tiering_progress]")
        Hearth::Validator.validate!(input[:last_tiering_operation_status], ::String, context: "#{context}[:last_tiering_operation_status]")
        Hearth::Validator.validate!(input[:last_tiering_operation_status_detail], ::String, context: "#{context}[:last_tiering_operation_status_detail]")
        Hearth::Validator.validate!(input[:archival_complete_time], ::Time, context: "#{context}[:archival_complete_time]")
        Hearth::Validator.validate!(input[:restore_expiry_time], ::Time, context: "#{context}[:restore_expiry_time]")
      end
    end

    class SpotCapacityRebalance
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotCapacityRebalance, context: context)
        Hearth::Validator.validate!(input[:replacement_strategy], ::String, context: "#{context}[:replacement_strategy]")
        Hearth::Validator.validate!(input[:termination_delay], ::Integer, context: "#{context}[:termination_delay]")
      end
    end

    class SpotDatafeedSubscription
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotDatafeedSubscription, context: context)
        Hearth::Validator.validate!(input[:bucket], ::String, context: "#{context}[:bucket]")
        SpotInstanceStateFault.validate!(input[:fault], context: "#{context}[:fault]") unless input[:fault].nil?
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:prefix], ::String, context: "#{context}[:prefix]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class SpotFleetLaunchSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotFleetLaunchSpecification, context: context)
        GroupIdentifierList.validate!(input[:security_groups], context: "#{context}[:security_groups]") unless input[:security_groups].nil?
        Hearth::Validator.validate!(input[:addressing_type], ::String, context: "#{context}[:addressing_type]")
        BlockDeviceMappingList.validate!(input[:block_device_mappings], context: "#{context}[:block_device_mappings]") unless input[:block_device_mappings].nil?
        Hearth::Validator.validate!(input[:ebs_optimized], ::TrueClass, ::FalseClass, context: "#{context}[:ebs_optimized]")
        IamInstanceProfileSpecification.validate!(input[:iam_instance_profile], context: "#{context}[:iam_instance_profile]") unless input[:iam_instance_profile].nil?
        Hearth::Validator.validate!(input[:image_id], ::String, context: "#{context}[:image_id]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:kernel_id], ::String, context: "#{context}[:kernel_id]")
        Hearth::Validator.validate!(input[:key_name], ::String, context: "#{context}[:key_name]")
        SpotFleetMonitoring.validate!(input[:monitoring], context: "#{context}[:monitoring]") unless input[:monitoring].nil?
        InstanceNetworkInterfaceSpecificationList.validate!(input[:network_interfaces], context: "#{context}[:network_interfaces]") unless input[:network_interfaces].nil?
        SpotPlacement.validate!(input[:placement], context: "#{context}[:placement]") unless input[:placement].nil?
        Hearth::Validator.validate!(input[:ramdisk_id], ::String, context: "#{context}[:ramdisk_id]")
        Hearth::Validator.validate!(input[:spot_price], ::String, context: "#{context}[:spot_price]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:user_data], ::String, context: "#{context}[:user_data]")
        Hearth::Validator.validate!(input[:weighted_capacity], ::Float, context: "#{context}[:weighted_capacity]")
        SpotFleetTagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        InstanceRequirements.validate!(input[:instance_requirements], context: "#{context}[:instance_requirements]") unless input[:instance_requirements].nil?
      end
    end

    class SpotFleetMonitoring
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotFleetMonitoring, context: context)
        Hearth::Validator.validate!(input[:enabled], ::TrueClass, ::FalseClass, context: "#{context}[:enabled]")
      end
    end

    class SpotFleetRequestConfig
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotFleetRequestConfig, context: context)
        Hearth::Validator.validate!(input[:activity_status], ::String, context: "#{context}[:activity_status]")
        Hearth::Validator.validate!(input[:create_time], ::Time, context: "#{context}[:create_time]")
        SpotFleetRequestConfigData.validate!(input[:spot_fleet_request_config], context: "#{context}[:spot_fleet_request_config]") unless input[:spot_fleet_request_config].nil?
        Hearth::Validator.validate!(input[:spot_fleet_request_id], ::String, context: "#{context}[:spot_fleet_request_id]")
        Hearth::Validator.validate!(input[:spot_fleet_request_state], ::String, context: "#{context}[:spot_fleet_request_state]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class SpotFleetRequestConfigData
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotFleetRequestConfigData, context: context)
        Hearth::Validator.validate!(input[:allocation_strategy], ::String, context: "#{context}[:allocation_strategy]")
        Hearth::Validator.validate!(input[:on_demand_allocation_strategy], ::String, context: "#{context}[:on_demand_allocation_strategy]")
        SpotMaintenanceStrategies.validate!(input[:spot_maintenance_strategies], context: "#{context}[:spot_maintenance_strategies]") unless input[:spot_maintenance_strategies].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
        Hearth::Validator.validate!(input[:excess_capacity_termination_policy], ::String, context: "#{context}[:excess_capacity_termination_policy]")
        Hearth::Validator.validate!(input[:fulfilled_capacity], ::Float, context: "#{context}[:fulfilled_capacity]")
        Hearth::Validator.validate!(input[:on_demand_fulfilled_capacity], ::Float, context: "#{context}[:on_demand_fulfilled_capacity]")
        Hearth::Validator.validate!(input[:iam_fleet_role], ::String, context: "#{context}[:iam_fleet_role]")
        LaunchSpecsList.validate!(input[:launch_specifications], context: "#{context}[:launch_specifications]") unless input[:launch_specifications].nil?
        LaunchTemplateConfigList.validate!(input[:launch_template_configs], context: "#{context}[:launch_template_configs]") unless input[:launch_template_configs].nil?
        Hearth::Validator.validate!(input[:spot_price], ::String, context: "#{context}[:spot_price]")
        Hearth::Validator.validate!(input[:target_capacity], ::Integer, context: "#{context}[:target_capacity]")
        Hearth::Validator.validate!(input[:on_demand_target_capacity], ::Integer, context: "#{context}[:on_demand_target_capacity]")
        Hearth::Validator.validate!(input[:on_demand_max_total_price], ::String, context: "#{context}[:on_demand_max_total_price]")
        Hearth::Validator.validate!(input[:spot_max_total_price], ::String, context: "#{context}[:spot_max_total_price]")
        Hearth::Validator.validate!(input[:terminate_instances_with_expiration], ::TrueClass, ::FalseClass, context: "#{context}[:terminate_instances_with_expiration]")
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:valid_from], ::Time, context: "#{context}[:valid_from]")
        Hearth::Validator.validate!(input[:valid_until], ::Time, context: "#{context}[:valid_until]")
        Hearth::Validator.validate!(input[:replace_unhealthy_instances], ::TrueClass, ::FalseClass, context: "#{context}[:replace_unhealthy_instances]")
        Hearth::Validator.validate!(input[:instance_interruption_behavior], ::String, context: "#{context}[:instance_interruption_behavior]")
        LoadBalancersConfig.validate!(input[:load_balancers_config], context: "#{context}[:load_balancers_config]") unless input[:load_balancers_config].nil?
        Hearth::Validator.validate!(input[:instance_pools_to_use_count], ::Integer, context: "#{context}[:instance_pools_to_use_count]")
        Hearth::Validator.validate!(input[:context], ::String, context: "#{context}[:context]")
        Hearth::Validator.validate!(input[:target_capacity_unit_type], ::String, context: "#{context}[:target_capacity_unit_type]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
      end
    end

    class SpotFleetRequestConfigSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SpotFleetRequestConfig.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SpotFleetRequestIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class SpotFleetTagSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotFleetTagSpecification, context: context)
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class SpotFleetTagSpecificationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SpotFleetTagSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SpotInstanceRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotInstanceRequest, context: context)
        Hearth::Validator.validate!(input[:actual_block_hourly_price], ::String, context: "#{context}[:actual_block_hourly_price]")
        Hearth::Validator.validate!(input[:availability_zone_group], ::String, context: "#{context}[:availability_zone_group]")
        Hearth::Validator.validate!(input[:block_duration_minutes], ::Integer, context: "#{context}[:block_duration_minutes]")
        Hearth::Validator.validate!(input[:create_time], ::Time, context: "#{context}[:create_time]")
        SpotInstanceStateFault.validate!(input[:fault], context: "#{context}[:fault]") unless input[:fault].nil?
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:launch_group], ::String, context: "#{context}[:launch_group]")
        LaunchSpecification.validate!(input[:launch_specification], context: "#{context}[:launch_specification]") unless input[:launch_specification].nil?
        Hearth::Validator.validate!(input[:launched_availability_zone], ::String, context: "#{context}[:launched_availability_zone]")
        Hearth::Validator.validate!(input[:product_description], ::String, context: "#{context}[:product_description]")
        Hearth::Validator.validate!(input[:spot_instance_request_id], ::String, context: "#{context}[:spot_instance_request_id]")
        Hearth::Validator.validate!(input[:spot_price], ::String, context: "#{context}[:spot_price]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        SpotInstanceStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:valid_from], ::Time, context: "#{context}[:valid_from]")
        Hearth::Validator.validate!(input[:valid_until], ::Time, context: "#{context}[:valid_until]")
        Hearth::Validator.validate!(input[:instance_interruption_behavior], ::String, context: "#{context}[:instance_interruption_behavior]")
      end
    end

    class SpotInstanceRequestIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class SpotInstanceRequestList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SpotInstanceRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SpotInstanceStateFault
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotInstanceStateFault, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class SpotInstanceStatus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotInstanceStatus, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
        Hearth::Validator.validate!(input[:update_time], ::Time, context: "#{context}[:update_time]")
      end
    end

    class SpotMaintenanceStrategies
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotMaintenanceStrategies, context: context)
        SpotCapacityRebalance.validate!(input[:capacity_rebalance], context: "#{context}[:capacity_rebalance]") unless input[:capacity_rebalance].nil?
      end
    end

    class SpotMarketOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotMarketOptions, context: context)
        Hearth::Validator.validate!(input[:max_price], ::String, context: "#{context}[:max_price]")
        Hearth::Validator.validate!(input[:spot_instance_type], ::String, context: "#{context}[:spot_instance_type]")
        Hearth::Validator.validate!(input[:block_duration_minutes], ::Integer, context: "#{context}[:block_duration_minutes]")
        Hearth::Validator.validate!(input[:valid_until], ::Time, context: "#{context}[:valid_until]")
        Hearth::Validator.validate!(input[:instance_interruption_behavior], ::String, context: "#{context}[:instance_interruption_behavior]")
      end
    end

    class SpotOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotOptions, context: context)
        Hearth::Validator.validate!(input[:allocation_strategy], ::String, context: "#{context}[:allocation_strategy]")
        FleetSpotMaintenanceStrategies.validate!(input[:maintenance_strategies], context: "#{context}[:maintenance_strategies]") unless input[:maintenance_strategies].nil?
        Hearth::Validator.validate!(input[:instance_interruption_behavior], ::String, context: "#{context}[:instance_interruption_behavior]")
        Hearth::Validator.validate!(input[:instance_pools_to_use_count], ::Integer, context: "#{context}[:instance_pools_to_use_count]")
        Hearth::Validator.validate!(input[:single_instance_type], ::TrueClass, ::FalseClass, context: "#{context}[:single_instance_type]")
        Hearth::Validator.validate!(input[:single_availability_zone], ::TrueClass, ::FalseClass, context: "#{context}[:single_availability_zone]")
        Hearth::Validator.validate!(input[:min_target_capacity], ::Integer, context: "#{context}[:min_target_capacity]")
        Hearth::Validator.validate!(input[:max_total_price], ::String, context: "#{context}[:max_total_price]")
      end
    end

    class SpotOptionsRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotOptionsRequest, context: context)
        Hearth::Validator.validate!(input[:allocation_strategy], ::String, context: "#{context}[:allocation_strategy]")
        FleetSpotMaintenanceStrategiesRequest.validate!(input[:maintenance_strategies], context: "#{context}[:maintenance_strategies]") unless input[:maintenance_strategies].nil?
        Hearth::Validator.validate!(input[:instance_interruption_behavior], ::String, context: "#{context}[:instance_interruption_behavior]")
        Hearth::Validator.validate!(input[:instance_pools_to_use_count], ::Integer, context: "#{context}[:instance_pools_to_use_count]")
        Hearth::Validator.validate!(input[:single_instance_type], ::TrueClass, ::FalseClass, context: "#{context}[:single_instance_type]")
        Hearth::Validator.validate!(input[:single_availability_zone], ::TrueClass, ::FalseClass, context: "#{context}[:single_availability_zone]")
        Hearth::Validator.validate!(input[:min_target_capacity], ::Integer, context: "#{context}[:min_target_capacity]")
        Hearth::Validator.validate!(input[:max_total_price], ::String, context: "#{context}[:max_total_price]")
      end
    end

    class SpotPlacement
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotPlacement, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        Hearth::Validator.validate!(input[:tenancy], ::String, context: "#{context}[:tenancy]")
      end
    end

    class SpotPlacementScore
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotPlacementScore, context: context)
        Hearth::Validator.validate!(input[:region], ::String, context: "#{context}[:region]")
        Hearth::Validator.validate!(input[:availability_zone_id], ::String, context: "#{context}[:availability_zone_id]")
        Hearth::Validator.validate!(input[:score], ::Integer, context: "#{context}[:score]")
      end
    end

    class SpotPlacementScores
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SpotPlacementScore.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SpotPrice
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SpotPrice, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:instance_type], ::String, context: "#{context}[:instance_type]")
        Hearth::Validator.validate!(input[:product_description], ::String, context: "#{context}[:product_description]")
        Hearth::Validator.validate!(input[:spot_price], ::String, context: "#{context}[:spot_price]")
        Hearth::Validator.validate!(input[:timestamp], ::Time, context: "#{context}[:timestamp]")
      end
    end

    class SpotPriceHistoryList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SpotPrice.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class StaleIpPermission
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::StaleIpPermission, context: context)
        Hearth::Validator.validate!(input[:from_port], ::Integer, context: "#{context}[:from_port]")
        Hearth::Validator.validate!(input[:ip_protocol], ::String, context: "#{context}[:ip_protocol]")
        IpRanges.validate!(input[:ip_ranges], context: "#{context}[:ip_ranges]") unless input[:ip_ranges].nil?
        PrefixListIdSet.validate!(input[:prefix_list_ids], context: "#{context}[:prefix_list_ids]") unless input[:prefix_list_ids].nil?
        Hearth::Validator.validate!(input[:to_port], ::Integer, context: "#{context}[:to_port]")
        UserIdGroupPairSet.validate!(input[:user_id_group_pairs], context: "#{context}[:user_id_group_pairs]") unless input[:user_id_group_pairs].nil?
      end
    end

    class StaleIpPermissionSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          StaleIpPermission.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class StaleSecurityGroup
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::StaleSecurityGroup, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        StaleIpPermissionSet.validate!(input[:stale_ip_permissions], context: "#{context}[:stale_ip_permissions]") unless input[:stale_ip_permissions].nil?
        StaleIpPermissionSet.validate!(input[:stale_ip_permissions_egress], context: "#{context}[:stale_ip_permissions_egress]") unless input[:stale_ip_permissions_egress].nil?
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class StaleSecurityGroupSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          StaleSecurityGroup.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class StartInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::StartInstancesInput, context: context)
        InstanceIdStringList.validate!(input[:instance_ids], context: "#{context}[:instance_ids]") unless input[:instance_ids].nil?
        Hearth::Validator.validate!(input[:additional_info], ::String, context: "#{context}[:additional_info]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class StartInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::StartInstancesOutput, context: context)
        InstanceStateChangeList.validate!(input[:starting_instances], context: "#{context}[:starting_instances]") unless input[:starting_instances].nil?
      end
    end

    class StartNetworkInsightsAccessScopeAnalysisInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::StartNetworkInsightsAccessScopeAnalysisInput, context: context)
        Hearth::Validator.validate!(input[:network_insights_access_scope_id], ::String, context: "#{context}[:network_insights_access_scope_id]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class StartNetworkInsightsAccessScopeAnalysisOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::StartNetworkInsightsAccessScopeAnalysisOutput, context: context)
        NetworkInsightsAccessScopeAnalysis.validate!(input[:network_insights_access_scope_analysis], context: "#{context}[:network_insights_access_scope_analysis]") unless input[:network_insights_access_scope_analysis].nil?
      end
    end

    class StartNetworkInsightsAnalysisInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::StartNetworkInsightsAnalysisInput, context: context)
        Hearth::Validator.validate!(input[:network_insights_path_id], ::String, context: "#{context}[:network_insights_path_id]")
        ArnList.validate!(input[:filter_in_arns], context: "#{context}[:filter_in_arns]") unless input[:filter_in_arns].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        TagSpecificationList.validate!(input[:tag_specifications], context: "#{context}[:tag_specifications]") unless input[:tag_specifications].nil?
        Hearth::Validator.validate!(input[:client_token], ::String, context: "#{context}[:client_token]")
      end
    end

    class StartNetworkInsightsAnalysisOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::StartNetworkInsightsAnalysisOutput, context: context)
        NetworkInsightsAnalysis.validate!(input[:network_insights_analysis], context: "#{context}[:network_insights_analysis]") unless input[:network_insights_analysis].nil?
      end
    end

    class StartVpcEndpointServicePrivateDnsVerificationInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::StartVpcEndpointServicePrivateDnsVerificationInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:service_id], ::String, context: "#{context}[:service_id]")
      end
    end

    class StartVpcEndpointServicePrivateDnsVerificationOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::StartVpcEndpointServicePrivateDnsVerificationOutput, context: context)
        Hearth::Validator.validate!(input[:return_value], ::TrueClass, ::FalseClass, context: "#{context}[:return_value]")
      end
    end

    class StateReason
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::StateReason, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class StopInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::StopInstancesInput, context: context)
        InstanceIdStringList.validate!(input[:instance_ids], context: "#{context}[:instance_ids]") unless input[:instance_ids].nil?
        Hearth::Validator.validate!(input[:hibernate], ::TrueClass, ::FalseClass, context: "#{context}[:hibernate]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:force], ::TrueClass, ::FalseClass, context: "#{context}[:force]")
      end
    end

    class StopInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::StopInstancesOutput, context: context)
        InstanceStateChangeList.validate!(input[:stopping_instances], context: "#{context}[:stopping_instances]") unless input[:stopping_instances].nil?
      end
    end

    class Storage
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Storage, context: context)
        S3Storage.validate!(input[:s3], context: "#{context}[:s3]") unless input[:s3].nil?
      end
    end

    class StorageLocation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::StorageLocation, context: context)
        Hearth::Validator.validate!(input[:bucket], ::String, context: "#{context}[:bucket]")
        Hearth::Validator.validate!(input[:key], ::String, context: "#{context}[:key]")
      end
    end

    class StoreImageTaskResult
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::StoreImageTaskResult, context: context)
        Hearth::Validator.validate!(input[:ami_id], ::String, context: "#{context}[:ami_id]")
        Hearth::Validator.validate!(input[:task_start_time], ::Time, context: "#{context}[:task_start_time]")
        Hearth::Validator.validate!(input[:bucket], ::String, context: "#{context}[:bucket]")
        Hearth::Validator.validate!(input[:s3object_key], ::String, context: "#{context}[:s3object_key]")
        Hearth::Validator.validate!(input[:progress_percentage], ::Integer, context: "#{context}[:progress_percentage]")
        Hearth::Validator.validate!(input[:store_task_state], ::String, context: "#{context}[:store_task_state]")
        Hearth::Validator.validate!(input[:store_task_failure_reason], ::String, context: "#{context}[:store_task_failure_reason]")
      end
    end

    class StoreImageTaskResultSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          StoreImageTaskResult.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class StringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class Subnet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Subnet, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:availability_zone_id], ::String, context: "#{context}[:availability_zone_id]")
        Hearth::Validator.validate!(input[:available_ip_address_count], ::Integer, context: "#{context}[:available_ip_address_count]")
        Hearth::Validator.validate!(input[:cidr_block], ::String, context: "#{context}[:cidr_block]")
        Hearth::Validator.validate!(input[:default_for_az], ::TrueClass, ::FalseClass, context: "#{context}[:default_for_az]")
        Hearth::Validator.validate!(input[:enable_lni_at_device_index], ::Integer, context: "#{context}[:enable_lni_at_device_index]")
        Hearth::Validator.validate!(input[:map_public_ip_on_launch], ::TrueClass, ::FalseClass, context: "#{context}[:map_public_ip_on_launch]")
        Hearth::Validator.validate!(input[:map_customer_owned_ip_on_launch], ::TrueClass, ::FalseClass, context: "#{context}[:map_customer_owned_ip_on_launch]")
        Hearth::Validator.validate!(input[:customer_owned_ipv4_pool], ::String, context: "#{context}[:customer_owned_ipv4_pool]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:assign_ipv6_address_on_creation], ::TrueClass, ::FalseClass, context: "#{context}[:assign_ipv6_address_on_creation]")
        SubnetIpv6CidrBlockAssociationSet.validate!(input[:ipv6_cidr_block_association_set], context: "#{context}[:ipv6_cidr_block_association_set]") unless input[:ipv6_cidr_block_association_set].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:subnet_arn], ::String, context: "#{context}[:subnet_arn]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        Hearth::Validator.validate!(input[:enable_dns64], ::TrueClass, ::FalseClass, context: "#{context}[:enable_dns64]")
        Hearth::Validator.validate!(input[:ipv6_native], ::TrueClass, ::FalseClass, context: "#{context}[:ipv6_native]")
        PrivateDnsNameOptionsOnLaunch.validate!(input[:private_dns_name_options_on_launch], context: "#{context}[:private_dns_name_options_on_launch]") unless input[:private_dns_name_options_on_launch].nil?
      end
    end

    class SubnetAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SubnetAssociation, context: context)
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class SubnetAssociationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SubnetAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SubnetCidrBlockState
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SubnetCidrBlockState, context: context)
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
      end
    end

    class SubnetCidrReservation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SubnetCidrReservation, context: context)
        Hearth::Validator.validate!(input[:subnet_cidr_reservation_id], ::String, context: "#{context}[:subnet_cidr_reservation_id]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:reservation_type], ::String, context: "#{context}[:reservation_type]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class SubnetCidrReservationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SubnetCidrReservation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SubnetIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class SubnetIpv6CidrBlockAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SubnetIpv6CidrBlockAssociation, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        Hearth::Validator.validate!(input[:ipv6_cidr_block], ::String, context: "#{context}[:ipv6_cidr_block]")
        SubnetCidrBlockState.validate!(input[:ipv6_cidr_block_state], context: "#{context}[:ipv6_cidr_block_state]") unless input[:ipv6_cidr_block_state].nil?
      end
    end

    class SubnetIpv6CidrBlockAssociationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SubnetIpv6CidrBlockAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SubnetList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Subnet.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SuccessfulInstanceCreditSpecificationItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SuccessfulInstanceCreditSpecificationItem, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
      end
    end

    class SuccessfulInstanceCreditSpecificationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SuccessfulInstanceCreditSpecificationItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SuccessfulQueuedPurchaseDeletion
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::SuccessfulQueuedPurchaseDeletion, context: context)
        Hearth::Validator.validate!(input[:reserved_instances_id], ::String, context: "#{context}[:reserved_instances_id]")
      end
    end

    class SuccessfulQueuedPurchaseDeletionSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SuccessfulQueuedPurchaseDeletion.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class SupportedIpAddressTypes
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class Tag
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Tag, context: context)
        Hearth::Validator.validate!(input[:key], ::String, context: "#{context}[:key]")
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class TagDescription
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TagDescription, context: context)
        Hearth::Validator.validate!(input[:key], ::String, context: "#{context}[:key]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        Hearth::Validator.validate!(input[:value], ::String, context: "#{context}[:value]")
      end
    end

    class TagDescriptionList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TagDescription.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TagList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Tag.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TagSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TagSpecification, context: context)
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class TagSpecificationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TagSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TargetCapacitySpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TargetCapacitySpecification, context: context)
        Hearth::Validator.validate!(input[:total_target_capacity], ::Integer, context: "#{context}[:total_target_capacity]")
        Hearth::Validator.validate!(input[:on_demand_target_capacity], ::Integer, context: "#{context}[:on_demand_target_capacity]")
        Hearth::Validator.validate!(input[:spot_target_capacity], ::Integer, context: "#{context}[:spot_target_capacity]")
        Hearth::Validator.validate!(input[:default_target_capacity_type], ::String, context: "#{context}[:default_target_capacity_type]")
        Hearth::Validator.validate!(input[:target_capacity_unit_type], ::String, context: "#{context}[:target_capacity_unit_type]")
      end
    end

    class TargetCapacitySpecificationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TargetCapacitySpecificationRequest, context: context)
        Hearth::Validator.validate!(input[:total_target_capacity], ::Integer, context: "#{context}[:total_target_capacity]")
        Hearth::Validator.validate!(input[:on_demand_target_capacity], ::Integer, context: "#{context}[:on_demand_target_capacity]")
        Hearth::Validator.validate!(input[:spot_target_capacity], ::Integer, context: "#{context}[:spot_target_capacity]")
        Hearth::Validator.validate!(input[:default_target_capacity_type], ::String, context: "#{context}[:default_target_capacity_type]")
        Hearth::Validator.validate!(input[:target_capacity_unit_type], ::String, context: "#{context}[:target_capacity_unit_type]")
      end
    end

    class TargetConfiguration
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TargetConfiguration, context: context)
        Hearth::Validator.validate!(input[:instance_count], ::Integer, context: "#{context}[:instance_count]")
        Hearth::Validator.validate!(input[:offering_id], ::String, context: "#{context}[:offering_id]")
      end
    end

    class TargetConfigurationRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TargetConfigurationRequest, context: context)
        Hearth::Validator.validate!(input[:instance_count], ::Integer, context: "#{context}[:instance_count]")
        Hearth::Validator.validate!(input[:offering_id], ::String, context: "#{context}[:offering_id]")
      end
    end

    class TargetConfigurationRequestSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TargetConfigurationRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TargetGroup
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TargetGroup, context: context)
        Hearth::Validator.validate!(input[:arn], ::String, context: "#{context}[:arn]")
      end
    end

    class TargetGroups
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TargetGroup.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TargetGroupsConfig
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TargetGroupsConfig, context: context)
        TargetGroups.validate!(input[:target_groups], context: "#{context}[:target_groups]") unless input[:target_groups].nil?
      end
    end

    class TargetNetwork
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TargetNetwork, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:target_network_id], ::String, context: "#{context}[:target_network_id]")
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        AssociationStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
        ValueStringList.validate!(input[:security_groups], context: "#{context}[:security_groups]") unless input[:security_groups].nil?
      end
    end

    class TargetNetworkSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TargetNetwork.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TargetReservationValue
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TargetReservationValue, context: context)
        ReservationValue.validate!(input[:reservation_value], context: "#{context}[:reservation_value]") unless input[:reservation_value].nil?
        TargetConfiguration.validate!(input[:target_configuration], context: "#{context}[:target_configuration]") unless input[:target_configuration].nil?
      end
    end

    class TargetReservationValueSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TargetReservationValue.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TerminateClientVpnConnectionsInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TerminateClientVpnConnectionsInput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:connection_id], ::String, context: "#{context}[:connection_id]")
        Hearth::Validator.validate!(input[:username], ::String, context: "#{context}[:username]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class TerminateClientVpnConnectionsOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TerminateClientVpnConnectionsOutput, context: context)
        Hearth::Validator.validate!(input[:client_vpn_endpoint_id], ::String, context: "#{context}[:client_vpn_endpoint_id]")
        Hearth::Validator.validate!(input[:username], ::String, context: "#{context}[:username]")
        TerminateConnectionStatusSet.validate!(input[:connection_statuses], context: "#{context}[:connection_statuses]") unless input[:connection_statuses].nil?
      end
    end

    class TerminateConnectionStatus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TerminateConnectionStatus, context: context)
        Hearth::Validator.validate!(input[:connection_id], ::String, context: "#{context}[:connection_id]")
        ClientVpnConnectionStatus.validate!(input[:previous_status], context: "#{context}[:previous_status]") unless input[:previous_status].nil?
        ClientVpnConnectionStatus.validate!(input[:current_status], context: "#{context}[:current_status]") unless input[:current_status].nil?
      end
    end

    class TerminateConnectionStatusSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TerminateConnectionStatus.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TerminateInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TerminateInstancesInput, context: context)
        InstanceIdStringList.validate!(input[:instance_ids], context: "#{context}[:instance_ids]") unless input[:instance_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class TerminateInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TerminateInstancesOutput, context: context)
        InstanceStateChangeList.validate!(input[:terminating_instances], context: "#{context}[:terminating_instances]") unless input[:terminating_instances].nil?
      end
    end

    class ThreadsPerCoreList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::Integer, context: "#{context}[#{index}]")
        end
      end
    end

    class ThroughResourcesStatement
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ThroughResourcesStatement, context: context)
        ResourceStatement.validate!(input[:resource_statement], context: "#{context}[:resource_statement]") unless input[:resource_statement].nil?
      end
    end

    class ThroughResourcesStatementList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ThroughResourcesStatement.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class ThroughResourcesStatementRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ThroughResourcesStatementRequest, context: context)
        ResourceStatementRequest.validate!(input[:resource_statement], context: "#{context}[:resource_statement]") unless input[:resource_statement].nil?
      end
    end

    class ThroughResourcesStatementRequestList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          ThroughResourcesStatementRequest.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TotalLocalStorageGB
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TotalLocalStorageGB, context: context)
        Hearth::Validator.validate!(input[:min], ::Float, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Float, context: "#{context}[:max]")
      end
    end

    class TotalLocalStorageGBRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TotalLocalStorageGBRequest, context: context)
        Hearth::Validator.validate!(input[:min], ::Float, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Float, context: "#{context}[:max]")
      end
    end

    class TrafficMirrorFilter
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TrafficMirrorFilter, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_filter_id], ::String, context: "#{context}[:traffic_mirror_filter_id]")
        TrafficMirrorFilterRuleList.validate!(input[:ingress_filter_rules], context: "#{context}[:ingress_filter_rules]") unless input[:ingress_filter_rules].nil?
        TrafficMirrorFilterRuleList.validate!(input[:egress_filter_rules], context: "#{context}[:egress_filter_rules]") unless input[:egress_filter_rules].nil?
        TrafficMirrorNetworkServiceList.validate!(input[:network_services], context: "#{context}[:network_services]") unless input[:network_services].nil?
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class TrafficMirrorFilterIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class TrafficMirrorFilterRule
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TrafficMirrorFilterRule, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_filter_rule_id], ::String, context: "#{context}[:traffic_mirror_filter_rule_id]")
        Hearth::Validator.validate!(input[:traffic_mirror_filter_id], ::String, context: "#{context}[:traffic_mirror_filter_id]")
        Hearth::Validator.validate!(input[:traffic_direction], ::String, context: "#{context}[:traffic_direction]")
        Hearth::Validator.validate!(input[:rule_number], ::Integer, context: "#{context}[:rule_number]")
        Hearth::Validator.validate!(input[:rule_action], ::String, context: "#{context}[:rule_action]")
        Hearth::Validator.validate!(input[:protocol], ::Integer, context: "#{context}[:protocol]")
        TrafficMirrorPortRange.validate!(input[:destination_port_range], context: "#{context}[:destination_port_range]") unless input[:destination_port_range].nil?
        TrafficMirrorPortRange.validate!(input[:source_port_range], context: "#{context}[:source_port_range]") unless input[:source_port_range].nil?
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:source_cidr_block], ::String, context: "#{context}[:source_cidr_block]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
      end
    end

    class TrafficMirrorFilterRuleFieldList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class TrafficMirrorFilterRuleList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TrafficMirrorFilterRule.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TrafficMirrorFilterSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TrafficMirrorFilter.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TrafficMirrorNetworkServiceList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class TrafficMirrorPortRange
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TrafficMirrorPortRange, context: context)
        Hearth::Validator.validate!(input[:from_port], ::Integer, context: "#{context}[:from_port]")
        Hearth::Validator.validate!(input[:to_port], ::Integer, context: "#{context}[:to_port]")
      end
    end

    class TrafficMirrorPortRangeRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TrafficMirrorPortRangeRequest, context: context)
        Hearth::Validator.validate!(input[:from_port], ::Integer, context: "#{context}[:from_port]")
        Hearth::Validator.validate!(input[:to_port], ::Integer, context: "#{context}[:to_port]")
      end
    end

    class TrafficMirrorSession
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TrafficMirrorSession, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_session_id], ::String, context: "#{context}[:traffic_mirror_session_id]")
        Hearth::Validator.validate!(input[:traffic_mirror_target_id], ::String, context: "#{context}[:traffic_mirror_target_id]")
        Hearth::Validator.validate!(input[:traffic_mirror_filter_id], ::String, context: "#{context}[:traffic_mirror_filter_id]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:packet_length], ::Integer, context: "#{context}[:packet_length]")
        Hearth::Validator.validate!(input[:session_number], ::Integer, context: "#{context}[:session_number]")
        Hearth::Validator.validate!(input[:virtual_network_id], ::Integer, context: "#{context}[:virtual_network_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class TrafficMirrorSessionFieldList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class TrafficMirrorSessionIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class TrafficMirrorSessionSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TrafficMirrorSession.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TrafficMirrorTarget
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TrafficMirrorTarget, context: context)
        Hearth::Validator.validate!(input[:traffic_mirror_target_id], ::String, context: "#{context}[:traffic_mirror_target_id]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:network_load_balancer_arn], ::String, context: "#{context}[:network_load_balancer_arn]")
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:gateway_load_balancer_endpoint_id], ::String, context: "#{context}[:gateway_load_balancer_endpoint_id]")
      end
    end

    class TrafficMirrorTargetIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class TrafficMirrorTargetSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TrafficMirrorTarget.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGateway
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGateway, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:transit_gateway_arn], ::String, context: "#{context}[:transit_gateway_arn]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:creation_time], ::Time, context: "#{context}[:creation_time]")
        TransitGatewayOptions.validate!(input[:options], context: "#{context}[:options]") unless input[:options].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class TransitGatewayAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayAssociation, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class TransitGatewayAttachment
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayAttachment, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:transit_gateway_owner_id], ::String, context: "#{context}[:transit_gateway_owner_id]")
        Hearth::Validator.validate!(input[:resource_owner_id], ::String, context: "#{context}[:resource_owner_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        TransitGatewayAttachmentAssociation.validate!(input[:association], context: "#{context}[:association]") unless input[:association].nil?
        Hearth::Validator.validate!(input[:creation_time], ::Time, context: "#{context}[:creation_time]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class TransitGatewayAttachmentAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayAttachmentAssociation, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class TransitGatewayAttachmentBgpConfiguration
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayAttachmentBgpConfiguration, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_asn], ::Integer, context: "#{context}[:transit_gateway_asn]")
        Hearth::Validator.validate!(input[:peer_asn], ::Integer, context: "#{context}[:peer_asn]")
        Hearth::Validator.validate!(input[:transit_gateway_address], ::String, context: "#{context}[:transit_gateway_address]")
        Hearth::Validator.validate!(input[:peer_address], ::String, context: "#{context}[:peer_address]")
        Hearth::Validator.validate!(input[:bgp_status], ::String, context: "#{context}[:bgp_status]")
      end
    end

    class TransitGatewayAttachmentBgpConfigurationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayAttachmentBgpConfiguration.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayAttachmentIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class TransitGatewayAttachmentList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayAttachment.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayAttachmentPropagation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayAttachmentPropagation, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class TransitGatewayAttachmentPropagationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayAttachmentPropagation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayCidrBlockStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class TransitGatewayConnect
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayConnect, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:transport_transit_gateway_attachment_id], ::String, context: "#{context}[:transport_transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:creation_time], ::Time, context: "#{context}[:creation_time]")
        TransitGatewayConnectOptions.validate!(input[:options], context: "#{context}[:options]") unless input[:options].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class TransitGatewayConnectList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayConnect.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayConnectOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayConnectOptions, context: context)
        Hearth::Validator.validate!(input[:protocol], ::String, context: "#{context}[:protocol]")
      end
    end

    class TransitGatewayConnectPeer
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayConnectPeer, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:transit_gateway_connect_peer_id], ::String, context: "#{context}[:transit_gateway_connect_peer_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:creation_time], ::Time, context: "#{context}[:creation_time]")
        TransitGatewayConnectPeerConfiguration.validate!(input[:connect_peer_configuration], context: "#{context}[:connect_peer_configuration]") unless input[:connect_peer_configuration].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class TransitGatewayConnectPeerConfiguration
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayConnectPeerConfiguration, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_address], ::String, context: "#{context}[:transit_gateway_address]")
        Hearth::Validator.validate!(input[:peer_address], ::String, context: "#{context}[:peer_address]")
        InsideCidrBlocksStringList.validate!(input[:inside_cidr_blocks], context: "#{context}[:inside_cidr_blocks]") unless input[:inside_cidr_blocks].nil?
        Hearth::Validator.validate!(input[:protocol], ::String, context: "#{context}[:protocol]")
        TransitGatewayAttachmentBgpConfigurationList.validate!(input[:bgp_configurations], context: "#{context}[:bgp_configurations]") unless input[:bgp_configurations].nil?
      end
    end

    class TransitGatewayConnectPeerIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class TransitGatewayConnectPeerList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayConnectPeer.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayConnectRequestBgpOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayConnectRequestBgpOptions, context: context)
        Hearth::Validator.validate!(input[:peer_asn], ::Integer, context: "#{context}[:peer_asn]")
      end
    end

    class TransitGatewayIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class TransitGatewayList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGateway.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayMulticastDeregisteredGroupMembers
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayMulticastDeregisteredGroupMembers, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        ValueStringList.validate!(input[:deregistered_network_interface_ids], context: "#{context}[:deregistered_network_interface_ids]") unless input[:deregistered_network_interface_ids].nil?
        Hearth::Validator.validate!(input[:group_ip_address], ::String, context: "#{context}[:group_ip_address]")
      end
    end

    class TransitGatewayMulticastDeregisteredGroupSources
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayMulticastDeregisteredGroupSources, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        ValueStringList.validate!(input[:deregistered_network_interface_ids], context: "#{context}[:deregistered_network_interface_ids]") unless input[:deregistered_network_interface_ids].nil?
        Hearth::Validator.validate!(input[:group_ip_address], ::String, context: "#{context}[:group_ip_address]")
      end
    end

    class TransitGatewayMulticastDomain
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayMulticastDomain, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_arn], ::String, context: "#{context}[:transit_gateway_multicast_domain_arn]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        TransitGatewayMulticastDomainOptions.validate!(input[:options], context: "#{context}[:options]") unless input[:options].nil?
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:creation_time], ::Time, context: "#{context}[:creation_time]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class TransitGatewayMulticastDomainAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayMulticastDomainAssociation, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        Hearth::Validator.validate!(input[:resource_owner_id], ::String, context: "#{context}[:resource_owner_id]")
        SubnetAssociation.validate!(input[:subnet], context: "#{context}[:subnet]") unless input[:subnet].nil?
      end
    end

    class TransitGatewayMulticastDomainAssociationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayMulticastDomainAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayMulticastDomainAssociations
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayMulticastDomainAssociations, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        Hearth::Validator.validate!(input[:resource_owner_id], ::String, context: "#{context}[:resource_owner_id]")
        SubnetAssociationList.validate!(input[:subnets], context: "#{context}[:subnets]") unless input[:subnets].nil?
      end
    end

    class TransitGatewayMulticastDomainIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class TransitGatewayMulticastDomainList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayMulticastDomain.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayMulticastDomainOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayMulticastDomainOptions, context: context)
        Hearth::Validator.validate!(input[:igmpv2_support], ::String, context: "#{context}[:igmpv2_support]")
        Hearth::Validator.validate!(input[:static_sources_support], ::String, context: "#{context}[:static_sources_support]")
        Hearth::Validator.validate!(input[:auto_accept_shared_associations], ::String, context: "#{context}[:auto_accept_shared_associations]")
      end
    end

    class TransitGatewayMulticastGroup
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayMulticastGroup, context: context)
        Hearth::Validator.validate!(input[:group_ip_address], ::String, context: "#{context}[:group_ip_address]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:subnet_id], ::String, context: "#{context}[:subnet_id]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        Hearth::Validator.validate!(input[:resource_owner_id], ::String, context: "#{context}[:resource_owner_id]")
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Hearth::Validator.validate!(input[:group_member], ::TrueClass, ::FalseClass, context: "#{context}[:group_member]")
        Hearth::Validator.validate!(input[:group_source], ::TrueClass, ::FalseClass, context: "#{context}[:group_source]")
        Hearth::Validator.validate!(input[:member_type], ::String, context: "#{context}[:member_type]")
        Hearth::Validator.validate!(input[:source_type], ::String, context: "#{context}[:source_type]")
      end
    end

    class TransitGatewayMulticastGroupList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayMulticastGroup.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayMulticastRegisteredGroupMembers
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayMulticastRegisteredGroupMembers, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        ValueStringList.validate!(input[:registered_network_interface_ids], context: "#{context}[:registered_network_interface_ids]") unless input[:registered_network_interface_ids].nil?
        Hearth::Validator.validate!(input[:group_ip_address], ::String, context: "#{context}[:group_ip_address]")
      end
    end

    class TransitGatewayMulticastRegisteredGroupSources
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayMulticastRegisteredGroupSources, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_multicast_domain_id], ::String, context: "#{context}[:transit_gateway_multicast_domain_id]")
        ValueStringList.validate!(input[:registered_network_interface_ids], context: "#{context}[:registered_network_interface_ids]") unless input[:registered_network_interface_ids].nil?
        Hearth::Validator.validate!(input[:group_ip_address], ::String, context: "#{context}[:group_ip_address]")
      end
    end

    class TransitGatewayNetworkInterfaceIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class TransitGatewayOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayOptions, context: context)
        Hearth::Validator.validate!(input[:amazon_side_asn], ::Integer, context: "#{context}[:amazon_side_asn]")
        ValueStringList.validate!(input[:transit_gateway_cidr_blocks], context: "#{context}[:transit_gateway_cidr_blocks]") unless input[:transit_gateway_cidr_blocks].nil?
        Hearth::Validator.validate!(input[:auto_accept_shared_attachments], ::String, context: "#{context}[:auto_accept_shared_attachments]")
        Hearth::Validator.validate!(input[:default_route_table_association], ::String, context: "#{context}[:default_route_table_association]")
        Hearth::Validator.validate!(input[:association_default_route_table_id], ::String, context: "#{context}[:association_default_route_table_id]")
        Hearth::Validator.validate!(input[:default_route_table_propagation], ::String, context: "#{context}[:default_route_table_propagation]")
        Hearth::Validator.validate!(input[:propagation_default_route_table_id], ::String, context: "#{context}[:propagation_default_route_table_id]")
        Hearth::Validator.validate!(input[:vpn_ecmp_support], ::String, context: "#{context}[:vpn_ecmp_support]")
        Hearth::Validator.validate!(input[:dns_support], ::String, context: "#{context}[:dns_support]")
        Hearth::Validator.validate!(input[:multicast_support], ::String, context: "#{context}[:multicast_support]")
      end
    end

    class TransitGatewayPeeringAttachment
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayPeeringAttachment, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        PeeringTgwInfo.validate!(input[:requester_tgw_info], context: "#{context}[:requester_tgw_info]") unless input[:requester_tgw_info].nil?
        PeeringTgwInfo.validate!(input[:accepter_tgw_info], context: "#{context}[:accepter_tgw_info]") unless input[:accepter_tgw_info].nil?
        PeeringAttachmentStatus.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:creation_time], ::Time, context: "#{context}[:creation_time]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class TransitGatewayPeeringAttachmentList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayPeeringAttachment.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayPrefixListAttachment
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayPrefixListAttachment, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
      end
    end

    class TransitGatewayPrefixListReference
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayPrefixListReference, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
        Hearth::Validator.validate!(input[:prefix_list_owner_id], ::String, context: "#{context}[:prefix_list_owner_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:blackhole], ::TrueClass, ::FalseClass, context: "#{context}[:blackhole]")
        TransitGatewayPrefixListAttachment.validate!(input[:transit_gateway_attachment], context: "#{context}[:transit_gateway_attachment]") unless input[:transit_gateway_attachment].nil?
      end
    end

    class TransitGatewayPrefixListReferenceSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayPrefixListReference.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayPropagation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayPropagation, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class TransitGatewayRequestOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayRequestOptions, context: context)
        Hearth::Validator.validate!(input[:amazon_side_asn], ::Integer, context: "#{context}[:amazon_side_asn]")
        Hearth::Validator.validate!(input[:auto_accept_shared_attachments], ::String, context: "#{context}[:auto_accept_shared_attachments]")
        Hearth::Validator.validate!(input[:default_route_table_association], ::String, context: "#{context}[:default_route_table_association]")
        Hearth::Validator.validate!(input[:default_route_table_propagation], ::String, context: "#{context}[:default_route_table_propagation]")
        Hearth::Validator.validate!(input[:vpn_ecmp_support], ::String, context: "#{context}[:vpn_ecmp_support]")
        Hearth::Validator.validate!(input[:dns_support], ::String, context: "#{context}[:dns_support]")
        Hearth::Validator.validate!(input[:multicast_support], ::String, context: "#{context}[:multicast_support]")
        TransitGatewayCidrBlockStringList.validate!(input[:transit_gateway_cidr_blocks], context: "#{context}[:transit_gateway_cidr_blocks]") unless input[:transit_gateway_cidr_blocks].nil?
      end
    end

    class TransitGatewayRoute
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayRoute, context: context)
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
        TransitGatewayRouteAttachmentList.validate!(input[:transit_gateway_attachments], context: "#{context}[:transit_gateway_attachments]") unless input[:transit_gateway_attachments].nil?
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class TransitGatewayRouteAttachment
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayRouteAttachment, context: context)
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
      end
    end

    class TransitGatewayRouteAttachmentList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayRouteAttachment.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayRouteList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayRoute.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayRouteTable
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayRouteTable, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_route_table_id], ::String, context: "#{context}[:transit_gateway_route_table_id]")
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:default_association_route_table], ::TrueClass, ::FalseClass, context: "#{context}[:default_association_route_table]")
        Hearth::Validator.validate!(input[:default_propagation_route_table], ::TrueClass, ::FalseClass, context: "#{context}[:default_propagation_route_table]")
        Hearth::Validator.validate!(input[:creation_time], ::Time, context: "#{context}[:creation_time]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class TransitGatewayRouteTableAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayRouteTableAssociation, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class TransitGatewayRouteTableAssociationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayRouteTableAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayRouteTableIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class TransitGatewayRouteTableList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayRouteTable.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayRouteTablePropagation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayRouteTablePropagation, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class TransitGatewayRouteTablePropagationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayRouteTablePropagation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayRouteTableRoute
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayRouteTableRoute, context: context)
        Hearth::Validator.validate!(input[:destination_cidr], ::String, context: "#{context}[:destination_cidr]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:route_origin], ::String, context: "#{context}[:route_origin]")
        Hearth::Validator.validate!(input[:prefix_list_id], ::String, context: "#{context}[:prefix_list_id]")
        Hearth::Validator.validate!(input[:attachment_id], ::String, context: "#{context}[:attachment_id]")
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
        Hearth::Validator.validate!(input[:resource_type], ::String, context: "#{context}[:resource_type]")
      end
    end

    class TransitGatewaySubnetIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class TransitGatewayVpcAttachment
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayVpcAttachment, context: context)
        Hearth::Validator.validate!(input[:transit_gateway_attachment_id], ::String, context: "#{context}[:transit_gateway_attachment_id]")
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:vpc_owner_id], ::String, context: "#{context}[:vpc_owner_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        ValueStringList.validate!(input[:subnet_ids], context: "#{context}[:subnet_ids]") unless input[:subnet_ids].nil?
        Hearth::Validator.validate!(input[:creation_time], ::Time, context: "#{context}[:creation_time]")
        TransitGatewayVpcAttachmentOptions.validate!(input[:options], context: "#{context}[:options]") unless input[:options].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class TransitGatewayVpcAttachmentList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TransitGatewayVpcAttachment.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TransitGatewayVpcAttachmentOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TransitGatewayVpcAttachmentOptions, context: context)
        Hearth::Validator.validate!(input[:dns_support], ::String, context: "#{context}[:dns_support]")
        Hearth::Validator.validate!(input[:ipv6_support], ::String, context: "#{context}[:ipv6_support]")
        Hearth::Validator.validate!(input[:appliance_mode_support], ::String, context: "#{context}[:appliance_mode_support]")
      end
    end

    class TrunkInterfaceAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TrunkInterfaceAssociation, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        Hearth::Validator.validate!(input[:branch_interface_id], ::String, context: "#{context}[:branch_interface_id]")
        Hearth::Validator.validate!(input[:trunk_interface_id], ::String, context: "#{context}[:trunk_interface_id]")
        Hearth::Validator.validate!(input[:interface_protocol], ::String, context: "#{context}[:interface_protocol]")
        Hearth::Validator.validate!(input[:vlan_id], ::Integer, context: "#{context}[:vlan_id]")
        Hearth::Validator.validate!(input[:gre_key], ::Integer, context: "#{context}[:gre_key]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class TrunkInterfaceAssociationIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class TrunkInterfaceAssociationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TrunkInterfaceAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class TunnelOption
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::TunnelOption, context: context)
        Hearth::Validator.validate!(input[:outside_ip_address], ::String, context: "#{context}[:outside_ip_address]")
        Hearth::Validator.validate!(input[:tunnel_inside_cidr], ::String, context: "#{context}[:tunnel_inside_cidr]")
        Hearth::Validator.validate!(input[:tunnel_inside_ipv6_cidr], ::String, context: "#{context}[:tunnel_inside_ipv6_cidr]")
        Hearth::Validator.validate!(input[:pre_shared_key], ::String, context: "#{context}[:pre_shared_key]")
        Hearth::Validator.validate!(input[:phase1_lifetime_seconds], ::Integer, context: "#{context}[:phase1_lifetime_seconds]")
        Hearth::Validator.validate!(input[:phase2_lifetime_seconds], ::Integer, context: "#{context}[:phase2_lifetime_seconds]")
        Hearth::Validator.validate!(input[:rekey_margin_time_seconds], ::Integer, context: "#{context}[:rekey_margin_time_seconds]")
        Hearth::Validator.validate!(input[:rekey_fuzz_percentage], ::Integer, context: "#{context}[:rekey_fuzz_percentage]")
        Hearth::Validator.validate!(input[:replay_window_size], ::Integer, context: "#{context}[:replay_window_size]")
        Hearth::Validator.validate!(input[:dpd_timeout_seconds], ::Integer, context: "#{context}[:dpd_timeout_seconds]")
        Hearth::Validator.validate!(input[:dpd_timeout_action], ::String, context: "#{context}[:dpd_timeout_action]")
        Phase1EncryptionAlgorithmsList.validate!(input[:phase1_encryption_algorithms], context: "#{context}[:phase1_encryption_algorithms]") unless input[:phase1_encryption_algorithms].nil?
        Phase2EncryptionAlgorithmsList.validate!(input[:phase2_encryption_algorithms], context: "#{context}[:phase2_encryption_algorithms]") unless input[:phase2_encryption_algorithms].nil?
        Phase1IntegrityAlgorithmsList.validate!(input[:phase1_integrity_algorithms], context: "#{context}[:phase1_integrity_algorithms]") unless input[:phase1_integrity_algorithms].nil?
        Phase2IntegrityAlgorithmsList.validate!(input[:phase2_integrity_algorithms], context: "#{context}[:phase2_integrity_algorithms]") unless input[:phase2_integrity_algorithms].nil?
        Phase1DHGroupNumbersList.validate!(input[:phase1_dh_group_numbers], context: "#{context}[:phase1_dh_group_numbers]") unless input[:phase1_dh_group_numbers].nil?
        Phase2DHGroupNumbersList.validate!(input[:phase2_dh_group_numbers], context: "#{context}[:phase2_dh_group_numbers]") unless input[:phase2_dh_group_numbers].nil?
        IKEVersionsList.validate!(input[:ike_versions], context: "#{context}[:ike_versions]") unless input[:ike_versions].nil?
        Hearth::Validator.validate!(input[:startup_action], ::String, context: "#{context}[:startup_action]")
      end
    end

    class TunnelOptionsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          TunnelOption.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class UnassignIpv6AddressesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UnassignIpv6AddressesInput, context: context)
        Ipv6AddressList.validate!(input[:ipv6_addresses], context: "#{context}[:ipv6_addresses]") unless input[:ipv6_addresses].nil?
        IpPrefixList.validate!(input[:ipv6_prefixes], context: "#{context}[:ipv6_prefixes]") unless input[:ipv6_prefixes].nil?
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
      end
    end

    class UnassignIpv6AddressesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UnassignIpv6AddressesOutput, context: context)
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        Ipv6AddressList.validate!(input[:unassigned_ipv6_addresses], context: "#{context}[:unassigned_ipv6_addresses]") unless input[:unassigned_ipv6_addresses].nil?
        IpPrefixList.validate!(input[:unassigned_ipv6_prefixes], context: "#{context}[:unassigned_ipv6_prefixes]") unless input[:unassigned_ipv6_prefixes].nil?
      end
    end

    class UnassignPrivateIpAddressesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UnassignPrivateIpAddressesInput, context: context)
        Hearth::Validator.validate!(input[:network_interface_id], ::String, context: "#{context}[:network_interface_id]")
        PrivateIpAddressStringList.validate!(input[:private_ip_addresses], context: "#{context}[:private_ip_addresses]") unless input[:private_ip_addresses].nil?
        IpPrefixList.validate!(input[:ipv4_prefixes], context: "#{context}[:ipv4_prefixes]") unless input[:ipv4_prefixes].nil?
      end
    end

    class UnassignPrivateIpAddressesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UnassignPrivateIpAddressesOutput, context: context)
      end
    end

    class UnmonitorInstancesInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UnmonitorInstancesInput, context: context)
        InstanceIdStringList.validate!(input[:instance_ids], context: "#{context}[:instance_ids]") unless input[:instance_ids].nil?
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class UnmonitorInstancesOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UnmonitorInstancesOutput, context: context)
        InstanceMonitoringList.validate!(input[:instance_monitorings], context: "#{context}[:instance_monitorings]") unless input[:instance_monitorings].nil?
      end
    end

    class UnsuccessfulInstanceCreditSpecificationItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UnsuccessfulInstanceCreditSpecificationItem, context: context)
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        UnsuccessfulInstanceCreditSpecificationItemError.validate!(input[:error], context: "#{context}[:error]") unless input[:error].nil?
      end
    end

    class UnsuccessfulInstanceCreditSpecificationItemError
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UnsuccessfulInstanceCreditSpecificationItemError, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class UnsuccessfulInstanceCreditSpecificationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          UnsuccessfulInstanceCreditSpecificationItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class UnsuccessfulItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UnsuccessfulItem, context: context)
        UnsuccessfulItemError.validate!(input[:error], context: "#{context}[:error]") unless input[:error].nil?
        Hearth::Validator.validate!(input[:resource_id], ::String, context: "#{context}[:resource_id]")
      end
    end

    class UnsuccessfulItemError
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UnsuccessfulItemError, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class UnsuccessfulItemList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          UnsuccessfulItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class UnsuccessfulItemSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          UnsuccessfulItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class UpdateSecurityGroupRuleDescriptionsEgressInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UpdateSecurityGroupRuleDescriptionsEgressInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        IpPermissionList.validate!(input[:ip_permissions], context: "#{context}[:ip_permissions]") unless input[:ip_permissions].nil?
        SecurityGroupRuleDescriptionList.validate!(input[:security_group_rule_descriptions], context: "#{context}[:security_group_rule_descriptions]") unless input[:security_group_rule_descriptions].nil?
      end
    end

    class UpdateSecurityGroupRuleDescriptionsEgressOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UpdateSecurityGroupRuleDescriptionsEgressOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class UpdateSecurityGroupRuleDescriptionsIngressInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UpdateSecurityGroupRuleDescriptionsIngressInput, context: context)
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        IpPermissionList.validate!(input[:ip_permissions], context: "#{context}[:ip_permissions]") unless input[:ip_permissions].nil?
        SecurityGroupRuleDescriptionList.validate!(input[:security_group_rule_descriptions], context: "#{context}[:security_group_rule_descriptions]") unless input[:security_group_rule_descriptions].nil?
      end
    end

    class UpdateSecurityGroupRuleDescriptionsIngressOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UpdateSecurityGroupRuleDescriptionsIngressOutput, context: context)
        Hearth::Validator.validate!(input[:return], ::TrueClass, ::FalseClass, context: "#{context}[:return]")
      end
    end

    class UsageClassTypeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class UserBucket
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UserBucket, context: context)
        Hearth::Validator.validate!(input[:s3_bucket], ::String, context: "#{context}[:s3_bucket]")
        Hearth::Validator.validate!(input[:s3_key], ::String, context: "#{context}[:s3_key]")
      end
    end

    class UserBucketDetails
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UserBucketDetails, context: context)
        Hearth::Validator.validate!(input[:s3_bucket], ::String, context: "#{context}[:s3_bucket]")
        Hearth::Validator.validate!(input[:s3_key], ::String, context: "#{context}[:s3_key]")
      end
    end

    class UserData
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UserData, context: context)
        Hearth::Validator.validate!(input[:data], ::String, context: "#{context}[:data]")
      end
    end

    class UserGroupStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class UserIdGroupPair
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::UserIdGroupPair, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:group_id], ::String, context: "#{context}[:group_id]")
        Hearth::Validator.validate!(input[:group_name], ::String, context: "#{context}[:group_name]")
        Hearth::Validator.validate!(input[:peering_status], ::String, context: "#{context}[:peering_status]")
        Hearth::Validator.validate!(input[:user_id], ::String, context: "#{context}[:user_id]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:vpc_peering_connection_id], ::String, context: "#{context}[:vpc_peering_connection_id]")
      end
    end

    class UserIdGroupPairList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          UserIdGroupPair.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class UserIdGroupPairSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          UserIdGroupPair.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class UserIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class VCpuCountRange
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VCpuCountRange, context: context)
        Hearth::Validator.validate!(input[:min], ::Integer, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Integer, context: "#{context}[:max]")
      end
    end

    class VCpuCountRangeRequest
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VCpuCountRangeRequest, context: context)
        Hearth::Validator.validate!(input[:min], ::Integer, context: "#{context}[:min]")
        Hearth::Validator.validate!(input[:max], ::Integer, context: "#{context}[:max]")
      end
    end

    class VCpuInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VCpuInfo, context: context)
        Hearth::Validator.validate!(input[:default_v_cpus], ::Integer, context: "#{context}[:default_v_cpus]")
        Hearth::Validator.validate!(input[:default_cores], ::Integer, context: "#{context}[:default_cores]")
        Hearth::Validator.validate!(input[:default_threads_per_core], ::Integer, context: "#{context}[:default_threads_per_core]")
        CoreCountList.validate!(input[:valid_cores], context: "#{context}[:valid_cores]") unless input[:valid_cores].nil?
        ThreadsPerCoreList.validate!(input[:valid_threads_per_core], context: "#{context}[:valid_threads_per_core]") unless input[:valid_threads_per_core].nil?
      end
    end

    class ValidationError
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ValidationError, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class ValidationWarning
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::ValidationWarning, context: context)
        ErrorSet.validate!(input[:errors], context: "#{context}[:errors]") unless input[:errors].nil?
      end
    end

    class ValueStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class VersionStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class VgwTelemetry
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VgwTelemetry, context: context)
        Hearth::Validator.validate!(input[:accepted_route_count], ::Integer, context: "#{context}[:accepted_route_count]")
        Hearth::Validator.validate!(input[:last_status_change], ::Time, context: "#{context}[:last_status_change]")
        Hearth::Validator.validate!(input[:outside_ip_address], ::String, context: "#{context}[:outside_ip_address]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        Hearth::Validator.validate!(input[:certificate_arn], ::String, context: "#{context}[:certificate_arn]")
      end
    end

    class VgwTelemetryList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VgwTelemetry.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VirtualizationTypeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class VirtualizationTypeSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class Volume
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Volume, context: context)
        VolumeAttachmentList.validate!(input[:attachments], context: "#{context}[:attachments]") unless input[:attachments].nil?
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:create_time], ::Time, context: "#{context}[:create_time]")
        Hearth::Validator.validate!(input[:encrypted], ::TrueClass, ::FalseClass, context: "#{context}[:encrypted]")
        Hearth::Validator.validate!(input[:kms_key_id], ::String, context: "#{context}[:kms_key_id]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        Hearth::Validator.validate!(input[:size], ::Integer, context: "#{context}[:size]")
        Hearth::Validator.validate!(input[:snapshot_id], ::String, context: "#{context}[:snapshot_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:iops], ::Integer, context: "#{context}[:iops]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:volume_type], ::String, context: "#{context}[:volume_type]")
        Hearth::Validator.validate!(input[:fast_restored], ::TrueClass, ::FalseClass, context: "#{context}[:fast_restored]")
        Hearth::Validator.validate!(input[:multi_attach_enabled], ::TrueClass, ::FalseClass, context: "#{context}[:multi_attach_enabled]")
        Hearth::Validator.validate!(input[:throughput], ::Integer, context: "#{context}[:throughput]")
      end
    end

    class VolumeAttachment
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VolumeAttachment, context: context)
        Hearth::Validator.validate!(input[:attach_time], ::Time, context: "#{context}[:attach_time]")
        Hearth::Validator.validate!(input[:device], ::String, context: "#{context}[:device]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:delete_on_termination], ::TrueClass, ::FalseClass, context: "#{context}[:delete_on_termination]")
      end
    end

    class VolumeAttachmentList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VolumeAttachment.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VolumeDetail
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VolumeDetail, context: context)
        Hearth::Validator.validate!(input[:size], ::Integer, context: "#{context}[:size]")
      end
    end

    class VolumeIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class VolumeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Volume.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VolumeModification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VolumeModification, context: context)
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        Hearth::Validator.validate!(input[:modification_state], ::String, context: "#{context}[:modification_state]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
        Hearth::Validator.validate!(input[:target_size], ::Integer, context: "#{context}[:target_size]")
        Hearth::Validator.validate!(input[:target_iops], ::Integer, context: "#{context}[:target_iops]")
        Hearth::Validator.validate!(input[:target_volume_type], ::String, context: "#{context}[:target_volume_type]")
        Hearth::Validator.validate!(input[:target_throughput], ::Integer, context: "#{context}[:target_throughput]")
        Hearth::Validator.validate!(input[:target_multi_attach_enabled], ::TrueClass, ::FalseClass, context: "#{context}[:target_multi_attach_enabled]")
        Hearth::Validator.validate!(input[:original_size], ::Integer, context: "#{context}[:original_size]")
        Hearth::Validator.validate!(input[:original_iops], ::Integer, context: "#{context}[:original_iops]")
        Hearth::Validator.validate!(input[:original_volume_type], ::String, context: "#{context}[:original_volume_type]")
        Hearth::Validator.validate!(input[:original_throughput], ::Integer, context: "#{context}[:original_throughput]")
        Hearth::Validator.validate!(input[:original_multi_attach_enabled], ::TrueClass, ::FalseClass, context: "#{context}[:original_multi_attach_enabled]")
        Hearth::Validator.validate!(input[:progress], ::Integer, context: "#{context}[:progress]")
        Hearth::Validator.validate!(input[:start_time], ::Time, context: "#{context}[:start_time]")
        Hearth::Validator.validate!(input[:end_time], ::Time, context: "#{context}[:end_time]")
      end
    end

    class VolumeModificationList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VolumeModification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VolumeStatusAction
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VolumeStatusAction, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:event_id], ::String, context: "#{context}[:event_id]")
        Hearth::Validator.validate!(input[:event_type], ::String, context: "#{context}[:event_type]")
      end
    end

    class VolumeStatusActionsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VolumeStatusAction.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VolumeStatusAttachmentStatus
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VolumeStatusAttachmentStatus, context: context)
        Hearth::Validator.validate!(input[:io_performance], ::String, context: "#{context}[:io_performance]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
      end
    end

    class VolumeStatusAttachmentStatusList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VolumeStatusAttachmentStatus.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VolumeStatusDetails
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VolumeStatusDetails, context: context)
        Hearth::Validator.validate!(input[:name], ::String, context: "#{context}[:name]")
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
      end
    end

    class VolumeStatusDetailsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VolumeStatusDetails.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VolumeStatusEvent
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VolumeStatusEvent, context: context)
        Hearth::Validator.validate!(input[:description], ::String, context: "#{context}[:description]")
        Hearth::Validator.validate!(input[:event_id], ::String, context: "#{context}[:event_id]")
        Hearth::Validator.validate!(input[:event_type], ::String, context: "#{context}[:event_type]")
        Hearth::Validator.validate!(input[:not_after], ::Time, context: "#{context}[:not_after]")
        Hearth::Validator.validate!(input[:not_before], ::Time, context: "#{context}[:not_before]")
        Hearth::Validator.validate!(input[:instance_id], ::String, context: "#{context}[:instance_id]")
      end
    end

    class VolumeStatusEventsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VolumeStatusEvent.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VolumeStatusInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VolumeStatusInfo, context: context)
        VolumeStatusDetailsList.validate!(input[:details], context: "#{context}[:details]") unless input[:details].nil?
        Hearth::Validator.validate!(input[:status], ::String, context: "#{context}[:status]")
      end
    end

    class VolumeStatusItem
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VolumeStatusItem, context: context)
        VolumeStatusActionsList.validate!(input[:actions], context: "#{context}[:actions]") unless input[:actions].nil?
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:outpost_arn], ::String, context: "#{context}[:outpost_arn]")
        VolumeStatusEventsList.validate!(input[:events], context: "#{context}[:events]") unless input[:events].nil?
        Hearth::Validator.validate!(input[:volume_id], ::String, context: "#{context}[:volume_id]")
        VolumeStatusInfo.validate!(input[:volume_status], context: "#{context}[:volume_status]") unless input[:volume_status].nil?
        VolumeStatusAttachmentStatusList.validate!(input[:attachment_statuses], context: "#{context}[:attachment_statuses]") unless input[:attachment_statuses].nil?
      end
    end

    class VolumeStatusList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VolumeStatusItem.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class Vpc
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::Vpc, context: context)
        Hearth::Validator.validate!(input[:cidr_block], ::String, context: "#{context}[:cidr_block]")
        Hearth::Validator.validate!(input[:dhcp_options_id], ::String, context: "#{context}[:dhcp_options_id]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        Hearth::Validator.validate!(input[:instance_tenancy], ::String, context: "#{context}[:instance_tenancy]")
        VpcIpv6CidrBlockAssociationSet.validate!(input[:ipv6_cidr_block_association_set], context: "#{context}[:ipv6_cidr_block_association_set]") unless input[:ipv6_cidr_block_association_set].nil?
        VpcCidrBlockAssociationSet.validate!(input[:cidr_block_association_set], context: "#{context}[:cidr_block_association_set]") unless input[:cidr_block_association_set].nil?
        Hearth::Validator.validate!(input[:is_default], ::TrueClass, ::FalseClass, context: "#{context}[:is_default]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class VpcAttachment
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpcAttachment, context: context)
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class VpcAttachmentList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VpcAttachment.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VpcCidrBlockAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpcCidrBlockAssociation, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        Hearth::Validator.validate!(input[:cidr_block], ::String, context: "#{context}[:cidr_block]")
        VpcCidrBlockState.validate!(input[:cidr_block_state], context: "#{context}[:cidr_block_state]") unless input[:cidr_block_state].nil?
      end
    end

    class VpcCidrBlockAssociationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VpcCidrBlockAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VpcCidrBlockState
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpcCidrBlockState, context: context)
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:status_message], ::String, context: "#{context}[:status_message]")
      end
    end

    class VpcClassicLink
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpcClassicLink, context: context)
        Hearth::Validator.validate!(input[:classic_link_enabled], ::TrueClass, ::FalseClass, context: "#{context}[:classic_link_enabled]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
      end
    end

    class VpcClassicLinkIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class VpcClassicLinkList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VpcClassicLink.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VpcEndpoint
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpcEndpoint, context: context)
        Hearth::Validator.validate!(input[:vpc_endpoint_id], ::String, context: "#{context}[:vpc_endpoint_id]")
        Hearth::Validator.validate!(input[:vpc_endpoint_type], ::String, context: "#{context}[:vpc_endpoint_type]")
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:service_name], ::String, context: "#{context}[:service_name]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:policy_document], ::String, context: "#{context}[:policy_document]")
        ValueStringList.validate!(input[:route_table_ids], context: "#{context}[:route_table_ids]") unless input[:route_table_ids].nil?
        ValueStringList.validate!(input[:subnet_ids], context: "#{context}[:subnet_ids]") unless input[:subnet_ids].nil?
        GroupIdentifierSet.validate!(input[:groups], context: "#{context}[:groups]") unless input[:groups].nil?
        Hearth::Validator.validate!(input[:ip_address_type], ::String, context: "#{context}[:ip_address_type]")
        DnsOptions.validate!(input[:dns_options], context: "#{context}[:dns_options]") unless input[:dns_options].nil?
        Hearth::Validator.validate!(input[:private_dns_enabled], ::TrueClass, ::FalseClass, context: "#{context}[:private_dns_enabled]")
        Hearth::Validator.validate!(input[:requester_managed], ::TrueClass, ::FalseClass, context: "#{context}[:requester_managed]")
        ValueStringList.validate!(input[:network_interface_ids], context: "#{context}[:network_interface_ids]") unless input[:network_interface_ids].nil?
        DnsEntrySet.validate!(input[:dns_entries], context: "#{context}[:dns_entries]") unless input[:dns_entries].nil?
        Hearth::Validator.validate!(input[:creation_timestamp], ::Time, context: "#{context}[:creation_timestamp]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        LastError.validate!(input[:last_error], context: "#{context}[:last_error]") unless input[:last_error].nil?
      end
    end

    class VpcEndpointConnection
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpcEndpointConnection, context: context)
        Hearth::Validator.validate!(input[:service_id], ::String, context: "#{context}[:service_id]")
        Hearth::Validator.validate!(input[:vpc_endpoint_id], ::String, context: "#{context}[:vpc_endpoint_id]")
        Hearth::Validator.validate!(input[:vpc_endpoint_owner], ::String, context: "#{context}[:vpc_endpoint_owner]")
        Hearth::Validator.validate!(input[:vpc_endpoint_state], ::String, context: "#{context}[:vpc_endpoint_state]")
        Hearth::Validator.validate!(input[:creation_timestamp], ::Time, context: "#{context}[:creation_timestamp]")
        DnsEntrySet.validate!(input[:dns_entries], context: "#{context}[:dns_entries]") unless input[:dns_entries].nil?
        ValueStringList.validate!(input[:network_load_balancer_arns], context: "#{context}[:network_load_balancer_arns]") unless input[:network_load_balancer_arns].nil?
        ValueStringList.validate!(input[:gateway_load_balancer_arns], context: "#{context}[:gateway_load_balancer_arns]") unless input[:gateway_load_balancer_arns].nil?
        Hearth::Validator.validate!(input[:ip_address_type], ::String, context: "#{context}[:ip_address_type]")
      end
    end

    class VpcEndpointConnectionSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VpcEndpointConnection.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VpcEndpointIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class VpcEndpointRouteTableIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class VpcEndpointSecurityGroupIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class VpcEndpointServiceIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class VpcEndpointSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VpcEndpoint.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VpcEndpointSubnetIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class VpcIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class VpcIpv6CidrBlockAssociation
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpcIpv6CidrBlockAssociation, context: context)
        Hearth::Validator.validate!(input[:association_id], ::String, context: "#{context}[:association_id]")
        Hearth::Validator.validate!(input[:ipv6_cidr_block], ::String, context: "#{context}[:ipv6_cidr_block]")
        VpcCidrBlockState.validate!(input[:ipv6_cidr_block_state], context: "#{context}[:ipv6_cidr_block_state]") unless input[:ipv6_cidr_block_state].nil?
        Hearth::Validator.validate!(input[:network_border_group], ::String, context: "#{context}[:network_border_group]")
        Hearth::Validator.validate!(input[:ipv6_pool], ::String, context: "#{context}[:ipv6_pool]")
      end
    end

    class VpcIpv6CidrBlockAssociationSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VpcIpv6CidrBlockAssociation.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VpcList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Vpc.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VpcPeeringConnection
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpcPeeringConnection, context: context)
        VpcPeeringConnectionVpcInfo.validate!(input[:accepter_vpc_info], context: "#{context}[:accepter_vpc_info]") unless input[:accepter_vpc_info].nil?
        Hearth::Validator.validate!(input[:expiration_time], ::Time, context: "#{context}[:expiration_time]")
        VpcPeeringConnectionVpcInfo.validate!(input[:requester_vpc_info], context: "#{context}[:requester_vpc_info]") unless input[:requester_vpc_info].nil?
        VpcPeeringConnectionStateReason.validate!(input[:status], context: "#{context}[:status]") unless input[:status].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        Hearth::Validator.validate!(input[:vpc_peering_connection_id], ::String, context: "#{context}[:vpc_peering_connection_id]")
      end
    end

    class VpcPeeringConnectionIdList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class VpcPeeringConnectionList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VpcPeeringConnection.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VpcPeeringConnectionOptionsDescription
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpcPeeringConnectionOptionsDescription, context: context)
        Hearth::Validator.validate!(input[:allow_dns_resolution_from_remote_vpc], ::TrueClass, ::FalseClass, context: "#{context}[:allow_dns_resolution_from_remote_vpc]")
        Hearth::Validator.validate!(input[:allow_egress_from_local_classic_link_to_remote_vpc], ::TrueClass, ::FalseClass, context: "#{context}[:allow_egress_from_local_classic_link_to_remote_vpc]")
        Hearth::Validator.validate!(input[:allow_egress_from_local_vpc_to_remote_classic_link], ::TrueClass, ::FalseClass, context: "#{context}[:allow_egress_from_local_vpc_to_remote_classic_link]")
      end
    end

    class VpcPeeringConnectionStateReason
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpcPeeringConnectionStateReason, context: context)
        Hearth::Validator.validate!(input[:code], ::String, context: "#{context}[:code]")
        Hearth::Validator.validate!(input[:message], ::String, context: "#{context}[:message]")
      end
    end

    class VpcPeeringConnectionVpcInfo
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpcPeeringConnectionVpcInfo, context: context)
        Hearth::Validator.validate!(input[:cidr_block], ::String, context: "#{context}[:cidr_block]")
        Ipv6CidrBlockSet.validate!(input[:ipv6_cidr_block_set], context: "#{context}[:ipv6_cidr_block_set]") unless input[:ipv6_cidr_block_set].nil?
        CidrBlockSet.validate!(input[:cidr_block_set], context: "#{context}[:cidr_block_set]") unless input[:cidr_block_set].nil?
        Hearth::Validator.validate!(input[:owner_id], ::String, context: "#{context}[:owner_id]")
        VpcPeeringConnectionOptionsDescription.validate!(input[:peering_options], context: "#{context}[:peering_options]") unless input[:peering_options].nil?
        Hearth::Validator.validate!(input[:vpc_id], ::String, context: "#{context}[:vpc_id]")
        Hearth::Validator.validate!(input[:region], ::String, context: "#{context}[:region]")
      end
    end

    class VpnConnection
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpnConnection, context: context)
        Hearth::Validator.validate!(input[:customer_gateway_configuration], ::String, context: "#{context}[:customer_gateway_configuration]")
        Hearth::Validator.validate!(input[:customer_gateway_id], ::String, context: "#{context}[:customer_gateway_id]")
        Hearth::Validator.validate!(input[:category], ::String, context: "#{context}[:category]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        Hearth::Validator.validate!(input[:vpn_connection_id], ::String, context: "#{context}[:vpn_connection_id]")
        Hearth::Validator.validate!(input[:vpn_gateway_id], ::String, context: "#{context}[:vpn_gateway_id]")
        Hearth::Validator.validate!(input[:transit_gateway_id], ::String, context: "#{context}[:transit_gateway_id]")
        Hearth::Validator.validate!(input[:core_network_arn], ::String, context: "#{context}[:core_network_arn]")
        Hearth::Validator.validate!(input[:core_network_attachment_arn], ::String, context: "#{context}[:core_network_attachment_arn]")
        Hearth::Validator.validate!(input[:gateway_association_state], ::String, context: "#{context}[:gateway_association_state]")
        VpnConnectionOptions.validate!(input[:options], context: "#{context}[:options]") unless input[:options].nil?
        VpnStaticRouteList.validate!(input[:routes], context: "#{context}[:routes]") unless input[:routes].nil?
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
        VgwTelemetryList.validate!(input[:vgw_telemetry], context: "#{context}[:vgw_telemetry]") unless input[:vgw_telemetry].nil?
      end
    end

    class VpnConnectionDeviceType
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpnConnectionDeviceType, context: context)
        Hearth::Validator.validate!(input[:vpn_connection_device_type_id], ::String, context: "#{context}[:vpn_connection_device_type_id]")
        Hearth::Validator.validate!(input[:vendor], ::String, context: "#{context}[:vendor]")
        Hearth::Validator.validate!(input[:platform], ::String, context: "#{context}[:platform]")
        Hearth::Validator.validate!(input[:software], ::String, context: "#{context}[:software]")
      end
    end

    class VpnConnectionDeviceTypeList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VpnConnectionDeviceType.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VpnConnectionIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class VpnConnectionList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VpnConnection.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VpnConnectionOptions
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpnConnectionOptions, context: context)
        Hearth::Validator.validate!(input[:enable_acceleration], ::TrueClass, ::FalseClass, context: "#{context}[:enable_acceleration]")
        Hearth::Validator.validate!(input[:static_routes_only], ::TrueClass, ::FalseClass, context: "#{context}[:static_routes_only]")
        Hearth::Validator.validate!(input[:local_ipv4_network_cidr], ::String, context: "#{context}[:local_ipv4_network_cidr]")
        Hearth::Validator.validate!(input[:remote_ipv4_network_cidr], ::String, context: "#{context}[:remote_ipv4_network_cidr]")
        Hearth::Validator.validate!(input[:local_ipv6_network_cidr], ::String, context: "#{context}[:local_ipv6_network_cidr]")
        Hearth::Validator.validate!(input[:remote_ipv6_network_cidr], ::String, context: "#{context}[:remote_ipv6_network_cidr]")
        Hearth::Validator.validate!(input[:tunnel_inside_ip_version], ::String, context: "#{context}[:tunnel_inside_ip_version]")
        TunnelOptionsList.validate!(input[:tunnel_options], context: "#{context}[:tunnel_options]") unless input[:tunnel_options].nil?
      end
    end

    class VpnConnectionOptionsSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpnConnectionOptionsSpecification, context: context)
        Hearth::Validator.validate!(input[:enable_acceleration], ::TrueClass, ::FalseClass, context: "#{context}[:enable_acceleration]")
        Hearth::Validator.validate!(input[:static_routes_only], ::TrueClass, ::FalseClass, context: "#{context}[:static_routes_only]")
        Hearth::Validator.validate!(input[:tunnel_inside_ip_version], ::String, context: "#{context}[:tunnel_inside_ip_version]")
        VpnTunnelOptionsSpecificationsList.validate!(input[:tunnel_options], context: "#{context}[:tunnel_options]") unless input[:tunnel_options].nil?
        Hearth::Validator.validate!(input[:local_ipv4_network_cidr], ::String, context: "#{context}[:local_ipv4_network_cidr]")
        Hearth::Validator.validate!(input[:remote_ipv4_network_cidr], ::String, context: "#{context}[:remote_ipv4_network_cidr]")
        Hearth::Validator.validate!(input[:local_ipv6_network_cidr], ::String, context: "#{context}[:local_ipv6_network_cidr]")
        Hearth::Validator.validate!(input[:remote_ipv6_network_cidr], ::String, context: "#{context}[:remote_ipv6_network_cidr]")
      end
    end

    class VpnGateway
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpnGateway, context: context)
        Hearth::Validator.validate!(input[:availability_zone], ::String, context: "#{context}[:availability_zone]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
        Hearth::Validator.validate!(input[:type], ::String, context: "#{context}[:type]")
        VpcAttachmentList.validate!(input[:vpc_attachments], context: "#{context}[:vpc_attachments]") unless input[:vpc_attachments].nil?
        Hearth::Validator.validate!(input[:vpn_gateway_id], ::String, context: "#{context}[:vpn_gateway_id]")
        Hearth::Validator.validate!(input[:amazon_side_asn], ::Integer, context: "#{context}[:amazon_side_asn]")
        TagList.validate!(input[:tags], context: "#{context}[:tags]") unless input[:tags].nil?
      end
    end

    class VpnGatewayIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class VpnGatewayList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VpnGateway.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VpnStaticRoute
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpnStaticRoute, context: context)
        Hearth::Validator.validate!(input[:destination_cidr_block], ::String, context: "#{context}[:destination_cidr_block]")
        Hearth::Validator.validate!(input[:source], ::String, context: "#{context}[:source]")
        Hearth::Validator.validate!(input[:state], ::String, context: "#{context}[:state]")
      end
    end

    class VpnStaticRouteList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VpnStaticRoute.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class VpnTunnelOptionsSpecification
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::VpnTunnelOptionsSpecification, context: context)
        Hearth::Validator.validate!(input[:tunnel_inside_cidr], ::String, context: "#{context}[:tunnel_inside_cidr]")
        Hearth::Validator.validate!(input[:tunnel_inside_ipv6_cidr], ::String, context: "#{context}[:tunnel_inside_ipv6_cidr]")
        Hearth::Validator.validate!(input[:pre_shared_key], ::String, context: "#{context}[:pre_shared_key]")
        Hearth::Validator.validate!(input[:phase1_lifetime_seconds], ::Integer, context: "#{context}[:phase1_lifetime_seconds]")
        Hearth::Validator.validate!(input[:phase2_lifetime_seconds], ::Integer, context: "#{context}[:phase2_lifetime_seconds]")
        Hearth::Validator.validate!(input[:rekey_margin_time_seconds], ::Integer, context: "#{context}[:rekey_margin_time_seconds]")
        Hearth::Validator.validate!(input[:rekey_fuzz_percentage], ::Integer, context: "#{context}[:rekey_fuzz_percentage]")
        Hearth::Validator.validate!(input[:replay_window_size], ::Integer, context: "#{context}[:replay_window_size]")
        Hearth::Validator.validate!(input[:dpd_timeout_seconds], ::Integer, context: "#{context}[:dpd_timeout_seconds]")
        Hearth::Validator.validate!(input[:dpd_timeout_action], ::String, context: "#{context}[:dpd_timeout_action]")
        Phase1EncryptionAlgorithmsRequestList.validate!(input[:phase1_encryption_algorithms], context: "#{context}[:phase1_encryption_algorithms]") unless input[:phase1_encryption_algorithms].nil?
        Phase2EncryptionAlgorithmsRequestList.validate!(input[:phase2_encryption_algorithms], context: "#{context}[:phase2_encryption_algorithms]") unless input[:phase2_encryption_algorithms].nil?
        Phase1IntegrityAlgorithmsRequestList.validate!(input[:phase1_integrity_algorithms], context: "#{context}[:phase1_integrity_algorithms]") unless input[:phase1_integrity_algorithms].nil?
        Phase2IntegrityAlgorithmsRequestList.validate!(input[:phase2_integrity_algorithms], context: "#{context}[:phase2_integrity_algorithms]") unless input[:phase2_integrity_algorithms].nil?
        Phase1DHGroupNumbersRequestList.validate!(input[:phase1_dh_group_numbers], context: "#{context}[:phase1_dh_group_numbers]") unless input[:phase1_dh_group_numbers].nil?
        Phase2DHGroupNumbersRequestList.validate!(input[:phase2_dh_group_numbers], context: "#{context}[:phase2_dh_group_numbers]") unless input[:phase2_dh_group_numbers].nil?
        IKEVersionsRequestList.validate!(input[:ike_versions], context: "#{context}[:ike_versions]") unless input[:ike_versions].nil?
        Hearth::Validator.validate!(input[:startup_action], ::String, context: "#{context}[:startup_action]")
      end
    end

    class VpnTunnelOptionsSpecificationsList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          VpnTunnelOptionsSpecification.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

    class WithdrawByoipCidrInput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::WithdrawByoipCidrInput, context: context)
        Hearth::Validator.validate!(input[:cidr], ::String, context: "#{context}[:cidr]")
        Hearth::Validator.validate!(input[:dry_run], ::TrueClass, ::FalseClass, context: "#{context}[:dry_run]")
      end
    end

    class WithdrawByoipCidrOutput
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, Types::WithdrawByoipCidrOutput, context: context)
        ByoipCidr.validate!(input[:byoip_cidr], context: "#{context}[:byoip_cidr]") unless input[:byoip_cidr].nil?
      end
    end

    class ZoneIdStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class ZoneNameStringList
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          Hearth::Validator.validate!(element, ::String, context: "#{context}[#{index}]")
        end
      end
    end

    class SnapshotTierStatusSet
      def self.validate!(input, context:)
        Hearth::Validator.validate!(input, ::Array, context: context)
        input.each_with_index do |element, index|
          SnapshotTierStatus.validate!(element, context: "#{context}[#{index}]") unless element.nil?
        end
      end
    end

  end
end
