# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/smithy-lang/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

module AWS::SDK::EC2
  class Client < Hearth::Client

    def self.plugins: () -> Hearth::PluginList[Config]

    def initialize: (?::Hash[::Symbol, untyped] options) -> void |
      (
        ?auth_resolver: Hearth::_AuthResolver[Auth::Params],
        ?auth_schemes: Array[Hearth::AuthSchemes::Base],
        ?credentials_provider: Hearth::IdentityProvider,
        ?disable_host_prefix: bool,
        ?endpoint: String,
        ?endpoint_resolver: Hearth::_EndpointResolver[Endpoint::Params],
        ?http_client: Hearth::HTTP::Client,
        ?interceptors: Hearth::InterceptorList[Config],
        ?logger: Logger,
        ?plugins: Hearth::PluginList[Config],
        ?profile: String,
        ?region: String,
        ?retry_strategy: Hearth::_RetryStrategy,
        ?stub_responses: bool,
        ?stubs: Hearth::Stubs,
        ?use_dualstack_endpoint: bool,
        ?use_fips_endpoint: bool,
        ?validate_input: bool
      ) -> void

    attr_reader config: Config

    def accept_address_transfer: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AcceptAddressTransferOutput] |
      (?Types::AcceptAddressTransferInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AcceptAddressTransferOutput] |
      (
        address: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::AcceptAddressTransferOutput]

    def accept_reserved_instances_exchange_quote: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AcceptReservedInstancesExchangeQuoteOutput] |
      (?Types::AcceptReservedInstancesExchangeQuoteInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AcceptReservedInstancesExchangeQuoteOutput] |
      (
        ?dry_run: bool,
        reserved_instance_ids: ::Array[::String],
        ?target_configurations: ::Array[{
          instance_count: ::Integer,
          offering_id: ::String
        }]
      ) -> Hearth::Output[Types::AcceptReservedInstancesExchangeQuoteOutput]

    def accept_transit_gateway_multicast_domain_associations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AcceptTransitGatewayMulticastDomainAssociationsOutput] |
      (?Types::AcceptTransitGatewayMulticastDomainAssociationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AcceptTransitGatewayMulticastDomainAssociationsOutput] |
      (
        ?transit_gateway_multicast_domain_id: ::String,
        ?transit_gateway_attachment_id: ::String,
        ?subnet_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::AcceptTransitGatewayMulticastDomainAssociationsOutput]

    def accept_transit_gateway_peering_attachment: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AcceptTransitGatewayPeeringAttachmentOutput] |
      (?Types::AcceptTransitGatewayPeeringAttachmentInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AcceptTransitGatewayPeeringAttachmentOutput] |
      (
        transit_gateway_attachment_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::AcceptTransitGatewayPeeringAttachmentOutput]

    def accept_transit_gateway_vpc_attachment: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AcceptTransitGatewayVpcAttachmentOutput] |
      (?Types::AcceptTransitGatewayVpcAttachmentInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AcceptTransitGatewayVpcAttachmentOutput] |
      (
        transit_gateway_attachment_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::AcceptTransitGatewayVpcAttachmentOutput]

    def accept_vpc_endpoint_connections: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AcceptVpcEndpointConnectionsOutput] |
      (?Types::AcceptVpcEndpointConnectionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AcceptVpcEndpointConnectionsOutput] |
      (
        ?dry_run: bool,
        service_id: ::String,
        vpc_endpoint_ids: ::Array[::String]
      ) -> Hearth::Output[Types::AcceptVpcEndpointConnectionsOutput]

    def accept_vpc_peering_connection: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AcceptVpcPeeringConnectionOutput] |
      (?Types::AcceptVpcPeeringConnectionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AcceptVpcPeeringConnectionOutput] |
      (
        ?dry_run: bool,
        vpc_peering_connection_id: ::String
      ) -> Hearth::Output[Types::AcceptVpcPeeringConnectionOutput]

    def advertise_byoip_cidr: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AdvertiseByoipCidrOutput] |
      (?Types::AdvertiseByoipCidrInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AdvertiseByoipCidrOutput] |
      (
        cidr: ::String,
        ?asn: ::String,
        ?dry_run: bool,
        ?network_border_group: ::String
      ) -> Hearth::Output[Types::AdvertiseByoipCidrOutput]

    def allocate_address: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AllocateAddressOutput] |
      (?Types::AllocateAddressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AllocateAddressOutput] |
      (
        ?domain: ("vpc" | "standard"),
        ?address: ::String,
        ?public_ipv4_pool: ::String,
        ?network_border_group: ::String,
        ?customer_owned_ipv4_pool: ::String,
        ?dry_run: bool,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::AllocateAddressOutput]

    def allocate_hosts: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AllocateHostsOutput] |
      (?Types::AllocateHostsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AllocateHostsOutput] |
      (
        ?auto_placement: ("on" | "off"),
        availability_zone: ::String,
        ?client_token: ::String,
        ?instance_type: ::String,
        ?instance_family: ::String,
        ?quantity: ::Integer,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?host_recovery: ("on" | "off"),
        ?outpost_arn: ::String,
        ?host_maintenance: ("on" | "off"),
        ?asset_ids: ::Array[::String]
      ) -> Hearth::Output[Types::AllocateHostsOutput]

    def allocate_ipam_pool_cidr: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AllocateIpamPoolCidrOutput] |
      (?Types::AllocateIpamPoolCidrInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AllocateIpamPoolCidrOutput] |
      (
        ?dry_run: bool,
        ipam_pool_id: ::String,
        ?cidr: ::String,
        ?netmask_length: ::Integer,
        ?client_token: ::String,
        ?description: ::String,
        ?preview_next_cidr: bool,
        ?allowed_cidrs: ::Array[::String],
        ?disallowed_cidrs: ::Array[::String]
      ) -> Hearth::Output[Types::AllocateIpamPoolCidrOutput]

    def apply_security_groups_to_client_vpn_target_network: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ApplySecurityGroupsToClientVpnTargetNetworkOutput] |
      (?Types::ApplySecurityGroupsToClientVpnTargetNetworkInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ApplySecurityGroupsToClientVpnTargetNetworkOutput] |
      (
        client_vpn_endpoint_id: ::String,
        vpc_id: ::String,
        security_group_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::ApplySecurityGroupsToClientVpnTargetNetworkOutput]

    def assign_ipv6_addresses: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssignIpv6AddressesOutput] |
      (?Types::AssignIpv6AddressesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssignIpv6AddressesOutput] |
      (
        ?ipv6_address_count: ::Integer,
        ?ipv6_addresses: ::Array[::String],
        ?ipv6_prefix_count: ::Integer,
        ?ipv6_prefixes: ::Array[::String],
        network_interface_id: ::String
      ) -> Hearth::Output[Types::AssignIpv6AddressesOutput]

    def assign_private_ip_addresses: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssignPrivateIpAddressesOutput] |
      (?Types::AssignPrivateIpAddressesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssignPrivateIpAddressesOutput] |
      (
        ?allow_reassignment: bool,
        network_interface_id: ::String,
        ?private_ip_addresses: ::Array[::String],
        ?secondary_private_ip_address_count: ::Integer,
        ?ipv4_prefixes: ::Array[::String],
        ?ipv4_prefix_count: ::Integer
      ) -> Hearth::Output[Types::AssignPrivateIpAddressesOutput]

    def assign_private_nat_gateway_address: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssignPrivateNatGatewayAddressOutput] |
      (?Types::AssignPrivateNatGatewayAddressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssignPrivateNatGatewayAddressOutput] |
      (
        nat_gateway_id: ::String,
        ?private_ip_addresses: ::Array[::String],
        ?private_ip_address_count: ::Integer,
        ?dry_run: bool
      ) -> Hearth::Output[Types::AssignPrivateNatGatewayAddressOutput]

    def associate_address: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateAddressOutput] |
      (?Types::AssociateAddressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateAddressOutput] |
      (
        ?allocation_id: ::String,
        ?instance_id: ::String,
        ?public_ip: ::String,
        ?allow_reassociation: bool,
        ?dry_run: bool,
        ?network_interface_id: ::String,
        ?private_ip_address: ::String
      ) -> Hearth::Output[Types::AssociateAddressOutput]

    def associate_client_vpn_target_network: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateClientVpnTargetNetworkOutput] |
      (?Types::AssociateClientVpnTargetNetworkInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateClientVpnTargetNetworkOutput] |
      (
        client_vpn_endpoint_id: ::String,
        subnet_id: ::String,
        ?client_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::AssociateClientVpnTargetNetworkOutput]

    def associate_dhcp_options: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateDhcpOptionsOutput] |
      (?Types::AssociateDhcpOptionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateDhcpOptionsOutput] |
      (
        dhcp_options_id: ::String,
        vpc_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::AssociateDhcpOptionsOutput]

    def associate_enclave_certificate_iam_role: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateEnclaveCertificateIamRoleOutput] |
      (?Types::AssociateEnclaveCertificateIamRoleInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateEnclaveCertificateIamRoleOutput] |
      (
        certificate_arn: ::String,
        role_arn: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::AssociateEnclaveCertificateIamRoleOutput]

    def associate_iam_instance_profile: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateIamInstanceProfileOutput] |
      (?Types::AssociateIamInstanceProfileInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateIamInstanceProfileOutput] |
      (
        iam_instance_profile: {
          arn: ::String,
          name: ::String
        },
        instance_id: ::String
      ) -> Hearth::Output[Types::AssociateIamInstanceProfileOutput]

    def associate_instance_event_window: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateInstanceEventWindowOutput] |
      (?Types::AssociateInstanceEventWindowInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateInstanceEventWindowOutput] |
      (
        ?dry_run: bool,
        instance_event_window_id: ::String,
        association_target: {
          instance_ids: ::Array[::String],
          instance_tags: ::Array[Types::Tag],
          dedicated_host_ids: ::Array[::String]
        }
      ) -> Hearth::Output[Types::AssociateInstanceEventWindowOutput]

    def associate_ipam_byoasn: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateIpamByoasnOutput] |
      (?Types::AssociateIpamByoasnInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateIpamByoasnOutput] |
      (
        ?dry_run: bool,
        asn: ::String,
        cidr: ::String
      ) -> Hearth::Output[Types::AssociateIpamByoasnOutput]

    def associate_ipam_resource_discovery: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateIpamResourceDiscoveryOutput] |
      (?Types::AssociateIpamResourceDiscoveryInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateIpamResourceDiscoveryOutput] |
      (
        ?dry_run: bool,
        ipam_id: ::String,
        ipam_resource_discovery_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?client_token: ::String
      ) -> Hearth::Output[Types::AssociateIpamResourceDiscoveryOutput]

    def associate_nat_gateway_address: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateNatGatewayAddressOutput] |
      (?Types::AssociateNatGatewayAddressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateNatGatewayAddressOutput] |
      (
        nat_gateway_id: ::String,
        allocation_ids: ::Array[::String],
        ?private_ip_addresses: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::AssociateNatGatewayAddressOutput]

    def associate_route_table: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateRouteTableOutput] |
      (?Types::AssociateRouteTableInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateRouteTableOutput] |
      (
        ?dry_run: bool,
        route_table_id: ::String,
        ?subnet_id: ::String,
        ?gateway_id: ::String
      ) -> Hearth::Output[Types::AssociateRouteTableOutput]

    def associate_subnet_cidr_block: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateSubnetCidrBlockOutput] |
      (?Types::AssociateSubnetCidrBlockInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateSubnetCidrBlockOutput] |
      (
        ?ipv6_cidr_block: ::String,
        subnet_id: ::String,
        ?ipv6_ipam_pool_id: ::String,
        ?ipv6_netmask_length: ::Integer
      ) -> Hearth::Output[Types::AssociateSubnetCidrBlockOutput]

    def associate_transit_gateway_multicast_domain: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateTransitGatewayMulticastDomainOutput] |
      (?Types::AssociateTransitGatewayMulticastDomainInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateTransitGatewayMulticastDomainOutput] |
      (
        transit_gateway_multicast_domain_id: ::String,
        transit_gateway_attachment_id: ::String,
        subnet_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::AssociateTransitGatewayMulticastDomainOutput]

    def associate_transit_gateway_policy_table: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateTransitGatewayPolicyTableOutput] |
      (?Types::AssociateTransitGatewayPolicyTableInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateTransitGatewayPolicyTableOutput] |
      (
        transit_gateway_policy_table_id: ::String,
        transit_gateway_attachment_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::AssociateTransitGatewayPolicyTableOutput]

    def associate_transit_gateway_route_table: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateTransitGatewayRouteTableOutput] |
      (?Types::AssociateTransitGatewayRouteTableInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateTransitGatewayRouteTableOutput] |
      (
        transit_gateway_route_table_id: ::String,
        transit_gateway_attachment_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::AssociateTransitGatewayRouteTableOutput]

    def associate_trunk_interface: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateTrunkInterfaceOutput] |
      (?Types::AssociateTrunkInterfaceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateTrunkInterfaceOutput] |
      (
        branch_interface_id: ::String,
        trunk_interface_id: ::String,
        ?vlan_id: ::Integer,
        ?gre_key: ::Integer,
        ?client_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::AssociateTrunkInterfaceOutput]

    def associate_vpc_cidr_block: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateVpcCidrBlockOutput] |
      (?Types::AssociateVpcCidrBlockInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AssociateVpcCidrBlockOutput] |
      (
        ?amazon_provided_ipv6_cidr_block: bool,
        ?cidr_block: ::String,
        vpc_id: ::String,
        ?ipv6_cidr_block_network_border_group: ::String,
        ?ipv6_pool: ::String,
        ?ipv6_cidr_block: ::String,
        ?ipv4_ipam_pool_id: ::String,
        ?ipv4_netmask_length: ::Integer,
        ?ipv6_ipam_pool_id: ::String,
        ?ipv6_netmask_length: ::Integer
      ) -> Hearth::Output[Types::AssociateVpcCidrBlockOutput]

    def attach_classic_link_vpc: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AttachClassicLinkVpcOutput] |
      (?Types::AttachClassicLinkVpcInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AttachClassicLinkVpcOutput] |
      (
        ?dry_run: bool,
        groups: ::Array[::String],
        instance_id: ::String,
        vpc_id: ::String
      ) -> Hearth::Output[Types::AttachClassicLinkVpcOutput]

    def attach_internet_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AttachInternetGatewayOutput] |
      (?Types::AttachInternetGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AttachInternetGatewayOutput] |
      (
        ?dry_run: bool,
        internet_gateway_id: ::String,
        vpc_id: ::String
      ) -> Hearth::Output[Types::AttachInternetGatewayOutput]

    def attach_network_interface: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AttachNetworkInterfaceOutput] |
      (?Types::AttachNetworkInterfaceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AttachNetworkInterfaceOutput] |
      (
        device_index: ::Integer,
        ?dry_run: bool,
        instance_id: ::String,
        network_interface_id: ::String,
        ?network_card_index: ::Integer,
        ?ena_srd_specification: {
          ena_srd_enabled: bool,
          ena_srd_udp_specification: {
            ena_srd_udp_enabled: bool
          }
        }
      ) -> Hearth::Output[Types::AttachNetworkInterfaceOutput]

    def attach_verified_access_trust_provider: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AttachVerifiedAccessTrustProviderOutput] |
      (?Types::AttachVerifiedAccessTrustProviderInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AttachVerifiedAccessTrustProviderOutput] |
      (
        verified_access_instance_id: ::String,
        verified_access_trust_provider_id: ::String,
        ?client_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::AttachVerifiedAccessTrustProviderOutput]

    def attach_volume: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AttachVolumeOutput] |
      (?Types::AttachVolumeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AttachVolumeOutput] |
      (
        device: ::String,
        instance_id: ::String,
        volume_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::AttachVolumeOutput]

    def attach_vpn_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AttachVpnGatewayOutput] |
      (?Types::AttachVpnGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AttachVpnGatewayOutput] |
      (
        vpc_id: ::String,
        vpn_gateway_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::AttachVpnGatewayOutput]

    def authorize_client_vpn_ingress: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AuthorizeClientVpnIngressOutput] |
      (?Types::AuthorizeClientVpnIngressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AuthorizeClientVpnIngressOutput] |
      (
        client_vpn_endpoint_id: ::String,
        target_network_cidr: ::String,
        ?access_group_id: ::String,
        ?authorize_all_groups: bool,
        ?description: ::String,
        ?client_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::AuthorizeClientVpnIngressOutput]

    def authorize_security_group_egress: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AuthorizeSecurityGroupEgressOutput] |
      (?Types::AuthorizeSecurityGroupEgressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AuthorizeSecurityGroupEgressOutput] |
      (
        ?dry_run: bool,
        group_id: ::String,
        ?ip_permissions: ::Array[{
          from_port: ::Integer,
          ip_protocol: ::String,
          ip_ranges: ::Array[Types::IpRange],
          ipv6_ranges: ::Array[Types::Ipv6Range],
          prefix_list_ids: ::Array[Types::PrefixListId],
          to_port: ::Integer,
          user_id_group_pairs: ::Array[Types::UserIdGroupPair]
        }],
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?cidr_ip: ::String,
        ?from_port: ::Integer,
        ?ip_protocol: ::String,
        ?to_port: ::Integer,
        ?source_security_group_name: ::String,
        ?source_security_group_owner_id: ::String
      ) -> Hearth::Output[Types::AuthorizeSecurityGroupEgressOutput]

    def authorize_security_group_ingress: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AuthorizeSecurityGroupIngressOutput] |
      (?Types::AuthorizeSecurityGroupIngressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::AuthorizeSecurityGroupIngressOutput] |
      (
        ?cidr_ip: ::String,
        ?from_port: ::Integer,
        ?group_id: ::String,
        ?group_name: ::String,
        ?ip_permissions: ::Array[{
          from_port: ::Integer,
          ip_protocol: ::String,
          ip_ranges: ::Array[Types::IpRange],
          ipv6_ranges: ::Array[Types::Ipv6Range],
          prefix_list_ids: ::Array[Types::PrefixListId],
          to_port: ::Integer,
          user_id_group_pairs: ::Array[Types::UserIdGroupPair]
        }],
        ?ip_protocol: ::String,
        ?source_security_group_name: ::String,
        ?source_security_group_owner_id: ::String,
        ?to_port: ::Integer,
        ?dry_run: bool,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::AuthorizeSecurityGroupIngressOutput]

    def bundle_instance: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::BundleInstanceOutput] |
      (?Types::BundleInstanceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::BundleInstanceOutput] |
      (
        instance_id: ::String,
        storage: {
          s3: {
            aws_access_key_id: ::String,
            bucket: ::String,
            prefix: ::String,
            upload_policy: ::String,
            upload_policy_signature: ::String
          }
        },
        ?dry_run: bool
      ) -> Hearth::Output[Types::BundleInstanceOutput]

    def cancel_bundle_task: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelBundleTaskOutput] |
      (?Types::CancelBundleTaskInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelBundleTaskOutput] |
      (
        bundle_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::CancelBundleTaskOutput]

    def cancel_capacity_reservation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelCapacityReservationOutput] |
      (?Types::CancelCapacityReservationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelCapacityReservationOutput] |
      (
        capacity_reservation_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::CancelCapacityReservationOutput]

    def cancel_capacity_reservation_fleets: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelCapacityReservationFleetsOutput] |
      (?Types::CancelCapacityReservationFleetsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelCapacityReservationFleetsOutput] |
      (
        ?dry_run: bool,
        capacity_reservation_fleet_ids: ::Array[::String]
      ) -> Hearth::Output[Types::CancelCapacityReservationFleetsOutput]

    def cancel_conversion_task: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelConversionTaskOutput] |
      (?Types::CancelConversionTaskInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelConversionTaskOutput] |
      (
        conversion_task_id: ::String,
        ?dry_run: bool,
        ?reason_message: ::String
      ) -> Hearth::Output[Types::CancelConversionTaskOutput]

    def cancel_export_task: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelExportTaskOutput] |
      (?Types::CancelExportTaskInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelExportTaskOutput] |
      (
        export_task_id: ::String
      ) -> Hearth::Output[Types::CancelExportTaskOutput]

    def cancel_image_launch_permission: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelImageLaunchPermissionOutput] |
      (?Types::CancelImageLaunchPermissionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelImageLaunchPermissionOutput] |
      (
        image_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::CancelImageLaunchPermissionOutput]

    def cancel_import_task: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelImportTaskOutput] |
      (?Types::CancelImportTaskInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelImportTaskOutput] |
      (
        ?cancel_reason: ::String,
        ?dry_run: bool,
        ?import_task_id: ::String
      ) -> Hearth::Output[Types::CancelImportTaskOutput]

    def cancel_reserved_instances_listing: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelReservedInstancesListingOutput] |
      (?Types::CancelReservedInstancesListingInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelReservedInstancesListingOutput] |
      (
        reserved_instances_listing_id: ::String
      ) -> Hearth::Output[Types::CancelReservedInstancesListingOutput]

    def cancel_spot_fleet_requests: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelSpotFleetRequestsOutput] |
      (?Types::CancelSpotFleetRequestsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelSpotFleetRequestsOutput] |
      (
        ?dry_run: bool,
        spot_fleet_request_ids: ::Array[::String],
        terminate_instances: bool
      ) -> Hearth::Output[Types::CancelSpotFleetRequestsOutput]

    def cancel_spot_instance_requests: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelSpotInstanceRequestsOutput] |
      (?Types::CancelSpotInstanceRequestsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CancelSpotInstanceRequestsOutput] |
      (
        ?dry_run: bool,
        spot_instance_request_ids: ::Array[::String]
      ) -> Hearth::Output[Types::CancelSpotInstanceRequestsOutput]

    def confirm_product_instance: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ConfirmProductInstanceOutput] |
      (?Types::ConfirmProductInstanceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ConfirmProductInstanceOutput] |
      (
        instance_id: ::String,
        product_code: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ConfirmProductInstanceOutput]

    def copy_fpga_image: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CopyFpgaImageOutput] |
      (?Types::CopyFpgaImageInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CopyFpgaImageOutput] |
      (
        ?dry_run: bool,
        source_fpga_image_id: ::String,
        ?description: ::String,
        ?name: ::String,
        source_region: ::String,
        ?client_token: ::String
      ) -> Hearth::Output[Types::CopyFpgaImageOutput]

    def copy_image: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CopyImageOutput] |
      (?Types::CopyImageInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CopyImageOutput] |
      (
        ?client_token: ::String,
        ?description: ::String,
        ?encrypted: bool,
        ?kms_key_id: ::String,
        name: ::String,
        source_image_id: ::String,
        source_region: ::String,
        ?destination_outpost_arn: ::String,
        ?dry_run: bool,
        ?copy_image_tags: bool
      ) -> Hearth::Output[Types::CopyImageOutput]

    def copy_snapshot: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CopySnapshotOutput] |
      (?Types::CopySnapshotInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CopySnapshotOutput] |
      (
        ?description: ::String,
        ?destination_outpost_arn: ::String,
        ?destination_region: ::String,
        ?encrypted: bool,
        ?kms_key_id: ::String,
        ?presigned_url: ::String,
        source_region: ::String,
        source_snapshot_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CopySnapshotOutput]

    def create_capacity_reservation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateCapacityReservationOutput] |
      (?Types::CreateCapacityReservationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateCapacityReservationOutput] |
      (
        ?client_token: ::String,
        instance_type: ::String,
        instance_platform: ("Linux/UNIX" | "Red Hat Enterprise Linux" | "SUSE Linux" | "Windows" | "Windows with SQL Server" | "Windows with SQL Server Enterprise" | "Windows with SQL Server Standard" | "Windows with SQL Server Web" | "Linux with SQL Server Standard" | "Linux with SQL Server Web" | "Linux with SQL Server Enterprise" | "RHEL with SQL Server Standard" | "RHEL with SQL Server Enterprise" | "RHEL with SQL Server Web" | "RHEL with HA" | "RHEL with HA and SQL Server Standard" | "RHEL with HA and SQL Server Enterprise" | "Ubuntu Pro"),
        ?availability_zone: ::String,
        ?availability_zone_id: ::String,
        ?tenancy: ("default" | "dedicated"),
        instance_count: ::Integer,
        ?ebs_optimized: bool,
        ?ephemeral_storage: bool,
        ?end_date: ::Time,
        ?end_date_type: ("unlimited" | "limited"),
        ?instance_match_criteria: ("open" | "targeted"),
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool,
        ?outpost_arn: ::String,
        ?placement_group_arn: ::String
      ) -> Hearth::Output[Types::CreateCapacityReservationOutput]

    def create_capacity_reservation_fleet: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateCapacityReservationFleetOutput] |
      (?Types::CreateCapacityReservationFleetInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateCapacityReservationFleetOutput] |
      (
        ?allocation_strategy: ::String,
        ?client_token: ::String,
        instance_type_specifications: ::Array[{
          instance_type: ::String,
          instance_platform: ::String,
          weight: ::Float,
          availability_zone: ::String,
          availability_zone_id: ::String,
          ebs_optimized: bool,
          priority: ::Integer
        }],
        ?tenancy: ("default"),
        total_target_capacity: ::Integer,
        ?end_date: ::Time,
        ?instance_match_criteria: ("open"),
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateCapacityReservationFleetOutput]

    def create_carrier_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateCarrierGatewayOutput] |
      (?Types::CreateCarrierGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateCarrierGatewayOutput] |
      (
        vpc_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool,
        ?client_token: ::String
      ) -> Hearth::Output[Types::CreateCarrierGatewayOutput]

    def create_client_vpn_endpoint: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateClientVpnEndpointOutput] |
      (?Types::CreateClientVpnEndpointInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateClientVpnEndpointOutput] |
      (
        client_cidr_block: ::String,
        server_certificate_arn: ::String,
        authentication_options: ::Array[{
          type: ::String,
          active_directory: Types::DirectoryServiceAuthenticationRequest,
          mutual_authentication: Types::CertificateAuthenticationRequest,
          federated_authentication: Types::FederatedAuthenticationRequest
        }],
        connection_log_options: {
          enabled: bool,
          cloudwatch_log_group: ::String,
          cloudwatch_log_stream: ::String
        },
        ?dns_servers: ::Array[::String],
        ?transport_protocol: ("tcp" | "udp"),
        ?vpn_port: ::Integer,
        ?description: ::String,
        ?split_tunnel: bool,
        ?dry_run: bool,
        ?client_token: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?security_group_ids: ::Array[::String],
        ?vpc_id: ::String,
        ?self_service_portal: ("enabled" | "disabled"),
        ?client_connect_options: {
          enabled: bool,
          lambda_function_arn: ::String
        },
        ?session_timeout_hours: ::Integer,
        ?client_login_banner_options: {
          enabled: bool,
          banner_text: ::String
        }
      ) -> Hearth::Output[Types::CreateClientVpnEndpointOutput]

    def create_client_vpn_route: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateClientVpnRouteOutput] |
      (?Types::CreateClientVpnRouteInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateClientVpnRouteOutput] |
      (
        client_vpn_endpoint_id: ::String,
        destination_cidr_block: ::String,
        target_vpc_subnet_id: ::String,
        ?description: ::String,
        ?client_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateClientVpnRouteOutput]

    def create_coip_cidr: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateCoipCidrOutput] |
      (?Types::CreateCoipCidrInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateCoipCidrOutput] |
      (
        cidr: ::String,
        coip_pool_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateCoipCidrOutput]

    def create_coip_pool: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateCoipPoolOutput] |
      (?Types::CreateCoipPoolInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateCoipPoolOutput] |
      (
        local_gateway_route_table_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateCoipPoolOutput]

    def create_customer_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateCustomerGatewayOutput] |
      (?Types::CreateCustomerGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateCustomerGatewayOutput] |
      (
        ?bgp_asn: ::Integer,
        ?public_ip: ::String,
        ?certificate_arn: ::String,
        type: ("ipsec.1"),
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?device_name: ::String,
        ?ip_address: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateCustomerGatewayOutput]

    def create_default_subnet: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateDefaultSubnetOutput] |
      (?Types::CreateDefaultSubnetInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateDefaultSubnetOutput] |
      (
        availability_zone: ::String,
        ?dry_run: bool,
        ?ipv6_native: bool
      ) -> Hearth::Output[Types::CreateDefaultSubnetOutput]

    def create_default_vpc: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateDefaultVpcOutput] |
      (?Types::CreateDefaultVpcInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateDefaultVpcOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateDefaultVpcOutput]

    def create_dhcp_options: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateDhcpOptionsOutput] |
      (?Types::CreateDhcpOptionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateDhcpOptionsOutput] |
      (
        dhcp_configurations: ::Array[{
          key: ::String,
          values: ::Array[::String]
        }],
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateDhcpOptionsOutput]

    def create_egress_only_internet_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateEgressOnlyInternetGatewayOutput] |
      (?Types::CreateEgressOnlyInternetGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateEgressOnlyInternetGatewayOutput] |
      (
        ?client_token: ::String,
        ?dry_run: bool,
        vpc_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::CreateEgressOnlyInternetGatewayOutput]

    def create_fleet: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateFleetOutput] |
      (?Types::CreateFleetInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateFleetOutput] |
      (
        ?dry_run: bool,
        ?client_token: ::String,
        ?spot_options: {
          allocation_strategy: ("lowest-price" | "diversified" | "capacity-optimized" | "capacity-optimized-prioritized" | "price-capacity-optimized"),
          maintenance_strategies: {
            capacity_rebalance: Types::FleetSpotCapacityRebalanceRequest
          },
          instance_interruption_behavior: ("hibernate" | "stop" | "terminate"),
          instance_pools_to_use_count: ::Integer,
          single_instance_type: bool,
          single_availability_zone: bool,
          min_target_capacity: ::Integer,
          max_total_price: ::String
        },
        ?on_demand_options: {
          allocation_strategy: ("lowest-price" | "prioritized"),
          capacity_reservation_options: {
            usage_strategy: ::String
          },
          single_instance_type: bool,
          single_availability_zone: bool,
          min_target_capacity: ::Integer,
          max_total_price: ::String
        },
        ?excess_capacity_termination_policy: ("no-termination" | "termination"),
        launch_template_configs: ::Array[{
          launch_template_specification: Types::FleetLaunchTemplateSpecificationRequest,
          overrides: ::Array[Types::FleetLaunchTemplateOverridesRequest]
        }],
        target_capacity_specification: {
          total_target_capacity: ::Integer,
          on_demand_target_capacity: ::Integer,
          spot_target_capacity: ::Integer,
          default_target_capacity_type: ("spot" | "on-demand" | "capacity-block"),
          target_capacity_unit_type: ("vcpu" | "memory-mib" | "units")
        },
        ?terminate_instances_with_expiration: bool,
        ?type: ("request" | "maintain" | "instant"),
        ?valid_from: ::Time,
        ?valid_until: ::Time,
        ?replace_unhealthy_instances: bool,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?context: ::String
      ) -> Hearth::Output[Types::CreateFleetOutput]

    def create_flow_logs: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateFlowLogsOutput] |
      (?Types::CreateFlowLogsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateFlowLogsOutput] |
      (
        ?dry_run: bool,
        ?client_token: ::String,
        ?deliver_logs_permission_arn: ::String,
        ?deliver_cross_account_role: ::String,
        ?log_group_name: ::String,
        resource_ids: ::Array[::String],
        resource_type: ("VPC" | "Subnet" | "NetworkInterface" | "TransitGateway" | "TransitGatewayAttachment"),
        ?traffic_type: ("ACCEPT" | "REJECT" | "ALL"),
        ?log_destination_type: ("cloud-watch-logs" | "s3" | "kinesis-data-firehose"),
        ?log_destination: ::String,
        ?log_format: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?max_aggregation_interval: ::Integer,
        ?destination_options: {
          file_format: ("plain-text" | "parquet"),
          hive_compatible_partitions: bool,
          per_hour_partition: bool
        }
      ) -> Hearth::Output[Types::CreateFlowLogsOutput]

    def create_fpga_image: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateFpgaImageOutput] |
      (?Types::CreateFpgaImageInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateFpgaImageOutput] |
      (
        ?dry_run: bool,
        input_storage_location: {
          bucket: ::String,
          key: ::String
        },
        ?logs_storage_location: {
          bucket: ::String,
          key: ::String
        },
        ?description: ::String,
        ?name: ::String,
        ?client_token: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::CreateFpgaImageOutput]

    def create_image: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateImageOutput] |
      (?Types::CreateImageInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateImageOutput] |
      (
        ?block_device_mappings: ::Array[{
          device_name: ::String,
          virtual_name: ::String,
          ebs: Types::EbsBlockDevice,
          no_device: ::String
        }],
        ?description: ::String,
        ?dry_run: bool,
        instance_id: ::String,
        name: ::String,
        ?no_reboot: bool,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::CreateImageOutput]

    def create_instance_connect_endpoint: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateInstanceConnectEndpointOutput] |
      (?Types::CreateInstanceConnectEndpointInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateInstanceConnectEndpointOutput] |
      (
        ?dry_run: bool,
        subnet_id: ::String,
        ?security_group_ids: ::Array[::String],
        ?preserve_client_ip: bool,
        ?client_token: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::CreateInstanceConnectEndpointOutput]

    def create_instance_event_window: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateInstanceEventWindowOutput] |
      (?Types::CreateInstanceEventWindowInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateInstanceEventWindowOutput] |
      (
        ?dry_run: bool,
        ?name: ::String,
        ?time_ranges: ::Array[{
          start_week_day: ::String,
          start_hour: ::Integer,
          end_week_day: ::String,
          end_hour: ::Integer
        }],
        ?cron_expression: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::CreateInstanceEventWindowOutput]

    def create_instance_export_task: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateInstanceExportTaskOutput] |
      (?Types::CreateInstanceExportTaskInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateInstanceExportTaskOutput] |
      (
        ?description: ::String,
        export_to_s3_task: {
          container_format: ("ova"),
          disk_image_format: ("VMDK" | "RAW" | "VHD"),
          s3_bucket: ::String,
          s3_prefix: ::String
        },
        instance_id: ::String,
        target_environment: ("citrix" | "vmware" | "microsoft"),
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::CreateInstanceExportTaskOutput]

    def create_internet_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateInternetGatewayOutput] |
      (?Types::CreateInternetGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateInternetGatewayOutput] |
      (
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateInternetGatewayOutput]

    def create_ipam: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateIpamOutput] |
      (?Types::CreateIpamInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateIpamOutput] |
      (
        ?dry_run: bool,
        ?description: ::String,
        ?operating_regions: ::Array[{
          region_name: ::String
        }],
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?client_token: ::String,
        ?tier: ("free" | "advanced")
      ) -> Hearth::Output[Types::CreateIpamOutput]

    def create_ipam_pool: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateIpamPoolOutput] |
      (?Types::CreateIpamPoolInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateIpamPoolOutput] |
      (
        ?dry_run: bool,
        ipam_scope_id: ::String,
        ?locale: ::String,
        ?source_ipam_pool_id: ::String,
        ?description: ::String,
        address_family: ("ipv4" | "ipv6"),
        ?auto_import: bool,
        ?publicly_advertisable: bool,
        ?allocation_min_netmask_length: ::Integer,
        ?allocation_max_netmask_length: ::Integer,
        ?allocation_default_netmask_length: ::Integer,
        ?allocation_resource_tags: ::Array[{
          key: ::String,
          value: ::String
        }],
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?client_token: ::String,
        ?aws_service: ("ec2"),
        ?public_ip_source: ("amazon" | "byoip"),
        ?source_resource: {
          resource_id: ::String,
          resource_type: ("vpc"),
          resource_region: ::String,
          resource_owner: ::String
        }
      ) -> Hearth::Output[Types::CreateIpamPoolOutput]

    def create_ipam_resource_discovery: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateIpamResourceDiscoveryOutput] |
      (?Types::CreateIpamResourceDiscoveryInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateIpamResourceDiscoveryOutput] |
      (
        ?dry_run: bool,
        ?description: ::String,
        ?operating_regions: ::Array[{
          region_name: ::String
        }],
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?client_token: ::String
      ) -> Hearth::Output[Types::CreateIpamResourceDiscoveryOutput]

    def create_ipam_scope: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateIpamScopeOutput] |
      (?Types::CreateIpamScopeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateIpamScopeOutput] |
      (
        ?dry_run: bool,
        ipam_id: ::String,
        ?description: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?client_token: ::String
      ) -> Hearth::Output[Types::CreateIpamScopeOutput]

    def create_key_pair: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateKeyPairOutput] |
      (?Types::CreateKeyPairInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateKeyPairOutput] |
      (
        key_name: ::String,
        ?dry_run: bool,
        ?key_type: ("rsa" | "ed25519"),
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?key_format: ("pem" | "ppk")
      ) -> Hearth::Output[Types::CreateKeyPairOutput]

    def create_launch_template: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateLaunchTemplateOutput] |
      (?Types::CreateLaunchTemplateInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateLaunchTemplateOutput] |
      (
        ?dry_run: bool,
        ?client_token: ::String,
        launch_template_name: ::String,
        ?version_description: ::String,
        launch_template_data: {
          kernel_id: ::String,
          ebs_optimized: bool,
          iam_instance_profile: {
            arn: ::String,
            name: ::String
          },
          block_device_mappings: ::Array[Types::LaunchTemplateBlockDeviceMappingRequest],
          network_interfaces: ::Array[Types::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest],
          image_id: ::String,
          instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl"),
          key_name: ::String,
          monitoring: {
            enabled: bool
          },
          placement: {
            availability_zone: ::String,
            affinity: ::String,
            group_name: ::String,
            host_id: ::String,
            tenancy: ::String,
            spread_domain: ::String,
            host_resource_group_arn: ::String,
            partition_number: ::Integer,
            group_id: ::String
          },
          ram_disk_id: ::String,
          disable_api_termination: bool,
          instance_initiated_shutdown_behavior: ("stop" | "terminate"),
          user_data: ::String,
          tag_specifications: ::Array[Types::LaunchTemplateTagSpecificationRequest],
          elastic_gpu_specifications: ::Array[Types::ElasticGpuSpecification],
          elastic_inference_accelerators: ::Array[Types::LaunchTemplateElasticInferenceAccelerator],
          security_group_ids: ::Array[::String],
          security_groups: ::Array[::String],
          instance_market_options: {
            market_type: ::String,
            spot_options: Types::LaunchTemplateSpotMarketOptionsRequest
          },
          credit_specification: {
            cpu_credits: ::String
          },
          cpu_options: {
            core_count: ::Integer,
            threads_per_core: ::Integer,
            amd_sev_snp: ::String
          },
          capacity_reservation_specification: {
            capacity_reservation_preference: ::String,
            capacity_reservation_target: Types::CapacityReservationTarget
          },
          license_specifications: ::Array[Types::LaunchTemplateLicenseConfigurationRequest],
          hibernation_options: {
            configured: bool
          },
          metadata_options: {
            http_tokens: ::String,
            http_put_response_hop_limit: ::Integer,
            http_endpoint: ::String,
            http_protocol_ipv6: ::String,
            instance_metadata_tags: ::String
          },
          enclave_options: {
            enabled: bool
          },
          instance_requirements: {
            v_cpu_count: Types::VCpuCountRangeRequest,
            memory_mi_b: Types::MemoryMiBRequest,
            cpu_manufacturers: ::Array[::String],
            memory_gi_b_per_v_cpu: Types::MemoryGiBPerVCpuRequest,
            excluded_instance_types: ::Array[::String],
            instance_generations: ::Array[::String],
            spot_max_price_percentage_over_lowest_price: ::Integer,
            on_demand_max_price_percentage_over_lowest_price: ::Integer,
            bare_metal: ::String,
            burstable_performance: ::String,
            require_hibernate_support: bool,
            network_interface_count: Types::NetworkInterfaceCountRequest,
            local_storage: ::String,
            local_storage_types: ::Array[::String],
            total_local_storage_gb: Types::TotalLocalStorageGBRequest,
            baseline_ebs_bandwidth_mbps: Types::BaselineEbsBandwidthMbpsRequest,
            accelerator_types: ::Array[::String],
            accelerator_count: Types::AcceleratorCountRequest,
            accelerator_manufacturers: ::Array[::String],
            accelerator_names: ::Array[::String],
            accelerator_total_memory_mi_b: Types::AcceleratorTotalMemoryMiBRequest,
            network_bandwidth_gbps: Types::NetworkBandwidthGbpsRequest,
            allowed_instance_types: ::Array[::String],
            max_spot_price_as_percentage_of_optimal_on_demand_price: ::Integer
          },
          private_dns_name_options: {
            hostname_type: ::String,
            enable_resource_name_dns_a_record: bool,
            enable_resource_name_dns_aaaa_record: bool
          },
          maintenance_options: {
            auto_recovery: ::String
          },
          disable_api_stop: bool
        },
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::CreateLaunchTemplateOutput]

    def create_launch_template_version: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateLaunchTemplateVersionOutput] |
      (?Types::CreateLaunchTemplateVersionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateLaunchTemplateVersionOutput] |
      (
        ?dry_run: bool,
        ?client_token: ::String,
        ?launch_template_id: ::String,
        ?launch_template_name: ::String,
        ?source_version: ::String,
        ?version_description: ::String,
        launch_template_data: {
          kernel_id: ::String,
          ebs_optimized: bool,
          iam_instance_profile: {
            arn: ::String,
            name: ::String
          },
          block_device_mappings: ::Array[Types::LaunchTemplateBlockDeviceMappingRequest],
          network_interfaces: ::Array[Types::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest],
          image_id: ::String,
          instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl"),
          key_name: ::String,
          monitoring: {
            enabled: bool
          },
          placement: {
            availability_zone: ::String,
            affinity: ::String,
            group_name: ::String,
            host_id: ::String,
            tenancy: ::String,
            spread_domain: ::String,
            host_resource_group_arn: ::String,
            partition_number: ::Integer,
            group_id: ::String
          },
          ram_disk_id: ::String,
          disable_api_termination: bool,
          instance_initiated_shutdown_behavior: ("stop" | "terminate"),
          user_data: ::String,
          tag_specifications: ::Array[Types::LaunchTemplateTagSpecificationRequest],
          elastic_gpu_specifications: ::Array[Types::ElasticGpuSpecification],
          elastic_inference_accelerators: ::Array[Types::LaunchTemplateElasticInferenceAccelerator],
          security_group_ids: ::Array[::String],
          security_groups: ::Array[::String],
          instance_market_options: {
            market_type: ::String,
            spot_options: Types::LaunchTemplateSpotMarketOptionsRequest
          },
          credit_specification: {
            cpu_credits: ::String
          },
          cpu_options: {
            core_count: ::Integer,
            threads_per_core: ::Integer,
            amd_sev_snp: ::String
          },
          capacity_reservation_specification: {
            capacity_reservation_preference: ::String,
            capacity_reservation_target: Types::CapacityReservationTarget
          },
          license_specifications: ::Array[Types::LaunchTemplateLicenseConfigurationRequest],
          hibernation_options: {
            configured: bool
          },
          metadata_options: {
            http_tokens: ::String,
            http_put_response_hop_limit: ::Integer,
            http_endpoint: ::String,
            http_protocol_ipv6: ::String,
            instance_metadata_tags: ::String
          },
          enclave_options: {
            enabled: bool
          },
          instance_requirements: {
            v_cpu_count: Types::VCpuCountRangeRequest,
            memory_mi_b: Types::MemoryMiBRequest,
            cpu_manufacturers: ::Array[::String],
            memory_gi_b_per_v_cpu: Types::MemoryGiBPerVCpuRequest,
            excluded_instance_types: ::Array[::String],
            instance_generations: ::Array[::String],
            spot_max_price_percentage_over_lowest_price: ::Integer,
            on_demand_max_price_percentage_over_lowest_price: ::Integer,
            bare_metal: ::String,
            burstable_performance: ::String,
            require_hibernate_support: bool,
            network_interface_count: Types::NetworkInterfaceCountRequest,
            local_storage: ::String,
            local_storage_types: ::Array[::String],
            total_local_storage_gb: Types::TotalLocalStorageGBRequest,
            baseline_ebs_bandwidth_mbps: Types::BaselineEbsBandwidthMbpsRequest,
            accelerator_types: ::Array[::String],
            accelerator_count: Types::AcceleratorCountRequest,
            accelerator_manufacturers: ::Array[::String],
            accelerator_names: ::Array[::String],
            accelerator_total_memory_mi_b: Types::AcceleratorTotalMemoryMiBRequest,
            network_bandwidth_gbps: Types::NetworkBandwidthGbpsRequest,
            allowed_instance_types: ::Array[::String],
            max_spot_price_as_percentage_of_optimal_on_demand_price: ::Integer
          },
          private_dns_name_options: {
            hostname_type: ::String,
            enable_resource_name_dns_a_record: bool,
            enable_resource_name_dns_aaaa_record: bool
          },
          maintenance_options: {
            auto_recovery: ::String
          },
          disable_api_stop: bool
        },
        ?resolve_alias: bool
      ) -> Hearth::Output[Types::CreateLaunchTemplateVersionOutput]

    def create_local_gateway_route: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateLocalGatewayRouteOutput] |
      (?Types::CreateLocalGatewayRouteInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateLocalGatewayRouteOutput] |
      (
        ?destination_cidr_block: ::String,
        local_gateway_route_table_id: ::String,
        ?local_gateway_virtual_interface_group_id: ::String,
        ?dry_run: bool,
        ?network_interface_id: ::String,
        ?destination_prefix_list_id: ::String
      ) -> Hearth::Output[Types::CreateLocalGatewayRouteOutput]

    def create_local_gateway_route_table: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateLocalGatewayRouteTableOutput] |
      (?Types::CreateLocalGatewayRouteTableInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateLocalGatewayRouteTableOutput] |
      (
        local_gateway_id: ::String,
        ?mode: ("direct-vpc-routing" | "coip"),
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateLocalGatewayRouteTableOutput]

    def create_local_gateway_route_table_virtual_interface_group_association: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput] |
      (?Types::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput] |
      (
        local_gateway_route_table_id: ::String,
        local_gateway_virtual_interface_group_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput]

    def create_local_gateway_route_table_vpc_association: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateLocalGatewayRouteTableVpcAssociationOutput] |
      (?Types::CreateLocalGatewayRouteTableVpcAssociationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateLocalGatewayRouteTableVpcAssociationOutput] |
      (
        local_gateway_route_table_id: ::String,
        vpc_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateLocalGatewayRouteTableVpcAssociationOutput]

    def create_managed_prefix_list: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateManagedPrefixListOutput] |
      (?Types::CreateManagedPrefixListInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateManagedPrefixListOutput] |
      (
        ?dry_run: bool,
        prefix_list_name: ::String,
        ?entries: ::Array[{
          cidr: ::String,
          description: ::String
        }],
        max_entries: ::Integer,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        address_family: ::String,
        ?client_token: ::String
      ) -> Hearth::Output[Types::CreateManagedPrefixListOutput]

    def create_nat_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateNatGatewayOutput] |
      (?Types::CreateNatGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateNatGatewayOutput] |
      (
        ?allocation_id: ::String,
        ?client_token: ::String,
        ?dry_run: bool,
        subnet_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?connectivity_type: ("private" | "public"),
        ?private_ip_address: ::String,
        ?secondary_allocation_ids: ::Array[::String],
        ?secondary_private_ip_addresses: ::Array[::String],
        ?secondary_private_ip_address_count: ::Integer
      ) -> Hearth::Output[Types::CreateNatGatewayOutput]

    def create_network_acl: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateNetworkAclOutput] |
      (?Types::CreateNetworkAclInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateNetworkAclOutput] |
      (
        ?dry_run: bool,
        vpc_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?client_token: ::String
      ) -> Hearth::Output[Types::CreateNetworkAclOutput]

    def create_network_acl_entry: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateNetworkAclEntryOutput] |
      (?Types::CreateNetworkAclEntryInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateNetworkAclEntryOutput] |
      (
        ?cidr_block: ::String,
        ?dry_run: bool,
        egress: bool,
        ?icmp_type_code: {
          code: ::Integer,
          type: ::Integer
        },
        ?ipv6_cidr_block: ::String,
        network_acl_id: ::String,
        ?port_range: {
          from: ::Integer,
          to: ::Integer
        },
        protocol: ::String,
        rule_action: ("allow" | "deny"),
        rule_number: ::Integer
      ) -> Hearth::Output[Types::CreateNetworkAclEntryOutput]

    def create_network_insights_access_scope: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateNetworkInsightsAccessScopeOutput] |
      (?Types::CreateNetworkInsightsAccessScopeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateNetworkInsightsAccessScopeOutput] |
      (
        ?match_paths: ::Array[{
          source: Types::PathStatementRequest,
          destination: Types::PathStatementRequest,
          through_resources: ::Array[Types::ThroughResourcesStatementRequest]
        }],
        ?exclude_paths: ::Array[{
          source: Types::PathStatementRequest,
          destination: Types::PathStatementRequest,
          through_resources: ::Array[Types::ThroughResourcesStatementRequest]
        }],
        client_token: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateNetworkInsightsAccessScopeOutput]

    def create_network_insights_path: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateNetworkInsightsPathOutput] |
      (?Types::CreateNetworkInsightsPathInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateNetworkInsightsPathOutput] |
      (
        ?source_ip: ::String,
        ?destination_ip: ::String,
        source: ::String,
        ?destination: ::String,
        protocol: ("tcp" | "udp"),
        ?destination_port: ::Integer,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool,
        client_token: ::String,
        ?filter_at_source: {
          source_address: ::String,
          source_port_range: {
            from_port: ::Integer,
            to_port: ::Integer
          },
          destination_address: ::String,
          destination_port_range: {
            from_port: ::Integer,
            to_port: ::Integer
          }
        },
        ?filter_at_destination: {
          source_address: ::String,
          source_port_range: {
            from_port: ::Integer,
            to_port: ::Integer
          },
          destination_address: ::String,
          destination_port_range: {
            from_port: ::Integer,
            to_port: ::Integer
          }
        }
      ) -> Hearth::Output[Types::CreateNetworkInsightsPathOutput]

    def create_network_interface: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateNetworkInterfaceOutput] |
      (?Types::CreateNetworkInterfaceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateNetworkInterfaceOutput] |
      (
        ?description: ::String,
        ?dry_run: bool,
        ?groups: ::Array[::String],
        ?ipv6_address_count: ::Integer,
        ?ipv6_addresses: ::Array[{
          ipv6_address: ::String,
          is_primary_ipv6: bool
        }],
        ?private_ip_address: ::String,
        ?private_ip_addresses: ::Array[{
          primary: bool,
          private_ip_address: ::String
        }],
        ?secondary_private_ip_address_count: ::Integer,
        ?ipv4_prefixes: ::Array[{
          ipv4_prefix: ::String
        }],
        ?ipv4_prefix_count: ::Integer,
        ?ipv6_prefixes: ::Array[{
          ipv6_prefix: ::String
        }],
        ?ipv6_prefix_count: ::Integer,
        ?interface_type: ("efa" | "branch" | "trunk"),
        subnet_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?client_token: ::String,
        ?enable_primary_ipv6: bool,
        ?connection_tracking_specification: {
          tcp_established_timeout: ::Integer,
          udp_stream_timeout: ::Integer,
          udp_timeout: ::Integer
        }
      ) -> Hearth::Output[Types::CreateNetworkInterfaceOutput]

    def create_network_interface_permission: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateNetworkInterfacePermissionOutput] |
      (?Types::CreateNetworkInterfacePermissionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateNetworkInterfacePermissionOutput] |
      (
        network_interface_id: ::String,
        ?aws_account_id: ::String,
        ?aws_service: ::String,
        permission: ("INSTANCE-ATTACH" | "EIP-ASSOCIATE"),
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateNetworkInterfacePermissionOutput]

    def create_placement_group: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreatePlacementGroupOutput] |
      (?Types::CreatePlacementGroupInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreatePlacementGroupOutput] |
      (
        ?dry_run: bool,
        ?group_name: ::String,
        ?strategy: ("cluster" | "spread" | "partition"),
        ?partition_count: ::Integer,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?spread_level: ("host" | "rack")
      ) -> Hearth::Output[Types::CreatePlacementGroupOutput]

    def create_public_ipv4_pool: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreatePublicIpv4PoolOutput] |
      (?Types::CreatePublicIpv4PoolInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreatePublicIpv4PoolOutput] |
      (
        ?dry_run: bool,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::CreatePublicIpv4PoolOutput]

    def create_replace_root_volume_task: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateReplaceRootVolumeTaskOutput] |
      (?Types::CreateReplaceRootVolumeTaskInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateReplaceRootVolumeTaskOutput] |
      (
        instance_id: ::String,
        ?snapshot_id: ::String,
        ?client_token: ::String,
        ?dry_run: bool,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?image_id: ::String,
        ?delete_replaced_root_volume: bool
      ) -> Hearth::Output[Types::CreateReplaceRootVolumeTaskOutput]

    def create_reserved_instances_listing: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateReservedInstancesListingOutput] |
      (?Types::CreateReservedInstancesListingInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateReservedInstancesListingOutput] |
      (
        client_token: ::String,
        instance_count: ::Integer,
        price_schedules: ::Array[{
          currency_code: ::String,
          price: ::Float,
          term: ::Integer
        }],
        reserved_instances_id: ::String
      ) -> Hearth::Output[Types::CreateReservedInstancesListingOutput]

    def create_restore_image_task: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateRestoreImageTaskOutput] |
      (?Types::CreateRestoreImageTaskInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateRestoreImageTaskOutput] |
      (
        bucket: ::String,
        object_key: ::String,
        ?name: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateRestoreImageTaskOutput]

    def create_route: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateRouteOutput] |
      (?Types::CreateRouteInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateRouteOutput] |
      (
        ?destination_cidr_block: ::String,
        ?destination_ipv6_cidr_block: ::String,
        ?destination_prefix_list_id: ::String,
        ?dry_run: bool,
        ?vpc_endpoint_id: ::String,
        ?egress_only_internet_gateway_id: ::String,
        ?gateway_id: ::String,
        ?instance_id: ::String,
        ?nat_gateway_id: ::String,
        ?transit_gateway_id: ::String,
        ?local_gateway_id: ::String,
        ?carrier_gateway_id: ::String,
        ?network_interface_id: ::String,
        route_table_id: ::String,
        ?vpc_peering_connection_id: ::String,
        ?core_network_arn: ::String
      ) -> Hearth::Output[Types::CreateRouteOutput]

    def create_route_table: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateRouteTableOutput] |
      (?Types::CreateRouteTableInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateRouteTableOutput] |
      (
        ?dry_run: bool,
        vpc_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?client_token: ::String
      ) -> Hearth::Output[Types::CreateRouteTableOutput]

    def create_security_group: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateSecurityGroupOutput] |
      (?Types::CreateSecurityGroupInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateSecurityGroupOutput] |
      (
        description: ::String,
        group_name: ::String,
        ?vpc_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateSecurityGroupOutput]

    def create_snapshot: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateSnapshotOutput] |
      (?Types::CreateSnapshotInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateSnapshotOutput] |
      (
        ?description: ::String,
        ?outpost_arn: ::String,
        volume_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateSnapshotOutput]

    def create_snapshots: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateSnapshotsOutput] |
      (?Types::CreateSnapshotsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateSnapshotsOutput] |
      (
        ?description: ::String,
        instance_specification: {
          instance_id: ::String,
          exclude_boot_volume: bool,
          exclude_data_volume_ids: ::Array[::String]
        },
        ?outpost_arn: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool,
        ?copy_tags_from_source: ("volume")
      ) -> Hearth::Output[Types::CreateSnapshotsOutput]

    def create_spot_datafeed_subscription: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateSpotDatafeedSubscriptionOutput] |
      (?Types::CreateSpotDatafeedSubscriptionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateSpotDatafeedSubscriptionOutput] |
      (
        bucket: ::String,
        ?dry_run: bool,
        ?prefix: ::String
      ) -> Hearth::Output[Types::CreateSpotDatafeedSubscriptionOutput]

    def create_store_image_task: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateStoreImageTaskOutput] |
      (?Types::CreateStoreImageTaskInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateStoreImageTaskOutput] |
      (
        image_id: ::String,
        bucket: ::String,
        ?s3_object_tags: ::Array[{
          key: ::String,
          value: ::String
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateStoreImageTaskOutput]

    def create_subnet: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateSubnetOutput] |
      (?Types::CreateSubnetInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateSubnetOutput] |
      (
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?availability_zone: ::String,
        ?availability_zone_id: ::String,
        ?cidr_block: ::String,
        ?ipv6_cidr_block: ::String,
        ?outpost_arn: ::String,
        vpc_id: ::String,
        ?dry_run: bool,
        ?ipv6_native: bool,
        ?ipv4_ipam_pool_id: ::String,
        ?ipv4_netmask_length: ::Integer,
        ?ipv6_ipam_pool_id: ::String,
        ?ipv6_netmask_length: ::Integer
      ) -> Hearth::Output[Types::CreateSubnetOutput]

    def create_subnet_cidr_reservation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateSubnetCidrReservationOutput] |
      (?Types::CreateSubnetCidrReservationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateSubnetCidrReservationOutput] |
      (
        subnet_id: ::String,
        cidr: ::String,
        reservation_type: ("prefix" | "explicit"),
        ?description: ::String,
        ?dry_run: bool,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::CreateSubnetCidrReservationOutput]

    def create_tags: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTagsOutput] |
      (?Types::CreateTagsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTagsOutput] |
      (
        ?dry_run: bool,
        resources: ::Array[::String],
        tags: ::Array[{
          key: ::String,
          value: ::String
        }]
      ) -> Hearth::Output[Types::CreateTagsOutput]

    def create_traffic_mirror_filter: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTrafficMirrorFilterOutput] |
      (?Types::CreateTrafficMirrorFilterInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTrafficMirrorFilterOutput] |
      (
        ?description: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool,
        ?client_token: ::String
      ) -> Hearth::Output[Types::CreateTrafficMirrorFilterOutput]

    def create_traffic_mirror_filter_rule: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTrafficMirrorFilterRuleOutput] |
      (?Types::CreateTrafficMirrorFilterRuleInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTrafficMirrorFilterRuleOutput] |
      (
        traffic_mirror_filter_id: ::String,
        traffic_direction: ("ingress" | "egress"),
        rule_number: ::Integer,
        rule_action: ("accept" | "reject"),
        ?destination_port_range: {
          from_port: ::Integer,
          to_port: ::Integer
        },
        ?source_port_range: {
          from_port: ::Integer,
          to_port: ::Integer
        },
        ?protocol: ::Integer,
        destination_cidr_block: ::String,
        source_cidr_block: ::String,
        ?description: ::String,
        ?dry_run: bool,
        ?client_token: ::String
      ) -> Hearth::Output[Types::CreateTrafficMirrorFilterRuleOutput]

    def create_traffic_mirror_session: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTrafficMirrorSessionOutput] |
      (?Types::CreateTrafficMirrorSessionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTrafficMirrorSessionOutput] |
      (
        network_interface_id: ::String,
        traffic_mirror_target_id: ::String,
        traffic_mirror_filter_id: ::String,
        ?packet_length: ::Integer,
        session_number: ::Integer,
        ?virtual_network_id: ::Integer,
        ?description: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool,
        ?client_token: ::String
      ) -> Hearth::Output[Types::CreateTrafficMirrorSessionOutput]

    def create_traffic_mirror_target: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTrafficMirrorTargetOutput] |
      (?Types::CreateTrafficMirrorTargetInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTrafficMirrorTargetOutput] |
      (
        ?network_interface_id: ::String,
        ?network_load_balancer_arn: ::String,
        ?description: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool,
        ?client_token: ::String,
        ?gateway_load_balancer_endpoint_id: ::String
      ) -> Hearth::Output[Types::CreateTrafficMirrorTargetOutput]

    def create_transit_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayOutput] |
      (?Types::CreateTransitGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayOutput] |
      (
        ?description: ::String,
        ?options: {
          amazon_side_asn: ::Integer,
          auto_accept_shared_attachments: ("enable" | "disable"),
          default_route_table_association: ("enable" | "disable"),
          default_route_table_propagation: ("enable" | "disable"),
          vpn_ecmp_support: ("enable" | "disable"),
          dns_support: ("enable" | "disable"),
          security_group_referencing_support: ("enable" | "disable"),
          multicast_support: ("enable" | "disable"),
          transit_gateway_cidr_blocks: ::Array[::String]
        },
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateTransitGatewayOutput]

    def create_transit_gateway_connect: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayConnectOutput] |
      (?Types::CreateTransitGatewayConnectInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayConnectOutput] |
      (
        transport_transit_gateway_attachment_id: ::String,
        options: {
          protocol: ("gre")
        },
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateTransitGatewayConnectOutput]

    def create_transit_gateway_connect_peer: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayConnectPeerOutput] |
      (?Types::CreateTransitGatewayConnectPeerInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayConnectPeerOutput] |
      (
        transit_gateway_attachment_id: ::String,
        ?transit_gateway_address: ::String,
        peer_address: ::String,
        ?bgp_options: {
          peer_asn: ::Integer
        },
        inside_cidr_blocks: ::Array[::String],
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateTransitGatewayConnectPeerOutput]

    def create_transit_gateway_multicast_domain: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayMulticastDomainOutput] |
      (?Types::CreateTransitGatewayMulticastDomainInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayMulticastDomainOutput] |
      (
        transit_gateway_id: ::String,
        ?options: {
          igmpv2_support: ("enable" | "disable"),
          static_sources_support: ("enable" | "disable"),
          auto_accept_shared_associations: ("enable" | "disable")
        },
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateTransitGatewayMulticastDomainOutput]

    def create_transit_gateway_peering_attachment: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayPeeringAttachmentOutput] |
      (?Types::CreateTransitGatewayPeeringAttachmentInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayPeeringAttachmentOutput] |
      (
        transit_gateway_id: ::String,
        peer_transit_gateway_id: ::String,
        peer_account_id: ::String,
        peer_region: ::String,
        ?options: {
          dynamic_routing: ("enable" | "disable")
        },
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateTransitGatewayPeeringAttachmentOutput]

    def create_transit_gateway_policy_table: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayPolicyTableOutput] |
      (?Types::CreateTransitGatewayPolicyTableInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayPolicyTableOutput] |
      (
        transit_gateway_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateTransitGatewayPolicyTableOutput]

    def create_transit_gateway_prefix_list_reference: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayPrefixListReferenceOutput] |
      (?Types::CreateTransitGatewayPrefixListReferenceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayPrefixListReferenceOutput] |
      (
        transit_gateway_route_table_id: ::String,
        prefix_list_id: ::String,
        ?transit_gateway_attachment_id: ::String,
        ?blackhole: bool,
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateTransitGatewayPrefixListReferenceOutput]

    def create_transit_gateway_route: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayRouteOutput] |
      (?Types::CreateTransitGatewayRouteInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayRouteOutput] |
      (
        destination_cidr_block: ::String,
        transit_gateway_route_table_id: ::String,
        ?transit_gateway_attachment_id: ::String,
        ?blackhole: bool,
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateTransitGatewayRouteOutput]

    def create_transit_gateway_route_table: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayRouteTableOutput] |
      (?Types::CreateTransitGatewayRouteTableInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayRouteTableOutput] |
      (
        transit_gateway_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateTransitGatewayRouteTableOutput]

    def create_transit_gateway_route_table_announcement: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayRouteTableAnnouncementOutput] |
      (?Types::CreateTransitGatewayRouteTableAnnouncementInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayRouteTableAnnouncementOutput] |
      (
        transit_gateway_route_table_id: ::String,
        peering_attachment_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateTransitGatewayRouteTableAnnouncementOutput]

    def create_transit_gateway_vpc_attachment: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayVpcAttachmentOutput] |
      (?Types::CreateTransitGatewayVpcAttachmentInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateTransitGatewayVpcAttachmentOutput] |
      (
        transit_gateway_id: ::String,
        vpc_id: ::String,
        subnet_ids: ::Array[::String],
        ?options: {
          dns_support: ("enable" | "disable"),
          security_group_referencing_support: ("enable" | "disable"),
          ipv6_support: ("enable" | "disable"),
          appliance_mode_support: ("enable" | "disable")
        },
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateTransitGatewayVpcAttachmentOutput]

    def create_verified_access_endpoint: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVerifiedAccessEndpointOutput] |
      (?Types::CreateVerifiedAccessEndpointInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVerifiedAccessEndpointOutput] |
      (
        verified_access_group_id: ::String,
        endpoint_type: ("load-balancer" | "network-interface"),
        attachment_type: ("vpc"),
        domain_certificate_arn: ::String,
        application_domain: ::String,
        endpoint_domain_prefix: ::String,
        ?security_group_ids: ::Array[::String],
        ?load_balancer_options: {
          protocol: ("http" | "https"),
          port: ::Integer,
          load_balancer_arn: ::String,
          subnet_ids: ::Array[::String]
        },
        ?network_interface_options: {
          network_interface_id: ::String,
          protocol: ("http" | "https"),
          port: ::Integer
        },
        ?description: ::String,
        ?policy_document: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?client_token: ::String,
        ?dry_run: bool,
        ?sse_specification: {
          customer_managed_key_enabled: bool,
          kms_key_arn: ::String
        }
      ) -> Hearth::Output[Types::CreateVerifiedAccessEndpointOutput]

    def create_verified_access_group: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVerifiedAccessGroupOutput] |
      (?Types::CreateVerifiedAccessGroupInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVerifiedAccessGroupOutput] |
      (
        verified_access_instance_id: ::String,
        ?description: ::String,
        ?policy_document: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?client_token: ::String,
        ?dry_run: bool,
        ?sse_specification: {
          customer_managed_key_enabled: bool,
          kms_key_arn: ::String
        }
      ) -> Hearth::Output[Types::CreateVerifiedAccessGroupOutput]

    def create_verified_access_instance: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVerifiedAccessInstanceOutput] |
      (?Types::CreateVerifiedAccessInstanceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVerifiedAccessInstanceOutput] |
      (
        ?description: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?client_token: ::String,
        ?dry_run: bool,
        ?fips_enabled: bool
      ) -> Hearth::Output[Types::CreateVerifiedAccessInstanceOutput]

    def create_verified_access_trust_provider: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVerifiedAccessTrustProviderOutput] |
      (?Types::CreateVerifiedAccessTrustProviderInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVerifiedAccessTrustProviderOutput] |
      (
        trust_provider_type: ("user" | "device"),
        ?user_trust_provider_type: ("iam-identity-center" | "oidc"),
        ?device_trust_provider_type: ("jamf" | "crowdstrike" | "jumpcloud"),
        ?oidc_options: {
          issuer: ::String,
          authorization_endpoint: ::String,
          token_endpoint: ::String,
          user_info_endpoint: ::String,
          client_id: ::String,
          client_secret: ::String,
          scope: ::String
        },
        ?device_options: {
          tenant_id: ::String,
          public_signing_key_url: ::String
        },
        policy_reference_name: ::String,
        ?description: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?client_token: ::String,
        ?dry_run: bool,
        ?sse_specification: {
          customer_managed_key_enabled: bool,
          kms_key_arn: ::String
        }
      ) -> Hearth::Output[Types::CreateVerifiedAccessTrustProviderOutput]

    def create_volume: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVolumeOutput] |
      (?Types::CreateVolumeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVolumeOutput] |
      (
        availability_zone: ::String,
        ?encrypted: bool,
        ?iops: ::Integer,
        ?kms_key_id: ::String,
        ?outpost_arn: ::String,
        ?size: ::Integer,
        ?snapshot_id: ::String,
        ?volume_type: ("standard" | "io1" | "io2" | "gp2" | "sc1" | "st1" | "gp3"),
        ?dry_run: bool,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?multi_attach_enabled: bool,
        ?throughput: ::Integer,
        ?client_token: ::String
      ) -> Hearth::Output[Types::CreateVolumeOutput]

    def create_vpc: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpcOutput] |
      (?Types::CreateVpcInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpcOutput] |
      (
        ?cidr_block: ::String,
        ?amazon_provided_ipv6_cidr_block: bool,
        ?ipv6_pool: ::String,
        ?ipv6_cidr_block: ::String,
        ?ipv4_ipam_pool_id: ::String,
        ?ipv4_netmask_length: ::Integer,
        ?ipv6_ipam_pool_id: ::String,
        ?ipv6_netmask_length: ::Integer,
        ?dry_run: bool,
        ?instance_tenancy: ("default" | "dedicated" | "host"),
        ?ipv6_cidr_block_network_border_group: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::CreateVpcOutput]

    def create_vpc_endpoint: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpcEndpointOutput] |
      (?Types::CreateVpcEndpointInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpcEndpointOutput] |
      (
        ?dry_run: bool,
        ?vpc_endpoint_type: ("Interface" | "Gateway" | "GatewayLoadBalancer"),
        vpc_id: ::String,
        service_name: ::String,
        ?policy_document: ::String,
        ?route_table_ids: ::Array[::String],
        ?subnet_ids: ::Array[::String],
        ?security_group_ids: ::Array[::String],
        ?ip_address_type: ("ipv4" | "dualstack" | "ipv6"),
        ?dns_options: {
          dns_record_ip_type: ("ipv4" | "dualstack" | "ipv6" | "service-defined"),
          private_dns_only_for_inbound_resolver_endpoint: bool
        },
        ?client_token: ::String,
        ?private_dns_enabled: bool,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?subnet_configurations: ::Array[{
          subnet_id: ::String,
          ipv4: ::String,
          ipv6: ::String
        }]
      ) -> Hearth::Output[Types::CreateVpcEndpointOutput]

    def create_vpc_endpoint_connection_notification: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpcEndpointConnectionNotificationOutput] |
      (?Types::CreateVpcEndpointConnectionNotificationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpcEndpointConnectionNotificationOutput] |
      (
        ?dry_run: bool,
        ?service_id: ::String,
        ?vpc_endpoint_id: ::String,
        connection_notification_arn: ::String,
        connection_events: ::Array[::String],
        ?client_token: ::String
      ) -> Hearth::Output[Types::CreateVpcEndpointConnectionNotificationOutput]

    def create_vpc_endpoint_service_configuration: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpcEndpointServiceConfigurationOutput] |
      (?Types::CreateVpcEndpointServiceConfigurationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpcEndpointServiceConfigurationOutput] |
      (
        ?dry_run: bool,
        ?acceptance_required: bool,
        ?private_dns_name: ::String,
        ?network_load_balancer_arns: ::Array[::String],
        ?gateway_load_balancer_arns: ::Array[::String],
        ?supported_ip_address_types: ::Array[::String],
        ?client_token: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::CreateVpcEndpointServiceConfigurationOutput]

    def create_vpc_peering_connection: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpcPeeringConnectionOutput] |
      (?Types::CreateVpcPeeringConnectionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpcPeeringConnectionOutput] |
      (
        ?dry_run: bool,
        ?peer_owner_id: ::String,
        ?peer_vpc_id: ::String,
        vpc_id: ::String,
        ?peer_region: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::CreateVpcPeeringConnectionOutput]

    def create_vpn_connection: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpnConnectionOutput] |
      (?Types::CreateVpnConnectionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpnConnectionOutput] |
      (
        customer_gateway_id: ::String,
        type: ::String,
        ?vpn_gateway_id: ::String,
        ?transit_gateway_id: ::String,
        ?dry_run: bool,
        ?options: {
          enable_acceleration: bool,
          static_routes_only: bool,
          tunnel_inside_ip_version: ("ipv4" | "ipv6"),
          tunnel_options: ::Array[Types::VpnTunnelOptionsSpecification],
          local_ipv4_network_cidr: ::String,
          remote_ipv4_network_cidr: ::String,
          local_ipv6_network_cidr: ::String,
          remote_ipv6_network_cidr: ::String,
          outside_ip_address_type: ::String,
          transport_transit_gateway_attachment_id: ::String
        },
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::CreateVpnConnectionOutput]

    def create_vpn_connection_route: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpnConnectionRouteOutput] |
      (?Types::CreateVpnConnectionRouteInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpnConnectionRouteOutput] |
      (
        destination_cidr_block: ::String,
        vpn_connection_id: ::String
      ) -> Hearth::Output[Types::CreateVpnConnectionRouteOutput]

    def create_vpn_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpnGatewayOutput] |
      (?Types::CreateVpnGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::CreateVpnGatewayOutput] |
      (
        ?availability_zone: ::String,
        type: ("ipsec.1"),
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?amazon_side_asn: ::Integer,
        ?dry_run: bool
      ) -> Hearth::Output[Types::CreateVpnGatewayOutput]

    def delete_carrier_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteCarrierGatewayOutput] |
      (?Types::DeleteCarrierGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteCarrierGatewayOutput] |
      (
        carrier_gateway_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteCarrierGatewayOutput]

    def delete_client_vpn_endpoint: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteClientVpnEndpointOutput] |
      (?Types::DeleteClientVpnEndpointInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteClientVpnEndpointOutput] |
      (
        client_vpn_endpoint_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteClientVpnEndpointOutput]

    def delete_client_vpn_route: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteClientVpnRouteOutput] |
      (?Types::DeleteClientVpnRouteInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteClientVpnRouteOutput] |
      (
        client_vpn_endpoint_id: ::String,
        ?target_vpc_subnet_id: ::String,
        destination_cidr_block: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteClientVpnRouteOutput]

    def delete_coip_cidr: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteCoipCidrOutput] |
      (?Types::DeleteCoipCidrInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteCoipCidrOutput] |
      (
        cidr: ::String,
        coip_pool_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteCoipCidrOutput]

    def delete_coip_pool: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteCoipPoolOutput] |
      (?Types::DeleteCoipPoolInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteCoipPoolOutput] |
      (
        coip_pool_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteCoipPoolOutput]

    def delete_customer_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteCustomerGatewayOutput] |
      (?Types::DeleteCustomerGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteCustomerGatewayOutput] |
      (
        customer_gateway_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteCustomerGatewayOutput]

    def delete_dhcp_options: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteDhcpOptionsOutput] |
      (?Types::DeleteDhcpOptionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteDhcpOptionsOutput] |
      (
        dhcp_options_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteDhcpOptionsOutput]

    def delete_egress_only_internet_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteEgressOnlyInternetGatewayOutput] |
      (?Types::DeleteEgressOnlyInternetGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteEgressOnlyInternetGatewayOutput] |
      (
        ?dry_run: bool,
        egress_only_internet_gateway_id: ::String
      ) -> Hearth::Output[Types::DeleteEgressOnlyInternetGatewayOutput]

    def delete_fleets: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteFleetsOutput] |
      (?Types::DeleteFleetsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteFleetsOutput] |
      (
        ?dry_run: bool,
        fleet_ids: ::Array[::String],
        terminate_instances: bool
      ) -> Hearth::Output[Types::DeleteFleetsOutput]

    def delete_flow_logs: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteFlowLogsOutput] |
      (?Types::DeleteFlowLogsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteFlowLogsOutput] |
      (
        ?dry_run: bool,
        flow_log_ids: ::Array[::String]
      ) -> Hearth::Output[Types::DeleteFlowLogsOutput]

    def delete_fpga_image: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteFpgaImageOutput] |
      (?Types::DeleteFpgaImageInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteFpgaImageOutput] |
      (
        ?dry_run: bool,
        fpga_image_id: ::String
      ) -> Hearth::Output[Types::DeleteFpgaImageOutput]

    def delete_instance_connect_endpoint: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteInstanceConnectEndpointOutput] |
      (?Types::DeleteInstanceConnectEndpointInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteInstanceConnectEndpointOutput] |
      (
        ?dry_run: bool,
        instance_connect_endpoint_id: ::String
      ) -> Hearth::Output[Types::DeleteInstanceConnectEndpointOutput]

    def delete_instance_event_window: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteInstanceEventWindowOutput] |
      (?Types::DeleteInstanceEventWindowInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteInstanceEventWindowOutput] |
      (
        ?dry_run: bool,
        ?force_delete: bool,
        instance_event_window_id: ::String
      ) -> Hearth::Output[Types::DeleteInstanceEventWindowOutput]

    def delete_internet_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteInternetGatewayOutput] |
      (?Types::DeleteInternetGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteInternetGatewayOutput] |
      (
        ?dry_run: bool,
        internet_gateway_id: ::String
      ) -> Hearth::Output[Types::DeleteInternetGatewayOutput]

    def delete_ipam: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteIpamOutput] |
      (?Types::DeleteIpamInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteIpamOutput] |
      (
        ?dry_run: bool,
        ipam_id: ::String,
        ?cascade: bool
      ) -> Hearth::Output[Types::DeleteIpamOutput]

    def delete_ipam_pool: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteIpamPoolOutput] |
      (?Types::DeleteIpamPoolInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteIpamPoolOutput] |
      (
        ?dry_run: bool,
        ipam_pool_id: ::String,
        ?cascade: bool
      ) -> Hearth::Output[Types::DeleteIpamPoolOutput]

    def delete_ipam_resource_discovery: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteIpamResourceDiscoveryOutput] |
      (?Types::DeleteIpamResourceDiscoveryInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteIpamResourceDiscoveryOutput] |
      (
        ?dry_run: bool,
        ipam_resource_discovery_id: ::String
      ) -> Hearth::Output[Types::DeleteIpamResourceDiscoveryOutput]

    def delete_ipam_scope: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteIpamScopeOutput] |
      (?Types::DeleteIpamScopeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteIpamScopeOutput] |
      (
        ?dry_run: bool,
        ipam_scope_id: ::String
      ) -> Hearth::Output[Types::DeleteIpamScopeOutput]

    def delete_key_pair: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteKeyPairOutput] |
      (?Types::DeleteKeyPairInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteKeyPairOutput] |
      (
        ?key_name: ::String,
        ?key_pair_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteKeyPairOutput]

    def delete_launch_template: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteLaunchTemplateOutput] |
      (?Types::DeleteLaunchTemplateInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteLaunchTemplateOutput] |
      (
        ?dry_run: bool,
        ?launch_template_id: ::String,
        ?launch_template_name: ::String
      ) -> Hearth::Output[Types::DeleteLaunchTemplateOutput]

    def delete_launch_template_versions: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteLaunchTemplateVersionsOutput] |
      (?Types::DeleteLaunchTemplateVersionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteLaunchTemplateVersionsOutput] |
      (
        ?dry_run: bool,
        ?launch_template_id: ::String,
        ?launch_template_name: ::String,
        versions: ::Array[::String]
      ) -> Hearth::Output[Types::DeleteLaunchTemplateVersionsOutput]

    def delete_local_gateway_route: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteLocalGatewayRouteOutput] |
      (?Types::DeleteLocalGatewayRouteInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteLocalGatewayRouteOutput] |
      (
        ?destination_cidr_block: ::String,
        local_gateway_route_table_id: ::String,
        ?dry_run: bool,
        ?destination_prefix_list_id: ::String
      ) -> Hearth::Output[Types::DeleteLocalGatewayRouteOutput]

    def delete_local_gateway_route_table: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteLocalGatewayRouteTableOutput] |
      (?Types::DeleteLocalGatewayRouteTableInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteLocalGatewayRouteTableOutput] |
      (
        local_gateway_route_table_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteLocalGatewayRouteTableOutput]

    def delete_local_gateway_route_table_virtual_interface_group_association: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput] |
      (?Types::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput] |
      (
        local_gateway_route_table_virtual_interface_group_association_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput]

    def delete_local_gateway_route_table_vpc_association: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteLocalGatewayRouteTableVpcAssociationOutput] |
      (?Types::DeleteLocalGatewayRouteTableVpcAssociationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteLocalGatewayRouteTableVpcAssociationOutput] |
      (
        local_gateway_route_table_vpc_association_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteLocalGatewayRouteTableVpcAssociationOutput]

    def delete_managed_prefix_list: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteManagedPrefixListOutput] |
      (?Types::DeleteManagedPrefixListInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteManagedPrefixListOutput] |
      (
        ?dry_run: bool,
        prefix_list_id: ::String
      ) -> Hearth::Output[Types::DeleteManagedPrefixListOutput]

    def delete_nat_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNatGatewayOutput] |
      (?Types::DeleteNatGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNatGatewayOutput] |
      (
        ?dry_run: bool,
        nat_gateway_id: ::String
      ) -> Hearth::Output[Types::DeleteNatGatewayOutput]

    def delete_network_acl: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkAclOutput] |
      (?Types::DeleteNetworkAclInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkAclOutput] |
      (
        ?dry_run: bool,
        network_acl_id: ::String
      ) -> Hearth::Output[Types::DeleteNetworkAclOutput]

    def delete_network_acl_entry: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkAclEntryOutput] |
      (?Types::DeleteNetworkAclEntryInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkAclEntryOutput] |
      (
        ?dry_run: bool,
        egress: bool,
        network_acl_id: ::String,
        rule_number: ::Integer
      ) -> Hearth::Output[Types::DeleteNetworkAclEntryOutput]

    def delete_network_insights_access_scope: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkInsightsAccessScopeOutput] |
      (?Types::DeleteNetworkInsightsAccessScopeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkInsightsAccessScopeOutput] |
      (
        ?dry_run: bool,
        network_insights_access_scope_id: ::String
      ) -> Hearth::Output[Types::DeleteNetworkInsightsAccessScopeOutput]

    def delete_network_insights_access_scope_analysis: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkInsightsAccessScopeAnalysisOutput] |
      (?Types::DeleteNetworkInsightsAccessScopeAnalysisInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkInsightsAccessScopeAnalysisOutput] |
      (
        network_insights_access_scope_analysis_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteNetworkInsightsAccessScopeAnalysisOutput]

    def delete_network_insights_analysis: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkInsightsAnalysisOutput] |
      (?Types::DeleteNetworkInsightsAnalysisInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkInsightsAnalysisOutput] |
      (
        ?dry_run: bool,
        network_insights_analysis_id: ::String
      ) -> Hearth::Output[Types::DeleteNetworkInsightsAnalysisOutput]

    def delete_network_insights_path: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkInsightsPathOutput] |
      (?Types::DeleteNetworkInsightsPathInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkInsightsPathOutput] |
      (
        ?dry_run: bool,
        network_insights_path_id: ::String
      ) -> Hearth::Output[Types::DeleteNetworkInsightsPathOutput]

    def delete_network_interface: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkInterfaceOutput] |
      (?Types::DeleteNetworkInterfaceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkInterfaceOutput] |
      (
        ?dry_run: bool,
        network_interface_id: ::String
      ) -> Hearth::Output[Types::DeleteNetworkInterfaceOutput]

    def delete_network_interface_permission: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkInterfacePermissionOutput] |
      (?Types::DeleteNetworkInterfacePermissionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteNetworkInterfacePermissionOutput] |
      (
        network_interface_permission_id: ::String,
        ?force: bool,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteNetworkInterfacePermissionOutput]

    def delete_placement_group: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeletePlacementGroupOutput] |
      (?Types::DeletePlacementGroupInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeletePlacementGroupOutput] |
      (
        ?dry_run: bool,
        group_name: ::String
      ) -> Hearth::Output[Types::DeletePlacementGroupOutput]

    def delete_public_ipv4_pool: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeletePublicIpv4PoolOutput] |
      (?Types::DeletePublicIpv4PoolInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeletePublicIpv4PoolOutput] |
      (
        ?dry_run: bool,
        pool_id: ::String
      ) -> Hearth::Output[Types::DeletePublicIpv4PoolOutput]

    def delete_queued_reserved_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteQueuedReservedInstancesOutput] |
      (?Types::DeleteQueuedReservedInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteQueuedReservedInstancesOutput] |
      (
        ?dry_run: bool,
        reserved_instances_ids: ::Array[::String]
      ) -> Hearth::Output[Types::DeleteQueuedReservedInstancesOutput]

    def delete_route: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteRouteOutput] |
      (?Types::DeleteRouteInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteRouteOutput] |
      (
        ?destination_cidr_block: ::String,
        ?destination_ipv6_cidr_block: ::String,
        ?destination_prefix_list_id: ::String,
        ?dry_run: bool,
        route_table_id: ::String
      ) -> Hearth::Output[Types::DeleteRouteOutput]

    def delete_route_table: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteRouteTableOutput] |
      (?Types::DeleteRouteTableInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteRouteTableOutput] |
      (
        ?dry_run: bool,
        route_table_id: ::String
      ) -> Hearth::Output[Types::DeleteRouteTableOutput]

    def delete_security_group: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteSecurityGroupOutput] |
      (?Types::DeleteSecurityGroupInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteSecurityGroupOutput] |
      (
        ?group_id: ::String,
        ?group_name: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteSecurityGroupOutput]

    def delete_snapshot: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteSnapshotOutput] |
      (?Types::DeleteSnapshotInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteSnapshotOutput] |
      (
        snapshot_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteSnapshotOutput]

    def delete_spot_datafeed_subscription: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteSpotDatafeedSubscriptionOutput] |
      (?Types::DeleteSpotDatafeedSubscriptionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteSpotDatafeedSubscriptionOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteSpotDatafeedSubscriptionOutput]

    def delete_subnet: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteSubnetOutput] |
      (?Types::DeleteSubnetInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteSubnetOutput] |
      (
        subnet_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteSubnetOutput]

    def delete_subnet_cidr_reservation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteSubnetCidrReservationOutput] |
      (?Types::DeleteSubnetCidrReservationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteSubnetCidrReservationOutput] |
      (
        subnet_cidr_reservation_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteSubnetCidrReservationOutput]

    def delete_tags: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTagsOutput] |
      (?Types::DeleteTagsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTagsOutput] |
      (
        ?dry_run: bool,
        resources: ::Array[::String],
        ?tags: ::Array[{
          key: ::String,
          value: ::String
        }]
      ) -> Hearth::Output[Types::DeleteTagsOutput]

    def delete_traffic_mirror_filter: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTrafficMirrorFilterOutput] |
      (?Types::DeleteTrafficMirrorFilterInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTrafficMirrorFilterOutput] |
      (
        traffic_mirror_filter_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteTrafficMirrorFilterOutput]

    def delete_traffic_mirror_filter_rule: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTrafficMirrorFilterRuleOutput] |
      (?Types::DeleteTrafficMirrorFilterRuleInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTrafficMirrorFilterRuleOutput] |
      (
        traffic_mirror_filter_rule_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteTrafficMirrorFilterRuleOutput]

    def delete_traffic_mirror_session: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTrafficMirrorSessionOutput] |
      (?Types::DeleteTrafficMirrorSessionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTrafficMirrorSessionOutput] |
      (
        traffic_mirror_session_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteTrafficMirrorSessionOutput]

    def delete_traffic_mirror_target: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTrafficMirrorTargetOutput] |
      (?Types::DeleteTrafficMirrorTargetInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTrafficMirrorTargetOutput] |
      (
        traffic_mirror_target_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteTrafficMirrorTargetOutput]

    def delete_transit_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayOutput] |
      (?Types::DeleteTransitGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayOutput] |
      (
        transit_gateway_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteTransitGatewayOutput]

    def delete_transit_gateway_connect: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayConnectOutput] |
      (?Types::DeleteTransitGatewayConnectInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayConnectOutput] |
      (
        transit_gateway_attachment_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteTransitGatewayConnectOutput]

    def delete_transit_gateway_connect_peer: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayConnectPeerOutput] |
      (?Types::DeleteTransitGatewayConnectPeerInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayConnectPeerOutput] |
      (
        transit_gateway_connect_peer_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteTransitGatewayConnectPeerOutput]

    def delete_transit_gateway_multicast_domain: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayMulticastDomainOutput] |
      (?Types::DeleteTransitGatewayMulticastDomainInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayMulticastDomainOutput] |
      (
        transit_gateway_multicast_domain_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteTransitGatewayMulticastDomainOutput]

    def delete_transit_gateway_peering_attachment: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayPeeringAttachmentOutput] |
      (?Types::DeleteTransitGatewayPeeringAttachmentInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayPeeringAttachmentOutput] |
      (
        transit_gateway_attachment_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteTransitGatewayPeeringAttachmentOutput]

    def delete_transit_gateway_policy_table: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayPolicyTableOutput] |
      (?Types::DeleteTransitGatewayPolicyTableInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayPolicyTableOutput] |
      (
        transit_gateway_policy_table_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteTransitGatewayPolicyTableOutput]

    def delete_transit_gateway_prefix_list_reference: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayPrefixListReferenceOutput] |
      (?Types::DeleteTransitGatewayPrefixListReferenceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayPrefixListReferenceOutput] |
      (
        transit_gateway_route_table_id: ::String,
        prefix_list_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteTransitGatewayPrefixListReferenceOutput]

    def delete_transit_gateway_route: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayRouteOutput] |
      (?Types::DeleteTransitGatewayRouteInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayRouteOutput] |
      (
        transit_gateway_route_table_id: ::String,
        destination_cidr_block: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteTransitGatewayRouteOutput]

    def delete_transit_gateway_route_table: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayRouteTableOutput] |
      (?Types::DeleteTransitGatewayRouteTableInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayRouteTableOutput] |
      (
        transit_gateway_route_table_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteTransitGatewayRouteTableOutput]

    def delete_transit_gateway_route_table_announcement: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayRouteTableAnnouncementOutput] |
      (?Types::DeleteTransitGatewayRouteTableAnnouncementInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayRouteTableAnnouncementOutput] |
      (
        transit_gateway_route_table_announcement_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteTransitGatewayRouteTableAnnouncementOutput]

    def delete_transit_gateway_vpc_attachment: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayVpcAttachmentOutput] |
      (?Types::DeleteTransitGatewayVpcAttachmentInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteTransitGatewayVpcAttachmentOutput] |
      (
        transit_gateway_attachment_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteTransitGatewayVpcAttachmentOutput]

    def delete_verified_access_endpoint: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVerifiedAccessEndpointOutput] |
      (?Types::DeleteVerifiedAccessEndpointInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVerifiedAccessEndpointOutput] |
      (
        verified_access_endpoint_id: ::String,
        ?client_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteVerifiedAccessEndpointOutput]

    def delete_verified_access_group: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVerifiedAccessGroupOutput] |
      (?Types::DeleteVerifiedAccessGroupInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVerifiedAccessGroupOutput] |
      (
        verified_access_group_id: ::String,
        ?client_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteVerifiedAccessGroupOutput]

    def delete_verified_access_instance: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVerifiedAccessInstanceOutput] |
      (?Types::DeleteVerifiedAccessInstanceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVerifiedAccessInstanceOutput] |
      (
        verified_access_instance_id: ::String,
        ?dry_run: bool,
        ?client_token: ::String
      ) -> Hearth::Output[Types::DeleteVerifiedAccessInstanceOutput]

    def delete_verified_access_trust_provider: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVerifiedAccessTrustProviderOutput] |
      (?Types::DeleteVerifiedAccessTrustProviderInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVerifiedAccessTrustProviderOutput] |
      (
        verified_access_trust_provider_id: ::String,
        ?dry_run: bool,
        ?client_token: ::String
      ) -> Hearth::Output[Types::DeleteVerifiedAccessTrustProviderOutput]

    def delete_volume: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVolumeOutput] |
      (?Types::DeleteVolumeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVolumeOutput] |
      (
        volume_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteVolumeOutput]

    def delete_vpc: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpcOutput] |
      (?Types::DeleteVpcInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpcOutput] |
      (
        vpc_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteVpcOutput]

    def delete_vpc_endpoint_connection_notifications: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpcEndpointConnectionNotificationsOutput] |
      (?Types::DeleteVpcEndpointConnectionNotificationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpcEndpointConnectionNotificationsOutput] |
      (
        ?dry_run: bool,
        connection_notification_ids: ::Array[::String]
      ) -> Hearth::Output[Types::DeleteVpcEndpointConnectionNotificationsOutput]

    def delete_vpc_endpoint_service_configurations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpcEndpointServiceConfigurationsOutput] |
      (?Types::DeleteVpcEndpointServiceConfigurationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpcEndpointServiceConfigurationsOutput] |
      (
        ?dry_run: bool,
        service_ids: ::Array[::String]
      ) -> Hearth::Output[Types::DeleteVpcEndpointServiceConfigurationsOutput]

    def delete_vpc_endpoints: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpcEndpointsOutput] |
      (?Types::DeleteVpcEndpointsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpcEndpointsOutput] |
      (
        ?dry_run: bool,
        vpc_endpoint_ids: ::Array[::String]
      ) -> Hearth::Output[Types::DeleteVpcEndpointsOutput]

    def delete_vpc_peering_connection: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpcPeeringConnectionOutput] |
      (?Types::DeleteVpcPeeringConnectionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpcPeeringConnectionOutput] |
      (
        ?dry_run: bool,
        vpc_peering_connection_id: ::String
      ) -> Hearth::Output[Types::DeleteVpcPeeringConnectionOutput]

    def delete_vpn_connection: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpnConnectionOutput] |
      (?Types::DeleteVpnConnectionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpnConnectionOutput] |
      (
        vpn_connection_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteVpnConnectionOutput]

    def delete_vpn_connection_route: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpnConnectionRouteOutput] |
      (?Types::DeleteVpnConnectionRouteInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpnConnectionRouteOutput] |
      (
        destination_cidr_block: ::String,
        vpn_connection_id: ::String
      ) -> Hearth::Output[Types::DeleteVpnConnectionRouteOutput]

    def delete_vpn_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpnGatewayOutput] |
      (?Types::DeleteVpnGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteVpnGatewayOutput] |
      (
        vpn_gateway_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeleteVpnGatewayOutput]

    def deprovision_byoip_cidr: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeprovisionByoipCidrOutput] |
      (?Types::DeprovisionByoipCidrInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeprovisionByoipCidrOutput] |
      (
        cidr: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeprovisionByoipCidrOutput]

    def deprovision_ipam_byoasn: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeprovisionIpamByoasnOutput] |
      (?Types::DeprovisionIpamByoasnInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeprovisionIpamByoasnOutput] |
      (
        ?dry_run: bool,
        ipam_id: ::String,
        asn: ::String
      ) -> Hearth::Output[Types::DeprovisionIpamByoasnOutput]

    def deprovision_ipam_pool_cidr: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeprovisionIpamPoolCidrOutput] |
      (?Types::DeprovisionIpamPoolCidrInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeprovisionIpamPoolCidrOutput] |
      (
        ?dry_run: bool,
        ipam_pool_id: ::String,
        ?cidr: ::String
      ) -> Hearth::Output[Types::DeprovisionIpamPoolCidrOutput]

    def deprovision_public_ipv4_pool_cidr: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeprovisionPublicIpv4PoolCidrOutput] |
      (?Types::DeprovisionPublicIpv4PoolCidrInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeprovisionPublicIpv4PoolCidrOutput] |
      (
        ?dry_run: bool,
        pool_id: ::String,
        cidr: ::String
      ) -> Hearth::Output[Types::DeprovisionPublicIpv4PoolCidrOutput]

    def deregister_image: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeregisterImageOutput] |
      (?Types::DeregisterImageInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeregisterImageOutput] |
      (
        image_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeregisterImageOutput]

    def deregister_instance_event_notification_attributes: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeregisterInstanceEventNotificationAttributesOutput] |
      (?Types::DeregisterInstanceEventNotificationAttributesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeregisterInstanceEventNotificationAttributesOutput] |
      (
        ?dry_run: bool,
        instance_tag_attribute: {
          include_all_tags_of_instance: bool,
          instance_tag_keys: ::Array[::String]
        }
      ) -> Hearth::Output[Types::DeregisterInstanceEventNotificationAttributesOutput]

    def deregister_transit_gateway_multicast_group_members: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeregisterTransitGatewayMulticastGroupMembersOutput] |
      (?Types::DeregisterTransitGatewayMulticastGroupMembersInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeregisterTransitGatewayMulticastGroupMembersOutput] |
      (
        ?transit_gateway_multicast_domain_id: ::String,
        ?group_ip_address: ::String,
        ?network_interface_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeregisterTransitGatewayMulticastGroupMembersOutput]

    def deregister_transit_gateway_multicast_group_sources: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeregisterTransitGatewayMulticastGroupSourcesOutput] |
      (?Types::DeregisterTransitGatewayMulticastGroupSourcesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeregisterTransitGatewayMulticastGroupSourcesOutput] |
      (
        ?transit_gateway_multicast_domain_id: ::String,
        ?group_ip_address: ::String,
        ?network_interface_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DeregisterTransitGatewayMulticastGroupSourcesOutput]

    def describe_account_attributes: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAccountAttributesOutput] |
      (?Types::DescribeAccountAttributesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAccountAttributesOutput] |
      (
        ?attribute_names: ::Array[("supported-platforms" | "default-vpc")],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeAccountAttributesOutput]

    def describe_address_transfers: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAddressTransfersOutput] |
      (?Types::DescribeAddressTransfersInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAddressTransfersOutput] |
      (
        ?allocation_ids: ::Array[::String],
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeAddressTransfersOutput]

    def describe_addresses: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAddressesOutput] |
      (?Types::DescribeAddressesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAddressesOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?public_ips: ::Array[::String],
        ?allocation_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeAddressesOutput]

    def describe_addresses_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAddressesAttributeOutput] |
      (?Types::DescribeAddressesAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAddressesAttributeOutput] |
      (
        ?allocation_ids: ::Array[::String],
        ?attribute: ("domain-name"),
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeAddressesAttributeOutput]

    def describe_aggregate_id_format: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAggregateIdFormatOutput] |
      (?Types::DescribeAggregateIdFormatInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAggregateIdFormatOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeAggregateIdFormatOutput]

    def describe_availability_zones: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAvailabilityZonesOutput] |
      (?Types::DescribeAvailabilityZonesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAvailabilityZonesOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?zone_names: ::Array[::String],
        ?zone_ids: ::Array[::String],
        ?all_availability_zones: bool,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeAvailabilityZonesOutput]

    def describe_aws_network_performance_metric_subscriptions: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAwsNetworkPerformanceMetricSubscriptionsOutput] |
      (?Types::DescribeAwsNetworkPerformanceMetricSubscriptionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAwsNetworkPerformanceMetricSubscriptionsOutput] |
      (
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeAwsNetworkPerformanceMetricSubscriptionsOutput]

    def describe_bundle_tasks: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeBundleTasksOutput] |
      (?Types::DescribeBundleTasksInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeBundleTasksOutput] |
      (
        ?bundle_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeBundleTasksOutput]

    def describe_byoip_cidrs: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeByoipCidrsOutput] |
      (?Types::DescribeByoipCidrsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeByoipCidrsOutput] |
      (
        ?dry_run: bool,
        max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeByoipCidrsOutput]

    def describe_capacity_block_offerings: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeCapacityBlockOfferingsOutput] |
      (?Types::DescribeCapacityBlockOfferingsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeCapacityBlockOfferingsOutput] |
      (
        ?dry_run: bool,
        instance_type: ::String,
        instance_count: ::Integer,
        ?start_date_range: ::Time,
        ?end_date_range: ::Time,
        capacity_duration_hours: ::Integer,
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeCapacityBlockOfferingsOutput]

    def describe_capacity_reservation_fleets: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeCapacityReservationFleetsOutput] |
      (?Types::DescribeCapacityReservationFleetsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeCapacityReservationFleetsOutput] |
      (
        ?capacity_reservation_fleet_ids: ::Array[::String],
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeCapacityReservationFleetsOutput]

    def describe_capacity_reservations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeCapacityReservationsOutput] |
      (?Types::DescribeCapacityReservationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeCapacityReservationsOutput] |
      (
        ?capacity_reservation_ids: ::Array[::String],
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeCapacityReservationsOutput]

    def describe_carrier_gateways: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeCarrierGatewaysOutput] |
      (?Types::DescribeCarrierGatewaysInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeCarrierGatewaysOutput] |
      (
        ?carrier_gateway_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeCarrierGatewaysOutput]

    def describe_classic_link_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeClassicLinkInstancesOutput] |
      (?Types::DescribeClassicLinkInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeClassicLinkInstancesOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool,
        ?instance_ids: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeClassicLinkInstancesOutput]

    def describe_client_vpn_authorization_rules: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeClientVpnAuthorizationRulesOutput] |
      (?Types::DescribeClientVpnAuthorizationRulesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeClientVpnAuthorizationRulesOutput] |
      (
        client_vpn_endpoint_id: ::String,
        ?dry_run: bool,
        ?next_token: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeClientVpnAuthorizationRulesOutput]

    def describe_client_vpn_connections: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeClientVpnConnectionsOutput] |
      (?Types::DescribeClientVpnConnectionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeClientVpnConnectionsOutput] |
      (
        client_vpn_endpoint_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeClientVpnConnectionsOutput]

    def describe_client_vpn_endpoints: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeClientVpnEndpointsOutput] |
      (?Types::DescribeClientVpnEndpointsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeClientVpnEndpointsOutput] |
      (
        ?client_vpn_endpoint_ids: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeClientVpnEndpointsOutput]

    def describe_client_vpn_routes: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeClientVpnRoutesOutput] |
      (?Types::DescribeClientVpnRoutesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeClientVpnRoutesOutput] |
      (
        client_vpn_endpoint_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeClientVpnRoutesOutput]

    def describe_client_vpn_target_networks: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeClientVpnTargetNetworksOutput] |
      (?Types::DescribeClientVpnTargetNetworksInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeClientVpnTargetNetworksOutput] |
      (
        client_vpn_endpoint_id: ::String,
        ?association_ids: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeClientVpnTargetNetworksOutput]

    def describe_coip_pools: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeCoipPoolsOutput] |
      (?Types::DescribeCoipPoolsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeCoipPoolsOutput] |
      (
        ?pool_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeCoipPoolsOutput]

    def describe_conversion_tasks: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeConversionTasksOutput] |
      (?Types::DescribeConversionTasksInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeConversionTasksOutput] |
      (
        ?conversion_task_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeConversionTasksOutput]

    def describe_customer_gateways: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeCustomerGatewaysOutput] |
      (?Types::DescribeCustomerGatewaysInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeCustomerGatewaysOutput] |
      (
        ?customer_gateway_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeCustomerGatewaysOutput]

    def describe_dhcp_options: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeDhcpOptionsOutput] |
      (?Types::DescribeDhcpOptionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeDhcpOptionsOutput] |
      (
        ?dhcp_options_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool,
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeDhcpOptionsOutput]

    def describe_egress_only_internet_gateways: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeEgressOnlyInternetGatewaysOutput] |
      (?Types::DescribeEgressOnlyInternetGatewaysInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeEgressOnlyInternetGatewaysOutput] |
      (
        ?dry_run: bool,
        ?egress_only_internet_gateway_ids: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }]
      ) -> Hearth::Output[Types::DescribeEgressOnlyInternetGatewaysOutput]

    def describe_elastic_gpus: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeElasticGpusOutput] |
      (?Types::DescribeElasticGpusInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeElasticGpusOutput] |
      (
        ?elastic_gpu_ids: ::Array[::String],
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeElasticGpusOutput]

    def describe_export_image_tasks: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeExportImageTasksOutput] |
      (?Types::DescribeExportImageTasksInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeExportImageTasksOutput] |
      (
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?export_image_task_ids: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeExportImageTasksOutput]

    def describe_export_tasks: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeExportTasksOutput] |
      (?Types::DescribeExportTasksInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeExportTasksOutput] |
      (
        ?export_task_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }]
      ) -> Hearth::Output[Types::DescribeExportTasksOutput]

    def describe_fast_launch_images: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFastLaunchImagesOutput] |
      (?Types::DescribeFastLaunchImagesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFastLaunchImagesOutput] |
      (
        ?image_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeFastLaunchImagesOutput]

    def describe_fast_snapshot_restores: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFastSnapshotRestoresOutput] |
      (?Types::DescribeFastSnapshotRestoresInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFastSnapshotRestoresOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeFastSnapshotRestoresOutput]

    def describe_fleet_history: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFleetHistoryOutput] |
      (?Types::DescribeFleetHistoryInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFleetHistoryOutput] |
      (
        ?dry_run: bool,
        ?event_type: ("instance-change" | "fleet-change" | "service-error"),
        ?max_results: ::Integer,
        ?next_token: ::String,
        fleet_id: ::String,
        start_time: ::Time
      ) -> Hearth::Output[Types::DescribeFleetHistoryOutput]

    def describe_fleet_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFleetInstancesOutput] |
      (?Types::DescribeFleetInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFleetInstancesOutput] |
      (
        ?dry_run: bool,
        ?max_results: ::Integer,
        ?next_token: ::String,
        fleet_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }]
      ) -> Hearth::Output[Types::DescribeFleetInstancesOutput]

    def describe_fleets: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFleetsOutput] |
      (?Types::DescribeFleetsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFleetsOutput] |
      (
        ?dry_run: bool,
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?fleet_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }]
      ) -> Hearth::Output[Types::DescribeFleetsOutput]

    def describe_flow_logs: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFlowLogsOutput] |
      (?Types::DescribeFlowLogsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFlowLogsOutput] |
      (
        ?dry_run: bool,
        ?filter: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?flow_log_ids: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeFlowLogsOutput]

    def describe_fpga_image_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFpgaImageAttributeOutput] |
      (?Types::DescribeFpgaImageAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFpgaImageAttributeOutput] |
      (
        ?dry_run: bool,
        fpga_image_id: ::String,
        attribute: ("description" | "name" | "loadPermission" | "productCodes")
      ) -> Hearth::Output[Types::DescribeFpgaImageAttributeOutput]

    def describe_fpga_images: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFpgaImagesOutput] |
      (?Types::DescribeFpgaImagesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeFpgaImagesOutput] |
      (
        ?dry_run: bool,
        ?fpga_image_ids: ::Array[::String],
        ?owners: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeFpgaImagesOutput]

    def describe_host_reservation_offerings: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeHostReservationOfferingsOutput] |
      (?Types::DescribeHostReservationOfferingsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeHostReservationOfferingsOutput] |
      (
        ?filter: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_duration: ::Integer,
        ?max_results: ::Integer,
        ?min_duration: ::Integer,
        ?next_token: ::String,
        ?offering_id: ::String
      ) -> Hearth::Output[Types::DescribeHostReservationOfferingsOutput]

    def describe_host_reservations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeHostReservationsOutput] |
      (?Types::DescribeHostReservationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeHostReservationsOutput] |
      (
        ?filter: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?host_reservation_id_set: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeHostReservationsOutput]

    def describe_hosts: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeHostsOutput] |
      (?Types::DescribeHostsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeHostsOutput] |
      (
        ?filter: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?host_ids: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeHostsOutput]

    def describe_iam_instance_profile_associations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIamInstanceProfileAssociationsOutput] |
      (?Types::DescribeIamInstanceProfileAssociationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIamInstanceProfileAssociationsOutput] |
      (
        ?association_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeIamInstanceProfileAssociationsOutput]

    def describe_id_format: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIdFormatOutput] |
      (?Types::DescribeIdFormatInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIdFormatOutput] |
      (
        ?resource: ::String
      ) -> Hearth::Output[Types::DescribeIdFormatOutput]

    def describe_identity_id_format: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIdentityIdFormatOutput] |
      (?Types::DescribeIdentityIdFormatInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIdentityIdFormatOutput] |
      (
        principal_arn: ::String,
        ?resource: ::String
      ) -> Hearth::Output[Types::DescribeIdentityIdFormatOutput]

    def describe_image_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeImageAttributeOutput] |
      (?Types::DescribeImageAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeImageAttributeOutput] |
      (
        attribute: ("description" | "kernel" | "ramdisk" | "launchPermission" | "productCodes" | "blockDeviceMapping" | "sriovNetSupport" | "bootMode" | "tpmSupport" | "uefiData" | "lastLaunchedTime" | "imdsSupport"),
        image_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeImageAttributeOutput]

    def describe_images: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeImagesOutput] |
      (?Types::DescribeImagesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeImagesOutput] |
      (
        ?executable_users: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?image_ids: ::Array[::String],
        ?owners: ::Array[::String],
        ?include_deprecated: bool,
        ?include_disabled: bool,
        ?dry_run: bool,
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeImagesOutput]

    def describe_import_image_tasks: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeImportImageTasksOutput] |
      (?Types::DescribeImportImageTasksInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeImportImageTasksOutput] |
      (
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?import_task_ids: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeImportImageTasksOutput]

    def describe_import_snapshot_tasks: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeImportSnapshotTasksOutput] |
      (?Types::DescribeImportSnapshotTasksInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeImportSnapshotTasksOutput] |
      (
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?import_task_ids: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeImportSnapshotTasksOutput]

    def describe_instance_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceAttributeOutput] |
      (?Types::DescribeInstanceAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceAttributeOutput] |
      (
        attribute: ("instanceType" | "kernel" | "ramdisk" | "userData" | "disableApiTermination" | "instanceInitiatedShutdownBehavior" | "rootDeviceName" | "blockDeviceMapping" | "productCodes" | "sourceDestCheck" | "groupSet" | "ebsOptimized" | "sriovNetSupport" | "enaSupport" | "enclaveOptions" | "disableApiStop"),
        ?dry_run: bool,
        instance_id: ::String
      ) -> Hearth::Output[Types::DescribeInstanceAttributeOutput]

    def describe_instance_connect_endpoints: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceConnectEndpointsOutput] |
      (?Types::DescribeInstanceConnectEndpointsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceConnectEndpointsOutput] |
      (
        ?dry_run: bool,
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?instance_connect_endpoint_ids: ::Array[::String]
      ) -> Hearth::Output[Types::DescribeInstanceConnectEndpointsOutput]

    def describe_instance_credit_specifications: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceCreditSpecificationsOutput] |
      (?Types::DescribeInstanceCreditSpecificationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceCreditSpecificationsOutput] |
      (
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?instance_ids: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeInstanceCreditSpecificationsOutput]

    def describe_instance_event_notification_attributes: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceEventNotificationAttributesOutput] |
      (?Types::DescribeInstanceEventNotificationAttributesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceEventNotificationAttributesOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeInstanceEventNotificationAttributesOutput]

    def describe_instance_event_windows: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceEventWindowsOutput] |
      (?Types::DescribeInstanceEventWindowsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceEventWindowsOutput] |
      (
        ?dry_run: bool,
        ?instance_event_window_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeInstanceEventWindowsOutput]

    def describe_instance_status: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceStatusOutput] |
      (?Types::DescribeInstanceStatusInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceStatusOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?instance_ids: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool,
        ?include_all_instances: bool
      ) -> Hearth::Output[Types::DescribeInstanceStatusOutput]

    def describe_instance_topology: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceTopologyOutput] |
      (?Types::DescribeInstanceTopologyInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceTopologyOutput] |
      (
        ?dry_run: bool,
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?instance_ids: ::Array[::String],
        ?group_names: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }]
      ) -> Hearth::Output[Types::DescribeInstanceTopologyOutput]

    def describe_instance_type_offerings: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceTypeOfferingsOutput] |
      (?Types::DescribeInstanceTypeOfferingsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceTypeOfferingsOutput] |
      (
        ?dry_run: bool,
        ?location_type: ("region" | "availability-zone" | "availability-zone-id" | "outpost"),
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeInstanceTypeOfferingsOutput]

    def describe_instance_types: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceTypesOutput] |
      (?Types::DescribeInstanceTypesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstanceTypesOutput] |
      (
        ?dry_run: bool,
        ?instance_types: ::Array[("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl")],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeInstanceTypesOutput]

    def describe_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstancesOutput] |
      (?Types::DescribeInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInstancesOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?instance_ids: ::Array[::String],
        ?dry_run: bool,
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeInstancesOutput]

    def describe_internet_gateways: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInternetGatewaysOutput] |
      (?Types::DescribeInternetGatewaysInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInternetGatewaysOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool,
        ?internet_gateway_ids: ::Array[::String],
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeInternetGatewaysOutput]

    def describe_ipam_byoasn: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIpamByoasnOutput] |
      (?Types::DescribeIpamByoasnInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIpamByoasnOutput] |
      (
        ?dry_run: bool,
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeIpamByoasnOutput]

    def describe_ipam_pools: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIpamPoolsOutput] |
      (?Types::DescribeIpamPoolsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIpamPoolsOutput] |
      (
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?ipam_pool_ids: ::Array[::String]
      ) -> Hearth::Output[Types::DescribeIpamPoolsOutput]

    def describe_ipam_resource_discoveries: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIpamResourceDiscoveriesOutput] |
      (?Types::DescribeIpamResourceDiscoveriesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIpamResourceDiscoveriesOutput] |
      (
        ?dry_run: bool,
        ?ipam_resource_discovery_ids: ::Array[::String],
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }]
      ) -> Hearth::Output[Types::DescribeIpamResourceDiscoveriesOutput]

    def describe_ipam_resource_discovery_associations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIpamResourceDiscoveryAssociationsOutput] |
      (?Types::DescribeIpamResourceDiscoveryAssociationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIpamResourceDiscoveryAssociationsOutput] |
      (
        ?dry_run: bool,
        ?ipam_resource_discovery_association_ids: ::Array[::String],
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }]
      ) -> Hearth::Output[Types::DescribeIpamResourceDiscoveryAssociationsOutput]

    def describe_ipam_scopes: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIpamScopesOutput] |
      (?Types::DescribeIpamScopesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIpamScopesOutput] |
      (
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?ipam_scope_ids: ::Array[::String]
      ) -> Hearth::Output[Types::DescribeIpamScopesOutput]

    def describe_ipams: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIpamsOutput] |
      (?Types::DescribeIpamsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIpamsOutput] |
      (
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?ipam_ids: ::Array[::String]
      ) -> Hearth::Output[Types::DescribeIpamsOutput]

    def describe_ipv6_pools: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIpv6PoolsOutput] |
      (?Types::DescribeIpv6PoolsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeIpv6PoolsOutput] |
      (
        ?pool_ids: ::Array[::String],
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }]
      ) -> Hearth::Output[Types::DescribeIpv6PoolsOutput]

    def describe_key_pairs: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeKeyPairsOutput] |
      (?Types::DescribeKeyPairsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeKeyPairsOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?key_names: ::Array[::String],
        ?key_pair_ids: ::Array[::String],
        ?dry_run: bool,
        ?include_public_key: bool
      ) -> Hearth::Output[Types::DescribeKeyPairsOutput]

    def describe_launch_template_versions: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLaunchTemplateVersionsOutput] |
      (?Types::DescribeLaunchTemplateVersionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLaunchTemplateVersionsOutput] |
      (
        ?dry_run: bool,
        ?launch_template_id: ::String,
        ?launch_template_name: ::String,
        ?versions: ::Array[::String],
        ?min_version: ::String,
        ?max_version: ::String,
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?resolve_alias: bool
      ) -> Hearth::Output[Types::DescribeLaunchTemplateVersionsOutput]

    def describe_launch_templates: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLaunchTemplatesOutput] |
      (?Types::DescribeLaunchTemplatesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLaunchTemplatesOutput] |
      (
        ?dry_run: bool,
        ?launch_template_ids: ::Array[::String],
        ?launch_template_names: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeLaunchTemplatesOutput]

    def describe_local_gateway_route_table_virtual_interface_group_associations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput] |
      (?Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput] |
      (
        ?local_gateway_route_table_virtual_interface_group_association_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput]

    def describe_local_gateway_route_table_vpc_associations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLocalGatewayRouteTableVpcAssociationsOutput] |
      (?Types::DescribeLocalGatewayRouteTableVpcAssociationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLocalGatewayRouteTableVpcAssociationsOutput] |
      (
        ?local_gateway_route_table_vpc_association_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeLocalGatewayRouteTableVpcAssociationsOutput]

    def describe_local_gateway_route_tables: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLocalGatewayRouteTablesOutput] |
      (?Types::DescribeLocalGatewayRouteTablesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLocalGatewayRouteTablesOutput] |
      (
        ?local_gateway_route_table_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeLocalGatewayRouteTablesOutput]

    def describe_local_gateway_virtual_interface_groups: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLocalGatewayVirtualInterfaceGroupsOutput] |
      (?Types::DescribeLocalGatewayVirtualInterfaceGroupsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLocalGatewayVirtualInterfaceGroupsOutput] |
      (
        ?local_gateway_virtual_interface_group_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeLocalGatewayVirtualInterfaceGroupsOutput]

    def describe_local_gateway_virtual_interfaces: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLocalGatewayVirtualInterfacesOutput] |
      (?Types::DescribeLocalGatewayVirtualInterfacesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLocalGatewayVirtualInterfacesOutput] |
      (
        ?local_gateway_virtual_interface_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeLocalGatewayVirtualInterfacesOutput]

    def describe_local_gateways: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLocalGatewaysOutput] |
      (?Types::DescribeLocalGatewaysInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLocalGatewaysOutput] |
      (
        ?local_gateway_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeLocalGatewaysOutput]

    def describe_locked_snapshots: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLockedSnapshotsOutput] |
      (?Types::DescribeLockedSnapshotsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeLockedSnapshotsOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?snapshot_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeLockedSnapshotsOutput]

    def describe_managed_prefix_lists: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeManagedPrefixListsOutput] |
      (?Types::DescribeManagedPrefixListsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeManagedPrefixListsOutput] |
      (
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?prefix_list_ids: ::Array[::String]
      ) -> Hearth::Output[Types::DescribeManagedPrefixListsOutput]

    def describe_moving_addresses: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeMovingAddressesOutput] |
      (?Types::DescribeMovingAddressesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeMovingAddressesOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool,
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?public_ips: ::Array[::String]
      ) -> Hearth::Output[Types::DescribeMovingAddressesOutput]

    def describe_nat_gateways: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNatGatewaysOutput] |
      (?Types::DescribeNatGatewaysInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNatGatewaysOutput] |
      (
        ?dry_run: bool,
        ?filter: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?nat_gateway_ids: ::Array[::String],
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeNatGatewaysOutput]

    def describe_network_acls: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkAclsOutput] |
      (?Types::DescribeNetworkAclsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkAclsOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool,
        ?network_acl_ids: ::Array[::String],
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeNetworkAclsOutput]

    def describe_network_insights_access_scope_analyses: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkInsightsAccessScopeAnalysesOutput] |
      (?Types::DescribeNetworkInsightsAccessScopeAnalysesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkInsightsAccessScopeAnalysesOutput] |
      (
        ?network_insights_access_scope_analysis_ids: ::Array[::String],
        ?network_insights_access_scope_id: ::String,
        ?analysis_start_time_begin: ::Time,
        ?analysis_start_time_end: ::Time,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?dry_run: bool,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeNetworkInsightsAccessScopeAnalysesOutput]

    def describe_network_insights_access_scopes: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkInsightsAccessScopesOutput] |
      (?Types::DescribeNetworkInsightsAccessScopesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkInsightsAccessScopesOutput] |
      (
        ?network_insights_access_scope_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?dry_run: bool,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeNetworkInsightsAccessScopesOutput]

    def describe_network_insights_analyses: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkInsightsAnalysesOutput] |
      (?Types::DescribeNetworkInsightsAnalysesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkInsightsAnalysesOutput] |
      (
        ?network_insights_analysis_ids: ::Array[::String],
        ?network_insights_path_id: ::String,
        ?analysis_start_time: ::Time,
        ?analysis_end_time: ::Time,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?dry_run: bool,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeNetworkInsightsAnalysesOutput]

    def describe_network_insights_paths: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkInsightsPathsOutput] |
      (?Types::DescribeNetworkInsightsPathsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkInsightsPathsOutput] |
      (
        ?network_insights_path_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?dry_run: bool,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeNetworkInsightsPathsOutput]

    def describe_network_interface_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkInterfaceAttributeOutput] |
      (?Types::DescribeNetworkInterfaceAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkInterfaceAttributeOutput] |
      (
        ?attribute: ("description" | "groupSet" | "sourceDestCheck" | "attachment"),
        ?dry_run: bool,
        network_interface_id: ::String
      ) -> Hearth::Output[Types::DescribeNetworkInterfaceAttributeOutput]

    def describe_network_interface_permissions: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkInterfacePermissionsOutput] |
      (?Types::DescribeNetworkInterfacePermissionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkInterfacePermissionsOutput] |
      (
        ?network_interface_permission_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeNetworkInterfacePermissionsOutput]

    def describe_network_interfaces: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkInterfacesOutput] |
      (?Types::DescribeNetworkInterfacesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeNetworkInterfacesOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool,
        ?network_interface_ids: ::Array[::String],
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeNetworkInterfacesOutput]

    def describe_placement_groups: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribePlacementGroupsOutput] |
      (?Types::DescribePlacementGroupsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribePlacementGroupsOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool,
        ?group_names: ::Array[::String],
        ?group_ids: ::Array[::String]
      ) -> Hearth::Output[Types::DescribePlacementGroupsOutput]

    def describe_prefix_lists: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribePrefixListsOutput] |
      (?Types::DescribePrefixListsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribePrefixListsOutput] |
      (
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?prefix_list_ids: ::Array[::String]
      ) -> Hearth::Output[Types::DescribePrefixListsOutput]

    def describe_principal_id_format: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribePrincipalIdFormatOutput] |
      (?Types::DescribePrincipalIdFormatInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribePrincipalIdFormatOutput] |
      (
        ?dry_run: bool,
        ?resources: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribePrincipalIdFormatOutput]

    def describe_public_ipv4_pools: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribePublicIpv4PoolsOutput] |
      (?Types::DescribePublicIpv4PoolsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribePublicIpv4PoolsOutput] |
      (
        ?pool_ids: ::Array[::String],
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }]
      ) -> Hearth::Output[Types::DescribePublicIpv4PoolsOutput]

    def describe_regions: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeRegionsOutput] |
      (?Types::DescribeRegionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeRegionsOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?region_names: ::Array[::String],
        ?dry_run: bool,
        ?all_regions: bool
      ) -> Hearth::Output[Types::DescribeRegionsOutput]

    def describe_replace_root_volume_tasks: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeReplaceRootVolumeTasksOutput] |
      (?Types::DescribeReplaceRootVolumeTasksInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeReplaceRootVolumeTasksOutput] |
      (
        ?replace_root_volume_task_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeReplaceRootVolumeTasksOutput]

    def describe_reserved_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeReservedInstancesOutput] |
      (?Types::DescribeReservedInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeReservedInstancesOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?offering_class: ("standard" | "convertible"),
        ?reserved_instances_ids: ::Array[::String],
        ?dry_run: bool,
        ?offering_type: ("Heavy Utilization" | "Medium Utilization" | "Light Utilization" | "No Upfront" | "Partial Upfront" | "All Upfront")
      ) -> Hearth::Output[Types::DescribeReservedInstancesOutput]

    def describe_reserved_instances_listings: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeReservedInstancesListingsOutput] |
      (?Types::DescribeReservedInstancesListingsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeReservedInstancesListingsOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?reserved_instances_id: ::String,
        ?reserved_instances_listing_id: ::String
      ) -> Hearth::Output[Types::DescribeReservedInstancesListingsOutput]

    def describe_reserved_instances_modifications: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeReservedInstancesModificationsOutput] |
      (?Types::DescribeReservedInstancesModificationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeReservedInstancesModificationsOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?reserved_instances_modification_ids: ::Array[::String],
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeReservedInstancesModificationsOutput]

    def describe_reserved_instances_offerings: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeReservedInstancesOfferingsOutput] |
      (?Types::DescribeReservedInstancesOfferingsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeReservedInstancesOfferingsOutput] |
      (
        ?availability_zone: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?include_marketplace: bool,
        ?instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl"),
        ?max_duration: ::Integer,
        ?max_instance_count: ::Integer,
        ?min_duration: ::Integer,
        ?offering_class: ("standard" | "convertible"),
        ?product_description: ("Linux/UNIX" | "Linux/UNIX (Amazon VPC)" | "Windows" | "Windows (Amazon VPC)"),
        ?reserved_instances_offering_ids: ::Array[::String],
        ?dry_run: bool,
        ?instance_tenancy: ("default" | "dedicated" | "host"),
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?offering_type: ("Heavy Utilization" | "Medium Utilization" | "Light Utilization" | "No Upfront" | "Partial Upfront" | "All Upfront")
      ) -> Hearth::Output[Types::DescribeReservedInstancesOfferingsOutput]

    def describe_route_tables: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeRouteTablesOutput] |
      (?Types::DescribeRouteTablesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeRouteTablesOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool,
        ?route_table_ids: ::Array[::String],
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeRouteTablesOutput]

    def describe_scheduled_instance_availability: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeScheduledInstanceAvailabilityOutput] |
      (?Types::DescribeScheduledInstanceAvailabilityInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeScheduledInstanceAvailabilityOutput] |
      (
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        first_slot_start_time_range: {
          earliest_time: ::Time,
          latest_time: ::Time
        },
        ?max_results: ::Integer,
        ?max_slot_duration_in_hours: ::Integer,
        ?min_slot_duration_in_hours: ::Integer,
        ?next_token: ::String,
        recurrence: {
          frequency: ::String,
          interval: ::Integer,
          occurrence_days: ::Array[::Integer],
          occurrence_relative_to_end: bool,
          occurrence_unit: ::String
        }
      ) -> Hearth::Output[Types::DescribeScheduledInstanceAvailabilityOutput]

    def describe_scheduled_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeScheduledInstancesOutput] |
      (?Types::DescribeScheduledInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeScheduledInstancesOutput] |
      (
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?scheduled_instance_ids: ::Array[::String],
        ?slot_start_time_range: {
          earliest_time: ::Time,
          latest_time: ::Time
        }
      ) -> Hearth::Output[Types::DescribeScheduledInstancesOutput]

    def describe_security_group_references: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSecurityGroupReferencesOutput] |
      (?Types::DescribeSecurityGroupReferencesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSecurityGroupReferencesOutput] |
      (
        ?dry_run: bool,
        group_id: ::Array[::String]
      ) -> Hearth::Output[Types::DescribeSecurityGroupReferencesOutput]

    def describe_security_group_rules: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSecurityGroupRulesOutput] |
      (?Types::DescribeSecurityGroupRulesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSecurityGroupRulesOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?security_group_rule_ids: ::Array[::String],
        ?dry_run: bool,
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeSecurityGroupRulesOutput]

    def describe_security_groups: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSecurityGroupsOutput] |
      (?Types::DescribeSecurityGroupsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSecurityGroupsOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?group_ids: ::Array[::String],
        ?group_names: ::Array[::String],
        ?dry_run: bool,
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeSecurityGroupsOutput]

    def describe_snapshot_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSnapshotAttributeOutput] |
      (?Types::DescribeSnapshotAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSnapshotAttributeOutput] |
      (
        attribute: ("productCodes" | "createVolumePermission"),
        snapshot_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeSnapshotAttributeOutput]

    def describe_snapshot_tier_status: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSnapshotTierStatusOutput] |
      (?Types::DescribeSnapshotTierStatusInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSnapshotTierStatusOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool,
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeSnapshotTierStatusOutput]

    def describe_snapshots: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSnapshotsOutput] |
      (?Types::DescribeSnapshotsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSnapshotsOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?owner_ids: ::Array[::String],
        ?restorable_by_user_ids: ::Array[::String],
        ?snapshot_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeSnapshotsOutput]

    def describe_spot_datafeed_subscription: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSpotDatafeedSubscriptionOutput] |
      (?Types::DescribeSpotDatafeedSubscriptionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSpotDatafeedSubscriptionOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeSpotDatafeedSubscriptionOutput]

    def describe_spot_fleet_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSpotFleetInstancesOutput] |
      (?Types::DescribeSpotFleetInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSpotFleetInstancesOutput] |
      (
        ?dry_run: bool,
        ?max_results: ::Integer,
        ?next_token: ::String,
        spot_fleet_request_id: ::String
      ) -> Hearth::Output[Types::DescribeSpotFleetInstancesOutput]

    def describe_spot_fleet_request_history: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSpotFleetRequestHistoryOutput] |
      (?Types::DescribeSpotFleetRequestHistoryInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSpotFleetRequestHistoryOutput] |
      (
        ?dry_run: bool,
        ?event_type: ("instanceChange" | "fleetRequestChange" | "error" | "information"),
        ?max_results: ::Integer,
        ?next_token: ::String,
        spot_fleet_request_id: ::String,
        start_time: ::Time
      ) -> Hearth::Output[Types::DescribeSpotFleetRequestHistoryOutput]

    def describe_spot_fleet_requests: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSpotFleetRequestsOutput] |
      (?Types::DescribeSpotFleetRequestsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSpotFleetRequestsOutput] |
      (
        ?dry_run: bool,
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?spot_fleet_request_ids: ::Array[::String]
      ) -> Hearth::Output[Types::DescribeSpotFleetRequestsOutput]

    def describe_spot_instance_requests: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSpotInstanceRequestsOutput] |
      (?Types::DescribeSpotInstanceRequestsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSpotInstanceRequestsOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool,
        ?spot_instance_request_ids: ::Array[::String],
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeSpotInstanceRequestsOutput]

    def describe_spot_price_history: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSpotPriceHistoryOutput] |
      (?Types::DescribeSpotPriceHistoryInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSpotPriceHistoryOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?availability_zone: ::String,
        ?dry_run: bool,
        ?end_time: ::Time,
        ?instance_types: ::Array[("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl")],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?product_descriptions: ::Array[::String],
        ?start_time: ::Time
      ) -> Hearth::Output[Types::DescribeSpotPriceHistoryOutput]

    def describe_stale_security_groups: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeStaleSecurityGroupsOutput] |
      (?Types::DescribeStaleSecurityGroupsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeStaleSecurityGroupsOutput] |
      (
        ?dry_run: bool,
        ?max_results: ::Integer,
        ?next_token: ::String,
        vpc_id: ::String
      ) -> Hearth::Output[Types::DescribeStaleSecurityGroupsOutput]

    def describe_store_image_tasks: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeStoreImageTasksOutput] |
      (?Types::DescribeStoreImageTasksInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeStoreImageTasksOutput] |
      (
        ?image_ids: ::Array[::String],
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeStoreImageTasksOutput]

    def describe_subnets: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSubnetsOutput] |
      (?Types::DescribeSubnetsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeSubnetsOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?subnet_ids: ::Array[::String],
        ?dry_run: bool,
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeSubnetsOutput]

    def describe_tags: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTagsOutput] |
      (?Types::DescribeTagsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTagsOutput] |
      (
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeTagsOutput]

    def describe_traffic_mirror_filters: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTrafficMirrorFiltersOutput] |
      (?Types::DescribeTrafficMirrorFiltersInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTrafficMirrorFiltersOutput] |
      (
        ?traffic_mirror_filter_ids: ::Array[::String],
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeTrafficMirrorFiltersOutput]

    def describe_traffic_mirror_sessions: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTrafficMirrorSessionsOutput] |
      (?Types::DescribeTrafficMirrorSessionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTrafficMirrorSessionsOutput] |
      (
        ?traffic_mirror_session_ids: ::Array[::String],
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeTrafficMirrorSessionsOutput]

    def describe_traffic_mirror_targets: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTrafficMirrorTargetsOutput] |
      (?Types::DescribeTrafficMirrorTargetsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTrafficMirrorTargetsOutput] |
      (
        ?traffic_mirror_target_ids: ::Array[::String],
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeTrafficMirrorTargetsOutput]

    def describe_transit_gateway_attachments: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayAttachmentsOutput] |
      (?Types::DescribeTransitGatewayAttachmentsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayAttachmentsOutput] |
      (
        ?transit_gateway_attachment_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeTransitGatewayAttachmentsOutput]

    def describe_transit_gateway_connect_peers: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayConnectPeersOutput] |
      (?Types::DescribeTransitGatewayConnectPeersInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayConnectPeersOutput] |
      (
        ?transit_gateway_connect_peer_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeTransitGatewayConnectPeersOutput]

    def describe_transit_gateway_connects: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayConnectsOutput] |
      (?Types::DescribeTransitGatewayConnectsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayConnectsOutput] |
      (
        ?transit_gateway_attachment_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeTransitGatewayConnectsOutput]

    def describe_transit_gateway_multicast_domains: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayMulticastDomainsOutput] |
      (?Types::DescribeTransitGatewayMulticastDomainsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayMulticastDomainsOutput] |
      (
        ?transit_gateway_multicast_domain_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeTransitGatewayMulticastDomainsOutput]

    def describe_transit_gateway_peering_attachments: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayPeeringAttachmentsOutput] |
      (?Types::DescribeTransitGatewayPeeringAttachmentsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayPeeringAttachmentsOutput] |
      (
        ?transit_gateway_attachment_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeTransitGatewayPeeringAttachmentsOutput]

    def describe_transit_gateway_policy_tables: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayPolicyTablesOutput] |
      (?Types::DescribeTransitGatewayPolicyTablesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayPolicyTablesOutput] |
      (
        ?transit_gateway_policy_table_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeTransitGatewayPolicyTablesOutput]

    def describe_transit_gateway_route_table_announcements: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayRouteTableAnnouncementsOutput] |
      (?Types::DescribeTransitGatewayRouteTableAnnouncementsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayRouteTableAnnouncementsOutput] |
      (
        ?transit_gateway_route_table_announcement_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeTransitGatewayRouteTableAnnouncementsOutput]

    def describe_transit_gateway_route_tables: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayRouteTablesOutput] |
      (?Types::DescribeTransitGatewayRouteTablesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayRouteTablesOutput] |
      (
        ?transit_gateway_route_table_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeTransitGatewayRouteTablesOutput]

    def describe_transit_gateway_vpc_attachments: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayVpcAttachmentsOutput] |
      (?Types::DescribeTransitGatewayVpcAttachmentsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewayVpcAttachmentsOutput] |
      (
        ?transit_gateway_attachment_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeTransitGatewayVpcAttachmentsOutput]

    def describe_transit_gateways: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewaysOutput] |
      (?Types::DescribeTransitGatewaysInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTransitGatewaysOutput] |
      (
        ?transit_gateway_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeTransitGatewaysOutput]

    def describe_trunk_interface_associations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTrunkInterfaceAssociationsOutput] |
      (?Types::DescribeTrunkInterfaceAssociationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeTrunkInterfaceAssociationsOutput] |
      (
        ?association_ids: ::Array[::String],
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeTrunkInterfaceAssociationsOutput]

    def describe_verified_access_endpoints: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVerifiedAccessEndpointsOutput] |
      (?Types::DescribeVerifiedAccessEndpointsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVerifiedAccessEndpointsOutput] |
      (
        ?verified_access_endpoint_ids: ::Array[::String],
        ?verified_access_instance_id: ::String,
        ?verified_access_group_id: ::String,
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeVerifiedAccessEndpointsOutput]

    def describe_verified_access_groups: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVerifiedAccessGroupsOutput] |
      (?Types::DescribeVerifiedAccessGroupsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVerifiedAccessGroupsOutput] |
      (
        ?verified_access_group_ids: ::Array[::String],
        ?verified_access_instance_id: ::String,
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeVerifiedAccessGroupsOutput]

    def describe_verified_access_instance_logging_configurations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVerifiedAccessInstanceLoggingConfigurationsOutput] |
      (?Types::DescribeVerifiedAccessInstanceLoggingConfigurationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVerifiedAccessInstanceLoggingConfigurationsOutput] |
      (
        ?verified_access_instance_ids: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeVerifiedAccessInstanceLoggingConfigurationsOutput]

    def describe_verified_access_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVerifiedAccessInstancesOutput] |
      (?Types::DescribeVerifiedAccessInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVerifiedAccessInstancesOutput] |
      (
        ?verified_access_instance_ids: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeVerifiedAccessInstancesOutput]

    def describe_verified_access_trust_providers: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVerifiedAccessTrustProvidersOutput] |
      (?Types::DescribeVerifiedAccessTrustProvidersInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVerifiedAccessTrustProvidersOutput] |
      (
        ?verified_access_trust_provider_ids: ::Array[::String],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeVerifiedAccessTrustProvidersOutput]

    def describe_volume_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVolumeAttributeOutput] |
      (?Types::DescribeVolumeAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVolumeAttributeOutput] |
      (
        attribute: ("autoEnableIO" | "productCodes"),
        volume_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeVolumeAttributeOutput]

    def describe_volume_status: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVolumeStatusOutput] |
      (?Types::DescribeVolumeStatusInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVolumeStatusOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?volume_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeVolumeStatusOutput]

    def describe_volumes: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVolumesOutput] |
      (?Types::DescribeVolumesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVolumesOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?volume_ids: ::Array[::String],
        ?dry_run: bool,
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeVolumesOutput]

    def describe_volumes_modifications: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVolumesModificationsOutput] |
      (?Types::DescribeVolumesModificationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVolumesModificationsOutput] |
      (
        ?dry_run: bool,
        ?volume_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeVolumesModificationsOutput]

    def describe_vpc_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcAttributeOutput] |
      (?Types::DescribeVpcAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcAttributeOutput] |
      (
        attribute: ("enableDnsSupport" | "enableDnsHostnames" | "enableNetworkAddressUsageMetrics"),
        vpc_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeVpcAttributeOutput]

    def describe_vpc_classic_link: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcClassicLinkOutput] |
      (?Types::DescribeVpcClassicLinkInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcClassicLinkOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool,
        ?vpc_ids: ::Array[::String]
      ) -> Hearth::Output[Types::DescribeVpcClassicLinkOutput]

    def describe_vpc_classic_link_dns_support: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcClassicLinkDnsSupportOutput] |
      (?Types::DescribeVpcClassicLinkDnsSupportInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcClassicLinkDnsSupportOutput] |
      (
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?vpc_ids: ::Array[::String]
      ) -> Hearth::Output[Types::DescribeVpcClassicLinkDnsSupportOutput]

    def describe_vpc_endpoint_connection_notifications: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcEndpointConnectionNotificationsOutput] |
      (?Types::DescribeVpcEndpointConnectionNotificationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcEndpointConnectionNotificationsOutput] |
      (
        ?dry_run: bool,
        ?connection_notification_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeVpcEndpointConnectionNotificationsOutput]

    def describe_vpc_endpoint_connections: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcEndpointConnectionsOutput] |
      (?Types::DescribeVpcEndpointConnectionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcEndpointConnectionsOutput] |
      (
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeVpcEndpointConnectionsOutput]

    def describe_vpc_endpoint_service_configurations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcEndpointServiceConfigurationsOutput] |
      (?Types::DescribeVpcEndpointServiceConfigurationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcEndpointServiceConfigurationsOutput] |
      (
        ?dry_run: bool,
        ?service_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeVpcEndpointServiceConfigurationsOutput]

    def describe_vpc_endpoint_service_permissions: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcEndpointServicePermissionsOutput] |
      (?Types::DescribeVpcEndpointServicePermissionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcEndpointServicePermissionsOutput] |
      (
        ?dry_run: bool,
        service_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeVpcEndpointServicePermissionsOutput]

    def describe_vpc_endpoint_services: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcEndpointServicesOutput] |
      (?Types::DescribeVpcEndpointServicesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcEndpointServicesOutput] |
      (
        ?dry_run: bool,
        ?service_names: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeVpcEndpointServicesOutput]

    def describe_vpc_endpoints: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcEndpointsOutput] |
      (?Types::DescribeVpcEndpointsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcEndpointsOutput] |
      (
        ?dry_run: bool,
        ?vpc_endpoint_ids: ::Array[::String],
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeVpcEndpointsOutput]

    def describe_vpc_peering_connections: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcPeeringConnectionsOutput] |
      (?Types::DescribeVpcPeeringConnectionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcPeeringConnectionsOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool,
        ?vpc_peering_connection_ids: ::Array[::String],
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeVpcPeeringConnectionsOutput]

    def describe_vpcs: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcsOutput] |
      (?Types::DescribeVpcsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpcsOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?vpc_ids: ::Array[::String],
        ?dry_run: bool,
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeVpcsOutput]

    def describe_vpn_connections: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpnConnectionsOutput] |
      (?Types::DescribeVpnConnectionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpnConnectionsOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?vpn_connection_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeVpnConnectionsOutput]

    def describe_vpn_gateways: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpnGatewaysOutput] |
      (?Types::DescribeVpnGatewaysInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeVpnGatewaysOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?vpn_gateway_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DescribeVpnGatewaysOutput]

    def detach_classic_link_vpc: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DetachClassicLinkVpcOutput] |
      (?Types::DetachClassicLinkVpcInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DetachClassicLinkVpcOutput] |
      (
        ?dry_run: bool,
        instance_id: ::String,
        vpc_id: ::String
      ) -> Hearth::Output[Types::DetachClassicLinkVpcOutput]

    def detach_internet_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DetachInternetGatewayOutput] |
      (?Types::DetachInternetGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DetachInternetGatewayOutput] |
      (
        ?dry_run: bool,
        internet_gateway_id: ::String,
        vpc_id: ::String
      ) -> Hearth::Output[Types::DetachInternetGatewayOutput]

    def detach_network_interface: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DetachNetworkInterfaceOutput] |
      (?Types::DetachNetworkInterfaceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DetachNetworkInterfaceOutput] |
      (
        attachment_id: ::String,
        ?dry_run: bool,
        ?force: bool
      ) -> Hearth::Output[Types::DetachNetworkInterfaceOutput]

    def detach_verified_access_trust_provider: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DetachVerifiedAccessTrustProviderOutput] |
      (?Types::DetachVerifiedAccessTrustProviderInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DetachVerifiedAccessTrustProviderOutput] |
      (
        verified_access_instance_id: ::String,
        verified_access_trust_provider_id: ::String,
        ?client_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DetachVerifiedAccessTrustProviderOutput]

    def detach_volume: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DetachVolumeOutput] |
      (?Types::DetachVolumeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DetachVolumeOutput] |
      (
        ?device: ::String,
        ?force: bool,
        ?instance_id: ::String,
        volume_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DetachVolumeOutput]

    def detach_vpn_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DetachVpnGatewayOutput] |
      (?Types::DetachVpnGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DetachVpnGatewayOutput] |
      (
        vpc_id: ::String,
        vpn_gateway_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DetachVpnGatewayOutput]

    def disable_address_transfer: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableAddressTransferOutput] |
      (?Types::DisableAddressTransferInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableAddressTransferOutput] |
      (
        allocation_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisableAddressTransferOutput]

    def disable_aws_network_performance_metric_subscription: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableAwsNetworkPerformanceMetricSubscriptionOutput] |
      (?Types::DisableAwsNetworkPerformanceMetricSubscriptionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableAwsNetworkPerformanceMetricSubscriptionOutput] |
      (
        ?source: ::String,
        ?destination: ::String,
        ?metric: ("aggregate-latency"),
        ?statistic: ("p50"),
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisableAwsNetworkPerformanceMetricSubscriptionOutput]

    def disable_ebs_encryption_by_default: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableEbsEncryptionByDefaultOutput] |
      (?Types::DisableEbsEncryptionByDefaultInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableEbsEncryptionByDefaultOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisableEbsEncryptionByDefaultOutput]

    def disable_fast_launch: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableFastLaunchOutput] |
      (?Types::DisableFastLaunchInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableFastLaunchOutput] |
      (
        image_id: ::String,
        ?force: bool,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisableFastLaunchOutput]

    def disable_fast_snapshot_restores: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableFastSnapshotRestoresOutput] |
      (?Types::DisableFastSnapshotRestoresInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableFastSnapshotRestoresOutput] |
      (
        availability_zones: ::Array[::String],
        source_snapshot_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisableFastSnapshotRestoresOutput]

    def disable_image: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableImageOutput] |
      (?Types::DisableImageInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableImageOutput] |
      (
        image_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisableImageOutput]

    def disable_image_block_public_access: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableImageBlockPublicAccessOutput] |
      (?Types::DisableImageBlockPublicAccessInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableImageBlockPublicAccessOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisableImageBlockPublicAccessOutput]

    def disable_image_deprecation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableImageDeprecationOutput] |
      (?Types::DisableImageDeprecationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableImageDeprecationOutput] |
      (
        image_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisableImageDeprecationOutput]

    def disable_ipam_organization_admin_account: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableIpamOrganizationAdminAccountOutput] |
      (?Types::DisableIpamOrganizationAdminAccountInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableIpamOrganizationAdminAccountOutput] |
      (
        ?dry_run: bool,
        delegated_admin_account_id: ::String
      ) -> Hearth::Output[Types::DisableIpamOrganizationAdminAccountOutput]

    def disable_serial_console_access: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableSerialConsoleAccessOutput] |
      (?Types::DisableSerialConsoleAccessInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableSerialConsoleAccessOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisableSerialConsoleAccessOutput]

    def disable_snapshot_block_public_access: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableSnapshotBlockPublicAccessOutput] |
      (?Types::DisableSnapshotBlockPublicAccessInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableSnapshotBlockPublicAccessOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisableSnapshotBlockPublicAccessOutput]

    def disable_transit_gateway_route_table_propagation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableTransitGatewayRouteTablePropagationOutput] |
      (?Types::DisableTransitGatewayRouteTablePropagationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableTransitGatewayRouteTablePropagationOutput] |
      (
        transit_gateway_route_table_id: ::String,
        ?transit_gateway_attachment_id: ::String,
        ?dry_run: bool,
        ?transit_gateway_route_table_announcement_id: ::String
      ) -> Hearth::Output[Types::DisableTransitGatewayRouteTablePropagationOutput]

    def disable_vgw_route_propagation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableVgwRoutePropagationOutput] |
      (?Types::DisableVgwRoutePropagationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableVgwRoutePropagationOutput] |
      (
        gateway_id: ::String,
        route_table_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisableVgwRoutePropagationOutput]

    def disable_vpc_classic_link: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableVpcClassicLinkOutput] |
      (?Types::DisableVpcClassicLinkInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableVpcClassicLinkOutput] |
      (
        ?dry_run: bool,
        vpc_id: ::String
      ) -> Hearth::Output[Types::DisableVpcClassicLinkOutput]

    def disable_vpc_classic_link_dns_support: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableVpcClassicLinkDnsSupportOutput] |
      (?Types::DisableVpcClassicLinkDnsSupportInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableVpcClassicLinkDnsSupportOutput] |
      (
        ?vpc_id: ::String
      ) -> Hearth::Output[Types::DisableVpcClassicLinkDnsSupportOutput]

    def disassociate_address: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateAddressOutput] |
      (?Types::DisassociateAddressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateAddressOutput] |
      (
        ?association_id: ::String,
        ?public_ip: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisassociateAddressOutput]

    def disassociate_client_vpn_target_network: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateClientVpnTargetNetworkOutput] |
      (?Types::DisassociateClientVpnTargetNetworkInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateClientVpnTargetNetworkOutput] |
      (
        client_vpn_endpoint_id: ::String,
        association_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisassociateClientVpnTargetNetworkOutput]

    def disassociate_enclave_certificate_iam_role: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateEnclaveCertificateIamRoleOutput] |
      (?Types::DisassociateEnclaveCertificateIamRoleInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateEnclaveCertificateIamRoleOutput] |
      (
        certificate_arn: ::String,
        role_arn: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisassociateEnclaveCertificateIamRoleOutput]

    def disassociate_iam_instance_profile: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateIamInstanceProfileOutput] |
      (?Types::DisassociateIamInstanceProfileInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateIamInstanceProfileOutput] |
      (
        association_id: ::String
      ) -> Hearth::Output[Types::DisassociateIamInstanceProfileOutput]

    def disassociate_instance_event_window: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateInstanceEventWindowOutput] |
      (?Types::DisassociateInstanceEventWindowInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateInstanceEventWindowOutput] |
      (
        ?dry_run: bool,
        instance_event_window_id: ::String,
        association_target: {
          instance_ids: ::Array[::String],
          instance_tags: ::Array[Types::Tag],
          dedicated_host_ids: ::Array[::String]
        }
      ) -> Hearth::Output[Types::DisassociateInstanceEventWindowOutput]

    def disassociate_ipam_byoasn: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateIpamByoasnOutput] |
      (?Types::DisassociateIpamByoasnInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateIpamByoasnOutput] |
      (
        ?dry_run: bool,
        asn: ::String,
        cidr: ::String
      ) -> Hearth::Output[Types::DisassociateIpamByoasnOutput]

    def disassociate_ipam_resource_discovery: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateIpamResourceDiscoveryOutput] |
      (?Types::DisassociateIpamResourceDiscoveryInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateIpamResourceDiscoveryOutput] |
      (
        ?dry_run: bool,
        ipam_resource_discovery_association_id: ::String
      ) -> Hearth::Output[Types::DisassociateIpamResourceDiscoveryOutput]

    def disassociate_nat_gateway_address: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateNatGatewayAddressOutput] |
      (?Types::DisassociateNatGatewayAddressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateNatGatewayAddressOutput] |
      (
        nat_gateway_id: ::String,
        association_ids: ::Array[::String],
        ?max_drain_duration_seconds: ::Integer,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisassociateNatGatewayAddressOutput]

    def disassociate_route_table: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateRouteTableOutput] |
      (?Types::DisassociateRouteTableInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateRouteTableOutput] |
      (
        association_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisassociateRouteTableOutput]

    def disassociate_subnet_cidr_block: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateSubnetCidrBlockOutput] |
      (?Types::DisassociateSubnetCidrBlockInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateSubnetCidrBlockOutput] |
      (
        association_id: ::String
      ) -> Hearth::Output[Types::DisassociateSubnetCidrBlockOutput]

    def disassociate_transit_gateway_multicast_domain: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateTransitGatewayMulticastDomainOutput] |
      (?Types::DisassociateTransitGatewayMulticastDomainInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateTransitGatewayMulticastDomainOutput] |
      (
        transit_gateway_multicast_domain_id: ::String,
        transit_gateway_attachment_id: ::String,
        subnet_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisassociateTransitGatewayMulticastDomainOutput]

    def disassociate_transit_gateway_policy_table: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateTransitGatewayPolicyTableOutput] |
      (?Types::DisassociateTransitGatewayPolicyTableInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateTransitGatewayPolicyTableOutput] |
      (
        transit_gateway_policy_table_id: ::String,
        transit_gateway_attachment_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisassociateTransitGatewayPolicyTableOutput]

    def disassociate_transit_gateway_route_table: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateTransitGatewayRouteTableOutput] |
      (?Types::DisassociateTransitGatewayRouteTableInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateTransitGatewayRouteTableOutput] |
      (
        transit_gateway_route_table_id: ::String,
        transit_gateway_attachment_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisassociateTransitGatewayRouteTableOutput]

    def disassociate_trunk_interface: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateTrunkInterfaceOutput] |
      (?Types::DisassociateTrunkInterfaceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateTrunkInterfaceOutput] |
      (
        association_id: ::String,
        ?client_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::DisassociateTrunkInterfaceOutput]

    def disassociate_vpc_cidr_block: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateVpcCidrBlockOutput] |
      (?Types::DisassociateVpcCidrBlockInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisassociateVpcCidrBlockOutput] |
      (
        association_id: ::String
      ) -> Hearth::Output[Types::DisassociateVpcCidrBlockOutput]

    def enable_address_transfer: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableAddressTransferOutput] |
      (?Types::EnableAddressTransferInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableAddressTransferOutput] |
      (
        allocation_id: ::String,
        transfer_account_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::EnableAddressTransferOutput]

    def enable_aws_network_performance_metric_subscription: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableAwsNetworkPerformanceMetricSubscriptionOutput] |
      (?Types::EnableAwsNetworkPerformanceMetricSubscriptionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableAwsNetworkPerformanceMetricSubscriptionOutput] |
      (
        ?source: ::String,
        ?destination: ::String,
        ?metric: ("aggregate-latency"),
        ?statistic: ("p50"),
        ?dry_run: bool
      ) -> Hearth::Output[Types::EnableAwsNetworkPerformanceMetricSubscriptionOutput]

    def enable_ebs_encryption_by_default: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableEbsEncryptionByDefaultOutput] |
      (?Types::EnableEbsEncryptionByDefaultInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableEbsEncryptionByDefaultOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::EnableEbsEncryptionByDefaultOutput]

    def enable_fast_launch: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableFastLaunchOutput] |
      (?Types::EnableFastLaunchInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableFastLaunchOutput] |
      (
        image_id: ::String,
        ?resource_type: ::String,
        ?snapshot_configuration: {
          target_resource_count: ::Integer
        },
        ?launch_template: {
          launch_template_id: ::String,
          launch_template_name: ::String,
          version: ::String
        },
        ?max_parallel_launches: ::Integer,
        ?dry_run: bool
      ) -> Hearth::Output[Types::EnableFastLaunchOutput]

    def enable_fast_snapshot_restores: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableFastSnapshotRestoresOutput] |
      (?Types::EnableFastSnapshotRestoresInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableFastSnapshotRestoresOutput] |
      (
        availability_zones: ::Array[::String],
        source_snapshot_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::EnableFastSnapshotRestoresOutput]

    def enable_image: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableImageOutput] |
      (?Types::EnableImageInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableImageOutput] |
      (
        image_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::EnableImageOutput]

    def enable_image_block_public_access: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableImageBlockPublicAccessOutput] |
      (?Types::EnableImageBlockPublicAccessInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableImageBlockPublicAccessOutput] |
      (
        image_block_public_access_state: ("block-new-sharing"),
        ?dry_run: bool
      ) -> Hearth::Output[Types::EnableImageBlockPublicAccessOutput]

    def enable_image_deprecation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableImageDeprecationOutput] |
      (?Types::EnableImageDeprecationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableImageDeprecationOutput] |
      (
        image_id: ::String,
        deprecate_at: ::Time,
        ?dry_run: bool
      ) -> Hearth::Output[Types::EnableImageDeprecationOutput]

    def enable_ipam_organization_admin_account: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableIpamOrganizationAdminAccountOutput] |
      (?Types::EnableIpamOrganizationAdminAccountInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableIpamOrganizationAdminAccountOutput] |
      (
        ?dry_run: bool,
        delegated_admin_account_id: ::String
      ) -> Hearth::Output[Types::EnableIpamOrganizationAdminAccountOutput]

    def enable_reachability_analyzer_organization_sharing: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableReachabilityAnalyzerOrganizationSharingOutput] |
      (?Types::EnableReachabilityAnalyzerOrganizationSharingInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableReachabilityAnalyzerOrganizationSharingOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::EnableReachabilityAnalyzerOrganizationSharingOutput]

    def enable_serial_console_access: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableSerialConsoleAccessOutput] |
      (?Types::EnableSerialConsoleAccessInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableSerialConsoleAccessOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::EnableSerialConsoleAccessOutput]

    def enable_snapshot_block_public_access: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableSnapshotBlockPublicAccessOutput] |
      (?Types::EnableSnapshotBlockPublicAccessInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableSnapshotBlockPublicAccessOutput] |
      (
        state: ("block-all-sharing" | "block-new-sharing" | "unblocked"),
        ?dry_run: bool
      ) -> Hearth::Output[Types::EnableSnapshotBlockPublicAccessOutput]

    def enable_transit_gateway_route_table_propagation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableTransitGatewayRouteTablePropagationOutput] |
      (?Types::EnableTransitGatewayRouteTablePropagationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableTransitGatewayRouteTablePropagationOutput] |
      (
        transit_gateway_route_table_id: ::String,
        ?transit_gateway_attachment_id: ::String,
        ?dry_run: bool,
        ?transit_gateway_route_table_announcement_id: ::String
      ) -> Hearth::Output[Types::EnableTransitGatewayRouteTablePropagationOutput]

    def enable_vgw_route_propagation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableVgwRoutePropagationOutput] |
      (?Types::EnableVgwRoutePropagationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableVgwRoutePropagationOutput] |
      (
        gateway_id: ::String,
        route_table_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::EnableVgwRoutePropagationOutput]

    def enable_volume_io: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableVolumeIOOutput] |
      (?Types::EnableVolumeIOInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableVolumeIOOutput] |
      (
        ?dry_run: bool,
        volume_id: ::String
      ) -> Hearth::Output[Types::EnableVolumeIOOutput]

    def enable_vpc_classic_link: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableVpcClassicLinkOutput] |
      (?Types::EnableVpcClassicLinkInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableVpcClassicLinkOutput] |
      (
        ?dry_run: bool,
        vpc_id: ::String
      ) -> Hearth::Output[Types::EnableVpcClassicLinkOutput]

    def enable_vpc_classic_link_dns_support: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableVpcClassicLinkDnsSupportOutput] |
      (?Types::EnableVpcClassicLinkDnsSupportInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableVpcClassicLinkDnsSupportOutput] |
      (
        ?vpc_id: ::String
      ) -> Hearth::Output[Types::EnableVpcClassicLinkDnsSupportOutput]

    def export_client_vpn_client_certificate_revocation_list: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ExportClientVpnClientCertificateRevocationListOutput] |
      (?Types::ExportClientVpnClientCertificateRevocationListInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ExportClientVpnClientCertificateRevocationListOutput] |
      (
        client_vpn_endpoint_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ExportClientVpnClientCertificateRevocationListOutput]

    def export_client_vpn_client_configuration: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ExportClientVpnClientConfigurationOutput] |
      (?Types::ExportClientVpnClientConfigurationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ExportClientVpnClientConfigurationOutput] |
      (
        client_vpn_endpoint_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ExportClientVpnClientConfigurationOutput]

    def export_image: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ExportImageOutput] |
      (?Types::ExportImageInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ExportImageOutput] |
      (
        ?client_token: ::String,
        ?description: ::String,
        disk_image_format: ("VMDK" | "RAW" | "VHD"),
        ?dry_run: bool,
        image_id: ::String,
        s3_export_location: {
          s3_bucket: ::String,
          s3_prefix: ::String
        },
        ?role_name: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::ExportImageOutput]

    def export_transit_gateway_routes: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ExportTransitGatewayRoutesOutput] |
      (?Types::ExportTransitGatewayRoutesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ExportTransitGatewayRoutesOutput] |
      (
        transit_gateway_route_table_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        s3_bucket: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ExportTransitGatewayRoutesOutput]

    def get_associated_enclave_certificate_iam_roles: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetAssociatedEnclaveCertificateIamRolesOutput] |
      (?Types::GetAssociatedEnclaveCertificateIamRolesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetAssociatedEnclaveCertificateIamRolesOutput] |
      (
        certificate_arn: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetAssociatedEnclaveCertificateIamRolesOutput]

    def get_associated_ipv6_pool_cidrs: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetAssociatedIpv6PoolCidrsOutput] |
      (?Types::GetAssociatedIpv6PoolCidrsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetAssociatedIpv6PoolCidrsOutput] |
      (
        pool_id: ::String,
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetAssociatedIpv6PoolCidrsOutput]

    def get_aws_network_performance_data: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetAwsNetworkPerformanceDataOutput] |
      (?Types::GetAwsNetworkPerformanceDataInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetAwsNetworkPerformanceDataOutput] |
      (
        ?data_queries: ::Array[{
          id: ::String,
          source: ::String,
          destination: ::String,
          metric: ::String,
          statistic: ::String,
          period: ::String
        }],
        ?start_time: ::Time,
        ?end_time: ::Time,
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetAwsNetworkPerformanceDataOutput]

    def get_capacity_reservation_usage: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetCapacityReservationUsageOutput] |
      (?Types::GetCapacityReservationUsageInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetCapacityReservationUsageOutput] |
      (
        capacity_reservation_id: ::String,
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetCapacityReservationUsageOutput]

    def get_coip_pool_usage: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetCoipPoolUsageOutput] |
      (?Types::GetCoipPoolUsageInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetCoipPoolUsageOutput] |
      (
        pool_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetCoipPoolUsageOutput]

    def get_console_output: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetConsoleOutputOutput] |
      (?Types::GetConsoleOutputInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetConsoleOutputOutput] |
      (
        instance_id: ::String,
        ?dry_run: bool,
        ?latest: bool
      ) -> Hearth::Output[Types::GetConsoleOutputOutput]

    def get_console_screenshot: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetConsoleScreenshotOutput] |
      (?Types::GetConsoleScreenshotInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetConsoleScreenshotOutput] |
      (
        ?dry_run: bool,
        instance_id: ::String,
        ?wake_up: bool
      ) -> Hearth::Output[Types::GetConsoleScreenshotOutput]

    def get_default_credit_specification: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetDefaultCreditSpecificationOutput] |
      (?Types::GetDefaultCreditSpecificationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetDefaultCreditSpecificationOutput] |
      (
        ?dry_run: bool,
        instance_family: ("t2" | "t3" | "t3a" | "t4g")
      ) -> Hearth::Output[Types::GetDefaultCreditSpecificationOutput]

    def get_ebs_default_kms_key_id: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetEbsDefaultKmsKeyIdOutput] |
      (?Types::GetEbsDefaultKmsKeyIdInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetEbsDefaultKmsKeyIdOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetEbsDefaultKmsKeyIdOutput]

    def get_ebs_encryption_by_default: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetEbsEncryptionByDefaultOutput] |
      (?Types::GetEbsEncryptionByDefaultInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetEbsEncryptionByDefaultOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetEbsEncryptionByDefaultOutput]

    def get_flow_logs_integration_template: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetFlowLogsIntegrationTemplateOutput] |
      (?Types::GetFlowLogsIntegrationTemplateInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetFlowLogsIntegrationTemplateOutput] |
      (
        ?dry_run: bool,
        flow_log_id: ::String,
        config_delivery_s3_destination_arn: ::String,
        integrate_services: {
          athena_integrations: ::Array[Types::AthenaIntegration]
        }
      ) -> Hearth::Output[Types::GetFlowLogsIntegrationTemplateOutput]

    def get_groups_for_capacity_reservation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetGroupsForCapacityReservationOutput] |
      (?Types::GetGroupsForCapacityReservationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetGroupsForCapacityReservationOutput] |
      (
        capacity_reservation_id: ::String,
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetGroupsForCapacityReservationOutput]

    def get_host_reservation_purchase_preview: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetHostReservationPurchasePreviewOutput] |
      (?Types::GetHostReservationPurchasePreviewInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetHostReservationPurchasePreviewOutput] |
      (
        host_id_set: ::Array[::String],
        offering_id: ::String
      ) -> Hearth::Output[Types::GetHostReservationPurchasePreviewOutput]

    def get_image_block_public_access_state: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetImageBlockPublicAccessStateOutput] |
      (?Types::GetImageBlockPublicAccessStateInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetImageBlockPublicAccessStateOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetImageBlockPublicAccessStateOutput]

    def get_instance_types_from_instance_requirements: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetInstanceTypesFromInstanceRequirementsOutput] |
      (?Types::GetInstanceTypesFromInstanceRequirementsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetInstanceTypesFromInstanceRequirementsOutput] |
      (
        ?dry_run: bool,
        architecture_types: ::Array[("i386" | "x86_64" | "arm64" | "x86_64_mac" | "arm64_mac")],
        virtualization_types: ::Array[("hvm" | "paravirtual")],
        instance_requirements: {
          v_cpu_count: {
            min: ::Integer,
            max: ::Integer
          },
          memory_mi_b: {
            min: ::Integer,
            max: ::Integer
          },
          cpu_manufacturers: ::Array[::String],
          memory_gi_b_per_v_cpu: {
            min: ::Float,
            max: ::Float
          },
          excluded_instance_types: ::Array[::String],
          instance_generations: ::Array[::String],
          spot_max_price_percentage_over_lowest_price: ::Integer,
          on_demand_max_price_percentage_over_lowest_price: ::Integer,
          bare_metal: ("included" | "required" | "excluded"),
          burstable_performance: ("included" | "required" | "excluded"),
          require_hibernate_support: bool,
          network_interface_count: {
            min: ::Integer,
            max: ::Integer
          },
          local_storage: ("included" | "required" | "excluded"),
          local_storage_types: ::Array[::String],
          total_local_storage_gb: {
            min: ::Float,
            max: ::Float
          },
          baseline_ebs_bandwidth_mbps: {
            min: ::Integer,
            max: ::Integer
          },
          accelerator_types: ::Array[::String],
          accelerator_count: {
            min: ::Integer,
            max: ::Integer
          },
          accelerator_manufacturers: ::Array[::String],
          accelerator_names: ::Array[::String],
          accelerator_total_memory_mi_b: {
            min: ::Integer,
            max: ::Integer
          },
          network_bandwidth_gbps: {
            min: ::Float,
            max: ::Float
          },
          allowed_instance_types: ::Array[::String],
          max_spot_price_as_percentage_of_optimal_on_demand_price: ::Integer
        },
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::GetInstanceTypesFromInstanceRequirementsOutput]

    def get_instance_uefi_data: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetInstanceUefiDataOutput] |
      (?Types::GetInstanceUefiDataInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetInstanceUefiDataOutput] |
      (
        instance_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetInstanceUefiDataOutput]

    def get_ipam_address_history: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetIpamAddressHistoryOutput] |
      (?Types::GetIpamAddressHistoryInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetIpamAddressHistoryOutput] |
      (
        ?dry_run: bool,
        cidr: ::String,
        ipam_scope_id: ::String,
        ?vpc_id: ::String,
        ?start_time: ::Time,
        ?end_time: ::Time,
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::GetIpamAddressHistoryOutput]

    def get_ipam_discovered_accounts: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetIpamDiscoveredAccountsOutput] |
      (?Types::GetIpamDiscoveredAccountsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetIpamDiscoveredAccountsOutput] |
      (
        ?dry_run: bool,
        ipam_resource_discovery_id: ::String,
        discovery_region: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::GetIpamDiscoveredAccountsOutput]

    def get_ipam_discovered_public_addresses: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetIpamDiscoveredPublicAddressesOutput] |
      (?Types::GetIpamDiscoveredPublicAddressesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetIpamDiscoveredPublicAddressesOutput] |
      (
        ?dry_run: bool,
        ipam_resource_discovery_id: ::String,
        address_region: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::GetIpamDiscoveredPublicAddressesOutput]

    def get_ipam_discovered_resource_cidrs: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetIpamDiscoveredResourceCidrsOutput] |
      (?Types::GetIpamDiscoveredResourceCidrsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetIpamDiscoveredResourceCidrsOutput] |
      (
        ?dry_run: bool,
        ipam_resource_discovery_id: ::String,
        resource_region: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::GetIpamDiscoveredResourceCidrsOutput]

    def get_ipam_pool_allocations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetIpamPoolAllocationsOutput] |
      (?Types::GetIpamPoolAllocationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetIpamPoolAllocationsOutput] |
      (
        ?dry_run: bool,
        ipam_pool_id: ::String,
        ?ipam_pool_allocation_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::GetIpamPoolAllocationsOutput]

    def get_ipam_pool_cidrs: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetIpamPoolCidrsOutput] |
      (?Types::GetIpamPoolCidrsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetIpamPoolCidrsOutput] |
      (
        ?dry_run: bool,
        ipam_pool_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::GetIpamPoolCidrsOutput]

    def get_ipam_resource_cidrs: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetIpamResourceCidrsOutput] |
      (?Types::GetIpamResourceCidrsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetIpamResourceCidrsOutput] |
      (
        ?dry_run: bool,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ipam_scope_id: ::String,
        ?ipam_pool_id: ::String,
        ?resource_id: ::String,
        ?resource_type: ("vpc" | "subnet" | "eip" | "public-ipv4-pool" | "ipv6-pool" | "eni"),
        ?resource_tag: {
          key: ::String,
          value: ::String
        },
        ?resource_owner: ::String
      ) -> Hearth::Output[Types::GetIpamResourceCidrsOutput]

    def get_launch_template_data: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetLaunchTemplateDataOutput] |
      (?Types::GetLaunchTemplateDataInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetLaunchTemplateDataOutput] |
      (
        ?dry_run: bool,
        instance_id: ::String
      ) -> Hearth::Output[Types::GetLaunchTemplateDataOutput]

    def get_managed_prefix_list_associations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetManagedPrefixListAssociationsOutput] |
      (?Types::GetManagedPrefixListAssociationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetManagedPrefixListAssociationsOutput] |
      (
        ?dry_run: bool,
        prefix_list_id: ::String,
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::GetManagedPrefixListAssociationsOutput]

    def get_managed_prefix_list_entries: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetManagedPrefixListEntriesOutput] |
      (?Types::GetManagedPrefixListEntriesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetManagedPrefixListEntriesOutput] |
      (
        ?dry_run: bool,
        prefix_list_id: ::String,
        ?target_version: ::Integer,
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::GetManagedPrefixListEntriesOutput]

    def get_network_insights_access_scope_analysis_findings: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetNetworkInsightsAccessScopeAnalysisFindingsOutput] |
      (?Types::GetNetworkInsightsAccessScopeAnalysisFindingsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetNetworkInsightsAccessScopeAnalysisFindingsOutput] |
      (
        network_insights_access_scope_analysis_id: ::String,
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetNetworkInsightsAccessScopeAnalysisFindingsOutput]

    def get_network_insights_access_scope_content: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetNetworkInsightsAccessScopeContentOutput] |
      (?Types::GetNetworkInsightsAccessScopeContentInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetNetworkInsightsAccessScopeContentOutput] |
      (
        network_insights_access_scope_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetNetworkInsightsAccessScopeContentOutput]

    def get_password_data: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetPasswordDataOutput] |
      (?Types::GetPasswordDataInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetPasswordDataOutput] |
      (
        instance_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetPasswordDataOutput]

    def get_reserved_instances_exchange_quote: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetReservedInstancesExchangeQuoteOutput] |
      (?Types::GetReservedInstancesExchangeQuoteInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetReservedInstancesExchangeQuoteOutput] |
      (
        ?dry_run: bool,
        reserved_instance_ids: ::Array[::String],
        ?target_configurations: ::Array[{
          instance_count: ::Integer,
          offering_id: ::String
        }]
      ) -> Hearth::Output[Types::GetReservedInstancesExchangeQuoteOutput]

    def get_security_groups_for_vpc: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetSecurityGroupsForVpcOutput] |
      (?Types::GetSecurityGroupsForVpcInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetSecurityGroupsForVpcOutput] |
      (
        vpc_id: ::String,
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetSecurityGroupsForVpcOutput]

    def get_serial_console_access_status: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetSerialConsoleAccessStatusOutput] |
      (?Types::GetSerialConsoleAccessStatusInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetSerialConsoleAccessStatusOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetSerialConsoleAccessStatusOutput]

    def get_snapshot_block_public_access_state: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetSnapshotBlockPublicAccessStateOutput] |
      (?Types::GetSnapshotBlockPublicAccessStateInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetSnapshotBlockPublicAccessStateOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetSnapshotBlockPublicAccessStateOutput]

    def get_spot_placement_scores: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetSpotPlacementScoresOutput] |
      (?Types::GetSpotPlacementScoresInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetSpotPlacementScoresOutput] |
      (
        ?instance_types: ::Array[::String],
        target_capacity: ::Integer,
        ?target_capacity_unit_type: ("vcpu" | "memory-mib" | "units"),
        ?single_availability_zone: bool,
        ?region_names: ::Array[::String],
        ?instance_requirements_with_metadata: {
          architecture_types: ::Array[::String],
          virtualization_types: ::Array[::String],
          instance_requirements: {
            v_cpu_count: Types::VCpuCountRangeRequest,
            memory_mi_b: Types::MemoryMiBRequest,
            cpu_manufacturers: ::Array[::String],
            memory_gi_b_per_v_cpu: Types::MemoryGiBPerVCpuRequest,
            excluded_instance_types: ::Array[::String],
            instance_generations: ::Array[::String],
            spot_max_price_percentage_over_lowest_price: ::Integer,
            on_demand_max_price_percentage_over_lowest_price: ::Integer,
            bare_metal: ::String,
            burstable_performance: ::String,
            require_hibernate_support: bool,
            network_interface_count: Types::NetworkInterfaceCountRequest,
            local_storage: ::String,
            local_storage_types: ::Array[::String],
            total_local_storage_gb: Types::TotalLocalStorageGBRequest,
            baseline_ebs_bandwidth_mbps: Types::BaselineEbsBandwidthMbpsRequest,
            accelerator_types: ::Array[::String],
            accelerator_count: Types::AcceleratorCountRequest,
            accelerator_manufacturers: ::Array[::String],
            accelerator_names: ::Array[::String],
            accelerator_total_memory_mi_b: Types::AcceleratorTotalMemoryMiBRequest,
            network_bandwidth_gbps: Types::NetworkBandwidthGbpsRequest,
            allowed_instance_types: ::Array[::String],
            max_spot_price_as_percentage_of_optimal_on_demand_price: ::Integer
          }
        },
        ?dry_run: bool,
        ?max_results: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::GetSpotPlacementScoresOutput]

    def get_subnet_cidr_reservations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetSubnetCidrReservationsOutput] |
      (?Types::GetSubnetCidrReservationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetSubnetCidrReservationsOutput] |
      (
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        subnet_id: ::String,
        ?dry_run: bool,
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::GetSubnetCidrReservationsOutput]

    def get_transit_gateway_attachment_propagations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetTransitGatewayAttachmentPropagationsOutput] |
      (?Types::GetTransitGatewayAttachmentPropagationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetTransitGatewayAttachmentPropagationsOutput] |
      (
        transit_gateway_attachment_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetTransitGatewayAttachmentPropagationsOutput]

    def get_transit_gateway_multicast_domain_associations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetTransitGatewayMulticastDomainAssociationsOutput] |
      (?Types::GetTransitGatewayMulticastDomainAssociationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetTransitGatewayMulticastDomainAssociationsOutput] |
      (
        transit_gateway_multicast_domain_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetTransitGatewayMulticastDomainAssociationsOutput]

    def get_transit_gateway_policy_table_associations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetTransitGatewayPolicyTableAssociationsOutput] |
      (?Types::GetTransitGatewayPolicyTableAssociationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetTransitGatewayPolicyTableAssociationsOutput] |
      (
        transit_gateway_policy_table_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetTransitGatewayPolicyTableAssociationsOutput]

    def get_transit_gateway_policy_table_entries: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetTransitGatewayPolicyTableEntriesOutput] |
      (?Types::GetTransitGatewayPolicyTableEntriesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetTransitGatewayPolicyTableEntriesOutput] |
      (
        transit_gateway_policy_table_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetTransitGatewayPolicyTableEntriesOutput]

    def get_transit_gateway_prefix_list_references: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetTransitGatewayPrefixListReferencesOutput] |
      (?Types::GetTransitGatewayPrefixListReferencesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetTransitGatewayPrefixListReferencesOutput] |
      (
        transit_gateway_route_table_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetTransitGatewayPrefixListReferencesOutput]

    def get_transit_gateway_route_table_associations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetTransitGatewayRouteTableAssociationsOutput] |
      (?Types::GetTransitGatewayRouteTableAssociationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetTransitGatewayRouteTableAssociationsOutput] |
      (
        transit_gateway_route_table_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetTransitGatewayRouteTableAssociationsOutput]

    def get_transit_gateway_route_table_propagations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetTransitGatewayRouteTablePropagationsOutput] |
      (?Types::GetTransitGatewayRouteTablePropagationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetTransitGatewayRouteTablePropagationsOutput] |
      (
        transit_gateway_route_table_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetTransitGatewayRouteTablePropagationsOutput]

    def get_verified_access_endpoint_policy: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetVerifiedAccessEndpointPolicyOutput] |
      (?Types::GetVerifiedAccessEndpointPolicyInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetVerifiedAccessEndpointPolicyOutput] |
      (
        verified_access_endpoint_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetVerifiedAccessEndpointPolicyOutput]

    def get_verified_access_group_policy: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetVerifiedAccessGroupPolicyOutput] |
      (?Types::GetVerifiedAccessGroupPolicyInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetVerifiedAccessGroupPolicyOutput] |
      (
        verified_access_group_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetVerifiedAccessGroupPolicyOutput]

    def get_vpn_connection_device_sample_configuration: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetVpnConnectionDeviceSampleConfigurationOutput] |
      (?Types::GetVpnConnectionDeviceSampleConfigurationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetVpnConnectionDeviceSampleConfigurationOutput] |
      (
        vpn_connection_id: ::String,
        vpn_connection_device_type_id: ::String,
        ?internet_key_exchange_version: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetVpnConnectionDeviceSampleConfigurationOutput]

    def get_vpn_connection_device_types: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetVpnConnectionDeviceTypesOutput] |
      (?Types::GetVpnConnectionDeviceTypesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetVpnConnectionDeviceTypesOutput] |
      (
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetVpnConnectionDeviceTypesOutput]

    def get_vpn_tunnel_replacement_status: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetVpnTunnelReplacementStatusOutput] |
      (?Types::GetVpnTunnelReplacementStatusInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetVpnTunnelReplacementStatusOutput] |
      (
        vpn_connection_id: ::String,
        vpn_tunnel_outside_ip_address: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::GetVpnTunnelReplacementStatusOutput]

    def import_client_vpn_client_certificate_revocation_list: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ImportClientVpnClientCertificateRevocationListOutput] |
      (?Types::ImportClientVpnClientCertificateRevocationListInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ImportClientVpnClientCertificateRevocationListOutput] |
      (
        client_vpn_endpoint_id: ::String,
        certificate_revocation_list: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ImportClientVpnClientCertificateRevocationListOutput]

    def import_image: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ImportImageOutput] |
      (?Types::ImportImageInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ImportImageOutput] |
      (
        ?architecture: ::String,
        ?client_data: {
          comment: ::String,
          upload_end: ::Time,
          upload_size: ::Float,
          upload_start: ::Time
        },
        ?client_token: ::String,
        ?description: ::String,
        ?disk_containers: ::Array[{
          description: ::String,
          device_name: ::String,
          format: ::String,
          snapshot_id: ::String,
          url: ::String,
          user_bucket: Types::UserBucket
        }],
        ?dry_run: bool,
        ?encrypted: bool,
        ?hypervisor: ::String,
        ?kms_key_id: ::String,
        ?license_type: ::String,
        ?platform: ::String,
        ?role_name: ::String,
        ?license_specifications: ::Array[{
          license_configuration_arn: ::String
        }],
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?usage_operation: ::String,
        ?boot_mode: ("legacy-bios" | "uefi" | "uefi-preferred")
      ) -> Hearth::Output[Types::ImportImageOutput]

    def import_instance: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ImportInstanceOutput] |
      (?Types::ImportInstanceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ImportInstanceOutput] |
      (
        ?description: ::String,
        ?disk_images: ::Array[{
          description: ::String,
          image: Types::DiskImageDetail,
          volume: Types::VolumeDetail
        }],
        ?dry_run: bool,
        ?launch_specification: {
          additional_info: ::String,
          architecture: ("i386" | "x86_64" | "arm64" | "x86_64_mac" | "arm64_mac"),
          group_ids: ::Array[::String],
          group_names: ::Array[::String],
          instance_initiated_shutdown_behavior: ("stop" | "terminate"),
          instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl"),
          monitoring: bool,
          placement: {
            availability_zone: ::String,
            affinity: ::String,
            group_name: ::String,
            partition_number: ::Integer,
            host_id: ::String,
            tenancy: ::String,
            spread_domain: ::String,
            host_resource_group_arn: ::String,
            group_id: ::String
          },
          private_ip_address: ::String,
          subnet_id: ::String,
          user_data: {
            data: ::String
          }
        },
        platform: ("Windows")
      ) -> Hearth::Output[Types::ImportInstanceOutput]

    def import_key_pair: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ImportKeyPairOutput] |
      (?Types::ImportKeyPairInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ImportKeyPairOutput] |
      (
        ?dry_run: bool,
        key_name: ::String,
        public_key_material: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::ImportKeyPairOutput]

    def import_snapshot: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ImportSnapshotOutput] |
      (?Types::ImportSnapshotInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ImportSnapshotOutput] |
      (
        ?client_data: {
          comment: ::String,
          upload_end: ::Time,
          upload_size: ::Float,
          upload_start: ::Time
        },
        ?client_token: ::String,
        ?description: ::String,
        ?disk_container: {
          description: ::String,
          format: ::String,
          url: ::String,
          user_bucket: {
            s3_bucket: ::String,
            s3_key: ::String
          }
        },
        ?dry_run: bool,
        ?encrypted: bool,
        ?kms_key_id: ::String,
        ?role_name: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::ImportSnapshotOutput]

    def import_volume: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ImportVolumeOutput] |
      (?Types::ImportVolumeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ImportVolumeOutput] |
      (
        availability_zone: ::String,
        ?description: ::String,
        ?dry_run: bool,
        image: {
          bytes: ::Integer,
          format: ("VMDK" | "RAW" | "VHD"),
          import_manifest_url: ::String
        },
        volume: {
          size: ::Integer
        }
      ) -> Hearth::Output[Types::ImportVolumeOutput]

    def list_images_in_recycle_bin: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ListImagesInRecycleBinOutput] |
      (?Types::ListImagesInRecycleBinInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ListImagesInRecycleBinOutput] |
      (
        ?image_ids: ::Array[::String],
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ListImagesInRecycleBinOutput]

    def list_snapshots_in_recycle_bin: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ListSnapshotsInRecycleBinOutput] |
      (?Types::ListSnapshotsInRecycleBinInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ListSnapshotsInRecycleBinOutput] |
      (
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?snapshot_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::ListSnapshotsInRecycleBinOutput]

    def lock_snapshot: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::LockSnapshotOutput] |
      (?Types::LockSnapshotInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::LockSnapshotOutput] |
      (
        snapshot_id: ::String,
        ?dry_run: bool,
        lock_mode: ("compliance" | "governance"),
        ?cool_off_period: ::Integer,
        ?lock_duration: ::Integer,
        ?expiration_date: ::Time
      ) -> Hearth::Output[Types::LockSnapshotOutput]

    def modify_address_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyAddressAttributeOutput] |
      (?Types::ModifyAddressAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyAddressAttributeOutput] |
      (
        allocation_id: ::String,
        ?domain_name: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyAddressAttributeOutput]

    def modify_availability_zone_group: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyAvailabilityZoneGroupOutput] |
      (?Types::ModifyAvailabilityZoneGroupInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyAvailabilityZoneGroupOutput] |
      (
        group_name: ::String,
        opt_in_status: ("opted-in" | "not-opted-in"),
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyAvailabilityZoneGroupOutput]

    def modify_capacity_reservation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyCapacityReservationOutput] |
      (?Types::ModifyCapacityReservationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyCapacityReservationOutput] |
      (
        capacity_reservation_id: ::String,
        ?instance_count: ::Integer,
        ?end_date: ::Time,
        ?end_date_type: ("unlimited" | "limited"),
        ?accept: bool,
        ?dry_run: bool,
        ?additional_info: ::String
      ) -> Hearth::Output[Types::ModifyCapacityReservationOutput]

    def modify_capacity_reservation_fleet: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyCapacityReservationFleetOutput] |
      (?Types::ModifyCapacityReservationFleetInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyCapacityReservationFleetOutput] |
      (
        capacity_reservation_fleet_id: ::String,
        ?total_target_capacity: ::Integer,
        ?end_date: ::Time,
        ?dry_run: bool,
        ?remove_end_date: bool
      ) -> Hearth::Output[Types::ModifyCapacityReservationFleetOutput]

    def modify_client_vpn_endpoint: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyClientVpnEndpointOutput] |
      (?Types::ModifyClientVpnEndpointInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyClientVpnEndpointOutput] |
      (
        client_vpn_endpoint_id: ::String,
        ?server_certificate_arn: ::String,
        ?connection_log_options: {
          enabled: bool,
          cloudwatch_log_group: ::String,
          cloudwatch_log_stream: ::String
        },
        ?dns_servers: {
          custom_dns_servers: ::Array[::String],
          enabled: bool
        },
        ?vpn_port: ::Integer,
        ?description: ::String,
        ?split_tunnel: bool,
        ?dry_run: bool,
        ?security_group_ids: ::Array[::String],
        ?vpc_id: ::String,
        ?self_service_portal: ("enabled" | "disabled"),
        ?client_connect_options: {
          enabled: bool,
          lambda_function_arn: ::String
        },
        ?session_timeout_hours: ::Integer,
        ?client_login_banner_options: {
          enabled: bool,
          banner_text: ::String
        }
      ) -> Hearth::Output[Types::ModifyClientVpnEndpointOutput]

    def modify_default_credit_specification: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyDefaultCreditSpecificationOutput] |
      (?Types::ModifyDefaultCreditSpecificationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyDefaultCreditSpecificationOutput] |
      (
        ?dry_run: bool,
        instance_family: ("t2" | "t3" | "t3a" | "t4g"),
        cpu_credits: ::String
      ) -> Hearth::Output[Types::ModifyDefaultCreditSpecificationOutput]

    def modify_ebs_default_kms_key_id: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyEbsDefaultKmsKeyIdOutput] |
      (?Types::ModifyEbsDefaultKmsKeyIdInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyEbsDefaultKmsKeyIdOutput] |
      (
        kms_key_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyEbsDefaultKmsKeyIdOutput]

    def modify_fleet: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyFleetOutput] |
      (?Types::ModifyFleetInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyFleetOutput] |
      (
        ?dry_run: bool,
        ?excess_capacity_termination_policy: ("no-termination" | "termination"),
        ?launch_template_configs: ::Array[{
          launch_template_specification: Types::FleetLaunchTemplateSpecificationRequest,
          overrides: ::Array[Types::FleetLaunchTemplateOverridesRequest]
        }],
        fleet_id: ::String,
        ?target_capacity_specification: {
          total_target_capacity: ::Integer,
          on_demand_target_capacity: ::Integer,
          spot_target_capacity: ::Integer,
          default_target_capacity_type: ("spot" | "on-demand" | "capacity-block"),
          target_capacity_unit_type: ("vcpu" | "memory-mib" | "units")
        },
        ?context: ::String
      ) -> Hearth::Output[Types::ModifyFleetOutput]

    def modify_fpga_image_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyFpgaImageAttributeOutput] |
      (?Types::ModifyFpgaImageAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyFpgaImageAttributeOutput] |
      (
        ?dry_run: bool,
        fpga_image_id: ::String,
        ?attribute: ("description" | "name" | "loadPermission" | "productCodes"),
        ?operation_type: ("add" | "remove"),
        ?user_ids: ::Array[::String],
        ?user_groups: ::Array[::String],
        ?product_codes: ::Array[::String],
        ?load_permission: {
          add: ::Array[Types::LoadPermissionRequest],
          remove: ::Array[Types::LoadPermissionRequest]
        },
        ?description: ::String,
        ?name: ::String
      ) -> Hearth::Output[Types::ModifyFpgaImageAttributeOutput]

    def modify_hosts: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyHostsOutput] |
      (?Types::ModifyHostsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyHostsOutput] |
      (
        ?auto_placement: ("on" | "off"),
        host_ids: ::Array[::String],
        ?host_recovery: ("on" | "off"),
        ?instance_type: ::String,
        ?instance_family: ::String,
        ?host_maintenance: ("on" | "off")
      ) -> Hearth::Output[Types::ModifyHostsOutput]

    def modify_id_format: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyIdFormatOutput] |
      (?Types::ModifyIdFormatInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyIdFormatOutput] |
      (
        resource: ::String,
        use_long_ids: bool
      ) -> Hearth::Output[Types::ModifyIdFormatOutput]

    def modify_identity_id_format: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyIdentityIdFormatOutput] |
      (?Types::ModifyIdentityIdFormatInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyIdentityIdFormatOutput] |
      (
        principal_arn: ::String,
        resource: ::String,
        use_long_ids: bool
      ) -> Hearth::Output[Types::ModifyIdentityIdFormatOutput]

    def modify_image_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyImageAttributeOutput] |
      (?Types::ModifyImageAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyImageAttributeOutput] |
      (
        ?attribute: ::String,
        ?description: {
          value: ::String
        },
        image_id: ::String,
        ?launch_permission: {
          add: ::Array[Types::LaunchPermission],
          remove: ::Array[Types::LaunchPermission]
        },
        ?operation_type: ("add" | "remove"),
        ?product_codes: ::Array[::String],
        ?user_groups: ::Array[::String],
        ?user_ids: ::Array[::String],
        ?value: ::String,
        ?dry_run: bool,
        ?organization_arns: ::Array[::String],
        ?organizational_unit_arns: ::Array[::String],
        ?imds_support: {
          value: ::String
        }
      ) -> Hearth::Output[Types::ModifyImageAttributeOutput]

    def modify_instance_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstanceAttributeOutput] |
      (?Types::ModifyInstanceAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstanceAttributeOutput] |
      (
        ?source_dest_check: {
          value: bool
        },
        ?attribute: ("instanceType" | "kernel" | "ramdisk" | "userData" | "disableApiTermination" | "instanceInitiatedShutdownBehavior" | "rootDeviceName" | "blockDeviceMapping" | "productCodes" | "sourceDestCheck" | "groupSet" | "ebsOptimized" | "sriovNetSupport" | "enaSupport" | "enclaveOptions" | "disableApiStop"),
        ?block_device_mappings: ::Array[{
          device_name: ::String,
          ebs: Types::EbsInstanceBlockDeviceSpecification,
          no_device: ::String,
          virtual_name: ::String
        }],
        ?disable_api_termination: {
          value: bool
        },
        ?dry_run: bool,
        ?ebs_optimized: {
          value: bool
        },
        ?ena_support: {
          value: bool
        },
        ?groups: ::Array[::String],
        instance_id: ::String,
        ?instance_initiated_shutdown_behavior: {
          value: ::String
        },
        ?instance_type: {
          value: ::String
        },
        ?kernel: {
          value: ::String
        },
        ?ramdisk: {
          value: ::String
        },
        ?sriov_net_support: {
          value: ::String
        },
        ?user_data: {
          value: ::String
        },
        ?value: ::String,
        ?disable_api_stop: {
          value: bool
        }
      ) -> Hearth::Output[Types::ModifyInstanceAttributeOutput]

    def modify_instance_capacity_reservation_attributes: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstanceCapacityReservationAttributesOutput] |
      (?Types::ModifyInstanceCapacityReservationAttributesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstanceCapacityReservationAttributesOutput] |
      (
        instance_id: ::String,
        capacity_reservation_specification: {
          capacity_reservation_preference: ("open" | "none"),
          capacity_reservation_target: {
            capacity_reservation_id: ::String,
            capacity_reservation_resource_group_arn: ::String
          }
        },
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyInstanceCapacityReservationAttributesOutput]

    def modify_instance_credit_specification: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstanceCreditSpecificationOutput] |
      (?Types::ModifyInstanceCreditSpecificationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstanceCreditSpecificationOutput] |
      (
        ?dry_run: bool,
        ?client_token: ::String,
        instance_credit_specifications: ::Array[{
          instance_id: ::String,
          cpu_credits: ::String
        }]
      ) -> Hearth::Output[Types::ModifyInstanceCreditSpecificationOutput]

    def modify_instance_event_start_time: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstanceEventStartTimeOutput] |
      (?Types::ModifyInstanceEventStartTimeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstanceEventStartTimeOutput] |
      (
        ?dry_run: bool,
        instance_id: ::String,
        instance_event_id: ::String,
        not_before: ::Time
      ) -> Hearth::Output[Types::ModifyInstanceEventStartTimeOutput]

    def modify_instance_event_window: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstanceEventWindowOutput] |
      (?Types::ModifyInstanceEventWindowInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstanceEventWindowOutput] |
      (
        ?dry_run: bool,
        ?name: ::String,
        instance_event_window_id: ::String,
        ?time_ranges: ::Array[{
          start_week_day: ::String,
          start_hour: ::Integer,
          end_week_day: ::String,
          end_hour: ::Integer
        }],
        ?cron_expression: ::String
      ) -> Hearth::Output[Types::ModifyInstanceEventWindowOutput]

    def modify_instance_maintenance_options: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstanceMaintenanceOptionsOutput] |
      (?Types::ModifyInstanceMaintenanceOptionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstanceMaintenanceOptionsOutput] |
      (
        instance_id: ::String,
        ?auto_recovery: ("disabled" | "default"),
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyInstanceMaintenanceOptionsOutput]

    def modify_instance_metadata_options: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstanceMetadataOptionsOutput] |
      (?Types::ModifyInstanceMetadataOptionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstanceMetadataOptionsOutput] |
      (
        instance_id: ::String,
        ?http_tokens: ("optional" | "required"),
        ?http_put_response_hop_limit: ::Integer,
        ?http_endpoint: ("disabled" | "enabled"),
        ?dry_run: bool,
        ?http_protocol_ipv6: ("disabled" | "enabled"),
        ?instance_metadata_tags: ("disabled" | "enabled")
      ) -> Hearth::Output[Types::ModifyInstanceMetadataOptionsOutput]

    def modify_instance_placement: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstancePlacementOutput] |
      (?Types::ModifyInstancePlacementInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyInstancePlacementOutput] |
      (
        ?affinity: ("default" | "host"),
        ?group_name: ::String,
        ?host_id: ::String,
        instance_id: ::String,
        ?tenancy: ("dedicated" | "host"),
        ?partition_number: ::Integer,
        ?host_resource_group_arn: ::String,
        ?group_id: ::String
      ) -> Hearth::Output[Types::ModifyInstancePlacementOutput]

    def modify_ipam: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyIpamOutput] |
      (?Types::ModifyIpamInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyIpamOutput] |
      (
        ?dry_run: bool,
        ipam_id: ::String,
        ?description: ::String,
        ?add_operating_regions: ::Array[{
          region_name: ::String
        }],
        ?remove_operating_regions: ::Array[{
          region_name: ::String
        }],
        ?tier: ("free" | "advanced")
      ) -> Hearth::Output[Types::ModifyIpamOutput]

    def modify_ipam_pool: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyIpamPoolOutput] |
      (?Types::ModifyIpamPoolInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyIpamPoolOutput] |
      (
        ?dry_run: bool,
        ipam_pool_id: ::String,
        ?description: ::String,
        ?auto_import: bool,
        ?allocation_min_netmask_length: ::Integer,
        ?allocation_max_netmask_length: ::Integer,
        ?allocation_default_netmask_length: ::Integer,
        ?clear_allocation_default_netmask_length: bool,
        ?add_allocation_resource_tags: ::Array[{
          key: ::String,
          value: ::String
        }],
        ?remove_allocation_resource_tags: ::Array[{
          key: ::String,
          value: ::String
        }]
      ) -> Hearth::Output[Types::ModifyIpamPoolOutput]

    def modify_ipam_resource_cidr: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyIpamResourceCidrOutput] |
      (?Types::ModifyIpamResourceCidrInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyIpamResourceCidrOutput] |
      (
        ?dry_run: bool,
        resource_id: ::String,
        resource_cidr: ::String,
        resource_region: ::String,
        current_ipam_scope_id: ::String,
        ?destination_ipam_scope_id: ::String,
        monitored: bool
      ) -> Hearth::Output[Types::ModifyIpamResourceCidrOutput]

    def modify_ipam_resource_discovery: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyIpamResourceDiscoveryOutput] |
      (?Types::ModifyIpamResourceDiscoveryInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyIpamResourceDiscoveryOutput] |
      (
        ?dry_run: bool,
        ipam_resource_discovery_id: ::String,
        ?description: ::String,
        ?add_operating_regions: ::Array[{
          region_name: ::String
        }],
        ?remove_operating_regions: ::Array[{
          region_name: ::String
        }]
      ) -> Hearth::Output[Types::ModifyIpamResourceDiscoveryOutput]

    def modify_ipam_scope: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyIpamScopeOutput] |
      (?Types::ModifyIpamScopeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyIpamScopeOutput] |
      (
        ?dry_run: bool,
        ipam_scope_id: ::String,
        ?description: ::String
      ) -> Hearth::Output[Types::ModifyIpamScopeOutput]

    def modify_launch_template: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyLaunchTemplateOutput] |
      (?Types::ModifyLaunchTemplateInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyLaunchTemplateOutput] |
      (
        ?dry_run: bool,
        ?client_token: ::String,
        ?launch_template_id: ::String,
        ?launch_template_name: ::String,
        ?default_version: ::String
      ) -> Hearth::Output[Types::ModifyLaunchTemplateOutput]

    def modify_local_gateway_route: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyLocalGatewayRouteOutput] |
      (?Types::ModifyLocalGatewayRouteInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyLocalGatewayRouteOutput] |
      (
        ?destination_cidr_block: ::String,
        local_gateway_route_table_id: ::String,
        ?local_gateway_virtual_interface_group_id: ::String,
        ?network_interface_id: ::String,
        ?dry_run: bool,
        ?destination_prefix_list_id: ::String
      ) -> Hearth::Output[Types::ModifyLocalGatewayRouteOutput]

    def modify_managed_prefix_list: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyManagedPrefixListOutput] |
      (?Types::ModifyManagedPrefixListInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyManagedPrefixListOutput] |
      (
        ?dry_run: bool,
        prefix_list_id: ::String,
        ?current_version: ::Integer,
        ?prefix_list_name: ::String,
        ?add_entries: ::Array[{
          cidr: ::String,
          description: ::String
        }],
        ?remove_entries: ::Array[{
          cidr: ::String
        }],
        ?max_entries: ::Integer
      ) -> Hearth::Output[Types::ModifyManagedPrefixListOutput]

    def modify_network_interface_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyNetworkInterfaceAttributeOutput] |
      (?Types::ModifyNetworkInterfaceAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyNetworkInterfaceAttributeOutput] |
      (
        ?attachment: {
          attachment_id: ::String,
          delete_on_termination: bool
        },
        ?description: {
          value: ::String
        },
        ?dry_run: bool,
        ?groups: ::Array[::String],
        network_interface_id: ::String,
        ?source_dest_check: {
          value: bool
        },
        ?ena_srd_specification: {
          ena_srd_enabled: bool,
          ena_srd_udp_specification: {
            ena_srd_udp_enabled: bool
          }
        },
        ?enable_primary_ipv6: bool,
        ?connection_tracking_specification: {
          tcp_established_timeout: ::Integer,
          udp_stream_timeout: ::Integer,
          udp_timeout: ::Integer
        }
      ) -> Hearth::Output[Types::ModifyNetworkInterfaceAttributeOutput]

    def modify_private_dns_name_options: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyPrivateDnsNameOptionsOutput] |
      (?Types::ModifyPrivateDnsNameOptionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyPrivateDnsNameOptionsOutput] |
      (
        ?dry_run: bool,
        instance_id: ::String,
        ?private_dns_hostname_type: ("ip-name" | "resource-name"),
        ?enable_resource_name_dns_a_record: bool,
        ?enable_resource_name_dns_aaaa_record: bool
      ) -> Hearth::Output[Types::ModifyPrivateDnsNameOptionsOutput]

    def modify_reserved_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyReservedInstancesOutput] |
      (?Types::ModifyReservedInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyReservedInstancesOutput] |
      (
        reserved_instances_ids: ::Array[::String],
        ?client_token: ::String,
        target_configurations: ::Array[{
          availability_zone: ::String,
          instance_count: ::Integer,
          instance_type: ::String,
          platform: ::String,
          scope: ::String
        }]
      ) -> Hearth::Output[Types::ModifyReservedInstancesOutput]

    def modify_security_group_rules: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifySecurityGroupRulesOutput] |
      (?Types::ModifySecurityGroupRulesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifySecurityGroupRulesOutput] |
      (
        group_id: ::String,
        security_group_rules: ::Array[{
          security_group_rule_id: ::String,
          security_group_rule: Types::SecurityGroupRuleRequest
        }],
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifySecurityGroupRulesOutput]

    def modify_snapshot_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifySnapshotAttributeOutput] |
      (?Types::ModifySnapshotAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifySnapshotAttributeOutput] |
      (
        ?attribute: ("productCodes" | "createVolumePermission"),
        ?create_volume_permission: {
          add: ::Array[Types::CreateVolumePermission],
          remove: ::Array[Types::CreateVolumePermission]
        },
        ?group_names: ::Array[::String],
        ?operation_type: ("add" | "remove"),
        snapshot_id: ::String,
        ?user_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifySnapshotAttributeOutput]

    def modify_snapshot_tier: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifySnapshotTierOutput] |
      (?Types::ModifySnapshotTierInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifySnapshotTierOutput] |
      (
        snapshot_id: ::String,
        ?storage_tier: ("archive"),
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifySnapshotTierOutput]

    def modify_spot_fleet_request: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifySpotFleetRequestOutput] |
      (?Types::ModifySpotFleetRequestInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifySpotFleetRequestOutput] |
      (
        ?excess_capacity_termination_policy: ("noTermination" | "default"),
        ?launch_template_configs: ::Array[{
          launch_template_specification: Types::FleetLaunchTemplateSpecification,
          overrides: ::Array[Types::LaunchTemplateOverrides]
        }],
        spot_fleet_request_id: ::String,
        ?target_capacity: ::Integer,
        ?on_demand_target_capacity: ::Integer,
        ?context: ::String
      ) -> Hearth::Output[Types::ModifySpotFleetRequestOutput]

    def modify_subnet_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifySubnetAttributeOutput] |
      (?Types::ModifySubnetAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifySubnetAttributeOutput] |
      (
        ?assign_ipv6_address_on_creation: {
          value: bool
        },
        ?map_public_ip_on_launch: {
          value: bool
        },
        subnet_id: ::String,
        ?map_customer_owned_ip_on_launch: {
          value: bool
        },
        ?customer_owned_ipv4_pool: ::String,
        ?enable_dns64: {
          value: bool
        },
        ?private_dns_hostname_type_on_launch: ("ip-name" | "resource-name"),
        ?enable_resource_name_dns_a_record_on_launch: {
          value: bool
        },
        ?enable_resource_name_dns_aaaa_record_on_launch: {
          value: bool
        },
        ?enable_lni_at_device_index: ::Integer,
        ?disable_lni_at_device_index: {
          value: bool
        }
      ) -> Hearth::Output[Types::ModifySubnetAttributeOutput]

    def modify_traffic_mirror_filter_network_services: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyTrafficMirrorFilterNetworkServicesOutput] |
      (?Types::ModifyTrafficMirrorFilterNetworkServicesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyTrafficMirrorFilterNetworkServicesOutput] |
      (
        traffic_mirror_filter_id: ::String,
        ?add_network_services: ::Array[("amazon-dns")],
        ?remove_network_services: ::Array[("amazon-dns")],
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyTrafficMirrorFilterNetworkServicesOutput]

    def modify_traffic_mirror_filter_rule: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyTrafficMirrorFilterRuleOutput] |
      (?Types::ModifyTrafficMirrorFilterRuleInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyTrafficMirrorFilterRuleOutput] |
      (
        traffic_mirror_filter_rule_id: ::String,
        ?traffic_direction: ("ingress" | "egress"),
        ?rule_number: ::Integer,
        ?rule_action: ("accept" | "reject"),
        ?destination_port_range: {
          from_port: ::Integer,
          to_port: ::Integer
        },
        ?source_port_range: {
          from_port: ::Integer,
          to_port: ::Integer
        },
        ?protocol: ::Integer,
        ?destination_cidr_block: ::String,
        ?source_cidr_block: ::String,
        ?description: ::String,
        ?remove_fields: ::Array[("destination-port-range" | "source-port-range" | "protocol" | "description")],
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyTrafficMirrorFilterRuleOutput]

    def modify_traffic_mirror_session: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyTrafficMirrorSessionOutput] |
      (?Types::ModifyTrafficMirrorSessionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyTrafficMirrorSessionOutput] |
      (
        traffic_mirror_session_id: ::String,
        ?traffic_mirror_target_id: ::String,
        ?traffic_mirror_filter_id: ::String,
        ?packet_length: ::Integer,
        ?session_number: ::Integer,
        ?virtual_network_id: ::Integer,
        ?description: ::String,
        ?remove_fields: ::Array[("packet-length" | "description" | "virtual-network-id")],
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyTrafficMirrorSessionOutput]

    def modify_transit_gateway: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyTransitGatewayOutput] |
      (?Types::ModifyTransitGatewayInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyTransitGatewayOutput] |
      (
        transit_gateway_id: ::String,
        ?description: ::String,
        ?options: {
          add_transit_gateway_cidr_blocks: ::Array[::String],
          remove_transit_gateway_cidr_blocks: ::Array[::String],
          vpn_ecmp_support: ("enable" | "disable"),
          dns_support: ("enable" | "disable"),
          security_group_referencing_support: ("enable" | "disable"),
          auto_accept_shared_attachments: ("enable" | "disable"),
          default_route_table_association: ("enable" | "disable"),
          association_default_route_table_id: ::String,
          default_route_table_propagation: ("enable" | "disable"),
          propagation_default_route_table_id: ::String,
          amazon_side_asn: ::Integer
        },
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyTransitGatewayOutput]

    def modify_transit_gateway_prefix_list_reference: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyTransitGatewayPrefixListReferenceOutput] |
      (?Types::ModifyTransitGatewayPrefixListReferenceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyTransitGatewayPrefixListReferenceOutput] |
      (
        transit_gateway_route_table_id: ::String,
        prefix_list_id: ::String,
        ?transit_gateway_attachment_id: ::String,
        ?blackhole: bool,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyTransitGatewayPrefixListReferenceOutput]

    def modify_transit_gateway_vpc_attachment: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyTransitGatewayVpcAttachmentOutput] |
      (?Types::ModifyTransitGatewayVpcAttachmentInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyTransitGatewayVpcAttachmentOutput] |
      (
        transit_gateway_attachment_id: ::String,
        ?add_subnet_ids: ::Array[::String],
        ?remove_subnet_ids: ::Array[::String],
        ?options: {
          dns_support: ("enable" | "disable"),
          security_group_referencing_support: ("enable" | "disable"),
          ipv6_support: ("enable" | "disable"),
          appliance_mode_support: ("enable" | "disable")
        },
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyTransitGatewayVpcAttachmentOutput]

    def modify_verified_access_endpoint: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVerifiedAccessEndpointOutput] |
      (?Types::ModifyVerifiedAccessEndpointInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVerifiedAccessEndpointOutput] |
      (
        verified_access_endpoint_id: ::String,
        ?verified_access_group_id: ::String,
        ?load_balancer_options: {
          subnet_ids: ::Array[::String],
          protocol: ("http" | "https"),
          port: ::Integer
        },
        ?network_interface_options: {
          protocol: ("http" | "https"),
          port: ::Integer
        },
        ?description: ::String,
        ?client_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyVerifiedAccessEndpointOutput]

    def modify_verified_access_endpoint_policy: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVerifiedAccessEndpointPolicyOutput] |
      (?Types::ModifyVerifiedAccessEndpointPolicyInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVerifiedAccessEndpointPolicyOutput] |
      (
        verified_access_endpoint_id: ::String,
        ?policy_enabled: bool,
        ?policy_document: ::String,
        ?client_token: ::String,
        ?dry_run: bool,
        ?sse_specification: {
          customer_managed_key_enabled: bool,
          kms_key_arn: ::String
        }
      ) -> Hearth::Output[Types::ModifyVerifiedAccessEndpointPolicyOutput]

    def modify_verified_access_group: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVerifiedAccessGroupOutput] |
      (?Types::ModifyVerifiedAccessGroupInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVerifiedAccessGroupOutput] |
      (
        verified_access_group_id: ::String,
        ?verified_access_instance_id: ::String,
        ?description: ::String,
        ?client_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyVerifiedAccessGroupOutput]

    def modify_verified_access_group_policy: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVerifiedAccessGroupPolicyOutput] |
      (?Types::ModifyVerifiedAccessGroupPolicyInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVerifiedAccessGroupPolicyOutput] |
      (
        verified_access_group_id: ::String,
        ?policy_enabled: bool,
        ?policy_document: ::String,
        ?client_token: ::String,
        ?dry_run: bool,
        ?sse_specification: {
          customer_managed_key_enabled: bool,
          kms_key_arn: ::String
        }
      ) -> Hearth::Output[Types::ModifyVerifiedAccessGroupPolicyOutput]

    def modify_verified_access_instance: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVerifiedAccessInstanceOutput] |
      (?Types::ModifyVerifiedAccessInstanceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVerifiedAccessInstanceOutput] |
      (
        verified_access_instance_id: ::String,
        ?description: ::String,
        ?dry_run: bool,
        ?client_token: ::String
      ) -> Hearth::Output[Types::ModifyVerifiedAccessInstanceOutput]

    def modify_verified_access_instance_logging_configuration: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVerifiedAccessInstanceLoggingConfigurationOutput] |
      (?Types::ModifyVerifiedAccessInstanceLoggingConfigurationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVerifiedAccessInstanceLoggingConfigurationOutput] |
      (
        verified_access_instance_id: ::String,
        access_logs: {
          s3: {
            enabled: bool,
            bucket_name: ::String,
            prefix: ::String,
            bucket_owner: ::String
          },
          cloud_watch_logs: {
            enabled: bool,
            log_group: ::String
          },
          kinesis_data_firehose: {
            enabled: bool,
            delivery_stream: ::String
          },
          log_version: ::String,
          include_trust_context: bool
        },
        ?dry_run: bool,
        ?client_token: ::String
      ) -> Hearth::Output[Types::ModifyVerifiedAccessInstanceLoggingConfigurationOutput]

    def modify_verified_access_trust_provider: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVerifiedAccessTrustProviderOutput] |
      (?Types::ModifyVerifiedAccessTrustProviderInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVerifiedAccessTrustProviderOutput] |
      (
        verified_access_trust_provider_id: ::String,
        ?oidc_options: {
          issuer: ::String,
          authorization_endpoint: ::String,
          token_endpoint: ::String,
          user_info_endpoint: ::String,
          client_id: ::String,
          client_secret: ::String,
          scope: ::String
        },
        ?device_options: {
          public_signing_key_url: ::String
        },
        ?description: ::String,
        ?dry_run: bool,
        ?client_token: ::String,
        ?sse_specification: {
          customer_managed_key_enabled: bool,
          kms_key_arn: ::String
        }
      ) -> Hearth::Output[Types::ModifyVerifiedAccessTrustProviderOutput]

    def modify_volume: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVolumeOutput] |
      (?Types::ModifyVolumeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVolumeOutput] |
      (
        ?dry_run: bool,
        volume_id: ::String,
        ?size: ::Integer,
        ?volume_type: ("standard" | "io1" | "io2" | "gp2" | "sc1" | "st1" | "gp3"),
        ?iops: ::Integer,
        ?throughput: ::Integer,
        ?multi_attach_enabled: bool
      ) -> Hearth::Output[Types::ModifyVolumeOutput]

    def modify_volume_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVolumeAttributeOutput] |
      (?Types::ModifyVolumeAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVolumeAttributeOutput] |
      (
        ?auto_enable_io: {
          value: bool
        },
        volume_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyVolumeAttributeOutput]

    def modify_vpc_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcAttributeOutput] |
      (?Types::ModifyVpcAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcAttributeOutput] |
      (
        ?enable_dns_hostnames: {
          value: bool
        },
        ?enable_dns_support: {
          value: bool
        },
        vpc_id: ::String,
        ?enable_network_address_usage_metrics: {
          value: bool
        }
      ) -> Hearth::Output[Types::ModifyVpcAttributeOutput]

    def modify_vpc_endpoint: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcEndpointOutput] |
      (?Types::ModifyVpcEndpointInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcEndpointOutput] |
      (
        ?dry_run: bool,
        vpc_endpoint_id: ::String,
        ?reset_policy: bool,
        ?policy_document: ::String,
        ?add_route_table_ids: ::Array[::String],
        ?remove_route_table_ids: ::Array[::String],
        ?add_subnet_ids: ::Array[::String],
        ?remove_subnet_ids: ::Array[::String],
        ?add_security_group_ids: ::Array[::String],
        ?remove_security_group_ids: ::Array[::String],
        ?ip_address_type: ("ipv4" | "dualstack" | "ipv6"),
        ?dns_options: {
          dns_record_ip_type: ("ipv4" | "dualstack" | "ipv6" | "service-defined"),
          private_dns_only_for_inbound_resolver_endpoint: bool
        },
        ?private_dns_enabled: bool,
        ?subnet_configurations: ::Array[{
          subnet_id: ::String,
          ipv4: ::String,
          ipv6: ::String
        }]
      ) -> Hearth::Output[Types::ModifyVpcEndpointOutput]

    def modify_vpc_endpoint_connection_notification: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcEndpointConnectionNotificationOutput] |
      (?Types::ModifyVpcEndpointConnectionNotificationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcEndpointConnectionNotificationOutput] |
      (
        ?dry_run: bool,
        connection_notification_id: ::String,
        ?connection_notification_arn: ::String,
        ?connection_events: ::Array[::String]
      ) -> Hearth::Output[Types::ModifyVpcEndpointConnectionNotificationOutput]

    def modify_vpc_endpoint_service_configuration: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcEndpointServiceConfigurationOutput] |
      (?Types::ModifyVpcEndpointServiceConfigurationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcEndpointServiceConfigurationOutput] |
      (
        ?dry_run: bool,
        service_id: ::String,
        ?private_dns_name: ::String,
        ?remove_private_dns_name: bool,
        ?acceptance_required: bool,
        ?add_network_load_balancer_arns: ::Array[::String],
        ?remove_network_load_balancer_arns: ::Array[::String],
        ?add_gateway_load_balancer_arns: ::Array[::String],
        ?remove_gateway_load_balancer_arns: ::Array[::String],
        ?add_supported_ip_address_types: ::Array[::String],
        ?remove_supported_ip_address_types: ::Array[::String]
      ) -> Hearth::Output[Types::ModifyVpcEndpointServiceConfigurationOutput]

    def modify_vpc_endpoint_service_payer_responsibility: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcEndpointServicePayerResponsibilityOutput] |
      (?Types::ModifyVpcEndpointServicePayerResponsibilityInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcEndpointServicePayerResponsibilityOutput] |
      (
        ?dry_run: bool,
        service_id: ::String,
        payer_responsibility: ("ServiceOwner")
      ) -> Hearth::Output[Types::ModifyVpcEndpointServicePayerResponsibilityOutput]

    def modify_vpc_endpoint_service_permissions: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcEndpointServicePermissionsOutput] |
      (?Types::ModifyVpcEndpointServicePermissionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcEndpointServicePermissionsOutput] |
      (
        ?dry_run: bool,
        service_id: ::String,
        ?add_allowed_principals: ::Array[::String],
        ?remove_allowed_principals: ::Array[::String]
      ) -> Hearth::Output[Types::ModifyVpcEndpointServicePermissionsOutput]

    def modify_vpc_peering_connection_options: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcPeeringConnectionOptionsOutput] |
      (?Types::ModifyVpcPeeringConnectionOptionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcPeeringConnectionOptionsOutput] |
      (
        ?accepter_peering_connection_options: {
          allow_dns_resolution_from_remote_vpc: bool,
          allow_egress_from_local_classic_link_to_remote_vpc: bool,
          allow_egress_from_local_vpc_to_remote_classic_link: bool
        },
        ?dry_run: bool,
        ?requester_peering_connection_options: {
          allow_dns_resolution_from_remote_vpc: bool,
          allow_egress_from_local_classic_link_to_remote_vpc: bool,
          allow_egress_from_local_vpc_to_remote_classic_link: bool
        },
        vpc_peering_connection_id: ::String
      ) -> Hearth::Output[Types::ModifyVpcPeeringConnectionOptionsOutput]

    def modify_vpc_tenancy: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcTenancyOutput] |
      (?Types::ModifyVpcTenancyInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpcTenancyOutput] |
      (
        vpc_id: ::String,
        instance_tenancy: ("default"),
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyVpcTenancyOutput]

    def modify_vpn_connection: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpnConnectionOutput] |
      (?Types::ModifyVpnConnectionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpnConnectionOutput] |
      (
        vpn_connection_id: ::String,
        ?transit_gateway_id: ::String,
        ?customer_gateway_id: ::String,
        ?vpn_gateway_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyVpnConnectionOutput]

    def modify_vpn_connection_options: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpnConnectionOptionsOutput] |
      (?Types::ModifyVpnConnectionOptionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpnConnectionOptionsOutput] |
      (
        vpn_connection_id: ::String,
        ?local_ipv4_network_cidr: ::String,
        ?remote_ipv4_network_cidr: ::String,
        ?local_ipv6_network_cidr: ::String,
        ?remote_ipv6_network_cidr: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyVpnConnectionOptionsOutput]

    def modify_vpn_tunnel_certificate: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpnTunnelCertificateOutput] |
      (?Types::ModifyVpnTunnelCertificateInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpnTunnelCertificateOutput] |
      (
        vpn_connection_id: ::String,
        vpn_tunnel_outside_ip_address: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ModifyVpnTunnelCertificateOutput]

    def modify_vpn_tunnel_options: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpnTunnelOptionsOutput] |
      (?Types::ModifyVpnTunnelOptionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ModifyVpnTunnelOptionsOutput] |
      (
        vpn_connection_id: ::String,
        vpn_tunnel_outside_ip_address: ::String,
        tunnel_options: {
          tunnel_inside_cidr: ::String,
          tunnel_inside_ipv6_cidr: ::String,
          pre_shared_key: ::String,
          phase1_lifetime_seconds: ::Integer,
          phase2_lifetime_seconds: ::Integer,
          rekey_margin_time_seconds: ::Integer,
          rekey_fuzz_percentage: ::Integer,
          replay_window_size: ::Integer,
          dpd_timeout_seconds: ::Integer,
          dpd_timeout_action: ::String,
          phase1_encryption_algorithms: ::Array[Types::Phase1EncryptionAlgorithmsRequestListValue],
          phase2_encryption_algorithms: ::Array[Types::Phase2EncryptionAlgorithmsRequestListValue],
          phase1_integrity_algorithms: ::Array[Types::Phase1IntegrityAlgorithmsRequestListValue],
          phase2_integrity_algorithms: ::Array[Types::Phase2IntegrityAlgorithmsRequestListValue],
          phase1_dh_group_numbers: ::Array[Types::Phase1DHGroupNumbersRequestListValue],
          phase2_dh_group_numbers: ::Array[Types::Phase2DHGroupNumbersRequestListValue],
          ike_versions: ::Array[Types::IKEVersionsRequestListValue],
          startup_action: ::String,
          log_options: {
            cloud_watch_log_options: Types::CloudWatchLogOptionsSpecification
          },
          enable_tunnel_lifecycle_control: bool
        },
        ?dry_run: bool,
        ?skip_tunnel_replacement: bool
      ) -> Hearth::Output[Types::ModifyVpnTunnelOptionsOutput]

    def monitor_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::MonitorInstancesOutput] |
      (?Types::MonitorInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::MonitorInstancesOutput] |
      (
        instance_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::MonitorInstancesOutput]

    def move_address_to_vpc: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::MoveAddressToVpcOutput] |
      (?Types::MoveAddressToVpcInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::MoveAddressToVpcOutput] |
      (
        ?dry_run: bool,
        public_ip: ::String
      ) -> Hearth::Output[Types::MoveAddressToVpcOutput]

    def move_byoip_cidr_to_ipam: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::MoveByoipCidrToIpamOutput] |
      (?Types::MoveByoipCidrToIpamInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::MoveByoipCidrToIpamOutput] |
      (
        ?dry_run: bool,
        cidr: ::String,
        ipam_pool_id: ::String,
        ipam_pool_owner: ::String
      ) -> Hearth::Output[Types::MoveByoipCidrToIpamOutput]

    def provision_byoip_cidr: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ProvisionByoipCidrOutput] |
      (?Types::ProvisionByoipCidrInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ProvisionByoipCidrOutput] |
      (
        cidr: ::String,
        ?cidr_authorization_context: {
          message: ::String,
          signature: ::String
        },
        ?publicly_advertisable: bool,
        ?description: ::String,
        ?dry_run: bool,
        ?pool_tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?multi_region: bool,
        ?network_border_group: ::String
      ) -> Hearth::Output[Types::ProvisionByoipCidrOutput]

    def provision_ipam_byoasn: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ProvisionIpamByoasnOutput] |
      (?Types::ProvisionIpamByoasnInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ProvisionIpamByoasnOutput] |
      (
        ?dry_run: bool,
        ipam_id: ::String,
        asn: ::String,
        asn_authorization_context: {
          message: ::String,
          signature: ::String
        }
      ) -> Hearth::Output[Types::ProvisionIpamByoasnOutput]

    def provision_ipam_pool_cidr: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ProvisionIpamPoolCidrOutput] |
      (?Types::ProvisionIpamPoolCidrInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ProvisionIpamPoolCidrOutput] |
      (
        ?dry_run: bool,
        ipam_pool_id: ::String,
        ?cidr: ::String,
        ?cidr_authorization_context: {
          message: ::String,
          signature: ::String
        },
        ?netmask_length: ::Integer,
        ?client_token: ::String
      ) -> Hearth::Output[Types::ProvisionIpamPoolCidrOutput]

    def provision_public_ipv4_pool_cidr: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ProvisionPublicIpv4PoolCidrOutput] |
      (?Types::ProvisionPublicIpv4PoolCidrInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ProvisionPublicIpv4PoolCidrOutput] |
      (
        ?dry_run: bool,
        ipam_pool_id: ::String,
        pool_id: ::String,
        netmask_length: ::Integer
      ) -> Hearth::Output[Types::ProvisionPublicIpv4PoolCidrOutput]

    def purchase_capacity_block: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PurchaseCapacityBlockOutput] |
      (?Types::PurchaseCapacityBlockInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PurchaseCapacityBlockOutput] |
      (
        ?dry_run: bool,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        capacity_block_offering_id: ::String,
        instance_platform: ("Linux/UNIX" | "Red Hat Enterprise Linux" | "SUSE Linux" | "Windows" | "Windows with SQL Server" | "Windows with SQL Server Enterprise" | "Windows with SQL Server Standard" | "Windows with SQL Server Web" | "Linux with SQL Server Standard" | "Linux with SQL Server Web" | "Linux with SQL Server Enterprise" | "RHEL with SQL Server Standard" | "RHEL with SQL Server Enterprise" | "RHEL with SQL Server Web" | "RHEL with HA" | "RHEL with HA and SQL Server Standard" | "RHEL with HA and SQL Server Enterprise" | "Ubuntu Pro")
      ) -> Hearth::Output[Types::PurchaseCapacityBlockOutput]

    def purchase_host_reservation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PurchaseHostReservationOutput] |
      (?Types::PurchaseHostReservationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PurchaseHostReservationOutput] |
      (
        ?client_token: ::String,
        ?currency_code: ("USD"),
        host_id_set: ::Array[::String],
        ?limit_price: ::String,
        offering_id: ::String,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::PurchaseHostReservationOutput]

    def purchase_reserved_instances_offering: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PurchaseReservedInstancesOfferingOutput] |
      (?Types::PurchaseReservedInstancesOfferingInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PurchaseReservedInstancesOfferingOutput] |
      (
        instance_count: ::Integer,
        reserved_instances_offering_id: ::String,
        ?dry_run: bool,
        ?limit_price: {
          amount: ::Float,
          currency_code: ("USD")
        },
        ?purchase_time: ::Time
      ) -> Hearth::Output[Types::PurchaseReservedInstancesOfferingOutput]

    def purchase_scheduled_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PurchaseScheduledInstancesOutput] |
      (?Types::PurchaseScheduledInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PurchaseScheduledInstancesOutput] |
      (
        ?client_token: ::String,
        ?dry_run: bool,
        purchase_requests: ::Array[{
          instance_count: ::Integer,
          purchase_token: ::String
        }]
      ) -> Hearth::Output[Types::PurchaseScheduledInstancesOutput]

    def reboot_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RebootInstancesOutput] |
      (?Types::RebootInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RebootInstancesOutput] |
      (
        instance_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::RebootInstancesOutput]

    def register_image: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RegisterImageOutput] |
      (?Types::RegisterImageInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RegisterImageOutput] |
      (
        ?image_location: ::String,
        ?architecture: ("i386" | "x86_64" | "arm64" | "x86_64_mac" | "arm64_mac"),
        ?block_device_mappings: ::Array[{
          device_name: ::String,
          virtual_name: ::String,
          ebs: Types::EbsBlockDevice,
          no_device: ::String
        }],
        ?description: ::String,
        ?dry_run: bool,
        ?ena_support: bool,
        ?kernel_id: ::String,
        name: ::String,
        ?billing_products: ::Array[::String],
        ?ramdisk_id: ::String,
        ?root_device_name: ::String,
        ?sriov_net_support: ::String,
        ?virtualization_type: ::String,
        ?boot_mode: ("legacy-bios" | "uefi" | "uefi-preferred"),
        ?tpm_support: ("v2.0"),
        ?uefi_data: ::String,
        ?imds_support: ("v2.0")
      ) -> Hearth::Output[Types::RegisterImageOutput]

    def register_instance_event_notification_attributes: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RegisterInstanceEventNotificationAttributesOutput] |
      (?Types::RegisterInstanceEventNotificationAttributesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RegisterInstanceEventNotificationAttributesOutput] |
      (
        ?dry_run: bool,
        instance_tag_attribute: {
          include_all_tags_of_instance: bool,
          instance_tag_keys: ::Array[::String]
        }
      ) -> Hearth::Output[Types::RegisterInstanceEventNotificationAttributesOutput]

    def register_transit_gateway_multicast_group_members: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RegisterTransitGatewayMulticastGroupMembersOutput] |
      (?Types::RegisterTransitGatewayMulticastGroupMembersInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RegisterTransitGatewayMulticastGroupMembersOutput] |
      (
        transit_gateway_multicast_domain_id: ::String,
        ?group_ip_address: ::String,
        network_interface_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::RegisterTransitGatewayMulticastGroupMembersOutput]

    def register_transit_gateway_multicast_group_sources: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RegisterTransitGatewayMulticastGroupSourcesOutput] |
      (?Types::RegisterTransitGatewayMulticastGroupSourcesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RegisterTransitGatewayMulticastGroupSourcesOutput] |
      (
        transit_gateway_multicast_domain_id: ::String,
        ?group_ip_address: ::String,
        network_interface_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::RegisterTransitGatewayMulticastGroupSourcesOutput]

    def reject_transit_gateway_multicast_domain_associations: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RejectTransitGatewayMulticastDomainAssociationsOutput] |
      (?Types::RejectTransitGatewayMulticastDomainAssociationsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RejectTransitGatewayMulticastDomainAssociationsOutput] |
      (
        ?transit_gateway_multicast_domain_id: ::String,
        ?transit_gateway_attachment_id: ::String,
        ?subnet_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::RejectTransitGatewayMulticastDomainAssociationsOutput]

    def reject_transit_gateway_peering_attachment: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RejectTransitGatewayPeeringAttachmentOutput] |
      (?Types::RejectTransitGatewayPeeringAttachmentInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RejectTransitGatewayPeeringAttachmentOutput] |
      (
        transit_gateway_attachment_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::RejectTransitGatewayPeeringAttachmentOutput]

    def reject_transit_gateway_vpc_attachment: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RejectTransitGatewayVpcAttachmentOutput] |
      (?Types::RejectTransitGatewayVpcAttachmentInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RejectTransitGatewayVpcAttachmentOutput] |
      (
        transit_gateway_attachment_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::RejectTransitGatewayVpcAttachmentOutput]

    def reject_vpc_endpoint_connections: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RejectVpcEndpointConnectionsOutput] |
      (?Types::RejectVpcEndpointConnectionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RejectVpcEndpointConnectionsOutput] |
      (
        ?dry_run: bool,
        service_id: ::String,
        vpc_endpoint_ids: ::Array[::String]
      ) -> Hearth::Output[Types::RejectVpcEndpointConnectionsOutput]

    def reject_vpc_peering_connection: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RejectVpcPeeringConnectionOutput] |
      (?Types::RejectVpcPeeringConnectionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RejectVpcPeeringConnectionOutput] |
      (
        ?dry_run: bool,
        vpc_peering_connection_id: ::String
      ) -> Hearth::Output[Types::RejectVpcPeeringConnectionOutput]

    def release_address: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReleaseAddressOutput] |
      (?Types::ReleaseAddressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReleaseAddressOutput] |
      (
        ?allocation_id: ::String,
        ?public_ip: ::String,
        ?network_border_group: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ReleaseAddressOutput]

    def release_hosts: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReleaseHostsOutput] |
      (?Types::ReleaseHostsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReleaseHostsOutput] |
      (
        host_ids: ::Array[::String]
      ) -> Hearth::Output[Types::ReleaseHostsOutput]

    def release_ipam_pool_allocation: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReleaseIpamPoolAllocationOutput] |
      (?Types::ReleaseIpamPoolAllocationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReleaseIpamPoolAllocationOutput] |
      (
        ?dry_run: bool,
        ipam_pool_id: ::String,
        cidr: ::String,
        ipam_pool_allocation_id: ::String
      ) -> Hearth::Output[Types::ReleaseIpamPoolAllocationOutput]

    def replace_iam_instance_profile_association: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReplaceIamInstanceProfileAssociationOutput] |
      (?Types::ReplaceIamInstanceProfileAssociationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReplaceIamInstanceProfileAssociationOutput] |
      (
        iam_instance_profile: {
          arn: ::String,
          name: ::String
        },
        association_id: ::String
      ) -> Hearth::Output[Types::ReplaceIamInstanceProfileAssociationOutput]

    def replace_network_acl_association: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReplaceNetworkAclAssociationOutput] |
      (?Types::ReplaceNetworkAclAssociationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReplaceNetworkAclAssociationOutput] |
      (
        association_id: ::String,
        ?dry_run: bool,
        network_acl_id: ::String
      ) -> Hearth::Output[Types::ReplaceNetworkAclAssociationOutput]

    def replace_network_acl_entry: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReplaceNetworkAclEntryOutput] |
      (?Types::ReplaceNetworkAclEntryInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReplaceNetworkAclEntryOutput] |
      (
        ?cidr_block: ::String,
        ?dry_run: bool,
        egress: bool,
        ?icmp_type_code: {
          code: ::Integer,
          type: ::Integer
        },
        ?ipv6_cidr_block: ::String,
        network_acl_id: ::String,
        ?port_range: {
          from: ::Integer,
          to: ::Integer
        },
        protocol: ::String,
        rule_action: ("allow" | "deny"),
        rule_number: ::Integer
      ) -> Hearth::Output[Types::ReplaceNetworkAclEntryOutput]

    def replace_route: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReplaceRouteOutput] |
      (?Types::ReplaceRouteInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReplaceRouteOutput] |
      (
        ?destination_cidr_block: ::String,
        ?destination_ipv6_cidr_block: ::String,
        ?destination_prefix_list_id: ::String,
        ?dry_run: bool,
        ?vpc_endpoint_id: ::String,
        ?egress_only_internet_gateway_id: ::String,
        ?gateway_id: ::String,
        ?instance_id: ::String,
        ?local_target: bool,
        ?nat_gateway_id: ::String,
        ?transit_gateway_id: ::String,
        ?local_gateway_id: ::String,
        ?carrier_gateway_id: ::String,
        ?network_interface_id: ::String,
        route_table_id: ::String,
        ?vpc_peering_connection_id: ::String,
        ?core_network_arn: ::String
      ) -> Hearth::Output[Types::ReplaceRouteOutput]

    def replace_route_table_association: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReplaceRouteTableAssociationOutput] |
      (?Types::ReplaceRouteTableAssociationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReplaceRouteTableAssociationOutput] |
      (
        association_id: ::String,
        ?dry_run: bool,
        route_table_id: ::String
      ) -> Hearth::Output[Types::ReplaceRouteTableAssociationOutput]

    def replace_transit_gateway_route: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReplaceTransitGatewayRouteOutput] |
      (?Types::ReplaceTransitGatewayRouteInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReplaceTransitGatewayRouteOutput] |
      (
        destination_cidr_block: ::String,
        transit_gateway_route_table_id: ::String,
        ?transit_gateway_attachment_id: ::String,
        ?blackhole: bool,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ReplaceTransitGatewayRouteOutput]

    def replace_vpn_tunnel: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReplaceVpnTunnelOutput] |
      (?Types::ReplaceVpnTunnelInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReplaceVpnTunnelOutput] |
      (
        vpn_connection_id: ::String,
        vpn_tunnel_outside_ip_address: ::String,
        ?apply_pending_maintenance: bool,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ReplaceVpnTunnelOutput]

    def report_instance_status: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReportInstanceStatusOutput] |
      (?Types::ReportInstanceStatusInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ReportInstanceStatusOutput] |
      (
        ?description: ::String,
        ?dry_run: bool,
        ?end_time: ::Time,
        instances: ::Array[::String],
        reason_codes: ::Array[("instance-stuck-in-state" | "unresponsive" | "not-accepting-credentials" | "password-not-available" | "performance-network" | "performance-instance-store" | "performance-ebs-volume" | "performance-other" | "other")],
        ?start_time: ::Time,
        status: ("ok" | "impaired")
      ) -> Hearth::Output[Types::ReportInstanceStatusOutput]

    def request_spot_fleet: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RequestSpotFleetOutput] |
      (?Types::RequestSpotFleetInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RequestSpotFleetOutput] |
      (
        ?dry_run: bool,
        spot_fleet_request_config: {
          allocation_strategy: ("lowestPrice" | "diversified" | "capacityOptimized" | "capacityOptimizedPrioritized" | "priceCapacityOptimized"),
          on_demand_allocation_strategy: ("lowestPrice" | "prioritized"),
          spot_maintenance_strategies: {
            capacity_rebalance: Types::SpotCapacityRebalance
          },
          client_token: ::String,
          excess_capacity_termination_policy: ("noTermination" | "default"),
          fulfilled_capacity: ::Float,
          on_demand_fulfilled_capacity: ::Float,
          iam_fleet_role: ::String,
          launch_specifications: ::Array[Types::SpotFleetLaunchSpecification],
          launch_template_configs: ::Array[Types::LaunchTemplateConfig],
          spot_price: ::String,
          target_capacity: ::Integer,
          on_demand_target_capacity: ::Integer,
          on_demand_max_total_price: ::String,
          spot_max_total_price: ::String,
          terminate_instances_with_expiration: bool,
          type: ("request" | "maintain" | "instant"),
          valid_from: ::Time,
          valid_until: ::Time,
          replace_unhealthy_instances: bool,
          instance_interruption_behavior: ("hibernate" | "stop" | "terminate"),
          load_balancers_config: {
            classic_load_balancers_config: Types::ClassicLoadBalancersConfig,
            target_groups_config: Types::TargetGroupsConfig
          },
          instance_pools_to_use_count: ::Integer,
          context: ::String,
          target_capacity_unit_type: ("vcpu" | "memory-mib" | "units"),
          tag_specifications: ::Array[Types::TagSpecification]
        }
      ) -> Hearth::Output[Types::RequestSpotFleetOutput]

    def request_spot_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RequestSpotInstancesOutput] |
      (?Types::RequestSpotInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RequestSpotInstancesOutput] |
      (
        ?availability_zone_group: ::String,
        ?block_duration_minutes: ::Integer,
        ?client_token: ::String,
        ?dry_run: bool,
        ?instance_count: ::Integer,
        ?launch_group: ::String,
        ?launch_specification: {
          security_group_ids: ::Array[::String],
          security_groups: ::Array[::String],
          addressing_type: ::String,
          block_device_mappings: ::Array[Types::BlockDeviceMapping],
          ebs_optimized: bool,
          iam_instance_profile: {
            arn: ::String,
            name: ::String
          },
          image_id: ::String,
          instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl"),
          kernel_id: ::String,
          key_name: ::String,
          monitoring: {
            enabled: bool
          },
          network_interfaces: ::Array[Types::InstanceNetworkInterfaceSpecification],
          placement: {
            availability_zone: ::String,
            group_name: ::String,
            tenancy: ::String
          },
          ramdisk_id: ::String,
          subnet_id: ::String,
          user_data: ::String
        },
        ?spot_price: ::String,
        ?type: ("one-time" | "persistent"),
        ?valid_from: ::Time,
        ?valid_until: ::Time,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?instance_interruption_behavior: ("hibernate" | "stop" | "terminate")
      ) -> Hearth::Output[Types::RequestSpotInstancesOutput]

    def reset_address_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResetAddressAttributeOutput] |
      (?Types::ResetAddressAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResetAddressAttributeOutput] |
      (
        allocation_id: ::String,
        attribute: ("domain-name"),
        ?dry_run: bool
      ) -> Hearth::Output[Types::ResetAddressAttributeOutput]

    def reset_ebs_default_kms_key_id: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResetEbsDefaultKmsKeyIdOutput] |
      (?Types::ResetEbsDefaultKmsKeyIdInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResetEbsDefaultKmsKeyIdOutput] |
      (
        ?dry_run: bool
      ) -> Hearth::Output[Types::ResetEbsDefaultKmsKeyIdOutput]

    def reset_fpga_image_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResetFpgaImageAttributeOutput] |
      (?Types::ResetFpgaImageAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResetFpgaImageAttributeOutput] |
      (
        ?dry_run: bool,
        fpga_image_id: ::String,
        ?attribute: ("loadPermission")
      ) -> Hearth::Output[Types::ResetFpgaImageAttributeOutput]

    def reset_image_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResetImageAttributeOutput] |
      (?Types::ResetImageAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResetImageAttributeOutput] |
      (
        attribute: ("launchPermission"),
        image_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ResetImageAttributeOutput]

    def reset_instance_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResetInstanceAttributeOutput] |
      (?Types::ResetInstanceAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResetInstanceAttributeOutput] |
      (
        attribute: ("instanceType" | "kernel" | "ramdisk" | "userData" | "disableApiTermination" | "instanceInitiatedShutdownBehavior" | "rootDeviceName" | "blockDeviceMapping" | "productCodes" | "sourceDestCheck" | "groupSet" | "ebsOptimized" | "sriovNetSupport" | "enaSupport" | "enclaveOptions" | "disableApiStop"),
        ?dry_run: bool,
        instance_id: ::String
      ) -> Hearth::Output[Types::ResetInstanceAttributeOutput]

    def reset_network_interface_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResetNetworkInterfaceAttributeOutput] |
      (?Types::ResetNetworkInterfaceAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResetNetworkInterfaceAttributeOutput] |
      (
        ?dry_run: bool,
        network_interface_id: ::String,
        ?source_dest_check: ::String
      ) -> Hearth::Output[Types::ResetNetworkInterfaceAttributeOutput]

    def reset_snapshot_attribute: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResetSnapshotAttributeOutput] |
      (?Types::ResetSnapshotAttributeInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ResetSnapshotAttributeOutput] |
      (
        attribute: ("productCodes" | "createVolumePermission"),
        snapshot_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::ResetSnapshotAttributeOutput]

    def restore_address_to_classic: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RestoreAddressToClassicOutput] |
      (?Types::RestoreAddressToClassicInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RestoreAddressToClassicOutput] |
      (
        ?dry_run: bool,
        public_ip: ::String
      ) -> Hearth::Output[Types::RestoreAddressToClassicOutput]

    def restore_image_from_recycle_bin: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RestoreImageFromRecycleBinOutput] |
      (?Types::RestoreImageFromRecycleBinInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RestoreImageFromRecycleBinOutput] |
      (
        image_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::RestoreImageFromRecycleBinOutput]

    def restore_managed_prefix_list_version: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RestoreManagedPrefixListVersionOutput] |
      (?Types::RestoreManagedPrefixListVersionInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RestoreManagedPrefixListVersionOutput] |
      (
        ?dry_run: bool,
        prefix_list_id: ::String,
        previous_version: ::Integer,
        current_version: ::Integer
      ) -> Hearth::Output[Types::RestoreManagedPrefixListVersionOutput]

    def restore_snapshot_from_recycle_bin: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RestoreSnapshotFromRecycleBinOutput] |
      (?Types::RestoreSnapshotFromRecycleBinInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RestoreSnapshotFromRecycleBinOutput] |
      (
        snapshot_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::RestoreSnapshotFromRecycleBinOutput]

    def restore_snapshot_tier: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RestoreSnapshotTierOutput] |
      (?Types::RestoreSnapshotTierInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RestoreSnapshotTierOutput] |
      (
        snapshot_id: ::String,
        ?temporary_restore_days: ::Integer,
        ?permanent_restore: bool,
        ?dry_run: bool
      ) -> Hearth::Output[Types::RestoreSnapshotTierOutput]

    def revoke_client_vpn_ingress: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RevokeClientVpnIngressOutput] |
      (?Types::RevokeClientVpnIngressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RevokeClientVpnIngressOutput] |
      (
        client_vpn_endpoint_id: ::String,
        target_network_cidr: ::String,
        ?access_group_id: ::String,
        ?revoke_all_groups: bool,
        ?dry_run: bool
      ) -> Hearth::Output[Types::RevokeClientVpnIngressOutput]

    def revoke_security_group_egress: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RevokeSecurityGroupEgressOutput] |
      (?Types::RevokeSecurityGroupEgressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RevokeSecurityGroupEgressOutput] |
      (
        ?dry_run: bool,
        group_id: ::String,
        ?ip_permissions: ::Array[{
          from_port: ::Integer,
          ip_protocol: ::String,
          ip_ranges: ::Array[Types::IpRange],
          ipv6_ranges: ::Array[Types::Ipv6Range],
          prefix_list_ids: ::Array[Types::PrefixListId],
          to_port: ::Integer,
          user_id_group_pairs: ::Array[Types::UserIdGroupPair]
        }],
        ?security_group_rule_ids: ::Array[::String],
        ?cidr_ip: ::String,
        ?from_port: ::Integer,
        ?ip_protocol: ::String,
        ?to_port: ::Integer,
        ?source_security_group_name: ::String,
        ?source_security_group_owner_id: ::String
      ) -> Hearth::Output[Types::RevokeSecurityGroupEgressOutput]

    def revoke_security_group_ingress: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RevokeSecurityGroupIngressOutput] |
      (?Types::RevokeSecurityGroupIngressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RevokeSecurityGroupIngressOutput] |
      (
        ?cidr_ip: ::String,
        ?from_port: ::Integer,
        ?group_id: ::String,
        ?group_name: ::String,
        ?ip_permissions: ::Array[{
          from_port: ::Integer,
          ip_protocol: ::String,
          ip_ranges: ::Array[Types::IpRange],
          ipv6_ranges: ::Array[Types::Ipv6Range],
          prefix_list_ids: ::Array[Types::PrefixListId],
          to_port: ::Integer,
          user_id_group_pairs: ::Array[Types::UserIdGroupPair]
        }],
        ?ip_protocol: ::String,
        ?source_security_group_name: ::String,
        ?source_security_group_owner_id: ::String,
        ?to_port: ::Integer,
        ?dry_run: bool,
        ?security_group_rule_ids: ::Array[::String]
      ) -> Hearth::Output[Types::RevokeSecurityGroupIngressOutput]

    def run_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RunInstancesOutput] |
      (?Types::RunInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RunInstancesOutput] |
      (
        ?block_device_mappings: ::Array[{
          device_name: ::String,
          virtual_name: ::String,
          ebs: Types::EbsBlockDevice,
          no_device: ::String
        }],
        ?image_id: ::String,
        ?instance_type: ("a1.medium" | "a1.large" | "a1.xlarge" | "a1.2xlarge" | "a1.4xlarge" | "a1.metal" | "c1.medium" | "c1.xlarge" | "c3.large" | "c3.xlarge" | "c3.2xlarge" | "c3.4xlarge" | "c3.8xlarge" | "c4.large" | "c4.xlarge" | "c4.2xlarge" | "c4.4xlarge" | "c4.8xlarge" | "c5.large" | "c5.xlarge" | "c5.2xlarge" | "c5.4xlarge" | "c5.9xlarge" | "c5.12xlarge" | "c5.18xlarge" | "c5.24xlarge" | "c5.metal" | "c5a.large" | "c5a.xlarge" | "c5a.2xlarge" | "c5a.4xlarge" | "c5a.8xlarge" | "c5a.12xlarge" | "c5a.16xlarge" | "c5a.24xlarge" | "c5ad.large" | "c5ad.xlarge" | "c5ad.2xlarge" | "c5ad.4xlarge" | "c5ad.8xlarge" | "c5ad.12xlarge" | "c5ad.16xlarge" | "c5ad.24xlarge" | "c5d.large" | "c5d.xlarge" | "c5d.2xlarge" | "c5d.4xlarge" | "c5d.9xlarge" | "c5d.12xlarge" | "c5d.18xlarge" | "c5d.24xlarge" | "c5d.metal" | "c5n.large" | "c5n.xlarge" | "c5n.2xlarge" | "c5n.4xlarge" | "c5n.9xlarge" | "c5n.18xlarge" | "c5n.metal" | "c6g.medium" | "c6g.large" | "c6g.xlarge" | "c6g.2xlarge" | "c6g.4xlarge" | "c6g.8xlarge" | "c6g.12xlarge" | "c6g.16xlarge" | "c6g.metal" | "c6gd.medium" | "c6gd.large" | "c6gd.xlarge" | "c6gd.2xlarge" | "c6gd.4xlarge" | "c6gd.8xlarge" | "c6gd.12xlarge" | "c6gd.16xlarge" | "c6gd.metal" | "c6gn.medium" | "c6gn.large" | "c6gn.xlarge" | "c6gn.2xlarge" | "c6gn.4xlarge" | "c6gn.8xlarge" | "c6gn.12xlarge" | "c6gn.16xlarge" | "c6i.large" | "c6i.xlarge" | "c6i.2xlarge" | "c6i.4xlarge" | "c6i.8xlarge" | "c6i.12xlarge" | "c6i.16xlarge" | "c6i.24xlarge" | "c6i.32xlarge" | "c6i.metal" | "cc1.4xlarge" | "cc2.8xlarge" | "cg1.4xlarge" | "cr1.8xlarge" | "d2.xlarge" | "d2.2xlarge" | "d2.4xlarge" | "d2.8xlarge" | "d3.xlarge" | "d3.2xlarge" | "d3.4xlarge" | "d3.8xlarge" | "d3en.xlarge" | "d3en.2xlarge" | "d3en.4xlarge" | "d3en.6xlarge" | "d3en.8xlarge" | "d3en.12xlarge" | "dl1.24xlarge" | "f1.2xlarge" | "f1.4xlarge" | "f1.16xlarge" | "g2.2xlarge" | "g2.8xlarge" | "g3.4xlarge" | "g3.8xlarge" | "g3.16xlarge" | "g3s.xlarge" | "g4ad.xlarge" | "g4ad.2xlarge" | "g4ad.4xlarge" | "g4ad.8xlarge" | "g4ad.16xlarge" | "g4dn.xlarge" | "g4dn.2xlarge" | "g4dn.4xlarge" | "g4dn.8xlarge" | "g4dn.12xlarge" | "g4dn.16xlarge" | "g4dn.metal" | "g5.xlarge" | "g5.2xlarge" | "g5.4xlarge" | "g5.8xlarge" | "g5.12xlarge" | "g5.16xlarge" | "g5.24xlarge" | "g5.48xlarge" | "g5g.xlarge" | "g5g.2xlarge" | "g5g.4xlarge" | "g5g.8xlarge" | "g5g.16xlarge" | "g5g.metal" | "hi1.4xlarge" | "hpc6a.48xlarge" | "hs1.8xlarge" | "h1.2xlarge" | "h1.4xlarge" | "h1.8xlarge" | "h1.16xlarge" | "i2.xlarge" | "i2.2xlarge" | "i2.4xlarge" | "i2.8xlarge" | "i3.large" | "i3.xlarge" | "i3.2xlarge" | "i3.4xlarge" | "i3.8xlarge" | "i3.16xlarge" | "i3.metal" | "i3en.large" | "i3en.xlarge" | "i3en.2xlarge" | "i3en.3xlarge" | "i3en.6xlarge" | "i3en.12xlarge" | "i3en.24xlarge" | "i3en.metal" | "im4gn.large" | "im4gn.xlarge" | "im4gn.2xlarge" | "im4gn.4xlarge" | "im4gn.8xlarge" | "im4gn.16xlarge" | "inf1.xlarge" | "inf1.2xlarge" | "inf1.6xlarge" | "inf1.24xlarge" | "is4gen.medium" | "is4gen.large" | "is4gen.xlarge" | "is4gen.2xlarge" | "is4gen.4xlarge" | "is4gen.8xlarge" | "m1.small" | "m1.medium" | "m1.large" | "m1.xlarge" | "m2.xlarge" | "m2.2xlarge" | "m2.4xlarge" | "m3.medium" | "m3.large" | "m3.xlarge" | "m3.2xlarge" | "m4.large" | "m4.xlarge" | "m4.2xlarge" | "m4.4xlarge" | "m4.10xlarge" | "m4.16xlarge" | "m5.large" | "m5.xlarge" | "m5.2xlarge" | "m5.4xlarge" | "m5.8xlarge" | "m5.12xlarge" | "m5.16xlarge" | "m5.24xlarge" | "m5.metal" | "m5a.large" | "m5a.xlarge" | "m5a.2xlarge" | "m5a.4xlarge" | "m5a.8xlarge" | "m5a.12xlarge" | "m5a.16xlarge" | "m5a.24xlarge" | "m5ad.large" | "m5ad.xlarge" | "m5ad.2xlarge" | "m5ad.4xlarge" | "m5ad.8xlarge" | "m5ad.12xlarge" | "m5ad.16xlarge" | "m5ad.24xlarge" | "m5d.large" | "m5d.xlarge" | "m5d.2xlarge" | "m5d.4xlarge" | "m5d.8xlarge" | "m5d.12xlarge" | "m5d.16xlarge" | "m5d.24xlarge" | "m5d.metal" | "m5dn.large" | "m5dn.xlarge" | "m5dn.2xlarge" | "m5dn.4xlarge" | "m5dn.8xlarge" | "m5dn.12xlarge" | "m5dn.16xlarge" | "m5dn.24xlarge" | "m5dn.metal" | "m5n.large" | "m5n.xlarge" | "m5n.2xlarge" | "m5n.4xlarge" | "m5n.8xlarge" | "m5n.12xlarge" | "m5n.16xlarge" | "m5n.24xlarge" | "m5n.metal" | "m5zn.large" | "m5zn.xlarge" | "m5zn.2xlarge" | "m5zn.3xlarge" | "m5zn.6xlarge" | "m5zn.12xlarge" | "m5zn.metal" | "m6a.large" | "m6a.xlarge" | "m6a.2xlarge" | "m6a.4xlarge" | "m6a.8xlarge" | "m6a.12xlarge" | "m6a.16xlarge" | "m6a.24xlarge" | "m6a.32xlarge" | "m6a.48xlarge" | "m6g.metal" | "m6g.medium" | "m6g.large" | "m6g.xlarge" | "m6g.2xlarge" | "m6g.4xlarge" | "m6g.8xlarge" | "m6g.12xlarge" | "m6g.16xlarge" | "m6gd.metal" | "m6gd.medium" | "m6gd.large" | "m6gd.xlarge" | "m6gd.2xlarge" | "m6gd.4xlarge" | "m6gd.8xlarge" | "m6gd.12xlarge" | "m6gd.16xlarge" | "m6i.large" | "m6i.xlarge" | "m6i.2xlarge" | "m6i.4xlarge" | "m6i.8xlarge" | "m6i.12xlarge" | "m6i.16xlarge" | "m6i.24xlarge" | "m6i.32xlarge" | "m6i.metal" | "mac1.metal" | "p2.xlarge" | "p2.8xlarge" | "p2.16xlarge" | "p3.2xlarge" | "p3.8xlarge" | "p3.16xlarge" | "p3dn.24xlarge" | "p4d.24xlarge" | "r3.large" | "r3.xlarge" | "r3.2xlarge" | "r3.4xlarge" | "r3.8xlarge" | "r4.large" | "r4.xlarge" | "r4.2xlarge" | "r4.4xlarge" | "r4.8xlarge" | "r4.16xlarge" | "r5.large" | "r5.xlarge" | "r5.2xlarge" | "r5.4xlarge" | "r5.8xlarge" | "r5.12xlarge" | "r5.16xlarge" | "r5.24xlarge" | "r5.metal" | "r5a.large" | "r5a.xlarge" | "r5a.2xlarge" | "r5a.4xlarge" | "r5a.8xlarge" | "r5a.12xlarge" | "r5a.16xlarge" | "r5a.24xlarge" | "r5ad.large" | "r5ad.xlarge" | "r5ad.2xlarge" | "r5ad.4xlarge" | "r5ad.8xlarge" | "r5ad.12xlarge" | "r5ad.16xlarge" | "r5ad.24xlarge" | "r5b.large" | "r5b.xlarge" | "r5b.2xlarge" | "r5b.4xlarge" | "r5b.8xlarge" | "r5b.12xlarge" | "r5b.16xlarge" | "r5b.24xlarge" | "r5b.metal" | "r5d.large" | "r5d.xlarge" | "r5d.2xlarge" | "r5d.4xlarge" | "r5d.8xlarge" | "r5d.12xlarge" | "r5d.16xlarge" | "r5d.24xlarge" | "r5d.metal" | "r5dn.large" | "r5dn.xlarge" | "r5dn.2xlarge" | "r5dn.4xlarge" | "r5dn.8xlarge" | "r5dn.12xlarge" | "r5dn.16xlarge" | "r5dn.24xlarge" | "r5dn.metal" | "r5n.large" | "r5n.xlarge" | "r5n.2xlarge" | "r5n.4xlarge" | "r5n.8xlarge" | "r5n.12xlarge" | "r5n.16xlarge" | "r5n.24xlarge" | "r5n.metal" | "r6g.medium" | "r6g.large" | "r6g.xlarge" | "r6g.2xlarge" | "r6g.4xlarge" | "r6g.8xlarge" | "r6g.12xlarge" | "r6g.16xlarge" | "r6g.metal" | "r6gd.medium" | "r6gd.large" | "r6gd.xlarge" | "r6gd.2xlarge" | "r6gd.4xlarge" | "r6gd.8xlarge" | "r6gd.12xlarge" | "r6gd.16xlarge" | "r6gd.metal" | "r6i.large" | "r6i.xlarge" | "r6i.2xlarge" | "r6i.4xlarge" | "r6i.8xlarge" | "r6i.12xlarge" | "r6i.16xlarge" | "r6i.24xlarge" | "r6i.32xlarge" | "r6i.metal" | "t1.micro" | "t2.nano" | "t2.micro" | "t2.small" | "t2.medium" | "t2.large" | "t2.xlarge" | "t2.2xlarge" | "t3.nano" | "t3.micro" | "t3.small" | "t3.medium" | "t3.large" | "t3.xlarge" | "t3.2xlarge" | "t3a.nano" | "t3a.micro" | "t3a.small" | "t3a.medium" | "t3a.large" | "t3a.xlarge" | "t3a.2xlarge" | "t4g.nano" | "t4g.micro" | "t4g.small" | "t4g.medium" | "t4g.large" | "t4g.xlarge" | "t4g.2xlarge" | "u-6tb1.56xlarge" | "u-6tb1.112xlarge" | "u-9tb1.112xlarge" | "u-12tb1.112xlarge" | "u-6tb1.metal" | "u-9tb1.metal" | "u-12tb1.metal" | "u-18tb1.metal" | "u-24tb1.metal" | "vt1.3xlarge" | "vt1.6xlarge" | "vt1.24xlarge" | "x1.16xlarge" | "x1.32xlarge" | "x1e.xlarge" | "x1e.2xlarge" | "x1e.4xlarge" | "x1e.8xlarge" | "x1e.16xlarge" | "x1e.32xlarge" | "x2iezn.2xlarge" | "x2iezn.4xlarge" | "x2iezn.6xlarge" | "x2iezn.8xlarge" | "x2iezn.12xlarge" | "x2iezn.metal" | "x2gd.medium" | "x2gd.large" | "x2gd.xlarge" | "x2gd.2xlarge" | "x2gd.4xlarge" | "x2gd.8xlarge" | "x2gd.12xlarge" | "x2gd.16xlarge" | "x2gd.metal" | "z1d.large" | "z1d.xlarge" | "z1d.2xlarge" | "z1d.3xlarge" | "z1d.6xlarge" | "z1d.12xlarge" | "z1d.metal" | "x2idn.16xlarge" | "x2idn.24xlarge" | "x2idn.32xlarge" | "x2iedn.xlarge" | "x2iedn.2xlarge" | "x2iedn.4xlarge" | "x2iedn.8xlarge" | "x2iedn.16xlarge" | "x2iedn.24xlarge" | "x2iedn.32xlarge" | "c6a.large" | "c6a.xlarge" | "c6a.2xlarge" | "c6a.4xlarge" | "c6a.8xlarge" | "c6a.12xlarge" | "c6a.16xlarge" | "c6a.24xlarge" | "c6a.32xlarge" | "c6a.48xlarge" | "c6a.metal" | "m6a.metal" | "i4i.large" | "i4i.xlarge" | "i4i.2xlarge" | "i4i.4xlarge" | "i4i.8xlarge" | "i4i.16xlarge" | "i4i.32xlarge" | "i4i.metal" | "x2idn.metal" | "x2iedn.metal" | "c7g.medium" | "c7g.large" | "c7g.xlarge" | "c7g.2xlarge" | "c7g.4xlarge" | "c7g.8xlarge" | "c7g.12xlarge" | "c7g.16xlarge" | "mac2.metal" | "c6id.large" | "c6id.xlarge" | "c6id.2xlarge" | "c6id.4xlarge" | "c6id.8xlarge" | "c6id.12xlarge" | "c6id.16xlarge" | "c6id.24xlarge" | "c6id.32xlarge" | "c6id.metal" | "m6id.large" | "m6id.xlarge" | "m6id.2xlarge" | "m6id.4xlarge" | "m6id.8xlarge" | "m6id.12xlarge" | "m6id.16xlarge" | "m6id.24xlarge" | "m6id.32xlarge" | "m6id.metal" | "r6id.large" | "r6id.xlarge" | "r6id.2xlarge" | "r6id.4xlarge" | "r6id.8xlarge" | "r6id.12xlarge" | "r6id.16xlarge" | "r6id.24xlarge" | "r6id.32xlarge" | "r6id.metal" | "r6a.large" | "r6a.xlarge" | "r6a.2xlarge" | "r6a.4xlarge" | "r6a.8xlarge" | "r6a.12xlarge" | "r6a.16xlarge" | "r6a.24xlarge" | "r6a.32xlarge" | "r6a.48xlarge" | "r6a.metal" | "p4de.24xlarge" | "u-3tb1.56xlarge" | "u-18tb1.112xlarge" | "u-24tb1.112xlarge" | "trn1.2xlarge" | "trn1.32xlarge" | "hpc6id.32xlarge" | "c6in.large" | "c6in.xlarge" | "c6in.2xlarge" | "c6in.4xlarge" | "c6in.8xlarge" | "c6in.12xlarge" | "c6in.16xlarge" | "c6in.24xlarge" | "c6in.32xlarge" | "m6in.large" | "m6in.xlarge" | "m6in.2xlarge" | "m6in.4xlarge" | "m6in.8xlarge" | "m6in.12xlarge" | "m6in.16xlarge" | "m6in.24xlarge" | "m6in.32xlarge" | "m6idn.large" | "m6idn.xlarge" | "m6idn.2xlarge" | "m6idn.4xlarge" | "m6idn.8xlarge" | "m6idn.12xlarge" | "m6idn.16xlarge" | "m6idn.24xlarge" | "m6idn.32xlarge" | "r6in.large" | "r6in.xlarge" | "r6in.2xlarge" | "r6in.4xlarge" | "r6in.8xlarge" | "r6in.12xlarge" | "r6in.16xlarge" | "r6in.24xlarge" | "r6in.32xlarge" | "r6idn.large" | "r6idn.xlarge" | "r6idn.2xlarge" | "r6idn.4xlarge" | "r6idn.8xlarge" | "r6idn.12xlarge" | "r6idn.16xlarge" | "r6idn.24xlarge" | "r6idn.32xlarge" | "c7g.metal" | "m7g.medium" | "m7g.large" | "m7g.xlarge" | "m7g.2xlarge" | "m7g.4xlarge" | "m7g.8xlarge" | "m7g.12xlarge" | "m7g.16xlarge" | "m7g.metal" | "r7g.medium" | "r7g.large" | "r7g.xlarge" | "r7g.2xlarge" | "r7g.4xlarge" | "r7g.8xlarge" | "r7g.12xlarge" | "r7g.16xlarge" | "r7g.metal" | "c6in.metal" | "m6in.metal" | "m6idn.metal" | "r6in.metal" | "r6idn.metal" | "inf2.xlarge" | "inf2.8xlarge" | "inf2.24xlarge" | "inf2.48xlarge" | "trn1n.32xlarge" | "i4g.large" | "i4g.xlarge" | "i4g.2xlarge" | "i4g.4xlarge" | "i4g.8xlarge" | "i4g.16xlarge" | "hpc7g.4xlarge" | "hpc7g.8xlarge" | "hpc7g.16xlarge" | "c7gn.medium" | "c7gn.large" | "c7gn.xlarge" | "c7gn.2xlarge" | "c7gn.4xlarge" | "c7gn.8xlarge" | "c7gn.12xlarge" | "c7gn.16xlarge" | "p5.48xlarge" | "m7i.large" | "m7i.xlarge" | "m7i.2xlarge" | "m7i.4xlarge" | "m7i.8xlarge" | "m7i.12xlarge" | "m7i.16xlarge" | "m7i.24xlarge" | "m7i.48xlarge" | "m7i-flex.large" | "m7i-flex.xlarge" | "m7i-flex.2xlarge" | "m7i-flex.4xlarge" | "m7i-flex.8xlarge" | "m7a.medium" | "m7a.large" | "m7a.xlarge" | "m7a.2xlarge" | "m7a.4xlarge" | "m7a.8xlarge" | "m7a.12xlarge" | "m7a.16xlarge" | "m7a.24xlarge" | "m7a.32xlarge" | "m7a.48xlarge" | "m7a.metal-48xl" | "hpc7a.12xlarge" | "hpc7a.24xlarge" | "hpc7a.48xlarge" | "hpc7a.96xlarge" | "c7gd.medium" | "c7gd.large" | "c7gd.xlarge" | "c7gd.2xlarge" | "c7gd.4xlarge" | "c7gd.8xlarge" | "c7gd.12xlarge" | "c7gd.16xlarge" | "m7gd.medium" | "m7gd.large" | "m7gd.xlarge" | "m7gd.2xlarge" | "m7gd.4xlarge" | "m7gd.8xlarge" | "m7gd.12xlarge" | "m7gd.16xlarge" | "r7gd.medium" | "r7gd.large" | "r7gd.xlarge" | "r7gd.2xlarge" | "r7gd.4xlarge" | "r7gd.8xlarge" | "r7gd.12xlarge" | "r7gd.16xlarge" | "r7a.medium" | "r7a.large" | "r7a.xlarge" | "r7a.2xlarge" | "r7a.4xlarge" | "r7a.8xlarge" | "r7a.12xlarge" | "r7a.16xlarge" | "r7a.24xlarge" | "r7a.32xlarge" | "r7a.48xlarge" | "c7i.large" | "c7i.xlarge" | "c7i.2xlarge" | "c7i.4xlarge" | "c7i.8xlarge" | "c7i.12xlarge" | "c7i.16xlarge" | "c7i.24xlarge" | "c7i.48xlarge" | "mac2-m2pro.metal" | "r7iz.large" | "r7iz.xlarge" | "r7iz.2xlarge" | "r7iz.4xlarge" | "r7iz.8xlarge" | "r7iz.12xlarge" | "r7iz.16xlarge" | "r7iz.32xlarge" | "c7a.medium" | "c7a.large" | "c7a.xlarge" | "c7a.2xlarge" | "c7a.4xlarge" | "c7a.8xlarge" | "c7a.12xlarge" | "c7a.16xlarge" | "c7a.24xlarge" | "c7a.32xlarge" | "c7a.48xlarge" | "c7a.metal-48xl" | "r7a.metal-48xl" | "r7i.large" | "r7i.xlarge" | "r7i.2xlarge" | "r7i.4xlarge" | "r7i.8xlarge" | "r7i.12xlarge" | "r7i.16xlarge" | "r7i.24xlarge" | "r7i.48xlarge" | "dl2q.24xlarge" | "mac2-m2.metal" | "i4i.12xlarge" | "i4i.24xlarge" | "c7i.metal-24xl" | "c7i.metal-48xl" | "m7i.metal-24xl" | "m7i.metal-48xl" | "r7i.metal-24xl" | "r7i.metal-48xl" | "r7iz.metal-16xl" | "r7iz.metal-32xl"),
        ?ipv6_address_count: ::Integer,
        ?ipv6_addresses: ::Array[{
          ipv6_address: ::String,
          is_primary_ipv6: bool
        }],
        ?kernel_id: ::String,
        ?key_name: ::String,
        max_count: ::Integer,
        min_count: ::Integer,
        ?monitoring: {
          enabled: bool
        },
        ?placement: {
          availability_zone: ::String,
          affinity: ::String,
          group_name: ::String,
          partition_number: ::Integer,
          host_id: ::String,
          tenancy: ("default" | "dedicated" | "host"),
          spread_domain: ::String,
          host_resource_group_arn: ::String,
          group_id: ::String
        },
        ?ramdisk_id: ::String,
        ?security_group_ids: ::Array[::String],
        ?security_groups: ::Array[::String],
        ?subnet_id: ::String,
        ?user_data: ::String,
        ?additional_info: ::String,
        ?client_token: ::String,
        ?disable_api_termination: bool,
        ?dry_run: bool,
        ?ebs_optimized: bool,
        ?iam_instance_profile: {
          arn: ::String,
          name: ::String
        },
        ?instance_initiated_shutdown_behavior: ("stop" | "terminate"),
        ?network_interfaces: ::Array[{
          associate_public_ip_address: bool,
          delete_on_termination: bool,
          description: ::String,
          device_index: ::Integer,
          groups: ::Array[::String],
          ipv6_address_count: ::Integer,
          ipv6_addresses: ::Array[Types::InstanceIpv6Address],
          network_interface_id: ::String,
          private_ip_address: ::String,
          private_ip_addresses: ::Array[Types::PrivateIpAddressSpecification],
          secondary_private_ip_address_count: ::Integer,
          subnet_id: ::String,
          associate_carrier_ip_address: bool,
          interface_type: ::String,
          network_card_index: ::Integer,
          ipv4_prefixes: ::Array[Types::Ipv4PrefixSpecificationRequest],
          ipv4_prefix_count: ::Integer,
          ipv6_prefixes: ::Array[Types::Ipv6PrefixSpecificationRequest],
          ipv6_prefix_count: ::Integer,
          primary_ipv6: bool,
          ena_srd_specification: Types::EnaSrdSpecificationRequest,
          connection_tracking_specification: Types::ConnectionTrackingSpecificationRequest
        }],
        ?private_ip_address: ::String,
        ?elastic_gpu_specification: ::Array[{
          type: ::String
        }],
        ?elastic_inference_accelerators: ::Array[{
          type: ::String,
          count: ::Integer
        }],
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        ?launch_template: {
          launch_template_id: ::String,
          launch_template_name: ::String,
          version: ::String
        },
        ?instance_market_options: {
          market_type: ("spot" | "capacity-block"),
          spot_options: {
            max_price: ::String,
            spot_instance_type: ::String,
            block_duration_minutes: ::Integer,
            valid_until: ::Time,
            instance_interruption_behavior: ::String
          }
        },
        ?credit_specification: {
          cpu_credits: ::String
        },
        ?cpu_options: {
          core_count: ::Integer,
          threads_per_core: ::Integer,
          amd_sev_snp: ("enabled" | "disabled")
        },
        ?capacity_reservation_specification: {
          capacity_reservation_preference: ("open" | "none"),
          capacity_reservation_target: {
            capacity_reservation_id: ::String,
            capacity_reservation_resource_group_arn: ::String
          }
        },
        ?hibernation_options: {
          configured: bool
        },
        ?license_specifications: ::Array[{
          license_configuration_arn: ::String
        }],
        ?metadata_options: {
          http_tokens: ("optional" | "required"),
          http_put_response_hop_limit: ::Integer,
          http_endpoint: ("disabled" | "enabled"),
          http_protocol_ipv6: ("disabled" | "enabled"),
          instance_metadata_tags: ("disabled" | "enabled")
        },
        ?enclave_options: {
          enabled: bool
        },
        ?private_dns_name_options: {
          hostname_type: ("ip-name" | "resource-name"),
          enable_resource_name_dns_a_record: bool,
          enable_resource_name_dns_aaaa_record: bool
        },
        ?maintenance_options: {
          auto_recovery: ("disabled" | "default")
        },
        ?disable_api_stop: bool,
        ?enable_primary_ipv6: bool
      ) -> Hearth::Output[Types::RunInstancesOutput]

    def run_scheduled_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RunScheduledInstancesOutput] |
      (?Types::RunScheduledInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::RunScheduledInstancesOutput] |
      (
        ?client_token: ::String,
        ?dry_run: bool,
        ?instance_count: ::Integer,
        launch_specification: {
          block_device_mappings: ::Array[Types::ScheduledInstancesBlockDeviceMapping],
          ebs_optimized: bool,
          iam_instance_profile: {
            arn: ::String,
            name: ::String
          },
          image_id: ::String,
          instance_type: ::String,
          kernel_id: ::String,
          key_name: ::String,
          monitoring: {
            enabled: bool
          },
          network_interfaces: ::Array[Types::ScheduledInstancesNetworkInterface],
          placement: {
            availability_zone: ::String,
            group_name: ::String
          },
          ramdisk_id: ::String,
          security_group_ids: ::Array[::String],
          subnet_id: ::String,
          user_data: ::String
        },
        scheduled_instance_id: ::String
      ) -> Hearth::Output[Types::RunScheduledInstancesOutput]

    def search_local_gateway_routes: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SearchLocalGatewayRoutesOutput] |
      (?Types::SearchLocalGatewayRoutesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SearchLocalGatewayRoutesOutput] |
      (
        local_gateway_route_table_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::SearchLocalGatewayRoutesOutput]

    def search_transit_gateway_multicast_groups: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SearchTransitGatewayMulticastGroupsOutput] |
      (?Types::SearchTransitGatewayMulticastGroupsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SearchTransitGatewayMulticastGroupsOutput] |
      (
        transit_gateway_multicast_domain_id: ::String,
        ?filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?next_token: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::SearchTransitGatewayMulticastGroupsOutput]

    def search_transit_gateway_routes: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SearchTransitGatewayRoutesOutput] |
      (?Types::SearchTransitGatewayRoutesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SearchTransitGatewayRoutesOutput] |
      (
        transit_gateway_route_table_id: ::String,
        filters: ::Array[{
          name: ::String,
          values: ::Array[::String]
        }],
        ?max_results: ::Integer,
        ?dry_run: bool
      ) -> Hearth::Output[Types::SearchTransitGatewayRoutesOutput]

    def send_diagnostic_interrupt: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SendDiagnosticInterruptOutput] |
      (?Types::SendDiagnosticInterruptInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SendDiagnosticInterruptOutput] |
      (
        instance_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::SendDiagnosticInterruptOutput]

    def start_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StartInstancesOutput] |
      (?Types::StartInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StartInstancesOutput] |
      (
        instance_ids: ::Array[::String],
        ?additional_info: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::StartInstancesOutput]

    def start_network_insights_access_scope_analysis: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StartNetworkInsightsAccessScopeAnalysisOutput] |
      (?Types::StartNetworkInsightsAccessScopeAnalysisInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StartNetworkInsightsAccessScopeAnalysisOutput] |
      (
        network_insights_access_scope_id: ::String,
        ?dry_run: bool,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        client_token: ::String
      ) -> Hearth::Output[Types::StartNetworkInsightsAccessScopeAnalysisOutput]

    def start_network_insights_analysis: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StartNetworkInsightsAnalysisOutput] |
      (?Types::StartNetworkInsightsAnalysisInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StartNetworkInsightsAnalysisOutput] |
      (
        network_insights_path_id: ::String,
        ?additional_accounts: ::Array[::String],
        ?filter_in_arns: ::Array[::String],
        ?dry_run: bool,
        ?tag_specifications: ::Array[{
          resource_type: ::String,
          tags: ::Array[Types::Tag]
        }],
        client_token: ::String
      ) -> Hearth::Output[Types::StartNetworkInsightsAnalysisOutput]

    def start_vpc_endpoint_service_private_dns_verification: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StartVpcEndpointServicePrivateDnsVerificationOutput] |
      (?Types::StartVpcEndpointServicePrivateDnsVerificationInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StartVpcEndpointServicePrivateDnsVerificationOutput] |
      (
        ?dry_run: bool,
        service_id: ::String
      ) -> Hearth::Output[Types::StartVpcEndpointServicePrivateDnsVerificationOutput]

    def stop_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StopInstancesOutput] |
      (?Types::StopInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StopInstancesOutput] |
      (
        instance_ids: ::Array[::String],
        ?hibernate: bool,
        ?dry_run: bool,
        ?force: bool
      ) -> Hearth::Output[Types::StopInstancesOutput]

    def terminate_client_vpn_connections: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TerminateClientVpnConnectionsOutput] |
      (?Types::TerminateClientVpnConnectionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TerminateClientVpnConnectionsOutput] |
      (
        client_vpn_endpoint_id: ::String,
        ?connection_id: ::String,
        ?username: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::TerminateClientVpnConnectionsOutput]

    def terminate_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TerminateInstancesOutput] |
      (?Types::TerminateInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TerminateInstancesOutput] |
      (
        instance_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::TerminateInstancesOutput]

    def unassign_ipv6_addresses: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UnassignIpv6AddressesOutput] |
      (?Types::UnassignIpv6AddressesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UnassignIpv6AddressesOutput] |
      (
        ?ipv6_addresses: ::Array[::String],
        ?ipv6_prefixes: ::Array[::String],
        network_interface_id: ::String
      ) -> Hearth::Output[Types::UnassignIpv6AddressesOutput]

    def unassign_private_ip_addresses: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UnassignPrivateIpAddressesOutput] |
      (?Types::UnassignPrivateIpAddressesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UnassignPrivateIpAddressesOutput] |
      (
        network_interface_id: ::String,
        ?private_ip_addresses: ::Array[::String],
        ?ipv4_prefixes: ::Array[::String]
      ) -> Hearth::Output[Types::UnassignPrivateIpAddressesOutput]

    def unassign_private_nat_gateway_address: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UnassignPrivateNatGatewayAddressOutput] |
      (?Types::UnassignPrivateNatGatewayAddressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UnassignPrivateNatGatewayAddressOutput] |
      (
        nat_gateway_id: ::String,
        private_ip_addresses: ::Array[::String],
        ?max_drain_duration_seconds: ::Integer,
        ?dry_run: bool
      ) -> Hearth::Output[Types::UnassignPrivateNatGatewayAddressOutput]

    def unlock_snapshot: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UnlockSnapshotOutput] |
      (?Types::UnlockSnapshotInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UnlockSnapshotOutput] |
      (
        snapshot_id: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::UnlockSnapshotOutput]

    def unmonitor_instances: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UnmonitorInstancesOutput] |
      (?Types::UnmonitorInstancesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UnmonitorInstancesOutput] |
      (
        instance_ids: ::Array[::String],
        ?dry_run: bool
      ) -> Hearth::Output[Types::UnmonitorInstancesOutput]

    def update_security_group_rule_descriptions_egress: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UpdateSecurityGroupRuleDescriptionsEgressOutput] |
      (?Types::UpdateSecurityGroupRuleDescriptionsEgressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UpdateSecurityGroupRuleDescriptionsEgressOutput] |
      (
        ?dry_run: bool,
        ?group_id: ::String,
        ?group_name: ::String,
        ?ip_permissions: ::Array[{
          from_port: ::Integer,
          ip_protocol: ::String,
          ip_ranges: ::Array[Types::IpRange],
          ipv6_ranges: ::Array[Types::Ipv6Range],
          prefix_list_ids: ::Array[Types::PrefixListId],
          to_port: ::Integer,
          user_id_group_pairs: ::Array[Types::UserIdGroupPair]
        }],
        ?security_group_rule_descriptions: ::Array[{
          security_group_rule_id: ::String,
          description: ::String
        }]
      ) -> Hearth::Output[Types::UpdateSecurityGroupRuleDescriptionsEgressOutput]

    def update_security_group_rule_descriptions_ingress: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UpdateSecurityGroupRuleDescriptionsIngressOutput] |
      (?Types::UpdateSecurityGroupRuleDescriptionsIngressInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UpdateSecurityGroupRuleDescriptionsIngressOutput] |
      (
        ?dry_run: bool,
        ?group_id: ::String,
        ?group_name: ::String,
        ?ip_permissions: ::Array[{
          from_port: ::Integer,
          ip_protocol: ::String,
          ip_ranges: ::Array[Types::IpRange],
          ipv6_ranges: ::Array[Types::Ipv6Range],
          prefix_list_ids: ::Array[Types::PrefixListId],
          to_port: ::Integer,
          user_id_group_pairs: ::Array[Types::UserIdGroupPair]
        }],
        ?security_group_rule_descriptions: ::Array[{
          security_group_rule_id: ::String,
          description: ::String
        }]
      ) -> Hearth::Output[Types::UpdateSecurityGroupRuleDescriptionsIngressOutput]

    def withdraw_byoip_cidr: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::WithdrawByoipCidrOutput] |
      (?Types::WithdrawByoipCidrInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::WithdrawByoipCidrOutput] |
      (
        cidr: ::String,
        ?dry_run: bool
      ) -> Hearth::Output[Types::WithdrawByoipCidrOutput]

  end
end
