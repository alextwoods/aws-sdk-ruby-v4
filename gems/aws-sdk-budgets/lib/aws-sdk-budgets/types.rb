# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/awslabs/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

module AWS::SDK::Budgets
  module Types

    # <p>You are not authorized to use this operation with the given parameters.</p>
    #
    # @!attribute message
    #   <p>The error message the exception carries.</p>
    #
    #   @return [String]
    #
    AccessDeniedException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>A budget action resource. </p>
    #
    # @!attribute action_id
    #   <p>A system-generated universally unique identifier (UUID) for the action. </p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    # @!attribute notification_type
    #   <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
    #
    #   Enum, one of: ["ACTUAL", "FORECASTED"]
    #
    #   @return [String]
    #
    # @!attribute action_type
    #   <p>The type of action. This defines the type of tasks that can be carried out by this action.
    #   			This field also determines the format for definition. </p>
    #
    #   Enum, one of: ["APPLY_IAM_POLICY", "APPLY_SCP_POLICY", "RUN_SSM_DOCUMENTS"]
    #
    #   @return [String]
    #
    # @!attribute action_threshold
    #   <p>The trigger threshold of the action. </p>
    #
    #   @return [ActionThreshold]
    #
    # @!attribute definition
    #   <p>Where you specify all of the type-specific parameters. </p>
    #
    #   @return [Definition]
    #
    # @!attribute execution_role_arn
    #   <p>The role passed for action execution and reversion. Roles and actions must be in the same
    #   			account. </p>
    #
    #   @return [String]
    #
    # @!attribute approval_model
    #   <p>This specifies if the action needs manual or automatic approval. </p>
    #
    #   Enum, one of: ["AUTOMATIC", "MANUAL"]
    #
    #   @return [String]
    #
    # @!attribute status
    #   <p>The status of the action. </p>
    #
    #   Enum, one of: ["STANDBY", "PENDING", "EXECUTION_IN_PROGRESS", "EXECUTION_SUCCESS", "EXECUTION_FAILURE", "REVERSE_IN_PROGRESS", "REVERSE_SUCCESS", "REVERSE_FAILURE", "RESET_IN_PROGRESS", "RESET_FAILURE"]
    #
    #   @return [String]
    #
    # @!attribute subscribers
    #   <p> A list of subscribers.</p>
    #
    #   @return [Array<Subscriber>]
    #
    Action = ::Struct.new(
      :action_id,
      :budget_name,
      :notification_type,
      :action_type,
      :action_threshold,
      :definition,
      :execution_role_arn,
      :approval_model,
      :status,
      :subscribers,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The historical records for a budget action. </p>
    #
    # @!attribute timestamp
    #   <p> A generic time stamp. In Java, it's transformed to a <code>Date</code> object.</p>
    #
    #   @return [Time]
    #
    # @!attribute status
    #   <p>The status of action at the time of the event. </p>
    #
    #   Enum, one of: ["STANDBY", "PENDING", "EXECUTION_IN_PROGRESS", "EXECUTION_SUCCESS", "EXECUTION_FAILURE", "REVERSE_IN_PROGRESS", "REVERSE_SUCCESS", "REVERSE_FAILURE", "RESET_IN_PROGRESS", "RESET_FAILURE"]
    #
    #   @return [String]
    #
    # @!attribute event_type
    #   <p>This distinguishes between whether the events are triggered by the user or are generated by
    #   			the system. </p>
    #
    #   Enum, one of: ["SYSTEM", "CREATE_ACTION", "DELETE_ACTION", "UPDATE_ACTION", "EXECUTE_ACTION"]
    #
    #   @return [String]
    #
    # @!attribute action_history_details
    #   <p>The description of the details for the event. </p>
    #
    #   @return [ActionHistoryDetails]
    #
    ActionHistory = ::Struct.new(
      :timestamp,
      :status,
      :event_type,
      :action_history_details,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The description of the details for the event. </p>
    #
    # @!attribute message
    #   <p> A generic string.</p>
    #
    #   @return [String]
    #
    # @!attribute action
    #   <p>The budget action resource. </p>
    #
    #   @return [Action]
    #
    ActionHistoryDetails = ::Struct.new(
      :message,
      :action,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # Includes enum constants for ActionStatus
    #
    module ActionStatus
      # No documentation available.
      #
      Standby = "STANDBY"

      # No documentation available.
      #
      Pending = "PENDING"

      # No documentation available.
      #
      Execution_In_Progress = "EXECUTION_IN_PROGRESS"

      # No documentation available.
      #
      Execution_Success = "EXECUTION_SUCCESS"

      # No documentation available.
      #
      Execution_Failure = "EXECUTION_FAILURE"

      # No documentation available.
      #
      Reverse_In_Progress = "REVERSE_IN_PROGRESS"

      # No documentation available.
      #
      Reverse_Success = "REVERSE_SUCCESS"

      # No documentation available.
      #
      Reverse_Failure = "REVERSE_FAILURE"

      # No documentation available.
      #
      Reset_In_Progress = "RESET_IN_PROGRESS"

      # No documentation available.
      #
      Reset_Failure = "RESET_FAILURE"
    end

    # Includes enum constants for ActionSubType
    #
    module ActionSubType
      # No documentation available.
      #
      STOP_EC2 = "STOP_EC2_INSTANCES"

      # No documentation available.
      #
      STOP_RDS = "STOP_RDS_INSTANCES"
    end

    # <p>The trigger threshold of the action. </p>
    #
    # @!attribute action_threshold_value
    #   <p> The threshold of a notification.</p>
    #
    #   @return [Float]
    #
    # @!attribute action_threshold_type
    #   <p> The type of threshold for a notification.</p>
    #
    #   Enum, one of: ["PERCENTAGE", "ABSOLUTE_VALUE"]
    #
    #   @return [String]
    #
    ActionThreshold = ::Struct.new(
      :action_threshold_value,
      :action_threshold_type,
      keyword_init: true
    ) do
      include Hearth::Structure

      def initialize(*)
        super
        self.action_threshold_value ||= 0
      end
    end

    # Includes enum constants for ActionType
    #
    module ActionType
      # No documentation available.
      #
      IAM = "APPLY_IAM_POLICY"

      # No documentation available.
      #
      SCP = "APPLY_SCP_POLICY"

      # No documentation available.
      #
      SSM = "RUN_SSM_DOCUMENTS"
    end

    # Includes enum constants for ApprovalModel
    #
    module ApprovalModel
      # No documentation available.
      #
      AUTO = "AUTOMATIC"

      # No documentation available.
      #
      MANUAL = "MANUAL"
    end

    # <p>The parameters that determine the budget amount for an auto-adjusting budget.</p>
    #
    # @!attribute auto_adjust_type
    #   <p>The string that defines whether your budget auto-adjusts based on historical or forecasted data.</p>
    #
    #   Enum, one of: ["HISTORICAL", "FORECAST"]
    #
    #   @return [String]
    #
    # @!attribute historical_options
    #   <p>The parameters that define or describe the historical data that your auto-adjusting budget is based on.</p>
    #
    #   @return [HistoricalOptions]
    #
    # @!attribute last_auto_adjust_time
    #   <p>The last time that your budget was auto-adjusted.</p>
    #
    #   @return [Time]
    #
    AutoAdjustData = ::Struct.new(
      :auto_adjust_type,
      :historical_options,
      :last_auto_adjust_time,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # Includes enum constants for AutoAdjustType
    #
    module AutoAdjustType
      # No documentation available.
      #
      HISTORICAL = "HISTORICAL"

      # No documentation available.
      #
      FORECAST = "FORECAST"
    end

    # <p>Represents the output of the <code>CreateBudget</code> operation. The content consists of the detailed metadata and data file information, and the current status of the <code>budget</code> object.</p>
    # 		       <p>This is the Amazon Resource Name (ARN) pattern for a budget: </p>
    # 		       <p>
    #             <code>arn:aws:budgets::AccountId:budget/budgetName</code>
    #          </p>
    #
    # @!attribute budget_name
    #   <p>The name of a budget. The name must be unique within an account. The <code>:</code> and <code>\</code> characters aren't allowed in <code>BudgetName</code>.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_limit
    #   <p>The total amount of cost, usage, RI utilization, RI coverage, Savings Plans utilization, or
    #   			Savings Plans coverage that you want to track with your budget.</p>
    #   		       <p>
    #               <code>BudgetLimit</code> is required for cost or usage budgets, but optional for RI or
    #   			Savings Plans utilization or coverage budgets. RI and Savings Plans utilization or
    #   			coverage budgets default to <code>100</code>. This is the only valid value for RI or
    #   			Savings Plans utilization or coverage budgets. You can't use <code>BudgetLimit</code>
    #   			with <code>PlannedBudgetLimits</code> for <code>CreateBudget</code> and
    #   				<code>UpdateBudget</code> actions. </p>
    #
    #   @return [Spend]
    #
    # @!attribute planned_budget_limits
    #   <p>A map containing multiple <code>BudgetLimit</code>, including current or future limits.</p>
    #   		       <p>
    #               <code>PlannedBudgetLimits</code> is available for cost or usage budget and supports both
    #   			monthly and quarterly <code>TimeUnit</code>. </p>
    #   		       <p>For monthly budgets, provide 12 months of <code>PlannedBudgetLimits</code> values. This must start from the current month and include the next 11 months. The <code>key</code> is the start of the month, <code>UTC</code> in epoch seconds. </p>
    #   		       <p>For quarterly budgets, provide four quarters of <code>PlannedBudgetLimits</code> value
    #   			entries in standard calendar quarter increments. This must start from the current
    #   			quarter and include the next three quarters. The <code>key</code> is the start of the
    #   			quarter, <code>UTC</code> in epoch seconds. </p>
    #   		       <p>If the planned budget expires before 12 months for monthly or four quarters for quarterly,
    #   			provide the <code>PlannedBudgetLimits</code> values only for the remaining
    #   			periods.</p>
    #   		       <p>If the budget begins at a date in the future, provide <code>PlannedBudgetLimits</code> values from the start date of the budget. </p>
    #   		       <p>After all of the <code>BudgetLimit</code> values in <code>PlannedBudgetLimits</code> are used, the budget continues to use the last limit as the <code>BudgetLimit</code>. At that point, the planned budget provides the same experience as a fixed budget. </p>
    #   		       <p>
    #               <code>DescribeBudget</code> and <code>DescribeBudgets</code> response along with
    #   				<code>PlannedBudgetLimits</code> also contain <code>BudgetLimit</code> representing
    #   			the current month or quarter limit present in <code>PlannedBudgetLimits</code>. This
    #   			only applies to budgets that are created with <code>PlannedBudgetLimits</code>. Budgets
    #   			that are created without <code>PlannedBudgetLimits</code> only contain
    #   				<code>BudgetLimit</code>. They don't contain
    #   			<code>PlannedBudgetLimits</code>.</p>
    #
    #   @return [Hash<String, Spend>]
    #
    # @!attribute cost_filters
    #   <p>The cost filters, such as <code>Region</code>, <code>Service</code>, <code>member account</code>, <code>Tag</code>, or <code>Cost Category</code>, that are applied to a budget.</p>
    #   		       <p>Amazon Web Services Budgets supports the following services as a <code>Service</code> filter for RI budgets:</p>
    #   		       <ul>
    #               <li>
    #   				           <p>Amazon EC2</p>
    #   			         </li>
    #               <li>
    #   				           <p>Amazon Redshift</p>
    #   			         </li>
    #               <li>
    #   				           <p>Amazon Relational Database Service</p>
    #   			         </li>
    #               <li>
    #   				           <p>Amazon ElastiCache</p>
    #   			         </li>
    #               <li>
    #   				           <p>Amazon OpenSearch Service</p>
    #   			         </li>
    #            </ul>
    #
    #   @return [Hash<String, Array<String>>]
    #
    # @!attribute cost_types
    #   <p>The types of costs that are included in this <code>COST</code> budget.</p>
    #   		       <p>
    #               <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>, <code>SAVINGS_PLANS_UTILIZATION</code>, and <code>SAVINGS_PLANS_COVERAGE</code> budgets do not have <code>CostTypes</code>.</p>
    #
    #   @return [CostTypes]
    #
    # @!attribute time_unit
    #   <p>The length of time until a budget resets the actual and forecasted spend.</p>
    #
    #   Enum, one of: ["DAILY", "MONTHLY", "QUARTERLY", "ANNUALLY"]
    #
    #   @return [String]
    #
    # @!attribute time_period
    #   <p>The period of time that's covered by a budget. You setthe start date and end date. The start
    #   			date must come before the end date. The end date must come before <code>06/15/87 00:00
    #   				UTC</code>. </p>
    #   		       <p>If you create your budget and don't specify a start date, Amazon Web Services defaults to the
    #   			start of your chosen time period (DAILY, MONTHLY, QUARTERLY, or ANNUALLY). For example,
    #   			if you created your budget on January 24, 2018, chose <code>DAILY</code>, and didn't set
    #   			a start date, Amazon Web Services set your start date to <code>01/24/18 00:00 UTC</code>.
    #   			If you chose <code>MONTHLY</code>, Amazon Web Services set your start date to
    #   				<code>01/01/18 00:00 UTC</code>. If you didn't specify an end date, Amazon Web Services set your end date to <code>06/15/87 00:00 UTC</code>. The defaults are the same for
    #   			the Billing and Cost Management console and the API. </p>
    #   		       <p>You can change either date with the <code>UpdateBudget</code> operation.</p>
    #   		       <p>After the end date, Amazon Web Services deletes the budget and all the associated
    #   			notifications and subscribers.</p>
    #
    #   @return [TimePeriod]
    #
    # @!attribute calculated_spend
    #   <p>The actual and forecasted cost or usage that the budget tracks.</p>
    #
    #   @return [CalculatedSpend]
    #
    # @!attribute budget_type
    #   <p>Specifies whether this budget tracks costs, usage, RI utilization, RI coverage, Savings
    #   			Plans utilization, or Savings Plans coverage.</p>
    #
    #   Enum, one of: ["USAGE", "COST", "RI_UTILIZATION", "RI_COVERAGE", "SAVINGS_PLANS_UTILIZATION", "SAVINGS_PLANS_COVERAGE"]
    #
    #   @return [String]
    #
    # @!attribute last_updated_time
    #   <p>The last time that you updated this budget.</p>
    #
    #   @return [Time]
    #
    # @!attribute auto_adjust_data
    #   <p>The parameters that determine the budget amount for an auto-adjusting budget.</p>
    #
    #   @return [AutoAdjustData]
    #
    Budget = ::Struct.new(
      :budget_name,
      :budget_limit,
      :planned_budget_limits,
      :cost_filters,
      :cost_types,
      :time_unit,
      :time_period,
      :calculated_spend,
      :budget_type,
      :last_updated_time,
      :auto_adjust_data,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>
    #          The budget name and associated notifications for an account.
    #       </p>
    #
    # @!attribute notifications
    #   <p> A list of notifications.</p>
    #
    #   @return [Array<Notification>]
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    BudgetNotificationsForAccount = ::Struct.new(
      :notifications,
      :budget_name,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>A history of the state of a budget at the end of the budget's specified time period.</p>
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_type
    #   <p> The type of a budget. It must be one of the following types: </p>
    #   		       <p>
    #               <code>COST</code>, <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>, <code>SAVINGS_PLANS_UTILIZATION</code>, or <code>SAVINGS_PLANS_COVERAGE</code>.</p>
    #
    #   Enum, one of: ["USAGE", "COST", "RI_UTILIZATION", "RI_COVERAGE", "SAVINGS_PLANS_UTILIZATION", "SAVINGS_PLANS_COVERAGE"]
    #
    #   @return [String]
    #
    # @!attribute cost_filters
    #   <p>The history of the cost filters for a budget during the specified time period.</p>
    #
    #   @return [Hash<String, Array<String>>]
    #
    # @!attribute cost_types
    #   <p>The history of the cost types for a budget during the specified time period.</p>
    #
    #   @return [CostTypes]
    #
    # @!attribute time_unit
    #   <p> The time unit of the budget, such as MONTHLY or QUARTERLY.</p>
    #
    #   Enum, one of: ["DAILY", "MONTHLY", "QUARTERLY", "ANNUALLY"]
    #
    #   @return [String]
    #
    # @!attribute budgeted_and_actual_amounts_list
    #   <p>A list of amounts of cost or usage that you created budgets for, which are compared to your
    #   			actual costs or usage.</p>
    #
    #   @return [Array<BudgetedAndActualAmounts>]
    #
    BudgetPerformanceHistory = ::Struct.new(
      :budget_name,
      :budget_type,
      :cost_filters,
      :cost_types,
      :time_unit,
      :budgeted_and_actual_amounts_list,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # Includes enum constants for BudgetType
    #
    module BudgetType
      # No documentation available.
      #
      Usage = "USAGE"

      # No documentation available.
      #
      Cost = "COST"

      # No documentation available.
      #
      RIUtilization = "RI_UTILIZATION"

      # No documentation available.
      #
      RICoverage = "RI_COVERAGE"

      # No documentation available.
      #
      SPUtilization = "SAVINGS_PLANS_UTILIZATION"

      # No documentation available.
      #
      SPCoverage = "SAVINGS_PLANS_COVERAGE"
    end

    # <p>The amount of cost or usage that you created the budget for, compared to your actual costs or usage.</p>
    #
    # @!attribute budgeted_amount
    #   <p>The amount of cost or usage that you created the budget for.</p>
    #
    #   @return [Spend]
    #
    # @!attribute actual_amount
    #   <p>Your actual costs or usage for a budget period.</p>
    #
    #   @return [Spend]
    #
    # @!attribute time_period
    #   <p>The time period that's covered by this budget comparison.</p>
    #
    #   @return [TimePeriod]
    #
    BudgetedAndActualAmounts = ::Struct.new(
      :budgeted_amount,
      :actual_amount,
      :time_period,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The spend objects that are associated with this budget. The <code>actualSpend</code> tracks
    # 			how much you've used, cost, usage, RI units, or Savings Plans units and the
    # 				<code>forecastedSpend</code> tracks how much that you're predicted to spend based on
    # 			your historical usage profile.</p>
    # 		       <p>For example, if it's the 20th of the month and you have spent <code>50</code> dollars on
    # 			Amazon EC2, your <code>actualSpend</code> is <code>50 USD</code>, and your
    # 				<code>forecastedSpend</code> is <code>75 USD</code>.</p>
    #
    # @!attribute actual_spend
    #   <p>The amount of cost, usage, RI units, or Savings Plans units that you used.</p>
    #
    #   @return [Spend]
    #
    # @!attribute forecasted_spend
    #   <p>The amount of cost, usage, RI units, or Savings Plans units that you're forecasted to
    #   			use.</p>
    #
    #   @return [Spend]
    #
    CalculatedSpend = ::Struct.new(
      :actual_spend,
      :forecasted_spend,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # Includes enum constants for ComparisonOperator
    #
    module ComparisonOperator
      # No documentation available.
      #
      GREATER_THAN = "GREATER_THAN"

      # No documentation available.
      #
      LESS_THAN = "LESS_THAN"

      # No documentation available.
      #
      EQUAL_TO = "EQUAL_TO"
    end

    # <p>The types of cost that are included in a <code>COST</code> budget, such as tax and subscriptions.</p>
    # 		       <p>
    #             <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>,
    # 				<code>SAVINGS_PLANS_UTILIZATION</code>, and <code>SAVINGS_PLANS_COVERAGE</code>
    # 			budgets don't have <code>CostTypes</code>.</p>
    #
    # @!attribute include_tax
    #   <p>Specifies whether a budget includes taxes.</p>
    #   		       <p>The default value is <code>true</code>.</p>
    #
    #   @return [Boolean]
    #
    # @!attribute include_subscription
    #   <p>Specifies whether a budget includes subscriptions.</p>
    #   		       <p>The default value is <code>true</code>.</p>
    #
    #   @return [Boolean]
    #
    # @!attribute use_blended
    #   <p>Specifies whether a budget uses a blended rate.</p>
    #   		       <p>The default value is <code>false</code>.</p>
    #
    #   @return [Boolean]
    #
    # @!attribute include_refund
    #   <p>Specifies whether a budget includes refunds.</p>
    #   		       <p>The default value is <code>true</code>.</p>
    #
    #   @return [Boolean]
    #
    # @!attribute include_credit
    #   <p>Specifies whether a budget includes credits.</p>
    #   		       <p>The default value is <code>true</code>.</p>
    #
    #   @return [Boolean]
    #
    # @!attribute include_upfront
    #   <p>Specifies whether a budget includes upfront RI costs.</p>
    #   		       <p>The default value is <code>true</code>.</p>
    #
    #   @return [Boolean]
    #
    # @!attribute include_recurring
    #   <p>Specifies whether a budget includes recurring fees such as monthly RI fees.</p>
    #   		       <p>The default value is <code>true</code>.</p>
    #
    #   @return [Boolean]
    #
    # @!attribute include_other_subscription
    #   <p>Specifies whether a budget includes non-RI subscription costs.</p>
    #   		       <p>The default value is <code>true</code>.</p>
    #
    #   @return [Boolean]
    #
    # @!attribute include_support
    #   <p>Specifies whether a budget includes support subscription fees.</p>
    #   		       <p>The default value is <code>true</code>.</p>
    #
    #   @return [Boolean]
    #
    # @!attribute include_discount
    #   <p>Specifies whether a budget includes discounts.</p>
    #   		       <p>The default value is <code>true</code>.</p>
    #
    #   @return [Boolean]
    #
    # @!attribute use_amortized
    #   <p>Specifies whether a budget uses the amortized rate.</p>
    #   		       <p>The default value is <code>false</code>.</p>
    #
    #   @return [Boolean]
    #
    CostTypes = ::Struct.new(
      :include_tax,
      :include_subscription,
      :use_blended,
      :include_refund,
      :include_credit,
      :include_upfront,
      :include_recurring,
      :include_other_subscription,
      :include_support,
      :include_discount,
      :use_amortized,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute account_id
    #   <p>The account ID of the user. It's a 12-digit number.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    # @!attribute notification_type
    #   <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
    #
    #   Enum, one of: ["ACTUAL", "FORECASTED"]
    #
    #   @return [String]
    #
    # @!attribute action_type
    #   <p>
    #            The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition.
    #         </p>
    #
    #   Enum, one of: ["APPLY_IAM_POLICY", "APPLY_SCP_POLICY", "RUN_SSM_DOCUMENTS"]
    #
    #   @return [String]
    #
    # @!attribute action_threshold
    #   <p>The trigger threshold of the action. </p>
    #
    #   @return [ActionThreshold]
    #
    # @!attribute definition
    #   <p>Specifies all of the type-specific parameters. </p>
    #
    #   @return [Definition]
    #
    # @!attribute execution_role_arn
    #   <p>
    #            The role passed for action execution and reversion. Roles and actions must be in the same account.
    #         </p>
    #
    #   @return [String]
    #
    # @!attribute approval_model
    #   <p>
    #            This specifies if the action needs manual or automatic approval.
    #         </p>
    #
    #   Enum, one of: ["AUTOMATIC", "MANUAL"]
    #
    #   @return [String]
    #
    # @!attribute subscribers
    #   <p> A list of subscribers.</p>
    #
    #   @return [Array<Subscriber>]
    #
    CreateBudgetActionInput = ::Struct.new(
      :account_id,
      :budget_name,
      :notification_type,
      :action_type,
      :action_threshold,
      :definition,
      :execution_role_arn,
      :approval_model,
      :subscribers,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute account_id
    #   <p>The account ID of the user. It's a 12-digit number.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    # @!attribute action_id
    #   <p>
    #            A system-generated universally unique identifier (UUID) for the action.
    #         </p>
    #
    #   @return [String]
    #
    CreateBudgetActionOutput = ::Struct.new(
      :account_id,
      :budget_name,
      :action_id,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Request of CreateBudget </p>
    #
    # @!attribute account_id
    #   <p>The <code>accountId</code> that is associated with the budget.</p>
    #
    #   @return [String]
    #
    # @!attribute budget
    #   <p>The budget object that you want to create.</p>
    #
    #   @return [Budget]
    #
    # @!attribute notifications_with_subscribers
    #   <p>A notification that you want to associate with a budget. A budget can have up to five notifications, and each notification can have one SNS subscriber and up to 10 email subscribers. If you include notifications and subscribers in your <code>CreateBudget</code> call, Amazon Web Services creates the notifications and subscribers for you.</p>
    #
    #   @return [Array<NotificationWithSubscribers>]
    #
    CreateBudgetInput = ::Struct.new(
      :account_id,
      :budget,
      :notifications_with_subscribers,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Response of CreateBudget </p>
    #
    CreateBudgetOutput = ::Struct.new(
      nil,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Request of CreateNotification </p>
    #
    # @!attribute account_id
    #   <p>The <code>accountId</code> that is associated with the budget that you want to create a notification for.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p>The name of the budget that you want Amazon Web Services to notify you about. Budget names must be unique within an account.</p>
    #
    #   @return [String]
    #
    # @!attribute notification
    #   <p>The notification that you want to create.</p>
    #
    #   @return [Notification]
    #
    # @!attribute subscribers
    #   <p>A list of subscribers that you want to associate with the notification. Each notification can have one SNS subscriber and up to 10 email subscribers.</p>
    #
    #   @return [Array<Subscriber>]
    #
    CreateNotificationInput = ::Struct.new(
      :account_id,
      :budget_name,
      :notification,
      :subscribers,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Response of CreateNotification </p>
    #
    CreateNotificationOutput = ::Struct.new(
      nil,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Request of CreateSubscriber </p>
    #
    # @!attribute account_id
    #   <p>The <code>accountId</code> that is associated with the budget that you want to create a subscriber for.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p>The name of the budget that you want to subscribe to. Budget names must be unique within an account.</p>
    #
    #   @return [String]
    #
    # @!attribute notification
    #   <p>The notification that you want to create a subscriber for.</p>
    #
    #   @return [Notification]
    #
    # @!attribute subscriber
    #   <p>The subscriber that you want to associate with a budget notification.</p>
    #
    #   @return [Subscriber]
    #
    CreateSubscriberInput = ::Struct.new(
      :account_id,
      :budget_name,
      :notification,
      :subscriber,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Response of CreateSubscriber </p>
    #
    CreateSubscriberOutput = ::Struct.new(
      nil,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>You've exceeded the notification or subscriber limit.</p>
    #
    # @!attribute message
    #   <p>The error message the exception carries.</p>
    #
    #   @return [String]
    #
    CreationLimitExceededException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>Specifies all of the type-specific parameters. </p>
    #
    # @!attribute iam_action_definition
    #   <p>The Identity and Access Management (IAM) action definition details. </p>
    #
    #   @return [IamActionDefinition]
    #
    # @!attribute scp_action_definition
    #   <p>The service control policies (SCPs) action definition details. </p>
    #
    #   @return [ScpActionDefinition]
    #
    # @!attribute ssm_action_definition
    #   <p>The Amazon Web Services Systems Manager (SSM) action definition details. </p>
    #
    #   @return [SsmActionDefinition]
    #
    Definition = ::Struct.new(
      :iam_action_definition,
      :scp_action_definition,
      :ssm_action_definition,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute account_id
    #   <p>The account ID of the user. It's a 12-digit number.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    # @!attribute action_id
    #   <p>
    #            A system-generated universally unique identifier (UUID) for the action.
    #         </p>
    #
    #   @return [String]
    #
    DeleteBudgetActionInput = ::Struct.new(
      :account_id,
      :budget_name,
      :action_id,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute account_id
    #   <p>The account ID of the user. It's a 12-digit number.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    # @!attribute action
    #   <p>A budget action resource. </p>
    #
    #   @return [Action]
    #
    DeleteBudgetActionOutput = ::Struct.new(
      :account_id,
      :budget_name,
      :action,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Request of DeleteBudget </p>
    #
    # @!attribute account_id
    #   <p>The <code>accountId</code> that is associated with the budget that you want to delete.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p>The name of the budget that you want to delete.</p>
    #
    #   @return [String]
    #
    DeleteBudgetInput = ::Struct.new(
      :account_id,
      :budget_name,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Response of DeleteBudget </p>
    #
    DeleteBudgetOutput = ::Struct.new(
      nil,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Request of DeleteNotification </p>
    #
    # @!attribute account_id
    #   <p>The <code>accountId</code> that is associated with the budget whose notification you want to delete.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p>The name of the budget whose notification you want to delete.</p>
    #
    #   @return [String]
    #
    # @!attribute notification
    #   <p>The notification that you want to delete.</p>
    #
    #   @return [Notification]
    #
    DeleteNotificationInput = ::Struct.new(
      :account_id,
      :budget_name,
      :notification,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Response of DeleteNotification </p>
    #
    DeleteNotificationOutput = ::Struct.new(
      nil,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Request of DeleteSubscriber </p>
    #
    # @!attribute account_id
    #   <p>The <code>accountId</code> that is associated with the budget whose subscriber you want to delete.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p>The name of the budget whose subscriber you want to delete.</p>
    #
    #   @return [String]
    #
    # @!attribute notification
    #   <p>The notification whose subscriber you want to delete.</p>
    #
    #   @return [Notification]
    #
    # @!attribute subscriber
    #   <p>The subscriber that you want to delete.</p>
    #
    #   @return [Subscriber]
    #
    DeleteSubscriberInput = ::Struct.new(
      :account_id,
      :budget_name,
      :notification,
      :subscriber,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Response of DeleteSubscriber </p>
    #
    DeleteSubscriberOutput = ::Struct.new(
      nil,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute account_id
    #   <p>The account ID of the user. It's a 12-digit number.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    # @!attribute action_id
    #   <p>
    #            A system-generated universally unique identifier (UUID) for the action.
    #         </p>
    #
    #   @return [String]
    #
    # @!attribute time_period
    #   <p>The period of time that's covered by a budget. The period has a start date and an end date.
    #   			The start date must come before the end date. There are no restrictions on the end date. </p>
    #
    #   @return [TimePeriod]
    #
    # @!attribute max_results
    #   <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    #
    #   @return [Integer]
    #
    # @!attribute next_token
    #   <p> A generic string.</p>
    #
    #   @return [String]
    #
    DescribeBudgetActionHistoriesInput = ::Struct.new(
      :account_id,
      :budget_name,
      :action_id,
      :time_period,
      :max_results,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute action_histories
    #   <p>
    #            The historical record of the budget action resource.
    #         </p>
    #
    #   @return [Array<ActionHistory>]
    #
    # @!attribute next_token
    #   <p> A generic string.</p>
    #
    #   @return [String]
    #
    DescribeBudgetActionHistoriesOutput = ::Struct.new(
      :action_histories,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute account_id
    #   <p>The account ID of the user. It's a 12-digit number.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    # @!attribute action_id
    #   <p>
    #            A system-generated universally unique identifier (UUID) for the action.
    #         </p>
    #
    #   @return [String]
    #
    DescribeBudgetActionInput = ::Struct.new(
      :account_id,
      :budget_name,
      :action_id,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute account_id
    #   <p>The account ID of the user. It's a 12-digit number.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    # @!attribute action
    #   <p>
    #            A budget action resource.
    #         </p>
    #
    #   @return [Action]
    #
    DescribeBudgetActionOutput = ::Struct.new(
      :account_id,
      :budget_name,
      :action,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute account_id
    #   <p>The account ID of the user. It's a 12-digit number.</p>
    #
    #   @return [String]
    #
    # @!attribute max_results
    #   <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    #
    #   @return [Integer]
    #
    # @!attribute next_token
    #   <p> A generic string.</p>
    #
    #   @return [String]
    #
    DescribeBudgetActionsForAccountInput = ::Struct.new(
      :account_id,
      :max_results,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute actions
    #   <p>
    #            A list of the budget action resources information.
    #         </p>
    #
    #   @return [Array<Action>]
    #
    # @!attribute next_token
    #   <p> A generic string.</p>
    #
    #   @return [String]
    #
    DescribeBudgetActionsForAccountOutput = ::Struct.new(
      :actions,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute account_id
    #   <p>The account ID of the user. It's a 12-digit number.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    # @!attribute max_results
    #   <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    #
    #   @return [Integer]
    #
    # @!attribute next_token
    #   <p> A generic string.</p>
    #
    #   @return [String]
    #
    DescribeBudgetActionsForBudgetInput = ::Struct.new(
      :account_id,
      :budget_name,
      :max_results,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute actions
    #   <p>
    #            A list of the budget action resources information.
    #         </p>
    #
    #   @return [Array<Action>]
    #
    # @!attribute next_token
    #   <p> A generic string.</p>
    #
    #   @return [String]
    #
    DescribeBudgetActionsForBudgetOutput = ::Struct.new(
      :actions,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Request of DescribeBudget </p>
    #
    # @!attribute account_id
    #   <p>The <code>accountId</code> that is associated with the budget that you want a description of.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p>The name of the budget that you want a description of.</p>
    #
    #   @return [String]
    #
    DescribeBudgetInput = ::Struct.new(
      :account_id,
      :budget_name,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute account_id
    #   <p>The account ID of the user. It's a 12-digit number.</p>
    #
    #   @return [String]
    #
    # @!attribute max_results
    #   <p>
    #   			An integer that shows how many budget name entries a paginated response contains.
    #   		</p>
    #
    #   @return [Integer]
    #
    # @!attribute next_token
    #   <p> A generic string.</p>
    #
    #   @return [String]
    #
    DescribeBudgetNotificationsForAccountInput = ::Struct.new(
      :account_id,
      :max_results,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute budget_notifications_for_account
    #   <p>
    #   			A list of budget names and associated notifications for an account.
    #   		</p>
    #
    #   @return [Array<BudgetNotificationsForAccount>]
    #
    # @!attribute next_token
    #   <p> A generic string.</p>
    #
    #   @return [String]
    #
    DescribeBudgetNotificationsForAccountOutput = ::Struct.new(
      :budget_notifications_for_account,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Response of DescribeBudget </p>
    #
    # @!attribute budget
    #   <p>The description of the budget.</p>
    #
    #   @return [Budget]
    #
    DescribeBudgetOutput = ::Struct.new(
      :budget,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute account_id
    #   <p>The account ID of the user. It's a 12-digit number.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    # @!attribute time_period
    #   <p>Retrieves how often the budget went into an <code>ALARM</code> state for the specified time period.</p>
    #
    #   @return [TimePeriod]
    #
    # @!attribute max_results
    #   <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    #
    #   @return [Integer]
    #
    # @!attribute next_token
    #   <p> A generic string.</p>
    #
    #   @return [String]
    #
    DescribeBudgetPerformanceHistoryInput = ::Struct.new(
      :account_id,
      :budget_name,
      :time_period,
      :max_results,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute budget_performance_history
    #   <p>The history of how often the budget has gone into an <code>ALARM</code> state.</p>
    #            <p>For <code>DAILY</code> budgets, the history saves the state of the budget for the last 60 days. For <code>MONTHLY</code> budgets, the history saves the state of the budget for the current month plus the last 12 months. For <code>QUARTERLY</code> budgets, the history saves the state of the budget for the last four quarters.</p>
    #
    #   @return [BudgetPerformanceHistory]
    #
    # @!attribute next_token
    #   <p> A generic string.</p>
    #
    #   @return [String]
    #
    DescribeBudgetPerformanceHistoryOutput = ::Struct.new(
      :budget_performance_history,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Request of DescribeBudgets </p>
    #
    # @!attribute account_id
    #   <p>The <code>accountId</code> that is associated with the budgets that you want descriptions of.</p>
    #
    #   @return [String]
    #
    # @!attribute max_results
    #   <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    #
    #   @return [Integer]
    #
    # @!attribute next_token
    #   <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    #
    #   @return [String]
    #
    DescribeBudgetsInput = ::Struct.new(
      :account_id,
      :max_results,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Response of DescribeBudgets </p>
    #
    # @!attribute budgets
    #   <p>A list of budgets.</p>
    #
    #   @return [Array<Budget>]
    #
    # @!attribute next_token
    #   <p>The pagination token in the service response that indicates the next set of results that you can retrieve.</p>
    #
    #   @return [String]
    #
    DescribeBudgetsOutput = ::Struct.new(
      :budgets,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Request of DescribeNotificationsForBudget </p>
    #
    # @!attribute account_id
    #   <p>The <code>accountId</code> that is associated with the budget whose notifications you want descriptions of.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p>The name of the budget whose notifications you want descriptions of.</p>
    #
    #   @return [String]
    #
    # @!attribute max_results
    #   <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    #
    #   @return [Integer]
    #
    # @!attribute next_token
    #   <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    #
    #   @return [String]
    #
    DescribeNotificationsForBudgetInput = ::Struct.new(
      :account_id,
      :budget_name,
      :max_results,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Response of GetNotificationsForBudget </p>
    #
    # @!attribute notifications
    #   <p>A list of notifications that are associated with a budget.</p>
    #
    #   @return [Array<Notification>]
    #
    # @!attribute next_token
    #   <p>The pagination token in the service response that indicates the next set of results that you can retrieve.</p>
    #
    #   @return [String]
    #
    DescribeNotificationsForBudgetOutput = ::Struct.new(
      :notifications,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Request of DescribeSubscribersForNotification </p>
    #
    # @!attribute account_id
    #   <p>The <code>accountId</code> that is associated with the budget whose subscribers you want descriptions of.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p>The name of the budget whose subscribers you want descriptions of.</p>
    #
    #   @return [String]
    #
    # @!attribute notification
    #   <p>The notification whose subscribers you want to list.</p>
    #
    #   @return [Notification]
    #
    # @!attribute max_results
    #   <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    #
    #   @return [Integer]
    #
    # @!attribute next_token
    #   <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    #
    #   @return [String]
    #
    DescribeSubscribersForNotificationInput = ::Struct.new(
      :account_id,
      :budget_name,
      :notification,
      :max_results,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Response of DescribeSubscribersForNotification </p>
    #
    # @!attribute subscribers
    #   <p>A list of subscribers that are associated with a notification.</p>
    #
    #   @return [Array<Subscriber>]
    #
    # @!attribute next_token
    #   <p>The pagination token in the service response that indicates the next set of results that you can retrieve.</p>
    #
    #   @return [String]
    #
    DescribeSubscribersForNotificationOutput = ::Struct.new(
      :subscribers,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The budget name already exists. Budget names must be unique within an account.</p>
    #
    # @!attribute message
    #   <p>The error message the exception carries.</p>
    #
    #   @return [String]
    #
    DuplicateRecordException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # Includes enum constants for EventType
    #
    module EventType
      # No documentation available.
      #
      System = "SYSTEM"

      # No documentation available.
      #
      CreateAction = "CREATE_ACTION"

      # No documentation available.
      #
      DeleteAction = "DELETE_ACTION"

      # No documentation available.
      #
      UpdateAction = "UPDATE_ACTION"

      # No documentation available.
      #
      ExecuteAction = "EXECUTE_ACTION"
    end

    # @!attribute account_id
    #   <p>The account ID of the user. It's a 12-digit number.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    # @!attribute action_id
    #   <p>
    #            A system-generated universally unique identifier (UUID) for the action.
    #         </p>
    #
    #   @return [String]
    #
    # @!attribute execution_type
    #   <p>
    #            The type of execution.
    #         </p>
    #
    #   Enum, one of: ["APPROVE_BUDGET_ACTION", "RETRY_BUDGET_ACTION", "REVERSE_BUDGET_ACTION", "RESET_BUDGET_ACTION"]
    #
    #   @return [String]
    #
    ExecuteBudgetActionInput = ::Struct.new(
      :account_id,
      :budget_name,
      :action_id,
      :execution_type,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute account_id
    #   <p>The account ID of the user. It's a 12-digit number.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    # @!attribute action_id
    #   <p>
    #            A system-generated universally unique identifier (UUID) for the action.
    #         </p>
    #
    #   @return [String]
    #
    # @!attribute execution_type
    #   <p>
    #            The type of execution.
    #         </p>
    #
    #   Enum, one of: ["APPROVE_BUDGET_ACTION", "RETRY_BUDGET_ACTION", "REVERSE_BUDGET_ACTION", "RESET_BUDGET_ACTION"]
    #
    #   @return [String]
    #
    ExecuteBudgetActionOutput = ::Struct.new(
      :account_id,
      :budget_name,
      :action_id,
      :execution_type,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # Includes enum constants for ExecutionType
    #
    module ExecutionType
      # No documentation available.
      #
      ApproveBudgetAction = "APPROVE_BUDGET_ACTION"

      # No documentation available.
      #
      RetryBudgetAction = "RETRY_BUDGET_ACTION"

      # No documentation available.
      #
      ReverseBudgetAction = "REVERSE_BUDGET_ACTION"

      # No documentation available.
      #
      ResetBudgetAction = "RESET_BUDGET_ACTION"
    end

    # <p>The pagination token expired.</p>
    #
    # @!attribute message
    #   <p>The error message the exception carries.</p>
    #
    #   @return [String]
    #
    ExpiredNextTokenException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The parameters that define or describe the historical data that your auto-adjusting budget is based on.</p>
    #
    # @!attribute budget_adjustment_period
    #   <p>The number of budget periods included in the moving-average calculation that determines your auto-adjusted budget amount. The maximum value depends on the <code>TimeUnit</code> granularity of the budget:</p>
    #   		       <ul>
    #               <li>
    #                  <p>For the <code>DAILY</code> granularity, the maximum value is <code>60</code>.</p>
    #               </li>
    #               <li>
    #                  <p>For the <code>MONTHLY</code> granularity, the maximum value is <code>12</code>.</p>
    #               </li>
    #               <li>
    #                  <p>For the <code>QUARTERLY</code> granularity, the maximum value is <code>4</code>.</p>
    #               </li>
    #               <li>
    #                  <p>For the <code>ANNUALLY</code> granularity, the maximum value is <code>1</code>.</p>
    #               </li>
    #            </ul>
    #
    #   @return [Integer]
    #
    # @!attribute look_back_available_periods
    #   <p>The integer that describes how many budget periods in your <code>BudgetAdjustmentPeriod</code> are included in the calculation of your current <code>BudgetLimit</code>. If the first budget period in your <code>BudgetAdjustmentPeriod</code> has no cost data, then that budget period isn’t included in the average that determines your budget limit. </p>
    #   		       <p>For example, if you set <code>BudgetAdjustmentPeriod</code> as <code>4</code> quarters, but your account had no cost data in the first quarter, then only the last three quarters are included in the calculation. In this scenario, <code>LookBackAvailablePeriods</code> returns <code>3</code>. </p>
    #   		       <p>You can’t set your own <code>LookBackAvailablePeriods</code>. The value is automatically calculated from the <code>BudgetAdjustmentPeriod</code> and your historical cost data.</p>
    #
    #   @return [Integer]
    #
    HistoricalOptions = ::Struct.new(
      :budget_adjustment_period,
      :look_back_available_periods,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The Identity and Access Management (IAM) action definition details. </p>
    #
    # @!attribute policy_arn
    #   <p>The Amazon Resource Name (ARN) of the policy to be attached. </p>
    #
    #   @return [String]
    #
    # @!attribute roles
    #   <p>A list of roles to be attached. There must be at least one role. </p>
    #
    #   @return [Array<String>]
    #
    # @!attribute groups
    #   <p>A list of groups to be attached. There must be at least one group. </p>
    #
    #   @return [Array<String>]
    #
    # @!attribute users
    #   <p>A list of users to be attached. There must be at least one user. </p>
    #
    #   @return [Array<String>]
    #
    IamActionDefinition = ::Struct.new(
      :policy_arn,
      :roles,
      :groups,
      :users,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>An error on the server occurred during the processing of your request. Try again later.</p>
    #
    # @!attribute message
    #   <p>The error message the exception carries.</p>
    #
    #   @return [String]
    #
    InternalErrorException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The pagination token is invalid.</p>
    #
    # @!attribute message
    #   <p>The error message the exception carries.</p>
    #
    #   @return [String]
    #
    InvalidNextTokenException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>An error on the client occurred. Typically, the cause is an invalid input value.</p>
    #
    # @!attribute message
    #   <p>The error message the exception carries.</p>
    #
    #   @return [String]
    #
    InvalidParameterException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>We can’t locate the resource that you specified.</p>
    #
    # @!attribute message
    #   <p>The error message the exception carries.</p>
    #
    #   @return [String]
    #
    NotFoundException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>A notification that's associated with a budget. A budget can have up to ten notifications. </p>
    # 		       <p>Each notification must have at least one subscriber. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p>
    # 		       <p>For example, if you have a budget for 200 dollars and you want to be notified when you go over 160 dollars, create a notification with the following parameters:</p>
    # 		       <ul>
    #             <li>
    # 				           <p>A notificationType of <code>ACTUAL</code>
    #                </p>
    # 			         </li>
    #             <li>
    # 				           <p>A <code>thresholdType</code> of <code>PERCENTAGE</code>
    #                </p>
    # 			         </li>
    #             <li>
    # 				           <p>A <code>comparisonOperator</code> of <code>GREATER_THAN</code>
    #                </p>
    # 			         </li>
    #             <li>
    # 				           <p>A notification <code>threshold</code> of <code>80</code>
    #                </p>
    # 			         </li>
    #          </ul>
    #
    # @!attribute notification_type
    #   <p>Specifies whether the notification is for how much you have spent (<code>ACTUAL</code>) or
    #   			for how much that you're forecasted to spend (<code>FORECASTED</code>).</p>
    #
    #   Enum, one of: ["ACTUAL", "FORECASTED"]
    #
    #   @return [String]
    #
    # @!attribute comparison_operator
    #   <p>The comparison that's used for this notification.</p>
    #
    #   Enum, one of: ["GREATER_THAN", "LESS_THAN", "EQUAL_TO"]
    #
    #   @return [String]
    #
    # @!attribute threshold
    #   <p>The threshold that's associated with a notification. Thresholds are always a percentage, and
    #   			many customers find value being alerted between 50% - 200% of the budgeted amount. The
    #   			maximum limit for your threshold is 1,000,000% above the budgeted amount.</p>
    #
    #   @return [Float]
    #
    # @!attribute threshold_type
    #   <p>The type of threshold for a notification. For <code>ABSOLUTE_VALUE</code> thresholds, Amazon Web Services notifies you when you go over or are forecasted to go over your total cost threshold. For <code>PERCENTAGE</code> thresholds, Amazon Web Services notifies you when you go over or are forecasted to go over a certain percentage of your forecasted spend. For example, if you have a budget for 200 dollars and you have a <code>PERCENTAGE</code> threshold of 80%, Amazon Web Services notifies you when you go over 160 dollars.</p>
    #
    #   Enum, one of: ["PERCENTAGE", "ABSOLUTE_VALUE"]
    #
    #   @return [String]
    #
    # @!attribute notification_state
    #   <p>Specifies whether this notification is in alarm. If a budget notification is in the
    #   				<code>ALARM</code> state, you passed the set threshold for the budget.</p>
    #
    #   Enum, one of: ["OK", "ALARM"]
    #
    #   @return [String]
    #
    Notification = ::Struct.new(
      :notification_type,
      :comparison_operator,
      :threshold,
      :threshold_type,
      :notification_state,
      keyword_init: true
    ) do
      include Hearth::Structure

      def initialize(*)
        super
        self.threshold ||= 0
      end
    end

    # Includes enum constants for NotificationState
    #
    module NotificationState
      # No documentation available.
      #
      OK = "OK"

      # No documentation available.
      #
      ALARM = "ALARM"
    end

    # Includes enum constants for NotificationType
    #
    module NotificationType
      # No documentation available.
      #
      ACTUAL = "ACTUAL"

      # No documentation available.
      #
      FORECASTED = "FORECASTED"
    end

    # <p>A notification with subscribers. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p>
    #
    # @!attribute notification
    #   <p>The notification that's associated with a budget.</p>
    #
    #   @return [Notification]
    #
    # @!attribute subscribers
    #   <p>A list of subscribers who are subscribed to this notification.</p>
    #
    #   @return [Array<Subscriber>]
    #
    NotificationWithSubscribers = ::Struct.new(
      :notification,
      :subscribers,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> The request was received and recognized by the server, but the server rejected that
    #       particular method for the requested resource. </p>
    #
    # @!attribute message
    #   <p>The error message the exception carries.</p>
    #
    #   @return [String]
    #
    ResourceLockedException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The service control policies (SCP) action definition details. </p>
    #
    # @!attribute policy_id
    #   <p>The policy ID attached. </p>
    #
    #   @return [String]
    #
    # @!attribute target_ids
    #   <p>A list of target IDs. </p>
    #
    #   @return [Array<String>]
    #
    ScpActionDefinition = ::Struct.new(
      :policy_id,
      :target_ids,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The amount of cost or usage that's measured for a budget.</p>
    # 		       <p>For example, a <code>Spend</code> for <code>3 GB</code> of S3 usage has the following
    # 			parameters:</p>
    # 		       <ul>
    #             <li>
    # 				           <p>An <code>Amount</code> of <code>3</code>
    #                </p>
    # 			         </li>
    #             <li>
    # 				           <p>A <code>unit</code> of <code>GB</code>
    #                </p>
    # 			         </li>
    #          </ul>
    #
    # @!attribute amount
    #   <p>The cost or usage amount that's associated with a budget forecast, actual spend, or budget
    #   			threshold.</p>
    #
    #   @return [String]
    #
    # @!attribute unit
    #   <p>The unit of measurement that's used for the budget forecast, actual spend, or budget
    #   			threshold, such as USD or GBP.</p>
    #
    #   @return [String]
    #
    Spend = ::Struct.new(
      :amount,
      :unit,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The Amazon Web Services Systems Manager (SSM) action definition details. </p>
    #
    # @!attribute action_sub_type
    #   <p>The action subType. </p>
    #
    #   Enum, one of: ["STOP_EC2_INSTANCES", "STOP_RDS_INSTANCES"]
    #
    #   @return [String]
    #
    # @!attribute region
    #   <p>The Region to run the SSM document. </p>
    #
    #   @return [String]
    #
    # @!attribute instance_ids
    #   <p>The EC2 and RDS instance IDs. </p>
    #
    #   @return [Array<String>]
    #
    SsmActionDefinition = ::Struct.new(
      :action_sub_type,
      :region,
      :instance_ids,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The subscriber to a budget notification. The subscriber consists of a subscription type and either an Amazon SNS topic or an email address.</p>
    # 		       <p>For example, an email subscriber has the following parameters:</p>
    # 		       <ul>
    #             <li>
    # 				           <p>A <code>subscriptionType</code> of <code>EMAIL</code>
    #                </p>
    # 			         </li>
    #             <li>
    # 				           <p>An <code>address</code> of <code>example@example.com</code>
    #                </p>
    # 			         </li>
    #          </ul>
    #
    # @!attribute subscription_type
    #   <p>The type of notification that Amazon Web Services sends to a subscriber.</p>
    #
    #   Enum, one of: ["SNS", "EMAIL"]
    #
    #   @return [String]
    #
    # @!attribute address
    #   <p>The address that Amazon Web Services sends budget notifications to, either an SNS topic or an email.</p>
    #   		       <p>When you create a subscriber, the value of <code>Address</code> can't contain line breaks.</p>
    #
    #   @return [String]
    #
    Subscriber = ::Struct.new(
      :subscription_type,
      :address,
      keyword_init: true
    ) do
      include Hearth::Structure

      def to_s
        "#<struct AWS::SDK::Budgets::Types::Subscriber "\
          "subscription_type=#{subscription_type || 'nil'}, "\
          "address=\"[SENSITIVE]\">"
      end
    end

    # Includes enum constants for SubscriptionType
    #
    module SubscriptionType
      # No documentation available.
      #
      SNS = "SNS"

      # No documentation available.
      #
      EMAIL = "EMAIL"
    end

    # Includes enum constants for ThresholdType
    #
    module ThresholdType
      # No documentation available.
      #
      PERCENTAGE = "PERCENTAGE"

      # No documentation available.
      #
      ABSOLUTE_VALUE = "ABSOLUTE_VALUE"
    end

    # <p>The period of time that's covered by a budget. The period has a start date and an end date.
    # 			The start date must come before the end date. There are no restrictions on the end date. </p>
    #
    # @!attribute start
    #   <p>The start date for a budget. If you created your budget and didn't specify a start date, Amazon Web Services defaults to the start of your chosen time period (DAILY, MONTHLY, QUARTERLY, or ANNUALLY). For example, if you created your budget on January 24, 2018, chose <code>DAILY</code>, and didn't set a start date, Amazon Web Services set your start date to <code>01/24/18 00:00 UTC</code>. If you chose <code>MONTHLY</code>, Amazon Web Services set your start date to <code>01/01/18 00:00 UTC</code>. The defaults are the same for the Billing and Cost Management console and the API.</p>
    #   		       <p>You can change your start date with the <code>UpdateBudget</code> operation.</p>
    #
    #   @return [Time]
    #
    # @!attribute end
    #   <p>The end date for a budget. If you didn't specify an end date, Amazon Web Services set your end date to <code>06/15/87 00:00 UTC</code>. The defaults are the same for the Billing and Cost Management console and the API.</p>
    #   		       <p>After the end date, Amazon Web Services deletes the budget and all the associated
    #   			notifications and subscribers. You can change your end date with the
    #   				<code>UpdateBudget</code> operation.</p>
    #
    #   @return [Time]
    #
    TimePeriod = ::Struct.new(
      :start,
      :end,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # Includes enum constants for TimeUnit
    #
    module TimeUnit
      # No documentation available.
      #
      DAILY = "DAILY"

      # No documentation available.
      #
      MONTHLY = "MONTHLY"

      # No documentation available.
      #
      QUARTERLY = "QUARTERLY"

      # No documentation available.
      #
      ANNUALLY = "ANNUALLY"
    end

    # @!attribute account_id
    #   <p>The account ID of the user. It's a 12-digit number.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    # @!attribute action_id
    #   <p>
    #            A system-generated universally unique identifier (UUID) for the action.
    #         </p>
    #
    #   @return [String]
    #
    # @!attribute notification_type
    #   <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
    #
    #   Enum, one of: ["ACTUAL", "FORECASTED"]
    #
    #   @return [String]
    #
    # @!attribute action_threshold
    #   <p>The trigger threshold of the action. </p>
    #
    #   @return [ActionThreshold]
    #
    # @!attribute definition
    #   <p>Specifies all of the type-specific parameters. </p>
    #
    #   @return [Definition]
    #
    # @!attribute execution_role_arn
    #   <p>
    #            The role passed for action execution and reversion. Roles and actions must be in the same account.
    #         </p>
    #
    #   @return [String]
    #
    # @!attribute approval_model
    #   <p>
    #            This specifies if the action needs manual or automatic approval.
    #         </p>
    #
    #   Enum, one of: ["AUTOMATIC", "MANUAL"]
    #
    #   @return [String]
    #
    # @!attribute subscribers
    #   <p> A list of subscribers.</p>
    #
    #   @return [Array<Subscriber>]
    #
    UpdateBudgetActionInput = ::Struct.new(
      :account_id,
      :budget_name,
      :action_id,
      :notification_type,
      :action_threshold,
      :definition,
      :execution_role_arn,
      :approval_model,
      :subscribers,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute account_id
    #   <p>The account ID of the user. It's a 12-digit number.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #
    #   @return [String]
    #
    # @!attribute old_action
    #   <p>
    #            The previous action resource information.
    #         </p>
    #
    #   @return [Action]
    #
    # @!attribute new_action
    #   <p>
    #            The updated action resource information.
    #         </p>
    #
    #   @return [Action]
    #
    UpdateBudgetActionOutput = ::Struct.new(
      :account_id,
      :budget_name,
      :old_action,
      :new_action,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Request of UpdateBudget </p>
    #
    # @!attribute account_id
    #   <p>The <code>accountId</code> that is associated with the budget that you want to update.</p>
    #
    #   @return [String]
    #
    # @!attribute new_budget
    #   <p>The budget that you want to update your budget to.</p>
    #
    #   @return [Budget]
    #
    UpdateBudgetInput = ::Struct.new(
      :account_id,
      :new_budget,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Response of UpdateBudget </p>
    #
    UpdateBudgetOutput = ::Struct.new(
      nil,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Request of UpdateNotification </p>
    #
    # @!attribute account_id
    #   <p>The <code>accountId</code> that is associated with the budget whose notification you want to update.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p>The name of the budget whose notification you want to update.</p>
    #
    #   @return [String]
    #
    # @!attribute old_notification
    #   <p>The previous notification that is associated with a budget.</p>
    #
    #   @return [Notification]
    #
    # @!attribute new_notification
    #   <p>The updated notification to be associated with a budget.</p>
    #
    #   @return [Notification]
    #
    UpdateNotificationInput = ::Struct.new(
      :account_id,
      :budget_name,
      :old_notification,
      :new_notification,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Response of UpdateNotification </p>
    #
    UpdateNotificationOutput = ::Struct.new(
      nil,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Request of UpdateSubscriber </p>
    #
    # @!attribute account_id
    #   <p>The <code>accountId</code> that is associated with the budget whose subscriber you want to update.</p>
    #
    #   @return [String]
    #
    # @!attribute budget_name
    #   <p>The name of the budget whose subscriber you want to update.</p>
    #
    #   @return [String]
    #
    # @!attribute notification
    #   <p>The notification whose subscriber you want to update.</p>
    #
    #   @return [Notification]
    #
    # @!attribute old_subscriber
    #   <p>The previous subscriber that is associated with a budget notification.</p>
    #
    #   @return [Subscriber]
    #
    # @!attribute new_subscriber
    #   <p>The updated subscriber that is associated with a budget notification.</p>
    #
    #   @return [Subscriber]
    #
    UpdateSubscriberInput = ::Struct.new(
      :account_id,
      :budget_name,
      :notification,
      :old_subscriber,
      :new_subscriber,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p> Response of UpdateSubscriber </p>
    #
    UpdateSubscriberOutput = ::Struct.new(
      nil,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

  end
end
