# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/awslabs/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

module AWS::SDK::RedshiftData
  module Types

    # <p>The number of active statements exceeds the limit.</p>
    #
    # @!attribute message
    #
    #   @return [String]
    #
    ActiveStatementsExceededException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>An SQL statement encountered an environmental error while running.</p>
    #
    # @!attribute message
    #
    #   @return [String]
    #
    # @!attribute statement_id
    #   <p>Statement identifier of the exception.</p>
    #
    #   @return [String]
    #
    BatchExecuteStatementException = ::Struct.new(
      :message,
      :statement_id,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute sqls
    #   <p>One or more SQL statements to run. </p>
    #
    #   @return [Array<String>]
    #
    # @!attribute cluster_identifier
    #   <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute secret_arn
    #   <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
    #
    #   @return [String]
    #
    # @!attribute db_user
    #   <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute database
    #   <p>The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute with_event
    #   <p>A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statements run. </p>
    #
    #   @return [Boolean]
    #
    # @!attribute statement_name
    #   <p>The name of the SQL statements. You can name the SQL statements when you create them to identify the query. </p>
    #
    #   @return [String]
    #
    BatchExecuteStatementInput = ::Struct.new(
      :sqls,
      :cluster_identifier,
      :secret_arn,
      :db_user,
      :database,
      :with_event,
      :statement_name,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute id
    #   <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
    #         This identifier is returned by <code>BatchExecuteStatment</code>. </p>
    #
    #   @return [String]
    #
    # @!attribute created_at
    #   <p>The date and time (UTC) the statement was created. </p>
    #
    #   @return [Time]
    #
    # @!attribute cluster_identifier
    #   <p>The cluster identifier. This parameter is not returned when connecting to a serverless endpoint. </p>
    #
    #   @return [String]
    #
    # @!attribute db_user
    #   <p>The database user name.</p>
    #
    #   @return [String]
    #
    # @!attribute database
    #   <p>The name of the database.</p>
    #
    #   @return [String]
    #
    # @!attribute secret_arn
    #   <p>The name or ARN of the secret that enables access to the database. </p>
    #
    #   @return [String]
    #
    BatchExecuteStatementOutput = ::Struct.new(
      :id,
      :created_at,
      :cluster_identifier,
      :db_user,
      :database,
      :secret_arn,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute id
    #   <p>The identifier of the SQL statement to cancel. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
    #           This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatment</code>, and <code>ListStatements</code>. </p>
    #
    #   @return [String]
    #
    CancelStatementInput = ::Struct.new(
      :id,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute status
    #   <p>A value that indicates whether the cancel statement succeeded (true). </p>
    #
    #   @return [Boolean]
    #
    CancelStatementOutput = ::Struct.new(
      :status,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The properties (metadata) of a column. </p>
    #
    # @!attribute is_case_sensitive
    #   <p>A value that indicates whether the column is case-sensitive. </p>
    #
    #   @return [Boolean]
    #
    # @!attribute is_currency
    #   <p>A value that indicates whether the column contains currency values.</p>
    #
    #   @return [Boolean]
    #
    # @!attribute is_signed
    #   <p>A value that indicates whether an integer column is signed.</p>
    #
    #   @return [Boolean]
    #
    # @!attribute label
    #   <p>The label for the column. </p>
    #
    #   @return [String]
    #
    # @!attribute name
    #   <p>The name of the column. </p>
    #
    #   @return [String]
    #
    # @!attribute nullable
    #   <p>A value that indicates whether the column is nullable. </p>
    #
    #   @return [Integer]
    #
    # @!attribute precision
    #   <p>The precision value of a decimal number column. </p>
    #
    #   @return [Integer]
    #
    # @!attribute scale
    #   <p>The scale value of a decimal number column. </p>
    #
    #   @return [Integer]
    #
    # @!attribute schema_name
    #   <p>The name of the schema that contains the table that includes the column.</p>
    #
    #   @return [String]
    #
    # @!attribute table_name
    #   <p>The name of the table that includes the column. </p>
    #
    #   @return [String]
    #
    # @!attribute type_name
    #   <p>The database-specific data type of the column. </p>
    #
    #   @return [String]
    #
    # @!attribute length
    #   <p>The length of the column.</p>
    #
    #   @return [Integer]
    #
    # @!attribute column_default
    #   <p>The default value of the column. </p>
    #
    #   @return [String]
    #
    ColumnMetadata = ::Struct.new(
      :is_case_sensitive,
      :is_currency,
      :is_signed,
      :label,
      :name,
      :nullable,
      :precision,
      :scale,
      :schema_name,
      :table_name,
      :type_name,
      :length,
      :column_default,
      keyword_init: true
    ) do
      include Hearth::Structure
      def initialize(*)
        super
        self.is_case_sensitive ||= false
        self.is_currency ||= false
        self.is_signed ||= false
        self.nullable ||= 0
        self.precision ||= 0
        self.scale ||= 0
        self.length ||= 0
      end

    end

    # <p>Connection to a database failed.</p>
    #
    # @!attribute message
    #
    #   @return [String]
    #
    DatabaseConnectionException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute id
    #   <p>The identifier of the SQL statement to describe. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
    #          A suffix indicates the number of the SQL statement.
    #          For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query.
    #          This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatement</code>, and <code>ListStatements</code>. </p>
    #
    #   @return [String]
    #
    DescribeStatementInput = ::Struct.new(
      :id,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute id
    #   <p>The identifier of the SQL statement described. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    #
    #   @return [String]
    #
    # @!attribute secret_arn
    #   <p>The name or Amazon Resource Name (ARN) of the secret that enables access to the database. </p>
    #
    #   @return [String]
    #
    # @!attribute db_user
    #   <p>The database user name. </p>
    #
    #   @return [String]
    #
    # @!attribute database
    #   <p>The name of the database. </p>
    #
    #   @return [String]
    #
    # @!attribute cluster_identifier
    #   <p>The cluster identifier. </p>
    #
    #   @return [String]
    #
    # @!attribute duration
    #   <p>The amount of time in nanoseconds that the statement ran. </p>
    #
    #   @return [Integer]
    #
    # @!attribute error
    #   <p>The error message from the cluster if the SQL statement encountered an error while running. </p>
    #
    #   @return [String]
    #
    # @!attribute status
    #   <p>The status of the SQL statement being described. Status values are defined as follows: </p>
    #            <ul>
    #               <li>
    #                  <p>ABORTED - The query run was stopped by the user. </p>
    #               </li>
    #               <li>
    #                  <p>ALL -  A status value that includes all query statuses. This value can be used to filter results. </p>
    #               </li>
    #               <li>
    #                  <p>FAILED - The query run failed. </p>
    #               </li>
    #               <li>
    #                  <p>FINISHED - The query has finished running. </p>
    #               </li>
    #               <li>
    #                  <p>PICKED - The query has been chosen to be run. </p>
    #               </li>
    #               <li>
    #                  <p>STARTED - The query run has started. </p>
    #               </li>
    #               <li>
    #                  <p>SUBMITTED - The query was submitted, but not yet processed. </p>
    #               </li>
    #            </ul>
    #
    #   Enum, one of: ["SUBMITTED", "PICKED", "STARTED", "FINISHED", "ABORTED", "FAILED", "ALL"]
    #
    #   @return [String]
    #
    # @!attribute created_at
    #   <p>The date and time (UTC) when the SQL statement was submitted to run. </p>
    #
    #   @return [Time]
    #
    # @!attribute updated_at
    #   <p>The date and time (UTC) that the metadata for the SQL statement was last updated. An
    #         example is the time the status last changed. </p>
    #
    #   @return [Time]
    #
    # @!attribute redshift_pid
    #   <p>The process identifier from Amazon Redshift. </p>
    #
    #   @return [Integer]
    #
    # @!attribute has_result_set
    #   <p>A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set.
    #         The value is true if any substatement returns a result set.</p>
    #
    #   @return [Boolean]
    #
    # @!attribute query_string
    #   <p>The SQL statement text. </p>
    #
    #   @return [String]
    #
    # @!attribute result_rows
    #   <p>Either the number of rows returned from the SQL statement or the number of rows affected.
    #           If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others.
    #           A <code>-1</code> indicates the value is null.</p>
    #
    #   @return [Integer]
    #
    # @!attribute result_size
    #   <p>The size in bytes of the returned results. A <code>-1</code> indicates the value is null.</p>
    #
    #   @return [Integer]
    #
    # @!attribute redshift_query_id
    #   <p>The identifier of the query generated by Amazon Redshift.
    #         These identifiers are also available in the <code>query</code> column of the <code>STL_QUERY</code> system view. </p>
    #
    #   @return [Integer]
    #
    # @!attribute query_parameters
    #   <p>The parameters for the SQL statement.</p>
    #
    #   @return [Array<SqlParameter>]
    #
    # @!attribute sub_statements
    #   <p>The SQL statements from a multiple statement run.</p>
    #
    #   @return [Array<SubStatementData>]
    #
    DescribeStatementOutput = ::Struct.new(
      :id,
      :secret_arn,
      :db_user,
      :database,
      :cluster_identifier,
      :duration,
      :error,
      :status,
      :created_at,
      :updated_at,
      :redshift_pid,
      :has_result_set,
      :query_string,
      :result_rows,
      :result_size,
      :redshift_query_id,
      :query_parameters,
      :sub_statements,
      keyword_init: true
    ) do
      include Hearth::Structure
      def initialize(*)
        super
        self.duration ||= 0
        self.redshift_pid ||= 0
        self.result_rows ||= 0
        self.result_size ||= 0
        self.redshift_query_id ||= 0
      end

    end

    # @!attribute cluster_identifier
    #   <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute secret_arn
    #   <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
    #
    #   @return [String]
    #
    # @!attribute db_user
    #   <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute database
    #   <p>The name of the database that contains the tables to be described.
    #         If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
    #
    #   @return [String]
    #
    # @!attribute connected_database
    #   <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute schema
    #   <p>The schema that contains the table. If no schema is specified, then matching tables for all schemas are returned. </p>
    #
    #   @return [String]
    #
    # @!attribute table
    #   <p>The table name. If no table is specified, then all tables for all matching schemas are returned.
    #          If no table and no schema is specified, then all tables for all schemas in the database are returned</p>
    #
    #   @return [String]
    #
    # @!attribute next_token
    #   <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    #
    #   @return [String]
    #
    # @!attribute max_results
    #   <p>The maximum number of tables to return in the response.
    #         If more tables exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
    #
    #   @return [Integer]
    #
    DescribeTableInput = ::Struct.new(
      :cluster_identifier,
      :secret_arn,
      :db_user,
      :database,
      :connected_database,
      :schema,
      :table,
      :next_token,
      :max_results,
      keyword_init: true
    ) do
      include Hearth::Structure
      def initialize(*)
        super
        self.max_results ||= 0
      end

    end

    # @!attribute table_name
    #   <p>The table name. </p>
    #
    #   @return [String]
    #
    # @!attribute column_list
    #   <p>A list of columns in the table. </p>
    #
    #   @return [Array<ColumnMetadata>]
    #
    # @!attribute next_token
    #   <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    #
    #   @return [String]
    #
    DescribeTableOutput = ::Struct.new(
      :table_name,
      :column_list,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The SQL statement encountered an environmental error while running.</p>
    #
    # @!attribute message
    #   <p>The exception message.</p>
    #
    #   @return [String]
    #
    # @!attribute statement_id
    #   <p>Statement identifier of the exception.</p>
    #
    #   @return [String]
    #
    ExecuteStatementException = ::Struct.new(
      :message,
      :statement_id,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute sql
    #   <p>The SQL statement text to run. </p>
    #
    #   @return [String]
    #
    # @!attribute cluster_identifier
    #   <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute secret_arn
    #   <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
    #
    #   @return [String]
    #
    # @!attribute db_user
    #   <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute database
    #   <p>The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute with_event
    #   <p>A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs. </p>
    #
    #   @return [Boolean]
    #
    # @!attribute statement_name
    #   <p>The name of the SQL statement. You can name the SQL statement when you create it to identify the query. </p>
    #
    #   @return [String]
    #
    # @!attribute parameters
    #   <p>The parameters for the SQL statement.</p>
    #
    #   @return [Array<SqlParameter>]
    #
    ExecuteStatementInput = ::Struct.new(
      :sql,
      :cluster_identifier,
      :secret_arn,
      :db_user,
      :database,
      :with_event,
      :statement_name,
      :parameters,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute id
    #   <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    #
    #   @return [String]
    #
    # @!attribute created_at
    #   <p>The date and time (UTC) the statement was created. </p>
    #
    #   @return [Time]
    #
    # @!attribute cluster_identifier
    #   <p>The cluster identifier. This parameter is not returned when connecting to a serverless endpoint. </p>
    #
    #   @return [String]
    #
    # @!attribute db_user
    #   <p>The database user name.</p>
    #
    #   @return [String]
    #
    # @!attribute database
    #   <p>The name of the database.</p>
    #
    #   @return [String]
    #
    # @!attribute secret_arn
    #   <p>The name or ARN of the secret that enables access to the database. </p>
    #
    #   @return [String]
    #
    ExecuteStatementOutput = ::Struct.new(
      :id,
      :created_at,
      :cluster_identifier,
      :db_user,
      :database,
      :secret_arn,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>A data value in a column. </p>
    #
    class Field < Hearth::Union
      # <p>A value that indicates whether the data is NULL. </p>
      #
      class IsNull < Field
        def to_h
          { is_null: super(__getobj__) }
        end

        def to_s
          "#<AWS::SDK::RedshiftData::Types::IsNull #{__getobj__ || 'nil'}>"
        end
      end

      # <p>A value of the Boolean data type. </p>
      #
      class BooleanValue < Field
        def to_h
          { boolean_value: super(__getobj__) }
        end

        def to_s
          "#<AWS::SDK::RedshiftData::Types::BooleanValue #{__getobj__ || 'nil'}>"
        end
      end

      # <p>A value of the long data type. </p>
      #
      class LongValue < Field
        def to_h
          { long_value: super(__getobj__) }
        end

        def to_s
          "#<AWS::SDK::RedshiftData::Types::LongValue #{__getobj__ || 'nil'}>"
        end
      end

      # <p>A value of the double data type. </p>
      #
      class DoubleValue < Field
        def to_h
          { double_value: super(__getobj__) }
        end

        def to_s
          "#<AWS::SDK::RedshiftData::Types::DoubleValue #{__getobj__ || 'nil'}>"
        end
      end

      # <p>A value of the string data type. </p>
      #
      class StringValue < Field
        def to_h
          { string_value: super(__getobj__) }
        end

        def to_s
          "#<AWS::SDK::RedshiftData::Types::StringValue #{__getobj__ || 'nil'}>"
        end
      end

      # <p>A value of the BLOB data type. </p>
      #
      class BlobValue < Field
        def to_h
          { blob_value: super(__getobj__) }
        end

        def to_s
          "#<AWS::SDK::RedshiftData::Types::BlobValue #{__getobj__ || 'nil'}>"
        end
      end

      # Handles unknown future members
      #
      class Unknown < Field
        def to_h
          { unknown: super(__getobj__) }
        end

        def to_s
          "#<AWS::SDK::RedshiftData::Types::Unknown #{__getobj__ || 'nil'}>"
        end
      end
    end

    # @!attribute id
    #   <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
    #          A suffix indicates then number of the SQL statement.
    #          For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query.
    #          This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatment</code>, and <code>ListStatements</code>. </p>
    #
    #   @return [String]
    #
    # @!attribute next_token
    #   <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    #
    #   @return [String]
    #
    GetStatementResultInput = ::Struct.new(
      :id,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute records
    #   <p>The results of the SQL statement.</p>
    #
    #   @return [Array<Array<Field>>]
    #
    # @!attribute column_metadata
    #   <p>The properties (metadata) of a column. </p>
    #
    #   @return [Array<ColumnMetadata>]
    #
    # @!attribute total_num_rows
    #   <p>The total number of rows in the result set returned from a query.
    #          You can use this number to estimate the number of calls to the <code>GetStatementResult</code> operation needed to page through the results. </p>
    #
    #   @return [Integer]
    #
    # @!attribute next_token
    #   <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    #
    #   @return [String]
    #
    GetStatementResultOutput = ::Struct.new(
      :records,
      :column_metadata,
      :total_num_rows,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
      def initialize(*)
        super
        self.total_num_rows ||= 0
      end

    end

    # <p>The Amazon Redshift Data API operation failed due to invalid input. </p>
    #
    # @!attribute message
    #   <p>The exception message.</p>
    #
    #   @return [String]
    #
    InternalServerException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute cluster_identifier
    #   <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute database
    #   <p>The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute secret_arn
    #   <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
    #
    #   @return [String]
    #
    # @!attribute db_user
    #   <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute next_token
    #   <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    #
    #   @return [String]
    #
    # @!attribute max_results
    #   <p>The maximum number of databases to return in the response.
    #          If more databases exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
    #
    #   @return [Integer]
    #
    ListDatabasesInput = ::Struct.new(
      :cluster_identifier,
      :database,
      :secret_arn,
      :db_user,
      :next_token,
      :max_results,
      keyword_init: true
    ) do
      include Hearth::Structure
      def initialize(*)
        super
        self.max_results ||= 0
      end

    end

    # @!attribute databases
    #   <p>The names of databases. </p>
    #
    #   @return [Array<String>]
    #
    # @!attribute next_token
    #   <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    #
    #   @return [String]
    #
    ListDatabasesOutput = ::Struct.new(
      :databases,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute cluster_identifier
    #   <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute secret_arn
    #   <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
    #
    #   @return [String]
    #
    # @!attribute db_user
    #   <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute database
    #   <p>The name of the database that contains the schemas to list.
    #        If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
    #
    #   @return [String]
    #
    # @!attribute connected_database
    #   <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute schema_pattern
    #   <p>A pattern to filter results by schema name. Within a schema pattern, "%" means match any
    #         substring of 0 or more characters and "_" means match any one character. Only schema name
    #         entries matching the search pattern are returned. </p>
    #
    #   @return [String]
    #
    # @!attribute next_token
    #   <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    #
    #   @return [String]
    #
    # @!attribute max_results
    #   <p>The maximum number of schemas to return in the response.
    #          If more schemas exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
    #
    #   @return [Integer]
    #
    ListSchemasInput = ::Struct.new(
      :cluster_identifier,
      :secret_arn,
      :db_user,
      :database,
      :connected_database,
      :schema_pattern,
      :next_token,
      :max_results,
      keyword_init: true
    ) do
      include Hearth::Structure
      def initialize(*)
        super
        self.max_results ||= 0
      end

    end

    # @!attribute schemas
    #   <p>The schemas that match the request pattern. </p>
    #
    #   @return [Array<String>]
    #
    # @!attribute next_token
    #   <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    #
    #   @return [String]
    #
    ListSchemasOutput = ::Struct.new(
      :schemas,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute next_token
    #   <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    #
    #   @return [String]
    #
    # @!attribute max_results
    #   <p>The maximum number of SQL statements to return in the response.
    #          If more SQL statements exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
    #
    #   @return [Integer]
    #
    # @!attribute statement_name
    #   <p>The name of the SQL statement specified as input to <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> to identify the query.
    #         You can list multiple statements by providing a prefix that matches the beginning of the statement name.
    #         For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of <code>myStatement</code>.
    #         Data API does a case-sensitive match of SQL statement names to the prefix value you provide. </p>
    #
    #   @return [String]
    #
    # @!attribute status
    #   <p>The status of the SQL statement to list. Status values are defined as follows: </p>
    #            <ul>
    #               <li>
    #                  <p>ABORTED - The query run was stopped by the user. </p>
    #               </li>
    #               <li>
    #                  <p>ALL -  A status value that includes all query statuses. This value can be used to filter results. </p>
    #               </li>
    #               <li>
    #                  <p>FAILED - The query run failed. </p>
    #               </li>
    #               <li>
    #                  <p>FINISHED - The query has finished running. </p>
    #               </li>
    #               <li>
    #                  <p>PICKED - The query has been chosen to be run. </p>
    #               </li>
    #               <li>
    #                  <p>STARTED - The query run has started. </p>
    #               </li>
    #               <li>
    #                  <p>SUBMITTED - The query was submitted, but not yet processed. </p>
    #               </li>
    #            </ul>
    #
    #   Enum, one of: ["SUBMITTED", "PICKED", "STARTED", "FINISHED", "ABORTED", "FAILED", "ALL"]
    #
    #   @return [String]
    #
    # @!attribute role_level
    #   <p>A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned.
    #         If false, only statements run by the caller's IAM role in the current IAM session are returned.  The default is true. </p>
    #
    #   @return [Boolean]
    #
    ListStatementsInput = ::Struct.new(
      :next_token,
      :max_results,
      :statement_name,
      :status,
      :role_level,
      keyword_init: true
    ) do
      include Hearth::Structure
      def initialize(*)
        super
        self.max_results ||= 0
      end

    end

    # @!attribute statements
    #   <p>The SQL statements. </p>
    #
    #   @return [Array<StatementData>]
    #
    # @!attribute next_token
    #   <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    #
    #   @return [String]
    #
    ListStatementsOutput = ::Struct.new(
      :statements,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute cluster_identifier
    #   <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute secret_arn
    #   <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
    #
    #   @return [String]
    #
    # @!attribute db_user
    #   <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute database
    #   <p>The name of the database that contains the tables to list.
    #         If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
    #
    #   @return [String]
    #
    # @!attribute connected_database
    #   <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
    #
    #   @return [String]
    #
    # @!attribute schema_pattern
    #   <p>A pattern to filter results by schema name. Within a schema pattern, "%" means match any
    #         substring of 0 or more characters and "_" means match any one character. Only schema name
    #         entries matching the search pattern are returned. If <code>SchemaPattern</code> is not specified, then all tables that match
    #          <code>TablePattern</code> are returned.
    #          If neither <code>SchemaPattern</code> or <code>TablePattern</code> are specified, then all tables are returned. </p>
    #
    #   @return [String]
    #
    # @!attribute table_pattern
    #   <p>A pattern to filter results by table name. Within a table pattern, "%" means match any
    #         substring of 0 or more characters and "_" means match any one character. Only table name
    #         entries matching the search pattern are returned. If <code>TablePattern</code> is not specified, then all tables that match
    #          <code>SchemaPattern</code>are returned.
    #          If neither <code>SchemaPattern</code> or <code>TablePattern</code> are specified, then all tables are returned. </p>
    #
    #   @return [String]
    #
    # @!attribute next_token
    #   <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    #
    #   @return [String]
    #
    # @!attribute max_results
    #   <p>The maximum number of tables to return in the response.
    #          If more tables exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
    #
    #   @return [Integer]
    #
    ListTablesInput = ::Struct.new(
      :cluster_identifier,
      :secret_arn,
      :db_user,
      :database,
      :connected_database,
      :schema_pattern,
      :table_pattern,
      :next_token,
      :max_results,
      keyword_init: true
    ) do
      include Hearth::Structure
      def initialize(*)
        super
        self.max_results ||= 0
      end

    end

    # @!attribute tables
    #   <p>The tables that match the request pattern. </p>
    #
    #   @return [Array<TableMember>]
    #
    # @!attribute next_token
    #   <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    #
    #   @return [String]
    #
    ListTablesOutput = ::Struct.new(
      :tables,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The Amazon Redshift Data API operation failed due to a missing resource. </p>
    #
    # @!attribute message
    #   <p>The exception message.</p>
    #
    #   @return [String]
    #
    # @!attribute resource_id
    #   <p>Resource identifier associated with the exception.</p>
    #
    #   @return [String]
    #
    ResourceNotFoundException = ::Struct.new(
      :message,
      :resource_id,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>A parameter used in a SQL statement.</p>
    #
    # @!attribute name
    #   <p>The name of the parameter.</p>
    #
    #   @return [String]
    #
    # @!attribute value
    #   <p>The value of the parameter.
    #       Amazon Redshift implicitly converts to the proper data type. For more inforation, see
    #         <a href="https://docs.aws.amazon.com/redshift/latest/dg/c_Supported_data_types.html">Data types</a> in the
    #         <i>Amazon Redshift Database Developer Guide</i>. </p>
    #
    #   @return [String]
    #
    SqlParameter = ::Struct.new(
      :name,
      :value,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The SQL statement to run.</p>
    #
    # @!attribute id
    #   <p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    #
    #   @return [String]
    #
    # @!attribute query_string
    #   <p>The SQL statement.</p>
    #
    #   @return [String]
    #
    # @!attribute query_strings
    #   <p>One or more SQL statements. Each query string in the array corresponds to one of the queries in a batch query request.</p>
    #
    #   @return [Array<String>]
    #
    # @!attribute secret_arn
    #   <p>The name or Amazon Resource Name (ARN) of the secret that enables access to the database. </p>
    #
    #   @return [String]
    #
    # @!attribute status
    #   <p>The status of the SQL statement. An
    #          example is the that the SQL statement finished.
    #         </p>
    #
    #   Enum, one of: ["SUBMITTED", "PICKED", "STARTED", "FINISHED", "ABORTED", "FAILED", "ALL"]
    #
    #   @return [String]
    #
    # @!attribute statement_name
    #   <p>The name of the SQL statement. </p>
    #
    #   @return [String]
    #
    # @!attribute created_at
    #   <p>The date and time (UTC) the statement was created. </p>
    #
    #   @return [Time]
    #
    # @!attribute updated_at
    #   <p>The date and time (UTC) that the statement metadata was last updated.</p>
    #
    #   @return [Time]
    #
    # @!attribute query_parameters
    #   <p>The parameters used in a SQL statement.</p>
    #
    #   @return [Array<SqlParameter>]
    #
    # @!attribute is_batch_statement
    #   <p>A value that indicates whether the statement is a batch query request.</p>
    #
    #   @return [Boolean]
    #
    StatementData = ::Struct.new(
      :id,
      :query_string,
      :query_strings,
      :secret_arn,
      :status,
      :statement_name,
      :created_at,
      :updated_at,
      :query_parameters,
      :is_batch_statement,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # Includes enum constants for StatementStatusString
    #
    module StatementStatusString
      # No documentation available.
      #
      SUBMITTED = "SUBMITTED"

      # No documentation available.
      #
      PICKED = "PICKED"

      # No documentation available.
      #
      STARTED = "STARTED"

      # No documentation available.
      #
      FINISHED = "FINISHED"

      # No documentation available.
      #
      ABORTED = "ABORTED"

      # No documentation available.
      #
      FAILED = "FAILED"
    end

    # Includes enum constants for StatusString
    #
    module StatusString
      # No documentation available.
      #
      SUBMITTED = "SUBMITTED"

      # No documentation available.
      #
      PICKED = "PICKED"

      # No documentation available.
      #
      STARTED = "STARTED"

      # No documentation available.
      #
      FINISHED = "FINISHED"

      # No documentation available.
      #
      ABORTED = "ABORTED"

      # No documentation available.
      #
      FAILED = "FAILED"

      # No documentation available.
      #
      ALL = "ALL"
    end

    # <p>Information about an SQL statement.</p>
    #
    # @!attribute id
    #   <p>The identifier of the SQL statement. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
    #         A suffix indicates the number of the SQL statement.
    #         For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query.</p>
    #
    #   @return [String]
    #
    # @!attribute duration
    #   <p>The amount of time in nanoseconds that the statement ran.</p>
    #
    #   @return [Integer]
    #
    # @!attribute error
    #   <p>The error message from the cluster if the SQL statement encountered an error while running.</p>
    #
    #   @return [String]
    #
    # @!attribute status
    #   <p>The status of the SQL statement. An
    #         example is the that the SQL statement finished.
    #         </p>
    #
    #   Enum, one of: ["SUBMITTED", "PICKED", "STARTED", "FINISHED", "ABORTED", "FAILED"]
    #
    #   @return [String]
    #
    # @!attribute created_at
    #   <p>The date and time (UTC) the statement was created. </p>
    #
    #   @return [Time]
    #
    # @!attribute updated_at
    #   <p>The date and time (UTC) that the statement metadata was last updated.</p>
    #
    #   @return [Time]
    #
    # @!attribute query_string
    #   <p>The SQL statement text.</p>
    #
    #   @return [String]
    #
    # @!attribute result_rows
    #   <p>Either the number of rows returned from the SQL statement or the number of rows affected.
    #         If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others.
    #         A <code>-1</code> indicates the value is null.</p>
    #
    #   @return [Integer]
    #
    # @!attribute result_size
    #   <p>The size in bytes of the returned results. A <code>-1</code> indicates the value is null.</p>
    #
    #   @return [Integer]
    #
    # @!attribute redshift_query_id
    #   <p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    #
    #   @return [Integer]
    #
    # @!attribute has_result_set
    #   <p>A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set.</p>
    #
    #   @return [Boolean]
    #
    SubStatementData = ::Struct.new(
      :id,
      :duration,
      :error,
      :status,
      :created_at,
      :updated_at,
      :query_string,
      :result_rows,
      :result_size,
      :redshift_query_id,
      :has_result_set,
      keyword_init: true
    ) do
      include Hearth::Structure
      def initialize(*)
        super
        self.duration ||= 0
        self.result_rows ||= 0
        self.result_size ||= 0
        self.redshift_query_id ||= 0
      end

    end

    # <p>The properties of a table. </p>
    #
    # @!attribute name
    #   <p>The name of the table. </p>
    #
    #   @return [String]
    #
    # @!attribute type
    #   <p>The type of the table. Possible values include TABLE, VIEW, SYSTEM TABLE, GLOBAL
    #         TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM. </p>
    #
    #   @return [String]
    #
    # @!attribute schema
    #   <p>The schema containing the table. </p>
    #
    #   @return [String]
    #
    TableMember = ::Struct.new(
      :name,
      :type,
      :schema,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The Amazon Redshift Data API operation failed due to invalid input. </p>
    #
    # @!attribute message
    #   <p>The exception message.</p>
    #
    #   @return [String]
    #
    ValidationException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

  end
end
