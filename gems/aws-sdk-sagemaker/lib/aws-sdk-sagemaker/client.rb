# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/awslabs/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

require_relative 'middleware/request_id'

module AWS::SDK::SageMaker
  # An API client for SageMaker
  # See {#initialize} for a full list of supported configuration options
  # <p>Provides APIs for creating and managing SageMaker resources. </p>
  #         <p>Other Resources:</p>
  #         <ul>
  #             <li>
  #                 <p>
  #                   <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user">SageMaker Developer
  #                         Guide</a>
  #                </p>
  #             </li>
  #             <li>
  #                 <p>
  #                   <a href="https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html">Amazon Augmented AI
  #                         Runtime API Reference</a>
  #                </p>
  #             </li>
  #          </ul>
  #
  class Client
    include Hearth::ClientStubs

    @middleware = Hearth::MiddlewareBuilder.new

    def self.middleware
      @middleware
    end

    # @param [Config] config
    #   An instance of {Config}
    #
    def initialize(config = AWS::SDK::SageMaker::Config.new, options = {})
      @config = config
      @middleware = Hearth::MiddlewareBuilder.new(options[:middleware])
      @stubs = Hearth::Stubbing::Stubs.new
      @retry_quota = Hearth::Retry::RetryQuota.new
      @client_rate_limiter = Hearth::Retry::ClientRateLimiter.new
    end

    # <p>Creates an <i>association</i> between the source and the destination. A
    #         source can be associated with multiple destinations, and a destination can be associated
    #         with multiple sources. An association is a lineage tracking entity. For more information, see
    #         <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
    #           ML Lineage Tracking</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::AddAssociationInput}.
    #
    # @option params [String] :source_arn
    #   <p>The ARN of the source.</p>
    #
    # @option params [String] :destination_arn
    #   <p>The Amazon Resource Name (ARN) of the destination.</p>
    #
    # @option params [String] :association_type
    #   <p>The type of association. The following are suggested uses for each type. Amazon SageMaker
    #           places no restrictions on their use.</p>
    #            <ul>
    #               <li>
    #                  <p>ContributedTo - The source contributed to the destination or had a part in
    #               enabling the destination. For example, the training data contributed to the training
    #               job.</p>
    #               </li>
    #               <li>
    #                  <p>AssociatedWith - The source is connected to the destination. For example, an
    #               approval workflow is associated with a model deployment.</p>
    #               </li>
    #               <li>
    #                  <p>DerivedFrom - The destination is a modification of the source. For example, a digest
    #               output of a channel input for a processing job is derived from the original inputs.</p>
    #               </li>
    #               <li>
    #                  <p>Produced - The source generated the destination. For example, a training job
    #               produced a model artifact.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::AddAssociationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.add_association(
    #     source_arn: 'SourceArn', # required
    #     destination_arn: 'DestinationArn', # required
    #     association_type: 'ContributedTo' # accepts ["ContributedTo", "AssociatedWith", "DerivedFrom", "Produced"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AddAssociationOutput
    #   resp.data.source_arn #=> String
    #   resp.data.destination_arn #=> String
    #
    def add_association(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AddAssociationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AddAssociationInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AddAssociation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceNotFound]),
        data_parser: Parsers::AddAssociation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::AddAssociation,
        stubs: @stubs,
        params_class: Params::AddAssociationOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :add_association
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Adds or overwrites one or more tags for the specified SageMaker resource. You can add
    #             tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform
    #             jobs, models, labeling jobs, work teams, endpoint configurations, and
    #             endpoints.</p>
    #         <p>Each tag consists of a key and an optional value. Tag keys must be unique per
    #             resource. For more information about tags, see For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Amazon Web Services
    #                 Tagging Strategies</a>.</p>
    #         <note>
    #             <p>Tags that you add to a hyperparameter tuning job by calling this API are also
    #                 added to any training jobs that the hyperparameter tuning job launches after you
    #                 call this API, but not to training jobs that the hyperparameter tuning job launched
    #                 before you called this API. To make sure that the tags associated with a
    #                 hyperparameter tuning job are also added to all training jobs that the
    #                 hyperparameter tuning job launches, add the tags when you first create the tuning
    #                 job by specifying them in the <code>Tags</code> parameter of <a>CreateHyperParameterTuningJob</a>
    #             </p>
    #         </note>
    #         <note>
    #             <p>Tags that you add to a SageMaker Studio Domain or User Profile by calling this API
    #                 are also added to any Apps that the Domain or User Profile launches after you call
    #                 this API, but not to Apps that the Domain or User Profile launched before you called
    #                 this API. To make sure that the tags associated with a Domain or User Profile are
    #                 also added to all Apps that the Domain or User Profile launches, add the tags when
    #                 you first create the Domain or User Profile by specifying them in the
    #                     <code>Tags</code> parameter of <a>CreateDomain</a> or <a>CreateUserProfile</a>.</p>
    #         </note>
    #
    # @param [Hash] params
    #   See {Types::AddTagsInput}.
    #
    # @option params [String] :resource_arn
    #   <p>The Amazon Resource Name (ARN) of the resource that you want to tag.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
    #               different ways, for example, by purpose, owner, or environment. For more information,
    #               see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
    #                   Resources</a>.</p>
    #
    # @return [Types::AddTagsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.add_tags(
    #     resource_arn: 'ResourceArn', # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AddTagsOutput
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #
    def add_tags(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AddTagsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AddTagsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AddTags
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AddTags
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::AddTags,
        stubs: @stubs,
        params_class: Params::AddTagsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :add_tags
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Associates a trial component with a trial. A trial component can be associated with
    #       multiple trials. To disassociate a trial component from a trial, call the <a>DisassociateTrialComponent</a> API.</p>
    #
    # @param [Hash] params
    #   See {Types::AssociateTrialComponentInput}.
    #
    # @option params [String] :trial_component_name
    #   <p>The name of the component to associated with the trial.</p>
    #
    # @option params [String] :trial_name
    #   <p>The name of the trial to associate with.</p>
    #
    # @return [Types::AssociateTrialComponentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.associate_trial_component(
    #     trial_component_name: 'TrialComponentName', # required
    #     trial_name: 'TrialName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssociateTrialComponentOutput
    #   resp.data.trial_component_arn #=> String
    #   resp.data.trial_arn #=> String
    #
    def associate_trial_component(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssociateTrialComponentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssociateTrialComponentInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssociateTrialComponent
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceNotFound]),
        data_parser: Parsers::AssociateTrialComponent
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::AssociateTrialComponent,
        stubs: @stubs,
        params_class: Params::AssociateTrialComponentOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :associate_trial_component
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>This action batch describes a list of versioned model packages</p>
    #
    # @param [Hash] params
    #   See {Types::BatchDescribeModelPackageInput}.
    #
    # @option params [Array<String>] :model_package_arn_list
    #   <p>The list of Amazon Resource Name (ARN) of the model package groups.</p>
    #
    # @return [Types::BatchDescribeModelPackageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.batch_describe_model_package(
    #     model_package_arn_list: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::BatchDescribeModelPackageOutput
    #   resp.data.model_package_summaries #=> Hash<String, BatchDescribeModelPackageSummary>
    #   resp.data.model_package_summaries['key'] #=> Types::BatchDescribeModelPackageSummary
    #   resp.data.model_package_summaries['key'].model_package_group_name #=> String
    #   resp.data.model_package_summaries['key'].model_package_version #=> Integer
    #   resp.data.model_package_summaries['key'].model_package_arn #=> String
    #   resp.data.model_package_summaries['key'].model_package_description #=> String
    #   resp.data.model_package_summaries['key'].creation_time #=> Time
    #   resp.data.model_package_summaries['key'].inference_specification #=> Types::InferenceSpecification
    #   resp.data.model_package_summaries['key'].inference_specification.containers #=> Array<ModelPackageContainerDefinition>
    #   resp.data.model_package_summaries['key'].inference_specification.containers[0] #=> Types::ModelPackageContainerDefinition
    #   resp.data.model_package_summaries['key'].inference_specification.containers[0].container_hostname #=> String
    #   resp.data.model_package_summaries['key'].inference_specification.containers[0].image #=> String
    #   resp.data.model_package_summaries['key'].inference_specification.containers[0].image_digest #=> String
    #   resp.data.model_package_summaries['key'].inference_specification.containers[0].model_data_url #=> String
    #   resp.data.model_package_summaries['key'].inference_specification.containers[0].product_id #=> String
    #   resp.data.model_package_summaries['key'].inference_specification.containers[0].environment #=> Hash<String, String>
    #   resp.data.model_package_summaries['key'].inference_specification.containers[0].environment['key'] #=> String
    #   resp.data.model_package_summaries['key'].inference_specification.containers[0].model_input #=> Types::ModelInput
    #   resp.data.model_package_summaries['key'].inference_specification.containers[0].model_input.data_input_config #=> String
    #   resp.data.model_package_summaries['key'].inference_specification.containers[0].framework #=> String
    #   resp.data.model_package_summaries['key'].inference_specification.containers[0].framework_version #=> String
    #   resp.data.model_package_summaries['key'].inference_specification.containers[0].nearest_model_name #=> String
    #   resp.data.model_package_summaries['key'].inference_specification.supported_transform_instance_types #=> Array<String>
    #   resp.data.model_package_summaries['key'].inference_specification.supported_transform_instance_types[0] #=> String, one of ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.model_package_summaries['key'].inference_specification.supported_realtime_inference_instance_types #=> Array<String>
    #   resp.data.model_package_summaries['key'].inference_specification.supported_realtime_inference_instance_types[0] #=> String, one of ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.12xlarge", "ml.m5d.24xlarge", "ml.c4.large", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.large", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.12xlarge", "ml.r5.24xlarge", "ml.r5d.large", "ml.r5d.xlarge", "ml.r5d.2xlarge", "ml.r5d.4xlarge", "ml.r5d.12xlarge", "ml.r5d.24xlarge", "ml.inf1.xlarge", "ml.inf1.2xlarge", "ml.inf1.6xlarge", "ml.inf1.24xlarge"]
    #   resp.data.model_package_summaries['key'].inference_specification.supported_content_types #=> Array<String>
    #   resp.data.model_package_summaries['key'].inference_specification.supported_content_types[0] #=> String
    #   resp.data.model_package_summaries['key'].inference_specification.supported_response_mime_types #=> Array<String>
    #   resp.data.model_package_summaries['key'].inference_specification.supported_response_mime_types[0] #=> String
    #   resp.data.model_package_summaries['key'].model_package_status #=> String, one of ["Pending", "InProgress", "Completed", "Failed", "Deleting"]
    #   resp.data.model_package_summaries['key'].model_approval_status #=> String, one of ["Approved", "Rejected", "PendingManualApproval"]
    #   resp.data.batch_describe_model_package_error_map #=> Hash<String, BatchDescribeModelPackageError>
    #   resp.data.batch_describe_model_package_error_map['key'] #=> Types::BatchDescribeModelPackageError
    #   resp.data.batch_describe_model_package_error_map['key'].error_code #=> String
    #   resp.data.batch_describe_model_package_error_map['key'].error_response #=> String
    #
    def batch_describe_model_package(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::BatchDescribeModelPackageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::BatchDescribeModelPackageInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::BatchDescribeModelPackage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::BatchDescribeModelPackage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::BatchDescribeModelPackage,
        stubs: @stubs,
        params_class: Params::BatchDescribeModelPackageOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :batch_describe_model_package
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an <i>action</i>. An action is a lineage tracking entity that
    #         represents an action or activity. For example, a model deployment or an HPO job.
    #         Generally, an action involves at least one input or output artifact. For more information, see
    #         <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
    #           ML Lineage Tracking</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateActionInput}.
    #
    # @option params [String] :action_name
    #   <p>The name of the action. Must be unique to your account in an Amazon Web Services Region.</p>
    #
    # @option params [ActionSource] :source
    #   <p>The source type, ID, and URI.</p>
    #
    # @option params [String] :action_type
    #   <p>The action type.</p>
    #
    # @option params [String] :description
    #   <p>The description of the action.</p>
    #
    # @option params [String] :status
    #   <p>The status of the action.</p>
    #
    # @option params [Hash<String, String>] :properties
    #   <p>A list of properties to add to the action.</p>
    #
    # @option params [MetadataProperties] :metadata_properties
    #   <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>A list of tags to apply to the action.</p>
    #
    # @return [Types::CreateActionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_action(
    #     action_name: 'ActionName', # required
    #     source: {
    #       source_uri: 'SourceUri', # required
    #       source_type: 'SourceType',
    #       source_id: 'SourceId'
    #     }, # required
    #     action_type: 'ActionType', # required
    #     description: 'Description',
    #     status: 'Unknown', # accepts ["Unknown", "InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #     properties: {
    #       'key' => 'value'
    #     },
    #     metadata_properties: {
    #       commit_id: 'CommitId',
    #       repository: 'Repository',
    #       generated_by: 'GeneratedBy',
    #       project_id: 'ProjectId'
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateActionOutput
    #   resp.data.action_arn #=> String
    #
    def create_action(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateActionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateActionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateAction
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::CreateAction
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateAction,
        stubs: @stubs,
        params_class: Params::CreateActionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_action
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Create a machine learning algorithm that you can use in SageMaker and list in the Amazon Web Services
    #             Marketplace.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateAlgorithmInput}.
    #
    # @option params [String] :algorithm_name
    #   <p>The name of the algorithm.</p>
    #
    # @option params [String] :algorithm_description
    #   <p>A description of the algorithm.</p>
    #
    # @option params [TrainingSpecification] :training_specification
    #   <p>Specifies details about training jobs run by this algorithm, including the
    #               following:</p>
    #           <ul>
    #               <li>
    #                   <p>The Amazon ECR path of the container and the version digest of the
    #                       algorithm.</p>
    #               </li>
    #               <li>
    #                   <p>The hyperparameters that the algorithm supports.</p>
    #               </li>
    #               <li>
    #                   <p>The instance types that the algorithm supports for training.</p>
    #               </li>
    #               <li>
    #                   <p>Whether the algorithm supports distributed training.</p>
    #               </li>
    #               <li>
    #                   <p>The metrics that the algorithm emits to Amazon CloudWatch.</p>
    #               </li>
    #               <li>
    #                   <p>Which metrics that the algorithm emits can be used as the objective metric for
    #                       hyperparameter tuning jobs.</p>
    #               </li>
    #               <li>
    #                   <p>The input channels that the algorithm supports for training data. For example,
    #                       an algorithm might support <code>train</code>, <code>validation</code>, and
    #                           <code>test</code> channels.</p>
    #               </li>
    #            </ul>
    #
    # @option params [InferenceSpecification] :inference_specification
    #   <p>Specifies details about inference jobs that the algorithm runs, including the
    #               following:</p>
    #           <ul>
    #               <li>
    #                   <p>The Amazon ECR paths of containers that contain the inference code and model
    #                       artifacts.</p>
    #               </li>
    #               <li>
    #                   <p>The instance types that the algorithm supports for transform jobs and
    #                       real-time endpoints used for inference.</p>
    #               </li>
    #               <li>
    #                   <p>The input and output content formats that the algorithm supports for
    #                       inference.</p>
    #               </li>
    #            </ul>
    #
    # @option params [AlgorithmValidationSpecification] :validation_specification
    #   <p>Specifies configurations for one or more training jobs and that SageMaker runs to test the
    #               algorithm's training code and, optionally, one or more batch transform jobs that SageMaker
    #               runs to test the algorithm's inference code.</p>
    #
    # @option params [Boolean] :certify_for_marketplace
    #   <p>Whether to certify the algorithm so that it can be listed in Amazon Web Services Marketplace.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
    #               different ways, for example, by purpose, owner, or environment. For more information,
    #               see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
    #                   Resources</a>.</p>
    #
    # @return [Types::CreateAlgorithmOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_algorithm(
    #     algorithm_name: 'AlgorithmName', # required
    #     algorithm_description: 'AlgorithmDescription',
    #     training_specification: {
    #       training_image: 'TrainingImage', # required
    #       training_image_digest: 'TrainingImageDigest',
    #       supported_hyper_parameters: [
    #         {
    #           name: 'Name', # required
    #           description: 'Description',
    #           type: 'Integer', # required - accepts ["Integer", "Continuous", "Categorical", "FreeText"]
    #           range: {
    #             integer_parameter_range_specification: {
    #               min_value: 'MinValue', # required
    #               max_value: 'MaxValue' # required
    #             },
    #             continuous_parameter_range_specification: {
    #               min_value: 'MinValue', # required
    #               max_value: 'MaxValue' # required
    #             },
    #             categorical_parameter_range_specification: {
    #               values: [
    #                 'member'
    #               ] # required
    #             }
    #           },
    #           is_tunable: false,
    #           is_required: false,
    #           default_value: 'DefaultValue'
    #         }
    #       ],
    #       supported_training_instance_types: [
    #         'ml.m4.xlarge' # accepts ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.p4d.24xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5n.xlarge", "ml.c5n.2xlarge", "ml.c5n.4xlarge", "ml.c5n.9xlarge", "ml.c5n.18xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #       ], # required
    #       supports_distributed_training: false,
    #       metric_definitions: [
    #         {
    #           name: 'Name', # required
    #           regex: 'Regex' # required
    #         }
    #       ],
    #       training_channels: [
    #         {
    #           name: 'Name', # required
    #           description: 'Description',
    #           is_required: false,
    #           supported_content_types: [
    #             'member'
    #           ], # required
    #           supported_compression_types: [
    #             'None' # accepts ["None", "Gzip"]
    #           ],
    #           supported_input_modes: [
    #             'Pipe' # accepts ["Pipe", "File", "FastFile"]
    #           ] # required
    #         }
    #       ], # required
    #       supported_tuning_job_objective_metrics: [
    #         {
    #           type: 'Maximize', # required - accepts ["Maximize", "Minimize"]
    #           metric_name: 'MetricName' # required
    #         }
    #       ]
    #     }, # required
    #     inference_specification: {
    #       containers: [
    #         {
    #           container_hostname: 'ContainerHostname',
    #           image: 'Image', # required
    #           image_digest: 'ImageDigest',
    #           model_data_url: 'ModelDataUrl',
    #           product_id: 'ProductId',
    #           environment: {
    #             'key' => 'value'
    #           },
    #           model_input: {
    #             data_input_config: 'DataInputConfig' # required
    #           },
    #           framework: 'Framework',
    #           framework_version: 'FrameworkVersion',
    #           nearest_model_name: 'NearestModelName'
    #         }
    #       ], # required
    #       supported_transform_instance_types: [
    #         'ml.m4.xlarge' # accepts ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #       ],
    #       supported_realtime_inference_instance_types: [
    #         'ml.t2.medium' # accepts ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.12xlarge", "ml.m5d.24xlarge", "ml.c4.large", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.large", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.12xlarge", "ml.r5.24xlarge", "ml.r5d.large", "ml.r5d.xlarge", "ml.r5d.2xlarge", "ml.r5d.4xlarge", "ml.r5d.12xlarge", "ml.r5d.24xlarge", "ml.inf1.xlarge", "ml.inf1.2xlarge", "ml.inf1.6xlarge", "ml.inf1.24xlarge"]
    #       ],
    #       supported_response_mime_types: [
    #         'member'
    #       ] # required
    #     },
    #     validation_specification: {
    #       validation_role: 'ValidationRole', # required
    #       validation_profiles: [
    #         {
    #           profile_name: 'ProfileName', # required
    #           training_job_definition: {
    #             training_input_mode: 'Pipe', # required - accepts ["Pipe", "File", "FastFile"]
    #             hyper_parameters: {
    #               'key' => 'value'
    #             },
    #             input_data_config: [
    #               {
    #                 channel_name: 'ChannelName', # required
    #                 data_source: {
    #                   s3_data_source: {
    #                     s3_data_type: 'ManifestFile', # required - accepts ["ManifestFile", "S3Prefix", "AugmentedManifestFile"]
    #                     s3_uri: 'S3Uri', # required
    #                     s3_data_distribution_type: 'FullyReplicated', # accepts ["FullyReplicated", "ShardedByS3Key"]
    #                     attribute_names: [
    #                       'member'
    #                     ]
    #                   },
    #                   file_system_data_source: {
    #                     file_system_id: 'FileSystemId', # required
    #                     file_system_access_mode: 'rw', # required - accepts ["rw", "ro"]
    #                     file_system_type: 'EFS', # required - accepts ["EFS", "FSxLustre"]
    #                     directory_path: 'DirectoryPath' # required
    #                   }
    #                 }, # required
    #                 content_type: 'ContentType',
    #                 compression_type: 'None', # accepts ["None", "Gzip"]
    #                 record_wrapper_type: 'None', # accepts ["None", "RecordIO"]
    #                 input_mode: 'Pipe', # accepts ["Pipe", "File", "FastFile"]
    #                 shuffle_config: {
    #                   seed: 1 # required
    #                 }
    #               }
    #             ], # required
    #             output_data_config: {
    #               kms_key_id: 'KmsKeyId',
    #               s3_output_path: 'S3OutputPath' # required
    #             }, # required
    #             resource_config: {
    #               instance_type: 'ml.m4.xlarge', # required - accepts ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.p4d.24xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5n.xlarge", "ml.c5n.2xlarge", "ml.c5n.4xlarge", "ml.c5n.9xlarge", "ml.c5n.18xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #               instance_count: 1, # required
    #               volume_size_in_gb: 1, # required
    #               volume_kms_key_id: 'VolumeKmsKeyId'
    #             }, # required
    #             stopping_condition: {
    #               max_runtime_in_seconds: 1,
    #               max_wait_time_in_seconds: 1
    #             } # required
    #           }, # required
    #           transform_job_definition: {
    #             max_concurrent_transforms: 1,
    #             max_payload_in_mb: 1,
    #             batch_strategy: 'MultiRecord', # accepts ["MultiRecord", "SingleRecord"]
    #             environment: {
    #               'key' => 'value'
    #             },
    #             transform_input: {
    #               data_source: {
    #                 s3_data_source: {
    #                   s3_data_type: 'ManifestFile', # required - accepts ["ManifestFile", "S3Prefix", "AugmentedManifestFile"]
    #                   s3_uri: 'S3Uri' # required
    #                 } # required
    #               }, # required
    #               content_type: 'ContentType',
    #               compression_type: 'None', # accepts ["None", "Gzip"]
    #               split_type: 'None' # accepts ["None", "Line", "RecordIO", "TFRecord"]
    #             }, # required
    #             transform_output: {
    #               s3_output_path: 'S3OutputPath', # required
    #               accept: 'Accept',
    #               assemble_with: 'None', # accepts ["None", "Line"]
    #               kms_key_id: 'KmsKeyId'
    #             }, # required
    #             transform_resources: {
    #               instance_type: 'ml.m4.xlarge', # required - accepts ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #               instance_count: 1, # required
    #               volume_kms_key_id: 'VolumeKmsKeyId'
    #             } # required
    #           }
    #         }
    #       ] # required
    #     },
    #     certify_for_marketplace: false,
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateAlgorithmOutput
    #   resp.data.algorithm_arn #=> String
    #
    def create_algorithm(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateAlgorithmInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateAlgorithmInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateAlgorithm
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateAlgorithm
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateAlgorithm,
        stubs: @stubs,
        params_class: Params::CreateAlgorithmOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_algorithm
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a running app for the specified UserProfile. Supported apps are
    #       <code>JupyterServer</code> and <code>KernelGateway</code>. This operation is automatically
    #       invoked by Amazon SageMaker Studio upon access to the associated Domain, and when new kernel
    #       configurations are selected by the user. A user may have multiple Apps active simultaneously.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateAppInput}.
    #
    # @option params [String] :domain_id
    #   <p>The domain ID.</p>
    #
    # @option params [String] :user_profile_name
    #   <p>The user profile name.</p>
    #
    # @option params [String] :app_type
    #   <p>The type of app. Supported apps are <code>JupyterServer</code> and
    #           <code>KernelGateway</code>. <code>TensorBoard</code> is not supported.</p>
    #
    # @option params [String] :app_name
    #   <p>The name of the app.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>Each tag consists of a key and an optional value.
    #            Tag keys must be unique per resource.</p>
    #
    # @option params [ResourceSpec] :resource_spec
    #   <p>The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.</p>
    #
    # @return [Types::CreateAppOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_app(
    #     domain_id: 'DomainId', # required
    #     user_profile_name: 'UserProfileName', # required
    #     app_type: 'JupyterServer', # required - accepts ["JupyterServer", "KernelGateway", "TensorBoard", "RStudioServerPro", "RSessionGateway"]
    #     app_name: 'AppName', # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     resource_spec: {
    #       sage_maker_image_arn: 'SageMakerImageArn',
    #       sage_maker_image_version_arn: 'SageMakerImageVersionArn',
    #       instance_type: 'system', # accepts ["system", "ml.t3.micro", "ml.t3.small", "ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.8xlarge", "ml.m5.12xlarge", "ml.m5.16xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.8xlarge", "ml.m5d.12xlarge", "ml.m5d.16xlarge", "ml.m5d.24xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.12xlarge", "ml.c5.18xlarge", "ml.c5.24xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #       lifecycle_config_arn: 'LifecycleConfigArn'
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateAppOutput
    #   resp.data.app_arn #=> String
    #
    def create_app(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateAppInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateAppInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateApp
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateApp
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateApp,
        stubs: @stubs,
        params_class: Params::CreateAppOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_app
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a configuration for running a SageMaker image as a KernelGateway app. The
    #         configuration specifies the Amazon Elastic File System (EFS) storage volume on the image, and a list of the
    #         kernels in the image.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateAppImageConfigInput}.
    #
    # @option params [String] :app_image_config_name
    #   <p>The name of the AppImageConfig. Must be unique to your account.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>A list of tags to apply to the AppImageConfig.</p>
    #
    # @option params [KernelGatewayImageConfig] :kernel_gateway_image_config
    #   <p>The KernelGatewayImageConfig.</p>
    #
    # @return [Types::CreateAppImageConfigOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_app_image_config(
    #     app_image_config_name: 'AppImageConfigName', # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     kernel_gateway_image_config: {
    #       kernel_specs: [
    #         {
    #           name: 'Name', # required
    #           display_name: 'DisplayName'
    #         }
    #       ], # required
    #       file_system_config: {
    #         mount_path: 'MountPath',
    #         default_uid: 1,
    #         default_gid: 1
    #       }
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateAppImageConfigOutput
    #   resp.data.app_image_config_arn #=> String
    #
    def create_app_image_config(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateAppImageConfigInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateAppImageConfigInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateAppImageConfig
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceInUse]),
        data_parser: Parsers::CreateAppImageConfig
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateAppImageConfig,
        stubs: @stubs,
        params_class: Params::CreateAppImageConfigOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_app_image_config
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an <i>artifact</i>. An artifact is a lineage tracking entity that
    #         represents a URI addressable object or data. Some examples are the S3 URI of a dataset and
    #         the ECR registry path of an image. For more information, see
    #         <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
    #           ML Lineage Tracking</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateArtifactInput}.
    #
    # @option params [String] :artifact_name
    #   <p>The name of the artifact. Must be unique to your account in an Amazon Web Services Region.</p>
    #
    # @option params [ArtifactSource] :source
    #   <p>The ID, ID type, and URI of the source.</p>
    #
    # @option params [String] :artifact_type
    #   <p>The artifact type.</p>
    #
    # @option params [Hash<String, String>] :properties
    #   <p>A list of properties to add to the artifact.</p>
    #
    # @option params [MetadataProperties] :metadata_properties
    #   <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>A list of tags to apply to the artifact.</p>
    #
    # @return [Types::CreateArtifactOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_artifact(
    #     artifact_name: 'ArtifactName',
    #     source: {
    #       source_uri: 'SourceUri', # required
    #       source_types: [
    #         {
    #           source_id_type: 'MD5Hash', # required - accepts ["MD5Hash", "S3ETag", "S3Version", "Custom"]
    #           value: 'Value' # required
    #         }
    #       ]
    #     }, # required
    #     artifact_type: 'ArtifactType', # required
    #     properties: {
    #       'key' => 'value'
    #     },
    #     metadata_properties: {
    #       commit_id: 'CommitId',
    #       repository: 'Repository',
    #       generated_by: 'GeneratedBy',
    #       project_id: 'ProjectId'
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateArtifactOutput
    #   resp.data.artifact_arn #=> String
    #
    def create_artifact(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateArtifactInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateArtifactInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateArtifact
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::CreateArtifact
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateArtifact,
        stubs: @stubs,
        params_class: Params::CreateArtifactOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_artifact
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an Autopilot job.</p>
    #          <p>Find the best-performing model after you run an Autopilot job by calling .</p>
    #          <p>For information about how to use Autopilot, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development.html">Automate Model
    #             Development with Amazon SageMaker Autopilot</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateAutoMLJobInput}.
    #
    # @option params [String] :auto_ml_job_name
    #   <p>Identifies an Autopilot job. The name must be unique to your account and is
    #            case-insensitive.</p>
    #
    # @option params [Array<AutoMLChannel>] :input_data_config
    #   <p>An array of channel objects that describes the input data and its location. Each channel
    #            is a named input source. Similar to <code>InputDataConfig</code> supported by . Format(s) supported: CSV, Parquet.
    #            A minimum of 500 rows is required for the training dataset. There is not a minimum number
    #            of rows required for the validation dataset.</p>
    #
    # @option params [AutoMLOutputDataConfig] :output_data_config
    #   <p>Provides information about encryption and the Amazon S3 output path needed to store artifacts
    #            from an AutoML job. Format(s) supported: CSV.</p>
    #
    # @option params [String] :problem_type
    #   <p>Defines the type of supervised learning available for the candidates. For more
    #            information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-problem-types.html">
    #               Amazon SageMaker Autopilot problem types and algorithm support</a>.</p>
    #
    # @option params [AutoMLJobObjective] :auto_ml_job_objective
    #   <p>Defines the objective metric used to measure the predictive quality of an AutoML job. You
    #            provide an <a>AutoMLJobObjective$MetricName</a> and Autopilot infers whether to
    #            minimize or maximize it.</p>
    #
    # @option params [AutoMLJobConfig] :auto_ml_job_config
    #   <p>A collection of settings used to configure an AutoML job.</p>
    #
    # @option params [String] :role_arn
    #   <p>The ARN of the role that is used to access the data.</p>
    #
    # @option params [Boolean] :generate_candidate_definitions_only
    #   <p>Generates possible candidates without training the models. A candidate is a combination
    #            of data preprocessors, algorithms, and algorithm parameter settings.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>Each tag consists of a key and an optional value. Tag keys must be unique per
    #            resource.</p>
    #
    # @option params [ModelDeployConfig] :model_deploy_config
    #   <p>Specifies how to generate the endpoint name for an automatic one-click Autopilot model
    #            deployment.</p>
    #
    # @return [Types::CreateAutoMLJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_auto_ml_job(
    #     auto_ml_job_name: 'AutoMLJobName', # required
    #     input_data_config: [
    #       {
    #         data_source: {
    #           s3_data_source: {
    #             s3_data_type: 'ManifestFile', # required - accepts ["ManifestFile", "S3Prefix"]
    #             s3_uri: 'S3Uri' # required
    #           } # required
    #         }, # required
    #         compression_type: 'None', # accepts ["None", "Gzip"]
    #         target_attribute_name: 'TargetAttributeName', # required
    #         content_type: 'ContentType',
    #         channel_type: 'training' # accepts ["training", "validation"]
    #       }
    #     ], # required
    #     output_data_config: {
    #       kms_key_id: 'KmsKeyId',
    #       s3_output_path: 'S3OutputPath' # required
    #     }, # required
    #     problem_type: 'BinaryClassification', # accepts ["BinaryClassification", "MulticlassClassification", "Regression"]
    #     auto_ml_job_objective: {
    #       metric_name: 'Accuracy' # required - accepts ["Accuracy", "MSE", "F1", "F1macro", "AUC"]
    #     },
    #     auto_ml_job_config: {
    #       completion_criteria: {
    #         max_candidates: 1,
    #         max_runtime_per_training_job_in_seconds: 1,
    #         max_auto_ml_job_runtime_in_seconds: 1
    #       },
    #       security_config: {
    #         volume_kms_key_id: 'VolumeKmsKeyId',
    #         enable_inter_container_traffic_encryption: false,
    #         vpc_config: {
    #           security_group_ids: [
    #             'member'
    #           ], # required
    #           subnets: [
    #             'member'
    #           ] # required
    #         }
    #       },
    #       data_split_config: {
    #         validation_fraction: 1.0
    #       },
    #       candidate_generation_config: {
    #         feature_specification_s3_uri: 'FeatureSpecificationS3Uri'
    #       }
    #     },
    #     role_arn: 'RoleArn', # required
    #     generate_candidate_definitions_only: false,
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     model_deploy_config: {
    #       auto_generate_endpoint_name: false,
    #       endpoint_name: 'EndpointName'
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateAutoMLJobOutput
    #   resp.data.auto_ml_job_arn #=> String
    #
    def create_auto_ml_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateAutoMLJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateAutoMLJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateAutoMLJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateAutoMLJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateAutoMLJob,
        stubs: @stubs,
        params_class: Params::CreateAutoMLJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_auto_ml_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a Git repository as a resource in your SageMaker account. You can associate the
    #             repository with notebook instances so that you can use Git source control for the
    #             notebooks you create. The Git repository is a resource in your SageMaker account, so it can
    #             be associated with more than one notebook instance, and it persists independently from
    #             the lifecycle of any notebook instances it is associated with.</p>
    #         <p>The repository can be hosted either in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any
    #             other Git repository.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateCodeRepositoryInput}.
    #
    # @option params [String] :code_repository_name
    #   <p>The name of the Git repository. The name must have 1 to 63 characters. Valid
    #               characters are a-z, A-Z, 0-9, and - (hyphen).</p>
    #
    # @option params [GitConfig] :git_config
    #   <p>Specifies details about the repository, including the URL where the repository is
    #               located, the default branch, and credentials to use to access the repository.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
    #               different ways, for example, by purpose, owner, or environment. For more information,
    #               see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
    #                   Resources</a>.</p>
    #
    # @return [Types::CreateCodeRepositoryOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_code_repository(
    #     code_repository_name: 'CodeRepositoryName', # required
    #     git_config: {
    #       repository_url: 'RepositoryUrl', # required
    #       branch: 'Branch',
    #       secret_arn: 'SecretArn'
    #     }, # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateCodeRepositoryOutput
    #   resp.data.code_repository_arn #=> String
    #
    def create_code_repository(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateCodeRepositoryInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateCodeRepositoryInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateCodeRepository
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateCodeRepository
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateCodeRepository,
        stubs: @stubs,
        params_class: Params::CreateCodeRepositoryOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_code_repository
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Starts a model compilation job. After the model has been compiled, Amazon SageMaker saves the
    #             resulting model artifacts to an Amazon Simple Storage Service (Amazon S3) bucket that you specify. </p>
    #         <p>If
    #             you choose to host your model using Amazon SageMaker hosting services, you can use the resulting
    #             model artifacts as part of the model. You can also use the artifacts with
    #             Amazon Web Services
    #             IoT Greengrass. In that case, deploy them as an ML
    #             resource.</p>
    #         <p>In the request body, you provide the following:</p>
    #         <ul>
    #             <li>
    #                 <p>A name for the compilation job</p>
    #             </li>
    #             <li>
    #                 <p> Information about the input model artifacts </p>
    #             </li>
    #             <li>
    #                 <p>The output location for the compiled model and the device (target) that the
    #                     model runs on </p>
    #             </li>
    #             <li>
    #                 <p>The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker assumes to perform
    #                     the model compilation job. </p>
    #             </li>
    #          </ul>
    #         <p>You can also provide a <code>Tag</code> to track the model compilation job's resource
    #             use and costs. The response body contains the
    #                 <code>CompilationJobArn</code>
    #             for the compiled job.</p>
    #         <p>To stop a model compilation job, use <a>StopCompilationJob</a>. To get
    #             information about a particular model compilation job, use <a>DescribeCompilationJob</a>. To get information about multiple model
    #             compilation jobs, use <a>ListCompilationJobs</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateCompilationJobInput}.
    #
    # @option params [String] :compilation_job_name
    #   <p>A name for the model compilation job. The name must be unique within the Amazon Web Services Region
    #               and within your Amazon Web Services account. </p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on
    #               your behalf. </p>
    #           <p>During model compilation, Amazon SageMaker needs your permission to:</p>
    #           <ul>
    #               <li>
    #                   <p>Read input data from an S3 bucket</p>
    #               </li>
    #               <li>
    #                   <p>Write model artifacts to an S3 bucket</p>
    #               </li>
    #               <li>
    #                   <p>Write logs to Amazon CloudWatch Logs</p>
    #               </li>
    #               <li>
    #                   <p>Publish metrics to Amazon CloudWatch</p>
    #               </li>
    #            </ul>
    #           <p>You grant permissions for all of these tasks to an IAM role. To pass this role to
    #               Amazon SageMaker, the caller of this API must have the <code>iam:PassRole</code> permission. For
    #               more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">Amazon SageMaker
    #                   Roles.</a>
    #            </p>
    #
    # @option params [String] :model_package_version_arn
    #   <p>The Amazon Resource Name (ARN) of a versioned model package. Provide either a
    #       <code>ModelPackageVersionArn</code> or an <code>InputConfig</code> object in the
    #       request syntax. The presence of both objects in the <code>CreateCompilationJob</code>
    #       request will return an exception.</p>
    #
    # @option params [InputConfig] :input_config
    #   <p>Provides information about the location of input model artifacts, the name and shape
    #               of the expected data inputs, and the framework in which the model was trained.</p>
    #
    # @option params [OutputConfig] :output_config
    #   <p>Provides information about the output location for the compiled model and the target
    #               device the model runs on.</p>
    #
    # @option params [NeoVpcConfig] :vpc_config
    #   <p>A <a>VpcConfig</a> object that specifies the VPC that you want your
    #               compilation job to connect to. Control access to your models by
    #               configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Protect Compilation Jobs by Using an Amazon
    #                   Virtual Private Cloud</a>.</p>
    #
    # @option params [StoppingCondition] :stopping_condition
    #   <p>Specifies a limit to how long a model compilation job can run. When the job reaches
    #               the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training
    #               costs.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
    #               different ways, for example, by purpose, owner, or environment. For more information,
    #               see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
    #                   Resources</a>.</p>
    #
    # @return [Types::CreateCompilationJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_compilation_job(
    #     compilation_job_name: 'CompilationJobName', # required
    #     role_arn: 'RoleArn', # required
    #     model_package_version_arn: 'ModelPackageVersionArn',
    #     input_config: {
    #       s3_uri: 'S3Uri', # required
    #       data_input_config: 'DataInputConfig', # required
    #       framework: 'TENSORFLOW', # required - accepts ["TENSORFLOW", "KERAS", "MXNET", "ONNX", "PYTORCH", "XGBOOST", "TFLITE", "DARKNET", "SKLEARN"]
    #       framework_version: 'FrameworkVersion'
    #     },
    #     output_config: {
    #       s3_output_location: 'S3OutputLocation', # required
    #       target_device: 'lambda', # accepts ["lambda", "ml_m4", "ml_m5", "ml_c4", "ml_c5", "ml_p2", "ml_p3", "ml_g4dn", "ml_inf1", "ml_eia2", "jetson_tx1", "jetson_tx2", "jetson_nano", "jetson_xavier", "rasp3b", "imx8qm", "deeplens", "rk3399", "rk3288", "aisage", "sbe_c", "qcs605", "qcs603", "sitara_am57x", "amba_cv2", "amba_cv22", "amba_cv25", "x86_win32", "x86_win64", "coreml", "jacinto_tda4vm", "imx8mplus"]
    #       target_platform: {
    #         os: 'ANDROID', # required - accepts ["ANDROID", "LINUX"]
    #         arch: 'X86_64', # required - accepts ["X86_64", "X86", "ARM64", "ARM_EABI", "ARM_EABIHF"]
    #         accelerator: 'INTEL_GRAPHICS' # accepts ["INTEL_GRAPHICS", "MALI", "NVIDIA", "NNA"]
    #       },
    #       compiler_options: 'CompilerOptions',
    #       kms_key_id: 'KmsKeyId'
    #     }, # required
    #     vpc_config: {
    #       security_group_ids: [
    #         'member'
    #       ], # required
    #       subnets: [
    #         'member'
    #       ] # required
    #     },
    #     stopping_condition: {
    #       max_runtime_in_seconds: 1,
    #       max_wait_time_in_seconds: 1
    #     }, # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateCompilationJobOutput
    #   resp.data.compilation_job_arn #=> String
    #
    def create_compilation_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateCompilationJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateCompilationJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateCompilationJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateCompilationJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateCompilationJob,
        stubs: @stubs,
        params_class: Params::CreateCompilationJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_compilation_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a <i>context</i>. A context is a lineage tracking entity that
    #         represents a logical grouping of other tracking or experiment entities. Some examples are
    #         an endpoint and a model package. For more information, see
    #         <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker
    #           ML Lineage Tracking</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateContextInput}.
    #
    # @option params [String] :context_name
    #   <p>The name of the context. Must be unique to your account in an Amazon Web Services Region.</p>
    #
    # @option params [ContextSource] :source
    #   <p>The source type, ID, and URI.</p>
    #
    # @option params [String] :context_type
    #   <p>The context type.</p>
    #
    # @option params [String] :description
    #   <p>The description of the context.</p>
    #
    # @option params [Hash<String, String>] :properties
    #   <p>A list of properties to add to the context.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>A list of tags to apply to the context.</p>
    #
    # @return [Types::CreateContextOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_context(
    #     context_name: 'ContextName', # required
    #     source: {
    #       source_uri: 'SourceUri', # required
    #       source_type: 'SourceType',
    #       source_id: 'SourceId'
    #     }, # required
    #     context_type: 'ContextType', # required
    #     description: 'Description',
    #     properties: {
    #       'key' => 'value'
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateContextOutput
    #   resp.data.context_arn #=> String
    #
    def create_context(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateContextInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateContextInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateContext
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::CreateContext
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateContext,
        stubs: @stubs,
        params_class: Params::CreateContextOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_context
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a definition for a job that monitors data quality and drift. For information
    #          about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateDataQualityJobDefinitionInput}.
    #
    # @option params [String] :job_definition_name
    #   <p>The name for the monitoring job definition.</p>
    #
    # @option params [DataQualityBaselineConfig] :data_quality_baseline_config
    #   <p>Configures the constraints and baselines for the monitoring job.</p>
    #
    # @option params [DataQualityAppSpecification] :data_quality_app_specification
    #   <p>Specifies the container that runs the monitoring job.</p>
    #
    # @option params [DataQualityJobInput] :data_quality_job_input
    #   <p>A list of inputs for the monitoring job. Currently endpoints are supported as monitoring
    #            inputs.</p>
    #
    # @option params [MonitoringOutputConfig] :data_quality_job_output_config
    #   <p>The output configuration for monitoring jobs.</p>
    #
    # @option params [MonitoringResources] :job_resources
    #   <p>Identifies the resources to deploy for a monitoring job.</p>
    #
    # @option params [MonitoringNetworkConfig] :network_config
    #   <p>Specifies networking configuration for the monitoring job.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
    #            perform tasks on your behalf.</p>
    #
    # @option params [MonitoringStoppingCondition] :stopping_condition
    #   <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
    #               User Guide</i>.</p>
    #
    # @return [Types::CreateDataQualityJobDefinitionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_data_quality_job_definition(
    #     job_definition_name: 'JobDefinitionName', # required
    #     data_quality_baseline_config: {
    #       baselining_job_name: 'BaseliningJobName',
    #       constraints_resource: {
    #         s3_uri: 'S3Uri'
    #       },
    #       statistics_resource: {
    #         s3_uri: 'S3Uri'
    #       }
    #     },
    #     data_quality_app_specification: {
    #       image_uri: 'ImageUri', # required
    #       container_entrypoint: [
    #         'member'
    #       ],
    #       container_arguments: [
    #         'member'
    #       ],
    #       record_preprocessor_source_uri: 'RecordPreprocessorSourceUri',
    #       post_analytics_processor_source_uri: 'PostAnalyticsProcessorSourceUri',
    #       environment: {
    #         'key' => 'value'
    #       }
    #     }, # required
    #     data_quality_job_input: {
    #       endpoint_input: {
    #         endpoint_name: 'EndpointName', # required
    #         local_path: 'LocalPath', # required
    #         s3_input_mode: 'Pipe', # accepts ["Pipe", "File"]
    #         s3_data_distribution_type: 'FullyReplicated', # accepts ["FullyReplicated", "ShardedByS3Key"]
    #         features_attribute: 'FeaturesAttribute',
    #         inference_attribute: 'InferenceAttribute',
    #         probability_attribute: 'ProbabilityAttribute',
    #         probability_threshold_attribute: 1.0,
    #         start_time_offset: 'StartTimeOffset',
    #         end_time_offset: 'EndTimeOffset'
    #       } # required
    #     }, # required
    #     data_quality_job_output_config: {
    #       monitoring_outputs: [
    #         {
    #           s3_output: {
    #             s3_uri: 'S3Uri', # required
    #             local_path: 'LocalPath', # required
    #             s3_upload_mode: 'Continuous' # accepts ["Continuous", "EndOfJob"]
    #           } # required
    #         }
    #       ], # required
    #       kms_key_id: 'KmsKeyId'
    #     }, # required
    #     job_resources: {
    #       cluster_config: {
    #         instance_count: 1, # required
    #         instance_type: 'ml.t3.medium', # required - accepts ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #         volume_size_in_gb: 1, # required
    #         volume_kms_key_id: 'VolumeKmsKeyId'
    #       } # required
    #     }, # required
    #     network_config: {
    #       enable_inter_container_traffic_encryption: false,
    #       enable_network_isolation: false,
    #       vpc_config: {
    #         security_group_ids: [
    #           'member'
    #         ], # required
    #         subnets: [
    #           'member'
    #         ] # required
    #       }
    #     },
    #     role_arn: 'RoleArn', # required
    #     stopping_condition: {
    #       max_runtime_in_seconds: 1 # required
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateDataQualityJobDefinitionOutput
    #   resp.data.job_definition_arn #=> String
    #
    def create_data_quality_job_definition(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateDataQualityJobDefinitionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateDataQualityJobDefinitionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateDataQualityJobDefinition
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateDataQualityJobDefinition
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateDataQualityJobDefinition,
        stubs: @stubs,
        params_class: Params::CreateDataQualityJobDefinitionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_data_quality_job_definition
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a device fleet.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateDeviceFleetInput}.
    #
    # @option params [String] :device_fleet_name
    #   <p>The name of the fleet that the device belongs to.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).</p>
    #
    # @option params [String] :description
    #   <p>A description of the fleet.</p>
    #
    # @option params [EdgeOutputConfig] :output_config
    #   <p>The output configuration for storing sample data collected by the fleet.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>Creates tags for the specified fleet.</p>
    #
    # @option params [Boolean] :enable_iot_role_alias
    #   <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation.
    #        The name of the role alias generated will match this pattern:
    #        "SageMakerEdge-{DeviceFleetName}".</p>
    #            <p>For example, if your device fleet is called "demo-fleet", the name of
    #        the role alias will be "SageMakerEdge-demo-fleet".</p>
    #
    # @return [Types::CreateDeviceFleetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_device_fleet(
    #     device_fleet_name: 'DeviceFleetName', # required
    #     role_arn: 'RoleArn',
    #     description: 'Description',
    #     output_config: {
    #       s3_output_location: 'S3OutputLocation', # required
    #       kms_key_id: 'KmsKeyId',
    #       preset_deployment_type: 'GreengrassV2Component', # accepts ["GreengrassV2Component"]
    #       preset_deployment_config: 'PresetDeploymentConfig'
    #     }, # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     enable_iot_role_alias: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateDeviceFleetOutput
    #
    def create_device_fleet(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateDeviceFleetInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateDeviceFleetInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateDeviceFleet
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateDeviceFleet
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateDeviceFleet,
        stubs: @stubs,
        params_class: Params::CreateDeviceFleetOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_device_fleet
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a <code>Domain</code> used by Amazon SageMaker Studio. A domain consists of an associated
    #     Amazon Elastic File System (EFS) volume, a list of authorized users, and a variety of security, application,
    #     policy, and Amazon Virtual Private Cloud (VPC) configurations. An Amazon Web Services account is limited to one domain per region.
    #     Users within a domain can share notebook files and other artifacts with each other.</p>
    #
    #          <p>
    #             <b>EFS storage</b>
    #          </p>
    #          <p>When a domain is created, an EFS volume is created for use by all of the users within the
    #     domain. Each user receives a private home directory within the EFS volume for notebooks,
    #     Git repositories, and data files.</p>
    #          <p>SageMaker uses the Amazon Web Services Key Management Service (Amazon Web Services KMS) to encrypt the EFS volume attached to the domain with
    #      an Amazon Web Services managed key by default. For more control, you can specify a
    #      customer managed key. For more information, see
    #     <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html">Protect Data at
    #       Rest Using Encryption</a>.</p>
    #
    #          <p>
    #             <b>VPC configuration</b>
    #          </p>
    #          <p>All SageMaker Studio traffic between the domain and the EFS volume is through the specified
    #     VPC and subnets. For other Studio traffic, you can specify the <code>AppNetworkAccessType</code>
    #     parameter. <code>AppNetworkAccessType</code> corresponds to the network access type that you
    #     choose when you onboard to Studio. The following options are available:</p>
    #          <ul>
    #             <li>
    #                <p>
    #                   <code>PublicInternetOnly</code> - Non-EFS traffic goes through a VPC managed by
    #         Amazon SageMaker, which allows internet access. This is the default value.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets.
    #         Internet access is disabled by default. To allow internet access, you must specify a
    #         NAT gateway.</p>
    #                <p>When internet access is disabled, you won't be able to run a Studio notebook or to
    #         train or host models unless your VPC has an interface endpoint to the SageMaker API and runtime
    #         or a NAT gateway and your security groups allow outbound connections.</p>
    #             </li>
    #          </ul>
    #          <important>
    #             <p>NFS traffic over TCP on port 2049 needs to be allowed in both inbound and outbound rules
    #       in order to launch a SageMaker Studio app successfully.</p>
    #          </important>
    #          <p>For more information, see
    #     <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-notebooks-and-internet-access.html">Connect
    #        SageMaker Studio Notebooks to Resources in a VPC</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateDomainInput}.
    #
    # @option params [String] :domain_name
    #   <p>A name for the domain.</p>
    #
    # @option params [String] :auth_mode
    #   <p>The mode of authentication that members use to access the domain.</p>
    #
    # @option params [UserSettings] :default_user_settings
    #   <p>The default settings to use to create a user profile when <code>UserSettings</code> isn't specified
    #            in the call to the <code>CreateUserProfile</code> API.</p>
    #            <p>
    #               <code>SecurityGroups</code> is aggregated when specified in both calls. For all other
    #            settings in <code>UserSettings</code>, the values specified in <code>CreateUserProfile</code>
    #            take precedence over those specified in <code>CreateDomain</code>.</p>
    #
    # @option params [Array<String>] :subnet_ids
    #   <p>The VPC subnets that Studio uses for communication.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>Tags to associated with the Domain. Each tag consists of a key and an optional value.
    #            Tag keys must be unique per resource. Tags are searchable using the
    #            <code>Search</code> API.</p>
    #            <p>Tags that you specify for the Domain are also added to all Apps that the
    #             Domain launches.</p>
    #
    # @option params [String] :app_network_access_type
    #   <p>Specifies the VPC used for non-EFS traffic. The default value is
    #           <code>PublicInternetOnly</code>.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>PublicInternetOnly</code> - Non-EFS traffic is through a VPC managed by
    #               Amazon SageMaker, which allows direct internet access</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :home_efs_file_system_kms_key_id
    #   <p>Use <code>KmsKeyId</code>.</p>
    #
    # @option params [String] :kms_key_id
    #   <p>SageMaker uses Amazon Web Services KMS to encrypt the EFS volume attached to the domain with an Amazon Web Services managed
    #            key by default. For more control, specify a customer managed key.</p>
    #
    # @option params [String] :app_security_group_management
    #   <p>The entity that creates and manages the required security groups for inter-app
    #               communication in <code>VPCOnly</code> mode. Required when
    #               <code>CreateDomain.AppNetworkAccessType</code> is <code>VPCOnly</code> and
    #               <code>DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn</code> is
    #               provided.</p>
    #
    # @option params [DomainSettings] :domain_settings
    #   <p>A collection of <code>Domain</code> settings.</p>
    #
    # @return [Types::CreateDomainOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_domain(
    #     domain_name: 'DomainName', # required
    #     auth_mode: 'SSO', # required - accepts ["SSO", "IAM"]
    #     default_user_settings: {
    #       execution_role: 'ExecutionRole',
    #       security_groups: [
    #         'member'
    #       ],
    #       sharing_settings: {
    #         notebook_output_option: 'Allowed', # accepts ["Allowed", "Disabled"]
    #         s3_output_path: 'S3OutputPath',
    #         s3_kms_key_id: 'S3KmsKeyId'
    #       },
    #       jupyter_server_app_settings: {
    #         default_resource_spec: {
    #           sage_maker_image_arn: 'SageMakerImageArn',
    #           sage_maker_image_version_arn: 'SageMakerImageVersionArn',
    #           instance_type: 'system', # accepts ["system", "ml.t3.micro", "ml.t3.small", "ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.8xlarge", "ml.m5.12xlarge", "ml.m5.16xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.8xlarge", "ml.m5d.12xlarge", "ml.m5d.16xlarge", "ml.m5d.24xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.12xlarge", "ml.c5.18xlarge", "ml.c5.24xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #           lifecycle_config_arn: 'LifecycleConfigArn'
    #         },
    #         lifecycle_config_arns: [
    #           'member'
    #         ]
    #       },
    #       kernel_gateway_app_settings: {
    #         custom_images: [
    #           {
    #             image_name: 'ImageName', # required
    #             image_version_number: 1,
    #             app_image_config_name: 'AppImageConfigName' # required
    #           }
    #         ],
    #       },
    #       tensor_board_app_settings: {
    #       },
    #       r_studio_server_pro_app_settings: {
    #         access_status: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #         user_group: 'R_STUDIO_ADMIN' # accepts ["R_STUDIO_ADMIN", "R_STUDIO_USER"]
    #       },
    #       r_session_app_settings: {
    #       }
    #     }, # required
    #     subnet_ids: [
    #       'member'
    #     ], # required
    #     vpc_id: 'VpcId', # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     app_network_access_type: 'PublicInternetOnly', # accepts ["PublicInternetOnly", "VpcOnly"]
    #     home_efs_file_system_kms_key_id: 'HomeEfsFileSystemKmsKeyId',
    #     kms_key_id: 'KmsKeyId',
    #     app_security_group_management: 'Service', # accepts ["Service", "Customer"]
    #     domain_settings: {
    #       security_group_ids: [
    #         'member'
    #       ],
    #       r_studio_server_pro_domain_settings: {
    #         domain_execution_role_arn: 'DomainExecutionRoleArn', # required
    #         r_studio_connect_url: 'RStudioConnectUrl',
    #         r_studio_package_manager_url: 'RStudioPackageManagerUrl',
    #       }
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateDomainOutput
    #   resp.data.domain_arn #=> String
    #   resp.data.url #=> String
    #
    def create_domain(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateDomainInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateDomainInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateDomain
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateDomain
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateDomain,
        stubs: @stubs,
        params_class: Params::CreateDomainOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_domain
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Starts a SageMaker Edge Manager model packaging job. Edge Manager will use the model artifacts from the Amazon Simple Storage Service bucket that you specify. After the model has been packaged, Amazon SageMaker saves the resulting artifacts to an S3 bucket that you specify.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateEdgePackagingJobInput}.
    #
    # @option params [String] :edge_packaging_job_name
    #   <p>The name of the edge packaging job.</p>
    #
    # @option params [String] :compilation_job_name
    #   <p>The name of the SageMaker Neo compilation job that will be used to locate model artifacts for packaging.</p>
    #
    # @option params [String] :model_name
    #   <p>The name of the model.</p>
    #
    # @option params [String] :model_version
    #   <p>The version of the model.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to download and upload the model, and to contact SageMaker Neo.</p>
    #
    # @option params [EdgeOutputConfig] :output_config
    #   <p>Provides information about the output location for the packaged model.</p>
    #
    # @option params [String] :resource_key
    #   <p>The Amazon Web Services KMS key to use when encrypting the EBS volume the edge packaging job runs on.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>Creates tags for the packaging job.</p>
    #
    # @return [Types::CreateEdgePackagingJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_edge_packaging_job(
    #     edge_packaging_job_name: 'EdgePackagingJobName', # required
    #     compilation_job_name: 'CompilationJobName', # required
    #     model_name: 'ModelName', # required
    #     model_version: 'ModelVersion', # required
    #     role_arn: 'RoleArn', # required
    #     output_config: {
    #       s3_output_location: 'S3OutputLocation', # required
    #       kms_key_id: 'KmsKeyId',
    #       preset_deployment_type: 'GreengrassV2Component', # accepts ["GreengrassV2Component"]
    #       preset_deployment_config: 'PresetDeploymentConfig'
    #     }, # required
    #     resource_key: 'ResourceKey',
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateEdgePackagingJobOutput
    #
    def create_edge_packaging_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateEdgePackagingJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateEdgePackagingJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateEdgePackagingJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::CreateEdgePackagingJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateEdgePackagingJob,
        stubs: @stubs,
        params_class: Params::CreateEdgePackagingJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_edge_packaging_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an endpoint using the endpoint configuration specified in the request. SageMaker
    #             uses the endpoint to provision resources and deploy models. You create the endpoint
    #             configuration with the <a>CreateEndpointConfig</a> API. </p>
    #         <p> Use this API to deploy models using SageMaker hosting services. </p>
    #         <p>For an example that calls this method when deploying a model to SageMaker hosting services,
    #             see the <a href="https://github.com/aws/amazon-sagemaker-examples/blob/master/sagemaker-fundamentals/create-endpoint/create_endpoint.ipynb">Create Endpoint example notebook.</a>
    #          </p>
    #         <note>
    #             <p> You must not delete an <code>EndpointConfig</code> that is in use by an endpoint
    #                 that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code>
    #                 operations are being performed on the endpoint. To update an endpoint, you must
    #                 create a new <code>EndpointConfig</code>.</p>
    #         </note>
    #         <p>The endpoint name must be unique within an Amazon Web Services Region in your Amazon Web Services account. </p>
    #         <p>When it receives the request, SageMaker creates the endpoint, launches the resources (ML
    #             compute instances), and deploys the model(s) on them. </p>
    #
    #         <note>
    #             <p>When you call <a>CreateEndpoint</a>, a load call is made to DynamoDB to
    #                 verify that your endpoint configuration exists. When you read data from a DynamoDB
    #                 table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html">
    #                   <code>Eventually Consistent Reads</code>
    #                </a>, the response might not
    #                 reflect the results of a recently completed write operation. The response might
    #                 include some stale data. If the dependent entities are not yet in DynamoDB, this
    #                 causes a validation error. If you repeat your read request after a short time, the
    #                 response should return the latest data. So retry logic is recommended to handle
    #                 these possible issues. We also recommend that customers call <a>DescribeEndpointConfig</a> before calling <a>CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p>
    #         </note>
    #         <p>When SageMaker receives the request, it sets the endpoint status to
    #                 <code>Creating</code>. After it creates the endpoint, it sets the status to
    #                 <code>InService</code>. SageMaker can then process incoming requests for inferences. To
    #             check the status of an endpoint, use the <a>DescribeEndpoint</a>
    #             API.</p>
    #         <p>If any of the models hosted at this endpoint get model data from an Amazon S3 location,
    #             SageMaker uses Amazon Web Services Security Token Service to download model artifacts from the S3 path you
    #             provided. Amazon Web Services STS is activated in your IAM user account by default. If you previously
    #             deactivated Amazon Web Services STS for a region, you need to reactivate Amazon Web Services STS for that region. For
    #             more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and
    #                 Deactivating Amazon Web Services STS in an Amazon Web Services Region</a> in the <i>Amazon Web Services Identity and Access Management User
    #                 Guide</i>.</p>
    #         <note>
    #             <p> To add the IAM role policies for using this API operation, go to the <a href="https://console.aws.amazon.com/iam/">IAM console</a>, and choose
    #                 Roles in the left navigation pane. Search the IAM role that you want to grant
    #                 access to use the <a>CreateEndpoint</a> and <a>CreateEndpointConfig</a> API operations, add the following policies to
    #                 the role. </p>
    #             <ul>
    #                <li>
    #                     <p>Option 1: For a full SageMaker access, search and attach the
    #                             <code>AmazonSageMakerFullAccess</code> policy.</p>
    #                 </li>
    #                <li>
    #                     <p>Option 2: For granting a limited access to an IAM role, paste the
    #                         following Action elements manually into the JSON file of the IAM role: </p>
    #                     <p>
    #                      <code>"Action": ["sagemaker:CreateEndpoint",
    #                             "sagemaker:CreateEndpointConfig"]</code>
    #                   </p>
    #                     <p>
    #                      <code>"Resource": [</code>
    #                   </p>
    #                     <p>
    #                      <code>"arn:aws:sagemaker:region:account-id:endpoint/endpointName"</code>
    #                   </p>
    #                     <p>
    #                      <code>"arn:aws:sagemaker:region:account-id:endpoint-config/endpointConfigName"</code>
    #                   </p>
    #                     <p>
    #                      <code>]</code>
    #                   </p>
    #                     <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html">SageMaker API
    #                             Permissions: Actions, Permissions, and Resources
    #                         Reference</a>.</p>
    #                 </li>
    #             </ul>
    #
    #         </note>
    #
    # @param [Hash] params
    #   See {Types::CreateEndpointInput}.
    #
    # @option params [String] :endpoint_name
    #   <p>The name of the endpoint.The name must be unique within an Amazon Web Services Region in your Amazon Web Services
    #               account. The name is case-insensitive in <code>CreateEndpoint</code>, but the case is
    #               preserved and must be matched in .</p>
    #
    # @option params [String] :endpoint_config_name
    #   <p>The name of an endpoint configuration. For more information, see <a>CreateEndpointConfig</a>. </p>
    #
    # @option params [DeploymentConfig] :deployment_config
    #   <p>The deployment configuration for an endpoint, which contains the desired deployment
    #               strategy and rollback configurations.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
    #               different ways, for example, by purpose, owner, or environment. For more information,
    #               see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
    #                   Resources</a>.</p>
    #
    # @return [Types::CreateEndpointOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_endpoint(
    #     endpoint_name: 'EndpointName', # required
    #     endpoint_config_name: 'EndpointConfigName', # required
    #     deployment_config: {
    #       blue_green_update_policy: {
    #         traffic_routing_configuration: {
    #           type: 'ALL_AT_ONCE', # required - accepts ["ALL_AT_ONCE", "CANARY", "LINEAR"]
    #           wait_interval_in_seconds: 1, # required
    #           canary_size: {
    #             type: 'INSTANCE_COUNT', # required - accepts ["INSTANCE_COUNT", "CAPACITY_PERCENT"]
    #             value: 1 # required
    #           },
    #         }, # required
    #         termination_wait_in_seconds: 1,
    #         maximum_execution_timeout_in_seconds: 1
    #       }, # required
    #       auto_rollback_configuration: {
    #         alarms: [
    #           {
    #             alarm_name: 'AlarmName'
    #           }
    #         ]
    #       }
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateEndpointOutput
    #   resp.data.endpoint_arn #=> String
    #
    def create_endpoint(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateEndpointInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateEndpointInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateEndpoint
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::CreateEndpoint
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateEndpoint,
        stubs: @stubs,
        params_class: Params::CreateEndpointOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_endpoint
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an endpoint configuration that SageMaker hosting services uses to deploy models. In
    #             the configuration, you identify one or more models, created using the
    #                 <code>CreateModel</code> API, to deploy and the resources that you want SageMaker to
    #             provision. Then you call the <a>CreateEndpoint</a> API.</p>
    #         <note>
    #             <p> Use this API if you want to use SageMaker hosting services to deploy models into
    #                 production. </p>
    #         </note>
    #         <p>In the request, you define a <code>ProductionVariant</code>, for each model that you
    #             want to deploy. Each <code>ProductionVariant</code> parameter also describes the
    #             resources that you want SageMaker to provision. This includes the number and type of ML
    #             compute instances to deploy. </p>
    #         <p>If you are hosting multiple models, you also assign a <code>VariantWeight</code> to
    #             specify how much traffic you want to allocate to each model. For example, suppose that
    #             you want to host two models, A and B, and you assign traffic weight 2 for model A and 1
    #             for model B. SageMaker distributes two-thirds of the traffic to Model A, and one-third to
    #             model B. </p>
    #         <note>
    #             <p>When you call <a>CreateEndpoint</a>, a load call is made to DynamoDB to
    #                 verify that your endpoint configuration exists. When you read data from a DynamoDB
    #                 table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html">
    #                   <code>Eventually Consistent Reads</code>
    #                </a>, the response might not
    #                 reflect the results of a recently completed write operation. The response might
    #                 include some stale data. If the dependent entities are not yet in DynamoDB, this
    #                 causes a validation error. If you repeat your read request after a short time, the
    #                 response should return the latest data. So retry logic is recommended to handle
    #                 these possible issues. We also recommend that customers call <a>DescribeEndpointConfig</a> before calling <a>CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p>
    #         </note>
    #
    # @param [Hash] params
    #   See {Types::CreateEndpointConfigInput}.
    #
    # @option params [String] :endpoint_config_name
    #   <p>The name of the endpoint configuration. You specify this name in a <a>CreateEndpoint</a> request. </p>
    #
    # @option params [Array<ProductionVariant>] :production_variants
    #   <p>An list of <code>ProductionVariant</code> objects, one for each model that you want
    #               to host at this endpoint.</p>
    #
    # @option params [DataCaptureConfig] :data_capture_config
    #   <p>Configuration to control how SageMaker captures inference data.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
    #               different ways, for example, by purpose, owner, or environment. For more information,
    #               see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
    #                   Resources</a>.</p>
    #
    # @option params [String] :kms_key_id
    #   <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on
    #               the storage volume attached to the ML compute instance that hosts the endpoint.</p>
    #           <p>The KmsKeyId can be any of the following formats: </p>
    #           <ul>
    #               <li>
    #                   <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    #                  </p>
    #               </li>
    #               <li>
    #                   <p>Key ARN:
    #                           <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    #                  </p>
    #               </li>
    #               <li>
    #                   <p>Alias name: <code>alias/ExampleAlias</code>
    #                  </p>
    #               </li>
    #               <li>
    #                   <p>Alias name ARN:
    #                           <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
    #                  </p>
    #               </li>
    #            </ul>
    #           <p>The KMS key policy must grant permission to the IAM role that you specify in your
    #                   <code>CreateEndpoint</code>, <code>UpdateEndpoint</code> requests. For more
    #               information, refer to the Amazon Web Services Key Management Service section<a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html"> Using Key
    #                   Policies in Amazon Web Services KMS </a>
    #            </p>
    #           <note>
    #               <p>Certain Nitro-based instances include local storage, dependent on the instance
    #                   type. Local storage volumes are encrypted using a hardware module on the instance.
    #                   You can't request a <code>KmsKeyId</code> when using an instance type with local
    #                   storage. If any of the models that you specify in the
    #                       <code>ProductionVariants</code> parameter use nitro-based instances with local
    #                   storage, do not specify a value for the <code>KmsKeyId</code> parameter. If you
    #                   specify a value for <code>KmsKeyId</code> when using any nitro-based instances with
    #                   local storage, the call to <code>CreateEndpointConfig</code> fails.</p>
    #               <p>For a list of instance types that support local instance storage, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes">Instance Store Volumes</a>.</p>
    #               <p>For more information about local instance storage encryption, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html">SSD
    #                       Instance Store Volumes</a>.</p>
    #           </note>
    #
    # @option params [AsyncInferenceConfig] :async_inference_config
    #   <p>Specifies configuration for how an endpoint performs asynchronous inference.
    #               This is a required field in order for your Endpoint to be invoked using
    #               <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpointAsync.html">InvokeEndpointAsync</a>.</p>
    #
    # @return [Types::CreateEndpointConfigOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_endpoint_config(
    #     endpoint_config_name: 'EndpointConfigName', # required
    #     production_variants: [
    #       {
    #         variant_name: 'VariantName', # required
    #         model_name: 'ModelName', # required
    #         initial_instance_count: 1,
    #         instance_type: 'ml.t2.medium', # accepts ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.12xlarge", "ml.m5d.24xlarge", "ml.c4.large", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.large", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.12xlarge", "ml.r5.24xlarge", "ml.r5d.large", "ml.r5d.xlarge", "ml.r5d.2xlarge", "ml.r5d.4xlarge", "ml.r5d.12xlarge", "ml.r5d.24xlarge", "ml.inf1.xlarge", "ml.inf1.2xlarge", "ml.inf1.6xlarge", "ml.inf1.24xlarge"]
    #         initial_variant_weight: 1.0,
    #         accelerator_type: 'ml.eia1.medium', # accepts ["ml.eia1.medium", "ml.eia1.large", "ml.eia1.xlarge", "ml.eia2.medium", "ml.eia2.large", "ml.eia2.xlarge"]
    #         core_dump_config: {
    #           destination_s3_uri: 'DestinationS3Uri', # required
    #           kms_key_id: 'KmsKeyId'
    #         },
    #         serverless_config: {
    #           memory_size_in_mb: 1, # required
    #           max_concurrency: 1 # required
    #         }
    #       }
    #     ], # required
    #     data_capture_config: {
    #       enable_capture: false,
    #       initial_sampling_percentage: 1, # required
    #       destination_s3_uri: 'DestinationS3Uri', # required
    #       kms_key_id: 'KmsKeyId',
    #       capture_options: [
    #         {
    #           capture_mode: 'Input' # required - accepts ["Input", "Output"]
    #         }
    #       ], # required
    #       capture_content_type_header: {
    #         csv_content_types: [
    #           'member'
    #         ],
    #         json_content_types: [
    #           'member'
    #         ]
    #       }
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     kms_key_id: 'KmsKeyId',
    #     async_inference_config: {
    #       client_config: {
    #         max_concurrent_invocations_per_instance: 1
    #       },
    #       output_config: {
    #         kms_key_id: 'KmsKeyId',
    #         s3_output_path: 'S3OutputPath', # required
    #         notification_config: {
    #           success_topic: 'SuccessTopic',
    #           error_topic: 'ErrorTopic'
    #         }
    #       } # required
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateEndpointConfigOutput
    #   resp.data.endpoint_config_arn #=> String
    #
    def create_endpoint_config(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateEndpointConfigInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateEndpointConfigInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateEndpointConfig
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::CreateEndpointConfig
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateEndpointConfig,
        stubs: @stubs,
        params_class: Params::CreateEndpointConfigOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_endpoint_config
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an SageMaker <i>experiment</i>. An experiment is a collection of
    #         <i>trials</i> that are observed, compared and evaluated as a group. A trial is
    #       a set of steps, called <i>trial components</i>, that produce a machine learning
    #       model.</p>
    #          <p>The goal of an experiment is to determine the components that produce the best model.
    #       Multiple trials are performed, each one isolating and measuring the impact of a change to one
    #       or more inputs, while keeping the remaining inputs constant.</p>
    #          <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial
    #       components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you
    #       must use the logging APIs provided by the SDK.</p>
    #          <p>You can add tags to experiments, trials, trial components and then use the <a>Search</a> API to search for the tags.</p>
    #          <p>To add a description to an experiment, specify the optional <code>Description</code>
    #       parameter. To add a description later, or to change the description, call the <a>UpdateExperiment</a> API.</p>
    #          <p>To get a list of all your experiments, call the <a>ListExperiments</a> API. To
    #       view an experiment's properties, call the <a>DescribeExperiment</a> API. To get a
    #       list of all the trials associated with an experiment, call the <a>ListTrials</a>
    #       API. To create a trial call the <a>CreateTrial</a> API.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateExperimentInput}.
    #
    # @option params [String] :experiment_name
    #   <p>The name of the experiment. The name must be unique in your Amazon Web Services account and is not
    #         case-sensitive.</p>
    #
    # @option params [String] :display_name
    #   <p>The name of the experiment as displayed. The name doesn't need to be unique. If you don't
    #         specify <code>DisplayName</code>, the value in <code>ExperimentName</code> is
    #         displayed.</p>
    #
    # @option params [String] :description
    #   <p>The description of the experiment.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>A list of tags to associate with the experiment. You can use <a>Search</a> API
    #         to search on the tags.</p>
    #
    # @return [Types::CreateExperimentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_experiment(
    #     experiment_name: 'ExperimentName', # required
    #     display_name: 'DisplayName',
    #     description: 'Description',
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateExperimentOutput
    #   resp.data.experiment_arn #=> String
    #
    def create_experiment(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateExperimentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateExperimentInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateExperiment
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::CreateExperiment
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateExperiment,
        stubs: @stubs,
        params_class: Params::CreateExperimentOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_experiment
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Create a new <code>FeatureGroup</code>. A <code>FeatureGroup</code> is a group of
    #             <code>Features</code> defined in the <code>FeatureStore</code> to describe a
    #             <code>Record</code>. </p>
    #          <p>The <code>FeatureGroup</code> defines the schema and features contained in the
    #          FeatureGroup. A <code>FeatureGroup</code> definition is composed of a list of
    #             <code>Features</code>, a <code>RecordIdentifierFeatureName</code>, an
    #             <code>EventTimeFeatureName</code> and configurations for its <code>OnlineStore</code>
    #          and <code>OfflineStore</code>. Check <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">Amazon Web Services service quotas</a> to see
    #          the <code>FeatureGroup</code>s quota for your Amazon Web Services account.</p>
    #          <important>
    #             <p>You must include at least one of <code>OnlineStoreConfig</code> and
    #                <code>OfflineStoreConfig</code> to create a <code>FeatureGroup</code>.</p>
    #          </important>
    #
    # @param [Hash] params
    #   See {Types::CreateFeatureGroupInput}.
    #
    # @option params [String] :feature_group_name
    #   <p>The name of the <code>FeatureGroup</code>. The name must be unique within an Amazon Web Services Region
    #            in an Amazon Web Services account. The name:</p>
    #            <ul>
    #               <li>
    #                  <p>Must start and end with an alphanumeric character.</p>
    #               </li>
    #               <li>
    #                  <p>Can only contain alphanumeric character and hyphens. Spaces are not allowed.
    #               </p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :record_identifier_feature_name
    #   <p>The name of the <code>Feature</code> whose value uniquely identifies a
    #               <code>Record</code> defined in the <code>FeatureStore</code>. Only the latest record per
    #            identifier value will be stored in the <code>OnlineStore</code>.
    #               <code>RecordIdentifierFeatureName</code> must be one of feature definitions'
    #            names.</p>
    #            <p>You use the <code>RecordIdentifierFeatureName</code> to access data in a
    #               <code>FeatureStore</code>.</p>
    #            <p>This name:</p>
    #            <ul>
    #               <li>
    #                  <p>Must start and end with an alphanumeric character.</p>
    #               </li>
    #               <li>
    #                  <p>Can only contains alphanumeric characters, hyphens, underscores. Spaces are not
    #                  allowed. </p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :event_time_feature_name
    #   <p>The name of the feature that stores the <code>EventTime</code> of a <code>Record</code>
    #            in a <code>FeatureGroup</code>.</p>
    #            <p>An <code>EventTime</code> is a point in time when a new event occurs that corresponds to
    #            the creation or update of a <code>Record</code> in a <code>FeatureGroup</code>. All
    #               <code>Records</code> in the <code>FeatureGroup</code> must have a corresponding
    #               <code>EventTime</code>.</p>
    #            <p>An <code>EventTime</code> can be a <code>String</code> or <code>Fractional</code>. </p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>Fractional</code>: <code>EventTime</code> feature values must be a Unix
    #                  timestamp in seconds.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>String</code>: <code>EventTime</code> feature values must be an ISO-8601
    #                  string in the format. The following formats are supported
    #                     <code>yyyy-MM-dd'T'HH:mm:ssZ</code> and <code>yyyy-MM-dd'T'HH:mm:ss.SSSZ</code>
    #                  where <code>yyyy</code>, <code>MM</code>, and <code>dd</code> represent the year,
    #                  month, and day respectively and <code>HH</code>, <code>mm</code>, <code>ss</code>,
    #                  and if applicable, <code>SSS</code> represent the hour, month, second and
    #                  milliseconds respsectively. <code>'T'</code> and <code>Z</code> are constants.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<FeatureDefinition>] :feature_definitions
    #   <p>A list of <code>Feature</code> names and types. <code>Name</code> and <code>Type</code>
    #            is compulsory per <code>Feature</code>. </p>
    #            <p>Valid feature <code>FeatureType</code>s are <code>Integral</code>,
    #               <code>Fractional</code> and <code>String</code>.</p>
    #            <p>
    #               <code>FeatureName</code>s cannot be any of the following: <code>is_deleted</code>,
    #               <code>write_time</code>, <code>api_invocation_time</code>
    #            </p>
    #            <p>You can create up to 2,500 <code>FeatureDefinition</code>s per
    #            <code>FeatureGroup</code>.</p>
    #
    # @option params [OnlineStoreConfig] :online_store_config
    #   <p>You can turn the <code>OnlineStore</code> on or off by specifying <code>True</code> for
    #            the <code>EnableOnlineStore</code> flag in <code>OnlineStoreConfig</code>; the default
    #            value is <code>False</code>.</p>
    #            <p>You can also include an Amazon Web Services KMS key ID (<code>KMSKeyId</code>) for at-rest encryption of
    #            the <code>OnlineStore</code>.</p>
    #
    # @option params [OfflineStoreConfig] :offline_store_config
    #   <p>Use this to configure an <code>OfflineFeatureStore</code>. This parameter allows you to
    #            specify:</p>
    #            <ul>
    #               <li>
    #                  <p>The Amazon Simple Storage Service (Amazon S3) location of an
    #                     <code>OfflineStore</code>.</p>
    #               </li>
    #               <li>
    #                  <p>A configuration for an Amazon Web Services Glue or Amazon Web Services Hive data catalog. </p>
    #               </li>
    #               <li>
    #                  <p>An KMS encryption key to encrypt the Amazon S3 location used for
    #                  <code>OfflineStore</code>. If KMS encryption key is not specified, by default we encrypt all data at rest using
    #                  Amazon Web Services KMS key. By defining your <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-key.html">bucket-level key</a> for SSE,
    #                  you can reduce Amazon Web Services KMS requests costs by up to 99 percent.</p>
    #               </li>
    #            </ul>
    #            <p>To learn more about this parameter, see <a>OfflineStoreConfig</a>.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the
    #               <code>OfflineStore</code> if an <code>OfflineStoreConfig</code> is provided.</p>
    #
    # @option params [String] :description
    #   <p>A free-form description of a <code>FeatureGroup</code>.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>Tags used to identify <code>Features</code> in each <code>FeatureGroup</code>.</p>
    #
    # @return [Types::CreateFeatureGroupOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_feature_group(
    #     feature_group_name: 'FeatureGroupName', # required
    #     record_identifier_feature_name: 'RecordIdentifierFeatureName', # required
    #     event_time_feature_name: 'EventTimeFeatureName', # required
    #     feature_definitions: [
    #       {
    #         feature_name: 'FeatureName',
    #         feature_type: 'Integral' # accepts ["Integral", "Fractional", "String"]
    #       }
    #     ], # required
    #     online_store_config: {
    #       security_config: {
    #         kms_key_id: 'KmsKeyId'
    #       },
    #       enable_online_store: false
    #     },
    #     offline_store_config: {
    #       s3_storage_config: {
    #         s3_uri: 'S3Uri', # required
    #         kms_key_id: 'KmsKeyId',
    #         resolved_output_s3_uri: 'ResolvedOutputS3Uri'
    #       }, # required
    #       disable_glue_table_creation: false,
    #       data_catalog_config: {
    #         table_name: 'TableName', # required
    #         catalog: 'Catalog', # required
    #         database: 'Database' # required
    #       }
    #     },
    #     role_arn: 'RoleArn',
    #     description: 'Description',
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateFeatureGroupOutput
    #   resp.data.feature_group_arn #=> String
    #
    def create_feature_group(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateFeatureGroupInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateFeatureGroupInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateFeatureGroup
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateFeatureGroup
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateFeatureGroup,
        stubs: @stubs,
        params_class: Params::CreateFeatureGroupOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_feature_group
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a flow definition.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateFlowDefinitionInput}.
    #
    # @option params [String] :flow_definition_name
    #   <p>The name of your flow definition.</p>
    #
    # @option params [HumanLoopRequestSource] :human_loop_request_source
    #   <p>Container for configuring the source of human task requests. Use to specify if
    #         Amazon Rekognition or Amazon Textract is used as an integration source.</p>
    #
    # @option params [HumanLoopActivationConfig] :human_loop_activation_config
    #   <p>An object containing information about the events that trigger a human workflow.</p>
    #
    # @option params [HumanLoopConfig] :human_loop_config
    #   <p>An object containing information about the tasks the human reviewers will perform.</p>
    #
    # @option params [FlowDefinitionOutputConfig] :output_config
    #   <p>An object containing information about where the human review results will be uploaded.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) of the role needed to call other services on your behalf. For example, <code>arn:aws:iam::1234567890:role/service-role/AmazonSageMaker-ExecutionRole-20180111T151298</code>.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs that contain metadata to help you categorize and organize a flow definition. Each tag consists of a key and a value, both of which you define.</p>
    #
    # @return [Types::CreateFlowDefinitionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_flow_definition(
    #     flow_definition_name: 'FlowDefinitionName', # required
    #     human_loop_request_source: {
    #       aws_managed_human_loop_request_source: 'AWS/Rekognition/DetectModerationLabels/Image/V3' # required - accepts ["AWS/Rekognition/DetectModerationLabels/Image/V3", "AWS/Textract/AnalyzeDocument/Forms/V1"]
    #     },
    #     human_loop_activation_config: {
    #       human_loop_activation_conditions_config: {
    #         human_loop_activation_conditions: 'HumanLoopActivationConditions' # required
    #       } # required
    #     },
    #     human_loop_config: {
    #       workteam_arn: 'WorkteamArn', # required
    #       human_task_ui_arn: 'HumanTaskUiArn', # required
    #       task_title: 'TaskTitle', # required
    #       task_description: 'TaskDescription', # required
    #       task_count: 1, # required
    #       task_availability_lifetime_in_seconds: 1,
    #       task_time_limit_in_seconds: 1,
    #       task_keywords: [
    #         'member'
    #       ],
    #       public_workforce_task_price: {
    #         amount_in_usd: {
    #           dollars: 1,
    #           cents: 1,
    #           tenth_fractions_of_a_cent: 1
    #         }
    #       }
    #     }, # required
    #     output_config: {
    #       s3_output_path: 'S3OutputPath', # required
    #       kms_key_id: 'KmsKeyId'
    #     }, # required
    #     role_arn: 'RoleArn', # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateFlowDefinitionOutput
    #   resp.data.flow_definition_arn #=> String
    #
    def create_flow_definition(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateFlowDefinitionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateFlowDefinitionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateFlowDefinition
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateFlowDefinition
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateFlowDefinition,
        stubs: @stubs,
        params_class: Params::CreateFlowDefinitionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_flow_definition
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Defines the settings you will use for the human review workflow user interface. Reviewers will see a three-panel interface with an instruction area, the item to review, and an input area.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateHumanTaskUiInput}.
    #
    # @option params [String] :human_task_ui_name
    #   <p>The name of the user interface you are creating.</p>
    #
    # @option params [UiTemplate] :ui_template
    #   <p>The Liquid template for the worker user interface.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs that contain metadata to help you categorize and organize a human review workflow user interface. Each tag consists of a key and a value, both of which you define.</p>
    #
    # @return [Types::CreateHumanTaskUiOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_human_task_ui(
    #     human_task_ui_name: 'HumanTaskUiName', # required
    #     ui_template: {
    #       content: 'Content' # required
    #     }, # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateHumanTaskUiOutput
    #   resp.data.human_task_ui_arn #=> String
    #
    def create_human_task_ui(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateHumanTaskUiInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateHumanTaskUiInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateHumanTaskUi
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateHumanTaskUi
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateHumanTaskUi,
        stubs: @stubs,
        params_class: Params::CreateHumanTaskUiOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_human_task_ui
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Starts a hyperparameter tuning job. A hyperparameter tuning job finds the best version
    #             of a model by running many training jobs on your dataset using the algorithm you choose
    #             and values for hyperparameters within ranges that you specify. It then chooses the
    #             hyperparameter values that result in a model that performs the best, as measured by an
    #             objective metric that you choose.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateHyperParameterTuningJobInput}.
    #
    # @option params [String] :hyper_parameter_tuning_job_name
    #   <p>The name of the tuning job. This name is the prefix for the names of all training jobs
    #               that this tuning job launches. The name must be unique within the same Amazon Web Services account and
    #               Amazon Web Services Region. The name must have 1 to 32 characters. Valid characters are a-z, A-Z, 0-9,
    #               and : + = @ _ % - (hyphen). The name is not case sensitive.</p>
    #
    # @option params [HyperParameterTuningJobConfig] :hyper_parameter_tuning_job_config
    #   <p>The <a>HyperParameterTuningJobConfig</a> object that describes the tuning
    #               job, including the search strategy, the objective metric used to evaluate training jobs,
    #               ranges of parameters to search, and resource limits for the tuning job. For more
    #               information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html">How
    #                   Hyperparameter Tuning Works</a>.</p>
    #
    # @option params [HyperParameterTrainingJobDefinition] :training_job_definition
    #   <p>The <a>HyperParameterTrainingJobDefinition</a> object that describes the
    #               training jobs that this tuning job launches, including static hyperparameters, input
    #               data configuration, output data configuration, resource configuration, and stopping
    #               condition.</p>
    #
    # @option params [Array<HyperParameterTrainingJobDefinition>] :training_job_definitions
    #   <p>A list of the <a>HyperParameterTrainingJobDefinition</a> objects launched
    #               for this tuning job.</p>
    #
    # @option params [HyperParameterTuningJobWarmStartConfig] :warm_start_config
    #   <p>Specifies the configuration for starting the hyperparameter tuning job using one or
    #               more previous tuning jobs as a starting point. The results of previous tuning jobs are
    #               used to inform which combinations of hyperparameters to search over in the new tuning
    #               job.</p>
    #           <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using
    #               the objective metric. If you specify <code>IDENTICAL_DATA_AND_ALGORITHM</code> as the
    #                   <code>WarmStartType</code> value for the warm start configuration, the training job
    #               that performs the best in the new tuning job is compared to the best training jobs from
    #               the parent tuning jobs. From these, the training job that performs the best as measured
    #               by the objective metric is returned as the overall best training job.</p>
    #           <note>
    #               <p>All training jobs launched by parent hyperparameter tuning jobs and the new
    #                   hyperparameter tuning jobs count against the limit of training jobs for the tuning
    #                   job.</p>
    #           </note>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
    #               different ways, for example, by purpose, owner, or environment. For more information,
    #               see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
    #                   Resources</a>.</p>
    #           <p>Tags that you specify for the tuning job are also added to all training jobs that the
    #               tuning job launches.</p>
    #
    # @return [Types::CreateHyperParameterTuningJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_hyper_parameter_tuning_job(
    #     hyper_parameter_tuning_job_name: 'HyperParameterTuningJobName', # required
    #     hyper_parameter_tuning_job_config: {
    #       strategy: 'Bayesian', # required - accepts ["Bayesian", "Random"]
    #       hyper_parameter_tuning_job_objective: {
    #         type: 'Maximize', # required - accepts ["Maximize", "Minimize"]
    #         metric_name: 'MetricName' # required
    #       },
    #       resource_limits: {
    #         max_number_of_training_jobs: 1, # required
    #         max_parallel_training_jobs: 1 # required
    #       }, # required
    #       parameter_ranges: {
    #         integer_parameter_ranges: [
    #           {
    #             name: 'Name', # required
    #             min_value: 'MinValue', # required
    #             max_value: 'MaxValue', # required
    #             scaling_type: 'Auto' # accepts ["Auto", "Linear", "Logarithmic", "ReverseLogarithmic"]
    #           }
    #         ],
    #         continuous_parameter_ranges: [
    #           {
    #             name: 'Name', # required
    #             min_value: 'MinValue', # required
    #             max_value: 'MaxValue', # required
    #             scaling_type: 'Auto' # accepts ["Auto", "Linear", "Logarithmic", "ReverseLogarithmic"]
    #           }
    #         ],
    #         categorical_parameter_ranges: [
    #           {
    #             name: 'Name', # required
    #             values: [
    #               'member'
    #             ] # required
    #           }
    #         ]
    #       },
    #       training_job_early_stopping_type: 'Off', # accepts ["Off", "Auto"]
    #       tuning_job_completion_criteria: {
    #         target_objective_metric_value: 1.0 # required
    #       }
    #     }, # required
    #     training_job_definition: {
    #       definition_name: 'DefinitionName',
    #       static_hyper_parameters: {
    #         'key' => 'value'
    #       },
    #       algorithm_specification: {
    #         training_image: 'TrainingImage',
    #         training_input_mode: 'Pipe', # required - accepts ["Pipe", "File", "FastFile"]
    #         algorithm_name: 'AlgorithmName',
    #         metric_definitions: [
    #           {
    #             name: 'Name', # required
    #             regex: 'Regex' # required
    #           }
    #         ]
    #       }, # required
    #       role_arn: 'RoleArn', # required
    #       input_data_config: [
    #         {
    #           channel_name: 'ChannelName', # required
    #           data_source: {
    #             s3_data_source: {
    #               s3_data_type: 'ManifestFile', # required - accepts ["ManifestFile", "S3Prefix", "AugmentedManifestFile"]
    #               s3_uri: 'S3Uri', # required
    #               s3_data_distribution_type: 'FullyReplicated', # accepts ["FullyReplicated", "ShardedByS3Key"]
    #               attribute_names: [
    #                 'member'
    #               ]
    #             },
    #             file_system_data_source: {
    #               file_system_id: 'FileSystemId', # required
    #               file_system_access_mode: 'rw', # required - accepts ["rw", "ro"]
    #               file_system_type: 'EFS', # required - accepts ["EFS", "FSxLustre"]
    #               directory_path: 'DirectoryPath' # required
    #             }
    #           }, # required
    #           content_type: 'ContentType',
    #           compression_type: 'None', # accepts ["None", "Gzip"]
    #           record_wrapper_type: 'None', # accepts ["None", "RecordIO"]
    #           input_mode: 'Pipe', # accepts ["Pipe", "File", "FastFile"]
    #           shuffle_config: {
    #             seed: 1 # required
    #           }
    #         }
    #       ],
    #       vpc_config: {
    #         security_group_ids: [
    #           'member'
    #         ], # required
    #         subnets: [
    #           'member'
    #         ] # required
    #       },
    #       output_data_config: {
    #         kms_key_id: 'KmsKeyId',
    #         s3_output_path: 'S3OutputPath' # required
    #       }, # required
    #       resource_config: {
    #         instance_type: 'ml.m4.xlarge', # required - accepts ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.p4d.24xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5n.xlarge", "ml.c5n.2xlarge", "ml.c5n.4xlarge", "ml.c5n.9xlarge", "ml.c5n.18xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #         instance_count: 1, # required
    #         volume_size_in_gb: 1, # required
    #         volume_kms_key_id: 'VolumeKmsKeyId'
    #       }, # required
    #       stopping_condition: {
    #         max_runtime_in_seconds: 1,
    #         max_wait_time_in_seconds: 1
    #       }, # required
    #       enable_network_isolation: false,
    #       enable_inter_container_traffic_encryption: false,
    #       enable_managed_spot_training: false,
    #       checkpoint_config: {
    #         s3_uri: 'S3Uri', # required
    #         local_path: 'LocalPath'
    #       },
    #       retry_strategy: {
    #         maximum_retry_attempts: 1 # required
    #       }
    #     },
    #     warm_start_config: {
    #       parent_hyper_parameter_tuning_jobs: [
    #         {
    #           hyper_parameter_tuning_job_name: 'HyperParameterTuningJobName'
    #         }
    #       ], # required
    #       warm_start_type: 'IdenticalDataAndAlgorithm' # required - accepts ["IdenticalDataAndAlgorithm", "TransferLearning"]
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateHyperParameterTuningJobOutput
    #   resp.data.hyper_parameter_tuning_job_arn #=> String
    #
    def create_hyper_parameter_tuning_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateHyperParameterTuningJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateHyperParameterTuningJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateHyperParameterTuningJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateHyperParameterTuningJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateHyperParameterTuningJob,
        stubs: @stubs,
        params_class: Params::CreateHyperParameterTuningJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_hyper_parameter_tuning_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a custom SageMaker image. A SageMaker image is a set of image versions. Each image
    #         version represents a container image stored in Amazon Elastic Container Registry (ECR). For more information, see
    #         <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring your own SageMaker image</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateImageInput}.
    #
    # @option params [String] :description
    #   <p>The description of the image.</p>
    #
    # @option params [String] :display_name
    #   <p>The display name of the image. If not provided, <code>ImageName</code> is displayed.</p>
    #
    # @option params [String] :image_name
    #   <p>The name of the image. Must be unique to your account.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>A list of tags to apply to the image.</p>
    #
    # @return [Types::CreateImageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_image(
    #     description: 'Description',
    #     display_name: 'DisplayName',
    #     image_name: 'ImageName', # required
    #     role_arn: 'RoleArn', # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateImageOutput
    #   resp.data.image_arn #=> String
    #
    def create_image(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateImageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateImageInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateImage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateImage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateImage,
        stubs: @stubs,
        params_class: Params::CreateImageOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_image
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a version of the SageMaker image specified by <code>ImageName</code>. The version
    #         represents the Amazon Elastic Container Registry (ECR) container image specified by <code>BaseImage</code>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateImageVersionInput}.
    #
    # @option params [String] :base_image
    #   <p>The registry path of the container image to use as the starting point for this
    #           version. The path is an Amazon Elastic Container Registry (ECR) URI in the following format:</p>
    #            <p>
    #               <code><acct-id>.dkr.ecr.<region>.amazonaws.com/<repo-name[:tag] or [@digest]></code>
    #            </p>
    #
    # @option params [String] :client_token
    #   <p>A unique ID. If not specified, the Amazon Web Services CLI and Amazon Web Services SDKs, such as the SDK for Python
    #           (Boto3), add a unique value to the call.</p>
    #
    # @option params [String] :image_name
    #   <p>The <code>ImageName</code> of the <code>Image</code> to create a version of.</p>
    #
    # @return [Types::CreateImageVersionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_image_version(
    #     base_image: 'BaseImage', # required
    #     client_token: 'ClientToken', # required
    #     image_name: 'ImageName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateImageVersionOutput
    #   resp.data.image_version_arn #=> String
    #
    def create_image_version(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateImageVersionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateImageVersionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateImageVersion
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse, Errors::ResourceNotFound]),
        data_parser: Parsers::CreateImageVersion
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateImageVersion,
        stubs: @stubs,
        params_class: Params::CreateImageVersionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_image_version
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Starts a recommendation job. You can create either an instance
    #           recommendation or load test job.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateInferenceRecommendationsJobInput}.
    #
    # @option params [String] :job_name
    #   <p>A name for the recommendation job. The name must be unique within
    #              the Amazon Web Services Region and within your Amazon Web Services account.</p>
    #
    # @option params [String] :job_type
    #   <p>Defines the type of recommendation job. Specify <code>Default</code> to initiate an instance
    #              recommendation and <code>Advanced</code> to initiate a load test. If left unspecified,
    #              Amazon SageMaker Inference Recommender will run an instance recommendation (<code>DEFAULT</code>) job.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker
    #       to perform tasks on your behalf.</p>
    #
    # @option params [RecommendationJobInputConfig] :input_config
    #   <p>Provides information about the versioned model package Amazon Resource Name (ARN),
    #       the traffic pattern, and endpoint configurations.</p>
    #
    # @option params [String] :job_description
    #   <p>Description of the recommendation job.</p>
    #
    # @option params [RecommendationJobStoppingConditions] :stopping_conditions
    #   <p>A set of conditions for stopping a recommendation job.  If any of
    #             the conditions are met, the job is automatically stopped.</p>
    #
    # @option params [RecommendationJobOutputConfig] :output_config
    #   <p>Provides information about the output artifacts and the KMS key
    #            to use for Amazon S3 server-side encryption.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The metadata that you apply to Amazon Web Services resources to help you
    #              categorize and organize them. Each tag consists of a key and a value, both of
    #              which you define. For more information, see
    #              <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>
    #              in the Amazon Web Services General Reference.</p>
    #
    # @return [Types::CreateInferenceRecommendationsJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_inference_recommendations_job(
    #     job_name: 'JobName', # required
    #     job_type: 'Default', # required - accepts ["Default", "Advanced"]
    #     role_arn: 'RoleArn', # required
    #     input_config: {
    #       model_package_version_arn: 'ModelPackageVersionArn', # required
    #       job_duration_in_seconds: 1,
    #       traffic_pattern: {
    #         traffic_type: 'PHASES', # accepts ["PHASES"]
    #         phases: [
    #           {
    #             initial_number_of_users: 1,
    #             spawn_rate: 1,
    #             duration_in_seconds: 1
    #           }
    #         ]
    #       },
    #       resource_limit: {
    #         max_number_of_tests: 1,
    #         max_parallel_of_tests: 1
    #       },
    #       endpoint_configurations: [
    #         {
    #           instance_type: 'ml.t2.medium', # required - accepts ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.12xlarge", "ml.m5d.24xlarge", "ml.c4.large", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.large", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.12xlarge", "ml.r5.24xlarge", "ml.r5d.large", "ml.r5d.xlarge", "ml.r5d.2xlarge", "ml.r5d.4xlarge", "ml.r5d.12xlarge", "ml.r5d.24xlarge", "ml.inf1.xlarge", "ml.inf1.2xlarge", "ml.inf1.6xlarge", "ml.inf1.24xlarge"]
    #           inference_specification_name: 'InferenceSpecificationName',
    #           environment_parameter_ranges: {
    #             categorical_parameter_ranges: [
    #               {
    #                 name: 'Name', # required
    #                 value: [
    #                   'member'
    #                 ] # required
    #               }
    #             ]
    #           }
    #         }
    #       ],
    #       volume_kms_key_id: 'VolumeKmsKeyId'
    #     }, # required
    #     job_description: 'JobDescription',
    #     stopping_conditions: {
    #       max_invocations: 1,
    #       model_latency_thresholds: [
    #         {
    #           percentile: 'Percentile',
    #           value_in_milliseconds: 1
    #         }
    #       ]
    #     },
    #     output_config: {
    #       kms_key_id: 'KmsKeyId',
    #       compiled_output_config: {
    #         s3_output_uri: 'S3OutputUri'
    #       }
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateInferenceRecommendationsJobOutput
    #   resp.data.job_arn #=> String
    #
    def create_inference_recommendations_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateInferenceRecommendationsJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateInferenceRecommendationsJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateInferenceRecommendationsJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateInferenceRecommendationsJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateInferenceRecommendationsJob,
        stubs: @stubs,
        params_class: Params::CreateInferenceRecommendationsJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_inference_recommendations_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a job that uses workers to label the data objects in your input dataset. You
    #             can use the labeled data to train machine learning models. </p>
    #         <p>You can select your workforce from one of three providers:</p>
    #         <ul>
    #             <li>
    #                 <p>A private workforce that you create. It can include employees, contractors,
    #                     and outside experts. Use a private workforce when want the data to stay within
    #                     your organization or when a specific set of skills is required.</p>
    #             </li>
    #             <li>
    #                 <p>One or more vendors that you select from the Amazon Web Services Marketplace. Vendors provide
    #                     expertise in specific areas. </p>
    #             </li>
    #             <li>
    #                 <p>The Amazon Mechanical Turk workforce. This is the largest workforce, but it
    #                     should only be used for public data or data that has been stripped of any
    #                     personally identifiable information.</p>
    #             </li>
    #          </ul>
    #         <p>You can also use <i>automated data labeling</i> to reduce the number of
    #             data objects that need to be labeled by a human. Automated data labeling uses
    #                 <i>active learning</i> to determine if a data object can be labeled by
    #             machine or if it needs to be sent to a human worker. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-automated-labeling.html">Using
    #                 Automated Data Labeling</a>.</p>
    #         <p>The data objects to be labeled are contained in an Amazon S3 bucket. You create a
    #                 <i>manifest file</i> that describes the location of each object. For
    #             more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-data.html">Using Input and Output Data</a>.</p>
    #         <p>The output can be used as the manifest file for another labeling job or as training
    #             data for your machine learning models.</p>
    #         <p>You can use this operation to create a static labeling job or a streaming labeling
    #             job. A static labeling job stops if all data objects in the input manifest file
    #             identified in <code>ManifestS3Uri</code> have been labeled. A streaming labeling job
    #             runs perpetually until it is manually stopped, or remains idle for 10 days. You can send
    #             new data objects to an active (<code>InProgress</code>) streaming labeling job in real
    #             time. To learn how to create a static labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-create-labeling-job-api.html">Create a Labeling Job
    #                 (API) </a> in the Amazon SageMaker Developer Guide. To learn how to create a streaming
    #             labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-create-job.html">Create a Streaming Labeling
    #                 Job</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateLabelingJobInput}.
    #
    # @option params [String] :labeling_job_name
    #   <p>The name of the labeling job. This name is used to identify the job in a list of
    #               labeling jobs. Labeling job names must be unique within an Amazon Web Services account and region.
    #                   <code>LabelingJobName</code> is not case sensitive. For example, Example-job and
    #               example-job are considered the same labeling job name by Ground Truth.</p>
    #
    # @option params [String] :label_attribute_name
    #   <p>The attribute name to use for the label in the output manifest file. This is the key
    #               for the key/value pair formed with the label that a worker assigns to the object. The
    #                   <code>LabelAttributeName</code> must meet the following requirements.</p>
    #           <ul>
    #               <li>
    #                   <p>The name can't end with "-metadata". </p>
    #               </li>
    #               <li>
    #                   <p>If you are using one of the following <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in task types</a>,
    #                       the attribute name <i>must</i> end with "-ref". If the task type
    #                       you are using is not listed below, the attribute name <i>must
    #                           not</i> end with "-ref".</p>
    #                   <ul>
    #                     <li>
    #                           <p>Image semantic segmentation (<code>SemanticSegmentation)</code>, and
    #                               adjustment (<code>AdjustmentSemanticSegmentation</code>) and
    #                               verification (<code>VerificationSemanticSegmentation</code>) labeling
    #                               jobs for this task type.</p>
    #                       </li>
    #                     <li>
    #                           <p>Video frame object detection (<code>VideoObjectDetection</code>), and
    #                               adjustment and verification
    #                               (<code>AdjustmentVideoObjectDetection</code>) labeling jobs for this
    #                               task type.</p>
    #                       </li>
    #                     <li>
    #                           <p>Video frame object tracking (<code>VideoObjectTracking</code>), and
    #                               adjustment and verification (<code>AdjustmentVideoObjectTracking</code>)
    #                               labeling jobs for this task type.</p>
    #                       </li>
    #                     <li>
    #                           <p>3D point cloud semantic segmentation
    #                                   (<code>3DPointCloudSemanticSegmentation</code>), and adjustment and
    #                               verification (<code>Adjustment3DPointCloudSemanticSegmentation</code>)
    #                               labeling jobs for this task type. </p>
    #                       </li>
    #                     <li>
    #                           <p>3D point cloud object tracking
    #                                   (<code>3DPointCloudObjectTracking</code>), and adjustment and
    #                               verification (<code>Adjustment3DPointCloudObjectTracking</code>)
    #                               labeling jobs for this task type. </p>
    #                       </li>
    #                  </ul>
    #               </li>
    #            </ul>
    #           <p></p>
    #           <important>
    #               <p>If you are creating an adjustment or verification labeling job, you must use a
    #                       <i>different</i>
    #                   <code>LabelAttributeName</code> than the one used in the original labeling job. The
    #                   original labeling job is the Ground Truth labeling job that produced the labels that you
    #                   want verified or adjusted. To learn more about adjustment and verification labeling
    #                   jobs, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html">Verify and Adjust
    #                       Labels</a>.</p>
    #           </important>
    #
    # @option params [LabelingJobInputConfig] :input_config
    #   <p>Input data for the labeling job, such as the Amazon S3 location of the data objects and the
    #               location of the manifest file that describes the data objects.</p>
    #           <p>You must specify at least one of the following: <code>S3DataSource</code> or
    #                   <code>SnsDataSource</code>. </p>
    #           <ul>
    #               <li>
    #                   <p>Use <code>SnsDataSource</code> to specify an SNS input topic for a streaming
    #                       labeling job. If you do not specify and SNS input topic ARN, Ground Truth will
    #                       create a one-time labeling job that stops after all data objects in the input
    #                       manifest file have been labeled.</p>
    #               </li>
    #               <li>
    #                   <p>Use <code>S3DataSource</code> to specify an input manifest file for both
    #                       streaming and one-time labeling jobs. Adding an <code>S3DataSource</code> is
    #                       optional if you use <code>SnsDataSource</code> to create a streaming labeling
    #                       job.</p>
    #               </li>
    #            </ul>
    #           <p>If you use the Amazon Mechanical Turk workforce, your input data should not include
    #               confidential information, personal information or protected health information. Use
    #                   <code>ContentClassifiers</code> to specify that your data is free of personally
    #               identifiable information and adult content.</p>
    #
    # @option params [LabelingJobOutputConfig] :output_config
    #   <p>The location of the output data and the Amazon Web Services Key Management Service key ID for the key used to encrypt
    #               the output data, if any.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Number (ARN) that Amazon SageMaker assumes to perform tasks on your behalf
    #               during data labeling. You must grant this role the necessary permissions so that Amazon SageMaker
    #               can successfully complete data labeling.</p>
    #
    # @option params [String] :label_category_config_s3_uri
    #   <p>The S3 URI of the file, referred to as a <i>label category configuration
    #                   file</i>, that defines the categories used to label the data objects.</p>
    #           <p>For 3D point cloud and video frame task types, you can add label category attributes
    #               and frame attributes to your label category configuration file. To learn how, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-label-category-config.html">Create a
    #                   Labeling Category Configuration File for 3D Point Cloud Labeling Jobs</a>. </p>
    #           <p>For named entity recognition jobs, in addition to <code>"labels"</code>, you must
    #               provide worker instructions in the label category configuration file using the
    #                   <code>"instructions"</code> parameter: <code>"instructions":
    #                   {"shortInstruction":"<h1>Add header</h1><p>Add Instructions</p>",
    #                   "fullInstruction":"<p>Add additional instructions.</p>"}</code>. For details
    #               and an example, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-named-entity-recg.html#sms-creating-ner-api">Create a
    #                   Named Entity Recognition Labeling Job (API) </a>.</p>
    #           <p>For all other <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html">built-in task types</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates.html">custom
    #                   tasks</a>, your label category configuration file must be a JSON file in the
    #               following format. Identify the labels you want to use by replacing <code>label_1</code>,
    #                   <code>label_2</code>,<code>...</code>,<code>label_n</code> with your label
    #               categories.</p>
    #           <p>
    #               <code>{ </code>
    #            </p>
    #           <p>
    #               <code>"document-version": "2018-11-28",</code>
    #            </p>
    #           <p>
    #               <code>"labels": [{"label": "label_1"},{"label": "label_2"},...{"label":
    #                   "label_n"}]</code>
    #            </p>
    #           <p>
    #               <code>}</code>
    #            </p>
    #           <p>Note the following about the label category configuration file:</p>
    #           <ul>
    #               <li>
    #                   <p>For image classification and text classification (single and multi-label) you
    #                       must specify at least two label categories. For all other task types, the
    #                       minimum number of label categories required is one. </p>
    #               </li>
    #               <li>
    #                   <p>Each label category must be unique, you cannot specify duplicate label
    #                       categories.</p>
    #               </li>
    #               <li>
    #                   <p>If you create a 3D point cloud or video frame adjustment or verification
    #                       labeling job, you must include <code>auditLabelAttributeName</code> in the label
    #                       category configuration. Use this parameter to enter the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateLabelingJob.html#sagemaker-CreateLabelingJob-request-LabelAttributeName">
    #                        <code>LabelAttributeName</code>
    #                     </a> of the labeling job you want to
    #                       adjust or verify annotations of.</p>
    #               </li>
    #            </ul>
    #
    # @option params [LabelingJobStoppingConditions] :stopping_conditions
    #   <p>A set of conditions for stopping the labeling job. If any of the conditions are met,
    #               the job is automatically stopped. You can use these conditions to control the cost of
    #               data labeling.</p>
    #
    # @option params [LabelingJobAlgorithmsConfig] :labeling_job_algorithms_config
    #   <p>Configures the information required to perform automated data labeling.</p>
    #
    # @option params [HumanTaskConfig] :human_task_config
    #   <p>Configures the labeling task and how it is presented to workers; including, but not limited to price, keywords, and batch size (task count).</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key/value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
    #                   User Guide</i>.</p>
    #
    # @return [Types::CreateLabelingJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_labeling_job(
    #     labeling_job_name: 'LabelingJobName', # required
    #     label_attribute_name: 'LabelAttributeName', # required
    #     input_config: {
    #       data_source: {
    #         s3_data_source: {
    #           manifest_s3_uri: 'ManifestS3Uri' # required
    #         },
    #         sns_data_source: {
    #           sns_topic_arn: 'SnsTopicArn' # required
    #         }
    #       }, # required
    #       data_attributes: {
    #         content_classifiers: [
    #           'FreeOfPersonallyIdentifiableInformation' # accepts ["FreeOfPersonallyIdentifiableInformation", "FreeOfAdultContent"]
    #         ]
    #       }
    #     }, # required
    #     output_config: {
    #       s3_output_path: 'S3OutputPath', # required
    #       kms_key_id: 'KmsKeyId',
    #       sns_topic_arn: 'SnsTopicArn'
    #     }, # required
    #     role_arn: 'RoleArn', # required
    #     label_category_config_s3_uri: 'LabelCategoryConfigS3Uri',
    #     stopping_conditions: {
    #       max_human_labeled_object_count: 1,
    #       max_percentage_of_input_dataset_labeled: 1
    #     },
    #     labeling_job_algorithms_config: {
    #       labeling_job_algorithm_specification_arn: 'LabelingJobAlgorithmSpecificationArn', # required
    #       initial_active_learning_model_arn: 'InitialActiveLearningModelArn',
    #       labeling_job_resource_config: {
    #         volume_kms_key_id: 'VolumeKmsKeyId'
    #       }
    #     },
    #     human_task_config: {
    #       workteam_arn: 'WorkteamArn', # required
    #       ui_config: {
    #         ui_template_s3_uri: 'UiTemplateS3Uri',
    #         human_task_ui_arn: 'HumanTaskUiArn'
    #       }, # required
    #       pre_human_task_lambda_arn: 'PreHumanTaskLambdaArn', # required
    #       task_keywords: [
    #         'member'
    #       ],
    #       task_title: 'TaskTitle', # required
    #       task_description: 'TaskDescription', # required
    #       number_of_human_workers_per_data_object: 1, # required
    #       task_time_limit_in_seconds: 1, # required
    #       task_availability_lifetime_in_seconds: 1,
    #       max_concurrent_task_count: 1,
    #       annotation_consolidation_config: {
    #         annotation_consolidation_lambda_arn: 'AnnotationConsolidationLambdaArn' # required
    #       }, # required
    #       public_workforce_task_price: {
    #         amount_in_usd: {
    #           dollars: 1,
    #           cents: 1,
    #           tenth_fractions_of_a_cent: 1
    #         }
    #       }
    #     }, # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateLabelingJobOutput
    #   resp.data.labeling_job_arn #=> String
    #
    def create_labeling_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateLabelingJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateLabelingJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateLabelingJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateLabelingJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateLabelingJob,
        stubs: @stubs,
        params_class: Params::CreateLabelingJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_labeling_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a model in SageMaker. In the request, you name the model and describe a primary
    #             container. For the primary container, you specify the Docker image that
    #             contains inference code, artifacts (from prior training), and a custom environment map
    #             that the inference code uses when you deploy the model for predictions.</p>
    #         <p>Use this API to create a model if you want to use SageMaker hosting services or run a batch
    #             transform job.</p>
    #         <p>To host your model, you create an endpoint configuration with the
    #                 <code>CreateEndpointConfig</code> API, and then create an endpoint with the
    #                 <code>CreateEndpoint</code> API. SageMaker then deploys all of the containers that you
    #             defined for the model in the hosting environment. </p>
    #         <p>For an example that calls this method when deploying a model to SageMaker hosting services,
    #             see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ex1-deploy-model.html#ex1-deploy-model-boto">Deploy the
    #                 Model to Amazon SageMaker Hosting Services (Amazon Web Services SDK for Python (Boto
    #             3)).</a>
    #          </p>
    #         <p>To run a batch transform using your model, you start a job with the
    #                 <code>CreateTransformJob</code> API. SageMaker uses your model and your dataset to get
    #             inferences which are then saved to a specified S3 location.</p>
    #         <p>In the request, you also provide an IAM role that SageMaker can assume to access model
    #             artifacts and docker image for deployment on ML compute hosting instances or for batch
    #             transform jobs. In addition, you also use the IAM role to manage permissions the
    #             inference code needs. For example, if the inference code access any other Amazon Web Services resources,
    #             you grant necessary permissions via this role.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateModelInput}.
    #
    # @option params [String] :model_name
    #   <p>The name of the new model.</p>
    #
    # @option params [ContainerDefinition] :primary_container
    #   <p>The location of the primary docker image containing inference code, associated
    #               artifacts, and custom environment map that the inference code uses when the model is
    #               deployed for predictions. </p>
    #
    # @option params [Array<ContainerDefinition>] :containers
    #   <p>Specifies the containers in the inference pipeline.</p>
    #
    # @option params [InferenceExecutionConfig] :inference_execution_config
    #   <p>Specifies details of how containers in a multi-container endpoint are called.</p>
    #
    # @option params [String] :execution_role_arn
    #   <p>The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access model
    #               artifacts and docker image for deployment on ML compute instances or for batch transform
    #               jobs. Deploying on ML compute instances is part of model hosting. For more information,
    #               see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker
    #                   Roles</a>. </p>
    #           <note>
    #               <p>To be able to pass this role to SageMaker, the caller of this API must have the
    #                       <code>iam:PassRole</code> permission.</p>
    #           </note>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
    #               different ways, for example, by purpose, owner, or environment. For more information,
    #               see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
    #                   Resources</a>.</p>
    #
    # @option params [VpcConfig] :vpc_config
    #   <p>A <a>VpcConfig</a> object that specifies the VPC that you want your model
    #               to connect to. Control access to and from your model container by configuring the VPC.
    #                   <code>VpcConfig</code> is used in hosting services and in batch transform. For more
    #               information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-vpc.html">Protect Data in Batch
    #                   Transform Jobs by Using an Amazon Virtual Private Cloud</a>.</p>
    #
    # @option params [Boolean] :enable_network_isolation
    #   <p>Isolates the model container. No inbound or outbound network calls can be made to or
    #               from the model container.</p>
    #
    # @return [Types::CreateModelOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_model(
    #     model_name: 'ModelName', # required
    #     primary_container: {
    #       container_hostname: 'ContainerHostname',
    #       image: 'Image',
    #       image_config: {
    #         repository_access_mode: 'Platform', # required - accepts ["Platform", "Vpc"]
    #         repository_auth_config: {
    #           repository_credentials_provider_arn: 'RepositoryCredentialsProviderArn' # required
    #         }
    #       },
    #       mode: 'SingleModel', # accepts ["SingleModel", "MultiModel"]
    #       model_data_url: 'ModelDataUrl',
    #       environment: {
    #         'key' => 'value'
    #       },
    #       model_package_name: 'ModelPackageName',
    #       inference_specification_name: 'InferenceSpecificationName',
    #       multi_model_config: {
    #         model_cache_setting: 'Enabled' # accepts ["Enabled", "Disabled"]
    #       }
    #     },
    #     inference_execution_config: {
    #       mode: 'Serial' # required - accepts ["Serial", "Direct"]
    #     },
    #     execution_role_arn: 'ExecutionRoleArn', # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     vpc_config: {
    #       security_group_ids: [
    #         'member'
    #       ], # required
    #       subnets: [
    #         'member'
    #       ] # required
    #     },
    #     enable_network_isolation: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateModelOutput
    #   resp.data.model_arn #=> String
    #
    def create_model(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateModelInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateModelInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateModel
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::CreateModel
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateModel,
        stubs: @stubs,
        params_class: Params::CreateModelOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_model
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates the definition for a model bias job.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateModelBiasJobDefinitionInput}.
    #
    # @option params [String] :job_definition_name
    #   <p>The name of the bias job definition. The name must be unique within an Amazon Web Services Region in the
    #            Amazon Web Services account.</p>
    #
    # @option params [ModelBiasBaselineConfig] :model_bias_baseline_config
    #   <p>The baseline configuration for a model bias job.</p>
    #
    # @option params [ModelBiasAppSpecification] :model_bias_app_specification
    #   <p>Configures the model bias job to run a specified Docker container image.</p>
    #
    # @option params [ModelBiasJobInput] :model_bias_job_input
    #   <p>Inputs for the model bias job.</p>
    #
    # @option params [MonitoringOutputConfig] :model_bias_job_output_config
    #   <p>The output configuration for monitoring jobs.</p>
    #
    # @option params [MonitoringResources] :job_resources
    #   <p>Identifies the resources to deploy for a monitoring job.</p>
    #
    # @option params [MonitoringNetworkConfig] :network_config
    #   <p>Networking options for a model bias job.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
    #            perform tasks on your behalf.</p>
    #
    # @option params [MonitoringStoppingCondition] :stopping_condition
    #   <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
    #               User Guide</i>.</p>
    #
    # @return [Types::CreateModelBiasJobDefinitionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_model_bias_job_definition(
    #     job_definition_name: 'JobDefinitionName', # required
    #     model_bias_baseline_config: {
    #       baselining_job_name: 'BaseliningJobName',
    #       constraints_resource: {
    #         s3_uri: 'S3Uri'
    #       }
    #     },
    #     model_bias_app_specification: {
    #       image_uri: 'ImageUri', # required
    #       config_uri: 'ConfigUri', # required
    #       environment: {
    #         'key' => 'value'
    #       }
    #     }, # required
    #     model_bias_job_input: {
    #       endpoint_input: {
    #         endpoint_name: 'EndpointName', # required
    #         local_path: 'LocalPath', # required
    #         s3_input_mode: 'Pipe', # accepts ["Pipe", "File"]
    #         s3_data_distribution_type: 'FullyReplicated', # accepts ["FullyReplicated", "ShardedByS3Key"]
    #         features_attribute: 'FeaturesAttribute',
    #         inference_attribute: 'InferenceAttribute',
    #         probability_attribute: 'ProbabilityAttribute',
    #         probability_threshold_attribute: 1.0,
    #         start_time_offset: 'StartTimeOffset',
    #         end_time_offset: 'EndTimeOffset'
    #       }, # required
    #       ground_truth_s3_input: {
    #         s3_uri: 'S3Uri'
    #       } # required
    #     }, # required
    #     model_bias_job_output_config: {
    #       monitoring_outputs: [
    #         {
    #           s3_output: {
    #             s3_uri: 'S3Uri', # required
    #             local_path: 'LocalPath', # required
    #             s3_upload_mode: 'Continuous' # accepts ["Continuous", "EndOfJob"]
    #           } # required
    #         }
    #       ], # required
    #       kms_key_id: 'KmsKeyId'
    #     }, # required
    #     job_resources: {
    #       cluster_config: {
    #         instance_count: 1, # required
    #         instance_type: 'ml.t3.medium', # required - accepts ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #         volume_size_in_gb: 1, # required
    #         volume_kms_key_id: 'VolumeKmsKeyId'
    #       } # required
    #     }, # required
    #     network_config: {
    #       enable_inter_container_traffic_encryption: false,
    #       enable_network_isolation: false,
    #       vpc_config: {
    #         security_group_ids: [
    #           'member'
    #         ], # required
    #         subnets: [
    #           'member'
    #         ] # required
    #       }
    #     },
    #     role_arn: 'RoleArn', # required
    #     stopping_condition: {
    #       max_runtime_in_seconds: 1 # required
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateModelBiasJobDefinitionOutput
    #   resp.data.job_definition_arn #=> String
    #
    def create_model_bias_job_definition(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateModelBiasJobDefinitionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateModelBiasJobDefinitionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateModelBiasJobDefinition
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateModelBiasJobDefinition
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateModelBiasJobDefinition,
        stubs: @stubs,
        params_class: Params::CreateModelBiasJobDefinitionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_model_bias_job_definition
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates the definition for a model explainability job.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateModelExplainabilityJobDefinitionInput}.
    #
    # @option params [String] :job_definition_name
    #   <p> The name of the model explainability job definition. The name must be unique within an
    #            Amazon Web Services Region in the Amazon Web Services account.</p>
    #
    # @option params [ModelExplainabilityBaselineConfig] :model_explainability_baseline_config
    #   <p>The baseline configuration for a model explainability job.</p>
    #
    # @option params [ModelExplainabilityAppSpecification] :model_explainability_app_specification
    #   <p>Configures the model explainability job to run a specified Docker container
    #            image.</p>
    #
    # @option params [ModelExplainabilityJobInput] :model_explainability_job_input
    #   <p>Inputs for the model explainability job.</p>
    #
    # @option params [MonitoringOutputConfig] :model_explainability_job_output_config
    #   <p>The output configuration for monitoring jobs.</p>
    #
    # @option params [MonitoringResources] :job_resources
    #   <p>Identifies the resources to deploy for a monitoring job.</p>
    #
    # @option params [MonitoringNetworkConfig] :network_config
    #   <p>Networking options for a model explainability job.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
    #            perform tasks on your behalf.</p>
    #
    # @option params [MonitoringStoppingCondition] :stopping_condition
    #   <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
    #               User Guide</i>.</p>
    #
    # @return [Types::CreateModelExplainabilityJobDefinitionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_model_explainability_job_definition(
    #     job_definition_name: 'JobDefinitionName', # required
    #     model_explainability_baseline_config: {
    #       baselining_job_name: 'BaseliningJobName',
    #       constraints_resource: {
    #         s3_uri: 'S3Uri'
    #       }
    #     },
    #     model_explainability_app_specification: {
    #       image_uri: 'ImageUri', # required
    #       config_uri: 'ConfigUri', # required
    #       environment: {
    #         'key' => 'value'
    #       }
    #     }, # required
    #     model_explainability_job_input: {
    #       endpoint_input: {
    #         endpoint_name: 'EndpointName', # required
    #         local_path: 'LocalPath', # required
    #         s3_input_mode: 'Pipe', # accepts ["Pipe", "File"]
    #         s3_data_distribution_type: 'FullyReplicated', # accepts ["FullyReplicated", "ShardedByS3Key"]
    #         features_attribute: 'FeaturesAttribute',
    #         inference_attribute: 'InferenceAttribute',
    #         probability_attribute: 'ProbabilityAttribute',
    #         probability_threshold_attribute: 1.0,
    #         start_time_offset: 'StartTimeOffset',
    #         end_time_offset: 'EndTimeOffset'
    #       } # required
    #     }, # required
    #     model_explainability_job_output_config: {
    #       monitoring_outputs: [
    #         {
    #           s3_output: {
    #             s3_uri: 'S3Uri', # required
    #             local_path: 'LocalPath', # required
    #             s3_upload_mode: 'Continuous' # accepts ["Continuous", "EndOfJob"]
    #           } # required
    #         }
    #       ], # required
    #       kms_key_id: 'KmsKeyId'
    #     }, # required
    #     job_resources: {
    #       cluster_config: {
    #         instance_count: 1, # required
    #         instance_type: 'ml.t3.medium', # required - accepts ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #         volume_size_in_gb: 1, # required
    #         volume_kms_key_id: 'VolumeKmsKeyId'
    #       } # required
    #     }, # required
    #     network_config: {
    #       enable_inter_container_traffic_encryption: false,
    #       enable_network_isolation: false,
    #       vpc_config: {
    #         security_group_ids: [
    #           'member'
    #         ], # required
    #         subnets: [
    #           'member'
    #         ] # required
    #       }
    #     },
    #     role_arn: 'RoleArn', # required
    #     stopping_condition: {
    #       max_runtime_in_seconds: 1 # required
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateModelExplainabilityJobDefinitionOutput
    #   resp.data.job_definition_arn #=> String
    #
    def create_model_explainability_job_definition(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateModelExplainabilityJobDefinitionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateModelExplainabilityJobDefinitionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateModelExplainabilityJobDefinition
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateModelExplainabilityJobDefinition
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateModelExplainabilityJobDefinition,
        stubs: @stubs,
        params_class: Params::CreateModelExplainabilityJobDefinitionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_model_explainability_job_definition
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a model package that you can use to create SageMaker models or list on Amazon Web Services
    #             Marketplace, or a versioned model that is part of a model group. Buyers can subscribe to
    #             model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p>
    #         <p>To create a model package by specifying a Docker container that contains your
    #             inference code and the Amazon S3 location of your model artifacts, provide values for
    #             <code>InferenceSpecification</code>. To create a model from an algorithm resource
    #             that you created or subscribed to in Amazon Web Services Marketplace, provide a value for
    #             <code>SourceAlgorithmSpecification</code>.</p>
    #         <note>
    #             <p>There are two types of model packages:</p>
    #             <ul>
    #                <li>
    #                     <p>Versioned - a model that is part of a model group in the model
    #                         registry.</p>
    #                 </li>
    #                <li>
    #                     <p>Unversioned - a model package that is not part of a model group.</p>
    #                 </li>
    #             </ul>
    #         </note>
    #
    # @param [Hash] params
    #   See {Types::CreateModelPackageInput}.
    #
    # @option params [String] :model_package_name
    #   <p>The name of the model package. The name must have 1 to 63 characters. Valid characters
    #               are a-z, A-Z, 0-9, and - (hyphen).</p>
    #           <p>This parameter is required for unversioned models. It is not applicable to versioned
    #               models.</p>
    #
    # @option params [String] :model_package_group_name
    #   <p>The name or Amazon Resource Name (ARN) of the model package group that this model version belongs to.</p>
    #           <p>This parameter is required for versioned models, and does not apply to unversioned
    #               models.</p>
    #
    # @option params [String] :model_package_description
    #   <p>A description of the model package.</p>
    #
    # @option params [InferenceSpecification] :inference_specification
    #   <p>Specifies details about inference jobs that can be run with models based on this model
    #               package, including the following:</p>
    #           <ul>
    #               <li>
    #                   <p>The Amazon ECR paths of containers that contain the inference code and model
    #                       artifacts.</p>
    #               </li>
    #               <li>
    #                   <p>The instance types that the model package supports for transform jobs and
    #                       real-time endpoints used for inference.</p>
    #               </li>
    #               <li>
    #                   <p>The input and output content formats that the model package supports for
    #                       inference.</p>
    #               </li>
    #            </ul>
    #
    # @option params [ModelPackageValidationSpecification] :validation_specification
    #   <p>Specifies configurations for one or more transform jobs that SageMaker runs to test the
    #               model package.</p>
    #
    # @option params [SourceAlgorithmSpecification] :source_algorithm_specification
    #   <p>Details about the algorithm that was used to create the model package.</p>
    #
    # @option params [Boolean] :certify_for_marketplace
    #   <p>Whether to certify the model package for listing on Amazon Web Services Marketplace.</p>
    #           <p>This parameter is optional for unversioned models, and does not apply to versioned
    #               models.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>A list of key value pairs associated with the model. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
    #               resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
    #
    # @option params [String] :model_approval_status
    #   <p>Whether the model is approved for deployment.</p>
    #           <p>This parameter is optional for versioned models, and does not apply to unversioned
    #               models.</p>
    #           <p>For versioned models, the value of this parameter must be set to <code>Approved</code>
    #           to deploy the model.</p>
    #
    # @option params [MetadataProperties] :metadata_properties
    #   <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    #
    # @option params [ModelMetrics] :model_metrics
    #   <p>A structure that contains model metrics reports.</p>
    #
    # @option params [String] :client_token
    #   <p>A unique token that guarantees that the call to this API is idempotent.</p>
    #
    # @option params [Hash<String, String>] :customer_metadata_properties
    #   <p>The metadata properties associated with the model package versions.</p>
    #
    # @option params [DriftCheckBaselines] :drift_check_baselines
    #   <p>Represents the drift check baselines that can be used when the model monitor is set using the model package.
    #               For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection">Drift Detection against Previous Baselines in SageMaker Pipelines</a> in the <i>Amazon SageMaker Developer Guide</i>.
    #           </p>
    #
    # @option params [String] :domain
    #   <p>The machine learning domain of your model package and its components. Common
    #       machine learning domains include computer vision and natural language processing.</p>
    #
    # @option params [String] :task
    #   <p>The machine learning task your model package accomplishes. Common machine
    #       learning tasks include object detection and image classification. The following
    #       tasks are supported by Inference Recommender:
    #      <code>"IMAGE_CLASSIFICATION"</code> | <code>"OBJECT_DETECTION"</code> | <code>"TEXT_GENERATION"</code> |<code>"IMAGE_SEGMENTATION"</code> |
    #      <code>"FILL_MASK"</code> | <code>"CLASSIFICATION"</code> | <code>"REGRESSION"</code> | <code>"OTHER"</code>.</p>
    #            <p>Specify "OTHER" if none of the tasks listed fit your use case.</p>
    #
    # @option params [String] :sample_payload_url
    #   <p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored. This path must point
    #       to a single gzip compressed tar archive (.tar.gz suffix).</p>
    #
    # @option params [Array<AdditionalInferenceSpecificationDefinition>] :additional_inference_specifications
    #   <p>An array of additional Inference Specification objects. Each additional
    #       Inference Specification specifies artifacts based on this model package that can
    #       be used on inference endpoints. Generally used with SageMaker Neo to store the
    #       compiled artifacts. </p>
    #
    # @return [Types::CreateModelPackageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_model_package(
    #     model_package_name: 'ModelPackageName',
    #     model_package_group_name: 'ModelPackageGroupName',
    #     model_package_description: 'ModelPackageDescription',
    #     inference_specification: {
    #       containers: [
    #         {
    #           container_hostname: 'ContainerHostname',
    #           image: 'Image', # required
    #           image_digest: 'ImageDigest',
    #           model_data_url: 'ModelDataUrl',
    #           product_id: 'ProductId',
    #           environment: {
    #             'key' => 'value'
    #           },
    #           model_input: {
    #             data_input_config: 'DataInputConfig' # required
    #           },
    #           framework: 'Framework',
    #           framework_version: 'FrameworkVersion',
    #           nearest_model_name: 'NearestModelName'
    #         }
    #       ], # required
    #       supported_transform_instance_types: [
    #         'ml.m4.xlarge' # accepts ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #       ],
    #       supported_realtime_inference_instance_types: [
    #         'ml.t2.medium' # accepts ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.12xlarge", "ml.m5d.24xlarge", "ml.c4.large", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.large", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.12xlarge", "ml.r5.24xlarge", "ml.r5d.large", "ml.r5d.xlarge", "ml.r5d.2xlarge", "ml.r5d.4xlarge", "ml.r5d.12xlarge", "ml.r5d.24xlarge", "ml.inf1.xlarge", "ml.inf1.2xlarge", "ml.inf1.6xlarge", "ml.inf1.24xlarge"]
    #       ],
    #       supported_content_types: [
    #         'member'
    #       ], # required
    #       supported_response_mime_types: [
    #         'member'
    #       ] # required
    #     },
    #     validation_specification: {
    #       validation_role: 'ValidationRole', # required
    #       validation_profiles: [
    #         {
    #           profile_name: 'ProfileName', # required
    #           transform_job_definition: {
    #             max_concurrent_transforms: 1,
    #             max_payload_in_mb: 1,
    #             batch_strategy: 'MultiRecord', # accepts ["MultiRecord", "SingleRecord"]
    #             environment: {
    #               'key' => 'value'
    #             },
    #             transform_input: {
    #               data_source: {
    #                 s3_data_source: {
    #                   s3_data_type: 'ManifestFile', # required - accepts ["ManifestFile", "S3Prefix", "AugmentedManifestFile"]
    #                   s3_uri: 'S3Uri' # required
    #                 } # required
    #               }, # required
    #               content_type: 'ContentType',
    #               compression_type: 'None', # accepts ["None", "Gzip"]
    #               split_type: 'None' # accepts ["None", "Line", "RecordIO", "TFRecord"]
    #             }, # required
    #             transform_output: {
    #               s3_output_path: 'S3OutputPath', # required
    #               accept: 'Accept',
    #               assemble_with: 'None', # accepts ["None", "Line"]
    #               kms_key_id: 'KmsKeyId'
    #             }, # required
    #             transform_resources: {
    #               instance_type: 'ml.m4.xlarge', # required - accepts ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #               instance_count: 1, # required
    #               volume_kms_key_id: 'VolumeKmsKeyId'
    #             } # required
    #           } # required
    #         }
    #       ] # required
    #     },
    #     source_algorithm_specification: {
    #       source_algorithms: [
    #         {
    #           model_data_url: 'ModelDataUrl',
    #           algorithm_name: 'AlgorithmName' # required
    #         }
    #       ] # required
    #     },
    #     certify_for_marketplace: false,
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     model_approval_status: 'Approved', # accepts ["Approved", "Rejected", "PendingManualApproval"]
    #     metadata_properties: {
    #       commit_id: 'CommitId',
    #       repository: 'Repository',
    #       generated_by: 'GeneratedBy',
    #       project_id: 'ProjectId'
    #     },
    #     model_metrics: {
    #       model_quality: {
    #         statistics: {
    #           content_type: 'ContentType', # required
    #           content_digest: 'ContentDigest',
    #           s3_uri: 'S3Uri' # required
    #         },
    #       },
    #       model_data_quality: {
    #       },
    #       bias: {
    #       },
    #       explainability: {
    #       }
    #     },
    #     client_token: 'ClientToken',
    #     customer_metadata_properties: {
    #       'key' => 'value'
    #     },
    #     drift_check_baselines: {
    #       bias: {
    #         config_file: {
    #           content_type: 'ContentType',
    #           content_digest: 'ContentDigest',
    #           s3_uri: 'S3Uri' # required
    #         },
    #       },
    #       explainability: {
    #       },
    #       model_quality: {
    #       },
    #       model_data_quality: {
    #       }
    #     },
    #     domain: 'Domain',
    #     task: 'Task',
    #     sample_payload_url: 'SamplePayloadUrl',
    #     additional_inference_specifications: [
    #       {
    #         name: 'Name', # required
    #         description: 'Description',
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateModelPackageOutput
    #   resp.data.model_package_arn #=> String
    #
    def create_model_package(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateModelPackageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateModelPackageInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateModelPackage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ConflictException, Errors::ResourceLimitExceeded]),
        data_parser: Parsers::CreateModelPackage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateModelPackage,
        stubs: @stubs,
        params_class: Params::CreateModelPackageOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_model_package
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a model group. A model group contains a group of model versions.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateModelPackageGroupInput}.
    #
    # @option params [String] :model_package_group_name
    #   <p>The name of the model group.</p>
    #
    # @option params [String] :model_package_group_description
    #   <p>A description for the model group.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>A list of key value pairs associated with the model group. For more information, see
    #               <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
    #                   resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
    #
    # @return [Types::CreateModelPackageGroupOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_model_package_group(
    #     model_package_group_name: 'ModelPackageGroupName', # required
    #     model_package_group_description: 'ModelPackageGroupDescription',
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateModelPackageGroupOutput
    #   resp.data.model_package_group_arn #=> String
    #
    def create_model_package_group(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateModelPackageGroupInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateModelPackageGroupInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateModelPackageGroup
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::CreateModelPackageGroup
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateModelPackageGroup,
        stubs: @stubs,
        params_class: Params::CreateModelPackageGroupOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_model_package_group
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a definition for a job that monitors model quality and drift. For information
    #          about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateModelQualityJobDefinitionInput}.
    #
    # @option params [String] :job_definition_name
    #   <p>The name of the monitoring job definition.</p>
    #
    # @option params [ModelQualityBaselineConfig] :model_quality_baseline_config
    #   <p>Specifies the constraints and baselines for the monitoring job.</p>
    #
    # @option params [ModelQualityAppSpecification] :model_quality_app_specification
    #   <p>The container that runs the monitoring job.</p>
    #
    # @option params [ModelQualityJobInput] :model_quality_job_input
    #   <p>A list of the inputs that are monitored. Currently endpoints are supported.</p>
    #
    # @option params [MonitoringOutputConfig] :model_quality_job_output_config
    #   <p>The output configuration for monitoring jobs.</p>
    #
    # @option params [MonitoringResources] :job_resources
    #   <p>Identifies the resources to deploy for a monitoring job.</p>
    #
    # @option params [MonitoringNetworkConfig] :network_config
    #   <p>Specifies the network configuration for the monitoring job.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
    #            perform tasks on your behalf.</p>
    #
    # @option params [MonitoringStoppingCondition] :stopping_condition
    #   <p>A time limit for how long the monitoring job is allowed to run before stopping.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
    #               User Guide</i>.</p>
    #
    # @return [Types::CreateModelQualityJobDefinitionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_model_quality_job_definition(
    #     job_definition_name: 'JobDefinitionName', # required
    #     model_quality_baseline_config: {
    #       baselining_job_name: 'BaseliningJobName',
    #       constraints_resource: {
    #         s3_uri: 'S3Uri'
    #       }
    #     },
    #     model_quality_app_specification: {
    #       image_uri: 'ImageUri', # required
    #       container_entrypoint: [
    #         'member'
    #       ],
    #       container_arguments: [
    #         'member'
    #       ],
    #       record_preprocessor_source_uri: 'RecordPreprocessorSourceUri',
    #       post_analytics_processor_source_uri: 'PostAnalyticsProcessorSourceUri',
    #       problem_type: 'BinaryClassification', # accepts ["BinaryClassification", "MulticlassClassification", "Regression"]
    #       environment: {
    #         'key' => 'value'
    #       }
    #     }, # required
    #     model_quality_job_input: {
    #       endpoint_input: {
    #         endpoint_name: 'EndpointName', # required
    #         local_path: 'LocalPath', # required
    #         s3_input_mode: 'Pipe', # accepts ["Pipe", "File"]
    #         s3_data_distribution_type: 'FullyReplicated', # accepts ["FullyReplicated", "ShardedByS3Key"]
    #         features_attribute: 'FeaturesAttribute',
    #         inference_attribute: 'InferenceAttribute',
    #         probability_attribute: 'ProbabilityAttribute',
    #         probability_threshold_attribute: 1.0,
    #         start_time_offset: 'StartTimeOffset',
    #         end_time_offset: 'EndTimeOffset'
    #       }, # required
    #       ground_truth_s3_input: {
    #         s3_uri: 'S3Uri'
    #       } # required
    #     }, # required
    #     model_quality_job_output_config: {
    #       monitoring_outputs: [
    #         {
    #           s3_output: {
    #             s3_uri: 'S3Uri', # required
    #             local_path: 'LocalPath', # required
    #             s3_upload_mode: 'Continuous' # accepts ["Continuous", "EndOfJob"]
    #           } # required
    #         }
    #       ], # required
    #       kms_key_id: 'KmsKeyId'
    #     }, # required
    #     job_resources: {
    #       cluster_config: {
    #         instance_count: 1, # required
    #         instance_type: 'ml.t3.medium', # required - accepts ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #         volume_size_in_gb: 1, # required
    #         volume_kms_key_id: 'VolumeKmsKeyId'
    #       } # required
    #     }, # required
    #     network_config: {
    #       enable_inter_container_traffic_encryption: false,
    #       enable_network_isolation: false,
    #       vpc_config: {
    #         security_group_ids: [
    #           'member'
    #         ], # required
    #         subnets: [
    #           'member'
    #         ] # required
    #       }
    #     },
    #     role_arn: 'RoleArn', # required
    #     stopping_condition: {
    #       max_runtime_in_seconds: 1 # required
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateModelQualityJobDefinitionOutput
    #   resp.data.job_definition_arn #=> String
    #
    def create_model_quality_job_definition(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateModelQualityJobDefinitionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateModelQualityJobDefinitionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateModelQualityJobDefinition
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateModelQualityJobDefinition
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateModelQualityJobDefinition,
        stubs: @stubs,
        params_class: Params::CreateModelQualityJobDefinitionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_model_quality_job_definition
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a schedule that regularly starts Amazon SageMaker Processing Jobs to monitor the data
    #          captured for an Amazon SageMaker Endoint.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateMonitoringScheduleInput}.
    #
    # @option params [String] :monitoring_schedule_name
    #   <p>The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within
    #            an Amazon Web Services account.</p>
    #
    # @option params [MonitoringScheduleConfig] :monitoring_schedule_config
    #   <p>The configuration object that specifies the monitoring schedule and defines the
    #            monitoring job.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>(Optional) An array of key-value pairs. For more information, see <a href=" https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
    #               User Guide</i>.</p>
    #
    # @return [Types::CreateMonitoringScheduleOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_monitoring_schedule(
    #     monitoring_schedule_name: 'MonitoringScheduleName', # required
    #     monitoring_schedule_config: {
    #       schedule_config: {
    #         schedule_expression: 'ScheduleExpression' # required
    #       },
    #       monitoring_job_definition: {
    #         baseline_config: {
    #           baselining_job_name: 'BaseliningJobName',
    #           constraints_resource: {
    #             s3_uri: 'S3Uri'
    #           },
    #           statistics_resource: {
    #             s3_uri: 'S3Uri'
    #           }
    #         },
    #         monitoring_inputs: [
    #           {
    #             endpoint_input: {
    #               endpoint_name: 'EndpointName', # required
    #               local_path: 'LocalPath', # required
    #               s3_input_mode: 'Pipe', # accepts ["Pipe", "File"]
    #               s3_data_distribution_type: 'FullyReplicated', # accepts ["FullyReplicated", "ShardedByS3Key"]
    #               features_attribute: 'FeaturesAttribute',
    #               inference_attribute: 'InferenceAttribute',
    #               probability_attribute: 'ProbabilityAttribute',
    #               probability_threshold_attribute: 1.0,
    #               start_time_offset: 'StartTimeOffset',
    #               end_time_offset: 'EndTimeOffset'
    #             } # required
    #           }
    #         ], # required
    #         monitoring_output_config: {
    #           monitoring_outputs: [
    #             {
    #               s3_output: {
    #                 s3_uri: 'S3Uri', # required
    #                 local_path: 'LocalPath', # required
    #                 s3_upload_mode: 'Continuous' # accepts ["Continuous", "EndOfJob"]
    #               } # required
    #             }
    #           ], # required
    #           kms_key_id: 'KmsKeyId'
    #         }, # required
    #         monitoring_resources: {
    #           cluster_config: {
    #             instance_count: 1, # required
    #             instance_type: 'ml.t3.medium', # required - accepts ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #             volume_size_in_gb: 1, # required
    #             volume_kms_key_id: 'VolumeKmsKeyId'
    #           } # required
    #         }, # required
    #         monitoring_app_specification: {
    #           image_uri: 'ImageUri', # required
    #           container_entrypoint: [
    #             'member'
    #           ],
    #           container_arguments: [
    #             'member'
    #           ],
    #           record_preprocessor_source_uri: 'RecordPreprocessorSourceUri',
    #           post_analytics_processor_source_uri: 'PostAnalyticsProcessorSourceUri'
    #         }, # required
    #         stopping_condition: {
    #           max_runtime_in_seconds: 1 # required
    #         },
    #         environment: {
    #           'key' => 'value'
    #         },
    #         network_config: {
    #           enable_inter_container_traffic_encryption: false,
    #           enable_network_isolation: false,
    #           vpc_config: {
    #             security_group_ids: [
    #               'member'
    #             ], # required
    #             subnets: [
    #               'member'
    #             ] # required
    #           }
    #         },
    #         role_arn: 'RoleArn' # required
    #       },
    #       monitoring_job_definition_name: 'MonitoringJobDefinitionName',
    #       monitoring_type: 'DataQuality' # accepts ["DataQuality", "ModelQuality", "ModelBias", "ModelExplainability"]
    #     }, # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateMonitoringScheduleOutput
    #   resp.data.monitoring_schedule_arn #=> String
    #
    def create_monitoring_schedule(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateMonitoringScheduleInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateMonitoringScheduleInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateMonitoringSchedule
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateMonitoringSchedule
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateMonitoringSchedule,
        stubs: @stubs,
        params_class: Params::CreateMonitoringScheduleOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_monitoring_schedule
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an SageMaker notebook instance. A notebook instance is a machine learning (ML)
    #             compute instance running on a Jupyter notebook. </p>
    #         <p>In a <code>CreateNotebookInstance</code> request, specify the type of ML compute
    #             instance that you want to run. SageMaker launches the instance, installs common libraries
    #             that you can use to explore datasets for model training, and attaches an ML storage
    #             volume to the notebook instance. </p>
    #         <p>SageMaker also provides a set of example notebooks. Each notebook demonstrates how to
    #             use SageMaker with a specific algorithm or with a machine learning framework. </p>
    #         <p>After receiving the request, SageMaker does the following:</p>
    #         <ol>
    #             <li>
    #                 <p>Creates a network interface in the SageMaker VPC.</p>
    #             </li>
    #             <li>
    #                 <p>(Option) If you specified <code>SubnetId</code>, SageMaker creates a network
    #                     interface in your own VPC, which is inferred from the subnet ID that you provide
    #                     in the input. When creating this network interface, SageMaker attaches the security
    #                     group that you specified in the request to the network interface that it creates
    #                     in your VPC.</p>
    #
    #             </li>
    #             <li>
    #                 <p>Launches an EC2 instance of the type specified in the request in the SageMaker
    #                     VPC. If you specified <code>SubnetId</code> of your VPC, SageMaker specifies both
    #                     network interfaces when launching this instance. This enables inbound traffic
    #                     from your own VPC to the notebook instance, assuming that the security groups
    #                     allow it.</p>
    #             </li>
    #          </ol>
    #
    #         <p>After creating the notebook instance, SageMaker returns its Amazon Resource Name (ARN).
    #             You can't change the name of a notebook instance after you create it.</p>
    #         <p>After SageMaker creates the notebook instance, you can connect to the Jupyter server and
    #             work in Jupyter notebooks. For example, you can write code to explore a dataset that you
    #             can use for model training, train a model, host models by creating SageMaker endpoints, and
    #             validate hosted models. </p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
    #
    # @param [Hash] params
    #   See {Types::CreateNotebookInstanceInput}.
    #
    # @option params [String] :notebook_instance_name
    #   <p>The name of the new notebook instance.</p>
    #
    # @option params [String] :instance_type
    #   <p>The type of ML compute instance to launch for the notebook instance.</p>
    #
    # @option params [String] :subnet_id
    #   <p>The ID of the subnet in a VPC to which you would like to have a connectivity from
    #               your ML compute instance. </p>
    #
    # @option params [Array<String>] :security_group_ids
    #   <p>The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be
    #               for the same VPC as specified in the subnet. </p>
    #
    # @option params [String] :role_arn
    #   <p> When you send any requests to Amazon Web Services resources from the notebook instance, SageMaker
    #               assumes this role to perform tasks on your behalf. You must grant this role necessary
    #               permissions so SageMaker can perform these tasks. The policy must allow the SageMaker service
    #               principal (sagemaker.amazonaws.com) permissions to assume this role. For more
    #               information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker Roles</a>. </p>
    #           <note>
    #               <p>To be able to pass this role to SageMaker, the caller of this API must have the
    #                       <code>iam:PassRole</code> permission.</p>
    #           </note>
    #
    # @option params [String] :kms_key_id
    #   <p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on
    #               the storage volume attached to your notebook instance. The KMS key you provide must be
    #               enabled. For information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html">Enabling and Disabling
    #                   Keys</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
    #               different ways, for example, by purpose, owner, or environment. For more information,
    #               see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
    #                   Resources</a>.</p>
    #
    # @option params [String] :lifecycle_config_name
    #   <p>The name of a lifecycle configuration to associate with the notebook instance. For
    #               information about lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional)
    #                   Customize a Notebook Instance</a>.</p>
    #
    # @option params [String] :direct_internet_access
    #   <p>Sets whether SageMaker provides internet access to the notebook instance. If you set this
    #               to <code>Disabled</code> this notebook instance is able to access resources only in your
    #               VPC, and is not be able to connect to SageMaker training and endpoint services unless you
    #               configure a NAT Gateway in your VPC.</p>
    #           <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access">Notebook Instances Are Internet-Enabled by Default</a>. You can set the value
    #               of this parameter to <code>Disabled</code> only if you set a value for the
    #                   <code>SubnetId</code> parameter.</p>
    #
    # @option params [Integer] :volume_size_in_gb
    #   <p>The size, in GB, of the ML storage volume to attach to the notebook instance. The
    #               default value is 5 GB.</p>
    #
    # @option params [Array<String>] :accelerator_types
    #   <p>A list of Elastic Inference (EI) instance types to associate with this notebook
    #               instance. Currently, only one instance type can be associated with a notebook instance.
    #               For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic Inference in Amazon SageMaker</a>.</p>
    #
    # @option params [String] :default_code_repository
    #   <p>A Git repository to associate with the notebook instance as its default code
    #               repository. This can be either the name of a Git repository stored as a resource in your
    #               account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any
    #               other Git repository. When you open a notebook instance, it opens in the directory that
    #               contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker
    #                   Notebook Instances</a>.</p>
    #
    # @option params [Array<String>] :additional_code_repositories
    #   <p>An array of up to three Git repositories to associate with the notebook instance.
    #               These can be either the names of Git repositories stored as resources in your account,
    #               or the URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any
    #               other Git repository. These repositories are cloned at the same level as the default
    #               repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git
    #                   Repositories with SageMaker Notebook Instances</a>.</p>
    #
    # @option params [String] :root_access
    #   <p>Whether root access is enabled or disabled for users of the notebook instance. The
    #               default value is <code>Enabled</code>.</p>
    #           <note>
    #               <p>Lifecycle configurations need root access to be able to set up a notebook
    #                   instance. Because of this, lifecycle configurations associated with a notebook
    #                   instance always run with root access even if you disable root access for
    #                   users.</p>
    #           </note>
    #
    # @option params [String] :platform_identifier
    #   <p>The platform identifier of the notebook instance runtime environment.</p>
    #
    # @option params [InstanceMetadataServiceConfiguration] :instance_metadata_service_configuration
    #   <p>Information on the IMDS configuration of the notebook instance</p>
    #
    # @return [Types::CreateNotebookInstanceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_notebook_instance(
    #     notebook_instance_name: 'NotebookInstanceName', # required
    #     instance_type: 'ml.t2.medium', # required - accepts ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.8xlarge", "ml.m5d.12xlarge", "ml.m5d.16xlarge", "ml.m5d.24xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #     subnet_id: 'SubnetId',
    #     security_group_ids: [
    #       'member'
    #     ],
    #     role_arn: 'RoleArn', # required
    #     kms_key_id: 'KmsKeyId',
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     lifecycle_config_name: 'LifecycleConfigName',
    #     direct_internet_access: 'Enabled', # accepts ["Enabled", "Disabled"]
    #     volume_size_in_gb: 1,
    #     accelerator_types: [
    #       'ml.eia1.medium' # accepts ["ml.eia1.medium", "ml.eia1.large", "ml.eia1.xlarge", "ml.eia2.medium", "ml.eia2.large", "ml.eia2.xlarge"]
    #     ],
    #     default_code_repository: 'DefaultCodeRepository',
    #     additional_code_repositories: [
    #       'member'
    #     ],
    #     root_access: 'Enabled', # accepts ["Enabled", "Disabled"]
    #     platform_identifier: 'PlatformIdentifier',
    #     instance_metadata_service_configuration: {
    #       minimum_instance_metadata_service_version: 'MinimumInstanceMetadataServiceVersion' # required
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateNotebookInstanceOutput
    #   resp.data.notebook_instance_arn #=> String
    #
    def create_notebook_instance(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateNotebookInstanceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateNotebookInstanceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateNotebookInstance
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::CreateNotebookInstance
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateNotebookInstance,
        stubs: @stubs,
        params_class: Params::CreateNotebookInstanceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_notebook_instance
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a lifecycle configuration that you can associate with a notebook instance. A
    #                 <i>lifecycle configuration</i> is a collection of shell scripts that
    #             run when you create or start a notebook instance.</p>
    #         <p>Each lifecycle configuration script has a limit of 16384 characters.</p>
    #         <p>The value of the <code>$PATH</code> environment variable that is available to both
    #             scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.</p>
    #         <p>View CloudWatch Logs for notebook instance lifecycle configurations in log group
    #                 <code>/aws/sagemaker/NotebookInstances</code> in log stream
    #                 <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.</p>
    #         <p>Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs
    #             for longer than 5 minutes, it fails and the notebook instance is not created or
    #             started.</p>
    #         <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
    #                 2.1: (Optional) Customize a Notebook Instance</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateNotebookInstanceLifecycleConfigInput}.
    #
    # @option params [String] :notebook_instance_lifecycle_config_name
    #   <p>The name of the lifecycle configuration.</p>
    #
    # @option params [Array<NotebookInstanceLifecycleHook>] :on_create
    #   <p>A shell script that runs only once, when you create a notebook instance. The shell
    #               script must be a base64-encoded string.</p>
    #
    # @option params [Array<NotebookInstanceLifecycleHook>] :on_start
    #   <p>A shell script that runs every time you start a notebook instance, including when you
    #               create the notebook instance. The shell script must be a base64-encoded string.</p>
    #
    # @return [Types::CreateNotebookInstanceLifecycleConfigOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_notebook_instance_lifecycle_config(
    #     notebook_instance_lifecycle_config_name: 'NotebookInstanceLifecycleConfigName', # required
    #     on_create: [
    #       {
    #         content: 'Content'
    #       }
    #     ],
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateNotebookInstanceLifecycleConfigOutput
    #   resp.data.notebook_instance_lifecycle_config_arn #=> String
    #
    def create_notebook_instance_lifecycle_config(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateNotebookInstanceLifecycleConfigInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateNotebookInstanceLifecycleConfigInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateNotebookInstanceLifecycleConfig
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::CreateNotebookInstanceLifecycleConfig
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateNotebookInstanceLifecycleConfig,
        stubs: @stubs,
        params_class: Params::CreateNotebookInstanceLifecycleConfigOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_notebook_instance_lifecycle_config
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a pipeline using a JSON pipeline definition.</p>
    #
    # @param [Hash] params
    #   See {Types::CreatePipelineInput}.
    #
    # @option params [String] :pipeline_name
    #   <p>The name of the pipeline.</p>
    #
    # @option params [String] :pipeline_display_name
    #   <p>The display name of the pipeline.</p>
    #
    # @option params [String] :pipeline_definition
    #   <p>The JSON pipeline definition of the pipeline.</p>
    #
    # @option params [PipelineDefinitionS3Location] :pipeline_definition_s3_location
    #   <p>The location of the pipeline definition stored in Amazon S3. If specified,
    #               SageMaker will retrieve the pipeline definition from this location.</p>
    #
    # @option params [String] :pipeline_description
    #   <p>A description of the pipeline.</p>
    #
    # @option params [String] :client_request_token
    #   <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #            operation. An idempotent operation completes no more than one time.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) of the role used by the pipeline to access and create resources.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>A list of tags to apply to the created pipeline.</p>
    #
    # @option params [ParallelismConfiguration] :parallelism_configuration
    #   <p>This is the configuration that controls the parallelism of the pipeline.
    #               If specified, it applies to all runs of this pipeline by default.</p>
    #
    # @return [Types::CreatePipelineOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_pipeline(
    #     pipeline_name: 'PipelineName', # required
    #     pipeline_display_name: 'PipelineDisplayName',
    #     pipeline_definition: 'PipelineDefinition',
    #     pipeline_definition_s3_location: {
    #       bucket: 'Bucket', # required
    #       object_key: 'ObjectKey', # required
    #       version_id: 'VersionId'
    #     },
    #     pipeline_description: 'PipelineDescription',
    #     client_request_token: 'ClientRequestToken', # required
    #     role_arn: 'RoleArn', # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     parallelism_configuration: {
    #       max_parallel_execution_steps: 1 # required
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreatePipelineOutput
    #   resp.data.pipeline_arn #=> String
    #
    def create_pipeline(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreatePipelineInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreatePipelineInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreatePipeline
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceNotFound]),
        data_parser: Parsers::CreatePipeline
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreatePipeline,
        stubs: @stubs,
        params_class: Params::CreatePipelineOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_pipeline
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a URL for a specified UserProfile in a Domain.  When accessed in a web browser,
    #        the user will be automatically signed in to Amazon SageMaker Studio, and granted access to all of
    #        the Apps and files associated with the Domain's Amazon Elastic File System (EFS) volume.
    #        This operation can only be called when the authentication mode equals IAM.
    #    </p>
    #          <p>The IAM role or user used to call this API defines the permissions to access the app. Once
    #       the presigned URL is created, no additional permission is required to access this URL. IAM
    #          authorization policies for this API are also enforced for every HTTP request and WebSocket
    #          frame that attempts to connect to the app.</p>
    #          <p>You can restrict access to this API and to the
    #       URL that it returns to a list of IP addresses, Amazon VPCs or Amazon VPC Endpoints that you specify. For more
    #       information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-interface-endpoint.html">Connect to SageMaker Studio Through an Interface VPC Endpoint</a>
    #          .</p>
    #          <note>
    #             <p>The URL that you get from a call to <code>CreatePresignedDomainUrl</code> has a default timeout of 5 minutes. You can configure this value using <code>ExpiresInSeconds</code>. If you try to use the URL after the timeout limit expires, you
    #           are directed to the Amazon Web Services console sign-in page.</p>
    #          </note>
    #
    # @param [Hash] params
    #   See {Types::CreatePresignedDomainUrlInput}.
    #
    # @option params [String] :domain_id
    #   <p>The domain ID.</p>
    #
    # @option params [String] :user_profile_name
    #   <p>The name of the UserProfile to sign-in as.</p>
    #
    # @option params [Integer] :session_expiration_duration_in_seconds
    #   <p>The session expiration duration in seconds. This value defaults to 43200.</p>
    #
    # @option params [Integer] :expires_in_seconds
    #   <p>The number of seconds until the pre-signed URL expires. This value defaults to
    #            300.</p>
    #
    # @return [Types::CreatePresignedDomainUrlOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_presigned_domain_url(
    #     domain_id: 'DomainId', # required
    #     user_profile_name: 'UserProfileName', # required
    #     session_expiration_duration_in_seconds: 1,
    #     expires_in_seconds: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreatePresignedDomainUrlOutput
    #   resp.data.authorized_url #=> String
    #
    def create_presigned_domain_url(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreatePresignedDomainUrlInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreatePresignedDomainUrlInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreatePresignedDomainUrl
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::CreatePresignedDomainUrl
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreatePresignedDomainUrl,
        stubs: @stubs,
        params_class: Params::CreatePresignedDomainUrlOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_presigned_domain_url
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a URL that you can use to connect to the Jupyter server from a notebook
    #             instance. In the SageMaker console, when you choose <code>Open</code> next to a notebook
    #             instance, SageMaker opens a new tab showing the Jupyter server home page from the notebook
    #             instance. The console uses this API to get the URL and show the page.</p>
    #         <p> The IAM role or user used to call this API defines the permissions to access the
    #             notebook instance. Once the presigned URL is created, no additional permission is
    #             required to access this URL. IAM authorization policies for this API are also enforced
    #             for every HTTP request and WebSocket frame that attempts to connect to the notebook
    #             instance.</p>
    #         <p>You can restrict access to this API and to the URL that it returns to a list of IP
    #             addresses that you specify. Use the <code>NotIpAddress</code> condition operator and the
    #                 <code>aws:SourceIP</code> condition context key to specify the list of IP addresses
    #             that you want to have access to the notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html#nbi-ip-filter">Limit Access to a Notebook Instance by IP Address</a>.</p>
    #         <note>
    #             <p>The URL that you get from a call to <a>CreatePresignedNotebookInstanceUrl</a> is valid only for 5 minutes. If
    #                 you try to use the URL after the 5-minute limit expires, you are directed to the
    #                 Amazon Web Services console sign-in page.</p>
    #         </note>
    #
    # @param [Hash] params
    #   See {Types::CreatePresignedNotebookInstanceUrlInput}.
    #
    # @option params [String] :notebook_instance_name
    #   <p>The name of the notebook instance.</p>
    #
    # @option params [Integer] :session_expiration_duration_in_seconds
    #   <p>The duration of the session, in seconds. The default is 12 hours.</p>
    #
    # @return [Types::CreatePresignedNotebookInstanceUrlOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_presigned_notebook_instance_url(
    #     notebook_instance_name: 'NotebookInstanceName', # required
    #     session_expiration_duration_in_seconds: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreatePresignedNotebookInstanceUrlOutput
    #   resp.data.authorized_url #=> String
    #
    def create_presigned_notebook_instance_url(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreatePresignedNotebookInstanceUrlInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreatePresignedNotebookInstanceUrlInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreatePresignedNotebookInstanceUrl
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreatePresignedNotebookInstanceUrl
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreatePresignedNotebookInstanceUrl,
        stubs: @stubs,
        params_class: Params::CreatePresignedNotebookInstanceUrlOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_presigned_notebook_instance_url
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a processing job.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateProcessingJobInput}.
    #
    # @option params [Array<ProcessingInput>] :processing_inputs
    #   <p>An array of inputs configuring the data to download into the
    #               processing container.</p>
    #
    # @option params [ProcessingOutputConfig] :processing_output_config
    #   <p>Output configuration for the processing job.</p>
    #
    # @option params [String] :processing_job_name
    #   <p> The name of the processing job. The name must be unique within an Amazon Web Services Region in the
    #               Amazon Web Services account.</p>
    #
    # @option params [ProcessingResources] :processing_resources
    #   <p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a
    #               processing job. In distributed training, you specify more than one instance.</p>
    #
    # @option params [ProcessingStoppingCondition] :stopping_condition
    #   <p>The time limit for how long the processing job is allowed to run.</p>
    #
    # @option params [AppSpecification] :app_specification
    #   <p>Configures the processing job to run a specified Docker container image.</p>
    #
    # @option params [Hash<String, String>] :environment
    #   <p>The environment variables to set in the Docker container. Up to
    #               100 key and values entries in the map are supported.</p>
    #
    # @option params [NetworkConfig] :network_config
    #   <p>Networking options for a processing job, such as whether to allow inbound and
    #               outbound network calls to and from processing containers, and the VPC subnets and
    #               security groups to use for VPC-enabled processing jobs.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on
    #               your behalf.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>(Optional) An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
    #                   User Guide</i>.</p>
    #
    # @option params [ExperimentConfig] :experiment_config
    #   <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
    #         you call the following APIs:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <a>CreateProcessingJob</a>
    #                  </p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <a>CreateTrainingJob</a>
    #                  </p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <a>CreateTransformJob</a>
    #                  </p>
    #               </li>
    #            </ul>
    #
    # @return [Types::CreateProcessingJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_processing_job(
    #     processing_inputs: [
    #       {
    #         input_name: 'InputName', # required
    #         app_managed: false,
    #         s3_input: {
    #           s3_uri: 'S3Uri', # required
    #           local_path: 'LocalPath',
    #           s3_data_type: 'ManifestFile', # required - accepts ["ManifestFile", "S3Prefix"]
    #           s3_input_mode: 'Pipe', # accepts ["Pipe", "File"]
    #           s3_data_distribution_type: 'FullyReplicated', # accepts ["FullyReplicated", "ShardedByS3Key"]
    #           s3_compression_type: 'None' # accepts ["None", "Gzip"]
    #         },
    #         dataset_definition: {
    #           athena_dataset_definition: {
    #             catalog: 'Catalog', # required
    #             database: 'Database', # required
    #             query_string: 'QueryString', # required
    #             work_group: 'WorkGroup',
    #             output_s3_uri: 'OutputS3Uri', # required
    #             kms_key_id: 'KmsKeyId',
    #             output_format: 'PARQUET', # required - accepts ["PARQUET", "ORC", "AVRO", "JSON", "TEXTFILE"]
    #             output_compression: 'GZIP' # accepts ["GZIP", "SNAPPY", "ZLIB"]
    #           },
    #           redshift_dataset_definition: {
    #             cluster_id: 'ClusterId', # required
    #             database: 'Database', # required
    #             db_user: 'DbUser', # required
    #             query_string: 'QueryString', # required
    #             cluster_role_arn: 'ClusterRoleArn', # required
    #             output_s3_uri: 'OutputS3Uri', # required
    #             kms_key_id: 'KmsKeyId',
    #             output_format: 'PARQUET', # required - accepts ["PARQUET", "CSV"]
    #             output_compression: 'None' # accepts ["None", "GZIP", "BZIP2", "ZSTD", "SNAPPY"]
    #           },
    #           local_path: 'LocalPath',
    #           data_distribution_type: 'FullyReplicated', # accepts ["FullyReplicated", "ShardedByS3Key"]
    #           input_mode: 'Pipe' # accepts ["Pipe", "File"]
    #         }
    #       }
    #     ],
    #     processing_output_config: {
    #       outputs: [
    #         {
    #           output_name: 'OutputName', # required
    #           s3_output: {
    #             s3_uri: 'S3Uri', # required
    #             local_path: 'LocalPath', # required
    #             s3_upload_mode: 'Continuous' # required - accepts ["Continuous", "EndOfJob"]
    #           },
    #           feature_store_output: {
    #             feature_group_name: 'FeatureGroupName' # required
    #           },
    #           app_managed: false
    #         }
    #       ], # required
    #       kms_key_id: 'KmsKeyId'
    #     },
    #     processing_job_name: 'ProcessingJobName', # required
    #     processing_resources: {
    #       cluster_config: {
    #         instance_count: 1, # required
    #         instance_type: 'ml.t3.medium', # required - accepts ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #         volume_size_in_gb: 1, # required
    #         volume_kms_key_id: 'VolumeKmsKeyId'
    #       } # required
    #     }, # required
    #     stopping_condition: {
    #       max_runtime_in_seconds: 1 # required
    #     },
    #     app_specification: {
    #       image_uri: 'ImageUri', # required
    #       container_entrypoint: [
    #         'member'
    #       ],
    #       container_arguments: [
    #         'member'
    #       ]
    #     }, # required
    #     environment: {
    #       'key' => 'value'
    #     },
    #     network_config: {
    #       enable_inter_container_traffic_encryption: false,
    #       enable_network_isolation: false,
    #       vpc_config: {
    #         security_group_ids: [
    #           'member'
    #         ], # required
    #         subnets: [
    #           'member'
    #         ] # required
    #       }
    #     },
    #     role_arn: 'RoleArn', # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     experiment_config: {
    #       experiment_name: 'ExperimentName',
    #       trial_name: 'TrialName',
    #       trial_component_display_name: 'TrialComponentDisplayName'
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateProcessingJobOutput
    #   resp.data.processing_job_arn #=> String
    #
    def create_processing_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateProcessingJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateProcessingJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateProcessingJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse, Errors::ResourceNotFound]),
        data_parser: Parsers::CreateProcessingJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateProcessingJob,
        stubs: @stubs,
        params_class: Params::CreateProcessingJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_processing_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a machine learning (ML) project that can contain one or more templates that set
    #             up an ML pipeline from training to deploying an approved model.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateProjectInput}.
    #
    # @option params [String] :project_name
    #   <p>The name of the project.</p>
    #
    # @option params [String] :project_description
    #   <p>A description for the project.</p>
    #
    # @option params [ServiceCatalogProvisioningDetails] :service_catalog_provisioning_details
    #   <p>The product ID and provisioning artifact ID to provision a service catalog. The provisioning
    #               artifact ID will default to the latest provisioning artifact ID of the product, if you don't
    #               provide the provisioning artifact ID. For more information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service
    #                   Catalog</a>.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs that you want to use to organize and track your Amazon Web Services
    #               resource costs. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
    #
    # @return [Types::CreateProjectOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_project(
    #     project_name: 'ProjectName', # required
    #     project_description: 'ProjectDescription',
    #     service_catalog_provisioning_details: {
    #       product_id: 'ProductId', # required
    #       provisioning_artifact_id: 'ProvisioningArtifactId',
    #       path_id: 'PathId',
    #       provisioning_parameters: [
    #         {
    #           key: 'Key',
    #           value: 'Value'
    #         }
    #       ]
    #     }, # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateProjectOutput
    #   resp.data.project_arn #=> String
    #   resp.data.project_id #=> String
    #
    def create_project(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateProjectInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateProjectInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateProject
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::CreateProject
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateProject,
        stubs: @stubs,
        params_class: Params::CreateProjectOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_project
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a new Studio Lifecycle Configuration.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateStudioLifecycleConfigInput}.
    #
    # @option params [String] :studio_lifecycle_config_name
    #   <p>The name of the Studio Lifecycle Configuration to create.</p>
    #
    # @option params [String] :studio_lifecycle_config_content
    #   <p>The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.</p>
    #
    # @option params [String] :studio_lifecycle_config_app_type
    #   <p>The App type that the Lifecycle Configuration is attached to.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>Tags to be associated with the Lifecycle Configuration. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API. </p>
    #
    # @return [Types::CreateStudioLifecycleConfigOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_studio_lifecycle_config(
    #     studio_lifecycle_config_name: 'StudioLifecycleConfigName', # required
    #     studio_lifecycle_config_content: 'StudioLifecycleConfigContent', # required
    #     studio_lifecycle_config_app_type: 'JupyterServer', # required - accepts ["JupyterServer", "KernelGateway"]
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateStudioLifecycleConfigOutput
    #   resp.data.studio_lifecycle_config_arn #=> String
    #
    def create_studio_lifecycle_config(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateStudioLifecycleConfigInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateStudioLifecycleConfigInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateStudioLifecycleConfig
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceInUse]),
        data_parser: Parsers::CreateStudioLifecycleConfig
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateStudioLifecycleConfig,
        stubs: @stubs,
        params_class: Params::CreateStudioLifecycleConfigOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_studio_lifecycle_config
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Starts a model training job. After training completes, SageMaker saves the resulting
    #             model artifacts to an Amazon S3 location that you specify. </p>
    #         <p>If you choose to host your model using SageMaker hosting services, you can use the
    #             resulting model artifacts as part of the model. You can also use the artifacts in a
    #             machine learning service other than SageMaker, provided that you know how to use them for
    #             inference.
    #         </p>
    #         <p>In the request body, you provide the following: </p>
    #         <ul>
    #             <li>
    #                 <p>
    #                   <code>AlgorithmSpecification</code> - Identifies the training algorithm to
    #                     use.
    #                     </p>
    #             </li>
    #             <li>
    #                 <p>
    #                     <code>HyperParameters</code> - Specify these algorithm-specific parameters to
    #                     enable the estimation of model parameters during training. Hyperparameters can
    #                     be tuned to optimize this learning process. For a list of hyperparameters for
    #                     each training algorithm provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. </p>
    #             </li>
    #             <li>
    #                 <p>
    #                   <code>InputDataConfig</code> - Describes the training dataset and the Amazon S3,
    #                     EFS, or FSx location where it is stored.</p>
    #             </li>
    #             <li>
    #                 <p>
    #                   <code>OutputDataConfig</code> - Identifies the Amazon S3 bucket where you want
    #                     SageMaker to save the results of model training. </p>
    #             </li>
    #             <li>
    #                 <p>
    #                   <code>ResourceConfig</code> - Identifies the resources, ML compute
    #                     instances, and ML storage volumes to deploy for model training. In distributed
    #                     training, you specify more than one instance. </p>
    #
    #             </li>
    #             <li>
    #                 <p>
    #                   <code>EnableManagedSpotTraining</code> - Optimize the cost of training machine
    #                     learning models by up to 80% by using Amazon EC2 Spot instances. For more
    #                     information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html">Managed Spot
    #                         Training</a>. </p>
    #             </li>
    #             <li>
    #                 <p>
    #                   <code>RoleArn</code> - The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on
    #                     your behalf during model training.
    #
    #                     You must grant this role the necessary permissions so that SageMaker can successfully
    #                     complete model training. </p>
    #             </li>
    #             <li>
    #                 <p>
    #                   <code>StoppingCondition</code> - To help cap training costs, use
    #                         <code>MaxRuntimeInSeconds</code> to set a time limit for training. Use
    #                         <code>MaxWaitTimeInSeconds</code> to specify how long a managed spot
    #                     training job has to complete. </p>
    #             </li>
    #             <li>
    #                 <p>
    #                   <code>Environment</code> - The environment variables to set in the Docker
    #                     container.</p>
    #             </li>
    #             <li>
    #                 <p>
    #                   <code>RetryStrategy</code> - The number of times to retry the job when the job
    #                     fails due to an <code>InternalServerError</code>.</p>
    #             </li>
    #          </ul>
    #         <p> For more information about SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
    #
    # @param [Hash] params
    #   See {Types::CreateTrainingJobInput}.
    #
    # @option params [String] :training_job_name
    #   <p>The name of the training job. The name must be unique within an Amazon Web Services Region in an
    #               Amazon Web Services account. </p>
    #
    # @option params [Hash<String, String>] :hyper_parameters
    #   <p>Algorithm-specific parameters that influence the quality of the model. You set
    #               hyperparameters before you start the learning process. For a list of hyperparameters for
    #               each training algorithm provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. </p>
    #           <p>You can specify a maximum of 100 hyperparameters. Each hyperparameter is a
    #               key-value pair. Each key and value is limited to 256 characters, as specified by the
    #                   <code>Length Constraint</code>. </p>
    #
    # @option params [AlgorithmSpecification] :algorithm_specification
    #   <p>The registry path of the Docker image that contains the training algorithm and
    #               algorithm-specific metadata, including the input mode. For more information about
    #               algorithms provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. For information about
    #               providing your own algorithms, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using Your Own Algorithms with Amazon
    #                   SageMaker</a>. </p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) of an IAM role that SageMaker can assume to perform
    #               tasks on your behalf. </p>
    #           <p>During model training, SageMaker needs your permission to read input data from an S3
    #               bucket, download a Docker image that contains training code, write model artifacts to an
    #               S3 bucket, write logs to Amazon CloudWatch Logs, and publish metrics to Amazon CloudWatch. You grant
    #               permissions for all of these tasks to an IAM role. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker
    #                   Roles</a>. </p>
    #           <note>
    #               <p>To be able to pass this role to SageMaker, the caller of this API must have the
    #                       <code>iam:PassRole</code> permission.</p>
    #           </note>
    #
    # @option params [Array<Channel>] :input_data_config
    #   <p>An array of <code>Channel</code> objects. Each channel is a named input source.
    #                   <code>InputDataConfig</code> describes the input data and its location. </p>
    #           <p>Algorithms can accept input data from one or more channels. For example, an
    #               algorithm might have two channels of input data, <code>training_data</code> and
    #                   <code>validation_data</code>. The configuration for each channel provides the S3,
    #               EFS, or FSx location where the input data is stored. It also provides information about
    #               the stored data: the MIME type, compression method, and whether the data is wrapped in
    #               RecordIO format. </p>
    #           <p>Depending on the input mode that the algorithm supports, SageMaker either copies input
    #               data files from an S3 bucket to a local directory in the Docker container, or makes it
    #               available as input streams. For example, if you specify an EFS location, input data
    #               files are available as input streams. They do not need to be
    #               downloaded.</p>
    #
    # @option params [OutputDataConfig] :output_data_config
    #   <p>Specifies the path to the S3 location where you want to store model artifacts. SageMaker
    #               creates subfolders for the artifacts. </p>
    #
    # @option params [ResourceConfig] :resource_config
    #   <p>The resources, including the ML compute instances and ML storage volumes, to use
    #               for model training. </p>
    #           <p>ML storage volumes store model artifacts and incremental states. Training
    #               algorithms might also use ML storage volumes for scratch space. If you want SageMaker to use
    #               the ML storage volume to store the training data, choose <code>File</code> as the
    #                   <code>TrainingInputMode</code> in the algorithm specification. For distributed
    #               training algorithms, specify an instance count greater than 1.</p>
    #
    # @option params [VpcConfig] :vpc_config
    #   <p>A <a>VpcConfig</a> object that specifies the VPC that you want your
    #               training job to connect to. Control access to and from your training container by
    #               configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon
    #                   Virtual Private Cloud</a>.</p>
    #
    # @option params [StoppingCondition] :stopping_condition
    #   <p>Specifies a limit to how long a model training job can run. It also specifies how long
    #               a managed Spot training job has to complete. When the job reaches the time limit, SageMaker
    #               ends the training job. Use this API to cap model training costs.</p>
    #           <p>To stop a job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays
    #               job termination for 120 seconds. Algorithms can use this 120-second window to save the
    #               model artifacts, so the results of training are not lost. </p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
    #               different ways, for example, by purpose, owner, or environment. For more information,
    #               see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services
    #                   Resources</a>.</p>
    #
    # @option params [Boolean] :enable_network_isolation
    #   <p>Isolates the training container. No inbound or outbound network calls can be made,
    #               except for calls between peers within a training cluster for distributed training. If
    #               you enable network isolation for training jobs that are configured to use a VPC, SageMaker
    #               downloads and uploads customer data and model artifacts through the specified VPC, but
    #               the training container does not have network access.</p>
    #
    # @option params [Boolean] :enable_inter_container_traffic_encryption
    #   <p>To encrypt all communications between ML compute instances in distributed training,
    #               choose <code>True</code>. Encryption provides greater security for distributed training,
    #               but training might take longer. How long it takes depends on the amount of communication
    #               between compute instances, especially if you use a deep learning algorithm in
    #               distributed training. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-encrypt.html">Protect Communications Between ML
    #                   Compute Instances in a Distributed Training Job</a>.</p>
    #
    # @option params [Boolean] :enable_managed_spot_training
    #   <p>To train models using managed spot training, choose <code>True</code>. Managed spot
    #               training provides a fully managed and scalable infrastructure for training machine
    #               learning models. this option is useful when training jobs can be interrupted and when
    #               there is flexibility when the training job is run. </p>
    #           <p>The complete and intermediate results of jobs are stored in an Amazon S3 bucket, and can be
    #               used as a starting point to train models incrementally. Amazon SageMaker provides metrics and
    #               logs in CloudWatch. They can be used to see when managed spot training jobs are running,
    #               interrupted, resumed, or completed. </p>
    #
    # @option params [CheckpointConfig] :checkpoint_config
    #   <p>Contains information about the output location for managed spot training checkpoint
    #               data.</p>
    #
    # @option params [DebugHookConfig] :debug_hook_config
    #   <p>Configuration information for the Debugger hook parameters, metric and tensor collections, and
    #               storage paths. To learn more about
    #               how to configure the <code>DebugHookConfig</code> parameter,
    #               see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.</p>
    #
    # @option params [Array<DebugRuleConfiguration>] :debug_rule_configurations
    #   <p>Configuration information for Debugger rules for debugging output tensors.</p>
    #
    # @option params [TensorBoardOutputConfig] :tensor_board_output_config
    #   <p>Configuration of storage locations for the Debugger TensorBoard output data.</p>
    #
    # @option params [ExperimentConfig] :experiment_config
    #   <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
    #         you call the following APIs:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <a>CreateProcessingJob</a>
    #                  </p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <a>CreateTrainingJob</a>
    #                  </p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <a>CreateTransformJob</a>
    #                  </p>
    #               </li>
    #            </ul>
    #
    # @option params [ProfilerConfig] :profiler_config
    #   <p>Configuration information for Debugger system monitoring, framework profiling, and
    #               storage paths.</p>
    #
    # @option params [Array<ProfilerRuleConfiguration>] :profiler_rule_configurations
    #   <p>Configuration information for Debugger rules for profiling system and framework
    #               metrics.</p>
    #
    # @option params [Hash<String, String>] :environment
    #   <p>The environment variables to set in the Docker container.</p>
    #
    # @option params [RetryStrategy] :retry_strategy
    #   <p>The number of times to retry the job when the job fails due to an
    #                   <code>InternalServerError</code>.</p>
    #
    # @return [Types::CreateTrainingJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_training_job(
    #     training_job_name: 'TrainingJobName', # required
    #     hyper_parameters: {
    #       'key' => 'value'
    #     },
    #     algorithm_specification: {
    #       training_image: 'TrainingImage',
    #       algorithm_name: 'AlgorithmName',
    #       training_input_mode: 'Pipe', # required - accepts ["Pipe", "File", "FastFile"]
    #       metric_definitions: [
    #         {
    #           name: 'Name', # required
    #           regex: 'Regex' # required
    #         }
    #       ],
    #       enable_sage_maker_metrics_time_series: false
    #     }, # required
    #     role_arn: 'RoleArn', # required
    #     input_data_config: [
    #       {
    #         channel_name: 'ChannelName', # required
    #         data_source: {
    #           s3_data_source: {
    #             s3_data_type: 'ManifestFile', # required - accepts ["ManifestFile", "S3Prefix", "AugmentedManifestFile"]
    #             s3_uri: 'S3Uri', # required
    #             s3_data_distribution_type: 'FullyReplicated', # accepts ["FullyReplicated", "ShardedByS3Key"]
    #             attribute_names: [
    #               'member'
    #             ]
    #           },
    #           file_system_data_source: {
    #             file_system_id: 'FileSystemId', # required
    #             file_system_access_mode: 'rw', # required - accepts ["rw", "ro"]
    #             file_system_type: 'EFS', # required - accepts ["EFS", "FSxLustre"]
    #             directory_path: 'DirectoryPath' # required
    #           }
    #         }, # required
    #         content_type: 'ContentType',
    #         compression_type: 'None', # accepts ["None", "Gzip"]
    #         record_wrapper_type: 'None', # accepts ["None", "RecordIO"]
    #         input_mode: 'Pipe', # accepts ["Pipe", "File", "FastFile"]
    #         shuffle_config: {
    #           seed: 1 # required
    #         }
    #       }
    #     ],
    #     output_data_config: {
    #       kms_key_id: 'KmsKeyId',
    #       s3_output_path: 'S3OutputPath' # required
    #     }, # required
    #     resource_config: {
    #       instance_type: 'ml.m4.xlarge', # required - accepts ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.p4d.24xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5n.xlarge", "ml.c5n.2xlarge", "ml.c5n.4xlarge", "ml.c5n.9xlarge", "ml.c5n.18xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #       instance_count: 1, # required
    #       volume_size_in_gb: 1, # required
    #       volume_kms_key_id: 'VolumeKmsKeyId'
    #     }, # required
    #     vpc_config: {
    #       security_group_ids: [
    #         'member'
    #       ], # required
    #       subnets: [
    #         'member'
    #       ] # required
    #     },
    #     stopping_condition: {
    #       max_runtime_in_seconds: 1,
    #       max_wait_time_in_seconds: 1
    #     }, # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     enable_network_isolation: false,
    #     enable_inter_container_traffic_encryption: false,
    #     enable_managed_spot_training: false,
    #     checkpoint_config: {
    #       s3_uri: 'S3Uri', # required
    #       local_path: 'LocalPath'
    #     },
    #     debug_hook_config: {
    #       local_path: 'LocalPath',
    #       s3_output_path: 'S3OutputPath', # required
    #       hook_parameters: {
    #         'key' => 'value'
    #       },
    #       collection_configurations: [
    #         {
    #           collection_name: 'CollectionName',
    #           collection_parameters: {
    #             'key' => 'value'
    #           }
    #         }
    #       ]
    #     },
    #     debug_rule_configurations: [
    #       {
    #         rule_configuration_name: 'RuleConfigurationName', # required
    #         local_path: 'LocalPath',
    #         s3_output_path: 'S3OutputPath',
    #         rule_evaluator_image: 'RuleEvaluatorImage', # required
    #         instance_type: 'ml.t3.medium', # accepts ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #         volume_size_in_gb: 1,
    #         rule_parameters: {
    #           'key' => 'value'
    #         }
    #       }
    #     ],
    #     tensor_board_output_config: {
    #       local_path: 'LocalPath',
    #       s3_output_path: 'S3OutputPath' # required
    #     },
    #     experiment_config: {
    #       experiment_name: 'ExperimentName',
    #       trial_name: 'TrialName',
    #       trial_component_display_name: 'TrialComponentDisplayName'
    #     },
    #     profiler_config: {
    #       s3_output_path: 'S3OutputPath', # required
    #       profiling_interval_in_milliseconds: 1,
    #       profiling_parameters: {
    #         'key' => 'value'
    #       }
    #     },
    #     profiler_rule_configurations: [
    #       {
    #         rule_configuration_name: 'RuleConfigurationName', # required
    #         local_path: 'LocalPath',
    #         s3_output_path: 'S3OutputPath',
    #         rule_evaluator_image: 'RuleEvaluatorImage', # required
    #         instance_type: 'ml.t3.medium', # accepts ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #         volume_size_in_gb: 1,
    #       }
    #     ],
    #     environment: {
    #       'key' => 'value'
    #     },
    #     retry_strategy: {
    #       maximum_retry_attempts: 1 # required
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTrainingJobOutput
    #   resp.data.training_job_arn #=> String
    #
    def create_training_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTrainingJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTrainingJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTrainingJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse, Errors::ResourceNotFound]),
        data_parser: Parsers::CreateTrainingJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateTrainingJob,
        stubs: @stubs,
        params_class: Params::CreateTrainingJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_training_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Starts a transform job. A transform job uses a trained model to get inferences on a
    #             dataset and saves these results to an Amazon S3 location that you specify.</p>
    #         <p>To perform batch transformations, you create a transform job and use the data that you
    #             have readily available.</p>
    #         <p>In the request body, you provide the following:</p>
    #         <ul>
    #             <li>
    #                 <p>
    #                   <code>TransformJobName</code> - Identifies the transform job. The name must be
    #                     unique within an Amazon Web Services Region in an Amazon Web Services account.</p>
    #             </li>
    #             <li>
    #                 <p>
    #                   <code>ModelName</code> - Identifies the model to use. <code>ModelName</code>
    #                     must be the name of an existing Amazon SageMaker model in the same Amazon Web Services Region and Amazon Web Services
    # 		    account. For information on creating a model, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html">CreateModel</a>.</p>
    #             </li>
    #             <li>
    #                 <p>
    #                   <code>TransformInput</code> - Describes the dataset to be transformed and the
    #                     Amazon S3 location where it is stored.</p>
    #             </li>
    #             <li>
    #                 <p>
    #                   <code>TransformOutput</code> - Identifies the Amazon S3 location where you want
    #                     Amazon SageMaker to save the results from the transform job.</p>
    #             </li>
    #             <li>
    #                 <p>
    #                   <code>TransformResources</code> - Identifies the ML compute instances for the
    #                     transform job.</p>
    #             </li>
    #          </ul>
    #         <p>For more information about how batch transformation works, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Batch
    #                 Transform</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTransformJobInput}.
    #
    # @option params [String] :transform_job_name
    #   <p>The name of the transform job. The name must be unique within an Amazon Web Services Region in an
    #               Amazon Web Services account. </p>
    #
    # @option params [String] :model_name
    #   <p>The name of the model that you want to use for the transform job.
    #               <code>ModelName</code> must be the name of an existing Amazon SageMaker model within an Amazon Web Services
    #               Region in an Amazon Web Services account.</p>
    #
    # @option params [Integer] :max_concurrent_transforms
    #   <p>The maximum number of parallel requests that can be sent to each instance in a
    #               transform job. If <code>MaxConcurrentTransforms</code> is set to <code>0</code> or left
    #               unset, Amazon SageMaker checks the optional execution-parameters to determine the settings for your
    #               chosen algorithm. If the execution-parameters endpoint is not enabled, the default value
    #               is <code>1</code>. For more information on execution-parameters, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-batch-code.html#your-algorithms-batch-code-how-containe-serves-requests">How Containers Serve Requests</a>. For built-in algorithms, you don't need to
    #               set a value for <code>MaxConcurrentTransforms</code>.</p>
    #
    # @option params [ModelClientConfig] :model_client_config
    #   <p>Configures the timeout and maximum number of retries for processing a transform job
    #               invocation.</p>
    #
    # @option params [Integer] :max_payload_in_mb
    #   <p>The maximum allowed size of the payload, in MB. A <i>payload</i> is the
    #               data portion of a record (without metadata). The value in <code>MaxPayloadInMB</code>
    #               must be greater than, or equal to, the size of a single record. To estimate the size of
    #               a record in MB, divide the size of your dataset by the number of records. To ensure that
    #               the records fit within the maximum payload size, we recommend using a slightly larger
    #               value. The default value is <code>6</code> MB.
    #               </p>
    #           <p>The value of <code>MaxPayloadInMB</code> cannot be greater than 100 MB. If you specify
    #               the <code>MaxConcurrentTransforms</code> parameter, the value of
    #                   <code>(MaxConcurrentTransforms * MaxPayloadInMB)</code> also cannot exceed 100
    #               MB.</p>
    #           <p>For cases where the payload might be arbitrarily large and is transmitted using HTTP
    #               chunked encoding, set the value to <code>0</code>.
    #               This
    #               feature works only in supported algorithms. Currently, Amazon SageMaker built-in
    #               algorithms do not support HTTP chunked encoding.</p>
    #
    # @option params [String] :batch_strategy
    #   <p>Specifies the number of records to include in a mini-batch for an HTTP inference
    #               request. A <i>record</i>
    #               <i></i> is a single unit of input data that
    #               inference can be made on. For example, a single line in a CSV file is a record. </p>
    #           <p>To enable the batch strategy, you must set the <code>SplitType</code> property to
    #                   <code>Line</code>, <code>RecordIO</code>, or <code>TFRecord</code>.</p>
    #           <p>To use only one record when making an HTTP invocation request to a container, set
    #                   <code>BatchStrategy</code> to <code>SingleRecord</code> and <code>SplitType</code>
    #               to <code>Line</code>.</p>
    #           <p>To fit as many records in a mini-batch as can fit within the
    #                   <code>MaxPayloadInMB</code> limit, set <code>BatchStrategy</code> to
    #                   <code>MultiRecord</code> and <code>SplitType</code> to <code>Line</code>.</p>
    #
    # @option params [Hash<String, String>] :environment
    #   <p>The environment variables to set in the Docker container. We support up to 16 key and
    #               values entries in the map.</p>
    #
    # @option params [TransformInput] :transform_input
    #   <p>Describes the input source and
    #               the
    #               way the transform job consumes it.</p>
    #
    # @option params [TransformOutput] :transform_output
    #   <p>Describes the results of the transform job.</p>
    #
    # @option params [TransformResources] :transform_resources
    #   <p>Describes the resources, including
    #               ML
    #               instance types and ML instance count, to use for the transform
    #               job.</p>
    #
    # @option params [DataProcessing] :data_processing
    #   <p>The data structure used to specify the data to be used for inference in a batch
    #               transform job and to associate the data that is relevant to the prediction results in
    #               the output. The input filter provided allows you to exclude input data that is not
    #               needed for inference in a batch transform job. The output filter provided allows you to
    #               include input data relevant to interpreting the predictions in the output from the job.
    #               For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction
    #                   Results with their Corresponding Input Records</a>.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>(Optional)
    #               An
    #               array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using
    #                   Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User
    #                   Guide</i>.</p>
    #
    # @option params [ExperimentConfig] :experiment_config
    #   <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
    #         you call the following APIs:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <a>CreateProcessingJob</a>
    #                  </p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <a>CreateTrainingJob</a>
    #                  </p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <a>CreateTransformJob</a>
    #                  </p>
    #               </li>
    #            </ul>
    #
    # @return [Types::CreateTransformJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_transform_job(
    #     transform_job_name: 'TransformJobName', # required
    #     model_name: 'ModelName', # required
    #     max_concurrent_transforms: 1,
    #     model_client_config: {
    #       invocations_timeout_in_seconds: 1,
    #       invocations_max_retries: 1
    #     },
    #     max_payload_in_mb: 1,
    #     batch_strategy: 'MultiRecord', # accepts ["MultiRecord", "SingleRecord"]
    #     environment: {
    #       'key' => 'value'
    #     },
    #     transform_input: {
    #       data_source: {
    #         s3_data_source: {
    #           s3_data_type: 'ManifestFile', # required - accepts ["ManifestFile", "S3Prefix", "AugmentedManifestFile"]
    #           s3_uri: 'S3Uri' # required
    #         } # required
    #       }, # required
    #       content_type: 'ContentType',
    #       compression_type: 'None', # accepts ["None", "Gzip"]
    #       split_type: 'None' # accepts ["None", "Line", "RecordIO", "TFRecord"]
    #     }, # required
    #     transform_output: {
    #       s3_output_path: 'S3OutputPath', # required
    #       accept: 'Accept',
    #       assemble_with: 'None', # accepts ["None", "Line"]
    #       kms_key_id: 'KmsKeyId'
    #     }, # required
    #     transform_resources: {
    #       instance_type: 'ml.m4.xlarge', # required - accepts ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #       instance_count: 1, # required
    #       volume_kms_key_id: 'VolumeKmsKeyId'
    #     }, # required
    #     data_processing: {
    #       input_filter: 'InputFilter',
    #       output_filter: 'OutputFilter',
    #       join_source: 'Input' # accepts ["Input", "None"]
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     experiment_config: {
    #       experiment_name: 'ExperimentName',
    #       trial_name: 'TrialName',
    #       trial_component_display_name: 'TrialComponentDisplayName'
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTransformJobOutput
    #   resp.data.transform_job_arn #=> String
    #
    def create_transform_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTransformJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTransformJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTransformJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse, Errors::ResourceNotFound]),
        data_parser: Parsers::CreateTransformJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateTransformJob,
        stubs: @stubs,
        params_class: Params::CreateTransformJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_transform_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an SageMaker <i>trial</i>. A trial is a set of steps called
    #         <i>trial components</i> that produce a machine learning model. A trial is part
    #       of a single SageMaker <i>experiment</i>.</p>
    #          <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial
    #       components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you
    #       must use the logging APIs provided by the SDK.</p>
    #          <p>You can add tags to a trial and then use the <a>Search</a> API to search for
    #       the tags.</p>
    #          <p>To get a list of all your trials, call the <a>ListTrials</a> API. To view a
    #       trial's properties, call the <a>DescribeTrial</a> API. To create a trial component,
    #       call the <a>CreateTrialComponent</a> API.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTrialInput}.
    #
    # @option params [String] :trial_name
    #   <p>The name of the trial. The name must be unique in your Amazon Web Services account and is not
    #         case-sensitive.</p>
    #
    # @option params [String] :display_name
    #   <p>The name of the trial as displayed. The name doesn't need to be unique. If
    #           <code>DisplayName</code> isn't specified, <code>TrialName</code> is displayed.</p>
    #
    # @option params [String] :experiment_name
    #   <p>The name of the experiment to associate the trial with.</p>
    #
    # @option params [MetadataProperties] :metadata_properties
    #   <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>A list of tags to associate with the trial. You can use <a>Search</a> API to
    #         search on the tags.</p>
    #
    # @return [Types::CreateTrialOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_trial(
    #     trial_name: 'TrialName', # required
    #     display_name: 'DisplayName',
    #     experiment_name: 'ExperimentName', # required
    #     metadata_properties: {
    #       commit_id: 'CommitId',
    #       repository: 'Repository',
    #       generated_by: 'GeneratedBy',
    #       project_id: 'ProjectId'
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTrialOutput
    #   resp.data.trial_arn #=> String
    #
    def create_trial(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTrialInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTrialInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTrial
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceNotFound]),
        data_parser: Parsers::CreateTrial
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateTrial,
        stubs: @stubs,
        params_class: Params::CreateTrialOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_trial
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a <i>trial component</i>, which is a stage of a machine learning
    #         <i>trial</i>. A trial is composed of one or more trial components. A trial
    #       component can be used in multiple trials.</p>
    #          <p>Trial components include pre-processing jobs, training jobs, and batch transform
    #       jobs.</p>
    #          <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial
    #       components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you
    #       must use the logging APIs provided by the SDK.</p>
    #          <p>You can add tags to a trial component and then use the <a>Search</a> API to
    #       search for the tags.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTrialComponentInput}.
    #
    # @option params [String] :trial_component_name
    #   <p>The name of the component. The name must be unique in your Amazon Web Services account and is not
    #         case-sensitive.</p>
    #
    # @option params [String] :display_name
    #   <p>The name of the component as displayed. The name doesn't need to be unique. If
    #           <code>DisplayName</code> isn't specified, <code>TrialComponentName</code> is
    #         displayed.</p>
    #
    # @option params [TrialComponentStatus] :status
    #   <p>The status of the component. States include:</p>
    #            <ul>
    #               <li>
    #                  <p>InProgress</p>
    #               </li>
    #               <li>
    #                  <p>Completed</p>
    #               </li>
    #               <li>
    #                  <p>Failed</p>
    #               </li>
    #            </ul>
    #
    # @option params [Time] :start_time
    #   <p>When the component started.</p>
    #
    # @option params [Time] :end_time
    #   <p>When the component ended.</p>
    #
    # @option params [Hash<String, TrialComponentParameterValue>] :parameters
    #   <p>The hyperparameters for the component.</p>
    #
    # @option params [Hash<String, TrialComponentArtifact>] :input_artifacts
    #   <p>The input artifacts for the component. Examples of input artifacts are datasets,
    #         algorithms, hyperparameters, source code, and instance types.</p>
    #
    # @option params [Hash<String, TrialComponentArtifact>] :output_artifacts
    #   <p>The output artifacts for the component. Examples of output artifacts are metrics,
    #         snapshots, logs, and images.</p>
    #
    # @option params [MetadataProperties] :metadata_properties
    #   <p>Metadata properties of the tracking entity, trial, or trial component.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>A list of tags to associate with the component. You can use <a>Search</a> API
    #         to search on the tags.</p>
    #
    # @return [Types::CreateTrialComponentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_trial_component(
    #     trial_component_name: 'TrialComponentName', # required
    #     display_name: 'DisplayName',
    #     status: {
    #       primary_status: 'InProgress', # accepts ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #       message: 'Message'
    #     },
    #     start_time: Time.now,
    #     end_time: Time.now,
    #     parameters: {
    #       'key' => {
    #         # One of:
    #         string_value: 'StringValue',
    #         number_value: 1.0
    #       }
    #     },
    #     input_artifacts: {
    #       'key' => {
    #         media_type: 'MediaType',
    #         value: 'Value' # required
    #       }
    #     },
    #     metadata_properties: {
    #       commit_id: 'CommitId',
    #       repository: 'Repository',
    #       generated_by: 'GeneratedBy',
    #       project_id: 'ProjectId'
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTrialComponentOutput
    #   resp.data.trial_component_arn #=> String
    #
    def create_trial_component(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTrialComponentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTrialComponentInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTrialComponent
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::CreateTrialComponent
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateTrialComponent,
        stubs: @stubs,
        params_class: Params::CreateTrialComponentOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_trial_component
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a user profile. A user profile represents a single user within a domain, and is
    #      the main way to reference a "person" for the purposes of sharing, reporting, and other
    #      user-oriented features. This entity is created when a user onboards to Amazon SageMaker Studio. If an
    #      administrator invites a person by email or imports them from SSO, a user profile is
    #      automatically created. A user profile is the primary holder of settings for an individual
    #      user and has a reference to the user's private Amazon Elastic File System (EFS) home directory.
    #    </p>
    #
    # @param [Hash] params
    #   See {Types::CreateUserProfileInput}.
    #
    # @option params [String] :domain_id
    #   <p>The ID of the associated Domain.</p>
    #
    # @option params [String] :user_profile_name
    #   <p>A name for the UserProfile. This value is not case sensitive.</p>
    #
    # @option params [String] :single_sign_on_user_identifier
    #   <p>A specifier for the type of value specified in SingleSignOnUserValue.  Currently, the only supported value is "UserName".
    #              If the Domain's AuthMode is SSO, this field is required.  If the Domain's AuthMode is not SSO, this field cannot be specified.
    #          </p>
    #
    # @option params [String] :single_sign_on_user_value
    #   <p>The username of the associated Amazon Web Services Single Sign-On User for this UserProfile.  If the Domain's AuthMode is SSO, this field is
    #              required, and must match a valid username of a user in your directory.  If the Domain's AuthMode is not SSO, this field cannot be specified.
    #          </p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>Each tag consists of a key and an optional value.
    #            Tag keys must be unique per resource.</p>
    #            <p>Tags that you specify for the User Profile are also added to all Apps that the
    #             User Profile launches.</p>
    #
    # @option params [UserSettings] :user_settings
    #   <p>A collection of settings.</p>
    #
    # @return [Types::CreateUserProfileOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_user_profile(
    #     domain_id: 'DomainId', # required
    #     user_profile_name: 'UserProfileName', # required
    #     single_sign_on_user_identifier: 'SingleSignOnUserIdentifier',
    #     single_sign_on_user_value: 'SingleSignOnUserValue',
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     user_settings: {
    #       execution_role: 'ExecutionRole',
    #       security_groups: [
    #         'member'
    #       ],
    #       sharing_settings: {
    #         notebook_output_option: 'Allowed', # accepts ["Allowed", "Disabled"]
    #         s3_output_path: 'S3OutputPath',
    #         s3_kms_key_id: 'S3KmsKeyId'
    #       },
    #       jupyter_server_app_settings: {
    #         default_resource_spec: {
    #           sage_maker_image_arn: 'SageMakerImageArn',
    #           sage_maker_image_version_arn: 'SageMakerImageVersionArn',
    #           instance_type: 'system', # accepts ["system", "ml.t3.micro", "ml.t3.small", "ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.8xlarge", "ml.m5.12xlarge", "ml.m5.16xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.8xlarge", "ml.m5d.12xlarge", "ml.m5d.16xlarge", "ml.m5d.24xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.12xlarge", "ml.c5.18xlarge", "ml.c5.24xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #           lifecycle_config_arn: 'LifecycleConfigArn'
    #         },
    #         lifecycle_config_arns: [
    #           'member'
    #         ]
    #       },
    #       kernel_gateway_app_settings: {
    #         custom_images: [
    #           {
    #             image_name: 'ImageName', # required
    #             image_version_number: 1,
    #             app_image_config_name: 'AppImageConfigName' # required
    #           }
    #         ],
    #       },
    #       tensor_board_app_settings: {
    #       },
    #       r_studio_server_pro_app_settings: {
    #         access_status: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #         user_group: 'R_STUDIO_ADMIN' # accepts ["R_STUDIO_ADMIN", "R_STUDIO_USER"]
    #       },
    #       r_session_app_settings: {
    #       }
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateUserProfileOutput
    #   resp.data.user_profile_arn #=> String
    #
    def create_user_profile(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateUserProfileInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateUserProfileInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateUserProfile
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateUserProfile
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateUserProfile,
        stubs: @stubs,
        params_class: Params::CreateUserProfileOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_user_profile
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Use this operation to create a workforce. This operation will return an error
    #           if a workforce already exists in the Amazon Web Services Region that you specify. You can only
    #           create one workforce in each Amazon Web Services Region per Amazon Web Services account.</p>
    #
    #         <p>If you want to create a new workforce in an Amazon Web Services Region where
    #       a workforce already exists, use the  API
    #       operation to delete the existing workforce and then use <code>CreateWorkforce</code>
    #       to create a new workforce.</p>
    #
    #          <p>To create a private workforce using Amazon Cognito, you must specify a Cognito user pool
    #     in <code>CognitoConfig</code>.
    #     You can also create an Amazon Cognito workforce using the Amazon SageMaker console.
    #     For more information, see
    #       <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">
    #       Create a Private Workforce (Amazon Cognito)</a>.</p>
    #
    #          <p>To create a private workforce using your own OIDC Identity Provider (IdP), specify your IdP
    #       configuration in <code>OidcConfig</code>. Your OIDC IdP must support <i>groups</i>
    #       because groups are used by Ground Truth and Amazon A2I to create work teams.
    #       For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-oidc.html">
    #       Create a Private Workforce (OIDC IdP)</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateWorkforceInput}.
    #
    # @option params [CognitoConfig] :cognito_config
    #   <p>Use this parameter to configure an Amazon Cognito private workforce.
    #         A single Cognito workforce is created using and corresponds to a single
    #         <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">
    #         Amazon Cognito user pool</a>.</p>
    #
    #            <p>Do not use <code>OidcConfig</code> if you specify values for
    #         <code>CognitoConfig</code>.</p>
    #
    # @option params [OidcConfig] :oidc_config
    #   <p>Use this parameter to configure a private workforce using your own OIDC Identity Provider.</p>
    #            <p>Do not use <code>CognitoConfig</code> if you specify values for
    #         <code>OidcConfig</code>.</p>
    #
    # @option params [SourceIpConfig] :source_ip_config
    #   <p>A list of IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Used to create an allow
    #               list of IP addresses for a private workforce. Workers will only be able to login to their worker portal from an
    #               IP address within this range. By default, a workforce isn't restricted to specific IP addresses.</p>
    #
    # @option params [String] :workforce_name
    #   <p>The name of the private workforce.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs that contain metadata to help you categorize and
    #         organize our workforce. Each tag consists of a key and a value,
    #         both of which you define.</p>
    #
    # @return [Types::CreateWorkforceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_workforce(
    #     cognito_config: {
    #       user_pool: 'UserPool', # required
    #       client_id: 'ClientId' # required
    #     },
    #     oidc_config: {
    #       client_id: 'ClientId', # required
    #       client_secret: 'ClientSecret', # required
    #       issuer: 'Issuer', # required
    #       authorization_endpoint: 'AuthorizationEndpoint', # required
    #       token_endpoint: 'TokenEndpoint', # required
    #       user_info_endpoint: 'UserInfoEndpoint', # required
    #       logout_endpoint: 'LogoutEndpoint', # required
    #       jwks_uri: 'JwksUri' # required
    #     },
    #     source_ip_config: {
    #       cidrs: [
    #         'member'
    #       ] # required
    #     },
    #     workforce_name: 'WorkforceName', # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateWorkforceOutput
    #   resp.data.workforce_arn #=> String
    #
    def create_workforce(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateWorkforceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateWorkforceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateWorkforce
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateWorkforce
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateWorkforce,
        stubs: @stubs,
        params_class: Params::CreateWorkforceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_workforce
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a new work team for labeling your data. A work team is defined by one or more
    #             Amazon Cognito user pools. You must first create the user pools before you can create a work
    #             team.</p>
    #         <p>You cannot create more than 25 work teams in an account and region.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateWorkteamInput}.
    #
    # @option params [String] :workteam_name
    #   <p>The name of the work team. Use this name to identify the work team.</p>
    #
    # @option params [String] :workforce_name
    #   <p>The name of the workforce.</p>
    #
    # @option params [Array<MemberDefinition>] :member_definitions
    #   <p>A list of <code>MemberDefinition</code> objects that contains objects that identify
    #               the workers that make up the work team. </p>
    #           <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For
    #               private workforces created using Amazon Cognito use <code>CognitoMemberDefinition</code>. For
    #               workforces created using your own OIDC identity provider (IdP) use
    #                   <code>OidcMemberDefinition</code>. Do not provide input for both of these parameters
    #               in a single request.</p>
    #           <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito
    #                   <i>user groups</i> within the user pool used to create a workforce. All of the
    #                   <code>CognitoMemberDefinition</code> objects that make up the member definition must
    #               have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon
    #               Cognito user group to an existing worker pool, see <a href="">Adding groups to a User
    #                   Pool</a>. For more information about user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito User
    #                   Pools</a>.</p>
    #           <p>For workforces created using your own OIDC IdP, specify the user groups that you want to
    #           include in your private work team in <code>OidcMemberDefinition</code> by listing those groups
    #           in <code>Groups</code>.</p>
    #
    # @option params [String] :description
    #   <p>A description of the work team.</p>
    #
    # @option params [NotificationConfiguration] :notification_configuration
    #   <p>Configures notification of workers regarding available or expiring work items.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs.</p>
    #           <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html">Resource
    #                   Tag</a> and <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what">Using
    #                       Cost Allocation Tags</a> in the <i> Amazon Web Services Billing and Cost Management User
    #                   Guide</i>.</p>
    #
    # @return [Types::CreateWorkteamOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_workteam(
    #     workteam_name: 'WorkteamName', # required
    #     workforce_name: 'WorkforceName',
    #     member_definitions: [
    #       {
    #         cognito_member_definition: {
    #           user_pool: 'UserPool', # required
    #           user_group: 'UserGroup', # required
    #           client_id: 'ClientId' # required
    #         },
    #         oidc_member_definition: {
    #           groups: [
    #             'member'
    #           ] # required
    #         }
    #       }
    #     ], # required
    #     description: 'Description', # required
    #     notification_configuration: {
    #       notification_topic_arn: 'NotificationTopicArn'
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateWorkteamOutput
    #   resp.data.workteam_arn #=> String
    #
    def create_workteam(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateWorkteamInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateWorkteamInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateWorkteam
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse]),
        data_parser: Parsers::CreateWorkteam
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateWorkteam,
        stubs: @stubs,
        params_class: Params::CreateWorkteamOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_workteam
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an action.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteActionInput}.
    #
    # @option params [String] :action_name
    #   <p>The name of the action to delete.</p>
    #
    # @return [Types::DeleteActionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_action(
    #     action_name: 'ActionName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteActionOutput
    #   resp.data.action_arn #=> String
    #
    def delete_action(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteActionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteActionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteAction
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteAction
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteAction,
        stubs: @stubs,
        params_class: Params::DeleteActionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_action
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Removes the specified algorithm from your account.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteAlgorithmInput}.
    #
    # @option params [String] :algorithm_name
    #   <p>The name of the algorithm to delete.</p>
    #
    # @return [Types::DeleteAlgorithmOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_algorithm(
    #     algorithm_name: 'AlgorithmName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteAlgorithmOutput
    #
    def delete_algorithm(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteAlgorithmInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteAlgorithmInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteAlgorithm
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteAlgorithm
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteAlgorithm,
        stubs: @stubs,
        params_class: Params::DeleteAlgorithmOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_algorithm
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Used to stop and delete an app.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteAppInput}.
    #
    # @option params [String] :domain_id
    #   <p>The domain ID.</p>
    #
    # @option params [String] :user_profile_name
    #   <p>The user profile name.</p>
    #
    # @option params [String] :app_type
    #   <p>The type of app.</p>
    #
    # @option params [String] :app_name
    #   <p>The name of the app.</p>
    #
    # @return [Types::DeleteAppOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_app(
    #     domain_id: 'DomainId', # required
    #     user_profile_name: 'UserProfileName', # required
    #     app_type: 'JupyterServer', # required - accepts ["JupyterServer", "KernelGateway", "TensorBoard", "RStudioServerPro", "RSessionGateway"]
    #     app_name: 'AppName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteAppOutput
    #
    def delete_app(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteAppInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteAppInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteApp
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceInUse, Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteApp
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteApp,
        stubs: @stubs,
        params_class: Params::DeleteAppOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_app
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an AppImageConfig.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteAppImageConfigInput}.
    #
    # @option params [String] :app_image_config_name
    #   <p>The name of the AppImageConfig to delete.</p>
    #
    # @return [Types::DeleteAppImageConfigOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_app_image_config(
    #     app_image_config_name: 'AppImageConfigName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteAppImageConfigOutput
    #
    def delete_app_image_config(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteAppImageConfigInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteAppImageConfigInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteAppImageConfig
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteAppImageConfig
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteAppImageConfig,
        stubs: @stubs,
        params_class: Params::DeleteAppImageConfigOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_app_image_config
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an artifact. Either <code>ArtifactArn</code> or <code>Source</code> must be
    #         specified.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteArtifactInput}.
    #
    # @option params [String] :artifact_arn
    #   <p>The Amazon Resource Name (ARN) of the artifact to delete.</p>
    #
    # @option params [ArtifactSource] :source
    #   <p>The URI of the source.</p>
    #
    # @return [Types::DeleteArtifactOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_artifact(
    #     artifact_arn: 'ArtifactArn',
    #     source: {
    #       source_uri: 'SourceUri', # required
    #       source_types: [
    #         {
    #           source_id_type: 'MD5Hash', # required - accepts ["MD5Hash", "S3ETag", "S3Version", "Custom"]
    #           value: 'Value' # required
    #         }
    #       ]
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteArtifactOutput
    #   resp.data.artifact_arn #=> String
    #
    def delete_artifact(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteArtifactInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteArtifactInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteArtifact
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteArtifact
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteArtifact,
        stubs: @stubs,
        params_class: Params::DeleteArtifactOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_artifact
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an association.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteAssociationInput}.
    #
    # @option params [String] :source_arn
    #   <p>The ARN of the source.</p>
    #
    # @option params [String] :destination_arn
    #   <p>The Amazon Resource Name (ARN) of the destination.</p>
    #
    # @return [Types::DeleteAssociationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_association(
    #     source_arn: 'SourceArn', # required
    #     destination_arn: 'DestinationArn' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteAssociationOutput
    #   resp.data.source_arn #=> String
    #   resp.data.destination_arn #=> String
    #
    def delete_association(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteAssociationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteAssociationInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteAssociation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteAssociation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteAssociation,
        stubs: @stubs,
        params_class: Params::DeleteAssociationOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_association
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified Git repository from your account.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteCodeRepositoryInput}.
    #
    # @option params [String] :code_repository_name
    #   <p>The name of the Git repository to delete.</p>
    #
    # @return [Types::DeleteCodeRepositoryOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_code_repository(
    #     code_repository_name: 'CodeRepositoryName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteCodeRepositoryOutput
    #
    def delete_code_repository(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteCodeRepositoryInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteCodeRepositoryInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteCodeRepository
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteCodeRepository
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteCodeRepository,
        stubs: @stubs,
        params_class: Params::DeleteCodeRepositoryOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_code_repository
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an context.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteContextInput}.
    #
    # @option params [String] :context_name
    #   <p>The name of the context to delete.</p>
    #
    # @return [Types::DeleteContextOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_context(
    #     context_name: 'ContextName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteContextOutput
    #   resp.data.context_arn #=> String
    #
    def delete_context(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteContextInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteContextInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteContext
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteContext
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteContext,
        stubs: @stubs,
        params_class: Params::DeleteContextOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_context
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a data quality monitoring job definition.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteDataQualityJobDefinitionInput}.
    #
    # @option params [String] :job_definition_name
    #   <p>The name of the data quality monitoring job definition to delete.</p>
    #
    # @return [Types::DeleteDataQualityJobDefinitionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_data_quality_job_definition(
    #     job_definition_name: 'JobDefinitionName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteDataQualityJobDefinitionOutput
    #
    def delete_data_quality_job_definition(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteDataQualityJobDefinitionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteDataQualityJobDefinitionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteDataQualityJobDefinition
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteDataQualityJobDefinition
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteDataQualityJobDefinition,
        stubs: @stubs,
        params_class: Params::DeleteDataQualityJobDefinitionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_data_quality_job_definition
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a fleet.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteDeviceFleetInput}.
    #
    # @option params [String] :device_fleet_name
    #   <p>The name of the fleet to delete.</p>
    #
    # @return [Types::DeleteDeviceFleetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_device_fleet(
    #     device_fleet_name: 'DeviceFleetName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteDeviceFleetOutput
    #
    def delete_device_fleet(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteDeviceFleetInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteDeviceFleetInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteDeviceFleet
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceInUse]),
        data_parser: Parsers::DeleteDeviceFleet
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteDeviceFleet,
        stubs: @stubs,
        params_class: Params::DeleteDeviceFleetOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_device_fleet
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Used to delete a domain.
    #      If you onboarded with IAM mode, you will need to delete your domain to onboard again using SSO.
    #      Use with caution. All of the members of the domain will lose access to their EFS volume,
    #      including data, notebooks, and other artifacts.
    #    </p>
    #
    # @param [Hash] params
    #   See {Types::DeleteDomainInput}.
    #
    # @option params [String] :domain_id
    #   <p>The domain ID.</p>
    #
    # @option params [RetentionPolicy] :retention_policy
    #   <p>The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted.
    #              By default, all resources are retained (not automatically deleted).
    #          </p>
    #
    # @return [Types::DeleteDomainOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_domain(
    #     domain_id: 'DomainId', # required
    #     retention_policy: {
    #       home_efs_file_system: 'Retain' # accepts ["Retain", "Delete"]
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteDomainOutput
    #
    def delete_domain(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteDomainInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteDomainInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteDomain
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceInUse, Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteDomain
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteDomain,
        stubs: @stubs,
        params_class: Params::DeleteDomainOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_domain
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an endpoint. SageMaker frees up all of the resources that were deployed when the
    #             endpoint was created. </p>
    #         <p>SageMaker retires any custom KMS key grants associated with the endpoint, meaning you don't
    #             need to use the <a href="http://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html">RevokeGrant</a> API call.</p>
    #         <p>When you delete your endpoint, SageMaker asynchronously deletes associated endpoint resources such as KMS key grants.
    #             You might still see these resources in your account for a few minutes after deleting your endpoint.
    #             Do not delete or revoke the permissions for your
    #             <code>
    #                <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html#sagemaker-CreateModel-request-ExecutionRoleArn">ExecutionRoleArn</a>
    #             </code>,
    #             otherwise SageMaker cannot delete these resources.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteEndpointInput}.
    #
    # @option params [String] :endpoint_name
    #   <p>The name of the endpoint that you want to delete.</p>
    #
    # @return [Types::DeleteEndpointOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_endpoint(
    #     endpoint_name: 'EndpointName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteEndpointOutput
    #
    def delete_endpoint(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteEndpointInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteEndpointInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteEndpoint
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteEndpoint
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteEndpoint,
        stubs: @stubs,
        params_class: Params::DeleteEndpointOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_endpoint
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an endpoint configuration. The <code>DeleteEndpointConfig</code> API
    #             deletes only the specified configuration. It does not delete endpoints created using the
    #             configuration. </p>
    #         <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is
    #             live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations
    #             are being performed on the endpoint. If you delete the <code>EndpointConfig</code> of an
    #             endpoint that is active or being created or updated you may lose visibility into the
    #             instance type the endpoint is using. The endpoint must be deleted in order to stop
    #             incurring charges.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteEndpointConfigInput}.
    #
    # @option params [String] :endpoint_config_name
    #   <p>The name of the endpoint configuration that you want to delete.</p>
    #
    # @return [Types::DeleteEndpointConfigOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_endpoint_config(
    #     endpoint_config_name: 'EndpointConfigName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteEndpointConfigOutput
    #
    def delete_endpoint_config(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteEndpointConfigInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteEndpointConfigInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteEndpointConfig
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteEndpointConfig
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteEndpointConfig,
        stubs: @stubs,
        params_class: Params::DeleteEndpointConfigOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_endpoint_config
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an SageMaker experiment. All trials associated with the experiment must be deleted
    #       first. Use the <a>ListTrials</a> API to get a list of the trials associated with
    #       the experiment.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteExperimentInput}.
    #
    # @option params [String] :experiment_name
    #   <p>The name of the experiment to delete.</p>
    #
    # @return [Types::DeleteExperimentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_experiment(
    #     experiment_name: 'ExperimentName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteExperimentOutput
    #   resp.data.experiment_arn #=> String
    #
    def delete_experiment(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteExperimentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteExperimentInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteExperiment
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteExperiment
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteExperiment,
        stubs: @stubs,
        params_class: Params::DeleteExperimentOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_experiment
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Delete the <code>FeatureGroup</code> and any data that was written to the
    #             <code>OnlineStore</code> of the <code>FeatureGroup</code>. Data cannot be accessed from
    #          the <code>OnlineStore</code> immediately after <code>DeleteFeatureGroup</code> is called. </p>
    #          <p>Data written into the <code>OfflineStore</code> will not be deleted. The Amazon Web Services Glue
    #          database and tables that are automatically created for your <code>OfflineStore</code> are
    #          not deleted. </p>
    #
    # @param [Hash] params
    #   See {Types::DeleteFeatureGroupInput}.
    #
    # @option params [String] :feature_group_name
    #   <p>The name of the <code>FeatureGroup</code> you want to delete. The name must be unique
    #            within an Amazon Web Services Region in an Amazon Web Services account. </p>
    #
    # @return [Types::DeleteFeatureGroupOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_feature_group(
    #     feature_group_name: 'FeatureGroupName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteFeatureGroupOutput
    #
    def delete_feature_group(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteFeatureGroupInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteFeatureGroupInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteFeatureGroup
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteFeatureGroup
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteFeatureGroup,
        stubs: @stubs,
        params_class: Params::DeleteFeatureGroupOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_feature_group
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified flow definition.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteFlowDefinitionInput}.
    #
    # @option params [String] :flow_definition_name
    #   <p>The name of the flow definition you are deleting.</p>
    #
    # @return [Types::DeleteFlowDefinitionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_flow_definition(
    #     flow_definition_name: 'FlowDefinitionName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteFlowDefinitionOutput
    #
    def delete_flow_definition(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteFlowDefinitionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteFlowDefinitionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteFlowDefinition
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceInUse, Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteFlowDefinition
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteFlowDefinition,
        stubs: @stubs,
        params_class: Params::DeleteFlowDefinitionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_flow_definition
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Use this operation to delete a human task user interface (worker task template).</p>
    #          <p>
    #       To see a list of human task user interfaces
    #       (work task templates) in your account, use .
    #       When you delete a worker task template, it no longer appears when you call <code>ListHumanTaskUis</code>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteHumanTaskUiInput}.
    #
    # @option params [String] :human_task_ui_name
    #   <p>The name of the human task user interface (work task template) you want to delete.</p>
    #
    # @return [Types::DeleteHumanTaskUiOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_human_task_ui(
    #     human_task_ui_name: 'HumanTaskUiName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteHumanTaskUiOutput
    #
    def delete_human_task_ui(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteHumanTaskUiInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteHumanTaskUiInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteHumanTaskUi
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteHumanTaskUi
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteHumanTaskUi,
        stubs: @stubs,
        params_class: Params::DeleteHumanTaskUiOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_human_task_ui
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a SageMaker image and all versions of the image. The container images aren't
    #         deleted.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteImageInput}.
    #
    # @option params [String] :image_name
    #   <p>The name of the image to delete.</p>
    #
    # @return [Types::DeleteImageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_image(
    #     image_name: 'ImageName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteImageOutput
    #
    def delete_image(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteImageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteImageInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteImage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceInUse, Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteImage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteImage,
        stubs: @stubs,
        params_class: Params::DeleteImageOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_image
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a version of a SageMaker image. The container image the version represents isn't
    #         deleted.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteImageVersionInput}.
    #
    # @option params [String] :image_name
    #   <p>The name of the image.</p>
    #
    # @option params [Integer] :version
    #   <p>The version to delete.</p>
    #
    # @return [Types::DeleteImageVersionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_image_version(
    #     image_name: 'ImageName', # required
    #     version: 1 # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteImageVersionOutput
    #
    def delete_image_version(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteImageVersionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteImageVersionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteImageVersion
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceInUse, Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteImageVersion
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteImageVersion,
        stubs: @stubs,
        params_class: Params::DeleteImageVersionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_image_version
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a model. The <code>DeleteModel</code> API deletes only the model entry that
    #             was created in SageMaker when you called the <code>CreateModel</code> API. It does not
    #             delete model artifacts, inference code, or the IAM role that you specified when
    #             creating the model. </p>
    #
    # @param [Hash] params
    #   See {Types::DeleteModelInput}.
    #
    # @option params [String] :model_name
    #   <p>The name of the model to delete.</p>
    #
    # @return [Types::DeleteModelOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_model(
    #     model_name: 'ModelName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteModelOutput
    #
    def delete_model(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteModelInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteModelInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteModel
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteModel
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteModel,
        stubs: @stubs,
        params_class: Params::DeleteModelOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_model
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an Amazon SageMaker model bias job definition.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteModelBiasJobDefinitionInput}.
    #
    # @option params [String] :job_definition_name
    #   <p>The name of the model bias job definition to delete.</p>
    #
    # @return [Types::DeleteModelBiasJobDefinitionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_model_bias_job_definition(
    #     job_definition_name: 'JobDefinitionName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteModelBiasJobDefinitionOutput
    #
    def delete_model_bias_job_definition(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteModelBiasJobDefinitionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteModelBiasJobDefinitionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteModelBiasJobDefinition
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteModelBiasJobDefinition
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteModelBiasJobDefinition,
        stubs: @stubs,
        params_class: Params::DeleteModelBiasJobDefinitionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_model_bias_job_definition
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an Amazon SageMaker model explainability job definition.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteModelExplainabilityJobDefinitionInput}.
    #
    # @option params [String] :job_definition_name
    #   <p>The name of the model explainability job definition to delete.</p>
    #
    # @return [Types::DeleteModelExplainabilityJobDefinitionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_model_explainability_job_definition(
    #     job_definition_name: 'JobDefinitionName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteModelExplainabilityJobDefinitionOutput
    #
    def delete_model_explainability_job_definition(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteModelExplainabilityJobDefinitionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteModelExplainabilityJobDefinitionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteModelExplainabilityJobDefinition
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteModelExplainabilityJobDefinition
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteModelExplainabilityJobDefinition,
        stubs: @stubs,
        params_class: Params::DeleteModelExplainabilityJobDefinitionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_model_explainability_job_definition
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a model package.</p>
    #         <p>A model package is used to create SageMaker models or list on Amazon Web Services Marketplace. Buyers can
    #             subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteModelPackageInput}.
    #
    # @option params [String] :model_package_name
    #   <p>The name or Amazon Resource Name (ARN) of the model package to delete.</p>
    #           <p>When you specify a name, the name must have 1 to 63 characters. Valid
    #               characters are a-z, A-Z, 0-9, and - (hyphen).</p>
    #
    # @return [Types::DeleteModelPackageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_model_package(
    #     model_package_name: 'ModelPackageName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteModelPackageOutput
    #
    def delete_model_package(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteModelPackageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteModelPackageInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteModelPackage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ConflictException]),
        data_parser: Parsers::DeleteModelPackage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteModelPackage,
        stubs: @stubs,
        params_class: Params::DeleteModelPackageOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_model_package
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified model group.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteModelPackageGroupInput}.
    #
    # @option params [String] :model_package_group_name
    #   <p>The name of the model group to delete.</p>
    #
    # @return [Types::DeleteModelPackageGroupOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_model_package_group(
    #     model_package_group_name: 'ModelPackageGroupName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteModelPackageGroupOutput
    #
    def delete_model_package_group(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteModelPackageGroupInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteModelPackageGroupInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteModelPackageGroup
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ConflictException]),
        data_parser: Parsers::DeleteModelPackageGroup
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteModelPackageGroup,
        stubs: @stubs,
        params_class: Params::DeleteModelPackageGroupOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_model_package_group
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a model group resource policy.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteModelPackageGroupPolicyInput}.
    #
    # @option params [String] :model_package_group_name
    #   <p>The name of the model group for which to delete the policy.</p>
    #
    # @return [Types::DeleteModelPackageGroupPolicyOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_model_package_group_policy(
    #     model_package_group_name: 'ModelPackageGroupName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteModelPackageGroupPolicyOutput
    #
    def delete_model_package_group_policy(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteModelPackageGroupPolicyInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteModelPackageGroupPolicyInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteModelPackageGroupPolicy
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteModelPackageGroupPolicy
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteModelPackageGroupPolicy,
        stubs: @stubs,
        params_class: Params::DeleteModelPackageGroupPolicyOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_model_package_group_policy
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the secified model quality monitoring job definition.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteModelQualityJobDefinitionInput}.
    #
    # @option params [String] :job_definition_name
    #   <p>The name of the model quality monitoring job definition to delete.</p>
    #
    # @return [Types::DeleteModelQualityJobDefinitionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_model_quality_job_definition(
    #     job_definition_name: 'JobDefinitionName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteModelQualityJobDefinitionOutput
    #
    def delete_model_quality_job_definition(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteModelQualityJobDefinitionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteModelQualityJobDefinitionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteModelQualityJobDefinition
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteModelQualityJobDefinition
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteModelQualityJobDefinition,
        stubs: @stubs,
        params_class: Params::DeleteModelQualityJobDefinitionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_model_quality_job_definition
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a monitoring schedule. Also stops the schedule had not already been stopped.
    #          This does not delete the job execution history of the monitoring schedule. </p>
    #
    # @param [Hash] params
    #   See {Types::DeleteMonitoringScheduleInput}.
    #
    # @option params [String] :monitoring_schedule_name
    #   <p>The name of the monitoring schedule to delete.</p>
    #
    # @return [Types::DeleteMonitoringScheduleOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_monitoring_schedule(
    #     monitoring_schedule_name: 'MonitoringScheduleName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteMonitoringScheduleOutput
    #
    def delete_monitoring_schedule(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteMonitoringScheduleInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteMonitoringScheduleInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteMonitoringSchedule
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteMonitoringSchedule
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteMonitoringSchedule,
        stubs: @stubs,
        params_class: Params::DeleteMonitoringScheduleOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_monitoring_schedule
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p> Deletes an SageMaker notebook instance. Before you can delete a notebook instance, you
    #             must call the <code>StopNotebookInstance</code> API. </p>
    #         <important>
    #             <p>When you delete a notebook instance, you lose all of your data. SageMaker removes
    #                 the ML compute instance, and deletes the ML storage volume and the network interface
    #                 associated with the notebook instance. </p>
    #         </important>
    #
    # @param [Hash] params
    #   See {Types::DeleteNotebookInstanceInput}.
    #
    # @option params [String] :notebook_instance_name
    #   <p>The name of the SageMaker notebook instance to delete.</p>
    #
    # @return [Types::DeleteNotebookInstanceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_notebook_instance(
    #     notebook_instance_name: 'NotebookInstanceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteNotebookInstanceOutput
    #
    def delete_notebook_instance(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteNotebookInstanceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteNotebookInstanceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteNotebookInstance
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteNotebookInstance
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteNotebookInstance,
        stubs: @stubs,
        params_class: Params::DeleteNotebookInstanceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_notebook_instance
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a notebook instance lifecycle configuration.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteNotebookInstanceLifecycleConfigInput}.
    #
    # @option params [String] :notebook_instance_lifecycle_config_name
    #   <p>The name of the lifecycle configuration to delete.</p>
    #
    # @return [Types::DeleteNotebookInstanceLifecycleConfigOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_notebook_instance_lifecycle_config(
    #     notebook_instance_lifecycle_config_name: 'NotebookInstanceLifecycleConfigName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteNotebookInstanceLifecycleConfigOutput
    #
    def delete_notebook_instance_lifecycle_config(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteNotebookInstanceLifecycleConfigInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteNotebookInstanceLifecycleConfigInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteNotebookInstanceLifecycleConfig
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteNotebookInstanceLifecycleConfig
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteNotebookInstanceLifecycleConfig,
        stubs: @stubs,
        params_class: Params::DeleteNotebookInstanceLifecycleConfigOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_notebook_instance_lifecycle_config
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a pipeline if there are no running instances of the pipeline. To delete a
    #         pipeline, you must stop all running instances of the pipeline using the
    #         <code>StopPipelineExecution</code> API. When you delete a pipeline, all instances of the
    #         pipeline are deleted.</p>
    #
    # @param [Hash] params
    #   See {Types::DeletePipelineInput}.
    #
    # @option params [String] :pipeline_name
    #   <p>The name of the pipeline to delete.</p>
    #
    # @option params [String] :client_request_token
    #   <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #            operation. An idempotent operation completes no more than one time.</p>
    #
    # @return [Types::DeletePipelineOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_pipeline(
    #     pipeline_name: 'PipelineName', # required
    #     client_request_token: 'ClientRequestToken' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeletePipelineOutput
    #   resp.data.pipeline_arn #=> String
    #
    def delete_pipeline(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeletePipelineInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeletePipelineInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeletePipeline
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeletePipeline
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeletePipeline,
        stubs: @stubs,
        params_class: Params::DeletePipelineOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_pipeline
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Delete the specified project.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteProjectInput}.
    #
    # @option params [String] :project_name
    #   <p>The name of the project to delete.</p>
    #
    # @return [Types::DeleteProjectOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_project(
    #     project_name: 'ProjectName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteProjectOutput
    #
    def delete_project(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteProjectInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteProjectInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteProject
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ConflictException]),
        data_parser: Parsers::DeleteProject
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteProject,
        stubs: @stubs,
        params_class: Params::DeleteProjectOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_project
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the Studio Lifecycle Configuration. In order to delete the Lifecycle Configuration, there must be no running apps using the Lifecycle Configuration. You must also remove the Lifecycle Configuration from UserSettings in all Domains and UserProfiles.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteStudioLifecycleConfigInput}.
    #
    # @option params [String] :studio_lifecycle_config_name
    #   <p>The name of the Studio Lifecycle Configuration to delete.</p>
    #
    # @return [Types::DeleteStudioLifecycleConfigOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_studio_lifecycle_config(
    #     studio_lifecycle_config_name: 'StudioLifecycleConfigName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteStudioLifecycleConfigOutput
    #
    def delete_studio_lifecycle_config(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteStudioLifecycleConfigInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteStudioLifecycleConfigInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteStudioLifecycleConfig
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceInUse, Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteStudioLifecycleConfig
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteStudioLifecycleConfig,
        stubs: @stubs,
        params_class: Params::DeleteStudioLifecycleConfigOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_studio_lifecycle_config
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified tags from an SageMaker resource.</p>
    #         <p>To list a resource's tags, use the <code>ListTags</code> API. </p>
    #         <note>
    #             <p>When you call this API to delete tags from a hyperparameter tuning job, the
    #                 deleted tags are not removed from training jobs that the hyperparameter tuning job
    #                 launched before you called this API.</p>
    #         </note>
    #         <note>
    #             <p>When you call this API to delete tags from a SageMaker Studio Domain or User
    #                 Profile, the deleted tags are not removed from Apps that the SageMaker Studio Domain
    #                 or User Profile launched before you called this API.</p>
    #         </note>
    #
    # @param [Hash] params
    #   See {Types::DeleteTagsInput}.
    #
    # @option params [String] :resource_arn
    #   <p>The Amazon Resource Name (ARN) of the resource whose tags you want to
    #               delete.</p>
    #
    # @option params [Array<String>] :tag_keys
    #   <p>An array or one or more tag keys to delete.</p>
    #
    # @return [Types::DeleteTagsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_tags(
    #     resource_arn: 'ResourceArn', # required
    #     tag_keys: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTagsOutput
    #
    def delete_tags(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTagsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTagsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTags
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteTags
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteTags,
        stubs: @stubs,
        params_class: Params::DeleteTagsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_tags
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified trial. All trial components that make up the trial must be deleted
    #       first. Use the <a>DescribeTrialComponent</a> API to get the list of trial
    #       components.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTrialInput}.
    #
    # @option params [String] :trial_name
    #   <p>The name of the trial to delete.</p>
    #
    # @return [Types::DeleteTrialOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_trial(
    #     trial_name: 'TrialName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTrialOutput
    #   resp.data.trial_arn #=> String
    #
    def delete_trial(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTrialInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTrialInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTrial
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteTrial
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteTrial,
        stubs: @stubs,
        params_class: Params::DeleteTrialOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_trial
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified trial component. A trial component must be disassociated from all
    #       trials before the trial component can be deleted. To disassociate a trial component from a
    #       trial, call the <a>DisassociateTrialComponent</a> API.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTrialComponentInput}.
    #
    # @option params [String] :trial_component_name
    #   <p>The name of the component to delete.</p>
    #
    # @return [Types::DeleteTrialComponentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_trial_component(
    #     trial_component_name: 'TrialComponentName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTrialComponentOutput
    #   resp.data.trial_component_arn #=> String
    #
    def delete_trial_component(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTrialComponentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTrialComponentInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTrialComponent
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteTrialComponent
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteTrialComponent,
        stubs: @stubs,
        params_class: Params::DeleteTrialComponentOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_trial_component
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a user profile. When a user profile is deleted, the user loses access to their EFS
    #      volume, including data, notebooks, and other artifacts.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteUserProfileInput}.
    #
    # @option params [String] :domain_id
    #   <p>The domain ID.</p>
    #
    # @option params [String] :user_profile_name
    #   <p>The user profile name.</p>
    #
    # @return [Types::DeleteUserProfileOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_user_profile(
    #     domain_id: 'DomainId', # required
    #     user_profile_name: 'UserProfileName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteUserProfileOutput
    #
    def delete_user_profile(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteUserProfileInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteUserProfileInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteUserProfile
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceInUse, Errors::ResourceNotFound]),
        data_parser: Parsers::DeleteUserProfile
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteUserProfile,
        stubs: @stubs,
        params_class: Params::DeleteUserProfileOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_user_profile
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Use this operation to delete a workforce.</p>
    #
    #          <p>If you want to create a new workforce in an Amazon Web Services Region where
    #       a workforce already exists, use this operation to delete the
    #       existing workforce and then use
    #       to create a new workforce.</p>
    #          <important>
    #             <p>If a private workforce contains one or more work teams, you must use
    #             the
    #             operation to delete all work teams before you delete the workforce.
    #             If you try to delete a workforce that contains one or more work teams,
    #             you will recieve a <code>ResourceInUse</code> error.</p>
    #         </important>
    #
    # @param [Hash] params
    #   See {Types::DeleteWorkforceInput}.
    #
    # @option params [String] :workforce_name
    #   <p>The name of the workforce.</p>
    #
    # @return [Types::DeleteWorkforceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_workforce(
    #     workforce_name: 'WorkforceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteWorkforceOutput
    #
    def delete_workforce(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteWorkforceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteWorkforceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteWorkforce
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteWorkforce
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteWorkforce,
        stubs: @stubs,
        params_class: Params::DeleteWorkforceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_workforce
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an existing work team. This operation can't be undone.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteWorkteamInput}.
    #
    # @option params [String] :workteam_name
    #   <p>The name of the work team to delete.</p>
    #
    # @return [Types::DeleteWorkteamOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_workteam(
    #     workteam_name: 'WorkteamName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteWorkteamOutput
    #   resp.data.success #=> Boolean
    #
    def delete_workteam(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteWorkteamInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteWorkteamInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteWorkteam
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::DeleteWorkteam
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteWorkteam,
        stubs: @stubs,
        params_class: Params::DeleteWorkteamOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_workteam
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deregisters the specified devices. After you deregister a device, you will need to re-register the devices.</p>
    #
    # @param [Hash] params
    #   See {Types::DeregisterDevicesInput}.
    #
    # @option params [String] :device_fleet_name
    #   <p>The name of the fleet the devices belong to.</p>
    #
    # @option params [Array<String>] :device_names
    #   <p>The unique IDs of the devices.</p>
    #
    # @return [Types::DeregisterDevicesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.deregister_devices(
    #     device_fleet_name: 'DeviceFleetName', # required
    #     device_names: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeregisterDevicesOutput
    #
    def deregister_devices(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeregisterDevicesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeregisterDevicesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeregisterDevices
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeregisterDevices
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeregisterDevices,
        stubs: @stubs,
        params_class: Params::DeregisterDevicesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :deregister_devices
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes an action.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeActionInput}.
    #
    # @option params [String] :action_name
    #   <p>The name of the action to describe.</p>
    #
    # @return [Types::DescribeActionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_action(
    #     action_name: 'ActionName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeActionOutput
    #   resp.data.action_name #=> String
    #   resp.data.action_arn #=> String
    #   resp.data.source #=> Types::ActionSource
    #   resp.data.source.source_uri #=> String
    #   resp.data.source.source_type #=> String
    #   resp.data.source.source_id #=> String
    #   resp.data.action_type #=> String
    #   resp.data.description #=> String
    #   resp.data.status #=> String, one of ["Unknown", "InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.properties #=> Hash<String, String>
    #   resp.data.properties['key'] #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.created_by #=> Types::UserContext
    #   resp.data.created_by.user_profile_arn #=> String
    #   resp.data.created_by.user_profile_name #=> String
    #   resp.data.created_by.domain_id #=> String
    #   resp.data.last_modified_time #=> Time
    #   resp.data.last_modified_by #=> Types::UserContext
    #   resp.data.metadata_properties #=> Types::MetadataProperties
    #   resp.data.metadata_properties.commit_id #=> String
    #   resp.data.metadata_properties.repository #=> String
    #   resp.data.metadata_properties.generated_by #=> String
    #   resp.data.metadata_properties.project_id #=> String
    #   resp.data.lineage_group_arn #=> String
    #
    def describe_action(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeActionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeActionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeAction
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeAction
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeAction,
        stubs: @stubs,
        params_class: Params::DescribeActionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_action
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a description of the specified algorithm that is in your account.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeAlgorithmInput}.
    #
    # @option params [String] :algorithm_name
    #   <p>The name of the algorithm to describe.</p>
    #
    # @return [Types::DescribeAlgorithmOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_algorithm(
    #     algorithm_name: 'AlgorithmName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeAlgorithmOutput
    #   resp.data.algorithm_name #=> String
    #   resp.data.algorithm_arn #=> String
    #   resp.data.algorithm_description #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.training_specification #=> Types::TrainingSpecification
    #   resp.data.training_specification.training_image #=> String
    #   resp.data.training_specification.training_image_digest #=> String
    #   resp.data.training_specification.supported_hyper_parameters #=> Array<HyperParameterSpecification>
    #   resp.data.training_specification.supported_hyper_parameters[0] #=> Types::HyperParameterSpecification
    #   resp.data.training_specification.supported_hyper_parameters[0].name #=> String
    #   resp.data.training_specification.supported_hyper_parameters[0].description #=> String
    #   resp.data.training_specification.supported_hyper_parameters[0].type #=> String, one of ["Integer", "Continuous", "Categorical", "FreeText"]
    #   resp.data.training_specification.supported_hyper_parameters[0].range #=> Types::ParameterRange
    #   resp.data.training_specification.supported_hyper_parameters[0].range.integer_parameter_range_specification #=> Types::IntegerParameterRangeSpecification
    #   resp.data.training_specification.supported_hyper_parameters[0].range.integer_parameter_range_specification.min_value #=> String
    #   resp.data.training_specification.supported_hyper_parameters[0].range.integer_parameter_range_specification.max_value #=> String
    #   resp.data.training_specification.supported_hyper_parameters[0].range.continuous_parameter_range_specification #=> Types::ContinuousParameterRangeSpecification
    #   resp.data.training_specification.supported_hyper_parameters[0].range.continuous_parameter_range_specification.min_value #=> String
    #   resp.data.training_specification.supported_hyper_parameters[0].range.continuous_parameter_range_specification.max_value #=> String
    #   resp.data.training_specification.supported_hyper_parameters[0].range.categorical_parameter_range_specification #=> Types::CategoricalParameterRangeSpecification
    #   resp.data.training_specification.supported_hyper_parameters[0].range.categorical_parameter_range_specification.values #=> Array<String>
    #   resp.data.training_specification.supported_hyper_parameters[0].range.categorical_parameter_range_specification.values[0] #=> String
    #   resp.data.training_specification.supported_hyper_parameters[0].is_tunable #=> Boolean
    #   resp.data.training_specification.supported_hyper_parameters[0].is_required #=> Boolean
    #   resp.data.training_specification.supported_hyper_parameters[0].default_value #=> String
    #   resp.data.training_specification.supported_training_instance_types #=> Array<String>
    #   resp.data.training_specification.supported_training_instance_types[0] #=> String, one of ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.p4d.24xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5n.xlarge", "ml.c5n.2xlarge", "ml.c5n.4xlarge", "ml.c5n.9xlarge", "ml.c5n.18xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #   resp.data.training_specification.supports_distributed_training #=> Boolean
    #   resp.data.training_specification.metric_definitions #=> Array<MetricDefinition>
    #   resp.data.training_specification.metric_definitions[0] #=> Types::MetricDefinition
    #   resp.data.training_specification.metric_definitions[0].name #=> String
    #   resp.data.training_specification.metric_definitions[0].regex #=> String
    #   resp.data.training_specification.training_channels #=> Array<ChannelSpecification>
    #   resp.data.training_specification.training_channels[0] #=> Types::ChannelSpecification
    #   resp.data.training_specification.training_channels[0].name #=> String
    #   resp.data.training_specification.training_channels[0].description #=> String
    #   resp.data.training_specification.training_channels[0].is_required #=> Boolean
    #   resp.data.training_specification.training_channels[0].supported_content_types #=> Array<String>
    #   resp.data.training_specification.training_channels[0].supported_content_types[0] #=> String
    #   resp.data.training_specification.training_channels[0].supported_compression_types #=> Array<String>
    #   resp.data.training_specification.training_channels[0].supported_compression_types[0] #=> String, one of ["None", "Gzip"]
    #   resp.data.training_specification.training_channels[0].supported_input_modes #=> Array<String>
    #   resp.data.training_specification.training_channels[0].supported_input_modes[0] #=> String, one of ["Pipe", "File", "FastFile"]
    #   resp.data.training_specification.supported_tuning_job_objective_metrics #=> Array<HyperParameterTuningJobObjective>
    #   resp.data.training_specification.supported_tuning_job_objective_metrics[0] #=> Types::HyperParameterTuningJobObjective
    #   resp.data.training_specification.supported_tuning_job_objective_metrics[0].type #=> String, one of ["Maximize", "Minimize"]
    #   resp.data.training_specification.supported_tuning_job_objective_metrics[0].metric_name #=> String
    #   resp.data.inference_specification #=> Types::InferenceSpecification
    #   resp.data.inference_specification.containers #=> Array<ModelPackageContainerDefinition>
    #   resp.data.inference_specification.containers[0] #=> Types::ModelPackageContainerDefinition
    #   resp.data.inference_specification.containers[0].container_hostname #=> String
    #   resp.data.inference_specification.containers[0].image #=> String
    #   resp.data.inference_specification.containers[0].image_digest #=> String
    #   resp.data.inference_specification.containers[0].model_data_url #=> String
    #   resp.data.inference_specification.containers[0].product_id #=> String
    #   resp.data.inference_specification.containers[0].environment #=> Hash<String, String>
    #   resp.data.inference_specification.containers[0].environment['key'] #=> String
    #   resp.data.inference_specification.containers[0].model_input #=> Types::ModelInput
    #   resp.data.inference_specification.containers[0].model_input.data_input_config #=> String
    #   resp.data.inference_specification.containers[0].framework #=> String
    #   resp.data.inference_specification.containers[0].framework_version #=> String
    #   resp.data.inference_specification.containers[0].nearest_model_name #=> String
    #   resp.data.inference_specification.supported_transform_instance_types #=> Array<String>
    #   resp.data.inference_specification.supported_transform_instance_types[0] #=> String, one of ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.inference_specification.supported_realtime_inference_instance_types #=> Array<String>
    #   resp.data.inference_specification.supported_realtime_inference_instance_types[0] #=> String, one of ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.12xlarge", "ml.m5d.24xlarge", "ml.c4.large", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.large", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.12xlarge", "ml.r5.24xlarge", "ml.r5d.large", "ml.r5d.xlarge", "ml.r5d.2xlarge", "ml.r5d.4xlarge", "ml.r5d.12xlarge", "ml.r5d.24xlarge", "ml.inf1.xlarge", "ml.inf1.2xlarge", "ml.inf1.6xlarge", "ml.inf1.24xlarge"]
    #   resp.data.inference_specification.supported_content_types #=> Array<String>
    #   resp.data.inference_specification.supported_response_mime_types #=> Array<String>
    #   resp.data.inference_specification.supported_response_mime_types[0] #=> String
    #   resp.data.validation_specification #=> Types::AlgorithmValidationSpecification
    #   resp.data.validation_specification.validation_role #=> String
    #   resp.data.validation_specification.validation_profiles #=> Array<AlgorithmValidationProfile>
    #   resp.data.validation_specification.validation_profiles[0] #=> Types::AlgorithmValidationProfile
    #   resp.data.validation_specification.validation_profiles[0].profile_name #=> String
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition #=> Types::TrainingJobDefinition
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.training_input_mode #=> String, one of ["Pipe", "File", "FastFile"]
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.hyper_parameters #=> Hash<String, String>
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.hyper_parameters['key'] #=> String
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config #=> Array<Channel>
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0] #=> Types::Channel
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].channel_name #=> String
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].data_source #=> Types::DataSource
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].data_source.s3_data_source #=> Types::S3DataSource
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].data_source.s3_data_source.s3_data_type #=> String, one of ["ManifestFile", "S3Prefix", "AugmentedManifestFile"]
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].data_source.s3_data_source.s3_uri #=> String
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].data_source.s3_data_source.s3_data_distribution_type #=> String, one of ["FullyReplicated", "ShardedByS3Key"]
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].data_source.s3_data_source.attribute_names #=> Array<String>
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].data_source.s3_data_source.attribute_names[0] #=> String
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].data_source.file_system_data_source #=> Types::FileSystemDataSource
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].data_source.file_system_data_source.file_system_id #=> String
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].data_source.file_system_data_source.file_system_access_mode #=> String, one of ["rw", "ro"]
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].data_source.file_system_data_source.file_system_type #=> String, one of ["EFS", "FSxLustre"]
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].data_source.file_system_data_source.directory_path #=> String
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].content_type #=> String
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].compression_type #=> String, one of ["None", "Gzip"]
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].record_wrapper_type #=> String, one of ["None", "RecordIO"]
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].input_mode #=> String, one of ["Pipe", "File", "FastFile"]
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].shuffle_config #=> Types::ShuffleConfig
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.input_data_config[0].shuffle_config.seed #=> Integer
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.output_data_config #=> Types::OutputDataConfig
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.output_data_config.kms_key_id #=> String
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.output_data_config.s3_output_path #=> String
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.resource_config #=> Types::ResourceConfig
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.resource_config.instance_type #=> String, one of ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.p4d.24xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5n.xlarge", "ml.c5n.2xlarge", "ml.c5n.4xlarge", "ml.c5n.9xlarge", "ml.c5n.18xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.resource_config.instance_count #=> Integer
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.resource_config.volume_size_in_gb #=> Integer
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.resource_config.volume_kms_key_id #=> String
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.stopping_condition #=> Types::StoppingCondition
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.stopping_condition.max_runtime_in_seconds #=> Integer
    #   resp.data.validation_specification.validation_profiles[0].training_job_definition.stopping_condition.max_wait_time_in_seconds #=> Integer
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition #=> Types::TransformJobDefinition
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.max_concurrent_transforms #=> Integer
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.max_payload_in_mb #=> Integer
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.batch_strategy #=> String, one of ["MultiRecord", "SingleRecord"]
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.environment #=> Hash<String, String>
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.environment['key'] #=> String
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input #=> Types::TransformInput
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input.data_source #=> Types::TransformDataSource
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input.data_source.s3_data_source #=> Types::TransformS3DataSource
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input.data_source.s3_data_source.s3_data_type #=> String, one of ["ManifestFile", "S3Prefix", "AugmentedManifestFile"]
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input.data_source.s3_data_source.s3_uri #=> String
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input.content_type #=> String
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input.compression_type #=> String, one of ["None", "Gzip"]
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input.split_type #=> String, one of ["None", "Line", "RecordIO", "TFRecord"]
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_output #=> Types::TransformOutput
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_output.s3_output_path #=> String
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_output.accept #=> String
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_output.assemble_with #=> String, one of ["None", "Line"]
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_output.kms_key_id #=> String
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_resources #=> Types::TransformResources
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_resources.instance_type #=> String, one of ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_resources.instance_count #=> Integer
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_resources.volume_kms_key_id #=> String
    #   resp.data.algorithm_status #=> String, one of ["Pending", "InProgress", "Completed", "Failed", "Deleting"]
    #   resp.data.algorithm_status_details #=> Types::AlgorithmStatusDetails
    #   resp.data.algorithm_status_details.validation_statuses #=> Array<AlgorithmStatusItem>
    #   resp.data.algorithm_status_details.validation_statuses[0] #=> Types::AlgorithmStatusItem
    #   resp.data.algorithm_status_details.validation_statuses[0].name #=> String
    #   resp.data.algorithm_status_details.validation_statuses[0].status #=> String, one of ["NotStarted", "InProgress", "Completed", "Failed"]
    #   resp.data.algorithm_status_details.validation_statuses[0].failure_reason #=> String
    #   resp.data.algorithm_status_details.image_scan_statuses #=> Array<AlgorithmStatusItem>
    #   resp.data.product_id #=> String
    #   resp.data.certify_for_marketplace #=> Boolean
    #
    def describe_algorithm(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeAlgorithmInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeAlgorithmInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeAlgorithm
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeAlgorithm
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeAlgorithm,
        stubs: @stubs,
        params_class: Params::DescribeAlgorithmOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_algorithm
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the app.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeAppInput}.
    #
    # @option params [String] :domain_id
    #   <p>The domain ID.</p>
    #
    # @option params [String] :user_profile_name
    #   <p>The user profile name.</p>
    #
    # @option params [String] :app_type
    #   <p>The type of app.</p>
    #
    # @option params [String] :app_name
    #   <p>The name of the app.</p>
    #
    # @return [Types::DescribeAppOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_app(
    #     domain_id: 'DomainId', # required
    #     user_profile_name: 'UserProfileName', # required
    #     app_type: 'JupyterServer', # required - accepts ["JupyterServer", "KernelGateway", "TensorBoard", "RStudioServerPro", "RSessionGateway"]
    #     app_name: 'AppName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeAppOutput
    #   resp.data.app_arn #=> String
    #   resp.data.app_type #=> String, one of ["JupyterServer", "KernelGateway", "TensorBoard", "RStudioServerPro", "RSessionGateway"]
    #   resp.data.app_name #=> String
    #   resp.data.domain_id #=> String
    #   resp.data.user_profile_name #=> String
    #   resp.data.status #=> String, one of ["Deleted", "Deleting", "Failed", "InService", "Pending"]
    #   resp.data.last_health_check_timestamp #=> Time
    #   resp.data.last_user_activity_timestamp #=> Time
    #   resp.data.creation_time #=> Time
    #   resp.data.failure_reason #=> String
    #   resp.data.resource_spec #=> Types::ResourceSpec
    #   resp.data.resource_spec.sage_maker_image_arn #=> String
    #   resp.data.resource_spec.sage_maker_image_version_arn #=> String
    #   resp.data.resource_spec.instance_type #=> String, one of ["system", "ml.t3.micro", "ml.t3.small", "ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.8xlarge", "ml.m5.12xlarge", "ml.m5.16xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.8xlarge", "ml.m5d.12xlarge", "ml.m5d.16xlarge", "ml.m5d.24xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.12xlarge", "ml.c5.18xlarge", "ml.c5.24xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #   resp.data.resource_spec.lifecycle_config_arn #=> String
    #
    def describe_app(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeAppInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeAppInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeApp
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeApp
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeApp,
        stubs: @stubs,
        params_class: Params::DescribeAppOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_app
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes an AppImageConfig.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeAppImageConfigInput}.
    #
    # @option params [String] :app_image_config_name
    #   <p>The name of the AppImageConfig to describe.</p>
    #
    # @return [Types::DescribeAppImageConfigOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_app_image_config(
    #     app_image_config_name: 'AppImageConfigName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeAppImageConfigOutput
    #   resp.data.app_image_config_arn #=> String
    #   resp.data.app_image_config_name #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.kernel_gateway_image_config #=> Types::KernelGatewayImageConfig
    #   resp.data.kernel_gateway_image_config.kernel_specs #=> Array<KernelSpec>
    #   resp.data.kernel_gateway_image_config.kernel_specs[0] #=> Types::KernelSpec
    #   resp.data.kernel_gateway_image_config.kernel_specs[0].name #=> String
    #   resp.data.kernel_gateway_image_config.kernel_specs[0].display_name #=> String
    #   resp.data.kernel_gateway_image_config.file_system_config #=> Types::FileSystemConfig
    #   resp.data.kernel_gateway_image_config.file_system_config.mount_path #=> String
    #   resp.data.kernel_gateway_image_config.file_system_config.default_uid #=> Integer
    #   resp.data.kernel_gateway_image_config.file_system_config.default_gid #=> Integer
    #
    def describe_app_image_config(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeAppImageConfigInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeAppImageConfigInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeAppImageConfig
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeAppImageConfig
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeAppImageConfig,
        stubs: @stubs,
        params_class: Params::DescribeAppImageConfigOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_app_image_config
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes an artifact.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeArtifactInput}.
    #
    # @option params [String] :artifact_arn
    #   <p>The Amazon Resource Name (ARN) of the artifact to describe.</p>
    #
    # @return [Types::DescribeArtifactOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_artifact(
    #     artifact_arn: 'ArtifactArn' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeArtifactOutput
    #   resp.data.artifact_name #=> String
    #   resp.data.artifact_arn #=> String
    #   resp.data.source #=> Types::ArtifactSource
    #   resp.data.source.source_uri #=> String
    #   resp.data.source.source_types #=> Array<ArtifactSourceType>
    #   resp.data.source.source_types[0] #=> Types::ArtifactSourceType
    #   resp.data.source.source_types[0].source_id_type #=> String, one of ["MD5Hash", "S3ETag", "S3Version", "Custom"]
    #   resp.data.source.source_types[0].value #=> String
    #   resp.data.artifact_type #=> String
    #   resp.data.properties #=> Hash<String, String>
    #   resp.data.properties['key'] #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.created_by #=> Types::UserContext
    #   resp.data.created_by.user_profile_arn #=> String
    #   resp.data.created_by.user_profile_name #=> String
    #   resp.data.created_by.domain_id #=> String
    #   resp.data.last_modified_time #=> Time
    #   resp.data.last_modified_by #=> Types::UserContext
    #   resp.data.metadata_properties #=> Types::MetadataProperties
    #   resp.data.metadata_properties.commit_id #=> String
    #   resp.data.metadata_properties.repository #=> String
    #   resp.data.metadata_properties.generated_by #=> String
    #   resp.data.metadata_properties.project_id #=> String
    #   resp.data.lineage_group_arn #=> String
    #
    def describe_artifact(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeArtifactInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeArtifactInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeArtifact
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeArtifact
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeArtifact,
        stubs: @stubs,
        params_class: Params::DescribeArtifactOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_artifact
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about an Amazon SageMaker AutoML job.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeAutoMLJobInput}.
    #
    # @option params [String] :auto_ml_job_name
    #   <p>Requests information about an AutoML job using its unique name.</p>
    #
    # @return [Types::DescribeAutoMLJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_auto_ml_job(
    #     auto_ml_job_name: 'AutoMLJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeAutoMLJobOutput
    #   resp.data.auto_ml_job_name #=> String
    #   resp.data.auto_ml_job_arn #=> String
    #   resp.data.input_data_config #=> Array<AutoMLChannel>
    #   resp.data.input_data_config[0] #=> Types::AutoMLChannel
    #   resp.data.input_data_config[0].data_source #=> Types::AutoMLDataSource
    #   resp.data.input_data_config[0].data_source.s3_data_source #=> Types::AutoMLS3DataSource
    #   resp.data.input_data_config[0].data_source.s3_data_source.s3_data_type #=> String, one of ["ManifestFile", "S3Prefix"]
    #   resp.data.input_data_config[0].data_source.s3_data_source.s3_uri #=> String
    #   resp.data.input_data_config[0].compression_type #=> String, one of ["None", "Gzip"]
    #   resp.data.input_data_config[0].target_attribute_name #=> String
    #   resp.data.input_data_config[0].content_type #=> String
    #   resp.data.input_data_config[0].channel_type #=> String, one of ["training", "validation"]
    #   resp.data.output_data_config #=> Types::AutoMLOutputDataConfig
    #   resp.data.output_data_config.kms_key_id #=> String
    #   resp.data.output_data_config.s3_output_path #=> String
    #   resp.data.role_arn #=> String
    #   resp.data.auto_ml_job_objective #=> Types::AutoMLJobObjective
    #   resp.data.auto_ml_job_objective.metric_name #=> String, one of ["Accuracy", "MSE", "F1", "F1macro", "AUC"]
    #   resp.data.problem_type #=> String, one of ["BinaryClassification", "MulticlassClassification", "Regression"]
    #   resp.data.auto_ml_job_config #=> Types::AutoMLJobConfig
    #   resp.data.auto_ml_job_config.completion_criteria #=> Types::AutoMLJobCompletionCriteria
    #   resp.data.auto_ml_job_config.completion_criteria.max_candidates #=> Integer
    #   resp.data.auto_ml_job_config.completion_criteria.max_runtime_per_training_job_in_seconds #=> Integer
    #   resp.data.auto_ml_job_config.completion_criteria.max_auto_ml_job_runtime_in_seconds #=> Integer
    #   resp.data.auto_ml_job_config.security_config #=> Types::AutoMLSecurityConfig
    #   resp.data.auto_ml_job_config.security_config.volume_kms_key_id #=> String
    #   resp.data.auto_ml_job_config.security_config.enable_inter_container_traffic_encryption #=> Boolean
    #   resp.data.auto_ml_job_config.security_config.vpc_config #=> Types::VpcConfig
    #   resp.data.auto_ml_job_config.security_config.vpc_config.security_group_ids #=> Array<String>
    #   resp.data.auto_ml_job_config.security_config.vpc_config.security_group_ids[0] #=> String
    #   resp.data.auto_ml_job_config.security_config.vpc_config.subnets #=> Array<String>
    #   resp.data.auto_ml_job_config.security_config.vpc_config.subnets[0] #=> String
    #   resp.data.auto_ml_job_config.data_split_config #=> Types::AutoMLDataSplitConfig
    #   resp.data.auto_ml_job_config.data_split_config.validation_fraction #=> Float
    #   resp.data.auto_ml_job_config.candidate_generation_config #=> Types::AutoMLCandidateGenerationConfig
    #   resp.data.auto_ml_job_config.candidate_generation_config.feature_specification_s3_uri #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.end_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.failure_reason #=> String
    #   resp.data.partial_failure_reasons #=> Array<AutoMLPartialFailureReason>
    #   resp.data.partial_failure_reasons[0] #=> Types::AutoMLPartialFailureReason
    #   resp.data.partial_failure_reasons[0].partial_failure_message #=> String
    #   resp.data.best_candidate #=> Types::AutoMLCandidate
    #   resp.data.best_candidate.candidate_name #=> String
    #   resp.data.best_candidate.final_auto_ml_job_objective_metric #=> Types::FinalAutoMLJobObjectiveMetric
    #   resp.data.best_candidate.final_auto_ml_job_objective_metric.type #=> String, one of ["Maximize", "Minimize"]
    #   resp.data.best_candidate.final_auto_ml_job_objective_metric.metric_name #=> String, one of ["Accuracy", "MSE", "F1", "F1macro", "AUC"]
    #   resp.data.best_candidate.final_auto_ml_job_objective_metric.value #=> Float
    #   resp.data.best_candidate.objective_status #=> String, one of ["Succeeded", "Pending", "Failed"]
    #   resp.data.best_candidate.candidate_steps #=> Array<AutoMLCandidateStep>
    #   resp.data.best_candidate.candidate_steps[0] #=> Types::AutoMLCandidateStep
    #   resp.data.best_candidate.candidate_steps[0].candidate_step_type #=> String, one of ["AWS::SageMaker::TrainingJob", "AWS::SageMaker::TransformJob", "AWS::SageMaker::ProcessingJob"]
    #   resp.data.best_candidate.candidate_steps[0].candidate_step_arn #=> String
    #   resp.data.best_candidate.candidate_steps[0].candidate_step_name #=> String
    #   resp.data.best_candidate.candidate_status #=> String, one of ["Completed", "InProgress", "Failed", "Stopped", "Stopping"]
    #   resp.data.best_candidate.inference_containers #=> Array<AutoMLContainerDefinition>
    #   resp.data.best_candidate.inference_containers[0] #=> Types::AutoMLContainerDefinition
    #   resp.data.best_candidate.inference_containers[0].image #=> String
    #   resp.data.best_candidate.inference_containers[0].model_data_url #=> String
    #   resp.data.best_candidate.inference_containers[0].environment #=> Hash<String, String>
    #   resp.data.best_candidate.inference_containers[0].environment['key'] #=> String
    #   resp.data.best_candidate.creation_time #=> Time
    #   resp.data.best_candidate.end_time #=> Time
    #   resp.data.best_candidate.last_modified_time #=> Time
    #   resp.data.best_candidate.failure_reason #=> String
    #   resp.data.best_candidate.candidate_properties #=> Types::CandidateProperties
    #   resp.data.best_candidate.candidate_properties.candidate_artifact_locations #=> Types::CandidateArtifactLocations
    #   resp.data.best_candidate.candidate_properties.candidate_artifact_locations.explainability #=> String
    #   resp.data.best_candidate.candidate_properties.candidate_artifact_locations.model_insights #=> String
    #   resp.data.best_candidate.candidate_properties.candidate_metrics #=> Array<MetricDatum>
    #   resp.data.best_candidate.candidate_properties.candidate_metrics[0] #=> Types::MetricDatum
    #   resp.data.best_candidate.candidate_properties.candidate_metrics[0].metric_name #=> String, one of ["Accuracy", "MSE", "F1", "F1macro", "AUC"]
    #   resp.data.best_candidate.candidate_properties.candidate_metrics[0].value #=> Float
    #   resp.data.best_candidate.candidate_properties.candidate_metrics[0].set #=> String, one of ["Train", "Validation", "Test"]
    #   resp.data.best_candidate.candidate_properties.candidate_metrics[0].standard_metric_name #=> String, one of ["Accuracy", "MSE", "F1", "F1macro", "AUC", "RMSE", "MAE", "R2", "BalancedAccuracy", "Precision", "PrecisionMacro", "Recall", "RecallMacro", "LogLoss"]
    #   resp.data.auto_ml_job_status #=> String, one of ["Completed", "InProgress", "Failed", "Stopped", "Stopping"]
    #   resp.data.auto_ml_job_secondary_status #=> String, one of ["Starting", "AnalyzingData", "FeatureEngineering", "ModelTuning", "MaxCandidatesReached", "Failed", "Stopped", "MaxAutoMLJobRuntimeReached", "Stopping", "CandidateDefinitionsGenerated", "GeneratingExplainabilityReport", "Completed", "ExplainabilityError", "DeployingModel", "ModelDeploymentError", "GeneratingModelInsightsReport", "ModelInsightsError"]
    #   resp.data.generate_candidate_definitions_only #=> Boolean
    #   resp.data.auto_ml_job_artifacts #=> Types::AutoMLJobArtifacts
    #   resp.data.auto_ml_job_artifacts.candidate_definition_notebook_location #=> String
    #   resp.data.auto_ml_job_artifacts.data_exploration_notebook_location #=> String
    #   resp.data.resolved_attributes #=> Types::ResolvedAttributes
    #   resp.data.resolved_attributes.auto_ml_job_objective #=> Types::AutoMLJobObjective
    #   resp.data.resolved_attributes.problem_type #=> String, one of ["BinaryClassification", "MulticlassClassification", "Regression"]
    #   resp.data.resolved_attributes.completion_criteria #=> Types::AutoMLJobCompletionCriteria
    #   resp.data.model_deploy_config #=> Types::ModelDeployConfig
    #   resp.data.model_deploy_config.auto_generate_endpoint_name #=> Boolean
    #   resp.data.model_deploy_config.endpoint_name #=> String
    #   resp.data.model_deploy_result #=> Types::ModelDeployResult
    #   resp.data.model_deploy_result.endpoint_name #=> String
    #
    def describe_auto_ml_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeAutoMLJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeAutoMLJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeAutoMLJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeAutoMLJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeAutoMLJob,
        stubs: @stubs,
        params_class: Params::DescribeAutoMLJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_auto_ml_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets details about the specified Git repository.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeCodeRepositoryInput}.
    #
    # @option params [String] :code_repository_name
    #   <p>The name of the Git repository to describe.</p>
    #
    # @return [Types::DescribeCodeRepositoryOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_code_repository(
    #     code_repository_name: 'CodeRepositoryName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeCodeRepositoryOutput
    #   resp.data.code_repository_name #=> String
    #   resp.data.code_repository_arn #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.git_config #=> Types::GitConfig
    #   resp.data.git_config.repository_url #=> String
    #   resp.data.git_config.branch #=> String
    #   resp.data.git_config.secret_arn #=> String
    #
    def describe_code_repository(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeCodeRepositoryInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeCodeRepositoryInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeCodeRepository
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeCodeRepository
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeCodeRepository,
        stubs: @stubs,
        params_class: Params::DescribeCodeRepositoryOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_code_repository
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about a model compilation job.</p>
    #         <p>To create a model compilation job, use <a>CreateCompilationJob</a>. To get
    #             information about multiple model compilation jobs, use <a>ListCompilationJobs</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeCompilationJobInput}.
    #
    # @option params [String] :compilation_job_name
    #   <p>The name of the model compilation job that you want information about.</p>
    #
    # @return [Types::DescribeCompilationJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_compilation_job(
    #     compilation_job_name: 'CompilationJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeCompilationJobOutput
    #   resp.data.compilation_job_name #=> String
    #   resp.data.compilation_job_arn #=> String
    #   resp.data.compilation_job_status #=> String, one of ["INPROGRESS", "COMPLETED", "FAILED", "STARTING", "STOPPING", "STOPPED"]
    #   resp.data.compilation_start_time #=> Time
    #   resp.data.compilation_end_time #=> Time
    #   resp.data.stopping_condition #=> Types::StoppingCondition
    #   resp.data.stopping_condition.max_runtime_in_seconds #=> Integer
    #   resp.data.stopping_condition.max_wait_time_in_seconds #=> Integer
    #   resp.data.inference_image #=> String
    #   resp.data.model_package_version_arn #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.failure_reason #=> String
    #   resp.data.model_artifacts #=> Types::ModelArtifacts
    #   resp.data.model_artifacts.s3_model_artifacts #=> String
    #   resp.data.model_digests #=> Types::ModelDigests
    #   resp.data.model_digests.artifact_digest #=> String
    #   resp.data.role_arn #=> String
    #   resp.data.input_config #=> Types::InputConfig
    #   resp.data.input_config.s3_uri #=> String
    #   resp.data.input_config.data_input_config #=> String
    #   resp.data.input_config.framework #=> String, one of ["TENSORFLOW", "KERAS", "MXNET", "ONNX", "PYTORCH", "XGBOOST", "TFLITE", "DARKNET", "SKLEARN"]
    #   resp.data.input_config.framework_version #=> String
    #   resp.data.output_config #=> Types::OutputConfig
    #   resp.data.output_config.s3_output_location #=> String
    #   resp.data.output_config.target_device #=> String, one of ["lambda", "ml_m4", "ml_m5", "ml_c4", "ml_c5", "ml_p2", "ml_p3", "ml_g4dn", "ml_inf1", "ml_eia2", "jetson_tx1", "jetson_tx2", "jetson_nano", "jetson_xavier", "rasp3b", "imx8qm", "deeplens", "rk3399", "rk3288", "aisage", "sbe_c", "qcs605", "qcs603", "sitara_am57x", "amba_cv2", "amba_cv22", "amba_cv25", "x86_win32", "x86_win64", "coreml", "jacinto_tda4vm", "imx8mplus"]
    #   resp.data.output_config.target_platform #=> Types::TargetPlatform
    #   resp.data.output_config.target_platform.os #=> String, one of ["ANDROID", "LINUX"]
    #   resp.data.output_config.target_platform.arch #=> String, one of ["X86_64", "X86", "ARM64", "ARM_EABI", "ARM_EABIHF"]
    #   resp.data.output_config.target_platform.accelerator #=> String, one of ["INTEL_GRAPHICS", "MALI", "NVIDIA", "NNA"]
    #   resp.data.output_config.compiler_options #=> String
    #   resp.data.output_config.kms_key_id #=> String
    #   resp.data.vpc_config #=> Types::NeoVpcConfig
    #   resp.data.vpc_config.security_group_ids #=> Array<String>
    #   resp.data.vpc_config.security_group_ids[0] #=> String
    #   resp.data.vpc_config.subnets #=> Array<String>
    #   resp.data.vpc_config.subnets[0] #=> String
    #
    def describe_compilation_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeCompilationJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeCompilationJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeCompilationJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeCompilationJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeCompilationJob,
        stubs: @stubs,
        params_class: Params::DescribeCompilationJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_compilation_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes a context.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeContextInput}.
    #
    # @option params [String] :context_name
    #   <p>The name of the context to describe.</p>
    #
    # @return [Types::DescribeContextOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_context(
    #     context_name: 'ContextName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeContextOutput
    #   resp.data.context_name #=> String
    #   resp.data.context_arn #=> String
    #   resp.data.source #=> Types::ContextSource
    #   resp.data.source.source_uri #=> String
    #   resp.data.source.source_type #=> String
    #   resp.data.source.source_id #=> String
    #   resp.data.context_type #=> String
    #   resp.data.description #=> String
    #   resp.data.properties #=> Hash<String, String>
    #   resp.data.properties['key'] #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.created_by #=> Types::UserContext
    #   resp.data.created_by.user_profile_arn #=> String
    #   resp.data.created_by.user_profile_name #=> String
    #   resp.data.created_by.domain_id #=> String
    #   resp.data.last_modified_time #=> Time
    #   resp.data.last_modified_by #=> Types::UserContext
    #   resp.data.lineage_group_arn #=> String
    #
    def describe_context(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeContextInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeContextInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeContext
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeContext
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeContext,
        stubs: @stubs,
        params_class: Params::DescribeContextOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_context
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets the details of a data quality monitoring job definition.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeDataQualityJobDefinitionInput}.
    #
    # @option params [String] :job_definition_name
    #   <p>The name of the data quality monitoring job definition to describe.</p>
    #
    # @return [Types::DescribeDataQualityJobDefinitionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_data_quality_job_definition(
    #     job_definition_name: 'JobDefinitionName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeDataQualityJobDefinitionOutput
    #   resp.data.job_definition_arn #=> String
    #   resp.data.job_definition_name #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.data_quality_baseline_config #=> Types::DataQualityBaselineConfig
    #   resp.data.data_quality_baseline_config.baselining_job_name #=> String
    #   resp.data.data_quality_baseline_config.constraints_resource #=> Types::MonitoringConstraintsResource
    #   resp.data.data_quality_baseline_config.constraints_resource.s3_uri #=> String
    #   resp.data.data_quality_baseline_config.statistics_resource #=> Types::MonitoringStatisticsResource
    #   resp.data.data_quality_baseline_config.statistics_resource.s3_uri #=> String
    #   resp.data.data_quality_app_specification #=> Types::DataQualityAppSpecification
    #   resp.data.data_quality_app_specification.image_uri #=> String
    #   resp.data.data_quality_app_specification.container_entrypoint #=> Array<String>
    #   resp.data.data_quality_app_specification.container_entrypoint[0] #=> String
    #   resp.data.data_quality_app_specification.container_arguments #=> Array<String>
    #   resp.data.data_quality_app_specification.container_arguments[0] #=> String
    #   resp.data.data_quality_app_specification.record_preprocessor_source_uri #=> String
    #   resp.data.data_quality_app_specification.post_analytics_processor_source_uri #=> String
    #   resp.data.data_quality_app_specification.environment #=> Hash<String, String>
    #   resp.data.data_quality_app_specification.environment['key'] #=> String
    #   resp.data.data_quality_job_input #=> Types::DataQualityJobInput
    #   resp.data.data_quality_job_input.endpoint_input #=> Types::EndpointInput
    #   resp.data.data_quality_job_input.endpoint_input.endpoint_name #=> String
    #   resp.data.data_quality_job_input.endpoint_input.local_path #=> String
    #   resp.data.data_quality_job_input.endpoint_input.s3_input_mode #=> String, one of ["Pipe", "File"]
    #   resp.data.data_quality_job_input.endpoint_input.s3_data_distribution_type #=> String, one of ["FullyReplicated", "ShardedByS3Key"]
    #   resp.data.data_quality_job_input.endpoint_input.features_attribute #=> String
    #   resp.data.data_quality_job_input.endpoint_input.inference_attribute #=> String
    #   resp.data.data_quality_job_input.endpoint_input.probability_attribute #=> String
    #   resp.data.data_quality_job_input.endpoint_input.probability_threshold_attribute #=> Float
    #   resp.data.data_quality_job_input.endpoint_input.start_time_offset #=> String
    #   resp.data.data_quality_job_input.endpoint_input.end_time_offset #=> String
    #   resp.data.data_quality_job_output_config #=> Types::MonitoringOutputConfig
    #   resp.data.data_quality_job_output_config.monitoring_outputs #=> Array<MonitoringOutput>
    #   resp.data.data_quality_job_output_config.monitoring_outputs[0] #=> Types::MonitoringOutput
    #   resp.data.data_quality_job_output_config.monitoring_outputs[0].s3_output #=> Types::MonitoringS3Output
    #   resp.data.data_quality_job_output_config.monitoring_outputs[0].s3_output.s3_uri #=> String
    #   resp.data.data_quality_job_output_config.monitoring_outputs[0].s3_output.local_path #=> String
    #   resp.data.data_quality_job_output_config.monitoring_outputs[0].s3_output.s3_upload_mode #=> String, one of ["Continuous", "EndOfJob"]
    #   resp.data.data_quality_job_output_config.kms_key_id #=> String
    #   resp.data.job_resources #=> Types::MonitoringResources
    #   resp.data.job_resources.cluster_config #=> Types::MonitoringClusterConfig
    #   resp.data.job_resources.cluster_config.instance_count #=> Integer
    #   resp.data.job_resources.cluster_config.instance_type #=> String, one of ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.job_resources.cluster_config.volume_size_in_gb #=> Integer
    #   resp.data.job_resources.cluster_config.volume_kms_key_id #=> String
    #   resp.data.network_config #=> Types::MonitoringNetworkConfig
    #   resp.data.network_config.enable_inter_container_traffic_encryption #=> Boolean
    #   resp.data.network_config.enable_network_isolation #=> Boolean
    #   resp.data.network_config.vpc_config #=> Types::VpcConfig
    #   resp.data.network_config.vpc_config.security_group_ids #=> Array<String>
    #   resp.data.network_config.vpc_config.security_group_ids[0] #=> String
    #   resp.data.network_config.vpc_config.subnets #=> Array<String>
    #   resp.data.network_config.vpc_config.subnets[0] #=> String
    #   resp.data.role_arn #=> String
    #   resp.data.stopping_condition #=> Types::MonitoringStoppingCondition
    #   resp.data.stopping_condition.max_runtime_in_seconds #=> Integer
    #
    def describe_data_quality_job_definition(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeDataQualityJobDefinitionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeDataQualityJobDefinitionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeDataQualityJobDefinition
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeDataQualityJobDefinition
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeDataQualityJobDefinition,
        stubs: @stubs,
        params_class: Params::DescribeDataQualityJobDefinitionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_data_quality_job_definition
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the device.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeDeviceInput}.
    #
    # @option params [String] :next_token
    #   <p>Next token of device description.</p>
    #
    # @option params [String] :device_name
    #   <p>The unique ID of the device.</p>
    #
    # @option params [String] :device_fleet_name
    #   <p>The name of the fleet the devices belong to.</p>
    #
    # @return [Types::DescribeDeviceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_device(
    #     next_token: 'NextToken',
    #     device_name: 'DeviceName', # required
    #     device_fleet_name: 'DeviceFleetName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeDeviceOutput
    #   resp.data.device_arn #=> String
    #   resp.data.device_name #=> String
    #   resp.data.description #=> String
    #   resp.data.device_fleet_name #=> String
    #   resp.data.iot_thing_name #=> String
    #   resp.data.registration_time #=> Time
    #   resp.data.latest_heartbeat #=> Time
    #   resp.data.models #=> Array<EdgeModel>
    #   resp.data.models[0] #=> Types::EdgeModel
    #   resp.data.models[0].model_name #=> String
    #   resp.data.models[0].model_version #=> String
    #   resp.data.models[0].latest_sample_time #=> Time
    #   resp.data.models[0].latest_inference #=> Time
    #   resp.data.max_models #=> Integer
    #   resp.data.next_token #=> String
    #   resp.data.agent_version #=> String
    #
    def describe_device(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeDeviceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeDeviceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeDevice
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeDevice
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeDevice,
        stubs: @stubs,
        params_class: Params::DescribeDeviceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_device
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>A description of the fleet the device belongs to.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeDeviceFleetInput}.
    #
    # @option params [String] :device_fleet_name
    #   <p>The name of the fleet.</p>
    #
    # @return [Types::DescribeDeviceFleetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_device_fleet(
    #     device_fleet_name: 'DeviceFleetName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeDeviceFleetOutput
    #   resp.data.device_fleet_name #=> String
    #   resp.data.device_fleet_arn #=> String
    #   resp.data.output_config #=> Types::EdgeOutputConfig
    #   resp.data.output_config.s3_output_location #=> String
    #   resp.data.output_config.kms_key_id #=> String
    #   resp.data.output_config.preset_deployment_type #=> String, one of ["GreengrassV2Component"]
    #   resp.data.output_config.preset_deployment_config #=> String
    #   resp.data.description #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.role_arn #=> String
    #   resp.data.iot_role_alias #=> String
    #
    def describe_device_fleet(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeDeviceFleetInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeDeviceFleetInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeDeviceFleet
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeDeviceFleet
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeDeviceFleet,
        stubs: @stubs,
        params_class: Params::DescribeDeviceFleetOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_device_fleet
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>The description of the domain.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeDomainInput}.
    #
    # @option params [String] :domain_id
    #   <p>The domain ID.</p>
    #
    # @return [Types::DescribeDomainOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_domain(
    #     domain_id: 'DomainId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeDomainOutput
    #   resp.data.domain_arn #=> String
    #   resp.data.domain_id #=> String
    #   resp.data.domain_name #=> String
    #   resp.data.home_efs_file_system_id #=> String
    #   resp.data.single_sign_on_managed_application_instance_id #=> String
    #   resp.data.status #=> String, one of ["Deleting", "Failed", "InService", "Pending", "Updating", "Update_Failed", "Delete_Failed"]
    #   resp.data.creation_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.failure_reason #=> String
    #   resp.data.auth_mode #=> String, one of ["SSO", "IAM"]
    #   resp.data.default_user_settings #=> Types::UserSettings
    #   resp.data.default_user_settings.execution_role #=> String
    #   resp.data.default_user_settings.security_groups #=> Array<String>
    #   resp.data.default_user_settings.security_groups[0] #=> String
    #   resp.data.default_user_settings.sharing_settings #=> Types::SharingSettings
    #   resp.data.default_user_settings.sharing_settings.notebook_output_option #=> String, one of ["Allowed", "Disabled"]
    #   resp.data.default_user_settings.sharing_settings.s3_output_path #=> String
    #   resp.data.default_user_settings.sharing_settings.s3_kms_key_id #=> String
    #   resp.data.default_user_settings.jupyter_server_app_settings #=> Types::JupyterServerAppSettings
    #   resp.data.default_user_settings.jupyter_server_app_settings.default_resource_spec #=> Types::ResourceSpec
    #   resp.data.default_user_settings.jupyter_server_app_settings.default_resource_spec.sage_maker_image_arn #=> String
    #   resp.data.default_user_settings.jupyter_server_app_settings.default_resource_spec.sage_maker_image_version_arn #=> String
    #   resp.data.default_user_settings.jupyter_server_app_settings.default_resource_spec.instance_type #=> String, one of ["system", "ml.t3.micro", "ml.t3.small", "ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.8xlarge", "ml.m5.12xlarge", "ml.m5.16xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.8xlarge", "ml.m5d.12xlarge", "ml.m5d.16xlarge", "ml.m5d.24xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.12xlarge", "ml.c5.18xlarge", "ml.c5.24xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #   resp.data.default_user_settings.jupyter_server_app_settings.default_resource_spec.lifecycle_config_arn #=> String
    #   resp.data.default_user_settings.jupyter_server_app_settings.lifecycle_config_arns #=> Array<String>
    #   resp.data.default_user_settings.jupyter_server_app_settings.lifecycle_config_arns[0] #=> String
    #   resp.data.default_user_settings.kernel_gateway_app_settings #=> Types::KernelGatewayAppSettings
    #   resp.data.default_user_settings.kernel_gateway_app_settings.default_resource_spec #=> Types::ResourceSpec
    #   resp.data.default_user_settings.kernel_gateway_app_settings.custom_images #=> Array<CustomImage>
    #   resp.data.default_user_settings.kernel_gateway_app_settings.custom_images[0] #=> Types::CustomImage
    #   resp.data.default_user_settings.kernel_gateway_app_settings.custom_images[0].image_name #=> String
    #   resp.data.default_user_settings.kernel_gateway_app_settings.custom_images[0].image_version_number #=> Integer
    #   resp.data.default_user_settings.kernel_gateway_app_settings.custom_images[0].app_image_config_name #=> String
    #   resp.data.default_user_settings.kernel_gateway_app_settings.lifecycle_config_arns #=> Array<String>
    #   resp.data.default_user_settings.tensor_board_app_settings #=> Types::TensorBoardAppSettings
    #   resp.data.default_user_settings.tensor_board_app_settings.default_resource_spec #=> Types::ResourceSpec
    #   resp.data.default_user_settings.r_studio_server_pro_app_settings #=> Types::RStudioServerProAppSettings
    #   resp.data.default_user_settings.r_studio_server_pro_app_settings.access_status #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.default_user_settings.r_studio_server_pro_app_settings.user_group #=> String, one of ["R_STUDIO_ADMIN", "R_STUDIO_USER"]
    #   resp.data.default_user_settings.r_session_app_settings #=> Types::RSessionAppSettings
    #   resp.data.default_user_settings.r_session_app_settings.default_resource_spec #=> Types::ResourceSpec
    #   resp.data.default_user_settings.r_session_app_settings.custom_images #=> Array<CustomImage>
    #   resp.data.app_network_access_type #=> String, one of ["PublicInternetOnly", "VpcOnly"]
    #   resp.data.home_efs_file_system_kms_key_id #=> String
    #   resp.data.subnet_ids #=> Array<String>
    #   resp.data.subnet_ids[0] #=> String
    #   resp.data.url #=> String
    #   resp.data.vpc_id #=> String
    #   resp.data.kms_key_id #=> String
    #   resp.data.domain_settings #=> Types::DomainSettings
    #   resp.data.domain_settings.security_group_ids #=> Array<String>
    #   resp.data.domain_settings.security_group_ids[0] #=> String
    #   resp.data.domain_settings.r_studio_server_pro_domain_settings #=> Types::RStudioServerProDomainSettings
    #   resp.data.domain_settings.r_studio_server_pro_domain_settings.domain_execution_role_arn #=> String
    #   resp.data.domain_settings.r_studio_server_pro_domain_settings.r_studio_connect_url #=> String
    #   resp.data.domain_settings.r_studio_server_pro_domain_settings.r_studio_package_manager_url #=> String
    #   resp.data.domain_settings.r_studio_server_pro_domain_settings.default_resource_spec #=> Types::ResourceSpec
    #   resp.data.app_security_group_management #=> String, one of ["Service", "Customer"]
    #   resp.data.security_group_id_for_domain_boundary #=> String
    #
    def describe_domain(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeDomainInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeDomainInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeDomain
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeDomain
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeDomain,
        stubs: @stubs,
        params_class: Params::DescribeDomainOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_domain
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>A description of edge packaging jobs.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeEdgePackagingJobInput}.
    #
    # @option params [String] :edge_packaging_job_name
    #   <p>The name of the edge packaging job.</p>
    #
    # @return [Types::DescribeEdgePackagingJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_edge_packaging_job(
    #     edge_packaging_job_name: 'EdgePackagingJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeEdgePackagingJobOutput
    #   resp.data.edge_packaging_job_arn #=> String
    #   resp.data.edge_packaging_job_name #=> String
    #   resp.data.compilation_job_name #=> String
    #   resp.data.model_name #=> String
    #   resp.data.model_version #=> String
    #   resp.data.role_arn #=> String
    #   resp.data.output_config #=> Types::EdgeOutputConfig
    #   resp.data.output_config.s3_output_location #=> String
    #   resp.data.output_config.kms_key_id #=> String
    #   resp.data.output_config.preset_deployment_type #=> String, one of ["GreengrassV2Component"]
    #   resp.data.output_config.preset_deployment_config #=> String
    #   resp.data.resource_key #=> String
    #   resp.data.edge_packaging_job_status #=> String, one of ["STARTING", "INPROGRESS", "COMPLETED", "FAILED", "STOPPING", "STOPPED"]
    #   resp.data.edge_packaging_job_status_message #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.model_artifact #=> String
    #   resp.data.model_signature #=> String
    #   resp.data.preset_deployment_output #=> Types::EdgePresetDeploymentOutput
    #   resp.data.preset_deployment_output.type #=> String, one of ["GreengrassV2Component"]
    #   resp.data.preset_deployment_output.artifact #=> String
    #   resp.data.preset_deployment_output.status #=> String, one of ["COMPLETED", "FAILED"]
    #   resp.data.preset_deployment_output.status_message #=> String
    #
    def describe_edge_packaging_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeEdgePackagingJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeEdgePackagingJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeEdgePackagingJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeEdgePackagingJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeEdgePackagingJob,
        stubs: @stubs,
        params_class: Params::DescribeEdgePackagingJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_edge_packaging_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the description of an endpoint.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeEndpointInput}.
    #
    # @option params [String] :endpoint_name
    #   <p>The name of the endpoint.</p>
    #
    # @return [Types::DescribeEndpointOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_endpoint(
    #     endpoint_name: 'EndpointName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeEndpointOutput
    #   resp.data.endpoint_name #=> String
    #   resp.data.endpoint_arn #=> String
    #   resp.data.endpoint_config_name #=> String
    #   resp.data.production_variants #=> Array<ProductionVariantSummary>
    #   resp.data.production_variants[0] #=> Types::ProductionVariantSummary
    #   resp.data.production_variants[0].variant_name #=> String
    #   resp.data.production_variants[0].deployed_images #=> Array<DeployedImage>
    #   resp.data.production_variants[0].deployed_images[0] #=> Types::DeployedImage
    #   resp.data.production_variants[0].deployed_images[0].specified_image #=> String
    #   resp.data.production_variants[0].deployed_images[0].resolved_image #=> String
    #   resp.data.production_variants[0].deployed_images[0].resolution_time #=> Time
    #   resp.data.production_variants[0].current_weight #=> Float
    #   resp.data.production_variants[0].desired_weight #=> Float
    #   resp.data.production_variants[0].current_instance_count #=> Integer
    #   resp.data.production_variants[0].desired_instance_count #=> Integer
    #   resp.data.production_variants[0].variant_status #=> Array<ProductionVariantStatus>
    #   resp.data.production_variants[0].variant_status[0] #=> Types::ProductionVariantStatus
    #   resp.data.production_variants[0].variant_status[0].status #=> String, one of ["Creating", "Updating", "Deleting", "ActivatingTraffic", "Baking"]
    #   resp.data.production_variants[0].variant_status[0].status_message #=> String
    #   resp.data.production_variants[0].variant_status[0].start_time #=> Time
    #   resp.data.production_variants[0].current_serverless_config #=> Types::ProductionVariantServerlessConfig
    #   resp.data.production_variants[0].current_serverless_config.memory_size_in_mb #=> Integer
    #   resp.data.production_variants[0].current_serverless_config.max_concurrency #=> Integer
    #   resp.data.production_variants[0].desired_serverless_config #=> Types::ProductionVariantServerlessConfig
    #   resp.data.data_capture_config #=> Types::DataCaptureConfigSummary
    #   resp.data.data_capture_config.enable_capture #=> Boolean
    #   resp.data.data_capture_config.capture_status #=> String, one of ["Started", "Stopped"]
    #   resp.data.data_capture_config.current_sampling_percentage #=> Integer
    #   resp.data.data_capture_config.destination_s3_uri #=> String
    #   resp.data.data_capture_config.kms_key_id #=> String
    #   resp.data.endpoint_status #=> String, one of ["OutOfService", "Creating", "Updating", "SystemUpdating", "RollingBack", "InService", "Deleting", "Failed"]
    #   resp.data.failure_reason #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.last_deployment_config #=> Types::DeploymentConfig
    #   resp.data.last_deployment_config.blue_green_update_policy #=> Types::BlueGreenUpdatePolicy
    #   resp.data.last_deployment_config.blue_green_update_policy.traffic_routing_configuration #=> Types::TrafficRoutingConfig
    #   resp.data.last_deployment_config.blue_green_update_policy.traffic_routing_configuration.type #=> String, one of ["ALL_AT_ONCE", "CANARY", "LINEAR"]
    #   resp.data.last_deployment_config.blue_green_update_policy.traffic_routing_configuration.wait_interval_in_seconds #=> Integer
    #   resp.data.last_deployment_config.blue_green_update_policy.traffic_routing_configuration.canary_size #=> Types::CapacitySize
    #   resp.data.last_deployment_config.blue_green_update_policy.traffic_routing_configuration.canary_size.type #=> String, one of ["INSTANCE_COUNT", "CAPACITY_PERCENT"]
    #   resp.data.last_deployment_config.blue_green_update_policy.traffic_routing_configuration.canary_size.value #=> Integer
    #   resp.data.last_deployment_config.blue_green_update_policy.traffic_routing_configuration.linear_step_size #=> Types::CapacitySize
    #   resp.data.last_deployment_config.blue_green_update_policy.termination_wait_in_seconds #=> Integer
    #   resp.data.last_deployment_config.blue_green_update_policy.maximum_execution_timeout_in_seconds #=> Integer
    #   resp.data.last_deployment_config.auto_rollback_configuration #=> Types::AutoRollbackConfig
    #   resp.data.last_deployment_config.auto_rollback_configuration.alarms #=> Array<Alarm>
    #   resp.data.last_deployment_config.auto_rollback_configuration.alarms[0] #=> Types::Alarm
    #   resp.data.last_deployment_config.auto_rollback_configuration.alarms[0].alarm_name #=> String
    #   resp.data.async_inference_config #=> Types::AsyncInferenceConfig
    #   resp.data.async_inference_config.client_config #=> Types::AsyncInferenceClientConfig
    #   resp.data.async_inference_config.client_config.max_concurrent_invocations_per_instance #=> Integer
    #   resp.data.async_inference_config.output_config #=> Types::AsyncInferenceOutputConfig
    #   resp.data.async_inference_config.output_config.kms_key_id #=> String
    #   resp.data.async_inference_config.output_config.s3_output_path #=> String
    #   resp.data.async_inference_config.output_config.notification_config #=> Types::AsyncInferenceNotificationConfig
    #   resp.data.async_inference_config.output_config.notification_config.success_topic #=> String
    #   resp.data.async_inference_config.output_config.notification_config.error_topic #=> String
    #   resp.data.pending_deployment_summary #=> Types::PendingDeploymentSummary
    #   resp.data.pending_deployment_summary.endpoint_config_name #=> String
    #   resp.data.pending_deployment_summary.production_variants #=> Array<PendingProductionVariantSummary>
    #   resp.data.pending_deployment_summary.production_variants[0] #=> Types::PendingProductionVariantSummary
    #   resp.data.pending_deployment_summary.production_variants[0].variant_name #=> String
    #   resp.data.pending_deployment_summary.production_variants[0].deployed_images #=> Array<DeployedImage>
    #   resp.data.pending_deployment_summary.production_variants[0].current_weight #=> Float
    #   resp.data.pending_deployment_summary.production_variants[0].desired_weight #=> Float
    #   resp.data.pending_deployment_summary.production_variants[0].current_instance_count #=> Integer
    #   resp.data.pending_deployment_summary.production_variants[0].desired_instance_count #=> Integer
    #   resp.data.pending_deployment_summary.production_variants[0].instance_type #=> String, one of ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.12xlarge", "ml.m5d.24xlarge", "ml.c4.large", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.large", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.12xlarge", "ml.r5.24xlarge", "ml.r5d.large", "ml.r5d.xlarge", "ml.r5d.2xlarge", "ml.r5d.4xlarge", "ml.r5d.12xlarge", "ml.r5d.24xlarge", "ml.inf1.xlarge", "ml.inf1.2xlarge", "ml.inf1.6xlarge", "ml.inf1.24xlarge"]
    #   resp.data.pending_deployment_summary.production_variants[0].accelerator_type #=> String, one of ["ml.eia1.medium", "ml.eia1.large", "ml.eia1.xlarge", "ml.eia2.medium", "ml.eia2.large", "ml.eia2.xlarge"]
    #   resp.data.pending_deployment_summary.production_variants[0].variant_status #=> Array<ProductionVariantStatus>
    #   resp.data.pending_deployment_summary.production_variants[0].current_serverless_config #=> Types::ProductionVariantServerlessConfig
    #   resp.data.pending_deployment_summary.production_variants[0].desired_serverless_config #=> Types::ProductionVariantServerlessConfig
    #   resp.data.pending_deployment_summary.start_time #=> Time
    #
    def describe_endpoint(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeEndpointInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeEndpointInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeEndpoint
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeEndpoint
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeEndpoint,
        stubs: @stubs,
        params_class: Params::DescribeEndpointOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_endpoint
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the description of an endpoint configuration created using the
    #                 <code>CreateEndpointConfig</code> API.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeEndpointConfigInput}.
    #
    # @option params [String] :endpoint_config_name
    #   <p>The name of the endpoint configuration.</p>
    #
    # @return [Types::DescribeEndpointConfigOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_endpoint_config(
    #     endpoint_config_name: 'EndpointConfigName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeEndpointConfigOutput
    #   resp.data.endpoint_config_name #=> String
    #   resp.data.endpoint_config_arn #=> String
    #   resp.data.production_variants #=> Array<ProductionVariant>
    #   resp.data.production_variants[0] #=> Types::ProductionVariant
    #   resp.data.production_variants[0].variant_name #=> String
    #   resp.data.production_variants[0].model_name #=> String
    #   resp.data.production_variants[0].initial_instance_count #=> Integer
    #   resp.data.production_variants[0].instance_type #=> String, one of ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.12xlarge", "ml.m5d.24xlarge", "ml.c4.large", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.large", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.12xlarge", "ml.r5.24xlarge", "ml.r5d.large", "ml.r5d.xlarge", "ml.r5d.2xlarge", "ml.r5d.4xlarge", "ml.r5d.12xlarge", "ml.r5d.24xlarge", "ml.inf1.xlarge", "ml.inf1.2xlarge", "ml.inf1.6xlarge", "ml.inf1.24xlarge"]
    #   resp.data.production_variants[0].initial_variant_weight #=> Float
    #   resp.data.production_variants[0].accelerator_type #=> String, one of ["ml.eia1.medium", "ml.eia1.large", "ml.eia1.xlarge", "ml.eia2.medium", "ml.eia2.large", "ml.eia2.xlarge"]
    #   resp.data.production_variants[0].core_dump_config #=> Types::ProductionVariantCoreDumpConfig
    #   resp.data.production_variants[0].core_dump_config.destination_s3_uri #=> String
    #   resp.data.production_variants[0].core_dump_config.kms_key_id #=> String
    #   resp.data.production_variants[0].serverless_config #=> Types::ProductionVariantServerlessConfig
    #   resp.data.production_variants[0].serverless_config.memory_size_in_mb #=> Integer
    #   resp.data.production_variants[0].serverless_config.max_concurrency #=> Integer
    #   resp.data.data_capture_config #=> Types::DataCaptureConfig
    #   resp.data.data_capture_config.enable_capture #=> Boolean
    #   resp.data.data_capture_config.initial_sampling_percentage #=> Integer
    #   resp.data.data_capture_config.destination_s3_uri #=> String
    #   resp.data.data_capture_config.kms_key_id #=> String
    #   resp.data.data_capture_config.capture_options #=> Array<CaptureOption>
    #   resp.data.data_capture_config.capture_options[0] #=> Types::CaptureOption
    #   resp.data.data_capture_config.capture_options[0].capture_mode #=> String, one of ["Input", "Output"]
    #   resp.data.data_capture_config.capture_content_type_header #=> Types::CaptureContentTypeHeader
    #   resp.data.data_capture_config.capture_content_type_header.csv_content_types #=> Array<String>
    #   resp.data.data_capture_config.capture_content_type_header.csv_content_types[0] #=> String
    #   resp.data.data_capture_config.capture_content_type_header.json_content_types #=> Array<String>
    #   resp.data.data_capture_config.capture_content_type_header.json_content_types[0] #=> String
    #   resp.data.kms_key_id #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.async_inference_config #=> Types::AsyncInferenceConfig
    #   resp.data.async_inference_config.client_config #=> Types::AsyncInferenceClientConfig
    #   resp.data.async_inference_config.client_config.max_concurrent_invocations_per_instance #=> Integer
    #   resp.data.async_inference_config.output_config #=> Types::AsyncInferenceOutputConfig
    #   resp.data.async_inference_config.output_config.kms_key_id #=> String
    #   resp.data.async_inference_config.output_config.s3_output_path #=> String
    #   resp.data.async_inference_config.output_config.notification_config #=> Types::AsyncInferenceNotificationConfig
    #   resp.data.async_inference_config.output_config.notification_config.success_topic #=> String
    #   resp.data.async_inference_config.output_config.notification_config.error_topic #=> String
    #
    def describe_endpoint_config(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeEndpointConfigInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeEndpointConfigInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeEndpointConfig
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeEndpointConfig
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeEndpointConfig,
        stubs: @stubs,
        params_class: Params::DescribeEndpointConfigOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_endpoint_config
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Provides a list of an experiment's properties.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeExperimentInput}.
    #
    # @option params [String] :experiment_name
    #   <p>The name of the experiment to describe.</p>
    #
    # @return [Types::DescribeExperimentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_experiment(
    #     experiment_name: 'ExperimentName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeExperimentOutput
    #   resp.data.experiment_name #=> String
    #   resp.data.experiment_arn #=> String
    #   resp.data.display_name #=> String
    #   resp.data.source #=> Types::ExperimentSource
    #   resp.data.source.source_arn #=> String
    #   resp.data.source.source_type #=> String
    #   resp.data.description #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.created_by #=> Types::UserContext
    #   resp.data.created_by.user_profile_arn #=> String
    #   resp.data.created_by.user_profile_name #=> String
    #   resp.data.created_by.domain_id #=> String
    #   resp.data.last_modified_time #=> Time
    #   resp.data.last_modified_by #=> Types::UserContext
    #
    def describe_experiment(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeExperimentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeExperimentInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeExperiment
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeExperiment
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeExperiment,
        stubs: @stubs,
        params_class: Params::DescribeExperimentOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_experiment
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Use this operation to describe a <code>FeatureGroup</code>. The response includes
    #          information on the creation time, <code>FeatureGroup</code> name, the unique identifier for
    #          each <code>FeatureGroup</code>, and more.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeFeatureGroupInput}.
    #
    # @option params [String] :feature_group_name
    #   <p>The name of the <code>FeatureGroup</code> you want described. </p>
    #
    # @option params [String] :next_token
    #   <p>A token to resume pagination of the list of <code>Features</code>
    #               (<code>FeatureDefinitions</code>). 2,500 <code>Features</code> are returned by
    #            default.</p>
    #
    # @return [Types::DescribeFeatureGroupOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_feature_group(
    #     feature_group_name: 'FeatureGroupName', # required
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeFeatureGroupOutput
    #   resp.data.feature_group_arn #=> String
    #   resp.data.feature_group_name #=> String
    #   resp.data.record_identifier_feature_name #=> String
    #   resp.data.event_time_feature_name #=> String
    #   resp.data.feature_definitions #=> Array<FeatureDefinition>
    #   resp.data.feature_definitions[0] #=> Types::FeatureDefinition
    #   resp.data.feature_definitions[0].feature_name #=> String
    #   resp.data.feature_definitions[0].feature_type #=> String, one of ["Integral", "Fractional", "String"]
    #   resp.data.creation_time #=> Time
    #   resp.data.online_store_config #=> Types::OnlineStoreConfig
    #   resp.data.online_store_config.security_config #=> Types::OnlineStoreSecurityConfig
    #   resp.data.online_store_config.security_config.kms_key_id #=> String
    #   resp.data.online_store_config.enable_online_store #=> Boolean
    #   resp.data.offline_store_config #=> Types::OfflineStoreConfig
    #   resp.data.offline_store_config.s3_storage_config #=> Types::S3StorageConfig
    #   resp.data.offline_store_config.s3_storage_config.s3_uri #=> String
    #   resp.data.offline_store_config.s3_storage_config.kms_key_id #=> String
    #   resp.data.offline_store_config.s3_storage_config.resolved_output_s3_uri #=> String
    #   resp.data.offline_store_config.disable_glue_table_creation #=> Boolean
    #   resp.data.offline_store_config.data_catalog_config #=> Types::DataCatalogConfig
    #   resp.data.offline_store_config.data_catalog_config.table_name #=> String
    #   resp.data.offline_store_config.data_catalog_config.catalog #=> String
    #   resp.data.offline_store_config.data_catalog_config.database #=> String
    #   resp.data.role_arn #=> String
    #   resp.data.feature_group_status #=> String, one of ["Creating", "Created", "CreateFailed", "Deleting", "DeleteFailed"]
    #   resp.data.offline_store_status #=> Types::OfflineStoreStatus
    #   resp.data.offline_store_status.status #=> String, one of ["Active", "Blocked", "Disabled"]
    #   resp.data.offline_store_status.blocked_reason #=> String
    #   resp.data.failure_reason #=> String
    #   resp.data.description #=> String
    #   resp.data.next_token #=> String
    #
    def describe_feature_group(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeFeatureGroupInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeFeatureGroupInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeFeatureGroup
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeFeatureGroup
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeFeatureGroup,
        stubs: @stubs,
        params_class: Params::DescribeFeatureGroupOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_feature_group
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about the specified flow definition.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeFlowDefinitionInput}.
    #
    # @option params [String] :flow_definition_name
    #   <p>The name of the flow definition.</p>
    #
    # @return [Types::DescribeFlowDefinitionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_flow_definition(
    #     flow_definition_name: 'FlowDefinitionName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeFlowDefinitionOutput
    #   resp.data.flow_definition_arn #=> String
    #   resp.data.flow_definition_name #=> String
    #   resp.data.flow_definition_status #=> String, one of ["Initializing", "Active", "Failed", "Deleting"]
    #   resp.data.creation_time #=> Time
    #   resp.data.human_loop_request_source #=> Types::HumanLoopRequestSource
    #   resp.data.human_loop_request_source.aws_managed_human_loop_request_source #=> String, one of ["AWS/Rekognition/DetectModerationLabels/Image/V3", "AWS/Textract/AnalyzeDocument/Forms/V1"]
    #   resp.data.human_loop_activation_config #=> Types::HumanLoopActivationConfig
    #   resp.data.human_loop_activation_config.human_loop_activation_conditions_config #=> Types::HumanLoopActivationConditionsConfig
    #   resp.data.human_loop_activation_config.human_loop_activation_conditions_config.human_loop_activation_conditions #=> String
    #   resp.data.human_loop_config #=> Types::HumanLoopConfig
    #   resp.data.human_loop_config.workteam_arn #=> String
    #   resp.data.human_loop_config.human_task_ui_arn #=> String
    #   resp.data.human_loop_config.task_title #=> String
    #   resp.data.human_loop_config.task_description #=> String
    #   resp.data.human_loop_config.task_count #=> Integer
    #   resp.data.human_loop_config.task_availability_lifetime_in_seconds #=> Integer
    #   resp.data.human_loop_config.task_time_limit_in_seconds #=> Integer
    #   resp.data.human_loop_config.task_keywords #=> Array<String>
    #   resp.data.human_loop_config.task_keywords[0] #=> String
    #   resp.data.human_loop_config.public_workforce_task_price #=> Types::PublicWorkforceTaskPrice
    #   resp.data.human_loop_config.public_workforce_task_price.amount_in_usd #=> Types::USD
    #   resp.data.human_loop_config.public_workforce_task_price.amount_in_usd.dollars #=> Integer
    #   resp.data.human_loop_config.public_workforce_task_price.amount_in_usd.cents #=> Integer
    #   resp.data.human_loop_config.public_workforce_task_price.amount_in_usd.tenth_fractions_of_a_cent #=> Integer
    #   resp.data.output_config #=> Types::FlowDefinitionOutputConfig
    #   resp.data.output_config.s3_output_path #=> String
    #   resp.data.output_config.kms_key_id #=> String
    #   resp.data.role_arn #=> String
    #   resp.data.failure_reason #=> String
    #
    def describe_flow_definition(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeFlowDefinitionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeFlowDefinitionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeFlowDefinition
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeFlowDefinition
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeFlowDefinition,
        stubs: @stubs,
        params_class: Params::DescribeFlowDefinitionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_flow_definition
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about the requested human task user interface (worker task template).</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeHumanTaskUiInput}.
    #
    # @option params [String] :human_task_ui_name
    #   <p>The name of the human task user interface
    #         (worker task template) you want information about.</p>
    #
    # @return [Types::DescribeHumanTaskUiOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_human_task_ui(
    #     human_task_ui_name: 'HumanTaskUiName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeHumanTaskUiOutput
    #   resp.data.human_task_ui_arn #=> String
    #   resp.data.human_task_ui_name #=> String
    #   resp.data.human_task_ui_status #=> String, one of ["Active", "Deleting"]
    #   resp.data.creation_time #=> Time
    #   resp.data.ui_template #=> Types::UiTemplateInfo
    #   resp.data.ui_template.url #=> String
    #   resp.data.ui_template.content_sha256 #=> String
    #
    def describe_human_task_ui(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeHumanTaskUiInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeHumanTaskUiInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeHumanTaskUi
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeHumanTaskUi
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeHumanTaskUi,
        stubs: @stubs,
        params_class: Params::DescribeHumanTaskUiOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_human_task_ui
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets
    #             a description of a hyperparameter tuning job.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeHyperParameterTuningJobInput}.
    #
    # @option params [String] :hyper_parameter_tuning_job_name
    #   <p>The name of the tuning job.</p>
    #
    # @return [Types::DescribeHyperParameterTuningJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_hyper_parameter_tuning_job(
    #     hyper_parameter_tuning_job_name: 'HyperParameterTuningJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeHyperParameterTuningJobOutput
    #   resp.data.hyper_parameter_tuning_job_name #=> String
    #   resp.data.hyper_parameter_tuning_job_arn #=> String
    #   resp.data.hyper_parameter_tuning_job_config #=> Types::HyperParameterTuningJobConfig
    #   resp.data.hyper_parameter_tuning_job_config.strategy #=> String, one of ["Bayesian", "Random"]
    #   resp.data.hyper_parameter_tuning_job_config.hyper_parameter_tuning_job_objective #=> Types::HyperParameterTuningJobObjective
    #   resp.data.hyper_parameter_tuning_job_config.hyper_parameter_tuning_job_objective.type #=> String, one of ["Maximize", "Minimize"]
    #   resp.data.hyper_parameter_tuning_job_config.hyper_parameter_tuning_job_objective.metric_name #=> String
    #   resp.data.hyper_parameter_tuning_job_config.resource_limits #=> Types::ResourceLimits
    #   resp.data.hyper_parameter_tuning_job_config.resource_limits.max_number_of_training_jobs #=> Integer
    #   resp.data.hyper_parameter_tuning_job_config.resource_limits.max_parallel_training_jobs #=> Integer
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges #=> Types::ParameterRanges
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.integer_parameter_ranges #=> Array<IntegerParameterRange>
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.integer_parameter_ranges[0] #=> Types::IntegerParameterRange
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.integer_parameter_ranges[0].name #=> String
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.integer_parameter_ranges[0].min_value #=> String
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.integer_parameter_ranges[0].max_value #=> String
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.integer_parameter_ranges[0].scaling_type #=> String, one of ["Auto", "Linear", "Logarithmic", "ReverseLogarithmic"]
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.continuous_parameter_ranges #=> Array<ContinuousParameterRange>
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.continuous_parameter_ranges[0] #=> Types::ContinuousParameterRange
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.continuous_parameter_ranges[0].name #=> String
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.continuous_parameter_ranges[0].min_value #=> String
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.continuous_parameter_ranges[0].max_value #=> String
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.continuous_parameter_ranges[0].scaling_type #=> String, one of ["Auto", "Linear", "Logarithmic", "ReverseLogarithmic"]
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.categorical_parameter_ranges #=> Array<CategoricalParameterRange>
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.categorical_parameter_ranges[0] #=> Types::CategoricalParameterRange
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.categorical_parameter_ranges[0].name #=> String
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.categorical_parameter_ranges[0].values #=> Array<String>
    #   resp.data.hyper_parameter_tuning_job_config.parameter_ranges.categorical_parameter_ranges[0].values[0] #=> String
    #   resp.data.hyper_parameter_tuning_job_config.training_job_early_stopping_type #=> String, one of ["Off", "Auto"]
    #   resp.data.hyper_parameter_tuning_job_config.tuning_job_completion_criteria #=> Types::TuningJobCompletionCriteria
    #   resp.data.hyper_parameter_tuning_job_config.tuning_job_completion_criteria.target_objective_metric_value #=> Float
    #   resp.data.training_job_definition #=> Types::HyperParameterTrainingJobDefinition
    #   resp.data.training_job_definition.definition_name #=> String
    #   resp.data.training_job_definition.tuning_objective #=> Types::HyperParameterTuningJobObjective
    #   resp.data.training_job_definition.hyper_parameter_ranges #=> Types::ParameterRanges
    #   resp.data.training_job_definition.static_hyper_parameters #=> Hash<String, String>
    #   resp.data.training_job_definition.static_hyper_parameters['key'] #=> String
    #   resp.data.training_job_definition.algorithm_specification #=> Types::HyperParameterAlgorithmSpecification
    #   resp.data.training_job_definition.algorithm_specification.training_image #=> String
    #   resp.data.training_job_definition.algorithm_specification.training_input_mode #=> String, one of ["Pipe", "File", "FastFile"]
    #   resp.data.training_job_definition.algorithm_specification.algorithm_name #=> String
    #   resp.data.training_job_definition.algorithm_specification.metric_definitions #=> Array<MetricDefinition>
    #   resp.data.training_job_definition.algorithm_specification.metric_definitions[0] #=> Types::MetricDefinition
    #   resp.data.training_job_definition.algorithm_specification.metric_definitions[0].name #=> String
    #   resp.data.training_job_definition.algorithm_specification.metric_definitions[0].regex #=> String
    #   resp.data.training_job_definition.role_arn #=> String
    #   resp.data.training_job_definition.input_data_config #=> Array<Channel>
    #   resp.data.training_job_definition.input_data_config[0] #=> Types::Channel
    #   resp.data.training_job_definition.input_data_config[0].channel_name #=> String
    #   resp.data.training_job_definition.input_data_config[0].data_source #=> Types::DataSource
    #   resp.data.training_job_definition.input_data_config[0].data_source.s3_data_source #=> Types::S3DataSource
    #   resp.data.training_job_definition.input_data_config[0].data_source.s3_data_source.s3_data_type #=> String, one of ["ManifestFile", "S3Prefix", "AugmentedManifestFile"]
    #   resp.data.training_job_definition.input_data_config[0].data_source.s3_data_source.s3_uri #=> String
    #   resp.data.training_job_definition.input_data_config[0].data_source.s3_data_source.s3_data_distribution_type #=> String, one of ["FullyReplicated", "ShardedByS3Key"]
    #   resp.data.training_job_definition.input_data_config[0].data_source.s3_data_source.attribute_names #=> Array<String>
    #   resp.data.training_job_definition.input_data_config[0].data_source.s3_data_source.attribute_names[0] #=> String
    #   resp.data.training_job_definition.input_data_config[0].data_source.file_system_data_source #=> Types::FileSystemDataSource
    #   resp.data.training_job_definition.input_data_config[0].data_source.file_system_data_source.file_system_id #=> String
    #   resp.data.training_job_definition.input_data_config[0].data_source.file_system_data_source.file_system_access_mode #=> String, one of ["rw", "ro"]
    #   resp.data.training_job_definition.input_data_config[0].data_source.file_system_data_source.file_system_type #=> String, one of ["EFS", "FSxLustre"]
    #   resp.data.training_job_definition.input_data_config[0].data_source.file_system_data_source.directory_path #=> String
    #   resp.data.training_job_definition.input_data_config[0].content_type #=> String
    #   resp.data.training_job_definition.input_data_config[0].compression_type #=> String, one of ["None", "Gzip"]
    #   resp.data.training_job_definition.input_data_config[0].record_wrapper_type #=> String, one of ["None", "RecordIO"]
    #   resp.data.training_job_definition.input_data_config[0].input_mode #=> String, one of ["Pipe", "File", "FastFile"]
    #   resp.data.training_job_definition.input_data_config[0].shuffle_config #=> Types::ShuffleConfig
    #   resp.data.training_job_definition.input_data_config[0].shuffle_config.seed #=> Integer
    #   resp.data.training_job_definition.vpc_config #=> Types::VpcConfig
    #   resp.data.training_job_definition.vpc_config.security_group_ids #=> Array<String>
    #   resp.data.training_job_definition.vpc_config.security_group_ids[0] #=> String
    #   resp.data.training_job_definition.vpc_config.subnets #=> Array<String>
    #   resp.data.training_job_definition.vpc_config.subnets[0] #=> String
    #   resp.data.training_job_definition.output_data_config #=> Types::OutputDataConfig
    #   resp.data.training_job_definition.output_data_config.kms_key_id #=> String
    #   resp.data.training_job_definition.output_data_config.s3_output_path #=> String
    #   resp.data.training_job_definition.resource_config #=> Types::ResourceConfig
    #   resp.data.training_job_definition.resource_config.instance_type #=> String, one of ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.p4d.24xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5n.xlarge", "ml.c5n.2xlarge", "ml.c5n.4xlarge", "ml.c5n.9xlarge", "ml.c5n.18xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #   resp.data.training_job_definition.resource_config.instance_count #=> Integer
    #   resp.data.training_job_definition.resource_config.volume_size_in_gb #=> Integer
    #   resp.data.training_job_definition.resource_config.volume_kms_key_id #=> String
    #   resp.data.training_job_definition.stopping_condition #=> Types::StoppingCondition
    #   resp.data.training_job_definition.stopping_condition.max_runtime_in_seconds #=> Integer
    #   resp.data.training_job_definition.stopping_condition.max_wait_time_in_seconds #=> Integer
    #   resp.data.training_job_definition.enable_network_isolation #=> Boolean
    #   resp.data.training_job_definition.enable_inter_container_traffic_encryption #=> Boolean
    #   resp.data.training_job_definition.enable_managed_spot_training #=> Boolean
    #   resp.data.training_job_definition.checkpoint_config #=> Types::CheckpointConfig
    #   resp.data.training_job_definition.checkpoint_config.s3_uri #=> String
    #   resp.data.training_job_definition.checkpoint_config.local_path #=> String
    #   resp.data.training_job_definition.retry_strategy #=> Types::RetryStrategy
    #   resp.data.training_job_definition.retry_strategy.maximum_retry_attempts #=> Integer
    #   resp.data.training_job_definitions #=> Array<HyperParameterTrainingJobDefinition>
    #   resp.data.hyper_parameter_tuning_job_status #=> String, one of ["Completed", "InProgress", "Failed", "Stopped", "Stopping"]
    #   resp.data.creation_time #=> Time
    #   resp.data.hyper_parameter_tuning_end_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.training_job_status_counters #=> Types::TrainingJobStatusCounters
    #   resp.data.training_job_status_counters.completed #=> Integer
    #   resp.data.training_job_status_counters.in_progress #=> Integer
    #   resp.data.training_job_status_counters.retryable_error #=> Integer
    #   resp.data.training_job_status_counters.non_retryable_error #=> Integer
    #   resp.data.training_job_status_counters.stopped #=> Integer
    #   resp.data.objective_status_counters #=> Types::ObjectiveStatusCounters
    #   resp.data.objective_status_counters.succeeded #=> Integer
    #   resp.data.objective_status_counters.pending #=> Integer
    #   resp.data.objective_status_counters.failed #=> Integer
    #   resp.data.best_training_job #=> Types::HyperParameterTrainingJobSummary
    #   resp.data.best_training_job.training_job_definition_name #=> String
    #   resp.data.best_training_job.training_job_name #=> String
    #   resp.data.best_training_job.training_job_arn #=> String
    #   resp.data.best_training_job.tuning_job_name #=> String
    #   resp.data.best_training_job.creation_time #=> Time
    #   resp.data.best_training_job.training_start_time #=> Time
    #   resp.data.best_training_job.training_end_time #=> Time
    #   resp.data.best_training_job.training_job_status #=> String, one of ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.best_training_job.tuned_hyper_parameters #=> Hash<String, String>
    #   resp.data.best_training_job.failure_reason #=> String
    #   resp.data.best_training_job.final_hyper_parameter_tuning_job_objective_metric #=> Types::FinalHyperParameterTuningJobObjectiveMetric
    #   resp.data.best_training_job.final_hyper_parameter_tuning_job_objective_metric.type #=> String, one of ["Maximize", "Minimize"]
    #   resp.data.best_training_job.final_hyper_parameter_tuning_job_objective_metric.metric_name #=> String
    #   resp.data.best_training_job.final_hyper_parameter_tuning_job_objective_metric.value #=> Float
    #   resp.data.best_training_job.objective_status #=> String, one of ["Succeeded", "Pending", "Failed"]
    #   resp.data.overall_best_training_job #=> Types::HyperParameterTrainingJobSummary
    #   resp.data.warm_start_config #=> Types::HyperParameterTuningJobWarmStartConfig
    #   resp.data.warm_start_config.parent_hyper_parameter_tuning_jobs #=> Array<ParentHyperParameterTuningJob>
    #   resp.data.warm_start_config.parent_hyper_parameter_tuning_jobs[0] #=> Types::ParentHyperParameterTuningJob
    #   resp.data.warm_start_config.parent_hyper_parameter_tuning_jobs[0].hyper_parameter_tuning_job_name #=> String
    #   resp.data.warm_start_config.warm_start_type #=> String, one of ["IdenticalDataAndAlgorithm", "TransferLearning"]
    #   resp.data.failure_reason #=> String
    #
    def describe_hyper_parameter_tuning_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeHyperParameterTuningJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeHyperParameterTuningJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeHyperParameterTuningJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeHyperParameterTuningJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeHyperParameterTuningJob,
        stubs: @stubs,
        params_class: Params::DescribeHyperParameterTuningJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_hyper_parameter_tuning_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes a SageMaker image.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeImageInput}.
    #
    # @option params [String] :image_name
    #   <p>The name of the image to describe.</p>
    #
    # @return [Types::DescribeImageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_image(
    #     image_name: 'ImageName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeImageOutput
    #   resp.data.creation_time #=> Time
    #   resp.data.description #=> String
    #   resp.data.display_name #=> String
    #   resp.data.failure_reason #=> String
    #   resp.data.image_arn #=> String
    #   resp.data.image_name #=> String
    #   resp.data.image_status #=> String, one of ["CREATING", "CREATED", "CREATE_FAILED", "UPDATING", "UPDATE_FAILED", "DELETING", "DELETE_FAILED"]
    #   resp.data.last_modified_time #=> Time
    #   resp.data.role_arn #=> String
    #
    def describe_image(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeImageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeImageInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeImage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeImage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeImage,
        stubs: @stubs,
        params_class: Params::DescribeImageOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_image
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes a version of a SageMaker image.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeImageVersionInput}.
    #
    # @option params [String] :image_name
    #   <p>The name of the image.</p>
    #
    # @option params [Integer] :version
    #   <p>The version of the image. If not specified, the latest version is described.</p>
    #
    # @return [Types::DescribeImageVersionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_image_version(
    #     image_name: 'ImageName', # required
    #     version: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeImageVersionOutput
    #   resp.data.base_image #=> String
    #   resp.data.container_image #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.failure_reason #=> String
    #   resp.data.image_arn #=> String
    #   resp.data.image_version_arn #=> String
    #   resp.data.image_version_status #=> String, one of ["CREATING", "CREATED", "CREATE_FAILED", "DELETING", "DELETE_FAILED"]
    #   resp.data.last_modified_time #=> Time
    #   resp.data.version #=> Integer
    #
    def describe_image_version(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeImageVersionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeImageVersionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeImageVersion
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeImageVersion
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeImageVersion,
        stubs: @stubs,
        params_class: Params::DescribeImageVersionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_image_version
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Provides the results of the Inference Recommender job.
    #           One or more recommendation jobs are returned.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeInferenceRecommendationsJobInput}.
    #
    # @option params [String] :job_name
    #   <p>The name of the job. The name must be unique within an
    #              Amazon Web Services Region in the Amazon Web Services account.</p>
    #
    # @return [Types::DescribeInferenceRecommendationsJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_inference_recommendations_job(
    #     job_name: 'JobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeInferenceRecommendationsJobOutput
    #   resp.data.job_name #=> String
    #   resp.data.job_description #=> String
    #   resp.data.job_type #=> String, one of ["Default", "Advanced"]
    #   resp.data.job_arn #=> String
    #   resp.data.role_arn #=> String
    #   resp.data.status #=> String, one of ["PENDING", "IN_PROGRESS", "COMPLETED", "FAILED", "STOPPING", "STOPPED"]
    #   resp.data.creation_time #=> Time
    #   resp.data.completion_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.failure_reason #=> String
    #   resp.data.input_config #=> Types::RecommendationJobInputConfig
    #   resp.data.input_config.model_package_version_arn #=> String
    #   resp.data.input_config.job_duration_in_seconds #=> Integer
    #   resp.data.input_config.traffic_pattern #=> Types::TrafficPattern
    #   resp.data.input_config.traffic_pattern.traffic_type #=> String, one of ["PHASES"]
    #   resp.data.input_config.traffic_pattern.phases #=> Array<Phase>
    #   resp.data.input_config.traffic_pattern.phases[0] #=> Types::Phase
    #   resp.data.input_config.traffic_pattern.phases[0].initial_number_of_users #=> Integer
    #   resp.data.input_config.traffic_pattern.phases[0].spawn_rate #=> Integer
    #   resp.data.input_config.traffic_pattern.phases[0].duration_in_seconds #=> Integer
    #   resp.data.input_config.resource_limit #=> Types::RecommendationJobResourceLimit
    #   resp.data.input_config.resource_limit.max_number_of_tests #=> Integer
    #   resp.data.input_config.resource_limit.max_parallel_of_tests #=> Integer
    #   resp.data.input_config.endpoint_configurations #=> Array<EndpointInputConfiguration>
    #   resp.data.input_config.endpoint_configurations[0] #=> Types::EndpointInputConfiguration
    #   resp.data.input_config.endpoint_configurations[0].instance_type #=> String, one of ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.12xlarge", "ml.m5d.24xlarge", "ml.c4.large", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.large", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.12xlarge", "ml.r5.24xlarge", "ml.r5d.large", "ml.r5d.xlarge", "ml.r5d.2xlarge", "ml.r5d.4xlarge", "ml.r5d.12xlarge", "ml.r5d.24xlarge", "ml.inf1.xlarge", "ml.inf1.2xlarge", "ml.inf1.6xlarge", "ml.inf1.24xlarge"]
    #   resp.data.input_config.endpoint_configurations[0].inference_specification_name #=> String
    #   resp.data.input_config.endpoint_configurations[0].environment_parameter_ranges #=> Types::EnvironmentParameterRanges
    #   resp.data.input_config.endpoint_configurations[0].environment_parameter_ranges.categorical_parameter_ranges #=> Array<CategoricalParameter>
    #   resp.data.input_config.endpoint_configurations[0].environment_parameter_ranges.categorical_parameter_ranges[0] #=> Types::CategoricalParameter
    #   resp.data.input_config.endpoint_configurations[0].environment_parameter_ranges.categorical_parameter_ranges[0].name #=> String
    #   resp.data.input_config.endpoint_configurations[0].environment_parameter_ranges.categorical_parameter_ranges[0].value #=> Array<String>
    #   resp.data.input_config.endpoint_configurations[0].environment_parameter_ranges.categorical_parameter_ranges[0].value[0] #=> String
    #   resp.data.input_config.volume_kms_key_id #=> String
    #   resp.data.stopping_conditions #=> Types::RecommendationJobStoppingConditions
    #   resp.data.stopping_conditions.max_invocations #=> Integer
    #   resp.data.stopping_conditions.model_latency_thresholds #=> Array<ModelLatencyThreshold>
    #   resp.data.stopping_conditions.model_latency_thresholds[0] #=> Types::ModelLatencyThreshold
    #   resp.data.stopping_conditions.model_latency_thresholds[0].percentile #=> String
    #   resp.data.stopping_conditions.model_latency_thresholds[0].value_in_milliseconds #=> Integer
    #   resp.data.inference_recommendations #=> Array<InferenceRecommendation>
    #   resp.data.inference_recommendations[0] #=> Types::InferenceRecommendation
    #   resp.data.inference_recommendations[0].metrics #=> Types::RecommendationMetrics
    #   resp.data.inference_recommendations[0].metrics.cost_per_hour #=> Float
    #   resp.data.inference_recommendations[0].metrics.cost_per_inference #=> Float
    #   resp.data.inference_recommendations[0].metrics.max_invocations #=> Integer
    #   resp.data.inference_recommendations[0].metrics.model_latency #=> Integer
    #   resp.data.inference_recommendations[0].endpoint_configuration #=> Types::EndpointOutputConfiguration
    #   resp.data.inference_recommendations[0].endpoint_configuration.endpoint_name #=> String
    #   resp.data.inference_recommendations[0].endpoint_configuration.variant_name #=> String
    #   resp.data.inference_recommendations[0].endpoint_configuration.instance_type #=> String, one of ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.12xlarge", "ml.m5d.24xlarge", "ml.c4.large", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.large", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.12xlarge", "ml.r5.24xlarge", "ml.r5d.large", "ml.r5d.xlarge", "ml.r5d.2xlarge", "ml.r5d.4xlarge", "ml.r5d.12xlarge", "ml.r5d.24xlarge", "ml.inf1.xlarge", "ml.inf1.2xlarge", "ml.inf1.6xlarge", "ml.inf1.24xlarge"]
    #   resp.data.inference_recommendations[0].endpoint_configuration.initial_instance_count #=> Integer
    #   resp.data.inference_recommendations[0].model_configuration #=> Types::ModelConfiguration
    #   resp.data.inference_recommendations[0].model_configuration.inference_specification_name #=> String
    #   resp.data.inference_recommendations[0].model_configuration.environment_parameters #=> Array<EnvironmentParameter>
    #   resp.data.inference_recommendations[0].model_configuration.environment_parameters[0] #=> Types::EnvironmentParameter
    #   resp.data.inference_recommendations[0].model_configuration.environment_parameters[0].key #=> String
    #   resp.data.inference_recommendations[0].model_configuration.environment_parameters[0].value_type #=> String
    #   resp.data.inference_recommendations[0].model_configuration.environment_parameters[0].value #=> String
    #
    def describe_inference_recommendations_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeInferenceRecommendationsJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeInferenceRecommendationsJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeInferenceRecommendationsJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeInferenceRecommendationsJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeInferenceRecommendationsJob,
        stubs: @stubs,
        params_class: Params::DescribeInferenceRecommendationsJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_inference_recommendations_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets information about a labeling job.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeLabelingJobInput}.
    #
    # @option params [String] :labeling_job_name
    #   <p>The name of the labeling job to return information for.</p>
    #
    # @return [Types::DescribeLabelingJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_labeling_job(
    #     labeling_job_name: 'LabelingJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeLabelingJobOutput
    #   resp.data.labeling_job_status #=> String, one of ["Initializing", "InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.label_counters #=> Types::LabelCounters
    #   resp.data.label_counters.total_labeled #=> Integer
    #   resp.data.label_counters.human_labeled #=> Integer
    #   resp.data.label_counters.machine_labeled #=> Integer
    #   resp.data.label_counters.failed_non_retryable_error #=> Integer
    #   resp.data.label_counters.unlabeled #=> Integer
    #   resp.data.failure_reason #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.job_reference_code #=> String
    #   resp.data.labeling_job_name #=> String
    #   resp.data.labeling_job_arn #=> String
    #   resp.data.label_attribute_name #=> String
    #   resp.data.input_config #=> Types::LabelingJobInputConfig
    #   resp.data.input_config.data_source #=> Types::LabelingJobDataSource
    #   resp.data.input_config.data_source.s3_data_source #=> Types::LabelingJobS3DataSource
    #   resp.data.input_config.data_source.s3_data_source.manifest_s3_uri #=> String
    #   resp.data.input_config.data_source.sns_data_source #=> Types::LabelingJobSnsDataSource
    #   resp.data.input_config.data_source.sns_data_source.sns_topic_arn #=> String
    #   resp.data.input_config.data_attributes #=> Types::LabelingJobDataAttributes
    #   resp.data.input_config.data_attributes.content_classifiers #=> Array<String>
    #   resp.data.input_config.data_attributes.content_classifiers[0] #=> String, one of ["FreeOfPersonallyIdentifiableInformation", "FreeOfAdultContent"]
    #   resp.data.output_config #=> Types::LabelingJobOutputConfig
    #   resp.data.output_config.s3_output_path #=> String
    #   resp.data.output_config.kms_key_id #=> String
    #   resp.data.output_config.sns_topic_arn #=> String
    #   resp.data.role_arn #=> String
    #   resp.data.label_category_config_s3_uri #=> String
    #   resp.data.stopping_conditions #=> Types::LabelingJobStoppingConditions
    #   resp.data.stopping_conditions.max_human_labeled_object_count #=> Integer
    #   resp.data.stopping_conditions.max_percentage_of_input_dataset_labeled #=> Integer
    #   resp.data.labeling_job_algorithms_config #=> Types::LabelingJobAlgorithmsConfig
    #   resp.data.labeling_job_algorithms_config.labeling_job_algorithm_specification_arn #=> String
    #   resp.data.labeling_job_algorithms_config.initial_active_learning_model_arn #=> String
    #   resp.data.labeling_job_algorithms_config.labeling_job_resource_config #=> Types::LabelingJobResourceConfig
    #   resp.data.labeling_job_algorithms_config.labeling_job_resource_config.volume_kms_key_id #=> String
    #   resp.data.human_task_config #=> Types::HumanTaskConfig
    #   resp.data.human_task_config.workteam_arn #=> String
    #   resp.data.human_task_config.ui_config #=> Types::UiConfig
    #   resp.data.human_task_config.ui_config.ui_template_s3_uri #=> String
    #   resp.data.human_task_config.ui_config.human_task_ui_arn #=> String
    #   resp.data.human_task_config.pre_human_task_lambda_arn #=> String
    #   resp.data.human_task_config.task_keywords #=> Array<String>
    #   resp.data.human_task_config.task_keywords[0] #=> String
    #   resp.data.human_task_config.task_title #=> String
    #   resp.data.human_task_config.task_description #=> String
    #   resp.data.human_task_config.number_of_human_workers_per_data_object #=> Integer
    #   resp.data.human_task_config.task_time_limit_in_seconds #=> Integer
    #   resp.data.human_task_config.task_availability_lifetime_in_seconds #=> Integer
    #   resp.data.human_task_config.max_concurrent_task_count #=> Integer
    #   resp.data.human_task_config.annotation_consolidation_config #=> Types::AnnotationConsolidationConfig
    #   resp.data.human_task_config.annotation_consolidation_config.annotation_consolidation_lambda_arn #=> String
    #   resp.data.human_task_config.public_workforce_task_price #=> Types::PublicWorkforceTaskPrice
    #   resp.data.human_task_config.public_workforce_task_price.amount_in_usd #=> Types::USD
    #   resp.data.human_task_config.public_workforce_task_price.amount_in_usd.dollars #=> Integer
    #   resp.data.human_task_config.public_workforce_task_price.amount_in_usd.cents #=> Integer
    #   resp.data.human_task_config.public_workforce_task_price.amount_in_usd.tenth_fractions_of_a_cent #=> Integer
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #   resp.data.labeling_job_output #=> Types::LabelingJobOutput
    #   resp.data.labeling_job_output.output_dataset_s3_uri #=> String
    #   resp.data.labeling_job_output.final_active_learning_model_arn #=> String
    #
    def describe_labeling_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeLabelingJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeLabelingJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeLabelingJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeLabelingJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeLabelingJob,
        stubs: @stubs,
        params_class: Params::DescribeLabelingJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_labeling_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Provides a list of properties for the requested lineage group.
    #          For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html">
    #             Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeLineageGroupInput}.
    #
    # @option params [String] :lineage_group_name
    #   <p>The name of the lineage group.</p>
    #
    # @return [Types::DescribeLineageGroupOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_lineage_group(
    #     lineage_group_name: 'LineageGroupName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeLineageGroupOutput
    #   resp.data.lineage_group_name #=> String
    #   resp.data.lineage_group_arn #=> String
    #   resp.data.display_name #=> String
    #   resp.data.description #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.created_by #=> Types::UserContext
    #   resp.data.created_by.user_profile_arn #=> String
    #   resp.data.created_by.user_profile_name #=> String
    #   resp.data.created_by.domain_id #=> String
    #   resp.data.last_modified_time #=> Time
    #   resp.data.last_modified_by #=> Types::UserContext
    #
    def describe_lineage_group(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeLineageGroupInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeLineageGroupInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeLineageGroup
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeLineageGroup
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeLineageGroup,
        stubs: @stubs,
        params_class: Params::DescribeLineageGroupOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_lineage_group
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes a model that you created using the <code>CreateModel</code>
    #             API.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeModelInput}.
    #
    # @option params [String] :model_name
    #   <p>The name of the model.</p>
    #
    # @return [Types::DescribeModelOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_model(
    #     model_name: 'ModelName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeModelOutput
    #   resp.data.model_name #=> String
    #   resp.data.primary_container #=> Types::ContainerDefinition
    #   resp.data.primary_container.container_hostname #=> String
    #   resp.data.primary_container.image #=> String
    #   resp.data.primary_container.image_config #=> Types::ImageConfig
    #   resp.data.primary_container.image_config.repository_access_mode #=> String, one of ["Platform", "Vpc"]
    #   resp.data.primary_container.image_config.repository_auth_config #=> Types::RepositoryAuthConfig
    #   resp.data.primary_container.image_config.repository_auth_config.repository_credentials_provider_arn #=> String
    #   resp.data.primary_container.mode #=> String, one of ["SingleModel", "MultiModel"]
    #   resp.data.primary_container.model_data_url #=> String
    #   resp.data.primary_container.environment #=> Hash<String, String>
    #   resp.data.primary_container.environment['key'] #=> String
    #   resp.data.primary_container.model_package_name #=> String
    #   resp.data.primary_container.inference_specification_name #=> String
    #   resp.data.primary_container.multi_model_config #=> Types::MultiModelConfig
    #   resp.data.primary_container.multi_model_config.model_cache_setting #=> String, one of ["Enabled", "Disabled"]
    #   resp.data.containers #=> Array<ContainerDefinition>
    #   resp.data.inference_execution_config #=> Types::InferenceExecutionConfig
    #   resp.data.inference_execution_config.mode #=> String, one of ["Serial", "Direct"]
    #   resp.data.execution_role_arn #=> String
    #   resp.data.vpc_config #=> Types::VpcConfig
    #   resp.data.vpc_config.security_group_ids #=> Array<String>
    #   resp.data.vpc_config.security_group_ids[0] #=> String
    #   resp.data.vpc_config.subnets #=> Array<String>
    #   resp.data.vpc_config.subnets[0] #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.model_arn #=> String
    #   resp.data.enable_network_isolation #=> Boolean
    #
    def describe_model(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeModelInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeModelInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeModel
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeModel
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeModel,
        stubs: @stubs,
        params_class: Params::DescribeModelOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_model
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a description of a model bias job definition.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeModelBiasJobDefinitionInput}.
    #
    # @option params [String] :job_definition_name
    #   <p>The name of the model bias job definition. The name must be unique within an Amazon Web Services Region
    #            in the Amazon Web Services account.</p>
    #
    # @return [Types::DescribeModelBiasJobDefinitionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_model_bias_job_definition(
    #     job_definition_name: 'JobDefinitionName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeModelBiasJobDefinitionOutput
    #   resp.data.job_definition_arn #=> String
    #   resp.data.job_definition_name #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.model_bias_baseline_config #=> Types::ModelBiasBaselineConfig
    #   resp.data.model_bias_baseline_config.baselining_job_name #=> String
    #   resp.data.model_bias_baseline_config.constraints_resource #=> Types::MonitoringConstraintsResource
    #   resp.data.model_bias_baseline_config.constraints_resource.s3_uri #=> String
    #   resp.data.model_bias_app_specification #=> Types::ModelBiasAppSpecification
    #   resp.data.model_bias_app_specification.image_uri #=> String
    #   resp.data.model_bias_app_specification.config_uri #=> String
    #   resp.data.model_bias_app_specification.environment #=> Hash<String, String>
    #   resp.data.model_bias_app_specification.environment['key'] #=> String
    #   resp.data.model_bias_job_input #=> Types::ModelBiasJobInput
    #   resp.data.model_bias_job_input.endpoint_input #=> Types::EndpointInput
    #   resp.data.model_bias_job_input.endpoint_input.endpoint_name #=> String
    #   resp.data.model_bias_job_input.endpoint_input.local_path #=> String
    #   resp.data.model_bias_job_input.endpoint_input.s3_input_mode #=> String, one of ["Pipe", "File"]
    #   resp.data.model_bias_job_input.endpoint_input.s3_data_distribution_type #=> String, one of ["FullyReplicated", "ShardedByS3Key"]
    #   resp.data.model_bias_job_input.endpoint_input.features_attribute #=> String
    #   resp.data.model_bias_job_input.endpoint_input.inference_attribute #=> String
    #   resp.data.model_bias_job_input.endpoint_input.probability_attribute #=> String
    #   resp.data.model_bias_job_input.endpoint_input.probability_threshold_attribute #=> Float
    #   resp.data.model_bias_job_input.endpoint_input.start_time_offset #=> String
    #   resp.data.model_bias_job_input.endpoint_input.end_time_offset #=> String
    #   resp.data.model_bias_job_input.ground_truth_s3_input #=> Types::MonitoringGroundTruthS3Input
    #   resp.data.model_bias_job_input.ground_truth_s3_input.s3_uri #=> String
    #   resp.data.model_bias_job_output_config #=> Types::MonitoringOutputConfig
    #   resp.data.model_bias_job_output_config.monitoring_outputs #=> Array<MonitoringOutput>
    #   resp.data.model_bias_job_output_config.monitoring_outputs[0] #=> Types::MonitoringOutput
    #   resp.data.model_bias_job_output_config.monitoring_outputs[0].s3_output #=> Types::MonitoringS3Output
    #   resp.data.model_bias_job_output_config.monitoring_outputs[0].s3_output.s3_uri #=> String
    #   resp.data.model_bias_job_output_config.monitoring_outputs[0].s3_output.local_path #=> String
    #   resp.data.model_bias_job_output_config.monitoring_outputs[0].s3_output.s3_upload_mode #=> String, one of ["Continuous", "EndOfJob"]
    #   resp.data.model_bias_job_output_config.kms_key_id #=> String
    #   resp.data.job_resources #=> Types::MonitoringResources
    #   resp.data.job_resources.cluster_config #=> Types::MonitoringClusterConfig
    #   resp.data.job_resources.cluster_config.instance_count #=> Integer
    #   resp.data.job_resources.cluster_config.instance_type #=> String, one of ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.job_resources.cluster_config.volume_size_in_gb #=> Integer
    #   resp.data.job_resources.cluster_config.volume_kms_key_id #=> String
    #   resp.data.network_config #=> Types::MonitoringNetworkConfig
    #   resp.data.network_config.enable_inter_container_traffic_encryption #=> Boolean
    #   resp.data.network_config.enable_network_isolation #=> Boolean
    #   resp.data.network_config.vpc_config #=> Types::VpcConfig
    #   resp.data.network_config.vpc_config.security_group_ids #=> Array<String>
    #   resp.data.network_config.vpc_config.security_group_ids[0] #=> String
    #   resp.data.network_config.vpc_config.subnets #=> Array<String>
    #   resp.data.network_config.vpc_config.subnets[0] #=> String
    #   resp.data.role_arn #=> String
    #   resp.data.stopping_condition #=> Types::MonitoringStoppingCondition
    #   resp.data.stopping_condition.max_runtime_in_seconds #=> Integer
    #
    def describe_model_bias_job_definition(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeModelBiasJobDefinitionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeModelBiasJobDefinitionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeModelBiasJobDefinition
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeModelBiasJobDefinition
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeModelBiasJobDefinition,
        stubs: @stubs,
        params_class: Params::DescribeModelBiasJobDefinitionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_model_bias_job_definition
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a description of a model explainability job definition.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeModelExplainabilityJobDefinitionInput}.
    #
    # @option params [String] :job_definition_name
    #   <p>The name of the model explainability job definition. The name must be unique within an
    #            Amazon Web Services Region in the Amazon Web Services account.</p>
    #
    # @return [Types::DescribeModelExplainabilityJobDefinitionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_model_explainability_job_definition(
    #     job_definition_name: 'JobDefinitionName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeModelExplainabilityJobDefinitionOutput
    #   resp.data.job_definition_arn #=> String
    #   resp.data.job_definition_name #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.model_explainability_baseline_config #=> Types::ModelExplainabilityBaselineConfig
    #   resp.data.model_explainability_baseline_config.baselining_job_name #=> String
    #   resp.data.model_explainability_baseline_config.constraints_resource #=> Types::MonitoringConstraintsResource
    #   resp.data.model_explainability_baseline_config.constraints_resource.s3_uri #=> String
    #   resp.data.model_explainability_app_specification #=> Types::ModelExplainabilityAppSpecification
    #   resp.data.model_explainability_app_specification.image_uri #=> String
    #   resp.data.model_explainability_app_specification.config_uri #=> String
    #   resp.data.model_explainability_app_specification.environment #=> Hash<String, String>
    #   resp.data.model_explainability_app_specification.environment['key'] #=> String
    #   resp.data.model_explainability_job_input #=> Types::ModelExplainabilityJobInput
    #   resp.data.model_explainability_job_input.endpoint_input #=> Types::EndpointInput
    #   resp.data.model_explainability_job_input.endpoint_input.endpoint_name #=> String
    #   resp.data.model_explainability_job_input.endpoint_input.local_path #=> String
    #   resp.data.model_explainability_job_input.endpoint_input.s3_input_mode #=> String, one of ["Pipe", "File"]
    #   resp.data.model_explainability_job_input.endpoint_input.s3_data_distribution_type #=> String, one of ["FullyReplicated", "ShardedByS3Key"]
    #   resp.data.model_explainability_job_input.endpoint_input.features_attribute #=> String
    #   resp.data.model_explainability_job_input.endpoint_input.inference_attribute #=> String
    #   resp.data.model_explainability_job_input.endpoint_input.probability_attribute #=> String
    #   resp.data.model_explainability_job_input.endpoint_input.probability_threshold_attribute #=> Float
    #   resp.data.model_explainability_job_input.endpoint_input.start_time_offset #=> String
    #   resp.data.model_explainability_job_input.endpoint_input.end_time_offset #=> String
    #   resp.data.model_explainability_job_output_config #=> Types::MonitoringOutputConfig
    #   resp.data.model_explainability_job_output_config.monitoring_outputs #=> Array<MonitoringOutput>
    #   resp.data.model_explainability_job_output_config.monitoring_outputs[0] #=> Types::MonitoringOutput
    #   resp.data.model_explainability_job_output_config.monitoring_outputs[0].s3_output #=> Types::MonitoringS3Output
    #   resp.data.model_explainability_job_output_config.monitoring_outputs[0].s3_output.s3_uri #=> String
    #   resp.data.model_explainability_job_output_config.monitoring_outputs[0].s3_output.local_path #=> String
    #   resp.data.model_explainability_job_output_config.monitoring_outputs[0].s3_output.s3_upload_mode #=> String, one of ["Continuous", "EndOfJob"]
    #   resp.data.model_explainability_job_output_config.kms_key_id #=> String
    #   resp.data.job_resources #=> Types::MonitoringResources
    #   resp.data.job_resources.cluster_config #=> Types::MonitoringClusterConfig
    #   resp.data.job_resources.cluster_config.instance_count #=> Integer
    #   resp.data.job_resources.cluster_config.instance_type #=> String, one of ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.job_resources.cluster_config.volume_size_in_gb #=> Integer
    #   resp.data.job_resources.cluster_config.volume_kms_key_id #=> String
    #   resp.data.network_config #=> Types::MonitoringNetworkConfig
    #   resp.data.network_config.enable_inter_container_traffic_encryption #=> Boolean
    #   resp.data.network_config.enable_network_isolation #=> Boolean
    #   resp.data.network_config.vpc_config #=> Types::VpcConfig
    #   resp.data.network_config.vpc_config.security_group_ids #=> Array<String>
    #   resp.data.network_config.vpc_config.security_group_ids[0] #=> String
    #   resp.data.network_config.vpc_config.subnets #=> Array<String>
    #   resp.data.network_config.vpc_config.subnets[0] #=> String
    #   resp.data.role_arn #=> String
    #   resp.data.stopping_condition #=> Types::MonitoringStoppingCondition
    #   resp.data.stopping_condition.max_runtime_in_seconds #=> Integer
    #
    def describe_model_explainability_job_definition(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeModelExplainabilityJobDefinitionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeModelExplainabilityJobDefinitionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeModelExplainabilityJobDefinition
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeModelExplainabilityJobDefinition
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeModelExplainabilityJobDefinition,
        stubs: @stubs,
        params_class: Params::DescribeModelExplainabilityJobDefinitionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_model_explainability_job_definition
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a description of the specified model package, which is used to create SageMaker
    #             models or list them on Amazon Web Services Marketplace.</p>
    #         <p>To create models in SageMaker, buyers can subscribe to model packages listed on Amazon Web Services
    #             Marketplace.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeModelPackageInput}.
    #
    # @option params [String] :model_package_name
    #   <p>The name or Amazon Resource Name (ARN) of the model package to describe.</p>
    #           <p>When you specify a name, the name must have 1 to 63 characters. Valid
    #               characters are a-z, A-Z, 0-9, and - (hyphen).</p>
    #
    # @return [Types::DescribeModelPackageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_model_package(
    #     model_package_name: 'ModelPackageName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeModelPackageOutput
    #   resp.data.model_package_name #=> String
    #   resp.data.model_package_group_name #=> String
    #   resp.data.model_package_version #=> Integer
    #   resp.data.model_package_arn #=> String
    #   resp.data.model_package_description #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.inference_specification #=> Types::InferenceSpecification
    #   resp.data.inference_specification.containers #=> Array<ModelPackageContainerDefinition>
    #   resp.data.inference_specification.containers[0] #=> Types::ModelPackageContainerDefinition
    #   resp.data.inference_specification.containers[0].container_hostname #=> String
    #   resp.data.inference_specification.containers[0].image #=> String
    #   resp.data.inference_specification.containers[0].image_digest #=> String
    #   resp.data.inference_specification.containers[0].model_data_url #=> String
    #   resp.data.inference_specification.containers[0].product_id #=> String
    #   resp.data.inference_specification.containers[0].environment #=> Hash<String, String>
    #   resp.data.inference_specification.containers[0].environment['key'] #=> String
    #   resp.data.inference_specification.containers[0].model_input #=> Types::ModelInput
    #   resp.data.inference_specification.containers[0].model_input.data_input_config #=> String
    #   resp.data.inference_specification.containers[0].framework #=> String
    #   resp.data.inference_specification.containers[0].framework_version #=> String
    #   resp.data.inference_specification.containers[0].nearest_model_name #=> String
    #   resp.data.inference_specification.supported_transform_instance_types #=> Array<String>
    #   resp.data.inference_specification.supported_transform_instance_types[0] #=> String, one of ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.inference_specification.supported_realtime_inference_instance_types #=> Array<String>
    #   resp.data.inference_specification.supported_realtime_inference_instance_types[0] #=> String, one of ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.12xlarge", "ml.m5d.24xlarge", "ml.c4.large", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.large", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.12xlarge", "ml.r5.24xlarge", "ml.r5d.large", "ml.r5d.xlarge", "ml.r5d.2xlarge", "ml.r5d.4xlarge", "ml.r5d.12xlarge", "ml.r5d.24xlarge", "ml.inf1.xlarge", "ml.inf1.2xlarge", "ml.inf1.6xlarge", "ml.inf1.24xlarge"]
    #   resp.data.inference_specification.supported_content_types #=> Array<String>
    #   resp.data.inference_specification.supported_content_types[0] #=> String
    #   resp.data.inference_specification.supported_response_mime_types #=> Array<String>
    #   resp.data.inference_specification.supported_response_mime_types[0] #=> String
    #   resp.data.source_algorithm_specification #=> Types::SourceAlgorithmSpecification
    #   resp.data.source_algorithm_specification.source_algorithms #=> Array<SourceAlgorithm>
    #   resp.data.source_algorithm_specification.source_algorithms[0] #=> Types::SourceAlgorithm
    #   resp.data.source_algorithm_specification.source_algorithms[0].model_data_url #=> String
    #   resp.data.source_algorithm_specification.source_algorithms[0].algorithm_name #=> String
    #   resp.data.validation_specification #=> Types::ModelPackageValidationSpecification
    #   resp.data.validation_specification.validation_role #=> String
    #   resp.data.validation_specification.validation_profiles #=> Array<ModelPackageValidationProfile>
    #   resp.data.validation_specification.validation_profiles[0] #=> Types::ModelPackageValidationProfile
    #   resp.data.validation_specification.validation_profiles[0].profile_name #=> String
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition #=> Types::TransformJobDefinition
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.max_concurrent_transforms #=> Integer
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.max_payload_in_mb #=> Integer
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.batch_strategy #=> String, one of ["MultiRecord", "SingleRecord"]
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.environment #=> Hash<String, String>
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.environment['key'] #=> String
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input #=> Types::TransformInput
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input.data_source #=> Types::TransformDataSource
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input.data_source.s3_data_source #=> Types::TransformS3DataSource
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input.data_source.s3_data_source.s3_data_type #=> String, one of ["ManifestFile", "S3Prefix", "AugmentedManifestFile"]
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input.data_source.s3_data_source.s3_uri #=> String
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input.content_type #=> String
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input.compression_type #=> String, one of ["None", "Gzip"]
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_input.split_type #=> String, one of ["None", "Line", "RecordIO", "TFRecord"]
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_output #=> Types::TransformOutput
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_output.s3_output_path #=> String
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_output.accept #=> String
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_output.assemble_with #=> String, one of ["None", "Line"]
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_output.kms_key_id #=> String
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_resources #=> Types::TransformResources
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_resources.instance_type #=> String, one of ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_resources.instance_count #=> Integer
    #   resp.data.validation_specification.validation_profiles[0].transform_job_definition.transform_resources.volume_kms_key_id #=> String
    #   resp.data.model_package_status #=> String, one of ["Pending", "InProgress", "Completed", "Failed", "Deleting"]
    #   resp.data.model_package_status_details #=> Types::ModelPackageStatusDetails
    #   resp.data.model_package_status_details.validation_statuses #=> Array<ModelPackageStatusItem>
    #   resp.data.model_package_status_details.validation_statuses[0] #=> Types::ModelPackageStatusItem
    #   resp.data.model_package_status_details.validation_statuses[0].name #=> String
    #   resp.data.model_package_status_details.validation_statuses[0].status #=> String, one of ["NotStarted", "InProgress", "Completed", "Failed"]
    #   resp.data.model_package_status_details.validation_statuses[0].failure_reason #=> String
    #   resp.data.model_package_status_details.image_scan_statuses #=> Array<ModelPackageStatusItem>
    #   resp.data.certify_for_marketplace #=> Boolean
    #   resp.data.model_approval_status #=> String, one of ["Approved", "Rejected", "PendingManualApproval"]
    #   resp.data.created_by #=> Types::UserContext
    #   resp.data.created_by.user_profile_arn #=> String
    #   resp.data.created_by.user_profile_name #=> String
    #   resp.data.created_by.domain_id #=> String
    #   resp.data.metadata_properties #=> Types::MetadataProperties
    #   resp.data.metadata_properties.commit_id #=> String
    #   resp.data.metadata_properties.repository #=> String
    #   resp.data.metadata_properties.generated_by #=> String
    #   resp.data.metadata_properties.project_id #=> String
    #   resp.data.model_metrics #=> Types::ModelMetrics
    #   resp.data.model_metrics.model_quality #=> Types::ModelQuality
    #   resp.data.model_metrics.model_quality.statistics #=> Types::MetricsSource
    #   resp.data.model_metrics.model_quality.statistics.content_type #=> String
    #   resp.data.model_metrics.model_quality.statistics.content_digest #=> String
    #   resp.data.model_metrics.model_quality.statistics.s3_uri #=> String
    #   resp.data.model_metrics.model_quality.constraints #=> Types::MetricsSource
    #   resp.data.model_metrics.model_data_quality #=> Types::ModelDataQuality
    #   resp.data.model_metrics.model_data_quality.statistics #=> Types::MetricsSource
    #   resp.data.model_metrics.model_data_quality.constraints #=> Types::MetricsSource
    #   resp.data.model_metrics.bias #=> Types::Bias
    #   resp.data.model_metrics.bias.report #=> Types::MetricsSource
    #   resp.data.model_metrics.bias.pre_training_report #=> Types::MetricsSource
    #   resp.data.model_metrics.bias.post_training_report #=> Types::MetricsSource
    #   resp.data.model_metrics.explainability #=> Types::Explainability
    #   resp.data.model_metrics.explainability.report #=> Types::MetricsSource
    #   resp.data.last_modified_time #=> Time
    #   resp.data.last_modified_by #=> Types::UserContext
    #   resp.data.approval_description #=> String
    #   resp.data.customer_metadata_properties #=> Hash<String, String>
    #   resp.data.customer_metadata_properties['key'] #=> String
    #   resp.data.drift_check_baselines #=> Types::DriftCheckBaselines
    #   resp.data.drift_check_baselines.bias #=> Types::DriftCheckBias
    #   resp.data.drift_check_baselines.bias.config_file #=> Types::FileSource
    #   resp.data.drift_check_baselines.bias.config_file.content_type #=> String
    #   resp.data.drift_check_baselines.bias.config_file.content_digest #=> String
    #   resp.data.drift_check_baselines.bias.config_file.s3_uri #=> String
    #   resp.data.drift_check_baselines.bias.pre_training_constraints #=> Types::MetricsSource
    #   resp.data.drift_check_baselines.bias.post_training_constraints #=> Types::MetricsSource
    #   resp.data.drift_check_baselines.explainability #=> Types::DriftCheckExplainability
    #   resp.data.drift_check_baselines.explainability.constraints #=> Types::MetricsSource
    #   resp.data.drift_check_baselines.explainability.config_file #=> Types::FileSource
    #   resp.data.drift_check_baselines.model_quality #=> Types::DriftCheckModelQuality
    #   resp.data.drift_check_baselines.model_quality.statistics #=> Types::MetricsSource
    #   resp.data.drift_check_baselines.model_quality.constraints #=> Types::MetricsSource
    #   resp.data.drift_check_baselines.model_data_quality #=> Types::DriftCheckModelDataQuality
    #   resp.data.drift_check_baselines.model_data_quality.statistics #=> Types::MetricsSource
    #   resp.data.drift_check_baselines.model_data_quality.constraints #=> Types::MetricsSource
    #   resp.data.domain #=> String
    #   resp.data.task #=> String
    #   resp.data.sample_payload_url #=> String
    #   resp.data.additional_inference_specifications #=> Array<AdditionalInferenceSpecificationDefinition>
    #   resp.data.additional_inference_specifications[0] #=> Types::AdditionalInferenceSpecificationDefinition
    #   resp.data.additional_inference_specifications[0].name #=> String
    #   resp.data.additional_inference_specifications[0].description #=> String
    #   resp.data.additional_inference_specifications[0].containers #=> Array<ModelPackageContainerDefinition>
    #   resp.data.additional_inference_specifications[0].supported_transform_instance_types #=> Array<String>
    #   resp.data.additional_inference_specifications[0].supported_realtime_inference_instance_types #=> Array<String>
    #   resp.data.additional_inference_specifications[0].supported_content_types #=> Array<String>
    #   resp.data.additional_inference_specifications[0].supported_response_mime_types #=> Array<String>
    #
    def describe_model_package(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeModelPackageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeModelPackageInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeModelPackage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeModelPackage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeModelPackage,
        stubs: @stubs,
        params_class: Params::DescribeModelPackageOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_model_package
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a description for the specified model group.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeModelPackageGroupInput}.
    #
    # @option params [String] :model_package_group_name
    #   <p>The name of gthe model group to describe.</p>
    #
    # @return [Types::DescribeModelPackageGroupOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_model_package_group(
    #     model_package_group_name: 'ModelPackageGroupName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeModelPackageGroupOutput
    #   resp.data.model_package_group_name #=> String
    #   resp.data.model_package_group_arn #=> String
    #   resp.data.model_package_group_description #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.created_by #=> Types::UserContext
    #   resp.data.created_by.user_profile_arn #=> String
    #   resp.data.created_by.user_profile_name #=> String
    #   resp.data.created_by.domain_id #=> String
    #   resp.data.model_package_group_status #=> String, one of ["Pending", "InProgress", "Completed", "Failed", "Deleting", "DeleteFailed"]
    #
    def describe_model_package_group(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeModelPackageGroupInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeModelPackageGroupInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeModelPackageGroup
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeModelPackageGroup
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeModelPackageGroup,
        stubs: @stubs,
        params_class: Params::DescribeModelPackageGroupOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_model_package_group
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a description of a model quality job definition.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeModelQualityJobDefinitionInput}.
    #
    # @option params [String] :job_definition_name
    #   <p>The name of the model quality job. The name must be unique within an Amazon Web Services Region in the
    #            Amazon Web Services account.</p>
    #
    # @return [Types::DescribeModelQualityJobDefinitionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_model_quality_job_definition(
    #     job_definition_name: 'JobDefinitionName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeModelQualityJobDefinitionOutput
    #   resp.data.job_definition_arn #=> String
    #   resp.data.job_definition_name #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.model_quality_baseline_config #=> Types::ModelQualityBaselineConfig
    #   resp.data.model_quality_baseline_config.baselining_job_name #=> String
    #   resp.data.model_quality_baseline_config.constraints_resource #=> Types::MonitoringConstraintsResource
    #   resp.data.model_quality_baseline_config.constraints_resource.s3_uri #=> String
    #   resp.data.model_quality_app_specification #=> Types::ModelQualityAppSpecification
    #   resp.data.model_quality_app_specification.image_uri #=> String
    #   resp.data.model_quality_app_specification.container_entrypoint #=> Array<String>
    #   resp.data.model_quality_app_specification.container_entrypoint[0] #=> String
    #   resp.data.model_quality_app_specification.container_arguments #=> Array<String>
    #   resp.data.model_quality_app_specification.container_arguments[0] #=> String
    #   resp.data.model_quality_app_specification.record_preprocessor_source_uri #=> String
    #   resp.data.model_quality_app_specification.post_analytics_processor_source_uri #=> String
    #   resp.data.model_quality_app_specification.problem_type #=> String, one of ["BinaryClassification", "MulticlassClassification", "Regression"]
    #   resp.data.model_quality_app_specification.environment #=> Hash<String, String>
    #   resp.data.model_quality_app_specification.environment['key'] #=> String
    #   resp.data.model_quality_job_input #=> Types::ModelQualityJobInput
    #   resp.data.model_quality_job_input.endpoint_input #=> Types::EndpointInput
    #   resp.data.model_quality_job_input.endpoint_input.endpoint_name #=> String
    #   resp.data.model_quality_job_input.endpoint_input.local_path #=> String
    #   resp.data.model_quality_job_input.endpoint_input.s3_input_mode #=> String, one of ["Pipe", "File"]
    #   resp.data.model_quality_job_input.endpoint_input.s3_data_distribution_type #=> String, one of ["FullyReplicated", "ShardedByS3Key"]
    #   resp.data.model_quality_job_input.endpoint_input.features_attribute #=> String
    #   resp.data.model_quality_job_input.endpoint_input.inference_attribute #=> String
    #   resp.data.model_quality_job_input.endpoint_input.probability_attribute #=> String
    #   resp.data.model_quality_job_input.endpoint_input.probability_threshold_attribute #=> Float
    #   resp.data.model_quality_job_input.endpoint_input.start_time_offset #=> String
    #   resp.data.model_quality_job_input.endpoint_input.end_time_offset #=> String
    #   resp.data.model_quality_job_input.ground_truth_s3_input #=> Types::MonitoringGroundTruthS3Input
    #   resp.data.model_quality_job_input.ground_truth_s3_input.s3_uri #=> String
    #   resp.data.model_quality_job_output_config #=> Types::MonitoringOutputConfig
    #   resp.data.model_quality_job_output_config.monitoring_outputs #=> Array<MonitoringOutput>
    #   resp.data.model_quality_job_output_config.monitoring_outputs[0] #=> Types::MonitoringOutput
    #   resp.data.model_quality_job_output_config.monitoring_outputs[0].s3_output #=> Types::MonitoringS3Output
    #   resp.data.model_quality_job_output_config.monitoring_outputs[0].s3_output.s3_uri #=> String
    #   resp.data.model_quality_job_output_config.monitoring_outputs[0].s3_output.local_path #=> String
    #   resp.data.model_quality_job_output_config.monitoring_outputs[0].s3_output.s3_upload_mode #=> String, one of ["Continuous", "EndOfJob"]
    #   resp.data.model_quality_job_output_config.kms_key_id #=> String
    #   resp.data.job_resources #=> Types::MonitoringResources
    #   resp.data.job_resources.cluster_config #=> Types::MonitoringClusterConfig
    #   resp.data.job_resources.cluster_config.instance_count #=> Integer
    #   resp.data.job_resources.cluster_config.instance_type #=> String, one of ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.job_resources.cluster_config.volume_size_in_gb #=> Integer
    #   resp.data.job_resources.cluster_config.volume_kms_key_id #=> String
    #   resp.data.network_config #=> Types::MonitoringNetworkConfig
    #   resp.data.network_config.enable_inter_container_traffic_encryption #=> Boolean
    #   resp.data.network_config.enable_network_isolation #=> Boolean
    #   resp.data.network_config.vpc_config #=> Types::VpcConfig
    #   resp.data.network_config.vpc_config.security_group_ids #=> Array<String>
    #   resp.data.network_config.vpc_config.security_group_ids[0] #=> String
    #   resp.data.network_config.vpc_config.subnets #=> Array<String>
    #   resp.data.network_config.vpc_config.subnets[0] #=> String
    #   resp.data.role_arn #=> String
    #   resp.data.stopping_condition #=> Types::MonitoringStoppingCondition
    #   resp.data.stopping_condition.max_runtime_in_seconds #=> Integer
    #
    def describe_model_quality_job_definition(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeModelQualityJobDefinitionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeModelQualityJobDefinitionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeModelQualityJobDefinition
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeModelQualityJobDefinition
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeModelQualityJobDefinition,
        stubs: @stubs,
        params_class: Params::DescribeModelQualityJobDefinitionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_model_quality_job_definition
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the schedule for a monitoring job.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeMonitoringScheduleInput}.
    #
    # @option params [String] :monitoring_schedule_name
    #   <p>Name of a previously created monitoring schedule.</p>
    #
    # @return [Types::DescribeMonitoringScheduleOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_monitoring_schedule(
    #     monitoring_schedule_name: 'MonitoringScheduleName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeMonitoringScheduleOutput
    #   resp.data.monitoring_schedule_arn #=> String
    #   resp.data.monitoring_schedule_name #=> String
    #   resp.data.monitoring_schedule_status #=> String, one of ["Pending", "Failed", "Scheduled", "Stopped"]
    #   resp.data.monitoring_type #=> String, one of ["DataQuality", "ModelQuality", "ModelBias", "ModelExplainability"]
    #   resp.data.failure_reason #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.monitoring_schedule_config #=> Types::MonitoringScheduleConfig
    #   resp.data.monitoring_schedule_config.schedule_config #=> Types::ScheduleConfig
    #   resp.data.monitoring_schedule_config.schedule_config.schedule_expression #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition #=> Types::MonitoringJobDefinition
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.baseline_config #=> Types::MonitoringBaselineConfig
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.baseline_config.baselining_job_name #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.baseline_config.constraints_resource #=> Types::MonitoringConstraintsResource
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.baseline_config.constraints_resource.s3_uri #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.baseline_config.statistics_resource #=> Types::MonitoringStatisticsResource
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.baseline_config.statistics_resource.s3_uri #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_inputs #=> Array<MonitoringInput>
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0] #=> Types::MonitoringInput
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input #=> Types::EndpointInput
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.endpoint_name #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.local_path #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.s3_input_mode #=> String, one of ["Pipe", "File"]
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.s3_data_distribution_type #=> String, one of ["FullyReplicated", "ShardedByS3Key"]
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.features_attribute #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.inference_attribute #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.probability_attribute #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.probability_threshold_attribute #=> Float
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.start_time_offset #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.end_time_offset #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_output_config #=> Types::MonitoringOutputConfig
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_output_config.monitoring_outputs #=> Array<MonitoringOutput>
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_output_config.monitoring_outputs[0] #=> Types::MonitoringOutput
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_output_config.monitoring_outputs[0].s3_output #=> Types::MonitoringS3Output
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_output_config.monitoring_outputs[0].s3_output.s3_uri #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_output_config.monitoring_outputs[0].s3_output.local_path #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_output_config.monitoring_outputs[0].s3_output.s3_upload_mode #=> String, one of ["Continuous", "EndOfJob"]
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_output_config.kms_key_id #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_resources #=> Types::MonitoringResources
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_resources.cluster_config #=> Types::MonitoringClusterConfig
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_resources.cluster_config.instance_count #=> Integer
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_resources.cluster_config.instance_type #=> String, one of ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_resources.cluster_config.volume_size_in_gb #=> Integer
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_resources.cluster_config.volume_kms_key_id #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_app_specification #=> Types::MonitoringAppSpecification
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_app_specification.image_uri #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_app_specification.container_entrypoint #=> Array<String>
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_app_specification.container_entrypoint[0] #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_app_specification.container_arguments #=> Array<String>
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_app_specification.container_arguments[0] #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_app_specification.record_preprocessor_source_uri #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.monitoring_app_specification.post_analytics_processor_source_uri #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.stopping_condition #=> Types::MonitoringStoppingCondition
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.stopping_condition.max_runtime_in_seconds #=> Integer
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.environment #=> Hash<String, String>
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.environment['key'] #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.network_config #=> Types::NetworkConfig
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.network_config.enable_inter_container_traffic_encryption #=> Boolean
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.network_config.enable_network_isolation #=> Boolean
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.network_config.vpc_config #=> Types::VpcConfig
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.network_config.vpc_config.security_group_ids #=> Array<String>
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.network_config.vpc_config.security_group_ids[0] #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.network_config.vpc_config.subnets #=> Array<String>
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.network_config.vpc_config.subnets[0] #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition.role_arn #=> String
    #   resp.data.monitoring_schedule_config.monitoring_job_definition_name #=> String
    #   resp.data.monitoring_schedule_config.monitoring_type #=> String, one of ["DataQuality", "ModelQuality", "ModelBias", "ModelExplainability"]
    #   resp.data.endpoint_name #=> String
    #   resp.data.last_monitoring_execution_summary #=> Types::MonitoringExecutionSummary
    #   resp.data.last_monitoring_execution_summary.monitoring_schedule_name #=> String
    #   resp.data.last_monitoring_execution_summary.scheduled_time #=> Time
    #   resp.data.last_monitoring_execution_summary.creation_time #=> Time
    #   resp.data.last_monitoring_execution_summary.last_modified_time #=> Time
    #   resp.data.last_monitoring_execution_summary.monitoring_execution_status #=> String, one of ["Pending", "Completed", "CompletedWithViolations", "InProgress", "Failed", "Stopping", "Stopped"]
    #   resp.data.last_monitoring_execution_summary.processing_job_arn #=> String
    #   resp.data.last_monitoring_execution_summary.endpoint_name #=> String
    #   resp.data.last_monitoring_execution_summary.failure_reason #=> String
    #   resp.data.last_monitoring_execution_summary.monitoring_job_definition_name #=> String
    #   resp.data.last_monitoring_execution_summary.monitoring_type #=> String, one of ["DataQuality", "ModelQuality", "ModelBias", "ModelExplainability"]
    #
    def describe_monitoring_schedule(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeMonitoringScheduleInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeMonitoringScheduleInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeMonitoringSchedule
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeMonitoringSchedule
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeMonitoringSchedule,
        stubs: @stubs,
        params_class: Params::DescribeMonitoringScheduleOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_monitoring_schedule
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about a notebook instance.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeNotebookInstanceInput}.
    #
    # @option params [String] :notebook_instance_name
    #   <p>The name of the notebook instance that you want information about.</p>
    #
    # @return [Types::DescribeNotebookInstanceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_notebook_instance(
    #     notebook_instance_name: 'NotebookInstanceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeNotebookInstanceOutput
    #   resp.data.notebook_instance_arn #=> String
    #   resp.data.notebook_instance_name #=> String
    #   resp.data.notebook_instance_status #=> String, one of ["Pending", "InService", "Stopping", "Stopped", "Failed", "Deleting", "Updating"]
    #   resp.data.failure_reason #=> String
    #   resp.data.url #=> String
    #   resp.data.instance_type #=> String, one of ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.8xlarge", "ml.m5d.12xlarge", "ml.m5d.16xlarge", "ml.m5d.24xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #   resp.data.subnet_id #=> String
    #   resp.data.security_groups #=> Array<String>
    #   resp.data.security_groups[0] #=> String
    #   resp.data.role_arn #=> String
    #   resp.data.kms_key_id #=> String
    #   resp.data.network_interface_id #=> String
    #   resp.data.last_modified_time #=> Time
    #   resp.data.creation_time #=> Time
    #   resp.data.notebook_instance_lifecycle_config_name #=> String
    #   resp.data.direct_internet_access #=> String, one of ["Enabled", "Disabled"]
    #   resp.data.volume_size_in_gb #=> Integer
    #   resp.data.accelerator_types #=> Array<String>
    #   resp.data.accelerator_types[0] #=> String, one of ["ml.eia1.medium", "ml.eia1.large", "ml.eia1.xlarge", "ml.eia2.medium", "ml.eia2.large", "ml.eia2.xlarge"]
    #   resp.data.default_code_repository #=> String
    #   resp.data.additional_code_repositories #=> Array<String>
    #   resp.data.additional_code_repositories[0] #=> String
    #   resp.data.root_access #=> String, one of ["Enabled", "Disabled"]
    #   resp.data.platform_identifier #=> String
    #   resp.data.instance_metadata_service_configuration #=> Types::InstanceMetadataServiceConfiguration
    #   resp.data.instance_metadata_service_configuration.minimum_instance_metadata_service_version #=> String
    #
    def describe_notebook_instance(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeNotebookInstanceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeNotebookInstanceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeNotebookInstance
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeNotebookInstance
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeNotebookInstance,
        stubs: @stubs,
        params_class: Params::DescribeNotebookInstanceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_notebook_instance
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a description of a notebook instance lifecycle configuration.</p>
    #         <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step
    #                 2.1: (Optional) Customize a Notebook Instance</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeNotebookInstanceLifecycleConfigInput}.
    #
    # @option params [String] :notebook_instance_lifecycle_config_name
    #   <p>The name of the lifecycle configuration to describe.</p>
    #
    # @return [Types::DescribeNotebookInstanceLifecycleConfigOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_notebook_instance_lifecycle_config(
    #     notebook_instance_lifecycle_config_name: 'NotebookInstanceLifecycleConfigName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeNotebookInstanceLifecycleConfigOutput
    #   resp.data.notebook_instance_lifecycle_config_arn #=> String
    #   resp.data.notebook_instance_lifecycle_config_name #=> String
    #   resp.data.on_create #=> Array<NotebookInstanceLifecycleHook>
    #   resp.data.on_create[0] #=> Types::NotebookInstanceLifecycleHook
    #   resp.data.on_create[0].content #=> String
    #   resp.data.on_start #=> Array<NotebookInstanceLifecycleHook>
    #   resp.data.last_modified_time #=> Time
    #   resp.data.creation_time #=> Time
    #
    def describe_notebook_instance_lifecycle_config(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeNotebookInstanceLifecycleConfigInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeNotebookInstanceLifecycleConfigInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeNotebookInstanceLifecycleConfig
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeNotebookInstanceLifecycleConfig
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeNotebookInstanceLifecycleConfig,
        stubs: @stubs,
        params_class: Params::DescribeNotebookInstanceLifecycleConfigOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_notebook_instance_lifecycle_config
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the details of a pipeline.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribePipelineInput}.
    #
    # @option params [String] :pipeline_name
    #   <p>The name of the pipeline to describe.</p>
    #
    # @return [Types::DescribePipelineOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_pipeline(
    #     pipeline_name: 'PipelineName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribePipelineOutput
    #   resp.data.pipeline_arn #=> String
    #   resp.data.pipeline_name #=> String
    #   resp.data.pipeline_display_name #=> String
    #   resp.data.pipeline_definition #=> String
    #   resp.data.pipeline_description #=> String
    #   resp.data.role_arn #=> String
    #   resp.data.pipeline_status #=> String, one of ["Active"]
    #   resp.data.creation_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.last_run_time #=> Time
    #   resp.data.created_by #=> Types::UserContext
    #   resp.data.created_by.user_profile_arn #=> String
    #   resp.data.created_by.user_profile_name #=> String
    #   resp.data.created_by.domain_id #=> String
    #   resp.data.last_modified_by #=> Types::UserContext
    #   resp.data.parallelism_configuration #=> Types::ParallelismConfiguration
    #   resp.data.parallelism_configuration.max_parallel_execution_steps #=> Integer
    #
    def describe_pipeline(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribePipelineInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribePipelineInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribePipeline
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribePipeline
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribePipeline,
        stubs: @stubs,
        params_class: Params::DescribePipelineOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_pipeline
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the details of an execution's pipeline definition.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribePipelineDefinitionForExecutionInput}.
    #
    # @option params [String] :pipeline_execution_arn
    #   <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    #
    # @return [Types::DescribePipelineDefinitionForExecutionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_pipeline_definition_for_execution(
    #     pipeline_execution_arn: 'PipelineExecutionArn' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribePipelineDefinitionForExecutionOutput
    #   resp.data.pipeline_definition #=> String
    #   resp.data.creation_time #=> Time
    #
    def describe_pipeline_definition_for_execution(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribePipelineDefinitionForExecutionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribePipelineDefinitionForExecutionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribePipelineDefinitionForExecution
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribePipelineDefinitionForExecution
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribePipelineDefinitionForExecution,
        stubs: @stubs,
        params_class: Params::DescribePipelineDefinitionForExecutionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_pipeline_definition_for_execution
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the details of a pipeline execution.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribePipelineExecutionInput}.
    #
    # @option params [String] :pipeline_execution_arn
    #   <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    #
    # @return [Types::DescribePipelineExecutionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_pipeline_execution(
    #     pipeline_execution_arn: 'PipelineExecutionArn' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribePipelineExecutionOutput
    #   resp.data.pipeline_arn #=> String
    #   resp.data.pipeline_execution_arn #=> String
    #   resp.data.pipeline_execution_display_name #=> String
    #   resp.data.pipeline_execution_status #=> String, one of ["Executing", "Stopping", "Stopped", "Failed", "Succeeded"]
    #   resp.data.pipeline_execution_description #=> String
    #   resp.data.pipeline_experiment_config #=> Types::PipelineExperimentConfig
    #   resp.data.pipeline_experiment_config.experiment_name #=> String
    #   resp.data.pipeline_experiment_config.trial_name #=> String
    #   resp.data.failure_reason #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.created_by #=> Types::UserContext
    #   resp.data.created_by.user_profile_arn #=> String
    #   resp.data.created_by.user_profile_name #=> String
    #   resp.data.created_by.domain_id #=> String
    #   resp.data.last_modified_by #=> Types::UserContext
    #   resp.data.parallelism_configuration #=> Types::ParallelismConfiguration
    #   resp.data.parallelism_configuration.max_parallel_execution_steps #=> Integer
    #
    def describe_pipeline_execution(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribePipelineExecutionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribePipelineExecutionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribePipelineExecution
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribePipelineExecution
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribePipelineExecution,
        stubs: @stubs,
        params_class: Params::DescribePipelineExecutionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_pipeline_execution
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a description of a processing job.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeProcessingJobInput}.
    #
    # @option params [String] :processing_job_name
    #   <p>The name of the processing job. The name must be unique within an Amazon Web Services Region in the
    #               Amazon Web Services account.</p>
    #
    # @return [Types::DescribeProcessingJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_processing_job(
    #     processing_job_name: 'ProcessingJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeProcessingJobOutput
    #   resp.data.processing_inputs #=> Array<ProcessingInput>
    #   resp.data.processing_inputs[0] #=> Types::ProcessingInput
    #   resp.data.processing_inputs[0].input_name #=> String
    #   resp.data.processing_inputs[0].app_managed #=> Boolean
    #   resp.data.processing_inputs[0].s3_input #=> Types::ProcessingS3Input
    #   resp.data.processing_inputs[0].s3_input.s3_uri #=> String
    #   resp.data.processing_inputs[0].s3_input.local_path #=> String
    #   resp.data.processing_inputs[0].s3_input.s3_data_type #=> String, one of ["ManifestFile", "S3Prefix"]
    #   resp.data.processing_inputs[0].s3_input.s3_input_mode #=> String, one of ["Pipe", "File"]
    #   resp.data.processing_inputs[0].s3_input.s3_data_distribution_type #=> String, one of ["FullyReplicated", "ShardedByS3Key"]
    #   resp.data.processing_inputs[0].s3_input.s3_compression_type #=> String, one of ["None", "Gzip"]
    #   resp.data.processing_inputs[0].dataset_definition #=> Types::DatasetDefinition
    #   resp.data.processing_inputs[0].dataset_definition.athena_dataset_definition #=> Types::AthenaDatasetDefinition
    #   resp.data.processing_inputs[0].dataset_definition.athena_dataset_definition.catalog #=> String
    #   resp.data.processing_inputs[0].dataset_definition.athena_dataset_definition.database #=> String
    #   resp.data.processing_inputs[0].dataset_definition.athena_dataset_definition.query_string #=> String
    #   resp.data.processing_inputs[0].dataset_definition.athena_dataset_definition.work_group #=> String
    #   resp.data.processing_inputs[0].dataset_definition.athena_dataset_definition.output_s3_uri #=> String
    #   resp.data.processing_inputs[0].dataset_definition.athena_dataset_definition.kms_key_id #=> String
    #   resp.data.processing_inputs[0].dataset_definition.athena_dataset_definition.output_format #=> String, one of ["PARQUET", "ORC", "AVRO", "JSON", "TEXTFILE"]
    #   resp.data.processing_inputs[0].dataset_definition.athena_dataset_definition.output_compression #=> String, one of ["GZIP", "SNAPPY", "ZLIB"]
    #   resp.data.processing_inputs[0].dataset_definition.redshift_dataset_definition #=> Types::RedshiftDatasetDefinition
    #   resp.data.processing_inputs[0].dataset_definition.redshift_dataset_definition.cluster_id #=> String
    #   resp.data.processing_inputs[0].dataset_definition.redshift_dataset_definition.database #=> String
    #   resp.data.processing_inputs[0].dataset_definition.redshift_dataset_definition.db_user #=> String
    #   resp.data.processing_inputs[0].dataset_definition.redshift_dataset_definition.query_string #=> String
    #   resp.data.processing_inputs[0].dataset_definition.redshift_dataset_definition.cluster_role_arn #=> String
    #   resp.data.processing_inputs[0].dataset_definition.redshift_dataset_definition.output_s3_uri #=> String
    #   resp.data.processing_inputs[0].dataset_definition.redshift_dataset_definition.kms_key_id #=> String
    #   resp.data.processing_inputs[0].dataset_definition.redshift_dataset_definition.output_format #=> String, one of ["PARQUET", "CSV"]
    #   resp.data.processing_inputs[0].dataset_definition.redshift_dataset_definition.output_compression #=> String, one of ["None", "GZIP", "BZIP2", "ZSTD", "SNAPPY"]
    #   resp.data.processing_inputs[0].dataset_definition.local_path #=> String
    #   resp.data.processing_inputs[0].dataset_definition.data_distribution_type #=> String, one of ["FullyReplicated", "ShardedByS3Key"]
    #   resp.data.processing_inputs[0].dataset_definition.input_mode #=> String, one of ["Pipe", "File"]
    #   resp.data.processing_output_config #=> Types::ProcessingOutputConfig
    #   resp.data.processing_output_config.outputs #=> Array<ProcessingOutput>
    #   resp.data.processing_output_config.outputs[0] #=> Types::ProcessingOutput
    #   resp.data.processing_output_config.outputs[0].output_name #=> String
    #   resp.data.processing_output_config.outputs[0].s3_output #=> Types::ProcessingS3Output
    #   resp.data.processing_output_config.outputs[0].s3_output.s3_uri #=> String
    #   resp.data.processing_output_config.outputs[0].s3_output.local_path #=> String
    #   resp.data.processing_output_config.outputs[0].s3_output.s3_upload_mode #=> String, one of ["Continuous", "EndOfJob"]
    #   resp.data.processing_output_config.outputs[0].feature_store_output #=> Types::ProcessingFeatureStoreOutput
    #   resp.data.processing_output_config.outputs[0].feature_store_output.feature_group_name #=> String
    #   resp.data.processing_output_config.outputs[0].app_managed #=> Boolean
    #   resp.data.processing_output_config.kms_key_id #=> String
    #   resp.data.processing_job_name #=> String
    #   resp.data.processing_resources #=> Types::ProcessingResources
    #   resp.data.processing_resources.cluster_config #=> Types::ProcessingClusterConfig
    #   resp.data.processing_resources.cluster_config.instance_count #=> Integer
    #   resp.data.processing_resources.cluster_config.instance_type #=> String, one of ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.processing_resources.cluster_config.volume_size_in_gb #=> Integer
    #   resp.data.processing_resources.cluster_config.volume_kms_key_id #=> String
    #   resp.data.stopping_condition #=> Types::ProcessingStoppingCondition
    #   resp.data.stopping_condition.max_runtime_in_seconds #=> Integer
    #   resp.data.app_specification #=> Types::AppSpecification
    #   resp.data.app_specification.image_uri #=> String
    #   resp.data.app_specification.container_entrypoint #=> Array<String>
    #   resp.data.app_specification.container_entrypoint[0] #=> String
    #   resp.data.app_specification.container_arguments #=> Array<String>
    #   resp.data.app_specification.container_arguments[0] #=> String
    #   resp.data.environment #=> Hash<String, String>
    #   resp.data.environment['key'] #=> String
    #   resp.data.network_config #=> Types::NetworkConfig
    #   resp.data.network_config.enable_inter_container_traffic_encryption #=> Boolean
    #   resp.data.network_config.enable_network_isolation #=> Boolean
    #   resp.data.network_config.vpc_config #=> Types::VpcConfig
    #   resp.data.network_config.vpc_config.security_group_ids #=> Array<String>
    #   resp.data.network_config.vpc_config.security_group_ids[0] #=> String
    #   resp.data.network_config.vpc_config.subnets #=> Array<String>
    #   resp.data.network_config.vpc_config.subnets[0] #=> String
    #   resp.data.role_arn #=> String
    #   resp.data.experiment_config #=> Types::ExperimentConfig
    #   resp.data.experiment_config.experiment_name #=> String
    #   resp.data.experiment_config.trial_name #=> String
    #   resp.data.experiment_config.trial_component_display_name #=> String
    #   resp.data.processing_job_arn #=> String
    #   resp.data.processing_job_status #=> String, one of ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.exit_message #=> String
    #   resp.data.failure_reason #=> String
    #   resp.data.processing_end_time #=> Time
    #   resp.data.processing_start_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.creation_time #=> Time
    #   resp.data.monitoring_schedule_arn #=> String
    #   resp.data.auto_ml_job_arn #=> String
    #   resp.data.training_job_arn #=> String
    #
    def describe_processing_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeProcessingJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeProcessingJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeProcessingJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeProcessingJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeProcessingJob,
        stubs: @stubs,
        params_class: Params::DescribeProcessingJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_processing_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the details of a project.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeProjectInput}.
    #
    # @option params [String] :project_name
    #   <p>The name of the project to describe.</p>
    #
    # @return [Types::DescribeProjectOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_project(
    #     project_name: 'ProjectName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeProjectOutput
    #   resp.data.project_arn #=> String
    #   resp.data.project_name #=> String
    #   resp.data.project_id #=> String
    #   resp.data.project_description #=> String
    #   resp.data.service_catalog_provisioning_details #=> Types::ServiceCatalogProvisioningDetails
    #   resp.data.service_catalog_provisioning_details.product_id #=> String
    #   resp.data.service_catalog_provisioning_details.provisioning_artifact_id #=> String
    #   resp.data.service_catalog_provisioning_details.path_id #=> String
    #   resp.data.service_catalog_provisioning_details.provisioning_parameters #=> Array<ProvisioningParameter>
    #   resp.data.service_catalog_provisioning_details.provisioning_parameters[0] #=> Types::ProvisioningParameter
    #   resp.data.service_catalog_provisioning_details.provisioning_parameters[0].key #=> String
    #   resp.data.service_catalog_provisioning_details.provisioning_parameters[0].value #=> String
    #   resp.data.service_catalog_provisioned_product_details #=> Types::ServiceCatalogProvisionedProductDetails
    #   resp.data.service_catalog_provisioned_product_details.provisioned_product_id #=> String
    #   resp.data.service_catalog_provisioned_product_details.provisioned_product_status_message #=> String
    #   resp.data.project_status #=> String, one of ["Pending", "CreateInProgress", "CreateCompleted", "CreateFailed", "DeleteInProgress", "DeleteFailed", "DeleteCompleted", "UpdateInProgress", "UpdateCompleted", "UpdateFailed"]
    #   resp.data.created_by #=> Types::UserContext
    #   resp.data.created_by.user_profile_arn #=> String
    #   resp.data.created_by.user_profile_name #=> String
    #   resp.data.created_by.domain_id #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.last_modified_by #=> Types::UserContext
    #
    def describe_project(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeProjectInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeProjectInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeProject
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeProject
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeProject,
        stubs: @stubs,
        params_class: Params::DescribeProjectOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_project
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the Studio Lifecycle Configuration.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeStudioLifecycleConfigInput}.
    #
    # @option params [String] :studio_lifecycle_config_name
    #   <p>The name of the Studio Lifecycle Configuration to describe.</p>
    #
    # @return [Types::DescribeStudioLifecycleConfigOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_studio_lifecycle_config(
    #     studio_lifecycle_config_name: 'StudioLifecycleConfigName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeStudioLifecycleConfigOutput
    #   resp.data.studio_lifecycle_config_arn #=> String
    #   resp.data.studio_lifecycle_config_name #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.studio_lifecycle_config_content #=> String
    #   resp.data.studio_lifecycle_config_app_type #=> String, one of ["JupyterServer", "KernelGateway"]
    #
    def describe_studio_lifecycle_config(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeStudioLifecycleConfigInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeStudioLifecycleConfigInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeStudioLifecycleConfig
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeStudioLifecycleConfig
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeStudioLifecycleConfig,
        stubs: @stubs,
        params_class: Params::DescribeStudioLifecycleConfigOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_studio_lifecycle_config
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets information about a work team provided by a vendor. It returns details about the
    #             subscription with a vendor in the Amazon Web Services Marketplace.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeSubscribedWorkteamInput}.
    #
    # @option params [String] :workteam_arn
    #   <p>The Amazon Resource Name (ARN) of the subscribed work team to describe.</p>
    #
    # @return [Types::DescribeSubscribedWorkteamOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_subscribed_workteam(
    #     workteam_arn: 'WorkteamArn' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeSubscribedWorkteamOutput
    #   resp.data.subscribed_workteam #=> Types::SubscribedWorkteam
    #   resp.data.subscribed_workteam.workteam_arn #=> String
    #   resp.data.subscribed_workteam.marketplace_title #=> String
    #   resp.data.subscribed_workteam.seller_name #=> String
    #   resp.data.subscribed_workteam.marketplace_description #=> String
    #   resp.data.subscribed_workteam.listing_id #=> String
    #
    def describe_subscribed_workteam(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeSubscribedWorkteamInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeSubscribedWorkteamInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeSubscribedWorkteam
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeSubscribedWorkteam
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeSubscribedWorkteam,
        stubs: @stubs,
        params_class: Params::DescribeSubscribedWorkteamOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_subscribed_workteam
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about a training job. </p>
    #         <p>Some of the attributes below only appear if the training job successfully starts.
    #             If the training job fails, <code>TrainingJobStatus</code> is <code>Failed</code> and,
    #             depending on the <code>FailureReason</code>, attributes like
    #                 <code>TrainingStartTime</code>, <code>TrainingTimeInSeconds</code>,
    #                 <code>TrainingEndTime</code>, and <code>BillableTimeInSeconds</code> may not be
    #             present in the response.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTrainingJobInput}.
    #
    # @option params [String] :training_job_name
    #   <p>The name of the training job.</p>
    #
    # @return [Types::DescribeTrainingJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_training_job(
    #     training_job_name: 'TrainingJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTrainingJobOutput
    #   resp.data.training_job_name #=> String
    #   resp.data.training_job_arn #=> String
    #   resp.data.tuning_job_arn #=> String
    #   resp.data.labeling_job_arn #=> String
    #   resp.data.auto_ml_job_arn #=> String
    #   resp.data.model_artifacts #=> Types::ModelArtifacts
    #   resp.data.model_artifacts.s3_model_artifacts #=> String
    #   resp.data.training_job_status #=> String, one of ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.secondary_status #=> String, one of ["Starting", "LaunchingMLInstances", "PreparingTrainingStack", "Downloading", "DownloadingTrainingImage", "Training", "Uploading", "Stopping", "Stopped", "MaxRuntimeExceeded", "Completed", "Failed", "Interrupted", "MaxWaitTimeExceeded", "Updating", "Restarting"]
    #   resp.data.failure_reason #=> String
    #   resp.data.hyper_parameters #=> Hash<String, String>
    #   resp.data.hyper_parameters['key'] #=> String
    #   resp.data.algorithm_specification #=> Types::AlgorithmSpecification
    #   resp.data.algorithm_specification.training_image #=> String
    #   resp.data.algorithm_specification.algorithm_name #=> String
    #   resp.data.algorithm_specification.training_input_mode #=> String, one of ["Pipe", "File", "FastFile"]
    #   resp.data.algorithm_specification.metric_definitions #=> Array<MetricDefinition>
    #   resp.data.algorithm_specification.metric_definitions[0] #=> Types::MetricDefinition
    #   resp.data.algorithm_specification.metric_definitions[0].name #=> String
    #   resp.data.algorithm_specification.metric_definitions[0].regex #=> String
    #   resp.data.algorithm_specification.enable_sage_maker_metrics_time_series #=> Boolean
    #   resp.data.role_arn #=> String
    #   resp.data.input_data_config #=> Array<Channel>
    #   resp.data.input_data_config[0] #=> Types::Channel
    #   resp.data.input_data_config[0].channel_name #=> String
    #   resp.data.input_data_config[0].data_source #=> Types::DataSource
    #   resp.data.input_data_config[0].data_source.s3_data_source #=> Types::S3DataSource
    #   resp.data.input_data_config[0].data_source.s3_data_source.s3_data_type #=> String, one of ["ManifestFile", "S3Prefix", "AugmentedManifestFile"]
    #   resp.data.input_data_config[0].data_source.s3_data_source.s3_uri #=> String
    #   resp.data.input_data_config[0].data_source.s3_data_source.s3_data_distribution_type #=> String, one of ["FullyReplicated", "ShardedByS3Key"]
    #   resp.data.input_data_config[0].data_source.s3_data_source.attribute_names #=> Array<String>
    #   resp.data.input_data_config[0].data_source.s3_data_source.attribute_names[0] #=> String
    #   resp.data.input_data_config[0].data_source.file_system_data_source #=> Types::FileSystemDataSource
    #   resp.data.input_data_config[0].data_source.file_system_data_source.file_system_id #=> String
    #   resp.data.input_data_config[0].data_source.file_system_data_source.file_system_access_mode #=> String, one of ["rw", "ro"]
    #   resp.data.input_data_config[0].data_source.file_system_data_source.file_system_type #=> String, one of ["EFS", "FSxLustre"]
    #   resp.data.input_data_config[0].data_source.file_system_data_source.directory_path #=> String
    #   resp.data.input_data_config[0].content_type #=> String
    #   resp.data.input_data_config[0].compression_type #=> String, one of ["None", "Gzip"]
    #   resp.data.input_data_config[0].record_wrapper_type #=> String, one of ["None", "RecordIO"]
    #   resp.data.input_data_config[0].input_mode #=> String, one of ["Pipe", "File", "FastFile"]
    #   resp.data.input_data_config[0].shuffle_config #=> Types::ShuffleConfig
    #   resp.data.input_data_config[0].shuffle_config.seed #=> Integer
    #   resp.data.output_data_config #=> Types::OutputDataConfig
    #   resp.data.output_data_config.kms_key_id #=> String
    #   resp.data.output_data_config.s3_output_path #=> String
    #   resp.data.resource_config #=> Types::ResourceConfig
    #   resp.data.resource_config.instance_type #=> String, one of ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.p4d.24xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5n.xlarge", "ml.c5n.2xlarge", "ml.c5n.4xlarge", "ml.c5n.9xlarge", "ml.c5n.18xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #   resp.data.resource_config.instance_count #=> Integer
    #   resp.data.resource_config.volume_size_in_gb #=> Integer
    #   resp.data.resource_config.volume_kms_key_id #=> String
    #   resp.data.vpc_config #=> Types::VpcConfig
    #   resp.data.vpc_config.security_group_ids #=> Array<String>
    #   resp.data.vpc_config.security_group_ids[0] #=> String
    #   resp.data.vpc_config.subnets #=> Array<String>
    #   resp.data.vpc_config.subnets[0] #=> String
    #   resp.data.stopping_condition #=> Types::StoppingCondition
    #   resp.data.stopping_condition.max_runtime_in_seconds #=> Integer
    #   resp.data.stopping_condition.max_wait_time_in_seconds #=> Integer
    #   resp.data.creation_time #=> Time
    #   resp.data.training_start_time #=> Time
    #   resp.data.training_end_time #=> Time
    #   resp.data.last_modified_time #=> Time
    #   resp.data.secondary_status_transitions #=> Array<SecondaryStatusTransition>
    #   resp.data.secondary_status_transitions[0] #=> Types::SecondaryStatusTransition
    #   resp.data.secondary_status_transitions[0].status #=> String, one of ["Starting", "LaunchingMLInstances", "PreparingTrainingStack", "Downloading", "DownloadingTrainingImage", "Training", "Uploading", "Stopping", "Stopped", "MaxRuntimeExceeded", "Completed", "Failed", "Interrupted", "MaxWaitTimeExceeded", "Updating", "Restarting"]
    #   resp.data.secondary_status_transitions[0].start_time #=> Time
    #   resp.data.secondary_status_transitions[0].end_time #=> Time
    #   resp.data.secondary_status_transitions[0].status_message #=> String
    #   resp.data.final_metric_data_list #=> Array<MetricData>
    #   resp.data.final_metric_data_list[0] #=> Types::MetricData
    #   resp.data.final_metric_data_list[0].metric_name #=> String
    #   resp.data.final_metric_data_list[0].value #=> Float
    #   resp.data.final_metric_data_list[0].timestamp #=> Time
    #   resp.data.enable_network_isolation #=> Boolean
    #   resp.data.enable_inter_container_traffic_encryption #=> Boolean
    #   resp.data.enable_managed_spot_training #=> Boolean
    #   resp.data.checkpoint_config #=> Types::CheckpointConfig
    #   resp.data.checkpoint_config.s3_uri #=> String
    #   resp.data.checkpoint_config.local_path #=> String
    #   resp.data.training_time_in_seconds #=> Integer
    #   resp.data.billable_time_in_seconds #=> Integer
    #   resp.data.debug_hook_config #=> Types::DebugHookConfig
    #   resp.data.debug_hook_config.local_path #=> String
    #   resp.data.debug_hook_config.s3_output_path #=> String
    #   resp.data.debug_hook_config.hook_parameters #=> Hash<String, String>
    #   resp.data.debug_hook_config.hook_parameters['key'] #=> String
    #   resp.data.debug_hook_config.collection_configurations #=> Array<CollectionConfiguration>
    #   resp.data.debug_hook_config.collection_configurations[0] #=> Types::CollectionConfiguration
    #   resp.data.debug_hook_config.collection_configurations[0].collection_name #=> String
    #   resp.data.debug_hook_config.collection_configurations[0].collection_parameters #=> Hash<String, String>
    #   resp.data.debug_hook_config.collection_configurations[0].collection_parameters['key'] #=> String
    #   resp.data.experiment_config #=> Types::ExperimentConfig
    #   resp.data.experiment_config.experiment_name #=> String
    #   resp.data.experiment_config.trial_name #=> String
    #   resp.data.experiment_config.trial_component_display_name #=> String
    #   resp.data.debug_rule_configurations #=> Array<DebugRuleConfiguration>
    #   resp.data.debug_rule_configurations[0] #=> Types::DebugRuleConfiguration
    #   resp.data.debug_rule_configurations[0].rule_configuration_name #=> String
    #   resp.data.debug_rule_configurations[0].local_path #=> String
    #   resp.data.debug_rule_configurations[0].s3_output_path #=> String
    #   resp.data.debug_rule_configurations[0].rule_evaluator_image #=> String
    #   resp.data.debug_rule_configurations[0].instance_type #=> String, one of ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.debug_rule_configurations[0].volume_size_in_gb #=> Integer
    #   resp.data.debug_rule_configurations[0].rule_parameters #=> Hash<String, String>
    #   resp.data.debug_rule_configurations[0].rule_parameters['key'] #=> String
    #   resp.data.tensor_board_output_config #=> Types::TensorBoardOutputConfig
    #   resp.data.tensor_board_output_config.local_path #=> String
    #   resp.data.tensor_board_output_config.s3_output_path #=> String
    #   resp.data.debug_rule_evaluation_statuses #=> Array<DebugRuleEvaluationStatus>
    #   resp.data.debug_rule_evaluation_statuses[0] #=> Types::DebugRuleEvaluationStatus
    #   resp.data.debug_rule_evaluation_statuses[0].rule_configuration_name #=> String
    #   resp.data.debug_rule_evaluation_statuses[0].rule_evaluation_job_arn #=> String
    #   resp.data.debug_rule_evaluation_statuses[0].rule_evaluation_status #=> String, one of ["InProgress", "NoIssuesFound", "IssuesFound", "Error", "Stopping", "Stopped"]
    #   resp.data.debug_rule_evaluation_statuses[0].status_details #=> String
    #   resp.data.debug_rule_evaluation_statuses[0].last_modified_time #=> Time
    #   resp.data.profiler_config #=> Types::ProfilerConfig
    #   resp.data.profiler_config.s3_output_path #=> String
    #   resp.data.profiler_config.profiling_interval_in_milliseconds #=> Integer
    #   resp.data.profiler_config.profiling_parameters #=> Hash<String, String>
    #   resp.data.profiler_config.profiling_parameters['key'] #=> String
    #   resp.data.profiler_rule_configurations #=> Array<ProfilerRuleConfiguration>
    #   resp.data.profiler_rule_configurations[0] #=> Types::ProfilerRuleConfiguration
    #   resp.data.profiler_rule_configurations[0].rule_configuration_name #=> String
    #   resp.data.profiler_rule_configurations[0].local_path #=> String
    #   resp.data.profiler_rule_configurations[0].s3_output_path #=> String
    #   resp.data.profiler_rule_configurations[0].rule_evaluator_image #=> String
    #   resp.data.profiler_rule_configurations[0].instance_type #=> String, one of ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.profiler_rule_configurations[0].volume_size_in_gb #=> Integer
    #   resp.data.profiler_rule_configurations[0].rule_parameters #=> Hash<String, String>
    #   resp.data.profiler_rule_evaluation_statuses #=> Array<ProfilerRuleEvaluationStatus>
    #   resp.data.profiler_rule_evaluation_statuses[0] #=> Types::ProfilerRuleEvaluationStatus
    #   resp.data.profiler_rule_evaluation_statuses[0].rule_configuration_name #=> String
    #   resp.data.profiler_rule_evaluation_statuses[0].rule_evaluation_job_arn #=> String
    #   resp.data.profiler_rule_evaluation_statuses[0].rule_evaluation_status #=> String, one of ["InProgress", "NoIssuesFound", "IssuesFound", "Error", "Stopping", "Stopped"]
    #   resp.data.profiler_rule_evaluation_statuses[0].status_details #=> String
    #   resp.data.profiler_rule_evaluation_statuses[0].last_modified_time #=> Time
    #   resp.data.profiling_status #=> String, one of ["Enabled", "Disabled"]
    #   resp.data.retry_strategy #=> Types::RetryStrategy
    #   resp.data.retry_strategy.maximum_retry_attempts #=> Integer
    #   resp.data.environment #=> Hash<String, String>
    #   resp.data.environment['key'] #=> String
    #
    def describe_training_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTrainingJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTrainingJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTrainingJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeTrainingJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeTrainingJob,
        stubs: @stubs,
        params_class: Params::DescribeTrainingJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_training_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about a transform job.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTransformJobInput}.
    #
    # @option params [String] :transform_job_name
    #   <p>The name of the transform job that you want to view details of.</p>
    #
    # @return [Types::DescribeTransformJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_transform_job(
    #     transform_job_name: 'TransformJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTransformJobOutput
    #   resp.data.transform_job_name #=> String
    #   resp.data.transform_job_arn #=> String
    #   resp.data.transform_job_status #=> String, one of ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.failure_reason #=> String
    #   resp.data.model_name #=> String
    #   resp.data.max_concurrent_transforms #=> Integer
    #   resp.data.model_client_config #=> Types::ModelClientConfig
    #   resp.data.model_client_config.invocations_timeout_in_seconds #=> Integer
    #   resp.data.model_client_config.invocations_max_retries #=> Integer
    #   resp.data.max_payload_in_mb #=> Integer
    #   resp.data.batch_strategy #=> String, one of ["MultiRecord", "SingleRecord"]
    #   resp.data.environment #=> Hash<String, String>
    #   resp.data.environment['key'] #=> String
    #   resp.data.transform_input #=> Types::TransformInput
    #   resp.data.transform_input.data_source #=> Types::TransformDataSource
    #   resp.data.transform_input.data_source.s3_data_source #=> Types::TransformS3DataSource
    #   resp.data.transform_input.data_source.s3_data_source.s3_data_type #=> String, one of ["ManifestFile", "S3Prefix", "AugmentedManifestFile"]
    #   resp.data.transform_input.data_source.s3_data_source.s3_uri #=> String
    #   resp.data.transform_input.content_type #=> String
    #   resp.data.transform_input.compression_type #=> String, one of ["None", "Gzip"]
    #   resp.data.transform_input.split_type #=> String, one of ["None", "Line", "RecordIO", "TFRecord"]
    #   resp.data.transform_output #=> Types::TransformOutput
    #   resp.data.transform_output.s3_output_path #=> String
    #   resp.data.transform_output.accept #=> String
    #   resp.data.transform_output.assemble_with #=> String, one of ["None", "Line"]
    #   resp.data.transform_output.kms_key_id #=> String
    #   resp.data.transform_resources #=> Types::TransformResources
    #   resp.data.transform_resources.instance_type #=> String, one of ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.transform_resources.instance_count #=> Integer
    #   resp.data.transform_resources.volume_kms_key_id #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.transform_start_time #=> Time
    #   resp.data.transform_end_time #=> Time
    #   resp.data.labeling_job_arn #=> String
    #   resp.data.auto_ml_job_arn #=> String
    #   resp.data.data_processing #=> Types::DataProcessing
    #   resp.data.data_processing.input_filter #=> String
    #   resp.data.data_processing.output_filter #=> String
    #   resp.data.data_processing.join_source #=> String, one of ["Input", "None"]
    #   resp.data.experiment_config #=> Types::ExperimentConfig
    #   resp.data.experiment_config.experiment_name #=> String
    #   resp.data.experiment_config.trial_name #=> String
    #   resp.data.experiment_config.trial_component_display_name #=> String
    #
    def describe_transform_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTransformJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTransformJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTransformJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeTransformJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeTransformJob,
        stubs: @stubs,
        params_class: Params::DescribeTransformJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_transform_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Provides a list of a trial's properties.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTrialInput}.
    #
    # @option params [String] :trial_name
    #   <p>The name of the trial to describe.</p>
    #
    # @return [Types::DescribeTrialOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_trial(
    #     trial_name: 'TrialName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTrialOutput
    #   resp.data.trial_name #=> String
    #   resp.data.trial_arn #=> String
    #   resp.data.display_name #=> String
    #   resp.data.experiment_name #=> String
    #   resp.data.source #=> Types::TrialSource
    #   resp.data.source.source_arn #=> String
    #   resp.data.source.source_type #=> String
    #   resp.data.creation_time #=> Time
    #   resp.data.created_by #=> Types::UserContext
    #   resp.data.created_by.user_profile_arn #=> String
    #   resp.data.created_by.user_profile_name #=> String
    #   resp.data.created_by.domain_id #=> String
    #   resp.data.last_modified_time #=> Time
    #   resp.data.last_modified_by #=> Types::UserContext
    #   resp.data.metadata_properties #=> Types::MetadataProperties
    #   resp.data.metadata_properties.commit_id #=> String
    #   resp.data.metadata_properties.repository #=> String
    #   resp.data.metadata_properties.generated_by #=> String
    #   resp.data.metadata_properties.project_id #=> String
    #
    def describe_trial(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTrialInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTrialInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTrial
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeTrial
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeTrial,
        stubs: @stubs,
        params_class: Params::DescribeTrialOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_trial
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Provides a list of a trials component's properties.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTrialComponentInput}.
    #
    # @option params [String] :trial_component_name
    #   <p>The name of the trial component to describe.</p>
    #
    # @return [Types::DescribeTrialComponentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_trial_component(
    #     trial_component_name: 'TrialComponentName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTrialComponentOutput
    #   resp.data.trial_component_name #=> String
    #   resp.data.trial_component_arn #=> String
    #   resp.data.display_name #=> String
    #   resp.data.source #=> Types::TrialComponentSource
    #   resp.data.source.source_arn #=> String
    #   resp.data.source.source_type #=> String
    #   resp.data.status #=> Types::TrialComponentStatus
    #   resp.data.status.primary_status #=> String, one of ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.status.message #=> String
    #   resp.data.start_time #=> Time
    #   resp.data.end_time #=> Time
    #   resp.data.creation_time #=> Time
    #   resp.data.created_by #=> Types::UserContext
    #   resp.data.created_by.user_profile_arn #=> String
    #   resp.data.created_by.user_profile_name #=> String
    #   resp.data.created_by.domain_id #=> String
    #   resp.data.last_modified_time #=> Time
    #   resp.data.last_modified_by #=> Types::UserContext
    #   resp.data.parameters #=> Hash<String, TrialComponentParameterValue>
    #   resp.data.parameters['key'] #=> TrialComponentParameterValue
    #   resp.data.input_artifacts #=> Hash<String, TrialComponentArtifact>
    #   resp.data.input_artifacts['key'] #=> Types::TrialComponentArtifact
    #   resp.data.input_artifacts['key'].media_type #=> String
    #   resp.data.input_artifacts['key'].value #=> String
    #   resp.data.output_artifacts #=> Hash<String, TrialComponentArtifact>
    #   resp.data.metadata_properties #=> Types::MetadataProperties
    #   resp.data.metadata_properties.commit_id #=> String
    #   resp.data.metadata_properties.repository #=> String
    #   resp.data.metadata_properties.generated_by #=> String
    #   resp.data.metadata_properties.project_id #=> String
    #   resp.data.metrics #=> Array<TrialComponentMetricSummary>
    #   resp.data.metrics[0] #=> Types::TrialComponentMetricSummary
    #   resp.data.metrics[0].metric_name #=> String
    #   resp.data.metrics[0].source_arn #=> String
    #   resp.data.metrics[0].time_stamp #=> Time
    #   resp.data.metrics[0].max #=> Float
    #   resp.data.metrics[0].min #=> Float
    #   resp.data.metrics[0].last #=> Float
    #   resp.data.metrics[0].count #=> Integer
    #   resp.data.metrics[0].avg #=> Float
    #   resp.data.metrics[0].std_dev #=> Float
    #   resp.data.lineage_group_arn #=> String
    #
    def describe_trial_component(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTrialComponentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTrialComponentInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTrialComponent
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeTrialComponent
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeTrialComponent,
        stubs: @stubs,
        params_class: Params::DescribeTrialComponentOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_trial_component
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes a user profile. For more information, see <code>CreateUserProfile</code>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeUserProfileInput}.
    #
    # @option params [String] :domain_id
    #   <p>The domain ID.</p>
    #
    # @option params [String] :user_profile_name
    #   <p>The user profile name. This value is not case sensitive.</p>
    #
    # @return [Types::DescribeUserProfileOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_user_profile(
    #     domain_id: 'DomainId', # required
    #     user_profile_name: 'UserProfileName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeUserProfileOutput
    #   resp.data.domain_id #=> String
    #   resp.data.user_profile_arn #=> String
    #   resp.data.user_profile_name #=> String
    #   resp.data.home_efs_file_system_uid #=> String
    #   resp.data.status #=> String, one of ["Deleting", "Failed", "InService", "Pending", "Updating", "Update_Failed", "Delete_Failed"]
    #   resp.data.last_modified_time #=> Time
    #   resp.data.creation_time #=> Time
    #   resp.data.failure_reason #=> String
    #   resp.data.single_sign_on_user_identifier #=> String
    #   resp.data.single_sign_on_user_value #=> String
    #   resp.data.user_settings #=> Types::UserSettings
    #   resp.data.user_settings.execution_role #=> String
    #   resp.data.user_settings.security_groups #=> Array<String>
    #   resp.data.user_settings.security_groups[0] #=> String
    #   resp.data.user_settings.sharing_settings #=> Types::SharingSettings
    #   resp.data.user_settings.sharing_settings.notebook_output_option #=> String, one of ["Allowed", "Disabled"]
    #   resp.data.user_settings.sharing_settings.s3_output_path #=> String
    #   resp.data.user_settings.sharing_settings.s3_kms_key_id #=> String
    #   resp.data.user_settings.jupyter_server_app_settings #=> Types::JupyterServerAppSettings
    #   resp.data.user_settings.jupyter_server_app_settings.default_resource_spec #=> Types::ResourceSpec
    #   resp.data.user_settings.jupyter_server_app_settings.default_resource_spec.sage_maker_image_arn #=> String
    #   resp.data.user_settings.jupyter_server_app_settings.default_resource_spec.sage_maker_image_version_arn #=> String
    #   resp.data.user_settings.jupyter_server_app_settings.default_resource_spec.instance_type #=> String, one of ["system", "ml.t3.micro", "ml.t3.small", "ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.8xlarge", "ml.m5.12xlarge", "ml.m5.16xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.8xlarge", "ml.m5d.12xlarge", "ml.m5d.16xlarge", "ml.m5d.24xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.12xlarge", "ml.c5.18xlarge", "ml.c5.24xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #   resp.data.user_settings.jupyter_server_app_settings.default_resource_spec.lifecycle_config_arn #=> String
    #   resp.data.user_settings.jupyter_server_app_settings.lifecycle_config_arns #=> Array<String>
    #   resp.data.user_settings.jupyter_server_app_settings.lifecycle_config_arns[0] #=> String
    #   resp.data.user_settings.kernel_gateway_app_settings #=> Types::KernelGatewayAppSettings
    #   resp.data.user_settings.kernel_gateway_app_settings.default_resource_spec #=> Types::ResourceSpec
    #   resp.data.user_settings.kernel_gateway_app_settings.custom_images #=> Array<CustomImage>
    #   resp.data.user_settings.kernel_gateway_app_settings.custom_images[0] #=> Types::CustomImage
    #   resp.data.user_settings.kernel_gateway_app_settings.custom_images[0].image_name #=> String
    #   resp.data.user_settings.kernel_gateway_app_settings.custom_images[0].image_version_number #=> Integer
    #   resp.data.user_settings.kernel_gateway_app_settings.custom_images[0].app_image_config_name #=> String
    #   resp.data.user_settings.kernel_gateway_app_settings.lifecycle_config_arns #=> Array<String>
    #   resp.data.user_settings.tensor_board_app_settings #=> Types::TensorBoardAppSettings
    #   resp.data.user_settings.tensor_board_app_settings.default_resource_spec #=> Types::ResourceSpec
    #   resp.data.user_settings.r_studio_server_pro_app_settings #=> Types::RStudioServerProAppSettings
    #   resp.data.user_settings.r_studio_server_pro_app_settings.access_status #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.user_settings.r_studio_server_pro_app_settings.user_group #=> String, one of ["R_STUDIO_ADMIN", "R_STUDIO_USER"]
    #   resp.data.user_settings.r_session_app_settings #=> Types::RSessionAppSettings
    #   resp.data.user_settings.r_session_app_settings.default_resource_spec #=> Types::ResourceSpec
    #   resp.data.user_settings.r_session_app_settings.custom_images #=> Array<CustomImage>
    #
    def describe_user_profile(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeUserProfileInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeUserProfileInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeUserProfile
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DescribeUserProfile
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeUserProfile,
        stubs: @stubs,
        params_class: Params::DescribeUserProfileOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_user_profile
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists private workforce information, including workforce name, Amazon Resource Name
    #             (ARN), and, if applicable, allowed IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Allowable IP address
    #             ranges are the IP addresses that workers can use to access tasks. </p>
    #         <important>
    #             <p>This operation applies only to private workforces.</p>
    #         </important>
    #
    # @param [Hash] params
    #   See {Types::DescribeWorkforceInput}.
    #
    # @option params [String] :workforce_name
    #   <p>The name of the private workforce whose access you want to restrict.
    #                   <code>WorkforceName</code> is automatically set to <code>default</code> when a
    #               workforce is created and cannot be modified. </p>
    #
    # @return [Types::DescribeWorkforceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_workforce(
    #     workforce_name: 'WorkforceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeWorkforceOutput
    #   resp.data.workforce #=> Types::Workforce
    #   resp.data.workforce.workforce_name #=> String
    #   resp.data.workforce.workforce_arn #=> String
    #   resp.data.workforce.last_updated_date #=> Time
    #   resp.data.workforce.source_ip_config #=> Types::SourceIpConfig
    #   resp.data.workforce.source_ip_config.cidrs #=> Array<String>
    #   resp.data.workforce.source_ip_config.cidrs[0] #=> String
    #   resp.data.workforce.sub_domain #=> String
    #   resp.data.workforce.cognito_config #=> Types::CognitoConfig
    #   resp.data.workforce.cognito_config.user_pool #=> String
    #   resp.data.workforce.cognito_config.client_id #=> String
    #   resp.data.workforce.oidc_config #=> Types::OidcConfigForResponse
    #   resp.data.workforce.oidc_config.client_id #=> String
    #   resp.data.workforce.oidc_config.issuer #=> String
    #   resp.data.workforce.oidc_config.authorization_endpoint #=> String
    #   resp.data.workforce.oidc_config.token_endpoint #=> String
    #   resp.data.workforce.oidc_config.user_info_endpoint #=> String
    #   resp.data.workforce.oidc_config.logout_endpoint #=> String
    #   resp.data.workforce.oidc_config.jwks_uri #=> String
    #   resp.data.workforce.create_date #=> Time
    #
    def describe_workforce(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeWorkforceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeWorkforceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeWorkforce
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeWorkforce
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeWorkforce,
        stubs: @stubs,
        params_class: Params::DescribeWorkforceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_workforce
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets information about a specific work team. You can see information such as the
    #             create date, the last updated date, membership information, and the work team's Amazon
    #             Resource Name (ARN).</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeWorkteamInput}.
    #
    # @option params [String] :workteam_name
    #   <p>The name of the work team to return a description of.</p>
    #
    # @return [Types::DescribeWorkteamOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_workteam(
    #     workteam_name: 'WorkteamName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeWorkteamOutput
    #   resp.data.workteam #=> Types::Workteam
    #   resp.data.workteam.workteam_name #=> String
    #   resp.data.workteam.member_definitions #=> Array<MemberDefinition>
    #   resp.data.workteam.member_definitions[0] #=> Types::MemberDefinition
    #   resp.data.workteam.member_definitions[0].cognito_member_definition #=> Types::CognitoMemberDefinition
    #   resp.data.workteam.member_definitions[0].cognito_member_definition.user_pool #=> String
    #   resp.data.workteam.member_definitions[0].cognito_member_definition.user_group #=> String
    #   resp.data.workteam.member_definitions[0].cognito_member_definition.client_id #=> String
    #   resp.data.workteam.member_definitions[0].oidc_member_definition #=> Types::OidcMemberDefinition
    #   resp.data.workteam.member_definitions[0].oidc_member_definition.groups #=> Array<String>
    #   resp.data.workteam.member_definitions[0].oidc_member_definition.groups[0] #=> String
    #   resp.data.workteam.workteam_arn #=> String
    #   resp.data.workteam.workforce_arn #=> String
    #   resp.data.workteam.product_listing_ids #=> Array<String>
    #   resp.data.workteam.product_listing_ids[0] #=> String
    #   resp.data.workteam.description #=> String
    #   resp.data.workteam.sub_domain #=> String
    #   resp.data.workteam.create_date #=> Time
    #   resp.data.workteam.last_updated_date #=> Time
    #   resp.data.workteam.notification_configuration #=> Types::NotificationConfiguration
    #   resp.data.workteam.notification_configuration.notification_topic_arn #=> String
    #
    def describe_workteam(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeWorkteamInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeWorkteamInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeWorkteam
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeWorkteam
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeWorkteam,
        stubs: @stubs,
        params_class: Params::DescribeWorkteamOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_workteam
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disables using Service Catalog in SageMaker. Service Catalog is used to create
    #             SageMaker projects.</p>
    #
    # @param [Hash] params
    #   See {Types::DisableSagemakerServicecatalogPortfolioInput}.
    #
    # @return [Types::DisableSagemakerServicecatalogPortfolioOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disable_sagemaker_servicecatalog_portfolio()
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisableSagemakerServicecatalogPortfolioOutput
    #
    def disable_sagemaker_servicecatalog_portfolio(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisableSagemakerServicecatalogPortfolioInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisableSagemakerServicecatalogPortfolioInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisableSagemakerServicecatalogPortfolio
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisableSagemakerServicecatalogPortfolio
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DisableSagemakerServicecatalogPortfolio,
        stubs: @stubs,
        params_class: Params::DisableSagemakerServicecatalogPortfolioOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :disable_sagemaker_servicecatalog_portfolio
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disassociates a trial component from a trial. This doesn't effect other trials the
    #       component is associated with. Before you can delete a component, you must disassociate the
    #       component from all trials it is associated with. To associate a trial component with a trial,
    #       call the <a>AssociateTrialComponent</a> API.</p>
    #          <p>To get a list of the trials a component is associated with, use the <a>Search</a> API. Specify <code>ExperimentTrialComponent</code> for the <code>Resource</code> parameter.
    #       The list appears in the response under <code>Results.TrialComponent.Parents</code>.</p>
    #
    # @param [Hash] params
    #   See {Types::DisassociateTrialComponentInput}.
    #
    # @option params [String] :trial_component_name
    #   <p>The name of the component to disassociate from the trial.</p>
    #
    # @option params [String] :trial_name
    #   <p>The name of the trial to disassociate from.</p>
    #
    # @return [Types::DisassociateTrialComponentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disassociate_trial_component(
    #     trial_component_name: 'TrialComponentName', # required
    #     trial_name: 'TrialName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisassociateTrialComponentOutput
    #   resp.data.trial_component_arn #=> String
    #   resp.data.trial_arn #=> String
    #
    def disassociate_trial_component(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisassociateTrialComponentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisassociateTrialComponentInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisassociateTrialComponent
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::DisassociateTrialComponent
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DisassociateTrialComponent,
        stubs: @stubs,
        params_class: Params::DisassociateTrialComponentOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :disassociate_trial_component
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Enables using Service Catalog in SageMaker. Service Catalog is used to create
    #             SageMaker projects.</p>
    #
    # @param [Hash] params
    #   See {Types::EnableSagemakerServicecatalogPortfolioInput}.
    #
    # @return [Types::EnableSagemakerServicecatalogPortfolioOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.enable_sagemaker_servicecatalog_portfolio()
    #
    # @example Response structure
    #
    #   resp.data #=> Types::EnableSagemakerServicecatalogPortfolioOutput
    #
    def enable_sagemaker_servicecatalog_portfolio(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::EnableSagemakerServicecatalogPortfolioInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::EnableSagemakerServicecatalogPortfolioInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::EnableSagemakerServicecatalogPortfolio
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::EnableSagemakerServicecatalogPortfolio
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::EnableSagemakerServicecatalogPortfolio,
        stubs: @stubs,
        params_class: Params::EnableSagemakerServicecatalogPortfolioOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :enable_sagemaker_servicecatalog_portfolio
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes a fleet.</p>
    #
    # @param [Hash] params
    #   See {Types::GetDeviceFleetReportInput}.
    #
    # @option params [String] :device_fleet_name
    #   <p>The name of the fleet.</p>
    #
    # @return [Types::GetDeviceFleetReportOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_device_fleet_report(
    #     device_fleet_name: 'DeviceFleetName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetDeviceFleetReportOutput
    #   resp.data.device_fleet_arn #=> String
    #   resp.data.device_fleet_name #=> String
    #   resp.data.output_config #=> Types::EdgeOutputConfig
    #   resp.data.output_config.s3_output_location #=> String
    #   resp.data.output_config.kms_key_id #=> String
    #   resp.data.output_config.preset_deployment_type #=> String, one of ["GreengrassV2Component"]
    #   resp.data.output_config.preset_deployment_config #=> String
    #   resp.data.description #=> String
    #   resp.data.report_generated #=> Time
    #   resp.data.device_stats #=> Types::DeviceStats
    #   resp.data.device_stats.connected_device_count #=> Integer
    #   resp.data.device_stats.registered_device_count #=> Integer
    #   resp.data.agent_versions #=> Array<AgentVersion>
    #   resp.data.agent_versions[0] #=> Types::AgentVersion
    #   resp.data.agent_versions[0].version #=> String
    #   resp.data.agent_versions[0].agent_count #=> Integer
    #   resp.data.model_stats #=> Array<EdgeModelStat>
    #   resp.data.model_stats[0] #=> Types::EdgeModelStat
    #   resp.data.model_stats[0].model_name #=> String
    #   resp.data.model_stats[0].model_version #=> String
    #   resp.data.model_stats[0].offline_device_count #=> Integer
    #   resp.data.model_stats[0].connected_device_count #=> Integer
    #   resp.data.model_stats[0].active_device_count #=> Integer
    #   resp.data.model_stats[0].sampling_device_count #=> Integer
    #
    def get_device_fleet_report(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetDeviceFleetReportInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetDeviceFleetReportInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetDeviceFleetReport
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetDeviceFleetReport
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetDeviceFleetReport,
        stubs: @stubs,
        params_class: Params::GetDeviceFleetReportOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_device_fleet_report
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>The resource policy for the lineage group.</p>
    #
    # @param [Hash] params
    #   See {Types::GetLineageGroupPolicyInput}.
    #
    # @option params [String] :lineage_group_name
    #   <p>The name or Amazon Resource Name (ARN) of the lineage group.</p>
    #
    # @return [Types::GetLineageGroupPolicyOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_lineage_group_policy(
    #     lineage_group_name: 'LineageGroupName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetLineageGroupPolicyOutput
    #   resp.data.lineage_group_arn #=> String
    #   resp.data.resource_policy #=> String
    #
    def get_lineage_group_policy(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetLineageGroupPolicyInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetLineageGroupPolicyInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetLineageGroupPolicy
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::GetLineageGroupPolicy
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetLineageGroupPolicy,
        stubs: @stubs,
        params_class: Params::GetLineageGroupPolicyOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_lineage_group_policy
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a resource policy that manages access for a model group. For information about
    #             resource policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based
    #                 policies and resource-based policies</a> in the <i>Amazon Web Services Identity and
    #                     Access Management User Guide.</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetModelPackageGroupPolicyInput}.
    #
    # @option params [String] :model_package_group_name
    #   <p>The name of the model group for which to get the resource policy.</p>
    #
    # @return [Types::GetModelPackageGroupPolicyOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_model_package_group_policy(
    #     model_package_group_name: 'ModelPackageGroupName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetModelPackageGroupPolicyOutput
    #   resp.data.resource_policy #=> String
    #
    def get_model_package_group_policy(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetModelPackageGroupPolicyInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetModelPackageGroupPolicyInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetModelPackageGroupPolicy
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetModelPackageGroupPolicy
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetModelPackageGroupPolicy,
        stubs: @stubs,
        params_class: Params::GetModelPackageGroupPolicyOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_model_package_group_policy
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets the status of Service Catalog in SageMaker. Service Catalog is used to create
    #             SageMaker projects.</p>
    #
    # @param [Hash] params
    #   See {Types::GetSagemakerServicecatalogPortfolioStatusInput}.
    #
    # @return [Types::GetSagemakerServicecatalogPortfolioStatusOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_sagemaker_servicecatalog_portfolio_status()
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetSagemakerServicecatalogPortfolioStatusOutput
    #   resp.data.status #=> String, one of ["Enabled", "Disabled"]
    #
    def get_sagemaker_servicecatalog_portfolio_status(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetSagemakerServicecatalogPortfolioStatusInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetSagemakerServicecatalogPortfolioStatusInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetSagemakerServicecatalogPortfolioStatus
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetSagemakerServicecatalogPortfolioStatus
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetSagemakerServicecatalogPortfolioStatus,
        stubs: @stubs,
        params_class: Params::GetSagemakerServicecatalogPortfolioStatusOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_sagemaker_servicecatalog_portfolio_status
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>An auto-complete API for the search functionality in the Amazon SageMaker console. It returns
    #       suggestions of possible matches for the property name to use in <code>Search</code>
    #       queries. Provides suggestions for <code>HyperParameters</code>, <code>Tags</code>, and
    #       <code>Metrics</code>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetSearchSuggestionsInput}.
    #
    # @option params [String] :resource
    #   <p>The name of the Amazon SageMaker resource to search for.</p>
    #
    # @option params [SuggestionQuery] :suggestion_query
    #   <p>Limits the property names that are included in the response.</p>
    #
    # @return [Types::GetSearchSuggestionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_search_suggestions(
    #     resource: 'TrainingJob', # required - accepts ["TrainingJob", "Experiment", "ExperimentTrial", "ExperimentTrialComponent", "Endpoint", "ModelPackage", "ModelPackageGroup", "Pipeline", "PipelineExecution", "FeatureGroup", "Project"]
    #     suggestion_query: {
    #       property_name_query: {
    #         property_name_hint: 'PropertyNameHint' # required
    #       }
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetSearchSuggestionsOutput
    #   resp.data.property_name_suggestions #=> Array<PropertyNameSuggestion>
    #   resp.data.property_name_suggestions[0] #=> Types::PropertyNameSuggestion
    #   resp.data.property_name_suggestions[0].property_name #=> String
    #
    def get_search_suggestions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetSearchSuggestionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetSearchSuggestionsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetSearchSuggestions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetSearchSuggestions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetSearchSuggestions,
        stubs: @stubs,
        params_class: Params::GetSearchSuggestionsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_search_suggestions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the actions in your account and their properties.</p>
    #
    # @param [Hash] params
    #   See {Types::ListActionsInput}.
    #
    # @option params [String] :source_uri
    #   <p>A filter that returns only actions with the specified source URI.</p>
    #
    # @option params [String] :action_type
    #   <p>A filter that returns only actions of the specified type.</p>
    #
    # @option params [Time] :created_after
    #   <p>A filter that returns only actions created on or after the specified time.</p>
    #
    # @option params [Time] :created_before
    #   <p>A filter that returns only actions created on or before the specified time.</p>
    #
    # @option params [String] :sort_by
    #   <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order. The default value is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>If the previous call to <code>ListActions</code> didn't return the full set of actions,
    #           the call returns a token for getting the next set of actions.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of actions to return in the response. The default value is 10.</p>
    #
    # @return [Types::ListActionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_actions(
    #     source_uri: 'SourceUri',
    #     action_type: 'ActionType',
    #     created_after: Time.now,
    #     created_before: Time.now,
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListActionsOutput
    #   resp.data.action_summaries #=> Array<ActionSummary>
    #   resp.data.action_summaries[0] #=> Types::ActionSummary
    #   resp.data.action_summaries[0].action_arn #=> String
    #   resp.data.action_summaries[0].action_name #=> String
    #   resp.data.action_summaries[0].source #=> Types::ActionSource
    #   resp.data.action_summaries[0].source.source_uri #=> String
    #   resp.data.action_summaries[0].source.source_type #=> String
    #   resp.data.action_summaries[0].source.source_id #=> String
    #   resp.data.action_summaries[0].action_type #=> String
    #   resp.data.action_summaries[0].status #=> String, one of ["Unknown", "InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.action_summaries[0].creation_time #=> Time
    #   resp.data.action_summaries[0].last_modified_time #=> Time
    #   resp.data.next_token #=> String
    #
    def list_actions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListActionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListActionsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListActions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::ListActions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListActions,
        stubs: @stubs,
        params_class: Params::ListActionsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_actions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the machine learning algorithms that have been created.</p>
    #
    # @param [Hash] params
    #   See {Types::ListAlgorithmsInput}.
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only algorithms created after the specified time
    #               (timestamp).</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only algorithms created before the specified time
    #               (timestamp).</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of algorithms to return in the response.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the algorithm name. This filter returns only algorithms whose name
    #               contains the specified string.</p>
    #
    # @option params [String] :next_token
    #   <p>If the response to a previous <code>ListAlgorithms</code> request was truncated, the
    #               response includes a <code>NextToken</code>. To retrieve the next set of algorithms, use
    #               the token in the next request.</p>
    #
    # @option params [String] :sort_by
    #   <p>The parameter by which to sort the results. The default is
    #               <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    #
    # @return [Types::ListAlgorithmsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_algorithms(
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     max_results: 1,
    #     name_contains: 'NameContains',
    #     next_token: 'NextToken',
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending' # accepts ["Ascending", "Descending"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListAlgorithmsOutput
    #   resp.data.algorithm_summary_list #=> Array<AlgorithmSummary>
    #   resp.data.algorithm_summary_list[0] #=> Types::AlgorithmSummary
    #   resp.data.algorithm_summary_list[0].algorithm_name #=> String
    #   resp.data.algorithm_summary_list[0].algorithm_arn #=> String
    #   resp.data.algorithm_summary_list[0].algorithm_description #=> String
    #   resp.data.algorithm_summary_list[0].creation_time #=> Time
    #   resp.data.algorithm_summary_list[0].algorithm_status #=> String, one of ["Pending", "InProgress", "Completed", "Failed", "Deleting"]
    #   resp.data.next_token #=> String
    #
    def list_algorithms(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListAlgorithmsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListAlgorithmsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListAlgorithms
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListAlgorithms
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListAlgorithms,
        stubs: @stubs,
        params_class: Params::ListAlgorithmsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_algorithms
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the AppImageConfigs in your account and their properties. The list can be
    #         filtered by creation time or modified time, and whether the AppImageConfig name contains
    #         a specified string.</p>
    #
    # @param [Hash] params
    #   See {Types::ListAppImageConfigsInput}.
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of AppImageConfigs to return in the response. The default value is
    #           10. </p>
    #
    # @option params [String] :next_token
    #   <p>If the previous call to <code>ListImages</code> didn't return the full set of
    #           AppImageConfigs, the call returns a token for getting the next set of AppImageConfigs.</p>
    #
    # @option params [String] :name_contains
    #   <p>A filter that returns only AppImageConfigs whose name contains the specified string.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only AppImageConfigs created on or before the specified time.</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only AppImageConfigs created on or after the specified time.</p>
    #
    # @option params [Time] :modified_time_before
    #   <p>A filter that returns only AppImageConfigs modified on or before the specified time.</p>
    #
    # @option params [Time] :modified_time_after
    #   <p>A filter that returns only AppImageConfigs modified on or after the specified time.</p>
    #
    # @option params [String] :sort_by
    #   <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order. The default value is <code>Descending</code>.</p>
    #
    # @return [Types::ListAppImageConfigsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_app_image_configs(
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     name_contains: 'NameContains',
    #     creation_time_before: Time.now,
    #     creation_time_after: Time.now,
    #     modified_time_before: Time.now,
    #     modified_time_after: Time.now,
    #     sort_by: 'CreationTime', # accepts ["CreationTime", "LastModifiedTime", "Name"]
    #     sort_order: 'Ascending' # accepts ["Ascending", "Descending"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListAppImageConfigsOutput
    #   resp.data.next_token #=> String
    #   resp.data.app_image_configs #=> Array<AppImageConfigDetails>
    #   resp.data.app_image_configs[0] #=> Types::AppImageConfigDetails
    #   resp.data.app_image_configs[0].app_image_config_arn #=> String
    #   resp.data.app_image_configs[0].app_image_config_name #=> String
    #   resp.data.app_image_configs[0].creation_time #=> Time
    #   resp.data.app_image_configs[0].last_modified_time #=> Time
    #   resp.data.app_image_configs[0].kernel_gateway_image_config #=> Types::KernelGatewayImageConfig
    #   resp.data.app_image_configs[0].kernel_gateway_image_config.kernel_specs #=> Array<KernelSpec>
    #   resp.data.app_image_configs[0].kernel_gateway_image_config.kernel_specs[0] #=> Types::KernelSpec
    #   resp.data.app_image_configs[0].kernel_gateway_image_config.kernel_specs[0].name #=> String
    #   resp.data.app_image_configs[0].kernel_gateway_image_config.kernel_specs[0].display_name #=> String
    #   resp.data.app_image_configs[0].kernel_gateway_image_config.file_system_config #=> Types::FileSystemConfig
    #   resp.data.app_image_configs[0].kernel_gateway_image_config.file_system_config.mount_path #=> String
    #   resp.data.app_image_configs[0].kernel_gateway_image_config.file_system_config.default_uid #=> Integer
    #   resp.data.app_image_configs[0].kernel_gateway_image_config.file_system_config.default_gid #=> Integer
    #
    def list_app_image_configs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListAppImageConfigsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListAppImageConfigsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListAppImageConfigs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListAppImageConfigs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListAppImageConfigs,
        stubs: @stubs,
        params_class: Params::ListAppImageConfigsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_app_image_configs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists apps.</p>
    #
    # @param [Hash] params
    #   See {Types::ListAppsInput}.
    #
    # @option params [String] :next_token
    #   <p>If the previous response was truncated, you will receive this token.
    #           Use it in your next request to receive the next set of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>Returns a list up to a specified limit.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for the results. The default is Ascending.</p>
    #
    # @option params [String] :sort_by
    #   <p>The parameter by which to sort the results. The default is CreationTime.</p>
    #
    # @option params [String] :domain_id_equals
    #   <p>A parameter to search for the domain ID.</p>
    #
    # @option params [String] :user_profile_name_equals
    #   <p>A parameter to search by user profile name.</p>
    #
    # @return [Types::ListAppsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_apps(
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     sort_by: 'CreationTime', # accepts ["CreationTime"]
    #     domain_id_equals: 'DomainIdEquals',
    #     user_profile_name_equals: 'UserProfileNameEquals'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListAppsOutput
    #   resp.data.apps #=> Array<AppDetails>
    #   resp.data.apps[0] #=> Types::AppDetails
    #   resp.data.apps[0].domain_id #=> String
    #   resp.data.apps[0].user_profile_name #=> String
    #   resp.data.apps[0].app_type #=> String, one of ["JupyterServer", "KernelGateway", "TensorBoard", "RStudioServerPro", "RSessionGateway"]
    #   resp.data.apps[0].app_name #=> String
    #   resp.data.apps[0].status #=> String, one of ["Deleted", "Deleting", "Failed", "InService", "Pending"]
    #   resp.data.apps[0].creation_time #=> Time
    #   resp.data.next_token #=> String
    #
    def list_apps(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListAppsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListAppsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListApps
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListApps
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListApps,
        stubs: @stubs,
        params_class: Params::ListAppsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_apps
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the artifacts in your account and their properties.</p>
    #
    # @param [Hash] params
    #   See {Types::ListArtifactsInput}.
    #
    # @option params [String] :source_uri
    #   <p>A filter that returns only artifacts with the specified source URI.</p>
    #
    # @option params [String] :artifact_type
    #   <p>A filter that returns only artifacts of the specified type.</p>
    #
    # @option params [Time] :created_after
    #   <p>A filter that returns only artifacts created on or after the specified time.</p>
    #
    # @option params [Time] :created_before
    #   <p>A filter that returns only artifacts created on or before the specified time.</p>
    #
    # @option params [String] :sort_by
    #   <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order. The default value is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>If the previous call to <code>ListArtifacts</code> didn't return the full set of artifacts,
    #           the call returns a token for getting the next set of artifacts.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of artifacts to return in the response. The default value is 10.</p>
    #
    # @return [Types::ListArtifactsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_artifacts(
    #     source_uri: 'SourceUri',
    #     artifact_type: 'ArtifactType',
    #     created_after: Time.now,
    #     created_before: Time.now,
    #     sort_by: 'CreationTime', # accepts ["CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListArtifactsOutput
    #   resp.data.artifact_summaries #=> Array<ArtifactSummary>
    #   resp.data.artifact_summaries[0] #=> Types::ArtifactSummary
    #   resp.data.artifact_summaries[0].artifact_arn #=> String
    #   resp.data.artifact_summaries[0].artifact_name #=> String
    #   resp.data.artifact_summaries[0].source #=> Types::ArtifactSource
    #   resp.data.artifact_summaries[0].source.source_uri #=> String
    #   resp.data.artifact_summaries[0].source.source_types #=> Array<ArtifactSourceType>
    #   resp.data.artifact_summaries[0].source.source_types[0] #=> Types::ArtifactSourceType
    #   resp.data.artifact_summaries[0].source.source_types[0].source_id_type #=> String, one of ["MD5Hash", "S3ETag", "S3Version", "Custom"]
    #   resp.data.artifact_summaries[0].source.source_types[0].value #=> String
    #   resp.data.artifact_summaries[0].artifact_type #=> String
    #   resp.data.artifact_summaries[0].creation_time #=> Time
    #   resp.data.artifact_summaries[0].last_modified_time #=> Time
    #   resp.data.next_token #=> String
    #
    def list_artifacts(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListArtifactsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListArtifactsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListArtifacts
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::ListArtifacts
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListArtifacts,
        stubs: @stubs,
        params_class: Params::ListArtifactsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_artifacts
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the associations in your account and their properties.</p>
    #
    # @param [Hash] params
    #   See {Types::ListAssociationsInput}.
    #
    # @option params [String] :source_arn
    #   <p>A filter that returns only associations with the specified source ARN.</p>
    #
    # @option params [String] :destination_arn
    #   <p>A filter that returns only associations with the specified destination Amazon Resource Name (ARN).</p>
    #
    # @option params [String] :source_type
    #   <p>A filter that returns only associations with the specified source type.</p>
    #
    # @option params [String] :destination_type
    #   <p>A filter that returns only associations with the specified destination type.</p>
    #
    # @option params [String] :association_type
    #   <p>A filter that returns only associations of the specified type.</p>
    #
    # @option params [Time] :created_after
    #   <p>A filter that returns only associations created on or after the specified time.</p>
    #
    # @option params [Time] :created_before
    #   <p>A filter that returns only associations created on or before the specified time.</p>
    #
    # @option params [String] :sort_by
    #   <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order. The default value is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>If the previous call to <code>ListAssociations</code> didn't return the full set of associations,
    #           the call returns a token for getting the next set of associations.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of associations to return in the response. The default value is 10.</p>
    #
    # @return [Types::ListAssociationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_associations(
    #     source_arn: 'SourceArn',
    #     destination_arn: 'DestinationArn',
    #     source_type: 'SourceType',
    #     destination_type: 'DestinationType',
    #     association_type: 'ContributedTo', # accepts ["ContributedTo", "AssociatedWith", "DerivedFrom", "Produced"]
    #     created_after: Time.now,
    #     created_before: Time.now,
    #     sort_by: 'SourceArn', # accepts ["SourceArn", "DestinationArn", "SourceType", "DestinationType", "CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListAssociationsOutput
    #   resp.data.association_summaries #=> Array<AssociationSummary>
    #   resp.data.association_summaries[0] #=> Types::AssociationSummary
    #   resp.data.association_summaries[0].source_arn #=> String
    #   resp.data.association_summaries[0].destination_arn #=> String
    #   resp.data.association_summaries[0].source_type #=> String
    #   resp.data.association_summaries[0].destination_type #=> String
    #   resp.data.association_summaries[0].association_type #=> String, one of ["ContributedTo", "AssociatedWith", "DerivedFrom", "Produced"]
    #   resp.data.association_summaries[0].source_name #=> String
    #   resp.data.association_summaries[0].destination_name #=> String
    #   resp.data.association_summaries[0].creation_time #=> Time
    #   resp.data.association_summaries[0].created_by #=> Types::UserContext
    #   resp.data.association_summaries[0].created_by.user_profile_arn #=> String
    #   resp.data.association_summaries[0].created_by.user_profile_name #=> String
    #   resp.data.association_summaries[0].created_by.domain_id #=> String
    #   resp.data.next_token #=> String
    #
    def list_associations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListAssociationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListAssociationsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListAssociations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::ListAssociations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListAssociations,
        stubs: @stubs,
        params_class: Params::ListAssociationsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_associations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Request a list of jobs.</p>
    #
    # @param [Hash] params
    #   See {Types::ListAutoMLJobsInput}.
    #
    # @option params [Time] :creation_time_after
    #   <p>Request a list of jobs, using a filter for time.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>Request a list of jobs, using a filter for time.</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>Request a list of jobs, using a filter for time.</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>Request a list of jobs, using a filter for time.</p>
    #
    # @option params [String] :name_contains
    #   <p>Request a list of jobs, using a search filter for name.</p>
    #
    # @option params [String] :status_equals
    #   <p>Request a list of jobs, using a filter for status.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for the results. The default is <code>Descending</code>.</p>
    #
    # @option params [String] :sort_by
    #   <p>The parameter by which to sort the results. The default is <code>Name</code>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>Request a list of jobs up to a specified limit.</p>
    #
    # @option params [String] :next_token
    #   <p>If the previous response was truncated, you receive this token. Use it in your next
    #            request to receive the next set of results.</p>
    #
    # @return [Types::ListAutoMLJobsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_auto_ml_jobs(
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     name_contains: 'NameContains',
    #     status_equals: 'Completed', # accepts ["Completed", "InProgress", "Failed", "Stopped", "Stopping"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     sort_by: 'Name', # accepts ["Name", "CreationTime", "Status"]
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListAutoMLJobsOutput
    #   resp.data.auto_ml_job_summaries #=> Array<AutoMLJobSummary>
    #   resp.data.auto_ml_job_summaries[0] #=> Types::AutoMLJobSummary
    #   resp.data.auto_ml_job_summaries[0].auto_ml_job_name #=> String
    #   resp.data.auto_ml_job_summaries[0].auto_ml_job_arn #=> String
    #   resp.data.auto_ml_job_summaries[0].auto_ml_job_status #=> String, one of ["Completed", "InProgress", "Failed", "Stopped", "Stopping"]
    #   resp.data.auto_ml_job_summaries[0].auto_ml_job_secondary_status #=> String, one of ["Starting", "AnalyzingData", "FeatureEngineering", "ModelTuning", "MaxCandidatesReached", "Failed", "Stopped", "MaxAutoMLJobRuntimeReached", "Stopping", "CandidateDefinitionsGenerated", "GeneratingExplainabilityReport", "Completed", "ExplainabilityError", "DeployingModel", "ModelDeploymentError", "GeneratingModelInsightsReport", "ModelInsightsError"]
    #   resp.data.auto_ml_job_summaries[0].creation_time #=> Time
    #   resp.data.auto_ml_job_summaries[0].end_time #=> Time
    #   resp.data.auto_ml_job_summaries[0].last_modified_time #=> Time
    #   resp.data.auto_ml_job_summaries[0].failure_reason #=> String
    #   resp.data.auto_ml_job_summaries[0].partial_failure_reasons #=> Array<AutoMLPartialFailureReason>
    #   resp.data.auto_ml_job_summaries[0].partial_failure_reasons[0] #=> Types::AutoMLPartialFailureReason
    #   resp.data.auto_ml_job_summaries[0].partial_failure_reasons[0].partial_failure_message #=> String
    #   resp.data.next_token #=> String
    #
    def list_auto_ml_jobs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListAutoMLJobsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListAutoMLJobsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListAutoMLJobs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListAutoMLJobs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListAutoMLJobs,
        stubs: @stubs,
        params_class: Params::ListAutoMLJobsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_auto_ml_jobs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>List the candidates created for the job.</p>
    #
    # @param [Hash] params
    #   See {Types::ListCandidatesForAutoMLJobInput}.
    #
    # @option params [String] :auto_ml_job_name
    #   <p>List the candidates created for the job by providing the job's name.</p>
    #
    # @option params [String] :status_equals
    #   <p>List the candidates for the job and filter by status.</p>
    #
    # @option params [String] :candidate_name_equals
    #   <p>List the candidates for the job and filter by candidate name.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    #
    # @option params [String] :sort_by
    #   <p>The parameter by which to sort the results. The default is
    #            <code>Descending</code>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>List the job's candidates up to a specified limit.</p>
    #
    # @option params [String] :next_token
    #   <p>If the previous response was truncated, you receive this token. Use it in your next
    #            request to receive the next set of results.</p>
    #
    # @return [Types::ListCandidatesForAutoMLJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_candidates_for_auto_ml_job(
    #     auto_ml_job_name: 'AutoMLJobName', # required
    #     status_equals: 'Completed', # accepts ["Completed", "InProgress", "Failed", "Stopped", "Stopping"]
    #     candidate_name_equals: 'CandidateNameEquals',
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     sort_by: 'CreationTime', # accepts ["CreationTime", "Status", "FinalObjectiveMetricValue"]
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListCandidatesForAutoMLJobOutput
    #   resp.data.candidates #=> Array<AutoMLCandidate>
    #   resp.data.candidates[0] #=> Types::AutoMLCandidate
    #   resp.data.candidates[0].candidate_name #=> String
    #   resp.data.candidates[0].final_auto_ml_job_objective_metric #=> Types::FinalAutoMLJobObjectiveMetric
    #   resp.data.candidates[0].final_auto_ml_job_objective_metric.type #=> String, one of ["Maximize", "Minimize"]
    #   resp.data.candidates[0].final_auto_ml_job_objective_metric.metric_name #=> String, one of ["Accuracy", "MSE", "F1", "F1macro", "AUC"]
    #   resp.data.candidates[0].final_auto_ml_job_objective_metric.value #=> Float
    #   resp.data.candidates[0].objective_status #=> String, one of ["Succeeded", "Pending", "Failed"]
    #   resp.data.candidates[0].candidate_steps #=> Array<AutoMLCandidateStep>
    #   resp.data.candidates[0].candidate_steps[0] #=> Types::AutoMLCandidateStep
    #   resp.data.candidates[0].candidate_steps[0].candidate_step_type #=> String, one of ["AWS::SageMaker::TrainingJob", "AWS::SageMaker::TransformJob", "AWS::SageMaker::ProcessingJob"]
    #   resp.data.candidates[0].candidate_steps[0].candidate_step_arn #=> String
    #   resp.data.candidates[0].candidate_steps[0].candidate_step_name #=> String
    #   resp.data.candidates[0].candidate_status #=> String, one of ["Completed", "InProgress", "Failed", "Stopped", "Stopping"]
    #   resp.data.candidates[0].inference_containers #=> Array<AutoMLContainerDefinition>
    #   resp.data.candidates[0].inference_containers[0] #=> Types::AutoMLContainerDefinition
    #   resp.data.candidates[0].inference_containers[0].image #=> String
    #   resp.data.candidates[0].inference_containers[0].model_data_url #=> String
    #   resp.data.candidates[0].inference_containers[0].environment #=> Hash<String, String>
    #   resp.data.candidates[0].inference_containers[0].environment['key'] #=> String
    #   resp.data.candidates[0].creation_time #=> Time
    #   resp.data.candidates[0].end_time #=> Time
    #   resp.data.candidates[0].last_modified_time #=> Time
    #   resp.data.candidates[0].failure_reason #=> String
    #   resp.data.candidates[0].candidate_properties #=> Types::CandidateProperties
    #   resp.data.candidates[0].candidate_properties.candidate_artifact_locations #=> Types::CandidateArtifactLocations
    #   resp.data.candidates[0].candidate_properties.candidate_artifact_locations.explainability #=> String
    #   resp.data.candidates[0].candidate_properties.candidate_artifact_locations.model_insights #=> String
    #   resp.data.candidates[0].candidate_properties.candidate_metrics #=> Array<MetricDatum>
    #   resp.data.candidates[0].candidate_properties.candidate_metrics[0] #=> Types::MetricDatum
    #   resp.data.candidates[0].candidate_properties.candidate_metrics[0].metric_name #=> String, one of ["Accuracy", "MSE", "F1", "F1macro", "AUC"]
    #   resp.data.candidates[0].candidate_properties.candidate_metrics[0].value #=> Float
    #   resp.data.candidates[0].candidate_properties.candidate_metrics[0].set #=> String, one of ["Train", "Validation", "Test"]
    #   resp.data.candidates[0].candidate_properties.candidate_metrics[0].standard_metric_name #=> String, one of ["Accuracy", "MSE", "F1", "F1macro", "AUC", "RMSE", "MAE", "R2", "BalancedAccuracy", "Precision", "PrecisionMacro", "Recall", "RecallMacro", "LogLoss"]
    #   resp.data.next_token #=> String
    #
    def list_candidates_for_auto_ml_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListCandidatesForAutoMLJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListCandidatesForAutoMLJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListCandidatesForAutoMLJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::ListCandidatesForAutoMLJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListCandidatesForAutoMLJob,
        stubs: @stubs,
        params_class: Params::ListCandidatesForAutoMLJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_candidates_for_auto_ml_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a list of the Git repositories in your account.</p>
    #
    # @param [Hash] params
    #   See {Types::ListCodeRepositoriesInput}.
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only Git repositories that were created after the specified
    #               time.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only Git repositories that were created before the specified
    #               time.</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>A filter that returns only Git repositories that were last modified after the
    #               specified time.</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>A filter that returns only Git repositories that were last modified before the
    #               specified time.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of Git repositories to return in the response.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the Git repositories name. This filter returns only repositories whose
    #               name contains the specified string.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of a <code>ListCodeRepositoriesOutput</code> request was truncated, the
    #               response includes a <code>NextToken</code>. To get the next set of Git repositories, use
    #               the token in the next request.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field to sort results by. The default is <code>Name</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Ascending</code>.</p>
    #
    # @return [Types::ListCodeRepositoriesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_code_repositories(
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     max_results: 1,
    #     name_contains: 'NameContains',
    #     next_token: 'NextToken',
    #     sort_by: 'Name', # accepts ["Name", "CreationTime", "LastModifiedTime"]
    #     sort_order: 'Ascending' # accepts ["Ascending", "Descending"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListCodeRepositoriesOutput
    #   resp.data.code_repository_summary_list #=> Array<CodeRepositorySummary>
    #   resp.data.code_repository_summary_list[0] #=> Types::CodeRepositorySummary
    #   resp.data.code_repository_summary_list[0].code_repository_name #=> String
    #   resp.data.code_repository_summary_list[0].code_repository_arn #=> String
    #   resp.data.code_repository_summary_list[0].creation_time #=> Time
    #   resp.data.code_repository_summary_list[0].last_modified_time #=> Time
    #   resp.data.code_repository_summary_list[0].git_config #=> Types::GitConfig
    #   resp.data.code_repository_summary_list[0].git_config.repository_url #=> String
    #   resp.data.code_repository_summary_list[0].git_config.branch #=> String
    #   resp.data.code_repository_summary_list[0].git_config.secret_arn #=> String
    #   resp.data.next_token #=> String
    #
    def list_code_repositories(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListCodeRepositoriesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListCodeRepositoriesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListCodeRepositories
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListCodeRepositories
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListCodeRepositories,
        stubs: @stubs,
        params_class: Params::ListCodeRepositoriesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_code_repositories
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists model compilation jobs that satisfy various filters.</p>
    #         <p>To create a model compilation job, use <a>CreateCompilationJob</a>. To get
    #             information about a particular model compilation job you have created, use <a>DescribeCompilationJob</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::ListCompilationJobsInput}.
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListCompilationJobs</code> request was truncated,
    #               the response includes a <code>NextToken</code>. To retrieve the next set of model
    #               compilation jobs, use the token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of model compilation jobs to return in the response.</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns the model compilation jobs that were created after a specified
    #               time. </p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns the model compilation jobs that were created before a specified
    #               time.</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>A filter that returns the model compilation jobs that were modified after a specified
    #               time.</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>A filter that returns the model compilation jobs that were modified before a specified
    #               time.</p>
    #
    # @option params [String] :name_contains
    #   <p>A filter that returns the model compilation jobs whose name contains a specified
    #               string.</p>
    #
    # @option params [String] :status_equals
    #   <p>A filter that retrieves model compilation jobs with a specific <a>DescribeCompilationJobResponse$CompilationJobStatus</a> status.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field by which to sort results. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Ascending</code>.</p>
    #
    # @return [Types::ListCompilationJobsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_compilation_jobs(
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     name_contains: 'NameContains',
    #     status_equals: 'INPROGRESS', # accepts ["INPROGRESS", "COMPLETED", "FAILED", "STARTING", "STOPPING", "STOPPED"]
    #     sort_by: 'Name', # accepts ["Name", "CreationTime", "Status"]
    #     sort_order: 'Ascending' # accepts ["Ascending", "Descending"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListCompilationJobsOutput
    #   resp.data.compilation_job_summaries #=> Array<CompilationJobSummary>
    #   resp.data.compilation_job_summaries[0] #=> Types::CompilationJobSummary
    #   resp.data.compilation_job_summaries[0].compilation_job_name #=> String
    #   resp.data.compilation_job_summaries[0].compilation_job_arn #=> String
    #   resp.data.compilation_job_summaries[0].creation_time #=> Time
    #   resp.data.compilation_job_summaries[0].compilation_start_time #=> Time
    #   resp.data.compilation_job_summaries[0].compilation_end_time #=> Time
    #   resp.data.compilation_job_summaries[0].compilation_target_device #=> String, one of ["lambda", "ml_m4", "ml_m5", "ml_c4", "ml_c5", "ml_p2", "ml_p3", "ml_g4dn", "ml_inf1", "ml_eia2", "jetson_tx1", "jetson_tx2", "jetson_nano", "jetson_xavier", "rasp3b", "imx8qm", "deeplens", "rk3399", "rk3288", "aisage", "sbe_c", "qcs605", "qcs603", "sitara_am57x", "amba_cv2", "amba_cv22", "amba_cv25", "x86_win32", "x86_win64", "coreml", "jacinto_tda4vm", "imx8mplus"]
    #   resp.data.compilation_job_summaries[0].compilation_target_platform_os #=> String, one of ["ANDROID", "LINUX"]
    #   resp.data.compilation_job_summaries[0].compilation_target_platform_arch #=> String, one of ["X86_64", "X86", "ARM64", "ARM_EABI", "ARM_EABIHF"]
    #   resp.data.compilation_job_summaries[0].compilation_target_platform_accelerator #=> String, one of ["INTEL_GRAPHICS", "MALI", "NVIDIA", "NNA"]
    #   resp.data.compilation_job_summaries[0].last_modified_time #=> Time
    #   resp.data.compilation_job_summaries[0].compilation_job_status #=> String, one of ["INPROGRESS", "COMPLETED", "FAILED", "STARTING", "STOPPING", "STOPPED"]
    #   resp.data.next_token #=> String
    #
    def list_compilation_jobs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListCompilationJobsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListCompilationJobsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListCompilationJobs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListCompilationJobs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListCompilationJobs,
        stubs: @stubs,
        params_class: Params::ListCompilationJobsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_compilation_jobs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the contexts in your account and their properties.</p>
    #
    # @param [Hash] params
    #   See {Types::ListContextsInput}.
    #
    # @option params [String] :source_uri
    #   <p>A filter that returns only contexts with the specified source URI.</p>
    #
    # @option params [String] :context_type
    #   <p>A filter that returns only contexts of the specified type.</p>
    #
    # @option params [Time] :created_after
    #   <p>A filter that returns only contexts created on or after the specified time.</p>
    #
    # @option params [Time] :created_before
    #   <p>A filter that returns only contexts created on or before the specified time.</p>
    #
    # @option params [String] :sort_by
    #   <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order. The default value is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>If the previous call to <code>ListContexts</code> didn't return the full set of contexts,
    #           the call returns a token for getting the next set of contexts.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of contexts to return in the response. The default value is 10.</p>
    #
    # @return [Types::ListContextsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_contexts(
    #     source_uri: 'SourceUri',
    #     context_type: 'ContextType',
    #     created_after: Time.now,
    #     created_before: Time.now,
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListContextsOutput
    #   resp.data.context_summaries #=> Array<ContextSummary>
    #   resp.data.context_summaries[0] #=> Types::ContextSummary
    #   resp.data.context_summaries[0].context_arn #=> String
    #   resp.data.context_summaries[0].context_name #=> String
    #   resp.data.context_summaries[0].source #=> Types::ContextSource
    #   resp.data.context_summaries[0].source.source_uri #=> String
    #   resp.data.context_summaries[0].source.source_type #=> String
    #   resp.data.context_summaries[0].source.source_id #=> String
    #   resp.data.context_summaries[0].context_type #=> String
    #   resp.data.context_summaries[0].creation_time #=> Time
    #   resp.data.context_summaries[0].last_modified_time #=> Time
    #   resp.data.next_token #=> String
    #
    def list_contexts(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListContextsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListContextsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListContexts
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::ListContexts
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListContexts,
        stubs: @stubs,
        params_class: Params::ListContextsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_contexts
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the data quality job definitions in your account.</p>
    #
    # @param [Hash] params
    #   See {Types::ListDataQualityJobDefinitionsInput}.
    #
    # @option params [String] :endpoint_name
    #   <p>A filter that lists the data quality job definitions associated with the specified
    #            endpoint.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListDataQualityJobDefinitions</code> request was
    #            truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
    #            transform jobs, use the token in the next request.></p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of data quality monitoring job definitions to return in the
    #            response.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the data quality monitoring job definition name. This filter returns only
    #            data quality monitoring job definitions whose name contains the specified string.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only data quality monitoring job definitions created before the
    #            specified time.</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only data quality monitoring job definitions created after the
    #            specified time.</p>
    #
    # @return [Types::ListDataQualityJobDefinitionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_data_quality_job_definitions(
    #     endpoint_name: 'EndpointName',
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     name_contains: 'NameContains',
    #     creation_time_before: Time.now,
    #     creation_time_after: Time.now
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListDataQualityJobDefinitionsOutput
    #   resp.data.job_definition_summaries #=> Array<MonitoringJobDefinitionSummary>
    #   resp.data.job_definition_summaries[0] #=> Types::MonitoringJobDefinitionSummary
    #   resp.data.job_definition_summaries[0].monitoring_job_definition_name #=> String
    #   resp.data.job_definition_summaries[0].monitoring_job_definition_arn #=> String
    #   resp.data.job_definition_summaries[0].creation_time #=> Time
    #   resp.data.job_definition_summaries[0].endpoint_name #=> String
    #   resp.data.next_token #=> String
    #
    def list_data_quality_job_definitions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListDataQualityJobDefinitionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListDataQualityJobDefinitionsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListDataQualityJobDefinitions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListDataQualityJobDefinitions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListDataQualityJobDefinitions,
        stubs: @stubs,
        params_class: Params::ListDataQualityJobDefinitionsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_data_quality_job_definitions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a list of devices in the fleet.</p>
    #
    # @param [Hash] params
    #   See {Types::ListDeviceFleetsInput}.
    #
    # @option params [String] :next_token
    #   <p>The response from the last list when returning a list large enough to need tokening.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to select.</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>Filter fleets where packaging job was created after specified time.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>Filter fleets where the edge packaging job was created before specified time.</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>Select fleets where the job was updated after X</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>Select fleets where the job was updated before X</p>
    #
    # @option params [String] :name_contains
    #   <p>Filter for fleets containing this name in their fleet device name.</p>
    #
    # @option params [String] :sort_by
    #   <p>The column to sort by.</p>
    #
    # @option params [String] :sort_order
    #   <p>What direction to sort in.</p>
    #
    # @return [Types::ListDeviceFleetsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_device_fleets(
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     name_contains: 'NameContains',
    #     sort_by: 'NAME', # accepts ["NAME", "CREATION_TIME", "LAST_MODIFIED_TIME"]
    #     sort_order: 'Ascending' # accepts ["Ascending", "Descending"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListDeviceFleetsOutput
    #   resp.data.device_fleet_summaries #=> Array<DeviceFleetSummary>
    #   resp.data.device_fleet_summaries[0] #=> Types::DeviceFleetSummary
    #   resp.data.device_fleet_summaries[0].device_fleet_arn #=> String
    #   resp.data.device_fleet_summaries[0].device_fleet_name #=> String
    #   resp.data.device_fleet_summaries[0].creation_time #=> Time
    #   resp.data.device_fleet_summaries[0].last_modified_time #=> Time
    #   resp.data.next_token #=> String
    #
    def list_device_fleets(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListDeviceFleetsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListDeviceFleetsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListDeviceFleets
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListDeviceFleets
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListDeviceFleets,
        stubs: @stubs,
        params_class: Params::ListDeviceFleetsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_device_fleets
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>A list of devices.</p>
    #
    # @param [Hash] params
    #   See {Types::ListDevicesInput}.
    #
    # @option params [String] :next_token
    #   <p>The response from the last list when returning a list large enough to need tokening.</p>
    #
    # @option params [Integer] :max_results
    #   <p>Maximum number of results to select.</p>
    #
    # @option params [Time] :latest_heartbeat_after
    #   <p>Select fleets where the job was updated after X</p>
    #
    # @option params [String] :model_name
    #   <p>A filter that searches devices that contains this name in any of their models.</p>
    #
    # @option params [String] :device_fleet_name
    #   <p>Filter for fleets containing this name in their device fleet name.</p>
    #
    # @return [Types::ListDevicesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_devices(
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     latest_heartbeat_after: Time.now,
    #     model_name: 'ModelName',
    #     device_fleet_name: 'DeviceFleetName'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListDevicesOutput
    #   resp.data.device_summaries #=> Array<DeviceSummary>
    #   resp.data.device_summaries[0] #=> Types::DeviceSummary
    #   resp.data.device_summaries[0].device_name #=> String
    #   resp.data.device_summaries[0].device_arn #=> String
    #   resp.data.device_summaries[0].description #=> String
    #   resp.data.device_summaries[0].device_fleet_name #=> String
    #   resp.data.device_summaries[0].iot_thing_name #=> String
    #   resp.data.device_summaries[0].registration_time #=> Time
    #   resp.data.device_summaries[0].latest_heartbeat #=> Time
    #   resp.data.device_summaries[0].models #=> Array<EdgeModelSummary>
    #   resp.data.device_summaries[0].models[0] #=> Types::EdgeModelSummary
    #   resp.data.device_summaries[0].models[0].model_name #=> String
    #   resp.data.device_summaries[0].models[0].model_version #=> String
    #   resp.data.device_summaries[0].agent_version #=> String
    #   resp.data.next_token #=> String
    #
    def list_devices(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListDevicesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListDevicesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListDevices
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListDevices
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListDevices,
        stubs: @stubs,
        params_class: Params::ListDevicesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_devices
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the domains.</p>
    #
    # @param [Hash] params
    #   See {Types::ListDomainsInput}.
    #
    # @option params [String] :next_token
    #   <p>If the previous response was truncated, you will receive this token.
    #           Use it in your next request to receive the next set of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>Returns a list up to a specified limit.</p>
    #
    # @return [Types::ListDomainsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_domains(
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListDomainsOutput
    #   resp.data.domains #=> Array<DomainDetails>
    #   resp.data.domains[0] #=> Types::DomainDetails
    #   resp.data.domains[0].domain_arn #=> String
    #   resp.data.domains[0].domain_id #=> String
    #   resp.data.domains[0].domain_name #=> String
    #   resp.data.domains[0].status #=> String, one of ["Deleting", "Failed", "InService", "Pending", "Updating", "Update_Failed", "Delete_Failed"]
    #   resp.data.domains[0].creation_time #=> Time
    #   resp.data.domains[0].last_modified_time #=> Time
    #   resp.data.domains[0].url #=> String
    #   resp.data.next_token #=> String
    #
    def list_domains(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListDomainsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListDomainsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListDomains
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListDomains
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListDomains,
        stubs: @stubs,
        params_class: Params::ListDomainsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_domains
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a list of edge packaging jobs.</p>
    #
    # @param [Hash] params
    #   See {Types::ListEdgePackagingJobsInput}.
    #
    # @option params [String] :next_token
    #   <p>The response from the last list when returning a list large enough to need tokening.</p>
    #
    # @option params [Integer] :max_results
    #   <p>Maximum number of results to select.</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>Select jobs where the job was created after specified time.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>Select jobs where the job was created before specified time.</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>Select jobs where the job was updated after specified time.</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>Select jobs where the job was updated before specified time.</p>
    #
    # @option params [String] :name_contains
    #   <p>Filter for jobs containing this name in their packaging job name.</p>
    #
    # @option params [String] :model_name_contains
    #   <p>Filter for jobs where the model name contains this string.</p>
    #
    # @option params [String] :status_equals
    #   <p>The job status to filter for.</p>
    #
    # @option params [String] :sort_by
    #   <p>Use to specify what column to sort by.</p>
    #
    # @option params [String] :sort_order
    #   <p>What direction to sort by.</p>
    #
    # @return [Types::ListEdgePackagingJobsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_edge_packaging_jobs(
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     name_contains: 'NameContains',
    #     model_name_contains: 'ModelNameContains',
    #     status_equals: 'STARTING', # accepts ["STARTING", "INPROGRESS", "COMPLETED", "FAILED", "STOPPING", "STOPPED"]
    #     sort_by: 'NAME', # accepts ["NAME", "MODEL_NAME", "CREATION_TIME", "LAST_MODIFIED_TIME", "STATUS"]
    #     sort_order: 'Ascending' # accepts ["Ascending", "Descending"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListEdgePackagingJobsOutput
    #   resp.data.edge_packaging_job_summaries #=> Array<EdgePackagingJobSummary>
    #   resp.data.edge_packaging_job_summaries[0] #=> Types::EdgePackagingJobSummary
    #   resp.data.edge_packaging_job_summaries[0].edge_packaging_job_arn #=> String
    #   resp.data.edge_packaging_job_summaries[0].edge_packaging_job_name #=> String
    #   resp.data.edge_packaging_job_summaries[0].edge_packaging_job_status #=> String, one of ["STARTING", "INPROGRESS", "COMPLETED", "FAILED", "STOPPING", "STOPPED"]
    #   resp.data.edge_packaging_job_summaries[0].compilation_job_name #=> String
    #   resp.data.edge_packaging_job_summaries[0].model_name #=> String
    #   resp.data.edge_packaging_job_summaries[0].model_version #=> String
    #   resp.data.edge_packaging_job_summaries[0].creation_time #=> Time
    #   resp.data.edge_packaging_job_summaries[0].last_modified_time #=> Time
    #   resp.data.next_token #=> String
    #
    def list_edge_packaging_jobs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListEdgePackagingJobsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListEdgePackagingJobsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListEdgePackagingJobs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListEdgePackagingJobs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListEdgePackagingJobs,
        stubs: @stubs,
        params_class: Params::ListEdgePackagingJobsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_edge_packaging_jobs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists endpoint configurations.</p>
    #
    # @param [Hash] params
    #   See {Types::ListEndpointConfigsInput}.
    #
    # @option params [String] :sort_by
    #   <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListEndpointConfig</code> request was
    #               truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
    #               endpoint configurations, use the token in the next request. </p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of training jobs to return in the response.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the endpoint configuration name. This filter returns only endpoint
    #               configurations whose name contains the specified string. </p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only endpoint configurations created before the specified
    #               time (timestamp).</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only endpoint configurations with a creation time greater
    #               than or equal to the specified time (timestamp).</p>
    #
    # @return [Types::ListEndpointConfigsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_endpoint_configs(
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     name_contains: 'NameContains',
    #     creation_time_before: Time.now,
    #     creation_time_after: Time.now
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListEndpointConfigsOutput
    #   resp.data.endpoint_configs #=> Array<EndpointConfigSummary>
    #   resp.data.endpoint_configs[0] #=> Types::EndpointConfigSummary
    #   resp.data.endpoint_configs[0].endpoint_config_name #=> String
    #   resp.data.endpoint_configs[0].endpoint_config_arn #=> String
    #   resp.data.endpoint_configs[0].creation_time #=> Time
    #   resp.data.next_token #=> String
    #
    def list_endpoint_configs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListEndpointConfigsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListEndpointConfigsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListEndpointConfigs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListEndpointConfigs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListEndpointConfigs,
        stubs: @stubs,
        params_class: Params::ListEndpointConfigsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_endpoint_configs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists endpoints.</p>
    #
    # @param [Hash] params
    #   See {Types::ListEndpointsInput}.
    #
    # @option params [String] :sort_by
    #   <p>Sorts the list of results. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of a <code>ListEndpoints</code> request was truncated, the response
    #               includes a <code>NextToken</code>. To retrieve the next set of endpoints, use the token
    #               in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of endpoints to return in the response. This value defaults to
    #               10.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in endpoint names. This filter returns only endpoints whose name contains
    #               the specified string.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only endpoints that were created before the specified time
    #               (timestamp).</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only endpoints with a creation time greater than or equal to
    #               the specified time (timestamp).</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p> A filter that returns only endpoints that were modified before the specified
    #               timestamp. </p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p> A filter that returns only endpoints that were modified after the specified
    #               timestamp. </p>
    #
    # @option params [String] :status_equals
    #   <p> A filter that returns only endpoints with the specified status.</p>
    #
    # @return [Types::ListEndpointsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_endpoints(
    #     sort_by: 'Name', # accepts ["Name", "CreationTime", "Status"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     name_contains: 'NameContains',
    #     creation_time_before: Time.now,
    #     creation_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     status_equals: 'OutOfService' # accepts ["OutOfService", "Creating", "Updating", "SystemUpdating", "RollingBack", "InService", "Deleting", "Failed"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListEndpointsOutput
    #   resp.data.endpoints #=> Array<EndpointSummary>
    #   resp.data.endpoints[0] #=> Types::EndpointSummary
    #   resp.data.endpoints[0].endpoint_name #=> String
    #   resp.data.endpoints[0].endpoint_arn #=> String
    #   resp.data.endpoints[0].creation_time #=> Time
    #   resp.data.endpoints[0].last_modified_time #=> Time
    #   resp.data.endpoints[0].endpoint_status #=> String, one of ["OutOfService", "Creating", "Updating", "SystemUpdating", "RollingBack", "InService", "Deleting", "Failed"]
    #   resp.data.next_token #=> String
    #
    def list_endpoints(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListEndpointsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListEndpointsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListEndpoints
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListEndpoints
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListEndpoints,
        stubs: @stubs,
        params_class: Params::ListEndpointsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_endpoints
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists all the experiments in your account. The list can be filtered to show only
    #       experiments that were created in a specific time range. The list can be sorted by experiment
    #       name or creation time.</p>
    #
    # @param [Hash] params
    #   See {Types::ListExperimentsInput}.
    #
    # @option params [Time] :created_after
    #   <p>A filter that returns only experiments created after the specified time.</p>
    #
    # @option params [Time] :created_before
    #   <p>A filter that returns only experiments created before the specified time.</p>
    #
    # @option params [String] :sort_by
    #   <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order. The default value is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>If the previous call to <code>ListExperiments</code> didn't return the full set of
    #         experiments, the call returns a token for getting the next set of experiments.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of experiments to return in the response. The default value is
    #         10.</p>
    #
    # @return [Types::ListExperimentsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_experiments(
    #     created_after: Time.now,
    #     created_before: Time.now,
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListExperimentsOutput
    #   resp.data.experiment_summaries #=> Array<ExperimentSummary>
    #   resp.data.experiment_summaries[0] #=> Types::ExperimentSummary
    #   resp.data.experiment_summaries[0].experiment_arn #=> String
    #   resp.data.experiment_summaries[0].experiment_name #=> String
    #   resp.data.experiment_summaries[0].display_name #=> String
    #   resp.data.experiment_summaries[0].experiment_source #=> Types::ExperimentSource
    #   resp.data.experiment_summaries[0].experiment_source.source_arn #=> String
    #   resp.data.experiment_summaries[0].experiment_source.source_type #=> String
    #   resp.data.experiment_summaries[0].creation_time #=> Time
    #   resp.data.experiment_summaries[0].last_modified_time #=> Time
    #   resp.data.next_token #=> String
    #
    def list_experiments(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListExperimentsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListExperimentsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListExperiments
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListExperiments
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListExperiments,
        stubs: @stubs,
        params_class: Params::ListExperimentsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_experiments
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>List <code>FeatureGroup</code>s based on given filter and order.</p>
    #
    # @param [Hash] params
    #   See {Types::ListFeatureGroupsInput}.
    #
    # @option params [String] :name_contains
    #   <p>A string that partially matches one or more <code>FeatureGroup</code>s names. Filters
    #               <code>FeatureGroup</code>s by name. </p>
    #
    # @option params [String] :feature_group_status_equals
    #   <p>A <code>FeatureGroup</code> status. Filters by <code>FeatureGroup</code> status. </p>
    #
    # @option params [String] :offline_store_status_equals
    #   <p>An <code>OfflineStore</code> status. Filters by <code>OfflineStore</code> status. </p>
    #
    # @option params [Time] :creation_time_after
    #   <p>Use this parameter to search for <code>FeatureGroups</code>s created after a specific
    #            date and time.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>Use this parameter to search for <code>FeatureGroups</code>s created before a specific
    #            date and time.</p>
    #
    # @option params [String] :sort_order
    #   <p>The order in which feature groups are listed.</p>
    #
    # @option params [String] :sort_by
    #   <p>The value on which the feature group list is sorted.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results returned by <code>ListFeatureGroups</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>A token to resume pagination of <code>ListFeatureGroups</code> results.</p>
    #
    # @return [Types::ListFeatureGroupsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_feature_groups(
    #     name_contains: 'NameContains',
    #     feature_group_status_equals: 'Creating', # accepts ["Creating", "Created", "CreateFailed", "Deleting", "DeleteFailed"]
    #     offline_store_status_equals: 'Active', # accepts ["Active", "Blocked", "Disabled"]
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     sort_by: 'Name', # accepts ["Name", "FeatureGroupStatus", "OfflineStoreStatus", "CreationTime"]
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListFeatureGroupsOutput
    #   resp.data.feature_group_summaries #=> Array<FeatureGroupSummary>
    #   resp.data.feature_group_summaries[0] #=> Types::FeatureGroupSummary
    #   resp.data.feature_group_summaries[0].feature_group_name #=> String
    #   resp.data.feature_group_summaries[0].feature_group_arn #=> String
    #   resp.data.feature_group_summaries[0].creation_time #=> Time
    #   resp.data.feature_group_summaries[0].feature_group_status #=> String, one of ["Creating", "Created", "CreateFailed", "Deleting", "DeleteFailed"]
    #   resp.data.feature_group_summaries[0].offline_store_status #=> Types::OfflineStoreStatus
    #   resp.data.feature_group_summaries[0].offline_store_status.status #=> String, one of ["Active", "Blocked", "Disabled"]
    #   resp.data.feature_group_summaries[0].offline_store_status.blocked_reason #=> String
    #   resp.data.next_token #=> String
    #
    def list_feature_groups(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListFeatureGroupsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListFeatureGroupsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListFeatureGroups
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListFeatureGroups
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListFeatureGroups,
        stubs: @stubs,
        params_class: Params::ListFeatureGroupsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_feature_groups
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about the flow definitions in your account.</p>
    #
    # @param [Hash] params
    #   See {Types::ListFlowDefinitionsInput}.
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only flow definitions with a creation time greater than or equal to the specified timestamp.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only flow definitions that were created before the specified timestamp.</p>
    #
    # @option params [String] :sort_order
    #   <p>An optional value that specifies whether you want the results sorted in <code>Ascending</code> or <code>Descending</code> order.</p>
    #
    # @option params [String] :next_token
    #   <p>A token to resume pagination.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The total number of items to return. If the total number of available items is more than the value specified in <code>MaxResults</code>, then a <code>NextToken</code> will be provided in the output that you can use to resume pagination.</p>
    #
    # @return [Types::ListFlowDefinitionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_flow_definitions(
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListFlowDefinitionsOutput
    #   resp.data.flow_definition_summaries #=> Array<FlowDefinitionSummary>
    #   resp.data.flow_definition_summaries[0] #=> Types::FlowDefinitionSummary
    #   resp.data.flow_definition_summaries[0].flow_definition_name #=> String
    #   resp.data.flow_definition_summaries[0].flow_definition_arn #=> String
    #   resp.data.flow_definition_summaries[0].flow_definition_status #=> String, one of ["Initializing", "Active", "Failed", "Deleting"]
    #   resp.data.flow_definition_summaries[0].creation_time #=> Time
    #   resp.data.flow_definition_summaries[0].failure_reason #=> String
    #   resp.data.next_token #=> String
    #
    def list_flow_definitions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListFlowDefinitionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListFlowDefinitionsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListFlowDefinitions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListFlowDefinitions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListFlowDefinitions,
        stubs: @stubs,
        params_class: Params::ListFlowDefinitionsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_flow_definitions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about the human task user interfaces in your account.</p>
    #
    # @param [Hash] params
    #   See {Types::ListHumanTaskUisInput}.
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only human task user interfaces with a creation time greater than or equal to the specified timestamp.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only human task user interfaces that were created before the specified timestamp.</p>
    #
    # @option params [String] :sort_order
    #   <p>An optional value that specifies whether you want the results sorted in <code>Ascending</code> or <code>Descending</code> order.</p>
    #
    # @option params [String] :next_token
    #   <p>A token to resume pagination.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The total number of items to return. If the total number of available items is more than the value specified in <code>MaxResults</code>, then a <code>NextToken</code> will be provided in the output that you can use to resume pagination.</p>
    #
    # @return [Types::ListHumanTaskUisOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_human_task_uis(
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListHumanTaskUisOutput
    #   resp.data.human_task_ui_summaries #=> Array<HumanTaskUiSummary>
    #   resp.data.human_task_ui_summaries[0] #=> Types::HumanTaskUiSummary
    #   resp.data.human_task_ui_summaries[0].human_task_ui_name #=> String
    #   resp.data.human_task_ui_summaries[0].human_task_ui_arn #=> String
    #   resp.data.human_task_ui_summaries[0].creation_time #=> Time
    #   resp.data.next_token #=> String
    #
    def list_human_task_uis(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListHumanTaskUisInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListHumanTaskUisInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListHumanTaskUis
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListHumanTaskUis
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListHumanTaskUis,
        stubs: @stubs,
        params_class: Params::ListHumanTaskUisOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_human_task_uis
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a list of <a>HyperParameterTuningJobSummary</a> objects that
    #             describe
    #             the hyperparameter tuning jobs launched in your account.</p>
    #
    # @param [Hash] params
    #   See {Types::ListHyperParameterTuningJobsInput}.
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListHyperParameterTuningJobs</code> request was
    #               truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
    #               tuning jobs, use the token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The
    #               maximum number of tuning jobs to return. The default value is
    #               10.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field to sort results by. The default is <code>Name</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Ascending</code>.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the tuning job name. This filter returns only tuning jobs whose name
    #               contains the specified string.</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only tuning jobs that were created after the specified
    #               time.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only tuning jobs that were created before the specified
    #               time.</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>A filter that returns only tuning jobs that were modified after the specified
    #               time.</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>A filter that returns only tuning jobs that were modified before the specified
    #               time.</p>
    #
    # @option params [String] :status_equals
    #   <p>A filter that returns only tuning jobs with the specified status.</p>
    #
    # @return [Types::ListHyperParameterTuningJobsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_hyper_parameter_tuning_jobs(
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     sort_by: 'Name', # accepts ["Name", "Status", "CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     name_contains: 'NameContains',
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     status_equals: 'Completed' # accepts ["Completed", "InProgress", "Failed", "Stopped", "Stopping"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListHyperParameterTuningJobsOutput
    #   resp.data.hyper_parameter_tuning_job_summaries #=> Array<HyperParameterTuningJobSummary>
    #   resp.data.hyper_parameter_tuning_job_summaries[0] #=> Types::HyperParameterTuningJobSummary
    #   resp.data.hyper_parameter_tuning_job_summaries[0].hyper_parameter_tuning_job_name #=> String
    #   resp.data.hyper_parameter_tuning_job_summaries[0].hyper_parameter_tuning_job_arn #=> String
    #   resp.data.hyper_parameter_tuning_job_summaries[0].hyper_parameter_tuning_job_status #=> String, one of ["Completed", "InProgress", "Failed", "Stopped", "Stopping"]
    #   resp.data.hyper_parameter_tuning_job_summaries[0].strategy #=> String, one of ["Bayesian", "Random"]
    #   resp.data.hyper_parameter_tuning_job_summaries[0].creation_time #=> Time
    #   resp.data.hyper_parameter_tuning_job_summaries[0].hyper_parameter_tuning_end_time #=> Time
    #   resp.data.hyper_parameter_tuning_job_summaries[0].last_modified_time #=> Time
    #   resp.data.hyper_parameter_tuning_job_summaries[0].training_job_status_counters #=> Types::TrainingJobStatusCounters
    #   resp.data.hyper_parameter_tuning_job_summaries[0].training_job_status_counters.completed #=> Integer
    #   resp.data.hyper_parameter_tuning_job_summaries[0].training_job_status_counters.in_progress #=> Integer
    #   resp.data.hyper_parameter_tuning_job_summaries[0].training_job_status_counters.retryable_error #=> Integer
    #   resp.data.hyper_parameter_tuning_job_summaries[0].training_job_status_counters.non_retryable_error #=> Integer
    #   resp.data.hyper_parameter_tuning_job_summaries[0].training_job_status_counters.stopped #=> Integer
    #   resp.data.hyper_parameter_tuning_job_summaries[0].objective_status_counters #=> Types::ObjectiveStatusCounters
    #   resp.data.hyper_parameter_tuning_job_summaries[0].objective_status_counters.succeeded #=> Integer
    #   resp.data.hyper_parameter_tuning_job_summaries[0].objective_status_counters.pending #=> Integer
    #   resp.data.hyper_parameter_tuning_job_summaries[0].objective_status_counters.failed #=> Integer
    #   resp.data.hyper_parameter_tuning_job_summaries[0].resource_limits #=> Types::ResourceLimits
    #   resp.data.hyper_parameter_tuning_job_summaries[0].resource_limits.max_number_of_training_jobs #=> Integer
    #   resp.data.hyper_parameter_tuning_job_summaries[0].resource_limits.max_parallel_training_jobs #=> Integer
    #   resp.data.next_token #=> String
    #
    def list_hyper_parameter_tuning_jobs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListHyperParameterTuningJobsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListHyperParameterTuningJobsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListHyperParameterTuningJobs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListHyperParameterTuningJobs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListHyperParameterTuningJobs,
        stubs: @stubs,
        params_class: Params::ListHyperParameterTuningJobsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_hyper_parameter_tuning_jobs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the versions of a specified image and their properties. The list can be filtered
    #         by creation time or modified time.</p>
    #
    # @param [Hash] params
    #   See {Types::ListImageVersionsInput}.
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only versions created on or after the specified time.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only versions created on or before the specified time.</p>
    #
    # @option params [String] :image_name
    #   <p>The name of the image to list the versions of.</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>A filter that returns only versions modified on or after the specified time.</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>A filter that returns only versions modified on or before the specified time.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of versions to return in the response. The default value is 10. </p>
    #
    # @option params [String] :next_token
    #   <p>If the previous call to <code>ListImageVersions</code> didn't return the full set of
    #           versions, the call returns a token for getting the next set of versions.</p>
    #
    # @option params [String] :sort_by
    #   <p>The property used to sort results. The default value is <code>CREATION_TIME</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order. The default value is <code>DESCENDING</code>.</p>
    #
    # @return [Types::ListImageVersionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_image_versions(
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     image_name: 'ImageName', # required
    #     last_modified_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     sort_by: 'CREATION_TIME', # accepts ["CREATION_TIME", "LAST_MODIFIED_TIME", "VERSION"]
    #     sort_order: 'ASCENDING' # accepts ["ASCENDING", "DESCENDING"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListImageVersionsOutput
    #   resp.data.image_versions #=> Array<ImageVersion>
    #   resp.data.image_versions[0] #=> Types::ImageVersion
    #   resp.data.image_versions[0].creation_time #=> Time
    #   resp.data.image_versions[0].failure_reason #=> String
    #   resp.data.image_versions[0].image_arn #=> String
    #   resp.data.image_versions[0].image_version_arn #=> String
    #   resp.data.image_versions[0].image_version_status #=> String, one of ["CREATING", "CREATED", "CREATE_FAILED", "DELETING", "DELETE_FAILED"]
    #   resp.data.image_versions[0].last_modified_time #=> Time
    #   resp.data.image_versions[0].version #=> Integer
    #   resp.data.next_token #=> String
    #
    def list_image_versions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListImageVersionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListImageVersionsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListImageVersions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::ListImageVersions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListImageVersions,
        stubs: @stubs,
        params_class: Params::ListImageVersionsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_image_versions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the images in your account and their properties. The list can be filtered by
    #         creation time or modified time, and whether the image name contains a specified string.</p>
    #
    # @param [Hash] params
    #   See {Types::ListImagesInput}.
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only images created on or after the specified time.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only images created on or before the specified time.</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>A filter that returns only images modified on or after the specified time.</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>A filter that returns only images modified on or before the specified time.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of images to return in the response. The default value is 10. </p>
    #
    # @option params [String] :name_contains
    #   <p>A filter that returns only images whose name contains the specified string.</p>
    #
    # @option params [String] :next_token
    #   <p>If the previous call to <code>ListImages</code> didn't return the full set of images,
    #           the call returns a token for getting the next set of images.</p>
    #
    # @option params [String] :sort_by
    #   <p>The property used to sort results. The default value is <code>CREATION_TIME</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order. The default value is <code>DESCENDING</code>.</p>
    #
    # @return [Types::ListImagesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_images(
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     max_results: 1,
    #     name_contains: 'NameContains',
    #     next_token: 'NextToken',
    #     sort_by: 'CREATION_TIME', # accepts ["CREATION_TIME", "LAST_MODIFIED_TIME", "IMAGE_NAME"]
    #     sort_order: 'ASCENDING' # accepts ["ASCENDING", "DESCENDING"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListImagesOutput
    #   resp.data.images #=> Array<Image>
    #   resp.data.images[0] #=> Types::Image
    #   resp.data.images[0].creation_time #=> Time
    #   resp.data.images[0].description #=> String
    #   resp.data.images[0].display_name #=> String
    #   resp.data.images[0].failure_reason #=> String
    #   resp.data.images[0].image_arn #=> String
    #   resp.data.images[0].image_name #=> String
    #   resp.data.images[0].image_status #=> String, one of ["CREATING", "CREATED", "CREATE_FAILED", "UPDATING", "UPDATE_FAILED", "DELETING", "DELETE_FAILED"]
    #   resp.data.images[0].last_modified_time #=> Time
    #   resp.data.next_token #=> String
    #
    def list_images(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListImagesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListImagesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListImages
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListImages
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListImages,
        stubs: @stubs,
        params_class: Params::ListImagesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_images
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists recommendation jobs that satisfy various filters.</p>
    #
    # @param [Hash] params
    #   See {Types::ListInferenceRecommendationsJobsInput}.
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only jobs created after the specified time (timestamp).</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only jobs created before the specified time (timestamp).</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>A filter that returns only jobs that were last modified after the specified time (timestamp).</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>A filter that returns only jobs that were last modified before the specified time (timestamp).</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the job name. This filter returns only recommendations whose name contains the specified string.</p>
    #
    # @option params [String] :status_equals
    #   <p>A filter that retrieves only inference recommendations jobs with a specific status.</p>
    #
    # @option params [String] :sort_by
    #   <p>The parameter by which to sort the results.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for the results.</p>
    #
    # @option params [String] :next_token
    #   <p>If the response to a previous <code>ListInferenceRecommendationsJobsRequest</code> request
    #            was truncated, the response includes a <code>NextToken</code>. To retrieve the next set
    #            of recommendations, use the token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of recommendations to return in the response.</p>
    #
    # @return [Types::ListInferenceRecommendationsJobsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_inference_recommendations_jobs(
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     name_contains: 'NameContains',
    #     status_equals: 'PENDING', # accepts ["PENDING", "IN_PROGRESS", "COMPLETED", "FAILED", "STOPPING", "STOPPED"]
    #     sort_by: 'Name', # accepts ["Name", "CreationTime", "Status"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListInferenceRecommendationsJobsOutput
    #   resp.data.inference_recommendations_jobs #=> Array<InferenceRecommendationsJob>
    #   resp.data.inference_recommendations_jobs[0] #=> Types::InferenceRecommendationsJob
    #   resp.data.inference_recommendations_jobs[0].job_name #=> String
    #   resp.data.inference_recommendations_jobs[0].job_description #=> String
    #   resp.data.inference_recommendations_jobs[0].job_type #=> String, one of ["Default", "Advanced"]
    #   resp.data.inference_recommendations_jobs[0].job_arn #=> String
    #   resp.data.inference_recommendations_jobs[0].status #=> String, one of ["PENDING", "IN_PROGRESS", "COMPLETED", "FAILED", "STOPPING", "STOPPED"]
    #   resp.data.inference_recommendations_jobs[0].creation_time #=> Time
    #   resp.data.inference_recommendations_jobs[0].completion_time #=> Time
    #   resp.data.inference_recommendations_jobs[0].role_arn #=> String
    #   resp.data.inference_recommendations_jobs[0].last_modified_time #=> Time
    #   resp.data.inference_recommendations_jobs[0].failure_reason #=> String
    #   resp.data.next_token #=> String
    #
    def list_inference_recommendations_jobs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListInferenceRecommendationsJobsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListInferenceRecommendationsJobsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListInferenceRecommendationsJobs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListInferenceRecommendationsJobs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListInferenceRecommendationsJobs,
        stubs: @stubs,
        params_class: Params::ListInferenceRecommendationsJobsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_inference_recommendations_jobs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a list of labeling jobs.</p>
    #
    # @param [Hash] params
    #   See {Types::ListLabelingJobsInput}.
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only labeling jobs created after the specified time
    #               (timestamp).</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only labeling jobs created before the specified time
    #               (timestamp).</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>A filter that returns only labeling jobs modified after the specified time
    #               (timestamp).</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>A filter that returns only labeling jobs modified before the specified time
    #               (timestamp).</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of labeling jobs to return in each page of the response.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListLabelingJobs</code> request was truncated, the
    #               response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs,
    #               use the token in the next request.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the labeling job name. This filter returns only labeling jobs whose name
    #               contains the specified string.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Ascending</code>.</p>
    #
    # @option params [String] :status_equals
    #   <p>A filter that retrieves only labeling jobs with a specific status.</p>
    #
    # @return [Types::ListLabelingJobsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_labeling_jobs(
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     name_contains: 'NameContains',
    #     sort_by: 'Name', # accepts ["Name", "CreationTime", "Status"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     status_equals: 'Initializing' # accepts ["Initializing", "InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListLabelingJobsOutput
    #   resp.data.labeling_job_summary_list #=> Array<LabelingJobSummary>
    #   resp.data.labeling_job_summary_list[0] #=> Types::LabelingJobSummary
    #   resp.data.labeling_job_summary_list[0].labeling_job_name #=> String
    #   resp.data.labeling_job_summary_list[0].labeling_job_arn #=> String
    #   resp.data.labeling_job_summary_list[0].creation_time #=> Time
    #   resp.data.labeling_job_summary_list[0].last_modified_time #=> Time
    #   resp.data.labeling_job_summary_list[0].labeling_job_status #=> String, one of ["Initializing", "InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.labeling_job_summary_list[0].label_counters #=> Types::LabelCounters
    #   resp.data.labeling_job_summary_list[0].label_counters.total_labeled #=> Integer
    #   resp.data.labeling_job_summary_list[0].label_counters.human_labeled #=> Integer
    #   resp.data.labeling_job_summary_list[0].label_counters.machine_labeled #=> Integer
    #   resp.data.labeling_job_summary_list[0].label_counters.failed_non_retryable_error #=> Integer
    #   resp.data.labeling_job_summary_list[0].label_counters.unlabeled #=> Integer
    #   resp.data.labeling_job_summary_list[0].workteam_arn #=> String
    #   resp.data.labeling_job_summary_list[0].pre_human_task_lambda_arn #=> String
    #   resp.data.labeling_job_summary_list[0].annotation_consolidation_lambda_arn #=> String
    #   resp.data.labeling_job_summary_list[0].failure_reason #=> String
    #   resp.data.labeling_job_summary_list[0].labeling_job_output #=> Types::LabelingJobOutput
    #   resp.data.labeling_job_summary_list[0].labeling_job_output.output_dataset_s3_uri #=> String
    #   resp.data.labeling_job_summary_list[0].labeling_job_output.final_active_learning_model_arn #=> String
    #   resp.data.labeling_job_summary_list[0].input_config #=> Types::LabelingJobInputConfig
    #   resp.data.labeling_job_summary_list[0].input_config.data_source #=> Types::LabelingJobDataSource
    #   resp.data.labeling_job_summary_list[0].input_config.data_source.s3_data_source #=> Types::LabelingJobS3DataSource
    #   resp.data.labeling_job_summary_list[0].input_config.data_source.s3_data_source.manifest_s3_uri #=> String
    #   resp.data.labeling_job_summary_list[0].input_config.data_source.sns_data_source #=> Types::LabelingJobSnsDataSource
    #   resp.data.labeling_job_summary_list[0].input_config.data_source.sns_data_source.sns_topic_arn #=> String
    #   resp.data.labeling_job_summary_list[0].input_config.data_attributes #=> Types::LabelingJobDataAttributes
    #   resp.data.labeling_job_summary_list[0].input_config.data_attributes.content_classifiers #=> Array<String>
    #   resp.data.labeling_job_summary_list[0].input_config.data_attributes.content_classifiers[0] #=> String, one of ["FreeOfPersonallyIdentifiableInformation", "FreeOfAdultContent"]
    #   resp.data.next_token #=> String
    #
    def list_labeling_jobs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListLabelingJobsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListLabelingJobsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListLabelingJobs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListLabelingJobs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListLabelingJobs,
        stubs: @stubs,
        params_class: Params::ListLabelingJobsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_labeling_jobs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a list of labeling jobs assigned to a specified work team.</p>
    #
    # @param [Hash] params
    #   See {Types::ListLabelingJobsForWorkteamInput}.
    #
    # @option params [String] :workteam_arn
    #   <p>The Amazon Resource Name (ARN) of the work team for which you want to see labeling
    #               jobs for.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of labeling jobs to return in each page of the response.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListLabelingJobsForWorkteam</code> request was
    #               truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
    #               labeling jobs, use the token in the next request.</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only labeling jobs created after the specified time
    #               (timestamp).</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only labeling jobs created before the specified time
    #               (timestamp).</p>
    #
    # @option params [String] :job_reference_code_contains
    #   <p>A filter the limits jobs to only the ones whose job reference code contains the
    #               specified string.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Ascending</code>.</p>
    #
    # @return [Types::ListLabelingJobsForWorkteamOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_labeling_jobs_for_workteam(
    #     workteam_arn: 'WorkteamArn', # required
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     job_reference_code_contains: 'JobReferenceCodeContains',
    #     sort_by: 'CreationTime', # accepts ["CreationTime"]
    #     sort_order: 'Ascending' # accepts ["Ascending", "Descending"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListLabelingJobsForWorkteamOutput
    #   resp.data.labeling_job_summary_list #=> Array<LabelingJobForWorkteamSummary>
    #   resp.data.labeling_job_summary_list[0] #=> Types::LabelingJobForWorkteamSummary
    #   resp.data.labeling_job_summary_list[0].labeling_job_name #=> String
    #   resp.data.labeling_job_summary_list[0].job_reference_code #=> String
    #   resp.data.labeling_job_summary_list[0].work_requester_account_id #=> String
    #   resp.data.labeling_job_summary_list[0].creation_time #=> Time
    #   resp.data.labeling_job_summary_list[0].label_counters #=> Types::LabelCountersForWorkteam
    #   resp.data.labeling_job_summary_list[0].label_counters.human_labeled #=> Integer
    #   resp.data.labeling_job_summary_list[0].label_counters.pending_human #=> Integer
    #   resp.data.labeling_job_summary_list[0].label_counters.total #=> Integer
    #   resp.data.labeling_job_summary_list[0].number_of_human_workers_per_data_object #=> Integer
    #   resp.data.next_token #=> String
    #
    def list_labeling_jobs_for_workteam(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListLabelingJobsForWorkteamInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListLabelingJobsForWorkteamInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListLabelingJobsForWorkteam
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::ListLabelingJobsForWorkteam
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListLabelingJobsForWorkteam,
        stubs: @stubs,
        params_class: Params::ListLabelingJobsForWorkteamOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_labeling_jobs_for_workteam
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>A list of lineage groups shared with your Amazon Web Services account.
    #          For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html">
    #             Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ListLineageGroupsInput}.
    #
    # @option params [Time] :created_after
    #   <p>A timestamp to filter against lineage groups created after a certain point in time.</p>
    #
    # @option params [Time] :created_before
    #   <p>A timestamp to filter against lineage groups created before a certain point in time.</p>
    #
    # @option params [String] :sort_by
    #   <p>The parameter by which to sort the results. The default is
    #            <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>If the response is truncated, SageMaker returns this token. To retrieve the next set of
    #            algorithms, use it in the subsequent request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of endpoints to return in the response. This value defaults to
    #            10.</p>
    #
    # @return [Types::ListLineageGroupsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_lineage_groups(
    #     created_after: Time.now,
    #     created_before: Time.now,
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListLineageGroupsOutput
    #   resp.data.lineage_group_summaries #=> Array<LineageGroupSummary>
    #   resp.data.lineage_group_summaries[0] #=> Types::LineageGroupSummary
    #   resp.data.lineage_group_summaries[0].lineage_group_arn #=> String
    #   resp.data.lineage_group_summaries[0].lineage_group_name #=> String
    #   resp.data.lineage_group_summaries[0].display_name #=> String
    #   resp.data.lineage_group_summaries[0].creation_time #=> Time
    #   resp.data.lineage_group_summaries[0].last_modified_time #=> Time
    #   resp.data.next_token #=> String
    #
    def list_lineage_groups(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListLineageGroupsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListLineageGroupsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListLineageGroups
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListLineageGroups
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListLineageGroups,
        stubs: @stubs,
        params_class: Params::ListLineageGroupsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_lineage_groups
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists model bias jobs definitions that satisfy various filters.</p>
    #
    # @param [Hash] params
    #   See {Types::ListModelBiasJobDefinitionsInput}.
    #
    # @option params [String] :endpoint_name
    #   <p>Name of the endpoint to monitor for model bias.</p>
    #
    # @option params [String] :sort_by
    #   <p>Whether to sort results by the <code>Name</code> or <code>CreationTime</code> field. The
    #            default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.
    #            The default is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token returned if the response is truncated. To retrieve the next set of job
    #            executions, use it in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of model bias jobs to return in the response. The default value is
    #            10.</p>
    #
    # @option params [String] :name_contains
    #   <p>Filter for model bias jobs whose name contains a specified string.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only model bias jobs created before a specified time.</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only model bias jobs created after a specified time.</p>
    #
    # @return [Types::ListModelBiasJobDefinitionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_model_bias_job_definitions(
    #     endpoint_name: 'EndpointName',
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     name_contains: 'NameContains',
    #     creation_time_before: Time.now,
    #     creation_time_after: Time.now
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListModelBiasJobDefinitionsOutput
    #   resp.data.job_definition_summaries #=> Array<MonitoringJobDefinitionSummary>
    #   resp.data.job_definition_summaries[0] #=> Types::MonitoringJobDefinitionSummary
    #   resp.data.job_definition_summaries[0].monitoring_job_definition_name #=> String
    #   resp.data.job_definition_summaries[0].monitoring_job_definition_arn #=> String
    #   resp.data.job_definition_summaries[0].creation_time #=> Time
    #   resp.data.job_definition_summaries[0].endpoint_name #=> String
    #   resp.data.next_token #=> String
    #
    def list_model_bias_job_definitions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListModelBiasJobDefinitionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListModelBiasJobDefinitionsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListModelBiasJobDefinitions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListModelBiasJobDefinitions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListModelBiasJobDefinitions,
        stubs: @stubs,
        params_class: Params::ListModelBiasJobDefinitionsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_model_bias_job_definitions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists model explainability job definitions that satisfy various filters.</p>
    #
    # @param [Hash] params
    #   See {Types::ListModelExplainabilityJobDefinitionsInput}.
    #
    # @option params [String] :endpoint_name
    #   <p>Name of the endpoint to monitor for model explainability.</p>
    #
    # @option params [String] :sort_by
    #   <p>Whether to sort results by the <code>Name</code> or <code>CreationTime</code> field. The
    #            default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.
    #            The default is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token returned if the response is truncated. To retrieve the next set of job
    #            executions, use it in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of jobs to return in the response. The default value is 10.</p>
    #
    # @option params [String] :name_contains
    #   <p>Filter for model explainability jobs whose name contains a specified string.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only model explainability jobs created before a specified
    #            time.</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only model explainability jobs created after a specified
    #            time.</p>
    #
    # @return [Types::ListModelExplainabilityJobDefinitionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_model_explainability_job_definitions(
    #     endpoint_name: 'EndpointName',
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     name_contains: 'NameContains',
    #     creation_time_before: Time.now,
    #     creation_time_after: Time.now
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListModelExplainabilityJobDefinitionsOutput
    #   resp.data.job_definition_summaries #=> Array<MonitoringJobDefinitionSummary>
    #   resp.data.job_definition_summaries[0] #=> Types::MonitoringJobDefinitionSummary
    #   resp.data.job_definition_summaries[0].monitoring_job_definition_name #=> String
    #   resp.data.job_definition_summaries[0].monitoring_job_definition_arn #=> String
    #   resp.data.job_definition_summaries[0].creation_time #=> Time
    #   resp.data.job_definition_summaries[0].endpoint_name #=> String
    #   resp.data.next_token #=> String
    #
    def list_model_explainability_job_definitions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListModelExplainabilityJobDefinitionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListModelExplainabilityJobDefinitionsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListModelExplainabilityJobDefinitions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListModelExplainabilityJobDefinitions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListModelExplainabilityJobDefinitions,
        stubs: @stubs,
        params_class: Params::ListModelExplainabilityJobDefinitionsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_model_explainability_job_definitions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the domain, framework, task, and model name of standard
    #           machine learning models found in common model zoos.</p>
    #
    # @param [Hash] params
    #   See {Types::ListModelMetadataInput}.
    #
    # @option params [ModelMetadataSearchExpression] :search_expression
    #   <p>One or more filters that searches for the specified resource or resources
    #             in a search. All resource objects that satisfy the expression's condition are
    #             included in the search results. Specify the  Framework, FrameworkVersion, Domain
    #             or Task to filter supported. Filter names and values are case-sensitive.</p>
    #
    # @option params [String] :next_token
    #   <p>If the response to a previous <code>ListModelMetadataResponse</code> request was truncated,
    #              the response includes a NextToken. To retrieve the next set of model metadata,
    #              use the token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of models to return in the response.</p>
    #
    # @return [Types::ListModelMetadataOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_model_metadata(
    #     search_expression: {
    #       filters: [
    #         {
    #           name: 'Domain', # required - accepts ["Domain", "Framework", "Task", "FrameworkVersion"]
    #           value: 'Value' # required
    #         }
    #       ]
    #     },
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListModelMetadataOutput
    #   resp.data.model_metadata_summaries #=> Array<ModelMetadataSummary>
    #   resp.data.model_metadata_summaries[0] #=> Types::ModelMetadataSummary
    #   resp.data.model_metadata_summaries[0].domain #=> String
    #   resp.data.model_metadata_summaries[0].framework #=> String
    #   resp.data.model_metadata_summaries[0].task #=> String
    #   resp.data.model_metadata_summaries[0].model #=> String
    #   resp.data.model_metadata_summaries[0].framework_version #=> String
    #   resp.data.next_token #=> String
    #
    def list_model_metadata(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListModelMetadataInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListModelMetadataInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListModelMetadata
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListModelMetadata
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListModelMetadata,
        stubs: @stubs,
        params_class: Params::ListModelMetadataOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_model_metadata
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a list of the model groups in your Amazon Web Services account.</p>
    #
    # @param [Hash] params
    #   See {Types::ListModelPackageGroupsInput}.
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only model groups created after the specified time.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only model groups created before the specified time.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in the response.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the model group name. This filter returns only model groups whose name
    #               contains the specified string.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListModelPackageGroups</code> request was
    #               truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
    #               model groups, use the token in the next request.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Ascending</code>.</p>
    #
    # @return [Types::ListModelPackageGroupsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_model_package_groups(
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     max_results: 1,
    #     name_contains: 'NameContains',
    #     next_token: 'NextToken',
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending' # accepts ["Ascending", "Descending"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListModelPackageGroupsOutput
    #   resp.data.model_package_group_summary_list #=> Array<ModelPackageGroupSummary>
    #   resp.data.model_package_group_summary_list[0] #=> Types::ModelPackageGroupSummary
    #   resp.data.model_package_group_summary_list[0].model_package_group_name #=> String
    #   resp.data.model_package_group_summary_list[0].model_package_group_arn #=> String
    #   resp.data.model_package_group_summary_list[0].model_package_group_description #=> String
    #   resp.data.model_package_group_summary_list[0].creation_time #=> Time
    #   resp.data.model_package_group_summary_list[0].model_package_group_status #=> String, one of ["Pending", "InProgress", "Completed", "Failed", "Deleting", "DeleteFailed"]
    #   resp.data.next_token #=> String
    #
    def list_model_package_groups(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListModelPackageGroupsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListModelPackageGroupsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListModelPackageGroups
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListModelPackageGroups
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListModelPackageGroups,
        stubs: @stubs,
        params_class: Params::ListModelPackageGroupsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_model_package_groups
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the model packages that have been created.</p>
    #
    # @param [Hash] params
    #   See {Types::ListModelPackagesInput}.
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only model packages created after the specified time
    #               (timestamp).</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only model packages created before the specified time
    #               (timestamp).</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of model packages to return in the response.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the model package name. This filter returns only model packages whose name
    #               contains the specified string.</p>
    #
    # @option params [String] :model_approval_status
    #   <p>A filter that returns only the model packages with the specified approval
    #               status.</p>
    #
    # @option params [String] :model_package_group_name
    #   <p>A filter that returns only model versions that belong to the specified model group.</p>
    #
    # @option params [String] :model_package_type
    #   <p>A filter that returns only the model packages of the specified type. This can be one
    #               of the following values.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>UNVERSIONED</code> - List only unversioined models.
    #                       This is the default value if no <code>ModelPackageType</code> is specified.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>VERSIONED</code> - List only versioned models.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>BOTH</code> - List both versioned and unversioned models.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :next_token
    #   <p>If the response to a previous <code>ListModelPackages</code> request was truncated,
    #               the response includes a <code>NextToken</code>. To retrieve the next set of model
    #               packages, use the token in the next request.</p>
    #
    # @option params [String] :sort_by
    #   <p>The parameter by which to sort the results. The default is
    #               <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for the results. The default is <code>Ascending</code>.</p>
    #
    # @return [Types::ListModelPackagesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_model_packages(
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     max_results: 1,
    #     name_contains: 'NameContains',
    #     model_approval_status: 'Approved', # accepts ["Approved", "Rejected", "PendingManualApproval"]
    #     model_package_group_name: 'ModelPackageGroupName',
    #     model_package_type: 'Versioned', # accepts ["Versioned", "Unversioned", "Both"]
    #     next_token: 'NextToken',
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending' # accepts ["Ascending", "Descending"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListModelPackagesOutput
    #   resp.data.model_package_summary_list #=> Array<ModelPackageSummary>
    #   resp.data.model_package_summary_list[0] #=> Types::ModelPackageSummary
    #   resp.data.model_package_summary_list[0].model_package_name #=> String
    #   resp.data.model_package_summary_list[0].model_package_group_name #=> String
    #   resp.data.model_package_summary_list[0].model_package_version #=> Integer
    #   resp.data.model_package_summary_list[0].model_package_arn #=> String
    #   resp.data.model_package_summary_list[0].model_package_description #=> String
    #   resp.data.model_package_summary_list[0].creation_time #=> Time
    #   resp.data.model_package_summary_list[0].model_package_status #=> String, one of ["Pending", "InProgress", "Completed", "Failed", "Deleting"]
    #   resp.data.model_package_summary_list[0].model_approval_status #=> String, one of ["Approved", "Rejected", "PendingManualApproval"]
    #   resp.data.next_token #=> String
    #
    def list_model_packages(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListModelPackagesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListModelPackagesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListModelPackages
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListModelPackages
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListModelPackages,
        stubs: @stubs,
        params_class: Params::ListModelPackagesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_model_packages
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a list of model quality monitoring job definitions in your account.</p>
    #
    # @param [Hash] params
    #   See {Types::ListModelQualityJobDefinitionsInput}.
    #
    # @option params [String] :endpoint_name
    #   <p>A filter that returns only model quality monitoring job definitions that are associated
    #            with the specified endpoint.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListModelQualityJobDefinitions</code> request was
    #            truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
    #            model quality monitoring job definitions, use the token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a call to
    #               <code>ListModelQualityJobDefinitions</code>.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the transform job name. This filter returns only model quality monitoring
    #            job definitions whose name contains the specified string.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only model quality monitoring job definitions created before the
    #            specified time.</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only model quality monitoring job definitions created after the
    #            specified time.</p>
    #
    # @return [Types::ListModelQualityJobDefinitionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_model_quality_job_definitions(
    #     endpoint_name: 'EndpointName',
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     name_contains: 'NameContains',
    #     creation_time_before: Time.now,
    #     creation_time_after: Time.now
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListModelQualityJobDefinitionsOutput
    #   resp.data.job_definition_summaries #=> Array<MonitoringJobDefinitionSummary>
    #   resp.data.job_definition_summaries[0] #=> Types::MonitoringJobDefinitionSummary
    #   resp.data.job_definition_summaries[0].monitoring_job_definition_name #=> String
    #   resp.data.job_definition_summaries[0].monitoring_job_definition_arn #=> String
    #   resp.data.job_definition_summaries[0].creation_time #=> Time
    #   resp.data.job_definition_summaries[0].endpoint_name #=> String
    #   resp.data.next_token #=> String
    #
    def list_model_quality_job_definitions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListModelQualityJobDefinitionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListModelQualityJobDefinitionsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListModelQualityJobDefinitions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListModelQualityJobDefinitions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListModelQualityJobDefinitions,
        stubs: @stubs,
        params_class: Params::ListModelQualityJobDefinitionsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_model_quality_job_definitions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists models created with the <code>CreateModel</code> API.</p>
    #
    # @param [Hash] params
    #   See {Types::ListModelsInput}.
    #
    # @option params [String] :sort_by
    #   <p>Sorts the list of results. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>If the response to a previous <code>ListModels</code> request was truncated, the
    #               response includes a <code>NextToken</code>. To retrieve the next set of models, use the
    #               token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of models to return in the response.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the model name. This filter returns only models whose
    #               name contains the specified string.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only models created before the specified time
    #               (timestamp).</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only models with a creation time greater than or equal to the
    #               specified time (timestamp).</p>
    #
    # @return [Types::ListModelsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_models(
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     name_contains: 'NameContains',
    #     creation_time_before: Time.now,
    #     creation_time_after: Time.now
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListModelsOutput
    #   resp.data.models #=> Array<ModelSummary>
    #   resp.data.models[0] #=> Types::ModelSummary
    #   resp.data.models[0].model_name #=> String
    #   resp.data.models[0].model_arn #=> String
    #   resp.data.models[0].creation_time #=> Time
    #   resp.data.next_token #=> String
    #
    def list_models(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListModelsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListModelsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListModels
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListModels
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListModels,
        stubs: @stubs,
        params_class: Params::ListModelsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_models
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns list of all monitoring job executions.</p>
    #
    # @param [Hash] params
    #   See {Types::ListMonitoringExecutionsInput}.
    #
    # @option params [String] :monitoring_schedule_name
    #   <p>Name of a specific schedule to fetch jobs for.</p>
    #
    # @option params [String] :endpoint_name
    #   <p>Name of a specific endpoint to fetch jobs for.</p>
    #
    # @option params [String] :sort_by
    #   <p>Whether to sort results by <code>Status</code>, <code>CreationTime</code>,
    #               <code>ScheduledTime</code> field. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.
    #            The default is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token returned if the response is truncated. To retrieve the next set of job
    #            executions, use it in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of jobs to return in the response. The default value is 10.</p>
    #
    # @option params [Time] :scheduled_time_before
    #   <p>Filter for jobs scheduled before a specified time.</p>
    #
    # @option params [Time] :scheduled_time_after
    #   <p>Filter for jobs scheduled after a specified time.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only jobs created before a specified time.</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only jobs created after a specified time.</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>A filter that returns only jobs modified after a specified time.</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>A filter that returns only jobs modified before a specified time.</p>
    #
    # @option params [String] :status_equals
    #   <p>A filter that retrieves only jobs with a specific status.</p>
    #
    # @option params [String] :monitoring_job_definition_name
    #   <p>Gets a list of the monitoring job runs of the specified monitoring job
    #            definitions.</p>
    #
    # @option params [String] :monitoring_type_equals
    #   <p>A filter that returns only the monitoring job runs of the specified monitoring
    #            type.</p>
    #
    # @return [Types::ListMonitoringExecutionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_monitoring_executions(
    #     monitoring_schedule_name: 'MonitoringScheduleName',
    #     endpoint_name: 'EndpointName',
    #     sort_by: 'CreationTime', # accepts ["CreationTime", "ScheduledTime", "Status"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     scheduled_time_before: Time.now,
    #     scheduled_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     creation_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     status_equals: 'Pending', # accepts ["Pending", "Completed", "CompletedWithViolations", "InProgress", "Failed", "Stopping", "Stopped"]
    #     monitoring_job_definition_name: 'MonitoringJobDefinitionName',
    #     monitoring_type_equals: 'DataQuality' # accepts ["DataQuality", "ModelQuality", "ModelBias", "ModelExplainability"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListMonitoringExecutionsOutput
    #   resp.data.monitoring_execution_summaries #=> Array<MonitoringExecutionSummary>
    #   resp.data.monitoring_execution_summaries[0] #=> Types::MonitoringExecutionSummary
    #   resp.data.monitoring_execution_summaries[0].monitoring_schedule_name #=> String
    #   resp.data.monitoring_execution_summaries[0].scheduled_time #=> Time
    #   resp.data.monitoring_execution_summaries[0].creation_time #=> Time
    #   resp.data.monitoring_execution_summaries[0].last_modified_time #=> Time
    #   resp.data.monitoring_execution_summaries[0].monitoring_execution_status #=> String, one of ["Pending", "Completed", "CompletedWithViolations", "InProgress", "Failed", "Stopping", "Stopped"]
    #   resp.data.monitoring_execution_summaries[0].processing_job_arn #=> String
    #   resp.data.monitoring_execution_summaries[0].endpoint_name #=> String
    #   resp.data.monitoring_execution_summaries[0].failure_reason #=> String
    #   resp.data.monitoring_execution_summaries[0].monitoring_job_definition_name #=> String
    #   resp.data.monitoring_execution_summaries[0].monitoring_type #=> String, one of ["DataQuality", "ModelQuality", "ModelBias", "ModelExplainability"]
    #   resp.data.next_token #=> String
    #
    def list_monitoring_executions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListMonitoringExecutionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListMonitoringExecutionsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListMonitoringExecutions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListMonitoringExecutions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListMonitoringExecutions,
        stubs: @stubs,
        params_class: Params::ListMonitoringExecutionsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_monitoring_executions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns list of all monitoring schedules.</p>
    #
    # @param [Hash] params
    #   See {Types::ListMonitoringSchedulesInput}.
    #
    # @option params [String] :endpoint_name
    #   <p>Name of a specific endpoint to fetch schedules for.</p>
    #
    # @option params [String] :sort_by
    #   <p>Whether to sort results by <code>Status</code>, <code>CreationTime</code>,
    #               <code>ScheduledTime</code> field. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.
    #            The default is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token returned if the response is truncated. To retrieve the next set of job
    #            executions, use it in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of jobs to return in the response. The default value is 10.</p>
    #
    # @option params [String] :name_contains
    #   <p>Filter for monitoring schedules whose name contains a specified string.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only monitoring schedules created before a specified time.</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only monitoring schedules created after a specified time.</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>A filter that returns only monitoring schedules modified before a specified time.</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>A filter that returns only monitoring schedules modified after a specified time.</p>
    #
    # @option params [String] :status_equals
    #   <p>A filter that returns only monitoring schedules modified before a specified time.</p>
    #
    # @option params [String] :monitoring_job_definition_name
    #   <p>Gets a list of the monitoring schedules for the specified monitoring job
    #            definition.</p>
    #
    # @option params [String] :monitoring_type_equals
    #   <p>A filter that returns only the monitoring schedules for the specified monitoring
    #            type.</p>
    #
    # @return [Types::ListMonitoringSchedulesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_monitoring_schedules(
    #     endpoint_name: 'EndpointName',
    #     sort_by: 'Name', # accepts ["Name", "CreationTime", "Status"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     name_contains: 'NameContains',
    #     creation_time_before: Time.now,
    #     creation_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     status_equals: 'Pending', # accepts ["Pending", "Failed", "Scheduled", "Stopped"]
    #     monitoring_job_definition_name: 'MonitoringJobDefinitionName',
    #     monitoring_type_equals: 'DataQuality' # accepts ["DataQuality", "ModelQuality", "ModelBias", "ModelExplainability"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListMonitoringSchedulesOutput
    #   resp.data.monitoring_schedule_summaries #=> Array<MonitoringScheduleSummary>
    #   resp.data.monitoring_schedule_summaries[0] #=> Types::MonitoringScheduleSummary
    #   resp.data.monitoring_schedule_summaries[0].monitoring_schedule_name #=> String
    #   resp.data.monitoring_schedule_summaries[0].monitoring_schedule_arn #=> String
    #   resp.data.monitoring_schedule_summaries[0].creation_time #=> Time
    #   resp.data.monitoring_schedule_summaries[0].last_modified_time #=> Time
    #   resp.data.monitoring_schedule_summaries[0].monitoring_schedule_status #=> String, one of ["Pending", "Failed", "Scheduled", "Stopped"]
    #   resp.data.monitoring_schedule_summaries[0].endpoint_name #=> String
    #   resp.data.monitoring_schedule_summaries[0].monitoring_job_definition_name #=> String
    #   resp.data.monitoring_schedule_summaries[0].monitoring_type #=> String, one of ["DataQuality", "ModelQuality", "ModelBias", "ModelExplainability"]
    #   resp.data.next_token #=> String
    #
    def list_monitoring_schedules(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListMonitoringSchedulesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListMonitoringSchedulesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListMonitoringSchedules
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListMonitoringSchedules
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListMonitoringSchedules,
        stubs: @stubs,
        params_class: Params::ListMonitoringSchedulesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_monitoring_schedules
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists notebook instance lifestyle configurations created with the <a>CreateNotebookInstanceLifecycleConfig</a> API.</p>
    #
    # @param [Hash] params
    #   See {Types::ListNotebookInstanceLifecycleConfigsInput}.
    #
    # @option params [String] :next_token
    #   <p>If the result of a <code>ListNotebookInstanceLifecycleConfigs</code> request was
    #               truncated, the response includes a <code>NextToken</code>. To get the next set of
    #               lifecycle configurations, use the token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of lifecycle configurations to return in the response.</p>
    #
    # @option params [String] :sort_by
    #   <p>Sorts the list of results. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the lifecycle configuration name. This filter returns only lifecycle
    #               configurations whose name contains the specified string.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only lifecycle configurations that were created before the
    #               specified time (timestamp).</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only lifecycle configurations that were created after the
    #               specified time (timestamp).</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>A filter that returns only lifecycle configurations that were modified before the
    #               specified time (timestamp).</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>A filter that returns only lifecycle configurations that were modified after the
    #               specified time (timestamp).</p>
    #
    # @return [Types::ListNotebookInstanceLifecycleConfigsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_notebook_instance_lifecycle_configs(
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     sort_by: 'Name', # accepts ["Name", "CreationTime", "LastModifiedTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     name_contains: 'NameContains',
    #     creation_time_before: Time.now,
    #     creation_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     last_modified_time_after: Time.now
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListNotebookInstanceLifecycleConfigsOutput
    #   resp.data.next_token #=> String
    #   resp.data.notebook_instance_lifecycle_configs #=> Array<NotebookInstanceLifecycleConfigSummary>
    #   resp.data.notebook_instance_lifecycle_configs[0] #=> Types::NotebookInstanceLifecycleConfigSummary
    #   resp.data.notebook_instance_lifecycle_configs[0].notebook_instance_lifecycle_config_name #=> String
    #   resp.data.notebook_instance_lifecycle_configs[0].notebook_instance_lifecycle_config_arn #=> String
    #   resp.data.notebook_instance_lifecycle_configs[0].creation_time #=> Time
    #   resp.data.notebook_instance_lifecycle_configs[0].last_modified_time #=> Time
    #
    def list_notebook_instance_lifecycle_configs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListNotebookInstanceLifecycleConfigsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListNotebookInstanceLifecycleConfigsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListNotebookInstanceLifecycleConfigs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListNotebookInstanceLifecycleConfigs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListNotebookInstanceLifecycleConfigs,
        stubs: @stubs,
        params_class: Params::ListNotebookInstanceLifecycleConfigsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_notebook_instance_lifecycle_configs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a list of the SageMaker notebook instances in the requester's account in an Amazon Web Services
    #             Region. </p>
    #
    # @param [Hash] params
    #   See {Types::ListNotebookInstancesInput}.
    #
    # @option params [String] :next_token
    #   <p> If the previous call to the <code>ListNotebookInstances</code> is truncated, the
    #               response includes a <code>NextToken</code>. You can use this token in your subsequent
    #                   <code>ListNotebookInstances</code> request to fetch the next set of notebook
    #               instances. </p>
    #           <note>
    #               <p>You might specify a filter or a sort order in your request. When response is
    #                   truncated, you must use the same values for the filer and sort order in the next
    #                   request. </p>
    #           </note>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of notebook instances to return.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field to sort results by. The default is <code>Name</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. </p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the notebook instances' name. This filter returns only notebook
    #               instances whose name contains the specified string.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only notebook instances that were created before the
    #               specified time (timestamp). </p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only notebook instances that were created after the specified
    #               time (timestamp).</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>A filter that returns only notebook instances that were modified before the
    #               specified time (timestamp).</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>A filter that returns only notebook instances that were modified after the
    #               specified time (timestamp).</p>
    #
    # @option params [String] :status_equals
    #   <p>A filter that returns only notebook instances with the specified status.</p>
    #
    # @option params [String] :notebook_instance_lifecycle_config_name_contains
    #   <p>A string in the name of a notebook instances lifecycle configuration associated with
    #               this notebook instance. This filter returns only notebook instances associated with a
    #               lifecycle configuration with a name that contains the specified string.</p>
    #
    # @option params [String] :default_code_repository_contains
    #   <p>A string in the name or URL of a Git repository associated with this notebook
    #               instance. This filter returns only notebook instances associated with a git repository
    #               with a name that contains the specified string.</p>
    #
    # @option params [String] :additional_code_repository_equals
    #   <p>A filter that returns only notebook instances with associated with the specified git
    #               repository.</p>
    #
    # @return [Types::ListNotebookInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_notebook_instances(
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     sort_by: 'Name', # accepts ["Name", "CreationTime", "Status"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     name_contains: 'NameContains',
    #     creation_time_before: Time.now,
    #     creation_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     status_equals: 'Pending', # accepts ["Pending", "InService", "Stopping", "Stopped", "Failed", "Deleting", "Updating"]
    #     notebook_instance_lifecycle_config_name_contains: 'NotebookInstanceLifecycleConfigNameContains',
    #     default_code_repository_contains: 'DefaultCodeRepositoryContains',
    #     additional_code_repository_equals: 'AdditionalCodeRepositoryEquals'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListNotebookInstancesOutput
    #   resp.data.next_token #=> String
    #   resp.data.notebook_instances #=> Array<NotebookInstanceSummary>
    #   resp.data.notebook_instances[0] #=> Types::NotebookInstanceSummary
    #   resp.data.notebook_instances[0].notebook_instance_name #=> String
    #   resp.data.notebook_instances[0].notebook_instance_arn #=> String
    #   resp.data.notebook_instances[0].notebook_instance_status #=> String, one of ["Pending", "InService", "Stopping", "Stopped", "Failed", "Deleting", "Updating"]
    #   resp.data.notebook_instances[0].url #=> String
    #   resp.data.notebook_instances[0].instance_type #=> String, one of ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.8xlarge", "ml.m5d.12xlarge", "ml.m5d.16xlarge", "ml.m5d.24xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #   resp.data.notebook_instances[0].creation_time #=> Time
    #   resp.data.notebook_instances[0].last_modified_time #=> Time
    #   resp.data.notebook_instances[0].notebook_instance_lifecycle_config_name #=> String
    #   resp.data.notebook_instances[0].default_code_repository #=> String
    #   resp.data.notebook_instances[0].additional_code_repositories #=> Array<String>
    #   resp.data.notebook_instances[0].additional_code_repositories[0] #=> String
    #
    def list_notebook_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListNotebookInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListNotebookInstancesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListNotebookInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListNotebookInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListNotebookInstances,
        stubs: @stubs,
        params_class: Params::ListNotebookInstancesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_notebook_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a list of <code>PipeLineExecutionStep</code> objects.</p>
    #
    # @param [Hash] params
    #   See {Types::ListPipelineExecutionStepsInput}.
    #
    # @option params [String] :pipeline_execution_arn
    #   <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListPipelineExecutionSteps</code> request was truncated,
    #            the response includes a <code>NextToken</code>. To retrieve the next set of pipeline execution steps, use the token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of pipeline execution steps to return in the response.</p>
    #
    # @option params [String] :sort_order
    #   <p>The field by which to sort results. The default is <code>CreatedTime</code>.</p>
    #
    # @return [Types::ListPipelineExecutionStepsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_pipeline_execution_steps(
    #     pipeline_execution_arn: 'PipelineExecutionArn',
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     sort_order: 'Ascending' # accepts ["Ascending", "Descending"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListPipelineExecutionStepsOutput
    #   resp.data.pipeline_execution_steps #=> Array<PipelineExecutionStep>
    #   resp.data.pipeline_execution_steps[0] #=> Types::PipelineExecutionStep
    #   resp.data.pipeline_execution_steps[0].step_name #=> String
    #   resp.data.pipeline_execution_steps[0].step_display_name #=> String
    #   resp.data.pipeline_execution_steps[0].step_description #=> String
    #   resp.data.pipeline_execution_steps[0].start_time #=> Time
    #   resp.data.pipeline_execution_steps[0].end_time #=> Time
    #   resp.data.pipeline_execution_steps[0].step_status #=> String, one of ["Starting", "Executing", "Stopping", "Stopped", "Failed", "Succeeded"]
    #   resp.data.pipeline_execution_steps[0].cache_hit_result #=> Types::CacheHitResult
    #   resp.data.pipeline_execution_steps[0].cache_hit_result.source_pipeline_execution_arn #=> String
    #   resp.data.pipeline_execution_steps[0].attempt_count #=> Integer
    #   resp.data.pipeline_execution_steps[0].failure_reason #=> String
    #   resp.data.pipeline_execution_steps[0].metadata #=> Types::PipelineExecutionStepMetadata
    #   resp.data.pipeline_execution_steps[0].metadata.training_job #=> Types::TrainingJobStepMetadata
    #   resp.data.pipeline_execution_steps[0].metadata.training_job.arn #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.processing_job #=> Types::ProcessingJobStepMetadata
    #   resp.data.pipeline_execution_steps[0].metadata.processing_job.arn #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.transform_job #=> Types::TransformJobStepMetadata
    #   resp.data.pipeline_execution_steps[0].metadata.transform_job.arn #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.tuning_job #=> Types::TuningJobStepMetaData
    #   resp.data.pipeline_execution_steps[0].metadata.tuning_job.arn #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.model #=> Types::ModelStepMetadata
    #   resp.data.pipeline_execution_steps[0].metadata.model.arn #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.register_model #=> Types::RegisterModelStepMetadata
    #   resp.data.pipeline_execution_steps[0].metadata.register_model.arn #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.condition #=> Types::ConditionStepMetadata
    #   resp.data.pipeline_execution_steps[0].metadata.condition.outcome #=> String, one of ["True", "False"]
    #   resp.data.pipeline_execution_steps[0].metadata.callback #=> Types::CallbackStepMetadata
    #   resp.data.pipeline_execution_steps[0].metadata.callback.callback_token #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.callback.sqs_queue_url #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.callback.output_parameters #=> Array<OutputParameter>
    #   resp.data.pipeline_execution_steps[0].metadata.callback.output_parameters[0] #=> Types::OutputParameter
    #   resp.data.pipeline_execution_steps[0].metadata.callback.output_parameters[0].name #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.callback.output_parameters[0].value #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.lambda #=> Types::LambdaStepMetadata
    #   resp.data.pipeline_execution_steps[0].metadata.lambda.arn #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.lambda.output_parameters #=> Array<OutputParameter>
    #   resp.data.pipeline_execution_steps[0].metadata.quality_check #=> Types::QualityCheckStepMetadata
    #   resp.data.pipeline_execution_steps[0].metadata.quality_check.check_type #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.quality_check.baseline_used_for_drift_check_statistics #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.quality_check.baseline_used_for_drift_check_constraints #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.quality_check.calculated_baseline_statistics #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.quality_check.calculated_baseline_constraints #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.quality_check.model_package_group_name #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.quality_check.violation_report #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.quality_check.check_job_arn #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.quality_check.skip_check #=> Boolean
    #   resp.data.pipeline_execution_steps[0].metadata.quality_check.register_new_baseline #=> Boolean
    #   resp.data.pipeline_execution_steps[0].metadata.clarify_check #=> Types::ClarifyCheckStepMetadata
    #   resp.data.pipeline_execution_steps[0].metadata.clarify_check.check_type #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.clarify_check.baseline_used_for_drift_check_constraints #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.clarify_check.calculated_baseline_constraints #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.clarify_check.model_package_group_name #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.clarify_check.violation_report #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.clarify_check.check_job_arn #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.clarify_check.skip_check #=> Boolean
    #   resp.data.pipeline_execution_steps[0].metadata.clarify_check.register_new_baseline #=> Boolean
    #   resp.data.pipeline_execution_steps[0].metadata.emr #=> Types::EMRStepMetadata
    #   resp.data.pipeline_execution_steps[0].metadata.emr.cluster_id #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.emr.step_id #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.emr.step_name #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.emr.log_file_path #=> String
    #   resp.data.pipeline_execution_steps[0].metadata.fail #=> Types::FailStepMetadata
    #   resp.data.pipeline_execution_steps[0].metadata.fail.error_message #=> String
    #   resp.data.next_token #=> String
    #
    def list_pipeline_execution_steps(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListPipelineExecutionStepsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListPipelineExecutionStepsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListPipelineExecutionSteps
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::ListPipelineExecutionSteps
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListPipelineExecutionSteps,
        stubs: @stubs,
        params_class: Params::ListPipelineExecutionStepsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_pipeline_execution_steps
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a list of the pipeline executions.</p>
    #
    # @param [Hash] params
    #   See {Types::ListPipelineExecutionsInput}.
    #
    # @option params [String] :pipeline_name
    #   <p>The name of the pipeline.</p>
    #
    # @option params [Time] :created_after
    #   <p>A filter that returns the pipeline executions that were created after a specified
    #            time.</p>
    #
    # @option params [Time] :created_before
    #   <p>A filter that returns the pipeline executions that were created before a specified
    #            time.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field by which to sort results. The default is <code>CreatedTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListPipelineExecutions</code> request was truncated,
    #            the response includes a <code>NextToken</code>. To retrieve the next set of pipeline executions, use the token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of pipeline executions to return in the response.</p>
    #
    # @return [Types::ListPipelineExecutionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_pipeline_executions(
    #     pipeline_name: 'PipelineName', # required
    #     created_after: Time.now,
    #     created_before: Time.now,
    #     sort_by: 'CreationTime', # accepts ["CreationTime", "PipelineExecutionArn"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListPipelineExecutionsOutput
    #   resp.data.pipeline_execution_summaries #=> Array<PipelineExecutionSummary>
    #   resp.data.pipeline_execution_summaries[0] #=> Types::PipelineExecutionSummary
    #   resp.data.pipeline_execution_summaries[0].pipeline_execution_arn #=> String
    #   resp.data.pipeline_execution_summaries[0].start_time #=> Time
    #   resp.data.pipeline_execution_summaries[0].pipeline_execution_status #=> String, one of ["Executing", "Stopping", "Stopped", "Failed", "Succeeded"]
    #   resp.data.pipeline_execution_summaries[0].pipeline_execution_description #=> String
    #   resp.data.pipeline_execution_summaries[0].pipeline_execution_display_name #=> String
    #   resp.data.pipeline_execution_summaries[0].pipeline_execution_failure_reason #=> String
    #   resp.data.next_token #=> String
    #
    def list_pipeline_executions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListPipelineExecutionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListPipelineExecutionsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListPipelineExecutions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::ListPipelineExecutions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListPipelineExecutions,
        stubs: @stubs,
        params_class: Params::ListPipelineExecutionsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_pipeline_executions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a list of parameters for a pipeline execution.</p>
    #
    # @param [Hash] params
    #   See {Types::ListPipelineParametersForExecutionInput}.
    #
    # @option params [String] :pipeline_execution_arn
    #   <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListPipelineParametersForExecution</code> request was truncated,
    #            the response includes a <code>NextToken</code>. To retrieve the next set of parameters, use the token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of parameters to return in the response.</p>
    #
    # @return [Types::ListPipelineParametersForExecutionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_pipeline_parameters_for_execution(
    #     pipeline_execution_arn: 'PipelineExecutionArn', # required
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListPipelineParametersForExecutionOutput
    #   resp.data.pipeline_parameters #=> Array<Parameter>
    #   resp.data.pipeline_parameters[0] #=> Types::Parameter
    #   resp.data.pipeline_parameters[0].name #=> String
    #   resp.data.pipeline_parameters[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def list_pipeline_parameters_for_execution(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListPipelineParametersForExecutionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListPipelineParametersForExecutionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListPipelineParametersForExecution
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::ListPipelineParametersForExecution
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListPipelineParametersForExecution,
        stubs: @stubs,
        params_class: Params::ListPipelineParametersForExecutionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_pipeline_parameters_for_execution
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a list of pipelines.</p>
    #
    # @param [Hash] params
    #   See {Types::ListPipelinesInput}.
    #
    # @option params [String] :pipeline_name_prefix
    #   <p>The prefix of the pipeline name.</p>
    #
    # @option params [Time] :created_after
    #   <p>A filter that returns the pipelines that were created after a specified
    #            time.</p>
    #
    # @option params [Time] :created_before
    #   <p>A filter that returns the pipelines that were created before a specified
    #            time.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field by which to sort results. The default is <code>CreatedTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListPipelines</code> request was truncated,
    #            the response includes a <code>NextToken</code>. To retrieve the next set of pipelines, use the token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of pipelines to return in the response.</p>
    #
    # @return [Types::ListPipelinesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_pipelines(
    #     pipeline_name_prefix: 'PipelineNamePrefix',
    #     created_after: Time.now,
    #     created_before: Time.now,
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListPipelinesOutput
    #   resp.data.pipeline_summaries #=> Array<PipelineSummary>
    #   resp.data.pipeline_summaries[0] #=> Types::PipelineSummary
    #   resp.data.pipeline_summaries[0].pipeline_arn #=> String
    #   resp.data.pipeline_summaries[0].pipeline_name #=> String
    #   resp.data.pipeline_summaries[0].pipeline_display_name #=> String
    #   resp.data.pipeline_summaries[0].pipeline_description #=> String
    #   resp.data.pipeline_summaries[0].role_arn #=> String
    #   resp.data.pipeline_summaries[0].creation_time #=> Time
    #   resp.data.pipeline_summaries[0].last_modified_time #=> Time
    #   resp.data.pipeline_summaries[0].last_execution_time #=> Time
    #   resp.data.next_token #=> String
    #
    def list_pipelines(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListPipelinesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListPipelinesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListPipelines
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListPipelines
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListPipelines,
        stubs: @stubs,
        params_class: Params::ListPipelinesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_pipelines
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists processing jobs that satisfy various filters.</p>
    #
    # @param [Hash] params
    #   See {Types::ListProcessingJobsInput}.
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only processing jobs created after the specified time.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only processing jobs created after the specified time.</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>A filter that returns only processing jobs modified after the specified time.</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>A filter that returns only processing jobs modified before the specified time.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the processing job name. This filter returns only processing jobs whose
    #               name contains the specified string.</p>
    #
    # @option params [String] :status_equals
    #   <p>A filter that retrieves only processing jobs with a specific status.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Ascending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListProcessingJobs</code> request was truncated,
    #               the response includes a <code>NextToken</code>. To retrieve the next set of processing
    #               jobs, use the token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of processing jobs to return in the response.</p>
    #
    # @return [Types::ListProcessingJobsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_processing_jobs(
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     name_contains: 'NameContains',
    #     status_equals: 'InProgress', # accepts ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #     sort_by: 'Name', # accepts ["Name", "CreationTime", "Status"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListProcessingJobsOutput
    #   resp.data.processing_job_summaries #=> Array<ProcessingJobSummary>
    #   resp.data.processing_job_summaries[0] #=> Types::ProcessingJobSummary
    #   resp.data.processing_job_summaries[0].processing_job_name #=> String
    #   resp.data.processing_job_summaries[0].processing_job_arn #=> String
    #   resp.data.processing_job_summaries[0].creation_time #=> Time
    #   resp.data.processing_job_summaries[0].processing_end_time #=> Time
    #   resp.data.processing_job_summaries[0].last_modified_time #=> Time
    #   resp.data.processing_job_summaries[0].processing_job_status #=> String, one of ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.processing_job_summaries[0].failure_reason #=> String
    #   resp.data.processing_job_summaries[0].exit_message #=> String
    #   resp.data.next_token #=> String
    #
    def list_processing_jobs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListProcessingJobsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListProcessingJobsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListProcessingJobs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListProcessingJobs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListProcessingJobs,
        stubs: @stubs,
        params_class: Params::ListProcessingJobsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_processing_jobs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a list of the projects in an Amazon Web Services account.</p>
    #
    # @param [Hash] params
    #   See {Types::ListProjectsInput}.
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns the projects that were created after a specified
    #               time.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns the projects that were created before a specified
    #               time.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of projects to return in the response.</p>
    #
    # @option params [String] :name_contains
    #   <p>A filter that returns the projects whose name contains a specified
    #               string.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListProjects</code> request was truncated,
    #               the response includes a <code>NextToken</code>. To retrieve the next set of projects, use the token in the next request.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field by which to sort results. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Ascending</code>.</p>
    #
    # @return [Types::ListProjectsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_projects(
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     max_results: 1,
    #     name_contains: 'NameContains',
    #     next_token: 'NextToken',
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending' # accepts ["Ascending", "Descending"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListProjectsOutput
    #   resp.data.project_summary_list #=> Array<ProjectSummary>
    #   resp.data.project_summary_list[0] #=> Types::ProjectSummary
    #   resp.data.project_summary_list[0].project_name #=> String
    #   resp.data.project_summary_list[0].project_description #=> String
    #   resp.data.project_summary_list[0].project_arn #=> String
    #   resp.data.project_summary_list[0].project_id #=> String
    #   resp.data.project_summary_list[0].creation_time #=> Time
    #   resp.data.project_summary_list[0].project_status #=> String, one of ["Pending", "CreateInProgress", "CreateCompleted", "CreateFailed", "DeleteInProgress", "DeleteFailed", "DeleteCompleted", "UpdateInProgress", "UpdateCompleted", "UpdateFailed"]
    #   resp.data.next_token #=> String
    #
    def list_projects(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListProjectsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListProjectsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListProjects
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListProjects
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListProjects,
        stubs: @stubs,
        params_class: Params::ListProjectsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_projects
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the Studio Lifecycle Configurations in your Amazon Web Services Account.</p>
    #
    # @param [Hash] params
    #   See {Types::ListStudioLifecycleConfigsInput}.
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of Studio Lifecycle Configurations to return in the response. The default value is 10.</p>
    #
    # @option params [String] :next_token
    #   <p>If the previous call to ListStudioLifecycleConfigs didn't return the full set of Lifecycle Configurations, the call returns a token for getting the next set of Lifecycle Configurations.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the Lifecycle Configuration name. This filter returns only Lifecycle Configurations whose name contains the specified string.</p>
    #
    # @option params [String] :app_type_equals
    #   <p>A parameter to search for the App Type to which the Lifecycle Configuration is attached.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only Lifecycle Configurations created on or before the specified time.</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only Lifecycle Configurations created on or after the specified time.</p>
    #
    # @option params [Time] :modified_time_before
    #   <p>A filter that returns only Lifecycle Configurations modified before the specified time.</p>
    #
    # @option params [Time] :modified_time_after
    #   <p>A filter that returns only Lifecycle Configurations modified after the specified time.</p>
    #
    # @option params [String] :sort_by
    #   <p>The property used to sort results. The default value is CreationTime.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order. The default value is Descending.</p>
    #
    # @return [Types::ListStudioLifecycleConfigsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_studio_lifecycle_configs(
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     name_contains: 'NameContains',
    #     app_type_equals: 'JupyterServer', # accepts ["JupyterServer", "KernelGateway"]
    #     creation_time_before: Time.now,
    #     creation_time_after: Time.now,
    #     modified_time_before: Time.now,
    #     modified_time_after: Time.now,
    #     sort_by: 'CreationTime', # accepts ["CreationTime", "LastModifiedTime", "Name"]
    #     sort_order: 'Ascending' # accepts ["Ascending", "Descending"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListStudioLifecycleConfigsOutput
    #   resp.data.next_token #=> String
    #   resp.data.studio_lifecycle_configs #=> Array<StudioLifecycleConfigDetails>
    #   resp.data.studio_lifecycle_configs[0] #=> Types::StudioLifecycleConfigDetails
    #   resp.data.studio_lifecycle_configs[0].studio_lifecycle_config_arn #=> String
    #   resp.data.studio_lifecycle_configs[0].studio_lifecycle_config_name #=> String
    #   resp.data.studio_lifecycle_configs[0].creation_time #=> Time
    #   resp.data.studio_lifecycle_configs[0].last_modified_time #=> Time
    #   resp.data.studio_lifecycle_configs[0].studio_lifecycle_config_app_type #=> String, one of ["JupyterServer", "KernelGateway"]
    #
    def list_studio_lifecycle_configs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListStudioLifecycleConfigsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListStudioLifecycleConfigsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListStudioLifecycleConfigs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceInUse]),
        data_parser: Parsers::ListStudioLifecycleConfigs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListStudioLifecycleConfigs,
        stubs: @stubs,
        params_class: Params::ListStudioLifecycleConfigsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_studio_lifecycle_configs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a list of the work teams that you are subscribed to in the Amazon Web Services Marketplace. The
    #             list may be empty if no work team satisfies the filter specified in the
    #                 <code>NameContains</code> parameter.</p>
    #
    # @param [Hash] params
    #   See {Types::ListSubscribedWorkteamsInput}.
    #
    # @option params [String] :name_contains
    #   <p>A string in the work team name. This filter returns only work teams whose name
    #               contains the specified string.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListSubscribedWorkteams</code> request was
    #               truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
    #               labeling jobs, use the token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of work teams to return in each page of the response.</p>
    #
    # @return [Types::ListSubscribedWorkteamsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_subscribed_workteams(
    #     name_contains: 'NameContains',
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListSubscribedWorkteamsOutput
    #   resp.data.subscribed_workteams #=> Array<SubscribedWorkteam>
    #   resp.data.subscribed_workteams[0] #=> Types::SubscribedWorkteam
    #   resp.data.subscribed_workteams[0].workteam_arn #=> String
    #   resp.data.subscribed_workteams[0].marketplace_title #=> String
    #   resp.data.subscribed_workteams[0].seller_name #=> String
    #   resp.data.subscribed_workteams[0].marketplace_description #=> String
    #   resp.data.subscribed_workteams[0].listing_id #=> String
    #   resp.data.next_token #=> String
    #
    def list_subscribed_workteams(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListSubscribedWorkteamsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListSubscribedWorkteamsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListSubscribedWorkteams
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListSubscribedWorkteams
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListSubscribedWorkteams,
        stubs: @stubs,
        params_class: Params::ListSubscribedWorkteamsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_subscribed_workteams
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the tags for the specified SageMaker resource.</p>
    #
    # @param [Hash] params
    #   See {Types::ListTagsInput}.
    #
    # @option params [String] :resource_arn
    #   <p>The Amazon Resource Name (ARN) of the resource whose tags you want to
    #               retrieve.</p>
    #
    # @option params [String] :next_token
    #   <p> If the response to the previous <code>ListTags</code> request is truncated, SageMaker
    #               returns this token. To retrieve the next set of tags, use it in the subsequent request.
    #           </p>
    #
    # @option params [Integer] :max_results
    #   <p>Maximum number of tags to return.</p>
    #
    # @return [Types::ListTagsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_tags(
    #     resource_arn: 'ResourceArn', # required
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListTagsOutput
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def list_tags(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListTagsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListTagsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListTags
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListTags
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListTags,
        stubs: @stubs,
        params_class: Params::ListTagsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_tags
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists training jobs.</p>
    #         <note>
    #             <p>When <code>StatusEquals</code> and <code>MaxResults</code> are set at the same
    #                 time, the <code>MaxResults</code> number of training jobs are first retrieved
    #                 ignoring the <code>StatusEquals</code> parameter and then they are filtered by the
    #                     <code>StatusEquals</code> parameter, which is returned as a response.</p>
    #             <p>For example, if <code>ListTrainingJobs</code> is invoked with the following
    #                 parameters:</p>
    #             <p>
    #                <code>{ ... MaxResults: 100, StatusEquals: InProgress ... }</code>
    #             </p>
    #             <p>First, 100 trainings jobs with any status, including those other than
    #                     <code>InProgress</code>, are selected (sorted according to the creation time,
    #                 from the most current to the oldest). Next, those with a status of
    #                     <code>InProgress</code> are returned.</p>
    #             <p>You can quickly test the API using the following Amazon Web Services CLI code.</p>
    #             <p>
    #                <code>aws sagemaker list-training-jobs --max-results 100 --status-equals
    #                     InProgress</code>
    #             </p>
    #         </note>
    #
    # @param [Hash] params
    #   See {Types::ListTrainingJobsInput}.
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListTrainingJobs</code> request was truncated,
    #               the response includes a <code>NextToken</code>. To retrieve the next set of training
    #               jobs, use the token in the next request. </p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of training jobs to return in the response.</p>
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only training jobs created after the specified time
    #               (timestamp).</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only training jobs created before the specified time
    #               (timestamp).</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>A filter that returns only training jobs modified after the specified time
    #               (timestamp).</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>A filter that returns only training jobs modified before the specified time
    #               (timestamp).</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the training job name. This filter returns only training jobs whose
    #               name contains the specified string.</p>
    #
    # @option params [String] :status_equals
    #   <p>A filter that retrieves only training jobs with a specific status.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Ascending</code>.</p>
    #
    # @return [Types::ListTrainingJobsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_training_jobs(
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     name_contains: 'NameContains',
    #     status_equals: 'InProgress', # accepts ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #     sort_by: 'Name', # accepts ["Name", "CreationTime", "Status"]
    #     sort_order: 'Ascending' # accepts ["Ascending", "Descending"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListTrainingJobsOutput
    #   resp.data.training_job_summaries #=> Array<TrainingJobSummary>
    #   resp.data.training_job_summaries[0] #=> Types::TrainingJobSummary
    #   resp.data.training_job_summaries[0].training_job_name #=> String
    #   resp.data.training_job_summaries[0].training_job_arn #=> String
    #   resp.data.training_job_summaries[0].creation_time #=> Time
    #   resp.data.training_job_summaries[0].training_end_time #=> Time
    #   resp.data.training_job_summaries[0].last_modified_time #=> Time
    #   resp.data.training_job_summaries[0].training_job_status #=> String, one of ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.next_token #=> String
    #
    def list_training_jobs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListTrainingJobsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListTrainingJobsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListTrainingJobs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListTrainingJobs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListTrainingJobs,
        stubs: @stubs,
        params_class: Params::ListTrainingJobsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_training_jobs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a list of <a>TrainingJobSummary</a> objects that describe the training
    #             jobs that a hyperparameter tuning job launched.</p>
    #
    # @param [Hash] params
    #   See {Types::ListTrainingJobsForHyperParameterTuningJobInput}.
    #
    # @option params [String] :hyper_parameter_tuning_job_name
    #   <p>The name of the tuning job whose training jobs you want to list.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListTrainingJobsForHyperParameterTuningJob</code>
    #               request was truncated, the response includes a <code>NextToken</code>. To retrieve the
    #               next set of training jobs, use the token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of training jobs to return. The default value is 10.</p>
    #
    # @option params [String] :status_equals
    #   <p>A filter that returns only training jobs with the specified status.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field to sort results by. The default is <code>Name</code>.</p>
    #           <p>If the value of this field is <code>FinalObjectiveMetricValue</code>, any training
    #               jobs that did not return an objective metric are not listed.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Ascending</code>.</p>
    #
    # @return [Types::ListTrainingJobsForHyperParameterTuningJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_training_jobs_for_hyper_parameter_tuning_job(
    #     hyper_parameter_tuning_job_name: 'HyperParameterTuningJobName', # required
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     status_equals: 'InProgress', # accepts ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #     sort_by: 'Name', # accepts ["Name", "CreationTime", "Status", "FinalObjectiveMetricValue"]
    #     sort_order: 'Ascending' # accepts ["Ascending", "Descending"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListTrainingJobsForHyperParameterTuningJobOutput
    #   resp.data.training_job_summaries #=> Array<HyperParameterTrainingJobSummary>
    #   resp.data.training_job_summaries[0] #=> Types::HyperParameterTrainingJobSummary
    #   resp.data.training_job_summaries[0].training_job_definition_name #=> String
    #   resp.data.training_job_summaries[0].training_job_name #=> String
    #   resp.data.training_job_summaries[0].training_job_arn #=> String
    #   resp.data.training_job_summaries[0].tuning_job_name #=> String
    #   resp.data.training_job_summaries[0].creation_time #=> Time
    #   resp.data.training_job_summaries[0].training_start_time #=> Time
    #   resp.data.training_job_summaries[0].training_end_time #=> Time
    #   resp.data.training_job_summaries[0].training_job_status #=> String, one of ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.training_job_summaries[0].tuned_hyper_parameters #=> Hash<String, String>
    #   resp.data.training_job_summaries[0].tuned_hyper_parameters['key'] #=> String
    #   resp.data.training_job_summaries[0].failure_reason #=> String
    #   resp.data.training_job_summaries[0].final_hyper_parameter_tuning_job_objective_metric #=> Types::FinalHyperParameterTuningJobObjectiveMetric
    #   resp.data.training_job_summaries[0].final_hyper_parameter_tuning_job_objective_metric.type #=> String, one of ["Maximize", "Minimize"]
    #   resp.data.training_job_summaries[0].final_hyper_parameter_tuning_job_objective_metric.metric_name #=> String
    #   resp.data.training_job_summaries[0].final_hyper_parameter_tuning_job_objective_metric.value #=> Float
    #   resp.data.training_job_summaries[0].objective_status #=> String, one of ["Succeeded", "Pending", "Failed"]
    #   resp.data.next_token #=> String
    #
    def list_training_jobs_for_hyper_parameter_tuning_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListTrainingJobsForHyperParameterTuningJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListTrainingJobsForHyperParameterTuningJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListTrainingJobsForHyperParameterTuningJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::ListTrainingJobsForHyperParameterTuningJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListTrainingJobsForHyperParameterTuningJob,
        stubs: @stubs,
        params_class: Params::ListTrainingJobsForHyperParameterTuningJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_training_jobs_for_hyper_parameter_tuning_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists transform jobs.</p>
    #
    # @param [Hash] params
    #   See {Types::ListTransformJobsInput}.
    #
    # @option params [Time] :creation_time_after
    #   <p>A filter that returns only transform jobs created after the specified time.</p>
    #
    # @option params [Time] :creation_time_before
    #   <p>A filter that returns only transform jobs created before the specified time.</p>
    #
    # @option params [Time] :last_modified_time_after
    #   <p>A filter that returns only transform jobs modified after the specified time.</p>
    #
    # @option params [Time] :last_modified_time_before
    #   <p>A filter that returns only transform jobs modified before the specified time.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the transform job name. This filter returns only transform jobs whose name
    #               contains the specified string.</p>
    #
    # @option params [String] :status_equals
    #   <p>A filter that retrieves only transform jobs with a specific status.</p>
    #
    # @option params [String] :sort_by
    #   <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListTransformJobs</code> request was truncated,
    #               the response includes a <code>NextToken</code>. To retrieve the next set of transform
    #               jobs, use the token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of transform jobs to return in the response. The default value is <code>10</code>.</p>
    #
    # @return [Types::ListTransformJobsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_transform_jobs(
    #     creation_time_after: Time.now,
    #     creation_time_before: Time.now,
    #     last_modified_time_after: Time.now,
    #     last_modified_time_before: Time.now,
    #     name_contains: 'NameContains',
    #     status_equals: 'InProgress', # accepts ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #     sort_by: 'Name', # accepts ["Name", "CreationTime", "Status"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListTransformJobsOutput
    #   resp.data.transform_job_summaries #=> Array<TransformJobSummary>
    #   resp.data.transform_job_summaries[0] #=> Types::TransformJobSummary
    #   resp.data.transform_job_summaries[0].transform_job_name #=> String
    #   resp.data.transform_job_summaries[0].transform_job_arn #=> String
    #   resp.data.transform_job_summaries[0].creation_time #=> Time
    #   resp.data.transform_job_summaries[0].transform_end_time #=> Time
    #   resp.data.transform_job_summaries[0].last_modified_time #=> Time
    #   resp.data.transform_job_summaries[0].transform_job_status #=> String, one of ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.transform_job_summaries[0].failure_reason #=> String
    #   resp.data.next_token #=> String
    #
    def list_transform_jobs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListTransformJobsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListTransformJobsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListTransformJobs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListTransformJobs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListTransformJobs,
        stubs: @stubs,
        params_class: Params::ListTransformJobsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_transform_jobs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the trial components in your account. You can sort the list by trial component name
    #       or creation time. You can filter the list to show only components that were created in a
    #       specific time range. You can also filter on one of the following:</p>
    #          <ul>
    #             <li>
    #                <p>
    #                   <code>ExperimentName</code>
    #                </p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>SourceArn</code>
    #                </p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>TrialName</code>
    #                </p>
    #             </li>
    #          </ul>
    #
    # @param [Hash] params
    #   See {Types::ListTrialComponentsInput}.
    #
    # @option params [String] :experiment_name
    #   <p>A filter that returns only components that are part of the specified experiment. If you
    #         specify <code>ExperimentName</code>, you can't filter by <code>SourceArn</code> or
    #           <code>TrialName</code>.</p>
    #
    # @option params [String] :trial_name
    #   <p>A filter that returns only components that are part of the specified trial. If you specify
    #           <code>TrialName</code>, you can't filter by <code>ExperimentName</code> or
    #           <code>SourceArn</code>.</p>
    #
    # @option params [String] :source_arn
    #   <p>A filter that returns only components that have the specified source Amazon Resource Name
    #         (ARN). If you specify <code>SourceArn</code>, you can't filter by <code>ExperimentName</code>
    #         or <code>TrialName</code>.</p>
    #
    # @option params [Time] :created_after
    #   <p>A filter that returns only components created after the specified time.</p>
    #
    # @option params [Time] :created_before
    #   <p>A filter that returns only components created before the specified time.</p>
    #
    # @option params [String] :sort_by
    #   <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order. The default value is <code>Descending</code>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of components to return in the response. The default value is
    #         10.</p>
    #
    # @option params [String] :next_token
    #   <p>If the previous call to <code>ListTrialComponents</code> didn't return the full set of
    #         components, the call returns a token for getting the next set of components.</p>
    #
    # @return [Types::ListTrialComponentsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_trial_components(
    #     experiment_name: 'ExperimentName',
    #     trial_name: 'TrialName',
    #     source_arn: 'SourceArn',
    #     created_after: Time.now,
    #     created_before: Time.now,
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListTrialComponentsOutput
    #   resp.data.trial_component_summaries #=> Array<TrialComponentSummary>
    #   resp.data.trial_component_summaries[0] #=> Types::TrialComponentSummary
    #   resp.data.trial_component_summaries[0].trial_component_name #=> String
    #   resp.data.trial_component_summaries[0].trial_component_arn #=> String
    #   resp.data.trial_component_summaries[0].display_name #=> String
    #   resp.data.trial_component_summaries[0].trial_component_source #=> Types::TrialComponentSource
    #   resp.data.trial_component_summaries[0].trial_component_source.source_arn #=> String
    #   resp.data.trial_component_summaries[0].trial_component_source.source_type #=> String
    #   resp.data.trial_component_summaries[0].status #=> Types::TrialComponentStatus
    #   resp.data.trial_component_summaries[0].status.primary_status #=> String, one of ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.trial_component_summaries[0].status.message #=> String
    #   resp.data.trial_component_summaries[0].start_time #=> Time
    #   resp.data.trial_component_summaries[0].end_time #=> Time
    #   resp.data.trial_component_summaries[0].creation_time #=> Time
    #   resp.data.trial_component_summaries[0].created_by #=> Types::UserContext
    #   resp.data.trial_component_summaries[0].created_by.user_profile_arn #=> String
    #   resp.data.trial_component_summaries[0].created_by.user_profile_name #=> String
    #   resp.data.trial_component_summaries[0].created_by.domain_id #=> String
    #   resp.data.trial_component_summaries[0].last_modified_time #=> Time
    #   resp.data.trial_component_summaries[0].last_modified_by #=> Types::UserContext
    #   resp.data.next_token #=> String
    #
    def list_trial_components(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListTrialComponentsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListTrialComponentsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListTrialComponents
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::ListTrialComponents
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListTrialComponents,
        stubs: @stubs,
        params_class: Params::ListTrialComponentsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_trial_components
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the trials in your account. Specify an experiment name to limit the list to the
    #       trials that are part of that experiment. Specify a trial component name to limit the list to
    #       the trials that associated with that trial component. The list can be filtered to show only
    #       trials that were created in a specific time range. The list can be sorted by trial name or
    #       creation time.</p>
    #
    # @param [Hash] params
    #   See {Types::ListTrialsInput}.
    #
    # @option params [String] :experiment_name
    #   <p>A filter that returns only trials that are part of the specified experiment.</p>
    #
    # @option params [String] :trial_component_name
    #   <p>A filter that returns only trials that are associated with the specified trial
    #         component.</p>
    #
    # @option params [Time] :created_after
    #   <p>A filter that returns only trials created after the specified time.</p>
    #
    # @option params [Time] :created_before
    #   <p>A filter that returns only trials created before the specified time.</p>
    #
    # @option params [String] :sort_by
    #   <p>The property used to sort results. The default value is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order. The default value is <code>Descending</code>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of trials to return in the response. The default value is 10.</p>
    #
    # @option params [String] :next_token
    #   <p>If the previous call to <code>ListTrials</code> didn't return the full set of trials, the
    #         call returns a token for getting the next set of trials.</p>
    #
    # @return [Types::ListTrialsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_trials(
    #     experiment_name: 'ExperimentName',
    #     trial_component_name: 'TrialComponentName',
    #     created_after: Time.now,
    #     created_before: Time.now,
    #     sort_by: 'Name', # accepts ["Name", "CreationTime"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListTrialsOutput
    #   resp.data.trial_summaries #=> Array<TrialSummary>
    #   resp.data.trial_summaries[0] #=> Types::TrialSummary
    #   resp.data.trial_summaries[0].trial_arn #=> String
    #   resp.data.trial_summaries[0].trial_name #=> String
    #   resp.data.trial_summaries[0].display_name #=> String
    #   resp.data.trial_summaries[0].trial_source #=> Types::TrialSource
    #   resp.data.trial_summaries[0].trial_source.source_arn #=> String
    #   resp.data.trial_summaries[0].trial_source.source_type #=> String
    #   resp.data.trial_summaries[0].creation_time #=> Time
    #   resp.data.trial_summaries[0].last_modified_time #=> Time
    #   resp.data.next_token #=> String
    #
    def list_trials(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListTrialsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListTrialsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListTrials
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::ListTrials
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListTrials,
        stubs: @stubs,
        params_class: Params::ListTrialsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_trials
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists user profiles.</p>
    #
    # @param [Hash] params
    #   See {Types::ListUserProfilesInput}.
    #
    # @option params [String] :next_token
    #   <p>If the previous response was truncated, you will receive this token.
    #           Use it in your next request to receive the next set of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>Returns a list up to a specified limit.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for the results. The default is Ascending.</p>
    #
    # @option params [String] :sort_by
    #   <p>The parameter by which to sort the results. The default is CreationTime.</p>
    #
    # @option params [String] :domain_id_equals
    #   <p>A parameter by which to filter the results.</p>
    #
    # @option params [String] :user_profile_name_contains
    #   <p>A parameter by which to filter the results.</p>
    #
    # @return [Types::ListUserProfilesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_user_profiles(
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     sort_by: 'CreationTime', # accepts ["CreationTime", "LastModifiedTime"]
    #     domain_id_equals: 'DomainIdEquals',
    #     user_profile_name_contains: 'UserProfileNameContains'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListUserProfilesOutput
    #   resp.data.user_profiles #=> Array<UserProfileDetails>
    #   resp.data.user_profiles[0] #=> Types::UserProfileDetails
    #   resp.data.user_profiles[0].domain_id #=> String
    #   resp.data.user_profiles[0].user_profile_name #=> String
    #   resp.data.user_profiles[0].status #=> String, one of ["Deleting", "Failed", "InService", "Pending", "Updating", "Update_Failed", "Delete_Failed"]
    #   resp.data.user_profiles[0].creation_time #=> Time
    #   resp.data.user_profiles[0].last_modified_time #=> Time
    #   resp.data.next_token #=> String
    #
    def list_user_profiles(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListUserProfilesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListUserProfilesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListUserProfiles
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListUserProfiles
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListUserProfiles,
        stubs: @stubs,
        params_class: Params::ListUserProfilesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_user_profiles
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Use this operation to list all private and vendor workforces in an Amazon Web Services Region. Note that you can only
    #            have one private workforce per Amazon Web Services Region.</p>
    #
    # @param [Hash] params
    #   See {Types::ListWorkforcesInput}.
    #
    # @option params [String] :sort_by
    #   <p>Sort workforces using the workforce name or creation date.</p>
    #
    # @option params [String] :sort_order
    #   <p>Sort workforces in ascending or descending order.</p>
    #
    # @option params [String] :name_contains
    #   <p>A filter you can use to search for workforces using part of the workforce name.</p>
    #
    # @option params [String] :next_token
    #   <p>A token to resume pagination.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of workforces returned in the response.</p>
    #
    # @return [Types::ListWorkforcesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_workforces(
    #     sort_by: 'Name', # accepts ["Name", "CreateDate"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     name_contains: 'NameContains',
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListWorkforcesOutput
    #   resp.data.workforces #=> Array<Workforce>
    #   resp.data.workforces[0] #=> Types::Workforce
    #   resp.data.workforces[0].workforce_name #=> String
    #   resp.data.workforces[0].workforce_arn #=> String
    #   resp.data.workforces[0].last_updated_date #=> Time
    #   resp.data.workforces[0].source_ip_config #=> Types::SourceIpConfig
    #   resp.data.workforces[0].source_ip_config.cidrs #=> Array<String>
    #   resp.data.workforces[0].source_ip_config.cidrs[0] #=> String
    #   resp.data.workforces[0].sub_domain #=> String
    #   resp.data.workforces[0].cognito_config #=> Types::CognitoConfig
    #   resp.data.workforces[0].cognito_config.user_pool #=> String
    #   resp.data.workforces[0].cognito_config.client_id #=> String
    #   resp.data.workforces[0].oidc_config #=> Types::OidcConfigForResponse
    #   resp.data.workforces[0].oidc_config.client_id #=> String
    #   resp.data.workforces[0].oidc_config.issuer #=> String
    #   resp.data.workforces[0].oidc_config.authorization_endpoint #=> String
    #   resp.data.workforces[0].oidc_config.token_endpoint #=> String
    #   resp.data.workforces[0].oidc_config.user_info_endpoint #=> String
    #   resp.data.workforces[0].oidc_config.logout_endpoint #=> String
    #   resp.data.workforces[0].oidc_config.jwks_uri #=> String
    #   resp.data.workforces[0].create_date #=> Time
    #   resp.data.next_token #=> String
    #
    def list_workforces(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListWorkforcesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListWorkforcesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListWorkforces
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListWorkforces
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListWorkforces,
        stubs: @stubs,
        params_class: Params::ListWorkforcesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_workforces
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets a list of private work teams that you have defined in a region. The list may be empty if
    #             no work team satisfies the filter specified in the <code>NameContains</code>
    #             parameter.</p>
    #
    # @param [Hash] params
    #   See {Types::ListWorkteamsInput}.
    #
    # @option params [String] :sort_by
    #   <p>The field to sort results by. The default is <code>CreationTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>The sort order for results. The default is <code>Ascending</code>.</p>
    #
    # @option params [String] :name_contains
    #   <p>A string in the work team's name. This filter returns only work teams whose name
    #               contains the specified string.</p>
    #
    # @option params [String] :next_token
    #   <p>If the result of the previous <code>ListWorkteams</code> request was truncated, the
    #               response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs,
    #               use the token in the next request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of work teams to return in each page of the response.</p>
    #
    # @return [Types::ListWorkteamsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_workteams(
    #     sort_by: 'Name', # accepts ["Name", "CreateDate"]
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     name_contains: 'NameContains',
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListWorkteamsOutput
    #   resp.data.workteams #=> Array<Workteam>
    #   resp.data.workteams[0] #=> Types::Workteam
    #   resp.data.workteams[0].workteam_name #=> String
    #   resp.data.workteams[0].member_definitions #=> Array<MemberDefinition>
    #   resp.data.workteams[0].member_definitions[0] #=> Types::MemberDefinition
    #   resp.data.workteams[0].member_definitions[0].cognito_member_definition #=> Types::CognitoMemberDefinition
    #   resp.data.workteams[0].member_definitions[0].cognito_member_definition.user_pool #=> String
    #   resp.data.workteams[0].member_definitions[0].cognito_member_definition.user_group #=> String
    #   resp.data.workteams[0].member_definitions[0].cognito_member_definition.client_id #=> String
    #   resp.data.workteams[0].member_definitions[0].oidc_member_definition #=> Types::OidcMemberDefinition
    #   resp.data.workteams[0].member_definitions[0].oidc_member_definition.groups #=> Array<String>
    #   resp.data.workteams[0].member_definitions[0].oidc_member_definition.groups[0] #=> String
    #   resp.data.workteams[0].workteam_arn #=> String
    #   resp.data.workteams[0].workforce_arn #=> String
    #   resp.data.workteams[0].product_listing_ids #=> Array<String>
    #   resp.data.workteams[0].product_listing_ids[0] #=> String
    #   resp.data.workteams[0].description #=> String
    #   resp.data.workteams[0].sub_domain #=> String
    #   resp.data.workteams[0].create_date #=> Time
    #   resp.data.workteams[0].last_updated_date #=> Time
    #   resp.data.workteams[0].notification_configuration #=> Types::NotificationConfiguration
    #   resp.data.workteams[0].notification_configuration.notification_topic_arn #=> String
    #   resp.data.next_token #=> String
    #
    def list_workteams(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListWorkteamsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListWorkteamsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListWorkteams
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListWorkteams
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListWorkteams,
        stubs: @stubs,
        params_class: Params::ListWorkteamsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_workteams
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Adds a resouce policy to control access to a model group. For information about
    #             resoure policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based
    #                 policies and resource-based policies</a> in the <i>Amazon Web Services Identity and Access Management User Guide.</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::PutModelPackageGroupPolicyInput}.
    #
    # @option params [String] :model_package_group_name
    #   <p>The name of the model group to add a resource policy to.</p>
    #
    # @option params [String] :resource_policy
    #   <p>The resource policy for the model group.</p>
    #
    # @return [Types::PutModelPackageGroupPolicyOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.put_model_package_group_policy(
    #     model_package_group_name: 'ModelPackageGroupName', # required
    #     resource_policy: 'ResourcePolicy' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::PutModelPackageGroupPolicyOutput
    #   resp.data.model_package_group_arn #=> String
    #
    def put_model_package_group_policy(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::PutModelPackageGroupPolicyInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::PutModelPackageGroupPolicyInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::PutModelPackageGroupPolicy
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::PutModelPackageGroupPolicy
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::PutModelPackageGroupPolicy,
        stubs: @stubs,
        params_class: Params::PutModelPackageGroupPolicyOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :put_model_package_group_policy
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Use this action to inspect your lineage and discover relationships between entities.
    #          For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/querying-lineage-entities.html">
    #             Querying Lineage Entities</a> in the <i>Amazon SageMaker Developer Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::QueryLineageInput}.
    #
    # @option params [Array<String>] :start_arns
    #   <p>A list of resource Amazon Resource Name (ARN) that represent the starting point for your lineage query.</p>
    #
    # @option params [String] :direction
    #   <p>Associations between lineage entities have a direction.  This parameter determines the direction from the
    #            StartArn(s) that the query traverses.</p>
    #
    # @option params [Boolean] :include_edges
    #   <p> Setting this value to <code>True</code> retrieves not only the entities of interest but also the
    #            <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking-entities.html">Associations</a> and
    #            lineage entities on the path. Set to <code>False</code> to only return lineage entities that match your query.</p>
    #
    # @option params [QueryFilters] :filters
    #   <p>A set of filtering parameters that allow you to specify which entities should be returned.</p>
    #            <ul>
    #               <li>
    #                  <p>Properties - Key-value pairs to match on the lineage entities' properties.</p>
    #               </li>
    #               <li>
    #                  <p>LineageTypes - A set of lineage entity types to match on. For example: <code>TrialComponent</code>,
    #               <code>Artifact</code>, or <code>Context</code>.</p>
    #               </li>
    #               <li>
    #                  <p>CreatedBefore - Filter entities created before this date.</p>
    #               </li>
    #               <li>
    #                  <p>ModifiedBefore - Filter entities modified before this date.</p>
    #               </li>
    #               <li>
    #                  <p>ModifiedAfter - Filter entities modified after this date.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_depth
    #   <p>The maximum depth in lineage relationships from the <code>StartArns</code> that are traversed. Depth is a measure of the number
    #            of <code>Associations</code> from the <code>StartArn</code> entity to the matched results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>Limits the number of vertices in the results. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    #
    # @option params [String] :next_token
    #   <p>Limits the number of vertices in the request. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>
    #
    # @return [Types::QueryLineageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.query_lineage(
    #     start_arns: [
    #       'member'
    #     ], # required
    #     direction: 'Both', # accepts ["Both", "Ascendants", "Descendants"]
    #     include_edges: false,
    #     filters: {
    #       types: [
    #         'member'
    #       ],
    #       lineage_types: [
    #         'TrialComponent' # accepts ["TrialComponent", "Artifact", "Context", "Action"]
    #       ],
    #       created_before: Time.now,
    #       created_after: Time.now,
    #       modified_before: Time.now,
    #       modified_after: Time.now,
    #       properties: {
    #         'key' => 'value'
    #       }
    #     },
    #     max_depth: 1,
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::QueryLineageOutput
    #   resp.data.vertices #=> Array<Vertex>
    #   resp.data.vertices[0] #=> Types::Vertex
    #   resp.data.vertices[0].arn #=> String
    #   resp.data.vertices[0].type #=> String
    #   resp.data.vertices[0].lineage_type #=> String, one of ["TrialComponent", "Artifact", "Context", "Action"]
    #   resp.data.edges #=> Array<Edge>
    #   resp.data.edges[0] #=> Types::Edge
    #   resp.data.edges[0].source_arn #=> String
    #   resp.data.edges[0].destination_arn #=> String
    #   resp.data.edges[0].association_type #=> String, one of ["ContributedTo", "AssociatedWith", "DerivedFrom", "Produced"]
    #   resp.data.next_token #=> String
    #
    def query_lineage(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::QueryLineageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::QueryLineageInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::QueryLineage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::QueryLineage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::QueryLineage,
        stubs: @stubs,
        params_class: Params::QueryLineageOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :query_lineage
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Register devices.</p>
    #
    # @param [Hash] params
    #   See {Types::RegisterDevicesInput}.
    #
    # @option params [String] :device_fleet_name
    #   <p>The name of the fleet.</p>
    #
    # @option params [Array<Device>] :devices
    #   <p>A list of devices to register with SageMaker Edge Manager.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tags associated with devices.</p>
    #
    # @return [Types::RegisterDevicesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.register_devices(
    #     device_fleet_name: 'DeviceFleetName', # required
    #     devices: [
    #       {
    #         device_name: 'DeviceName', # required
    #         description: 'Description',
    #         iot_thing_name: 'IotThingName'
    #       }
    #     ], # required
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RegisterDevicesOutput
    #
    def register_devices(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RegisterDevicesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RegisterDevicesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RegisterDevices
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::RegisterDevices
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::RegisterDevices,
        stubs: @stubs,
        params_class: Params::RegisterDevicesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :register_devices
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Renders the UI template so that you can preview the worker's experience. </p>
    #
    # @param [Hash] params
    #   See {Types::RenderUiTemplateInput}.
    #
    # @option params [UiTemplate] :ui_template
    #   <p>A <code>Template</code> object containing the worker UI template to render.</p>
    #
    # @option params [RenderableTask] :task
    #   <p>A <code>RenderableTask</code> object containing a representative task to
    #               render.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) that has access to the S3 objects that are used by the
    #               template.</p>
    #
    # @option params [String] :human_task_ui_arn
    #   <p>The <code>HumanTaskUiArn</code> of the worker UI that you want to render. Do not
    #               provide a <code>HumanTaskUiArn</code> if you use the <code>UiTemplate</code>
    #               parameter.</p>
    #           <p>See a list of available Human Ui Amazon Resource Names (ARNs) in <a>UiConfig</a>.</p>
    #
    # @return [Types::RenderUiTemplateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.render_ui_template(
    #     ui_template: {
    #       content: 'Content' # required
    #     },
    #     task: {
    #       input: 'Input' # required
    #     }, # required
    #     role_arn: 'RoleArn', # required
    #     human_task_ui_arn: 'HumanTaskUiArn'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RenderUiTemplateOutput
    #   resp.data.rendered_content #=> String
    #   resp.data.errors #=> Array<RenderingError>
    #   resp.data.errors[0] #=> Types::RenderingError
    #   resp.data.errors[0].code #=> String
    #   resp.data.errors[0].message #=> String
    #
    def render_ui_template(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RenderUiTemplateInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RenderUiTemplateInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RenderUiTemplate
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::RenderUiTemplate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::RenderUiTemplate,
        stubs: @stubs,
        params_class: Params::RenderUiTemplateOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :render_ui_template
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Retry the execution of the pipeline.</p>
    #
    # @param [Hash] params
    #   See {Types::RetryPipelineExecutionInput}.
    #
    # @option params [String] :pipeline_execution_arn
    #   <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    #
    # @option params [String] :client_request_token
    #   <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #            operation. An idempotent operation completes no more than once.</p>
    #
    # @option params [ParallelismConfiguration] :parallelism_configuration
    #   <p>This configuration, if specified, overrides the parallelism configuration
    #               of the parent pipeline.</p>
    #
    # @return [Types::RetryPipelineExecutionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.retry_pipeline_execution(
    #     pipeline_execution_arn: 'PipelineExecutionArn', # required
    #     client_request_token: 'ClientRequestToken', # required
    #     parallelism_configuration: {
    #       max_parallel_execution_steps: 1 # required
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RetryPipelineExecutionOutput
    #   resp.data.pipeline_execution_arn #=> String
    #
    def retry_pipeline_execution(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RetryPipelineExecutionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RetryPipelineExecutionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RetryPipelineExecution
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ConflictException, Errors::ResourceLimitExceeded, Errors::ResourceNotFound]),
        data_parser: Parsers::RetryPipelineExecution
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::RetryPipelineExecution,
        stubs: @stubs,
        params_class: Params::RetryPipelineExecutionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :retry_pipeline_execution
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Finds Amazon SageMaker resources that match a search query. Matching resources are returned
    #       as a list of <code>SearchRecord</code> objects in the response. You can sort the search
    #       results by any resource property in a ascending or descending order.</p>
    #          <p>You can query against the following value types: numeric, text, Boolean, and
    #       timestamp.</p>
    #
    # @param [Hash] params
    #   See {Types::SearchInput}.
    #
    # @option params [String] :resource
    #   <p>The name of the Amazon SageMaker resource to search for.</p>
    #
    # @option params [SearchExpression] :search_expression
    #   <p>A Boolean conditional statement. Resources must satisfy this condition to be
    #         included in search results. You must provide at least one subexpression, filter, or
    #         nested filter. The maximum number of recursive <code>SubExpressions</code>,
    #         <code>NestedFilters</code>, and <code>Filters</code> that can be included in a
    #         <code>SearchExpression</code> object is 50.</p>
    #
    # @option params [String] :sort_by
    #   <p>The name of the resource property used to sort the <code>SearchResults</code>. The
    #         default is <code>LastModifiedTime</code>.</p>
    #
    # @option params [String] :sort_order
    #   <p>How <code>SearchResults</code> are ordered. Valid values are <code>Ascending</code> or
    #         <code>Descending</code>. The default is <code>Descending</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>If more than <code>MaxResults</code> resources match the specified
    #         <code>SearchExpression</code>, the response includes a
    #         <code>NextToken</code>. The <code>NextToken</code> can be passed to the next
    #         <code>SearchRequest</code> to continue retrieving results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return.</p>
    #
    # @return [Types::SearchOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.search(
    #     resource: 'TrainingJob', # required - accepts ["TrainingJob", "Experiment", "ExperimentTrial", "ExperimentTrialComponent", "Endpoint", "ModelPackage", "ModelPackageGroup", "Pipeline", "PipelineExecution", "FeatureGroup", "Project"]
    #     search_expression: {
    #       filters: [
    #         {
    #           name: 'Name', # required
    #           operator: 'Equals', # accepts ["Equals", "NotEquals", "GreaterThan", "GreaterThanOrEqualTo", "LessThan", "LessThanOrEqualTo", "Contains", "Exists", "NotExists", "In"]
    #           value: 'Value'
    #         }
    #       ],
    #       nested_filters: [
    #         {
    #           nested_property_name: 'NestedPropertyName', # required
    #         }
    #       ],
    #       operator: 'And' # accepts ["And", "Or"]
    #     },
    #     sort_by: 'SortBy',
    #     sort_order: 'Ascending', # accepts ["Ascending", "Descending"]
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::SearchOutput
    #   resp.data.results #=> Array<SearchRecord>
    #   resp.data.results[0] #=> Types::SearchRecord
    #   resp.data.results[0].training_job #=> Types::TrainingJob
    #   resp.data.results[0].training_job.training_job_name #=> String
    #   resp.data.results[0].training_job.training_job_arn #=> String
    #   resp.data.results[0].training_job.tuning_job_arn #=> String
    #   resp.data.results[0].training_job.labeling_job_arn #=> String
    #   resp.data.results[0].training_job.auto_ml_job_arn #=> String
    #   resp.data.results[0].training_job.model_artifacts #=> Types::ModelArtifacts
    #   resp.data.results[0].training_job.model_artifacts.s3_model_artifacts #=> String
    #   resp.data.results[0].training_job.training_job_status #=> String, one of ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.results[0].training_job.secondary_status #=> String, one of ["Starting", "LaunchingMLInstances", "PreparingTrainingStack", "Downloading", "DownloadingTrainingImage", "Training", "Uploading", "Stopping", "Stopped", "MaxRuntimeExceeded", "Completed", "Failed", "Interrupted", "MaxWaitTimeExceeded", "Updating", "Restarting"]
    #   resp.data.results[0].training_job.failure_reason #=> String
    #   resp.data.results[0].training_job.hyper_parameters #=> Hash<String, String>
    #   resp.data.results[0].training_job.hyper_parameters['key'] #=> String
    #   resp.data.results[0].training_job.algorithm_specification #=> Types::AlgorithmSpecification
    #   resp.data.results[0].training_job.algorithm_specification.training_image #=> String
    #   resp.data.results[0].training_job.algorithm_specification.algorithm_name #=> String
    #   resp.data.results[0].training_job.algorithm_specification.training_input_mode #=> String, one of ["Pipe", "File", "FastFile"]
    #   resp.data.results[0].training_job.algorithm_specification.metric_definitions #=> Array<MetricDefinition>
    #   resp.data.results[0].training_job.algorithm_specification.metric_definitions[0] #=> Types::MetricDefinition
    #   resp.data.results[0].training_job.algorithm_specification.metric_definitions[0].name #=> String
    #   resp.data.results[0].training_job.algorithm_specification.metric_definitions[0].regex #=> String
    #   resp.data.results[0].training_job.algorithm_specification.enable_sage_maker_metrics_time_series #=> Boolean
    #   resp.data.results[0].training_job.role_arn #=> String
    #   resp.data.results[0].training_job.input_data_config #=> Array<Channel>
    #   resp.data.results[0].training_job.input_data_config[0] #=> Types::Channel
    #   resp.data.results[0].training_job.input_data_config[0].channel_name #=> String
    #   resp.data.results[0].training_job.input_data_config[0].data_source #=> Types::DataSource
    #   resp.data.results[0].training_job.input_data_config[0].data_source.s3_data_source #=> Types::S3DataSource
    #   resp.data.results[0].training_job.input_data_config[0].data_source.s3_data_source.s3_data_type #=> String, one of ["ManifestFile", "S3Prefix", "AugmentedManifestFile"]
    #   resp.data.results[0].training_job.input_data_config[0].data_source.s3_data_source.s3_uri #=> String
    #   resp.data.results[0].training_job.input_data_config[0].data_source.s3_data_source.s3_data_distribution_type #=> String, one of ["FullyReplicated", "ShardedByS3Key"]
    #   resp.data.results[0].training_job.input_data_config[0].data_source.s3_data_source.attribute_names #=> Array<String>
    #   resp.data.results[0].training_job.input_data_config[0].data_source.s3_data_source.attribute_names[0] #=> String
    #   resp.data.results[0].training_job.input_data_config[0].data_source.file_system_data_source #=> Types::FileSystemDataSource
    #   resp.data.results[0].training_job.input_data_config[0].data_source.file_system_data_source.file_system_id #=> String
    #   resp.data.results[0].training_job.input_data_config[0].data_source.file_system_data_source.file_system_access_mode #=> String, one of ["rw", "ro"]
    #   resp.data.results[0].training_job.input_data_config[0].data_source.file_system_data_source.file_system_type #=> String, one of ["EFS", "FSxLustre"]
    #   resp.data.results[0].training_job.input_data_config[0].data_source.file_system_data_source.directory_path #=> String
    #   resp.data.results[0].training_job.input_data_config[0].content_type #=> String
    #   resp.data.results[0].training_job.input_data_config[0].compression_type #=> String, one of ["None", "Gzip"]
    #   resp.data.results[0].training_job.input_data_config[0].record_wrapper_type #=> String, one of ["None", "RecordIO"]
    #   resp.data.results[0].training_job.input_data_config[0].input_mode #=> String, one of ["Pipe", "File", "FastFile"]
    #   resp.data.results[0].training_job.input_data_config[0].shuffle_config #=> Types::ShuffleConfig
    #   resp.data.results[0].training_job.input_data_config[0].shuffle_config.seed #=> Integer
    #   resp.data.results[0].training_job.output_data_config #=> Types::OutputDataConfig
    #   resp.data.results[0].training_job.output_data_config.kms_key_id #=> String
    #   resp.data.results[0].training_job.output_data_config.s3_output_path #=> String
    #   resp.data.results[0].training_job.resource_config #=> Types::ResourceConfig
    #   resp.data.results[0].training_job.resource_config.instance_type #=> String, one of ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.p4d.24xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5n.xlarge", "ml.c5n.2xlarge", "ml.c5n.4xlarge", "ml.c5n.9xlarge", "ml.c5n.18xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #   resp.data.results[0].training_job.resource_config.instance_count #=> Integer
    #   resp.data.results[0].training_job.resource_config.volume_size_in_gb #=> Integer
    #   resp.data.results[0].training_job.resource_config.volume_kms_key_id #=> String
    #   resp.data.results[0].training_job.vpc_config #=> Types::VpcConfig
    #   resp.data.results[0].training_job.vpc_config.security_group_ids #=> Array<String>
    #   resp.data.results[0].training_job.vpc_config.security_group_ids[0] #=> String
    #   resp.data.results[0].training_job.vpc_config.subnets #=> Array<String>
    #   resp.data.results[0].training_job.vpc_config.subnets[0] #=> String
    #   resp.data.results[0].training_job.stopping_condition #=> Types::StoppingCondition
    #   resp.data.results[0].training_job.stopping_condition.max_runtime_in_seconds #=> Integer
    #   resp.data.results[0].training_job.stopping_condition.max_wait_time_in_seconds #=> Integer
    #   resp.data.results[0].training_job.creation_time #=> Time
    #   resp.data.results[0].training_job.training_start_time #=> Time
    #   resp.data.results[0].training_job.training_end_time #=> Time
    #   resp.data.results[0].training_job.last_modified_time #=> Time
    #   resp.data.results[0].training_job.secondary_status_transitions #=> Array<SecondaryStatusTransition>
    #   resp.data.results[0].training_job.secondary_status_transitions[0] #=> Types::SecondaryStatusTransition
    #   resp.data.results[0].training_job.secondary_status_transitions[0].status #=> String, one of ["Starting", "LaunchingMLInstances", "PreparingTrainingStack", "Downloading", "DownloadingTrainingImage", "Training", "Uploading", "Stopping", "Stopped", "MaxRuntimeExceeded", "Completed", "Failed", "Interrupted", "MaxWaitTimeExceeded", "Updating", "Restarting"]
    #   resp.data.results[0].training_job.secondary_status_transitions[0].start_time #=> Time
    #   resp.data.results[0].training_job.secondary_status_transitions[0].end_time #=> Time
    #   resp.data.results[0].training_job.secondary_status_transitions[0].status_message #=> String
    #   resp.data.results[0].training_job.final_metric_data_list #=> Array<MetricData>
    #   resp.data.results[0].training_job.final_metric_data_list[0] #=> Types::MetricData
    #   resp.data.results[0].training_job.final_metric_data_list[0].metric_name #=> String
    #   resp.data.results[0].training_job.final_metric_data_list[0].value #=> Float
    #   resp.data.results[0].training_job.final_metric_data_list[0].timestamp #=> Time
    #   resp.data.results[0].training_job.enable_network_isolation #=> Boolean
    #   resp.data.results[0].training_job.enable_inter_container_traffic_encryption #=> Boolean
    #   resp.data.results[0].training_job.enable_managed_spot_training #=> Boolean
    #   resp.data.results[0].training_job.checkpoint_config #=> Types::CheckpointConfig
    #   resp.data.results[0].training_job.checkpoint_config.s3_uri #=> String
    #   resp.data.results[0].training_job.checkpoint_config.local_path #=> String
    #   resp.data.results[0].training_job.training_time_in_seconds #=> Integer
    #   resp.data.results[0].training_job.billable_time_in_seconds #=> Integer
    #   resp.data.results[0].training_job.debug_hook_config #=> Types::DebugHookConfig
    #   resp.data.results[0].training_job.debug_hook_config.local_path #=> String
    #   resp.data.results[0].training_job.debug_hook_config.s3_output_path #=> String
    #   resp.data.results[0].training_job.debug_hook_config.hook_parameters #=> Hash<String, String>
    #   resp.data.results[0].training_job.debug_hook_config.hook_parameters['key'] #=> String
    #   resp.data.results[0].training_job.debug_hook_config.collection_configurations #=> Array<CollectionConfiguration>
    #   resp.data.results[0].training_job.debug_hook_config.collection_configurations[0] #=> Types::CollectionConfiguration
    #   resp.data.results[0].training_job.debug_hook_config.collection_configurations[0].collection_name #=> String
    #   resp.data.results[0].training_job.debug_hook_config.collection_configurations[0].collection_parameters #=> Hash<String, String>
    #   resp.data.results[0].training_job.debug_hook_config.collection_configurations[0].collection_parameters['key'] #=> String
    #   resp.data.results[0].training_job.experiment_config #=> Types::ExperimentConfig
    #   resp.data.results[0].training_job.experiment_config.experiment_name #=> String
    #   resp.data.results[0].training_job.experiment_config.trial_name #=> String
    #   resp.data.results[0].training_job.experiment_config.trial_component_display_name #=> String
    #   resp.data.results[0].training_job.debug_rule_configurations #=> Array<DebugRuleConfiguration>
    #   resp.data.results[0].training_job.debug_rule_configurations[0] #=> Types::DebugRuleConfiguration
    #   resp.data.results[0].training_job.debug_rule_configurations[0].rule_configuration_name #=> String
    #   resp.data.results[0].training_job.debug_rule_configurations[0].local_path #=> String
    #   resp.data.results[0].training_job.debug_rule_configurations[0].s3_output_path #=> String
    #   resp.data.results[0].training_job.debug_rule_configurations[0].rule_evaluator_image #=> String
    #   resp.data.results[0].training_job.debug_rule_configurations[0].instance_type #=> String, one of ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.results[0].training_job.debug_rule_configurations[0].volume_size_in_gb #=> Integer
    #   resp.data.results[0].training_job.debug_rule_configurations[0].rule_parameters #=> Hash<String, String>
    #   resp.data.results[0].training_job.debug_rule_configurations[0].rule_parameters['key'] #=> String
    #   resp.data.results[0].training_job.tensor_board_output_config #=> Types::TensorBoardOutputConfig
    #   resp.data.results[0].training_job.tensor_board_output_config.local_path #=> String
    #   resp.data.results[0].training_job.tensor_board_output_config.s3_output_path #=> String
    #   resp.data.results[0].training_job.debug_rule_evaluation_statuses #=> Array<DebugRuleEvaluationStatus>
    #   resp.data.results[0].training_job.debug_rule_evaluation_statuses[0] #=> Types::DebugRuleEvaluationStatus
    #   resp.data.results[0].training_job.debug_rule_evaluation_statuses[0].rule_configuration_name #=> String
    #   resp.data.results[0].training_job.debug_rule_evaluation_statuses[0].rule_evaluation_job_arn #=> String
    #   resp.data.results[0].training_job.debug_rule_evaluation_statuses[0].rule_evaluation_status #=> String, one of ["InProgress", "NoIssuesFound", "IssuesFound", "Error", "Stopping", "Stopped"]
    #   resp.data.results[0].training_job.debug_rule_evaluation_statuses[0].status_details #=> String
    #   resp.data.results[0].training_job.debug_rule_evaluation_statuses[0].last_modified_time #=> Time
    #   resp.data.results[0].training_job.environment #=> Hash<String, String>
    #   resp.data.results[0].training_job.environment['key'] #=> String
    #   resp.data.results[0].training_job.retry_strategy #=> Types::RetryStrategy
    #   resp.data.results[0].training_job.retry_strategy.maximum_retry_attempts #=> Integer
    #   resp.data.results[0].training_job.tags #=> Array<Tag>
    #   resp.data.results[0].training_job.tags[0] #=> Types::Tag
    #   resp.data.results[0].training_job.tags[0].key #=> String
    #   resp.data.results[0].training_job.tags[0].value #=> String
    #   resp.data.results[0].experiment #=> Types::Experiment
    #   resp.data.results[0].experiment.experiment_name #=> String
    #   resp.data.results[0].experiment.experiment_arn #=> String
    #   resp.data.results[0].experiment.display_name #=> String
    #   resp.data.results[0].experiment.source #=> Types::ExperimentSource
    #   resp.data.results[0].experiment.source.source_arn #=> String
    #   resp.data.results[0].experiment.source.source_type #=> String
    #   resp.data.results[0].experiment.description #=> String
    #   resp.data.results[0].experiment.creation_time #=> Time
    #   resp.data.results[0].experiment.created_by #=> Types::UserContext
    #   resp.data.results[0].experiment.created_by.user_profile_arn #=> String
    #   resp.data.results[0].experiment.created_by.user_profile_name #=> String
    #   resp.data.results[0].experiment.created_by.domain_id #=> String
    #   resp.data.results[0].experiment.last_modified_time #=> Time
    #   resp.data.results[0].experiment.last_modified_by #=> Types::UserContext
    #   resp.data.results[0].experiment.tags #=> Array<Tag>
    #   resp.data.results[0].trial #=> Types::Trial
    #   resp.data.results[0].trial.trial_name #=> String
    #   resp.data.results[0].trial.trial_arn #=> String
    #   resp.data.results[0].trial.display_name #=> String
    #   resp.data.results[0].trial.experiment_name #=> String
    #   resp.data.results[0].trial.source #=> Types::TrialSource
    #   resp.data.results[0].trial.source.source_arn #=> String
    #   resp.data.results[0].trial.source.source_type #=> String
    #   resp.data.results[0].trial.creation_time #=> Time
    #   resp.data.results[0].trial.created_by #=> Types::UserContext
    #   resp.data.results[0].trial.last_modified_time #=> Time
    #   resp.data.results[0].trial.last_modified_by #=> Types::UserContext
    #   resp.data.results[0].trial.metadata_properties #=> Types::MetadataProperties
    #   resp.data.results[0].trial.metadata_properties.commit_id #=> String
    #   resp.data.results[0].trial.metadata_properties.repository #=> String
    #   resp.data.results[0].trial.metadata_properties.generated_by #=> String
    #   resp.data.results[0].trial.metadata_properties.project_id #=> String
    #   resp.data.results[0].trial.tags #=> Array<Tag>
    #   resp.data.results[0].trial.trial_component_summaries #=> Array<TrialComponentSimpleSummary>
    #   resp.data.results[0].trial.trial_component_summaries[0] #=> Types::TrialComponentSimpleSummary
    #   resp.data.results[0].trial.trial_component_summaries[0].trial_component_name #=> String
    #   resp.data.results[0].trial.trial_component_summaries[0].trial_component_arn #=> String
    #   resp.data.results[0].trial.trial_component_summaries[0].trial_component_source #=> Types::TrialComponentSource
    #   resp.data.results[0].trial.trial_component_summaries[0].trial_component_source.source_arn #=> String
    #   resp.data.results[0].trial.trial_component_summaries[0].trial_component_source.source_type #=> String
    #   resp.data.results[0].trial.trial_component_summaries[0].creation_time #=> Time
    #   resp.data.results[0].trial.trial_component_summaries[0].created_by #=> Types::UserContext
    #   resp.data.results[0].trial_component #=> Types::TrialComponent
    #   resp.data.results[0].trial_component.trial_component_name #=> String
    #   resp.data.results[0].trial_component.display_name #=> String
    #   resp.data.results[0].trial_component.trial_component_arn #=> String
    #   resp.data.results[0].trial_component.source #=> Types::TrialComponentSource
    #   resp.data.results[0].trial_component.status #=> Types::TrialComponentStatus
    #   resp.data.results[0].trial_component.status.primary_status #=> String, one of ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.results[0].trial_component.status.message #=> String
    #   resp.data.results[0].trial_component.start_time #=> Time
    #   resp.data.results[0].trial_component.end_time #=> Time
    #   resp.data.results[0].trial_component.creation_time #=> Time
    #   resp.data.results[0].trial_component.created_by #=> Types::UserContext
    #   resp.data.results[0].trial_component.last_modified_time #=> Time
    #   resp.data.results[0].trial_component.last_modified_by #=> Types::UserContext
    #   resp.data.results[0].trial_component.parameters #=> Hash<String, TrialComponentParameterValue>
    #   resp.data.results[0].trial_component.parameters['key'] #=> TrialComponentParameterValue
    #   resp.data.results[0].trial_component.input_artifacts #=> Hash<String, TrialComponentArtifact>
    #   resp.data.results[0].trial_component.input_artifacts['key'] #=> Types::TrialComponentArtifact
    #   resp.data.results[0].trial_component.input_artifacts['key'].media_type #=> String
    #   resp.data.results[0].trial_component.input_artifacts['key'].value #=> String
    #   resp.data.results[0].trial_component.output_artifacts #=> Hash<String, TrialComponentArtifact>
    #   resp.data.results[0].trial_component.metrics #=> Array<TrialComponentMetricSummary>
    #   resp.data.results[0].trial_component.metrics[0] #=> Types::TrialComponentMetricSummary
    #   resp.data.results[0].trial_component.metrics[0].metric_name #=> String
    #   resp.data.results[0].trial_component.metrics[0].source_arn #=> String
    #   resp.data.results[0].trial_component.metrics[0].time_stamp #=> Time
    #   resp.data.results[0].trial_component.metrics[0].max #=> Float
    #   resp.data.results[0].trial_component.metrics[0].min #=> Float
    #   resp.data.results[0].trial_component.metrics[0].last #=> Float
    #   resp.data.results[0].trial_component.metrics[0].count #=> Integer
    #   resp.data.results[0].trial_component.metrics[0].avg #=> Float
    #   resp.data.results[0].trial_component.metrics[0].std_dev #=> Float
    #   resp.data.results[0].trial_component.metadata_properties #=> Types::MetadataProperties
    #   resp.data.results[0].trial_component.source_detail #=> Types::TrialComponentSourceDetail
    #   resp.data.results[0].trial_component.source_detail.source_arn #=> String
    #   resp.data.results[0].trial_component.source_detail.training_job #=> Types::TrainingJob
    #   resp.data.results[0].trial_component.source_detail.processing_job #=> Types::ProcessingJob
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs #=> Array<ProcessingInput>
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0] #=> Types::ProcessingInput
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].input_name #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].app_managed #=> Boolean
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].s3_input #=> Types::ProcessingS3Input
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].s3_input.s3_uri #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].s3_input.local_path #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].s3_input.s3_data_type #=> String, one of ["ManifestFile", "S3Prefix"]
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].s3_input.s3_input_mode #=> String, one of ["Pipe", "File"]
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].s3_input.s3_data_distribution_type #=> String, one of ["FullyReplicated", "ShardedByS3Key"]
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].s3_input.s3_compression_type #=> String, one of ["None", "Gzip"]
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition #=> Types::DatasetDefinition
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.athena_dataset_definition #=> Types::AthenaDatasetDefinition
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.athena_dataset_definition.catalog #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.athena_dataset_definition.database #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.athena_dataset_definition.query_string #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.athena_dataset_definition.work_group #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.athena_dataset_definition.output_s3_uri #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.athena_dataset_definition.kms_key_id #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.athena_dataset_definition.output_format #=> String, one of ["PARQUET", "ORC", "AVRO", "JSON", "TEXTFILE"]
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.athena_dataset_definition.output_compression #=> String, one of ["GZIP", "SNAPPY", "ZLIB"]
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.redshift_dataset_definition #=> Types::RedshiftDatasetDefinition
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.redshift_dataset_definition.cluster_id #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.redshift_dataset_definition.database #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.redshift_dataset_definition.db_user #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.redshift_dataset_definition.query_string #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.redshift_dataset_definition.cluster_role_arn #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.redshift_dataset_definition.output_s3_uri #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.redshift_dataset_definition.kms_key_id #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.redshift_dataset_definition.output_format #=> String, one of ["PARQUET", "CSV"]
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.redshift_dataset_definition.output_compression #=> String, one of ["None", "GZIP", "BZIP2", "ZSTD", "SNAPPY"]
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.local_path #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.data_distribution_type #=> String, one of ["FullyReplicated", "ShardedByS3Key"]
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_inputs[0].dataset_definition.input_mode #=> String, one of ["Pipe", "File"]
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_output_config #=> Types::ProcessingOutputConfig
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_output_config.outputs #=> Array<ProcessingOutput>
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_output_config.outputs[0] #=> Types::ProcessingOutput
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_output_config.outputs[0].output_name #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_output_config.outputs[0].s3_output #=> Types::ProcessingS3Output
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_output_config.outputs[0].s3_output.s3_uri #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_output_config.outputs[0].s3_output.local_path #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_output_config.outputs[0].s3_output.s3_upload_mode #=> String, one of ["Continuous", "EndOfJob"]
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_output_config.outputs[0].feature_store_output #=> Types::ProcessingFeatureStoreOutput
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_output_config.outputs[0].feature_store_output.feature_group_name #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_output_config.outputs[0].app_managed #=> Boolean
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_output_config.kms_key_id #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_job_name #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_resources #=> Types::ProcessingResources
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_resources.cluster_config #=> Types::ProcessingClusterConfig
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_resources.cluster_config.instance_count #=> Integer
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_resources.cluster_config.instance_type #=> String, one of ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_resources.cluster_config.volume_size_in_gb #=> Integer
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_resources.cluster_config.volume_kms_key_id #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.stopping_condition #=> Types::ProcessingStoppingCondition
    #   resp.data.results[0].trial_component.source_detail.processing_job.stopping_condition.max_runtime_in_seconds #=> Integer
    #   resp.data.results[0].trial_component.source_detail.processing_job.app_specification #=> Types::AppSpecification
    #   resp.data.results[0].trial_component.source_detail.processing_job.app_specification.image_uri #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.app_specification.container_entrypoint #=> Array<String>
    #   resp.data.results[0].trial_component.source_detail.processing_job.app_specification.container_entrypoint[0] #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.app_specification.container_arguments #=> Array<String>
    #   resp.data.results[0].trial_component.source_detail.processing_job.app_specification.container_arguments[0] #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.environment #=> Hash<String, String>
    #   resp.data.results[0].trial_component.source_detail.processing_job.environment['key'] #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.network_config #=> Types::NetworkConfig
    #   resp.data.results[0].trial_component.source_detail.processing_job.network_config.enable_inter_container_traffic_encryption #=> Boolean
    #   resp.data.results[0].trial_component.source_detail.processing_job.network_config.enable_network_isolation #=> Boolean
    #   resp.data.results[0].trial_component.source_detail.processing_job.network_config.vpc_config #=> Types::VpcConfig
    #   resp.data.results[0].trial_component.source_detail.processing_job.role_arn #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.experiment_config #=> Types::ExperimentConfig
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_job_arn #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_job_status #=> String, one of ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.results[0].trial_component.source_detail.processing_job.exit_message #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.failure_reason #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_end_time #=> Time
    #   resp.data.results[0].trial_component.source_detail.processing_job.processing_start_time #=> Time
    #   resp.data.results[0].trial_component.source_detail.processing_job.last_modified_time #=> Time
    #   resp.data.results[0].trial_component.source_detail.processing_job.creation_time #=> Time
    #   resp.data.results[0].trial_component.source_detail.processing_job.monitoring_schedule_arn #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.auto_ml_job_arn #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.training_job_arn #=> String
    #   resp.data.results[0].trial_component.source_detail.processing_job.tags #=> Array<Tag>
    #   resp.data.results[0].trial_component.source_detail.transform_job #=> Types::TransformJob
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_job_name #=> String
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_job_arn #=> String
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_job_status #=> String, one of ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #   resp.data.results[0].trial_component.source_detail.transform_job.failure_reason #=> String
    #   resp.data.results[0].trial_component.source_detail.transform_job.model_name #=> String
    #   resp.data.results[0].trial_component.source_detail.transform_job.max_concurrent_transforms #=> Integer
    #   resp.data.results[0].trial_component.source_detail.transform_job.model_client_config #=> Types::ModelClientConfig
    #   resp.data.results[0].trial_component.source_detail.transform_job.model_client_config.invocations_timeout_in_seconds #=> Integer
    #   resp.data.results[0].trial_component.source_detail.transform_job.model_client_config.invocations_max_retries #=> Integer
    #   resp.data.results[0].trial_component.source_detail.transform_job.max_payload_in_mb #=> Integer
    #   resp.data.results[0].trial_component.source_detail.transform_job.batch_strategy #=> String, one of ["MultiRecord", "SingleRecord"]
    #   resp.data.results[0].trial_component.source_detail.transform_job.environment #=> Hash<String, String>
    #   resp.data.results[0].trial_component.source_detail.transform_job.environment['key'] #=> String
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_input #=> Types::TransformInput
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_input.data_source #=> Types::TransformDataSource
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_input.data_source.s3_data_source #=> Types::TransformS3DataSource
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_input.data_source.s3_data_source.s3_data_type #=> String, one of ["ManifestFile", "S3Prefix", "AugmentedManifestFile"]
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_input.data_source.s3_data_source.s3_uri #=> String
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_input.content_type #=> String
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_input.compression_type #=> String, one of ["None", "Gzip"]
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_input.split_type #=> String, one of ["None", "Line", "RecordIO", "TFRecord"]
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_output #=> Types::TransformOutput
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_output.s3_output_path #=> String
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_output.accept #=> String
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_output.assemble_with #=> String, one of ["None", "Line"]
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_output.kms_key_id #=> String
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_resources #=> Types::TransformResources
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_resources.instance_type #=> String, one of ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_resources.instance_count #=> Integer
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_resources.volume_kms_key_id #=> String
    #   resp.data.results[0].trial_component.source_detail.transform_job.creation_time #=> Time
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_start_time #=> Time
    #   resp.data.results[0].trial_component.source_detail.transform_job.transform_end_time #=> Time
    #   resp.data.results[0].trial_component.source_detail.transform_job.labeling_job_arn #=> String
    #   resp.data.results[0].trial_component.source_detail.transform_job.auto_ml_job_arn #=> String
    #   resp.data.results[0].trial_component.source_detail.transform_job.data_processing #=> Types::DataProcessing
    #   resp.data.results[0].trial_component.source_detail.transform_job.data_processing.input_filter #=> String
    #   resp.data.results[0].trial_component.source_detail.transform_job.data_processing.output_filter #=> String
    #   resp.data.results[0].trial_component.source_detail.transform_job.data_processing.join_source #=> String, one of ["Input", "None"]
    #   resp.data.results[0].trial_component.source_detail.transform_job.experiment_config #=> Types::ExperimentConfig
    #   resp.data.results[0].trial_component.source_detail.transform_job.tags #=> Array<Tag>
    #   resp.data.results[0].trial_component.lineage_group_arn #=> String
    #   resp.data.results[0].trial_component.tags #=> Array<Tag>
    #   resp.data.results[0].trial_component.parents #=> Array<Parent>
    #   resp.data.results[0].trial_component.parents[0] #=> Types::Parent
    #   resp.data.results[0].trial_component.parents[0].trial_name #=> String
    #   resp.data.results[0].trial_component.parents[0].experiment_name #=> String
    #   resp.data.results[0].endpoint #=> Types::Endpoint
    #   resp.data.results[0].endpoint.endpoint_name #=> String
    #   resp.data.results[0].endpoint.endpoint_arn #=> String
    #   resp.data.results[0].endpoint.endpoint_config_name #=> String
    #   resp.data.results[0].endpoint.production_variants #=> Array<ProductionVariantSummary>
    #   resp.data.results[0].endpoint.production_variants[0] #=> Types::ProductionVariantSummary
    #   resp.data.results[0].endpoint.production_variants[0].variant_name #=> String
    #   resp.data.results[0].endpoint.production_variants[0].deployed_images #=> Array<DeployedImage>
    #   resp.data.results[0].endpoint.production_variants[0].deployed_images[0] #=> Types::DeployedImage
    #   resp.data.results[0].endpoint.production_variants[0].deployed_images[0].specified_image #=> String
    #   resp.data.results[0].endpoint.production_variants[0].deployed_images[0].resolved_image #=> String
    #   resp.data.results[0].endpoint.production_variants[0].deployed_images[0].resolution_time #=> Time
    #   resp.data.results[0].endpoint.production_variants[0].current_weight #=> Float
    #   resp.data.results[0].endpoint.production_variants[0].desired_weight #=> Float
    #   resp.data.results[0].endpoint.production_variants[0].current_instance_count #=> Integer
    #   resp.data.results[0].endpoint.production_variants[0].desired_instance_count #=> Integer
    #   resp.data.results[0].endpoint.production_variants[0].variant_status #=> Array<ProductionVariantStatus>
    #   resp.data.results[0].endpoint.production_variants[0].variant_status[0] #=> Types::ProductionVariantStatus
    #   resp.data.results[0].endpoint.production_variants[0].variant_status[0].status #=> String, one of ["Creating", "Updating", "Deleting", "ActivatingTraffic", "Baking"]
    #   resp.data.results[0].endpoint.production_variants[0].variant_status[0].status_message #=> String
    #   resp.data.results[0].endpoint.production_variants[0].variant_status[0].start_time #=> Time
    #   resp.data.results[0].endpoint.production_variants[0].current_serverless_config #=> Types::ProductionVariantServerlessConfig
    #   resp.data.results[0].endpoint.production_variants[0].current_serverless_config.memory_size_in_mb #=> Integer
    #   resp.data.results[0].endpoint.production_variants[0].current_serverless_config.max_concurrency #=> Integer
    #   resp.data.results[0].endpoint.production_variants[0].desired_serverless_config #=> Types::ProductionVariantServerlessConfig
    #   resp.data.results[0].endpoint.data_capture_config #=> Types::DataCaptureConfigSummary
    #   resp.data.results[0].endpoint.data_capture_config.enable_capture #=> Boolean
    #   resp.data.results[0].endpoint.data_capture_config.capture_status #=> String, one of ["Started", "Stopped"]
    #   resp.data.results[0].endpoint.data_capture_config.current_sampling_percentage #=> Integer
    #   resp.data.results[0].endpoint.data_capture_config.destination_s3_uri #=> String
    #   resp.data.results[0].endpoint.data_capture_config.kms_key_id #=> String
    #   resp.data.results[0].endpoint.endpoint_status #=> String, one of ["OutOfService", "Creating", "Updating", "SystemUpdating", "RollingBack", "InService", "Deleting", "Failed"]
    #   resp.data.results[0].endpoint.failure_reason #=> String
    #   resp.data.results[0].endpoint.creation_time #=> Time
    #   resp.data.results[0].endpoint.last_modified_time #=> Time
    #   resp.data.results[0].endpoint.monitoring_schedules #=> Array<MonitoringSchedule>
    #   resp.data.results[0].endpoint.monitoring_schedules[0] #=> Types::MonitoringSchedule
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_arn #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_name #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_status #=> String, one of ["Pending", "Failed", "Scheduled", "Stopped"]
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_type #=> String, one of ["DataQuality", "ModelQuality", "ModelBias", "ModelExplainability"]
    #   resp.data.results[0].endpoint.monitoring_schedules[0].failure_reason #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].creation_time #=> Time
    #   resp.data.results[0].endpoint.monitoring_schedules[0].last_modified_time #=> Time
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config #=> Types::MonitoringScheduleConfig
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.schedule_config #=> Types::ScheduleConfig
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.schedule_config.schedule_expression #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition #=> Types::MonitoringJobDefinition
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.baseline_config #=> Types::MonitoringBaselineConfig
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.baseline_config.baselining_job_name #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.baseline_config.constraints_resource #=> Types::MonitoringConstraintsResource
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.baseline_config.constraints_resource.s3_uri #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.baseline_config.statistics_resource #=> Types::MonitoringStatisticsResource
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.baseline_config.statistics_resource.s3_uri #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_inputs #=> Array<MonitoringInput>
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0] #=> Types::MonitoringInput
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input #=> Types::EndpointInput
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.endpoint_name #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.local_path #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.s3_input_mode #=> String, one of ["Pipe", "File"]
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.s3_data_distribution_type #=> String, one of ["FullyReplicated", "ShardedByS3Key"]
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.features_attribute #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.inference_attribute #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.probability_attribute #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.probability_threshold_attribute #=> Float
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.start_time_offset #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_inputs[0].endpoint_input.end_time_offset #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_output_config #=> Types::MonitoringOutputConfig
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_output_config.monitoring_outputs #=> Array<MonitoringOutput>
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_output_config.monitoring_outputs[0] #=> Types::MonitoringOutput
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_output_config.monitoring_outputs[0].s3_output #=> Types::MonitoringS3Output
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_output_config.monitoring_outputs[0].s3_output.s3_uri #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_output_config.monitoring_outputs[0].s3_output.local_path #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_output_config.monitoring_outputs[0].s3_output.s3_upload_mode #=> String, one of ["Continuous", "EndOfJob"]
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_output_config.kms_key_id #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_resources #=> Types::MonitoringResources
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_resources.cluster_config #=> Types::MonitoringClusterConfig
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_resources.cluster_config.instance_count #=> Integer
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_resources.cluster_config.instance_type #=> String, one of ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_resources.cluster_config.volume_size_in_gb #=> Integer
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_resources.cluster_config.volume_kms_key_id #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_app_specification #=> Types::MonitoringAppSpecification
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_app_specification.image_uri #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_app_specification.container_entrypoint #=> Array<String>
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_app_specification.container_arguments #=> Array<String>
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_app_specification.container_arguments[0] #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_app_specification.record_preprocessor_source_uri #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.monitoring_app_specification.post_analytics_processor_source_uri #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.stopping_condition #=> Types::MonitoringStoppingCondition
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.stopping_condition.max_runtime_in_seconds #=> Integer
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.environment #=> Hash<String, String>
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.environment['key'] #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.network_config #=> Types::NetworkConfig
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition.role_arn #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_job_definition_name #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].monitoring_schedule_config.monitoring_type #=> String, one of ["DataQuality", "ModelQuality", "ModelBias", "ModelExplainability"]
    #   resp.data.results[0].endpoint.monitoring_schedules[0].endpoint_name #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].last_monitoring_execution_summary #=> Types::MonitoringExecutionSummary
    #   resp.data.results[0].endpoint.monitoring_schedules[0].last_monitoring_execution_summary.monitoring_schedule_name #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].last_monitoring_execution_summary.scheduled_time #=> Time
    #   resp.data.results[0].endpoint.monitoring_schedules[0].last_monitoring_execution_summary.creation_time #=> Time
    #   resp.data.results[0].endpoint.monitoring_schedules[0].last_monitoring_execution_summary.last_modified_time #=> Time
    #   resp.data.results[0].endpoint.monitoring_schedules[0].last_monitoring_execution_summary.monitoring_execution_status #=> String, one of ["Pending", "Completed", "CompletedWithViolations", "InProgress", "Failed", "Stopping", "Stopped"]
    #   resp.data.results[0].endpoint.monitoring_schedules[0].last_monitoring_execution_summary.processing_job_arn #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].last_monitoring_execution_summary.endpoint_name #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].last_monitoring_execution_summary.failure_reason #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].last_monitoring_execution_summary.monitoring_job_definition_name #=> String
    #   resp.data.results[0].endpoint.monitoring_schedules[0].last_monitoring_execution_summary.monitoring_type #=> String, one of ["DataQuality", "ModelQuality", "ModelBias", "ModelExplainability"]
    #   resp.data.results[0].endpoint.monitoring_schedules[0].tags #=> Array<Tag>
    #   resp.data.results[0].endpoint.tags #=> Array<Tag>
    #   resp.data.results[0].model_package #=> Types::ModelPackage
    #   resp.data.results[0].model_package.model_package_name #=> String
    #   resp.data.results[0].model_package.model_package_group_name #=> String
    #   resp.data.results[0].model_package.model_package_version #=> Integer
    #   resp.data.results[0].model_package.model_package_arn #=> String
    #   resp.data.results[0].model_package.model_package_description #=> String
    #   resp.data.results[0].model_package.creation_time #=> Time
    #   resp.data.results[0].model_package.inference_specification #=> Types::InferenceSpecification
    #   resp.data.results[0].model_package.inference_specification.containers #=> Array<ModelPackageContainerDefinition>
    #   resp.data.results[0].model_package.inference_specification.containers[0] #=> Types::ModelPackageContainerDefinition
    #   resp.data.results[0].model_package.inference_specification.containers[0].container_hostname #=> String
    #   resp.data.results[0].model_package.inference_specification.containers[0].image #=> String
    #   resp.data.results[0].model_package.inference_specification.containers[0].image_digest #=> String
    #   resp.data.results[0].model_package.inference_specification.containers[0].model_data_url #=> String
    #   resp.data.results[0].model_package.inference_specification.containers[0].product_id #=> String
    #   resp.data.results[0].model_package.inference_specification.containers[0].environment #=> Hash<String, String>
    #   resp.data.results[0].model_package.inference_specification.containers[0].environment['key'] #=> String
    #   resp.data.results[0].model_package.inference_specification.containers[0].model_input #=> Types::ModelInput
    #   resp.data.results[0].model_package.inference_specification.containers[0].model_input.data_input_config #=> String
    #   resp.data.results[0].model_package.inference_specification.containers[0].framework #=> String
    #   resp.data.results[0].model_package.inference_specification.containers[0].framework_version #=> String
    #   resp.data.results[0].model_package.inference_specification.containers[0].nearest_model_name #=> String
    #   resp.data.results[0].model_package.inference_specification.supported_transform_instance_types #=> Array<String>
    #   resp.data.results[0].model_package.inference_specification.supported_transform_instance_types[0] #=> String, one of ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #   resp.data.results[0].model_package.inference_specification.supported_realtime_inference_instance_types #=> Array<String>
    #   resp.data.results[0].model_package.inference_specification.supported_realtime_inference_instance_types[0] #=> String, one of ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.12xlarge", "ml.m5d.24xlarge", "ml.c4.large", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.large", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.12xlarge", "ml.r5.24xlarge", "ml.r5d.large", "ml.r5d.xlarge", "ml.r5d.2xlarge", "ml.r5d.4xlarge", "ml.r5d.12xlarge", "ml.r5d.24xlarge", "ml.inf1.xlarge", "ml.inf1.2xlarge", "ml.inf1.6xlarge", "ml.inf1.24xlarge"]
    #   resp.data.results[0].model_package.inference_specification.supported_content_types #=> Array<String>
    #   resp.data.results[0].model_package.inference_specification.supported_content_types[0] #=> String
    #   resp.data.results[0].model_package.inference_specification.supported_response_mime_types #=> Array<String>
    #   resp.data.results[0].model_package.inference_specification.supported_response_mime_types[0] #=> String
    #   resp.data.results[0].model_package.source_algorithm_specification #=> Types::SourceAlgorithmSpecification
    #   resp.data.results[0].model_package.source_algorithm_specification.source_algorithms #=> Array<SourceAlgorithm>
    #   resp.data.results[0].model_package.source_algorithm_specification.source_algorithms[0] #=> Types::SourceAlgorithm
    #   resp.data.results[0].model_package.source_algorithm_specification.source_algorithms[0].model_data_url #=> String
    #   resp.data.results[0].model_package.source_algorithm_specification.source_algorithms[0].algorithm_name #=> String
    #   resp.data.results[0].model_package.validation_specification #=> Types::ModelPackageValidationSpecification
    #   resp.data.results[0].model_package.validation_specification.validation_role #=> String
    #   resp.data.results[0].model_package.validation_specification.validation_profiles #=> Array<ModelPackageValidationProfile>
    #   resp.data.results[0].model_package.validation_specification.validation_profiles[0] #=> Types::ModelPackageValidationProfile
    #   resp.data.results[0].model_package.validation_specification.validation_profiles[0].profile_name #=> String
    #   resp.data.results[0].model_package.validation_specification.validation_profiles[0].transform_job_definition #=> Types::TransformJobDefinition
    #   resp.data.results[0].model_package.validation_specification.validation_profiles[0].transform_job_definition.max_concurrent_transforms #=> Integer
    #   resp.data.results[0].model_package.validation_specification.validation_profiles[0].transform_job_definition.max_payload_in_mb #=> Integer
    #   resp.data.results[0].model_package.validation_specification.validation_profiles[0].transform_job_definition.batch_strategy #=> String, one of ["MultiRecord", "SingleRecord"]
    #   resp.data.results[0].model_package.validation_specification.validation_profiles[0].transform_job_definition.environment #=> Hash<String, String>
    #   resp.data.results[0].model_package.validation_specification.validation_profiles[0].transform_job_definition.transform_input #=> Types::TransformInput
    #   resp.data.results[0].model_package.validation_specification.validation_profiles[0].transform_job_definition.transform_output #=> Types::TransformOutput
    #   resp.data.results[0].model_package.validation_specification.validation_profiles[0].transform_job_definition.transform_resources #=> Types::TransformResources
    #   resp.data.results[0].model_package.model_package_status #=> String, one of ["Pending", "InProgress", "Completed", "Failed", "Deleting"]
    #   resp.data.results[0].model_package.model_package_status_details #=> Types::ModelPackageStatusDetails
    #   resp.data.results[0].model_package.model_package_status_details.validation_statuses #=> Array<ModelPackageStatusItem>
    #   resp.data.results[0].model_package.model_package_status_details.validation_statuses[0] #=> Types::ModelPackageStatusItem
    #   resp.data.results[0].model_package.model_package_status_details.validation_statuses[0].name #=> String
    #   resp.data.results[0].model_package.model_package_status_details.validation_statuses[0].status #=> String, one of ["NotStarted", "InProgress", "Completed", "Failed"]
    #   resp.data.results[0].model_package.model_package_status_details.validation_statuses[0].failure_reason #=> String
    #   resp.data.results[0].model_package.model_package_status_details.image_scan_statuses #=> Array<ModelPackageStatusItem>
    #   resp.data.results[0].model_package.certify_for_marketplace #=> Boolean
    #   resp.data.results[0].model_package.model_approval_status #=> String, one of ["Approved", "Rejected", "PendingManualApproval"]
    #   resp.data.results[0].model_package.created_by #=> Types::UserContext
    #   resp.data.results[0].model_package.metadata_properties #=> Types::MetadataProperties
    #   resp.data.results[0].model_package.model_metrics #=> Types::ModelMetrics
    #   resp.data.results[0].model_package.model_metrics.model_quality #=> Types::ModelQuality
    #   resp.data.results[0].model_package.model_metrics.model_quality.statistics #=> Types::MetricsSource
    #   resp.data.results[0].model_package.model_metrics.model_quality.statistics.content_type #=> String
    #   resp.data.results[0].model_package.model_metrics.model_quality.statistics.content_digest #=> String
    #   resp.data.results[0].model_package.model_metrics.model_quality.statistics.s3_uri #=> String
    #   resp.data.results[0].model_package.model_metrics.model_quality.constraints #=> Types::MetricsSource
    #   resp.data.results[0].model_package.model_metrics.model_data_quality #=> Types::ModelDataQuality
    #   resp.data.results[0].model_package.model_metrics.model_data_quality.statistics #=> Types::MetricsSource
    #   resp.data.results[0].model_package.model_metrics.model_data_quality.constraints #=> Types::MetricsSource
    #   resp.data.results[0].model_package.model_metrics.bias #=> Types::Bias
    #   resp.data.results[0].model_package.model_metrics.bias.report #=> Types::MetricsSource
    #   resp.data.results[0].model_package.model_metrics.bias.pre_training_report #=> Types::MetricsSource
    #   resp.data.results[0].model_package.model_metrics.bias.post_training_report #=> Types::MetricsSource
    #   resp.data.results[0].model_package.model_metrics.explainability #=> Types::Explainability
    #   resp.data.results[0].model_package.model_metrics.explainability.report #=> Types::MetricsSource
    #   resp.data.results[0].model_package.last_modified_time #=> Time
    #   resp.data.results[0].model_package.last_modified_by #=> Types::UserContext
    #   resp.data.results[0].model_package.approval_description #=> String
    #   resp.data.results[0].model_package.domain #=> String
    #   resp.data.results[0].model_package.task #=> String
    #   resp.data.results[0].model_package.sample_payload_url #=> String
    #   resp.data.results[0].model_package.additional_inference_specifications #=> Array<AdditionalInferenceSpecificationDefinition>
    #   resp.data.results[0].model_package.additional_inference_specifications[0] #=> Types::AdditionalInferenceSpecificationDefinition
    #   resp.data.results[0].model_package.additional_inference_specifications[0].name #=> String
    #   resp.data.results[0].model_package.additional_inference_specifications[0].description #=> String
    #   resp.data.results[0].model_package.additional_inference_specifications[0].containers #=> Array<ModelPackageContainerDefinition>
    #   resp.data.results[0].model_package.additional_inference_specifications[0].supported_transform_instance_types #=> Array<String>
    #   resp.data.results[0].model_package.additional_inference_specifications[0].supported_realtime_inference_instance_types #=> Array<String>
    #   resp.data.results[0].model_package.additional_inference_specifications[0].supported_content_types #=> Array<String>
    #   resp.data.results[0].model_package.additional_inference_specifications[0].supported_response_mime_types #=> Array<String>
    #   resp.data.results[0].model_package.tags #=> Array<Tag>
    #   resp.data.results[0].model_package.customer_metadata_properties #=> Hash<String, String>
    #   resp.data.results[0].model_package.customer_metadata_properties['key'] #=> String
    #   resp.data.results[0].model_package.drift_check_baselines #=> Types::DriftCheckBaselines
    #   resp.data.results[0].model_package.drift_check_baselines.bias #=> Types::DriftCheckBias
    #   resp.data.results[0].model_package.drift_check_baselines.bias.config_file #=> Types::FileSource
    #   resp.data.results[0].model_package.drift_check_baselines.bias.config_file.content_type #=> String
    #   resp.data.results[0].model_package.drift_check_baselines.bias.config_file.content_digest #=> String
    #   resp.data.results[0].model_package.drift_check_baselines.bias.config_file.s3_uri #=> String
    #   resp.data.results[0].model_package.drift_check_baselines.bias.pre_training_constraints #=> Types::MetricsSource
    #   resp.data.results[0].model_package.drift_check_baselines.bias.post_training_constraints #=> Types::MetricsSource
    #   resp.data.results[0].model_package.drift_check_baselines.explainability #=> Types::DriftCheckExplainability
    #   resp.data.results[0].model_package.drift_check_baselines.explainability.constraints #=> Types::MetricsSource
    #   resp.data.results[0].model_package.drift_check_baselines.explainability.config_file #=> Types::FileSource
    #   resp.data.results[0].model_package.drift_check_baselines.model_quality #=> Types::DriftCheckModelQuality
    #   resp.data.results[0].model_package.drift_check_baselines.model_quality.statistics #=> Types::MetricsSource
    #   resp.data.results[0].model_package.drift_check_baselines.model_quality.constraints #=> Types::MetricsSource
    #   resp.data.results[0].model_package.drift_check_baselines.model_data_quality #=> Types::DriftCheckModelDataQuality
    #   resp.data.results[0].model_package.drift_check_baselines.model_data_quality.statistics #=> Types::MetricsSource
    #   resp.data.results[0].model_package.drift_check_baselines.model_data_quality.constraints #=> Types::MetricsSource
    #   resp.data.results[0].model_package_group #=> Types::ModelPackageGroup
    #   resp.data.results[0].model_package_group.model_package_group_name #=> String
    #   resp.data.results[0].model_package_group.model_package_group_arn #=> String
    #   resp.data.results[0].model_package_group.model_package_group_description #=> String
    #   resp.data.results[0].model_package_group.creation_time #=> Time
    #   resp.data.results[0].model_package_group.created_by #=> Types::UserContext
    #   resp.data.results[0].model_package_group.model_package_group_status #=> String, one of ["Pending", "InProgress", "Completed", "Failed", "Deleting", "DeleteFailed"]
    #   resp.data.results[0].model_package_group.tags #=> Array<Tag>
    #   resp.data.results[0].pipeline #=> Types::Pipeline
    #   resp.data.results[0].pipeline.pipeline_arn #=> String
    #   resp.data.results[0].pipeline.pipeline_name #=> String
    #   resp.data.results[0].pipeline.pipeline_display_name #=> String
    #   resp.data.results[0].pipeline.pipeline_description #=> String
    #   resp.data.results[0].pipeline.role_arn #=> String
    #   resp.data.results[0].pipeline.pipeline_status #=> String, one of ["Active"]
    #   resp.data.results[0].pipeline.creation_time #=> Time
    #   resp.data.results[0].pipeline.last_modified_time #=> Time
    #   resp.data.results[0].pipeline.last_run_time #=> Time
    #   resp.data.results[0].pipeline.created_by #=> Types::UserContext
    #   resp.data.results[0].pipeline.last_modified_by #=> Types::UserContext
    #   resp.data.results[0].pipeline.parallelism_configuration #=> Types::ParallelismConfiguration
    #   resp.data.results[0].pipeline.parallelism_configuration.max_parallel_execution_steps #=> Integer
    #   resp.data.results[0].pipeline.tags #=> Array<Tag>
    #   resp.data.results[0].pipeline_execution #=> Types::PipelineExecution
    #   resp.data.results[0].pipeline_execution.pipeline_arn #=> String
    #   resp.data.results[0].pipeline_execution.pipeline_execution_arn #=> String
    #   resp.data.results[0].pipeline_execution.pipeline_execution_display_name #=> String
    #   resp.data.results[0].pipeline_execution.pipeline_execution_status #=> String, one of ["Executing", "Stopping", "Stopped", "Failed", "Succeeded"]
    #   resp.data.results[0].pipeline_execution.pipeline_execution_description #=> String
    #   resp.data.results[0].pipeline_execution.pipeline_experiment_config #=> Types::PipelineExperimentConfig
    #   resp.data.results[0].pipeline_execution.pipeline_experiment_config.experiment_name #=> String
    #   resp.data.results[0].pipeline_execution.pipeline_experiment_config.trial_name #=> String
    #   resp.data.results[0].pipeline_execution.failure_reason #=> String
    #   resp.data.results[0].pipeline_execution.creation_time #=> Time
    #   resp.data.results[0].pipeline_execution.last_modified_time #=> Time
    #   resp.data.results[0].pipeline_execution.created_by #=> Types::UserContext
    #   resp.data.results[0].pipeline_execution.last_modified_by #=> Types::UserContext
    #   resp.data.results[0].pipeline_execution.parallelism_configuration #=> Types::ParallelismConfiguration
    #   resp.data.results[0].pipeline_execution.pipeline_parameters #=> Array<Parameter>
    #   resp.data.results[0].pipeline_execution.pipeline_parameters[0] #=> Types::Parameter
    #   resp.data.results[0].pipeline_execution.pipeline_parameters[0].name #=> String
    #   resp.data.results[0].pipeline_execution.pipeline_parameters[0].value #=> String
    #   resp.data.results[0].feature_group #=> Types::FeatureGroup
    #   resp.data.results[0].feature_group.feature_group_arn #=> String
    #   resp.data.results[0].feature_group.feature_group_name #=> String
    #   resp.data.results[0].feature_group.record_identifier_feature_name #=> String
    #   resp.data.results[0].feature_group.event_time_feature_name #=> String
    #   resp.data.results[0].feature_group.feature_definitions #=> Array<FeatureDefinition>
    #   resp.data.results[0].feature_group.feature_definitions[0] #=> Types::FeatureDefinition
    #   resp.data.results[0].feature_group.feature_definitions[0].feature_name #=> String
    #   resp.data.results[0].feature_group.feature_definitions[0].feature_type #=> String, one of ["Integral", "Fractional", "String"]
    #   resp.data.results[0].feature_group.creation_time #=> Time
    #   resp.data.results[0].feature_group.online_store_config #=> Types::OnlineStoreConfig
    #   resp.data.results[0].feature_group.online_store_config.security_config #=> Types::OnlineStoreSecurityConfig
    #   resp.data.results[0].feature_group.online_store_config.security_config.kms_key_id #=> String
    #   resp.data.results[0].feature_group.online_store_config.enable_online_store #=> Boolean
    #   resp.data.results[0].feature_group.offline_store_config #=> Types::OfflineStoreConfig
    #   resp.data.results[0].feature_group.offline_store_config.s3_storage_config #=> Types::S3StorageConfig
    #   resp.data.results[0].feature_group.offline_store_config.s3_storage_config.s3_uri #=> String
    #   resp.data.results[0].feature_group.offline_store_config.s3_storage_config.kms_key_id #=> String
    #   resp.data.results[0].feature_group.offline_store_config.s3_storage_config.resolved_output_s3_uri #=> String
    #   resp.data.results[0].feature_group.offline_store_config.disable_glue_table_creation #=> Boolean
    #   resp.data.results[0].feature_group.offline_store_config.data_catalog_config #=> Types::DataCatalogConfig
    #   resp.data.results[0].feature_group.offline_store_config.data_catalog_config.table_name #=> String
    #   resp.data.results[0].feature_group.offline_store_config.data_catalog_config.catalog #=> String
    #   resp.data.results[0].feature_group.offline_store_config.data_catalog_config.database #=> String
    #   resp.data.results[0].feature_group.role_arn #=> String
    #   resp.data.results[0].feature_group.feature_group_status #=> String, one of ["Creating", "Created", "CreateFailed", "Deleting", "DeleteFailed"]
    #   resp.data.results[0].feature_group.offline_store_status #=> Types::OfflineStoreStatus
    #   resp.data.results[0].feature_group.offline_store_status.status #=> String, one of ["Active", "Blocked", "Disabled"]
    #   resp.data.results[0].feature_group.offline_store_status.blocked_reason #=> String
    #   resp.data.results[0].feature_group.failure_reason #=> String
    #   resp.data.results[0].feature_group.description #=> String
    #   resp.data.results[0].feature_group.tags #=> Array<Tag>
    #   resp.data.results[0].project #=> Types::Project
    #   resp.data.results[0].project.project_arn #=> String
    #   resp.data.results[0].project.project_name #=> String
    #   resp.data.results[0].project.project_id #=> String
    #   resp.data.results[0].project.project_description #=> String
    #   resp.data.results[0].project.service_catalog_provisioning_details #=> Types::ServiceCatalogProvisioningDetails
    #   resp.data.results[0].project.service_catalog_provisioning_details.product_id #=> String
    #   resp.data.results[0].project.service_catalog_provisioning_details.provisioning_artifact_id #=> String
    #   resp.data.results[0].project.service_catalog_provisioning_details.path_id #=> String
    #   resp.data.results[0].project.service_catalog_provisioning_details.provisioning_parameters #=> Array<ProvisioningParameter>
    #   resp.data.results[0].project.service_catalog_provisioning_details.provisioning_parameters[0] #=> Types::ProvisioningParameter
    #   resp.data.results[0].project.service_catalog_provisioning_details.provisioning_parameters[0].key #=> String
    #   resp.data.results[0].project.service_catalog_provisioning_details.provisioning_parameters[0].value #=> String
    #   resp.data.results[0].project.service_catalog_provisioned_product_details #=> Types::ServiceCatalogProvisionedProductDetails
    #   resp.data.results[0].project.service_catalog_provisioned_product_details.provisioned_product_id #=> String
    #   resp.data.results[0].project.service_catalog_provisioned_product_details.provisioned_product_status_message #=> String
    #   resp.data.results[0].project.project_status #=> String, one of ["Pending", "CreateInProgress", "CreateCompleted", "CreateFailed", "DeleteInProgress", "DeleteFailed", "DeleteCompleted", "UpdateInProgress", "UpdateCompleted", "UpdateFailed"]
    #   resp.data.results[0].project.created_by #=> Types::UserContext
    #   resp.data.results[0].project.creation_time #=> Time
    #   resp.data.results[0].project.tags #=> Array<Tag>
    #   resp.data.results[0].project.last_modified_time #=> Time
    #   resp.data.results[0].project.last_modified_by #=> Types::UserContext
    #   resp.data.next_token #=> String
    #
    def search(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::SearchInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::SearchInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::Search
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::Search
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::Search,
        stubs: @stubs,
        params_class: Params::SearchOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :search
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Notifies the pipeline that the execution of a callback step failed, along with a
    #         message describing why. When a callback step is run, the pipeline generates a callback
    #         token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).</p>
    #
    # @param [Hash] params
    #   See {Types::SendPipelineExecutionStepFailureInput}.
    #
    # @option params [String] :callback_token
    #   <p>The pipeline generated token from the Amazon SQS queue.</p>
    #
    # @option params [String] :failure_reason
    #   <p>A message describing why the step failed.</p>
    #
    # @option params [String] :client_request_token
    #   <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #            operation. An idempotent operation completes no more than one time.</p>
    #
    # @return [Types::SendPipelineExecutionStepFailureOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.send_pipeline_execution_step_failure(
    #     callback_token: 'CallbackToken', # required
    #     failure_reason: 'FailureReason',
    #     client_request_token: 'ClientRequestToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::SendPipelineExecutionStepFailureOutput
    #   resp.data.pipeline_execution_arn #=> String
    #
    def send_pipeline_execution_step_failure(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::SendPipelineExecutionStepFailureInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::SendPipelineExecutionStepFailureInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::SendPipelineExecutionStepFailure
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceNotFound]),
        data_parser: Parsers::SendPipelineExecutionStepFailure
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::SendPipelineExecutionStepFailure,
        stubs: @stubs,
        params_class: Params::SendPipelineExecutionStepFailureOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :send_pipeline_execution_step_failure
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Notifies the pipeline that the execution of a callback step succeeded and provides a
    #         list of the step's output parameters. When a callback step is run, the pipeline generates
    #         a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).</p>
    #
    # @param [Hash] params
    #   See {Types::SendPipelineExecutionStepSuccessInput}.
    #
    # @option params [String] :callback_token
    #   <p>The pipeline generated token from the Amazon SQS queue.</p>
    #
    # @option params [Array<OutputParameter>] :output_parameters
    #   <p>A list of the output parameters of the callback step.</p>
    #
    # @option params [String] :client_request_token
    #   <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #            operation. An idempotent operation completes no more than one time.</p>
    #
    # @return [Types::SendPipelineExecutionStepSuccessOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.send_pipeline_execution_step_success(
    #     callback_token: 'CallbackToken', # required
    #     output_parameters: [
    #       {
    #         name: 'Name', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     client_request_token: 'ClientRequestToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::SendPipelineExecutionStepSuccessOutput
    #   resp.data.pipeline_execution_arn #=> String
    #
    def send_pipeline_execution_step_success(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::SendPipelineExecutionStepSuccessInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::SendPipelineExecutionStepSuccessInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::SendPipelineExecutionStepSuccess
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceNotFound]),
        data_parser: Parsers::SendPipelineExecutionStepSuccess
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::SendPipelineExecutionStepSuccess,
        stubs: @stubs,
        params_class: Params::SendPipelineExecutionStepSuccessOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :send_pipeline_execution_step_success
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Starts a previously stopped monitoring schedule.</p>
    #          <note>
    #             <p>By default, when you successfully create a new schedule, the status of a monitoring
    #             schedule is <code>scheduled</code>.</p>
    #          </note>
    #
    # @param [Hash] params
    #   See {Types::StartMonitoringScheduleInput}.
    #
    # @option params [String] :monitoring_schedule_name
    #   <p>The name of the schedule to start.</p>
    #
    # @return [Types::StartMonitoringScheduleOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.start_monitoring_schedule(
    #     monitoring_schedule_name: 'MonitoringScheduleName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StartMonitoringScheduleOutput
    #
    def start_monitoring_schedule(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StartMonitoringScheduleInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StartMonitoringScheduleInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StartMonitoringSchedule
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::StartMonitoringSchedule
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StartMonitoringSchedule,
        stubs: @stubs,
        params_class: Params::StartMonitoringScheduleOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :start_monitoring_schedule
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Launches an ML compute instance with the latest version of the libraries and
    #             attaches your ML storage volume. After configuring the notebook instance, SageMaker sets the
    #             notebook instance status to <code>InService</code>. A notebook instance's status must be
    #                 <code>InService</code> before you can connect to your Jupyter notebook. </p>
    #
    # @param [Hash] params
    #   See {Types::StartNotebookInstanceInput}.
    #
    # @option params [String] :notebook_instance_name
    #   <p>The name of the notebook instance to start.</p>
    #
    # @return [Types::StartNotebookInstanceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.start_notebook_instance(
    #     notebook_instance_name: 'NotebookInstanceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StartNotebookInstanceOutput
    #
    def start_notebook_instance(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StartNotebookInstanceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StartNotebookInstanceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StartNotebookInstance
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::StartNotebookInstance
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StartNotebookInstance,
        stubs: @stubs,
        params_class: Params::StartNotebookInstanceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :start_notebook_instance
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Starts a pipeline execution.</p>
    #
    # @param [Hash] params
    #   See {Types::StartPipelineExecutionInput}.
    #
    # @option params [String] :pipeline_name
    #   <p>The name of the pipeline.</p>
    #
    # @option params [String] :pipeline_execution_display_name
    #   <p>The display name of the pipeline execution.</p>
    #
    # @option params [Array<Parameter>] :pipeline_parameters
    #   <p>Contains a list of pipeline parameters. This list can be empty. </p>
    #
    # @option params [String] :pipeline_execution_description
    #   <p>The description of the pipeline execution.</p>
    #
    # @option params [String] :client_request_token
    #   <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #            operation. An idempotent operation completes no more than once.</p>
    #
    # @option params [ParallelismConfiguration] :parallelism_configuration
    #   <p>This configuration, if specified, overrides the parallelism configuration
    #               of the parent pipeline for this specific run.</p>
    #
    # @return [Types::StartPipelineExecutionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.start_pipeline_execution(
    #     pipeline_name: 'PipelineName', # required
    #     pipeline_execution_display_name: 'PipelineExecutionDisplayName',
    #     pipeline_parameters: [
    #       {
    #         name: 'Name', # required
    #         value: 'Value' # required
    #       }
    #     ],
    #     pipeline_execution_description: 'PipelineExecutionDescription',
    #     client_request_token: 'ClientRequestToken', # required
    #     parallelism_configuration: {
    #       max_parallel_execution_steps: 1 # required
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StartPipelineExecutionOutput
    #   resp.data.pipeline_execution_arn #=> String
    #
    def start_pipeline_execution(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StartPipelineExecutionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StartPipelineExecutionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StartPipelineExecution
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceNotFound]),
        data_parser: Parsers::StartPipelineExecution
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StartPipelineExecution,
        stubs: @stubs,
        params_class: Params::StartPipelineExecutionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :start_pipeline_execution
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>A method for forcing the termination of a running job.</p>
    #
    # @param [Hash] params
    #   See {Types::StopAutoMLJobInput}.
    #
    # @option params [String] :auto_ml_job_name
    #   <p>The name of the object you are requesting.</p>
    #
    # @return [Types::StopAutoMLJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.stop_auto_ml_job(
    #     auto_ml_job_name: 'AutoMLJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StopAutoMLJobOutput
    #
    def stop_auto_ml_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StopAutoMLJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StopAutoMLJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StopAutoMLJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::StopAutoMLJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StopAutoMLJob,
        stubs: @stubs,
        params_class: Params::StopAutoMLJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :stop_auto_ml_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Stops a model compilation job.</p>
    #         <p> To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal. This gracefully shuts the
    #             job down. If the job hasn't stopped, it sends the SIGKILL signal.</p>
    #         <p>When it receives a <code>StopCompilationJob</code> request, Amazon SageMaker changes the <a>CompilationJobSummary$CompilationJobStatus</a> of the job to
    #             <code>Stopping</code>. After Amazon SageMaker stops the job, it sets the <a>CompilationJobSummary$CompilationJobStatus</a> to <code>Stopped</code>.
    #         </p>
    #
    # @param [Hash] params
    #   See {Types::StopCompilationJobInput}.
    #
    # @option params [String] :compilation_job_name
    #   <p>The name of the model compilation job to stop.</p>
    #
    # @return [Types::StopCompilationJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.stop_compilation_job(
    #     compilation_job_name: 'CompilationJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StopCompilationJobOutput
    #
    def stop_compilation_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StopCompilationJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StopCompilationJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StopCompilationJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::StopCompilationJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StopCompilationJob,
        stubs: @stubs,
        params_class: Params::StopCompilationJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :stop_compilation_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Request to stop an edge packaging job.</p>
    #
    # @param [Hash] params
    #   See {Types::StopEdgePackagingJobInput}.
    #
    # @option params [String] :edge_packaging_job_name
    #   <p>The name of the edge packaging job.</p>
    #
    # @return [Types::StopEdgePackagingJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.stop_edge_packaging_job(
    #     edge_packaging_job_name: 'EdgePackagingJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StopEdgePackagingJobOutput
    #
    def stop_edge_packaging_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StopEdgePackagingJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StopEdgePackagingJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StopEdgePackagingJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::StopEdgePackagingJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StopEdgePackagingJob,
        stubs: @stubs,
        params_class: Params::StopEdgePackagingJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :stop_edge_packaging_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Stops a running hyperparameter tuning job and all running training jobs that the
    #             tuning job launched.</p>
    #         <p>All model artifacts output from the training jobs are stored in Amazon Simple Storage Service (Amazon S3). All
    #             data that the training jobs write to Amazon CloudWatch Logs are still available in CloudWatch. After the
    #             tuning job moves to the <code>Stopped</code> state, it releases all
    #             reserved
    #             resources for the tuning job.</p>
    #
    # @param [Hash] params
    #   See {Types::StopHyperParameterTuningJobInput}.
    #
    # @option params [String] :hyper_parameter_tuning_job_name
    #   <p>The name of the tuning job to stop.</p>
    #
    # @return [Types::StopHyperParameterTuningJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.stop_hyper_parameter_tuning_job(
    #     hyper_parameter_tuning_job_name: 'HyperParameterTuningJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StopHyperParameterTuningJobOutput
    #
    def stop_hyper_parameter_tuning_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StopHyperParameterTuningJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StopHyperParameterTuningJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StopHyperParameterTuningJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::StopHyperParameterTuningJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StopHyperParameterTuningJob,
        stubs: @stubs,
        params_class: Params::StopHyperParameterTuningJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :stop_hyper_parameter_tuning_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Stops an Inference Recommender job.</p>
    #
    # @param [Hash] params
    #   See {Types::StopInferenceRecommendationsJobInput}.
    #
    # @option params [String] :job_name
    #   <p>The name of the job you want to stop.</p>
    #
    # @return [Types::StopInferenceRecommendationsJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.stop_inference_recommendations_job(
    #     job_name: 'JobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StopInferenceRecommendationsJobOutput
    #
    def stop_inference_recommendations_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StopInferenceRecommendationsJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StopInferenceRecommendationsJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StopInferenceRecommendationsJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::StopInferenceRecommendationsJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StopInferenceRecommendationsJob,
        stubs: @stubs,
        params_class: Params::StopInferenceRecommendationsJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :stop_inference_recommendations_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Stops a running labeling job. A job that is stopped cannot be restarted. Any results
    #             obtained before the job is stopped are placed in the Amazon S3 output bucket.</p>
    #
    # @param [Hash] params
    #   See {Types::StopLabelingJobInput}.
    #
    # @option params [String] :labeling_job_name
    #   <p>The name of the labeling job to stop.</p>
    #
    # @return [Types::StopLabelingJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.stop_labeling_job(
    #     labeling_job_name: 'LabelingJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StopLabelingJobOutput
    #
    def stop_labeling_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StopLabelingJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StopLabelingJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StopLabelingJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::StopLabelingJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StopLabelingJob,
        stubs: @stubs,
        params_class: Params::StopLabelingJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :stop_labeling_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Stops a previously started monitoring schedule.</p>
    #
    # @param [Hash] params
    #   See {Types::StopMonitoringScheduleInput}.
    #
    # @option params [String] :monitoring_schedule_name
    #   <p>The name of the schedule to stop.</p>
    #
    # @return [Types::StopMonitoringScheduleOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.stop_monitoring_schedule(
    #     monitoring_schedule_name: 'MonitoringScheduleName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StopMonitoringScheduleOutput
    #
    def stop_monitoring_schedule(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StopMonitoringScheduleInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StopMonitoringScheduleInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StopMonitoringSchedule
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::StopMonitoringSchedule
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StopMonitoringSchedule,
        stubs: @stubs,
        params_class: Params::StopMonitoringScheduleOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :stop_monitoring_schedule
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Terminates the ML compute instance. Before terminating the instance, SageMaker
    #             disconnects the ML storage volume from it. SageMaker preserves the ML storage volume. SageMaker
    #             stops charging you for the ML compute instance when you call
    #                 <code>StopNotebookInstance</code>.</p>
    #         <p>To access data on the ML storage volume for a notebook instance that has been
    #             terminated, call the <code>StartNotebookInstance</code> API.
    #                 <code>StartNotebookInstance</code> launches another ML compute instance, configures
    #             it, and attaches the preserved ML storage volume so you can continue your work.
    #         </p>
    #
    # @param [Hash] params
    #   See {Types::StopNotebookInstanceInput}.
    #
    # @option params [String] :notebook_instance_name
    #   <p>The name of the notebook instance to terminate.</p>
    #
    # @return [Types::StopNotebookInstanceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.stop_notebook_instance(
    #     notebook_instance_name: 'NotebookInstanceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StopNotebookInstanceOutput
    #
    def stop_notebook_instance(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StopNotebookInstanceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StopNotebookInstanceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StopNotebookInstance
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::StopNotebookInstance
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StopNotebookInstance,
        stubs: @stubs,
        params_class: Params::StopNotebookInstanceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :stop_notebook_instance
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Stops a pipeline execution.</p>
    #
    #          <p>
    #             <b>Callback Step</b>
    #          </p>
    #          <p>A pipeline execution won't stop while a callback step is running.
    #         When you call <code>StopPipelineExecution</code>
    #         on a pipeline execution with a running callback step, SageMaker Pipelines sends an
    #         additional Amazon SQS message to the specified SQS queue. The body of the SQS message
    #         contains a "Status" field which is set to "Stopping".</p>
    #          <p>You should add logic to your Amazon SQS message consumer to take any needed action (for
    #         example, resource cleanup) upon receipt of the message followed by a call to
    #         <code>SendPipelineExecutionStepSuccess</code> or
    #         <code>SendPipelineExecutionStepFailure</code>.</p>
    #          <p>Only when SageMaker Pipelines receives one of these calls will it stop the pipeline execution.</p>
    #
    #          <p>
    #             <b>Lambda Step</b>
    #          </p>
    #          <p>A pipeline execution can't be stopped while a lambda step is running because the Lambda
    #         function invoked by the lambda step can't be stopped. If you attempt to stop the execution
    #         while the Lambda function is running, the pipeline waits for the Lambda function to finish
    #         or until the timeout is hit, whichever occurs first, and then stops. If the Lambda function
    #         finishes, the pipeline execution status is <code>Stopped</code>. If the timeout is hit
    #         the pipeline execution status is <code>Failed</code>.</p>
    #
    # @param [Hash] params
    #   See {Types::StopPipelineExecutionInput}.
    #
    # @option params [String] :pipeline_execution_arn
    #   <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    #
    # @option params [String] :client_request_token
    #   <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #            operation. An idempotent operation completes no more than once.</p>
    #
    # @return [Types::StopPipelineExecutionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.stop_pipeline_execution(
    #     pipeline_execution_arn: 'PipelineExecutionArn', # required
    #     client_request_token: 'ClientRequestToken' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StopPipelineExecutionOutput
    #   resp.data.pipeline_execution_arn #=> String
    #
    def stop_pipeline_execution(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StopPipelineExecutionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StopPipelineExecutionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StopPipelineExecution
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::StopPipelineExecution
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StopPipelineExecution,
        stubs: @stubs,
        params_class: Params::StopPipelineExecutionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :stop_pipeline_execution
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Stops a processing job.</p>
    #
    # @param [Hash] params
    #   See {Types::StopProcessingJobInput}.
    #
    # @option params [String] :processing_job_name
    #   <p>The name of the processing job to stop.</p>
    #
    # @return [Types::StopProcessingJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.stop_processing_job(
    #     processing_job_name: 'ProcessingJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StopProcessingJobOutput
    #
    def stop_processing_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StopProcessingJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StopProcessingJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StopProcessingJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::StopProcessingJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StopProcessingJob,
        stubs: @stubs,
        params_class: Params::StopProcessingJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :stop_processing_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Stops a training job. To stop a job, SageMaker sends the algorithm the
    #                 <code>SIGTERM</code> signal, which delays job termination for 120 seconds.
    #             Algorithms might use this 120-second window to save the model artifacts, so the results
    #             of the training is not lost. </p>
    #         <p>When it receives a <code>StopTrainingJob</code> request, SageMaker changes the status of
    #             the job to <code>Stopping</code>. After SageMaker stops the job, it sets the status to
    #                 <code>Stopped</code>.</p>
    #
    # @param [Hash] params
    #   See {Types::StopTrainingJobInput}.
    #
    # @option params [String] :training_job_name
    #   <p>The name of the training job to stop.</p>
    #
    # @return [Types::StopTrainingJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.stop_training_job(
    #     training_job_name: 'TrainingJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StopTrainingJobOutput
    #
    def stop_training_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StopTrainingJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StopTrainingJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StopTrainingJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::StopTrainingJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StopTrainingJob,
        stubs: @stubs,
        params_class: Params::StopTrainingJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :stop_training_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Stops a batch transform job.</p>
    #         <p>When Amazon SageMaker receives a <code>StopTransformJob</code> request, the status of the job
    #             changes to <code>Stopping</code>. After Amazon SageMaker
    #             stops
    #             the job, the status is set to <code>Stopped</code>. When you stop a batch transform job before
    #             it is completed, Amazon SageMaker doesn't store the job's output in Amazon S3.</p>
    #
    # @param [Hash] params
    #   See {Types::StopTransformJobInput}.
    #
    # @option params [String] :transform_job_name
    #   <p>The name of the batch transform job to stop.</p>
    #
    # @return [Types::StopTransformJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.stop_transform_job(
    #     transform_job_name: 'TransformJobName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StopTransformJobOutput
    #
    def stop_transform_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StopTransformJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StopTransformJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StopTransformJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::StopTransformJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StopTransformJob,
        stubs: @stubs,
        params_class: Params::StopTransformJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :stop_transform_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates an action.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateActionInput}.
    #
    # @option params [String] :action_name
    #   <p>The name of the action to update.</p>
    #
    # @option params [String] :description
    #   <p>The new description for the action.</p>
    #
    # @option params [String] :status
    #   <p>The new status for the action.</p>
    #
    # @option params [Hash<String, String>] :properties
    #   <p>The new list of properties. Overwrites the current property list.</p>
    #
    # @option params [Array<String>] :properties_to_remove
    #   <p>A list of properties to remove.</p>
    #
    # @return [Types::UpdateActionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_action(
    #     action_name: 'ActionName', # required
    #     description: 'Description',
    #     status: 'Unknown', # accepts ["Unknown", "InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #     properties: {
    #       'key' => 'value'
    #     },
    #     properties_to_remove: [
    #       'member'
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateActionOutput
    #   resp.data.action_arn #=> String
    #
    def update_action(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateActionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateActionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateAction
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ConflictException, Errors::ResourceNotFound]),
        data_parser: Parsers::UpdateAction
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateAction,
        stubs: @stubs,
        params_class: Params::UpdateActionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_action
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates the properties of an AppImageConfig.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateAppImageConfigInput}.
    #
    # @option params [String] :app_image_config_name
    #   <p>The name of the AppImageConfig to update.</p>
    #
    # @option params [KernelGatewayImageConfig] :kernel_gateway_image_config
    #   <p>The new KernelGateway app to run on the image.</p>
    #
    # @return [Types::UpdateAppImageConfigOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_app_image_config(
    #     app_image_config_name: 'AppImageConfigName', # required
    #     kernel_gateway_image_config: {
    #       kernel_specs: [
    #         {
    #           name: 'Name', # required
    #           display_name: 'DisplayName'
    #         }
    #       ], # required
    #       file_system_config: {
    #         mount_path: 'MountPath',
    #         default_uid: 1,
    #         default_gid: 1
    #       }
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateAppImageConfigOutput
    #   resp.data.app_image_config_arn #=> String
    #
    def update_app_image_config(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateAppImageConfigInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateAppImageConfigInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateAppImageConfig
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::UpdateAppImageConfig
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateAppImageConfig,
        stubs: @stubs,
        params_class: Params::UpdateAppImageConfigOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_app_image_config
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates an artifact.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateArtifactInput}.
    #
    # @option params [String] :artifact_arn
    #   <p>The Amazon Resource Name (ARN) of the artifact to update.</p>
    #
    # @option params [String] :artifact_name
    #   <p>The new name for the artifact.</p>
    #
    # @option params [Hash<String, String>] :properties
    #   <p>The new list of properties. Overwrites the current property list.</p>
    #
    # @option params [Array<String>] :properties_to_remove
    #   <p>A list of properties to remove.</p>
    #
    # @return [Types::UpdateArtifactOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_artifact(
    #     artifact_arn: 'ArtifactArn', # required
    #     artifact_name: 'ArtifactName',
    #     properties: {
    #       'key' => 'value'
    #     },
    #     properties_to_remove: [
    #       'member'
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateArtifactOutput
    #   resp.data.artifact_arn #=> String
    #
    def update_artifact(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateArtifactInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateArtifactInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateArtifact
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ConflictException, Errors::ResourceNotFound]),
        data_parser: Parsers::UpdateArtifact
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateArtifact,
        stubs: @stubs,
        params_class: Params::UpdateArtifactOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_artifact
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates the specified Git repository with the specified values.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateCodeRepositoryInput}.
    #
    # @option params [String] :code_repository_name
    #   <p>The name of the Git repository to update.</p>
    #
    # @option params [GitConfigForUpdate] :git_config
    #   <p>The configuration of the git repository, including the URL and the Amazon Resource
    #               Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the credentials used to
    #               access the repository. The secret must have a staging label of <code>AWSCURRENT</code>
    #               and must be in the following format:</p>
    #           <p>
    #               <code>{"username": <i>UserName</i>, "password":
    #                       <i>Password</i>}</code>
    #           </p>
    #
    # @return [Types::UpdateCodeRepositoryOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_code_repository(
    #     code_repository_name: 'CodeRepositoryName', # required
    #     git_config: {
    #       secret_arn: 'SecretArn'
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateCodeRepositoryOutput
    #   resp.data.code_repository_arn #=> String
    #
    def update_code_repository(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateCodeRepositoryInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateCodeRepositoryInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateCodeRepository
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::UpdateCodeRepository
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateCodeRepository,
        stubs: @stubs,
        params_class: Params::UpdateCodeRepositoryOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_code_repository
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates a context.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateContextInput}.
    #
    # @option params [String] :context_name
    #   <p>The name of the context to update.</p>
    #
    # @option params [String] :description
    #   <p>The new description for the context.</p>
    #
    # @option params [Hash<String, String>] :properties
    #   <p>The new list of properties. Overwrites the current property list.</p>
    #
    # @option params [Array<String>] :properties_to_remove
    #   <p>A list of properties to remove.</p>
    #
    # @return [Types::UpdateContextOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_context(
    #     context_name: 'ContextName', # required
    #     description: 'Description',
    #     properties: {
    #       'key' => 'value'
    #     },
    #     properties_to_remove: [
    #       'member'
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateContextOutput
    #   resp.data.context_arn #=> String
    #
    def update_context(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateContextInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateContextInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateContext
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ConflictException, Errors::ResourceNotFound]),
        data_parser: Parsers::UpdateContext
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateContext,
        stubs: @stubs,
        params_class: Params::UpdateContextOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_context
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates a fleet of devices.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateDeviceFleetInput}.
    #
    # @option params [String] :device_fleet_name
    #   <p>The name of the fleet.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) of the device.</p>
    #
    # @option params [String] :description
    #   <p>Description of the fleet.</p>
    #
    # @option params [EdgeOutputConfig] :output_config
    #   <p>Output configuration  for storing sample data collected by the fleet.</p>
    #
    # @option params [Boolean] :enable_iot_role_alias
    #   <p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation.
    #         The name of the role alias generated will match this pattern:
    #         "SageMakerEdge-{DeviceFleetName}".</p>
    #            <p>For example, if your device fleet is called "demo-fleet", the name of
    #         the role alias will be "SageMakerEdge-demo-fleet".</p>
    #
    # @return [Types::UpdateDeviceFleetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_device_fleet(
    #     device_fleet_name: 'DeviceFleetName', # required
    #     role_arn: 'RoleArn',
    #     description: 'Description',
    #     output_config: {
    #       s3_output_location: 'S3OutputLocation', # required
    #       kms_key_id: 'KmsKeyId',
    #       preset_deployment_type: 'GreengrassV2Component', # accepts ["GreengrassV2Component"]
    #       preset_deployment_config: 'PresetDeploymentConfig'
    #     }, # required
    #     enable_iot_role_alias: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateDeviceFleetOutput
    #
    def update_device_fleet(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateDeviceFleetInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateDeviceFleetInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateDeviceFleet
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceInUse]),
        data_parser: Parsers::UpdateDeviceFleet
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateDeviceFleet,
        stubs: @stubs,
        params_class: Params::UpdateDeviceFleetOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_device_fleet
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates one or more devices in a fleet.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateDevicesInput}.
    #
    # @option params [String] :device_fleet_name
    #   <p>The name of the fleet the devices belong to.</p>
    #
    # @option params [Array<Device>] :devices
    #   <p>List of devices to register with Edge Manager agent.</p>
    #
    # @return [Types::UpdateDevicesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_devices(
    #     device_fleet_name: 'DeviceFleetName', # required
    #     devices: [
    #       {
    #         device_name: 'DeviceName', # required
    #         description: 'Description',
    #         iot_thing_name: 'IotThingName'
    #       }
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateDevicesOutput
    #
    def update_devices(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateDevicesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateDevicesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateDevices
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::UpdateDevices
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateDevices,
        stubs: @stubs,
        params_class: Params::UpdateDevicesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_devices
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates the default settings for new user profiles in the domain.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateDomainInput}.
    #
    # @option params [String] :domain_id
    #   <p>The ID of the domain to be updated.</p>
    #
    # @option params [UserSettings] :default_user_settings
    #   <p>A collection of settings.</p>
    #
    # @option params [DomainSettingsForUpdate] :domain_settings_for_update
    #   <p>A collection of <code>DomainSettings</code> configuration values to update.</p>
    #
    # @return [Types::UpdateDomainOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_domain(
    #     domain_id: 'DomainId', # required
    #     default_user_settings: {
    #       execution_role: 'ExecutionRole',
    #       security_groups: [
    #         'member'
    #       ],
    #       sharing_settings: {
    #         notebook_output_option: 'Allowed', # accepts ["Allowed", "Disabled"]
    #         s3_output_path: 'S3OutputPath',
    #         s3_kms_key_id: 'S3KmsKeyId'
    #       },
    #       jupyter_server_app_settings: {
    #         default_resource_spec: {
    #           sage_maker_image_arn: 'SageMakerImageArn',
    #           sage_maker_image_version_arn: 'SageMakerImageVersionArn',
    #           instance_type: 'system', # accepts ["system", "ml.t3.micro", "ml.t3.small", "ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.8xlarge", "ml.m5.12xlarge", "ml.m5.16xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.8xlarge", "ml.m5d.12xlarge", "ml.m5d.16xlarge", "ml.m5d.24xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.12xlarge", "ml.c5.18xlarge", "ml.c5.24xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #           lifecycle_config_arn: 'LifecycleConfigArn'
    #         },
    #         lifecycle_config_arns: [
    #           'member'
    #         ]
    #       },
    #       kernel_gateway_app_settings: {
    #         custom_images: [
    #           {
    #             image_name: 'ImageName', # required
    #             image_version_number: 1,
    #             app_image_config_name: 'AppImageConfigName' # required
    #           }
    #         ],
    #       },
    #       tensor_board_app_settings: {
    #       },
    #       r_studio_server_pro_app_settings: {
    #         access_status: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #         user_group: 'R_STUDIO_ADMIN' # accepts ["R_STUDIO_ADMIN", "R_STUDIO_USER"]
    #       },
    #       r_session_app_settings: {
    #       }
    #     },
    #     domain_settings_for_update: {
    #       r_studio_server_pro_domain_settings_for_update: {
    #         domain_execution_role_arn: 'DomainExecutionRoleArn', # required
    #       }
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateDomainOutput
    #   resp.data.domain_arn #=> String
    #
    def update_domain(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateDomainInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateDomainInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateDomain
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse, Errors::ResourceNotFound]),
        data_parser: Parsers::UpdateDomain
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateDomain,
        stubs: @stubs,
        params_class: Params::UpdateDomainOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_domain
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deploys the new <code>EndpointConfig</code> specified in the request, switches to
    #             using newly created endpoint, and then deletes resources provisioned for the endpoint
    #             using the previous <code>EndpointConfig</code> (there is no availability loss). </p>
    #         <p>When SageMaker receives the request, it sets the endpoint status to
    #                 <code>Updating</code>. After updating the endpoint, it sets the status to
    #                 <code>InService</code>. To check the status of an endpoint, use the <a>DescribeEndpoint</a> API.
    #
    #         </p>
    #         <note>
    #             <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is
    #                 live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code>
    #                 operations are being performed on the endpoint. To update an endpoint, you must
    #                 create a new <code>EndpointConfig</code>.</p>
    #             <p>If you delete the <code>EndpointConfig</code> of an endpoint that is active or
    #                 being created or updated you may lose visibility into the instance type the endpoint
    #                 is using. The endpoint must be deleted in order to stop incurring charges.</p>
    #         </note>
    #
    # @param [Hash] params
    #   See {Types::UpdateEndpointInput}.
    #
    # @option params [String] :endpoint_name
    #   <p>The name of the endpoint whose configuration you want to update.</p>
    #
    # @option params [String] :endpoint_config_name
    #   <p>The name of the new endpoint configuration.</p>
    #
    # @option params [Boolean] :retain_all_variant_properties
    #   <p>When updating endpoint resources, enables or disables the retention of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VariantProperty.html">variant properties</a>, such as the instance count or the variant weight. To
    #               retain the variant properties of an endpoint when updating it, set
    #                   <code>RetainAllVariantProperties</code> to <code>true</code>. To use the variant
    #               properties specified in a new <code>EndpointConfig</code> call when updating an
    #               endpoint, set <code>RetainAllVariantProperties</code> to <code>false</code>. The default
    #               is <code>false</code>.</p>
    #
    # @option params [Array<VariantProperty>] :exclude_retained_variant_properties
    #   <p>When you are updating endpoint resources with <a>UpdateEndpointInput$RetainAllVariantProperties</a>, whose value is set to
    #                   <code>true</code>, <code>ExcludeRetainedVariantProperties</code> specifies the list
    #               of type <a>VariantProperty</a> to override with the values provided by
    #                   <code>EndpointConfig</code>. If you don't specify a value for
    #                   <code>ExcludeAllVariantProperties</code>, no variant properties are overridden.
    #           </p>
    #
    # @option params [DeploymentConfig] :deployment_config
    #   <p>The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.</p>
    #
    # @option params [Boolean] :retain_deployment_config
    #   <p>Specifies whether to reuse the last deployment configuration. The default value is
    #               false (the configuration is not reused).</p>
    #
    # @return [Types::UpdateEndpointOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_endpoint(
    #     endpoint_name: 'EndpointName', # required
    #     endpoint_config_name: 'EndpointConfigName', # required
    #     retain_all_variant_properties: false,
    #     exclude_retained_variant_properties: [
    #       {
    #         variant_property_type: 'DesiredInstanceCount' # required - accepts ["DesiredInstanceCount", "DesiredWeight", "DataCaptureConfig"]
    #       }
    #     ],
    #     deployment_config: {
    #       blue_green_update_policy: {
    #         traffic_routing_configuration: {
    #           type: 'ALL_AT_ONCE', # required - accepts ["ALL_AT_ONCE", "CANARY", "LINEAR"]
    #           wait_interval_in_seconds: 1, # required
    #           canary_size: {
    #             type: 'INSTANCE_COUNT', # required - accepts ["INSTANCE_COUNT", "CAPACITY_PERCENT"]
    #             value: 1 # required
    #           },
    #         }, # required
    #         termination_wait_in_seconds: 1,
    #         maximum_execution_timeout_in_seconds: 1
    #       }, # required
    #       auto_rollback_configuration: {
    #         alarms: [
    #           {
    #             alarm_name: 'AlarmName'
    #           }
    #         ]
    #       }
    #     },
    #     retain_deployment_config: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateEndpointOutput
    #   resp.data.endpoint_arn #=> String
    #
    def update_endpoint(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateEndpointInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateEndpointInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateEndpoint
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::UpdateEndpoint
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateEndpoint,
        stubs: @stubs,
        params_class: Params::UpdateEndpointOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_endpoint
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates variant weight of one or more variants associated with an existing
    #             endpoint, or capacity of one variant associated with an existing endpoint. When it
    #             receives the request, SageMaker sets the endpoint status to <code>Updating</code>. After
    #             updating the endpoint, it sets the status to <code>InService</code>. To check the status
    #             of an endpoint, use the <a>DescribeEndpoint</a> API. </p>
    #
    # @param [Hash] params
    #   See {Types::UpdateEndpointWeightsAndCapacitiesInput}.
    #
    # @option params [String] :endpoint_name
    #   <p>The name of an existing SageMaker endpoint.</p>
    #
    # @option params [Array<DesiredWeightAndCapacity>] :desired_weights_and_capacities
    #   <p>An object that provides new capacity and weight values for a variant.</p>
    #
    # @return [Types::UpdateEndpointWeightsAndCapacitiesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_endpoint_weights_and_capacities(
    #     endpoint_name: 'EndpointName', # required
    #     desired_weights_and_capacities: [
    #       {
    #         variant_name: 'VariantName', # required
    #         desired_weight: 1.0,
    #         desired_instance_count: 1
    #       }
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateEndpointWeightsAndCapacitiesOutput
    #   resp.data.endpoint_arn #=> String
    #
    def update_endpoint_weights_and_capacities(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateEndpointWeightsAndCapacitiesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateEndpointWeightsAndCapacitiesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateEndpointWeightsAndCapacities
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::UpdateEndpointWeightsAndCapacities
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateEndpointWeightsAndCapacities,
        stubs: @stubs,
        params_class: Params::UpdateEndpointWeightsAndCapacitiesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_endpoint_weights_and_capacities
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Adds, updates, or removes the description of an experiment. Updates the display name of an
    #       experiment.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateExperimentInput}.
    #
    # @option params [String] :experiment_name
    #   <p>The name of the experiment to update.</p>
    #
    # @option params [String] :display_name
    #   <p>The name of the experiment as displayed. The name doesn't need to be unique. If
    #           <code>DisplayName</code> isn't specified, <code>ExperimentName</code> is displayed.</p>
    #
    # @option params [String] :description
    #   <p>The description of the experiment.</p>
    #
    # @return [Types::UpdateExperimentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_experiment(
    #     experiment_name: 'ExperimentName', # required
    #     display_name: 'DisplayName',
    #     description: 'Description'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateExperimentOutput
    #   resp.data.experiment_arn #=> String
    #
    def update_experiment(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateExperimentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateExperimentInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateExperiment
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ConflictException, Errors::ResourceNotFound]),
        data_parser: Parsers::UpdateExperiment
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateExperiment,
        stubs: @stubs,
        params_class: Params::UpdateExperimentOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_experiment
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates the properties of a SageMaker image. To change the image's tags, use the
    #         <a>AddTags</a> and <a>DeleteTags</a> APIs.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateImageInput}.
    #
    # @option params [Array<String>] :delete_properties
    #   <p>A list of properties to delete. Only the <code>Description</code> and
    #           <code>DisplayName</code> properties can be deleted.</p>
    #
    # @option params [String] :description
    #   <p>The new description for the image.</p>
    #
    # @option params [String] :display_name
    #   <p>The new display name for the image.</p>
    #
    # @option params [String] :image_name
    #   <p>The name of the image to update.</p>
    #
    # @option params [String] :role_arn
    #   <p>The new Amazon Resource Name (ARN) for the IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>
    #
    # @return [Types::UpdateImageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_image(
    #     delete_properties: [
    #       'member'
    #     ],
    #     description: 'Description',
    #     display_name: 'DisplayName',
    #     image_name: 'ImageName', # required
    #     role_arn: 'RoleArn'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateImageOutput
    #   resp.data.image_arn #=> String
    #
    def update_image(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateImageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateImageInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateImage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceInUse, Errors::ResourceNotFound]),
        data_parser: Parsers::UpdateImage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateImage,
        stubs: @stubs,
        params_class: Params::UpdateImageOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_image
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates a versioned model.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateModelPackageInput}.
    #
    # @option params [String] :model_package_arn
    #   <p>The Amazon Resource Name (ARN) of the model package.</p>
    #
    # @option params [String] :model_approval_status
    #   <p>The approval status of the model.</p>
    #
    # @option params [String] :approval_description
    #   <p>A description for the approval status of the model.</p>
    #
    # @option params [Hash<String, String>] :customer_metadata_properties
    #   <p>The metadata properties associated with the model package versions.</p>
    #
    # @option params [Array<String>] :customer_metadata_properties_to_remove
    #   <p>The metadata properties associated with the model package versions to remove.</p>
    #
    # @option params [Array<AdditionalInferenceSpecificationDefinition>] :additional_inference_specifications_to_add
    #   <p>An array of additional Inference Specification objects to be added to the
    #       existing array additional Inference Specification. Total number of additional
    #       Inference Specifications can not exceed 15. Each additional Inference Specification
    #       specifies artifacts based on this model package that can be used on inference endpoints.
    #       Generally used with SageMaker Neo to store the compiled artifacts.</p>
    #
    # @return [Types::UpdateModelPackageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_model_package(
    #     model_package_arn: 'ModelPackageArn', # required
    #     model_approval_status: 'Approved', # accepts ["Approved", "Rejected", "PendingManualApproval"]
    #     approval_description: 'ApprovalDescription',
    #     customer_metadata_properties: {
    #       'key' => 'value'
    #     },
    #     customer_metadata_properties_to_remove: [
    #       'member'
    #     ],
    #     additional_inference_specifications_to_add: [
    #       {
    #         name: 'Name', # required
    #         description: 'Description',
    #         containers: [
    #           {
    #             container_hostname: 'ContainerHostname',
    #             image: 'Image', # required
    #             image_digest: 'ImageDigest',
    #             model_data_url: 'ModelDataUrl',
    #             product_id: 'ProductId',
    #             environment: {
    #               'key' => 'value'
    #             },
    #             model_input: {
    #               data_input_config: 'DataInputConfig' # required
    #             },
    #             framework: 'Framework',
    #             framework_version: 'FrameworkVersion',
    #             nearest_model_name: 'NearestModelName'
    #           }
    #         ], # required
    #         supported_transform_instance_types: [
    #           'ml.m4.xlarge' # accepts ["ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #         ],
    #         supported_realtime_inference_instance_types: [
    #           'ml.t2.medium' # accepts ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.12xlarge", "ml.m5d.24xlarge", "ml.c4.large", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.large", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.12xlarge", "ml.r5.24xlarge", "ml.r5d.large", "ml.r5d.xlarge", "ml.r5d.2xlarge", "ml.r5d.4xlarge", "ml.r5d.12xlarge", "ml.r5d.24xlarge", "ml.inf1.xlarge", "ml.inf1.2xlarge", "ml.inf1.6xlarge", "ml.inf1.24xlarge"]
    #         ],
    #         supported_content_types: [
    #           'member'
    #         ],
    #         supported_response_mime_types: [
    #           'member'
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateModelPackageOutput
    #   resp.data.model_package_arn #=> String
    #
    def update_model_package(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateModelPackageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateModelPackageInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateModelPackage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::UpdateModelPackage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateModelPackage,
        stubs: @stubs,
        params_class: Params::UpdateModelPackageOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_model_package
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates a previously created schedule.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateMonitoringScheduleInput}.
    #
    # @option params [String] :monitoring_schedule_name
    #   <p>The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within
    #            an Amazon Web Services account.</p>
    #
    # @option params [MonitoringScheduleConfig] :monitoring_schedule_config
    #   <p>The configuration object that specifies the monitoring schedule and defines the
    #            monitoring job.</p>
    #
    # @return [Types::UpdateMonitoringScheduleOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_monitoring_schedule(
    #     monitoring_schedule_name: 'MonitoringScheduleName', # required
    #     monitoring_schedule_config: {
    #       schedule_config: {
    #         schedule_expression: 'ScheduleExpression' # required
    #       },
    #       monitoring_job_definition: {
    #         baseline_config: {
    #           baselining_job_name: 'BaseliningJobName',
    #           constraints_resource: {
    #             s3_uri: 'S3Uri'
    #           },
    #           statistics_resource: {
    #             s3_uri: 'S3Uri'
    #           }
    #         },
    #         monitoring_inputs: [
    #           {
    #             endpoint_input: {
    #               endpoint_name: 'EndpointName', # required
    #               local_path: 'LocalPath', # required
    #               s3_input_mode: 'Pipe', # accepts ["Pipe", "File"]
    #               s3_data_distribution_type: 'FullyReplicated', # accepts ["FullyReplicated", "ShardedByS3Key"]
    #               features_attribute: 'FeaturesAttribute',
    #               inference_attribute: 'InferenceAttribute',
    #               probability_attribute: 'ProbabilityAttribute',
    #               probability_threshold_attribute: 1.0,
    #               start_time_offset: 'StartTimeOffset',
    #               end_time_offset: 'EndTimeOffset'
    #             } # required
    #           }
    #         ], # required
    #         monitoring_output_config: {
    #           monitoring_outputs: [
    #             {
    #               s3_output: {
    #                 s3_uri: 'S3Uri', # required
    #                 local_path: 'LocalPath', # required
    #                 s3_upload_mode: 'Continuous' # accepts ["Continuous", "EndOfJob"]
    #               } # required
    #             }
    #           ], # required
    #           kms_key_id: 'KmsKeyId'
    #         }, # required
    #         monitoring_resources: {
    #           cluster_config: {
    #             instance_count: 1, # required
    #             instance_type: 'ml.t3.medium', # required - accepts ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #             volume_size_in_gb: 1, # required
    #             volume_kms_key_id: 'VolumeKmsKeyId'
    #           } # required
    #         }, # required
    #         monitoring_app_specification: {
    #           image_uri: 'ImageUri', # required
    #           container_entrypoint: [
    #             'member'
    #           ],
    #           container_arguments: [
    #             'member'
    #           ],
    #           record_preprocessor_source_uri: 'RecordPreprocessorSourceUri',
    #           post_analytics_processor_source_uri: 'PostAnalyticsProcessorSourceUri'
    #         }, # required
    #         stopping_condition: {
    #           max_runtime_in_seconds: 1 # required
    #         },
    #         environment: {
    #           'key' => 'value'
    #         },
    #         network_config: {
    #           enable_inter_container_traffic_encryption: false,
    #           enable_network_isolation: false,
    #           vpc_config: {
    #             security_group_ids: [
    #               'member'
    #             ], # required
    #             subnets: [
    #               'member'
    #             ] # required
    #           }
    #         },
    #         role_arn: 'RoleArn' # required
    #       },
    #       monitoring_job_definition_name: 'MonitoringJobDefinitionName',
    #       monitoring_type: 'DataQuality' # accepts ["DataQuality", "ModelQuality", "ModelBias", "ModelExplainability"]
    #     } # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateMonitoringScheduleOutput
    #   resp.data.monitoring_schedule_arn #=> String
    #
    def update_monitoring_schedule(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateMonitoringScheduleInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateMonitoringScheduleInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateMonitoringSchedule
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceNotFound]),
        data_parser: Parsers::UpdateMonitoringSchedule
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateMonitoringSchedule,
        stubs: @stubs,
        params_class: Params::UpdateMonitoringScheduleOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_monitoring_schedule
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates a notebook instance. NotebookInstance updates include upgrading or
    #             downgrading the ML compute instance used for your notebook instance to accommodate
    #             changes in your workload requirements.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateNotebookInstanceInput}.
    #
    # @option params [String] :notebook_instance_name
    #   <p>The name of the notebook instance to update.</p>
    #
    # @option params [String] :instance_type
    #   <p>The Amazon ML compute instance type.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access the
    #               notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html">SageMaker Roles</a>. </p>
    #           <note>
    #               <p>To be able to pass this role to SageMaker, the caller of this API must have the
    #                       <code>iam:PassRole</code> permission.</p>
    #           </note>
    #
    # @option params [String] :lifecycle_config_name
    #   <p>The name of a lifecycle configuration to associate with the notebook instance. For
    #               information about lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional)
    #                   Customize a Notebook Instance</a>.</p>
    #
    # @option params [Boolean] :disassociate_lifecycle_config
    #   <p>Set to <code>true</code> to remove the notebook instance lifecycle configuration
    #               currently associated with the notebook instance. This operation is idempotent. If you
    #               specify a lifecycle configuration that is not associated with the notebook instance when
    #               you call this method, it does not throw an error.</p>
    #
    # @option params [Integer] :volume_size_in_gb
    #   <p>The size, in GB, of the ML storage volume to attach to the notebook instance. The
    #               default value is 5 GB. ML storage volumes are encrypted, so SageMaker can't determine the
    #               amount of available free space on the volume. Because of this, you can increase the
    #               volume size when you update a notebook instance, but you can't decrease the volume size.
    #               If you want to decrease the size of the ML storage volume in use, create a new notebook
    #               instance with the desired size.</p>
    #
    # @option params [String] :default_code_repository
    #   <p>The Git repository to associate with the notebook instance as its default code
    #               repository. This can be either the name of a Git repository stored as a resource in your
    #               account, or the URL of a Git repository in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any
    #               other Git repository. When you open a notebook instance, it opens in the directory that
    #               contains this repository. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git Repositories with SageMaker
    #                   Notebook Instances</a>.</p>
    #
    # @option params [Array<String>] :additional_code_repositories
    #   <p>An array of up to three Git repositories to associate with the notebook instance.
    #               These can be either the names of Git repositories stored as resources in your account,
    #               or the URL of Git repositories in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any
    #               other Git repository. These repositories are cloned at the same level as the default
    #               repository of your notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html">Associating Git
    #                   Repositories with SageMaker Notebook Instances</a>.</p>
    #
    # @option params [Array<String>] :accelerator_types
    #   <p>A list of the Elastic Inference (EI) instance types to associate with this notebook
    #               instance. Currently only one EI instance type can be associated with a notebook
    #               instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html">Using Elastic Inference in Amazon
    #                   SageMaker</a>.</p>
    #
    # @option params [Boolean] :disassociate_accelerator_types
    #   <p>A list of the Elastic Inference (EI) instance types to remove from this notebook
    #               instance. This operation is idempotent. If you specify an accelerator type that is not
    #               associated with the notebook instance when you call this method, it does not throw an
    #               error.</p>
    #
    # @option params [Boolean] :disassociate_default_code_repository
    #   <p>The name or URL of the default Git repository to remove from this notebook instance.
    #               This operation is idempotent. If you specify a Git repository that is not associated
    #               with the notebook instance when you call this method, it does not throw an error.</p>
    #
    # @option params [Boolean] :disassociate_additional_code_repositories
    #   <p>A list of names or URLs of the default Git repositories to remove from this notebook
    #               instance. This operation is idempotent. If you specify a Git repository that is not
    #               associated with the notebook instance when you call this method, it does not throw an
    #               error.</p>
    #
    # @option params [String] :root_access
    #   <p>Whether root access is enabled or disabled for users of the notebook instance. The
    #               default value is <code>Enabled</code>.</p>
    #           <note>
    #               <p>If you set this to <code>Disabled</code>, users don't have root access on the
    #                   notebook instance, but lifecycle configuration scripts still run with root
    #                   permissions.</p>
    #           </note>
    #
    # @option params [InstanceMetadataServiceConfiguration] :instance_metadata_service_configuration
    #   <p>Information on the IMDS configuration of the notebook instance</p>
    #
    # @return [Types::UpdateNotebookInstanceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_notebook_instance(
    #     notebook_instance_name: 'NotebookInstanceName', # required
    #     instance_type: 'ml.t2.medium', # accepts ["ml.t2.medium", "ml.t2.large", "ml.t2.xlarge", "ml.t2.2xlarge", "ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.8xlarge", "ml.m5d.12xlarge", "ml.m5d.16xlarge", "ml.m5d.24xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.c5d.xlarge", "ml.c5d.2xlarge", "ml.c5d.4xlarge", "ml.c5d.9xlarge", "ml.c5d.18xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #     role_arn: 'RoleArn',
    #     lifecycle_config_name: 'LifecycleConfigName',
    #     disassociate_lifecycle_config: false,
    #     volume_size_in_gb: 1,
    #     default_code_repository: 'DefaultCodeRepository',
    #     additional_code_repositories: [
    #       'member'
    #     ],
    #     accelerator_types: [
    #       'ml.eia1.medium' # accepts ["ml.eia1.medium", "ml.eia1.large", "ml.eia1.xlarge", "ml.eia2.medium", "ml.eia2.large", "ml.eia2.xlarge"]
    #     ],
    #     disassociate_accelerator_types: false,
    #     disassociate_default_code_repository: false,
    #     disassociate_additional_code_repositories: false,
    #     root_access: 'Enabled', # accepts ["Enabled", "Disabled"]
    #     instance_metadata_service_configuration: {
    #       minimum_instance_metadata_service_version: 'MinimumInstanceMetadataServiceVersion' # required
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateNotebookInstanceOutput
    #
    def update_notebook_instance(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateNotebookInstanceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateNotebookInstanceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateNotebookInstance
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::UpdateNotebookInstance
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateNotebookInstance,
        stubs: @stubs,
        params_class: Params::UpdateNotebookInstanceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_notebook_instance
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates a notebook instance lifecycle configuration created with the <a>CreateNotebookInstanceLifecycleConfig</a> API.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateNotebookInstanceLifecycleConfigInput}.
    #
    # @option params [String] :notebook_instance_lifecycle_config_name
    #   <p>The name of the lifecycle configuration.</p>
    #
    # @option params [Array<NotebookInstanceLifecycleHook>] :on_create
    #   <p>The shell script that runs only once, when you create a notebook instance. The shell
    #               script must be a base64-encoded string.</p>
    #
    # @option params [Array<NotebookInstanceLifecycleHook>] :on_start
    #   <p>The shell script that runs every time you start a notebook instance, including when
    #               you create the notebook instance. The shell script must be a base64-encoded
    #               string.</p>
    #
    # @return [Types::UpdateNotebookInstanceLifecycleConfigOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_notebook_instance_lifecycle_config(
    #     notebook_instance_lifecycle_config_name: 'NotebookInstanceLifecycleConfigName', # required
    #     on_create: [
    #       {
    #         content: 'Content'
    #       }
    #     ],
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateNotebookInstanceLifecycleConfigOutput
    #
    def update_notebook_instance_lifecycle_config(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateNotebookInstanceLifecycleConfigInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateNotebookInstanceLifecycleConfigInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateNotebookInstanceLifecycleConfig
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::UpdateNotebookInstanceLifecycleConfig
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateNotebookInstanceLifecycleConfig,
        stubs: @stubs,
        params_class: Params::UpdateNotebookInstanceLifecycleConfigOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_notebook_instance_lifecycle_config
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates a pipeline.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdatePipelineInput}.
    #
    # @option params [String] :pipeline_name
    #   <p>The name of the pipeline to update.</p>
    #
    # @option params [String] :pipeline_display_name
    #   <p>The display name of the pipeline.</p>
    #
    # @option params [String] :pipeline_definition
    #   <p>The JSON pipeline definition.</p>
    #
    # @option params [PipelineDefinitionS3Location] :pipeline_definition_s3_location
    #   <p>The location of the pipeline definition stored in Amazon S3. If specified,
    #               SageMaker will retrieve the pipeline definition from this location.</p>
    #
    # @option params [String] :pipeline_description
    #   <p>The description of the pipeline.</p>
    #
    # @option params [String] :role_arn
    #   <p>The Amazon Resource Name (ARN) that the pipeline uses to execute.</p>
    #
    # @option params [ParallelismConfiguration] :parallelism_configuration
    #   <p>If specified, it applies to all executions of this pipeline by default.</p>
    #
    # @return [Types::UpdatePipelineOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_pipeline(
    #     pipeline_name: 'PipelineName', # required
    #     pipeline_display_name: 'PipelineDisplayName',
    #     pipeline_definition: 'PipelineDefinition',
    #     pipeline_definition_s3_location: {
    #       bucket: 'Bucket', # required
    #       object_key: 'ObjectKey', # required
    #       version_id: 'VersionId'
    #     },
    #     pipeline_description: 'PipelineDescription',
    #     role_arn: 'RoleArn',
    #     parallelism_configuration: {
    #       max_parallel_execution_steps: 1 # required
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdatePipelineOutput
    #   resp.data.pipeline_arn #=> String
    #
    def update_pipeline(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdatePipelineInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdatePipelineInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdatePipeline
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::UpdatePipeline
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdatePipeline,
        stubs: @stubs,
        params_class: Params::UpdatePipelineOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_pipeline
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates a pipeline execution.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdatePipelineExecutionInput}.
    #
    # @option params [String] :pipeline_execution_arn
    #   <p>The Amazon Resource Name (ARN) of the pipeline execution.</p>
    #
    # @option params [String] :pipeline_execution_description
    #   <p>The description of the pipeline execution.</p>
    #
    # @option params [String] :pipeline_execution_display_name
    #   <p>The display name of the pipeline execution.</p>
    #
    # @option params [ParallelismConfiguration] :parallelism_configuration
    #   <p>This configuration, if specified, overrides the parallelism configuration
    #               of the parent pipeline for this specific run.</p>
    #
    # @return [Types::UpdatePipelineExecutionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_pipeline_execution(
    #     pipeline_execution_arn: 'PipelineExecutionArn', # required
    #     pipeline_execution_description: 'PipelineExecutionDescription',
    #     pipeline_execution_display_name: 'PipelineExecutionDisplayName',
    #     parallelism_configuration: {
    #       max_parallel_execution_steps: 1 # required
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdatePipelineExecutionOutput
    #   resp.data.pipeline_execution_arn #=> String
    #
    def update_pipeline_execution(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdatePipelineExecutionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdatePipelineExecutionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdatePipelineExecution
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::UpdatePipelineExecution
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdatePipelineExecution,
        stubs: @stubs,
        params_class: Params::UpdatePipelineExecutionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_pipeline_execution
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates a machine learning (ML) project that is created from a template that
    #             sets up an ML pipeline from training to deploying an approved model.</p>
    #         <note>
    #             <p>You must not update a project that is in use. If you update the
    #                     <code>ServiceCatalogProvisioningUpdateDetails</code> of a project that is active
    #                 or being created, or updated, you may lose resources already created by the
    #                 project.</p>
    #             </note>
    #
    # @param [Hash] params
    #   See {Types::UpdateProjectInput}.
    #
    # @option params [String] :project_name
    #   <p>The name of the project.</p>
    #
    # @option params [String] :project_description
    #   <p>The description for the project.</p>
    #
    # @option params [ServiceCatalogProvisioningUpdateDetails] :service_catalog_provisioning_update_details
    #   <p>The product ID and provisioning artifact ID to provision a service catalog.
    #               The provisioning artifact ID will default to the latest provisioning artifact
    #               ID of the product, if you don't provide the provisioning artifact ID. For more
    #               information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>.
    #           </p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>An array of key-value pairs. You can use tags to categorize your
    #               Amazon Web Services resources in different ways, for example, by purpose, owner, or
    #               environment. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a>.</p>
    #
    # @return [Types::UpdateProjectOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_project(
    #     project_name: 'ProjectName', # required
    #     project_description: 'ProjectDescription',
    #     service_catalog_provisioning_update_details: {
    #       provisioning_artifact_id: 'ProvisioningArtifactId',
    #       provisioning_parameters: [
    #         {
    #           key: 'Key',
    #           value: 'Value'
    #         }
    #       ]
    #     },
    #     tags: [
    #       {
    #         key: 'Key', # required
    #         value: 'Value' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateProjectOutput
    #   resp.data.project_arn #=> String
    #
    def update_project(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateProjectInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateProjectInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateProject
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::UpdateProject
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateProject,
        stubs: @stubs,
        params_class: Params::UpdateProjectOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_project
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Update a model training job to request a new Debugger profiling configuration.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateTrainingJobInput}.
    #
    # @option params [String] :training_job_name
    #   <p>The name of a training job to update the Debugger profiling configuration.</p>
    #
    # @option params [ProfilerConfigForUpdate] :profiler_config
    #   <p>Configuration information for Debugger system monitoring, framework profiling, and
    #               storage paths.</p>
    #
    # @option params [Array<ProfilerRuleConfiguration>] :profiler_rule_configurations
    #   <p>Configuration information for Debugger rules for profiling system and framework
    #               metrics.</p>
    #
    # @return [Types::UpdateTrainingJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_training_job(
    #     training_job_name: 'TrainingJobName', # required
    #     profiler_config: {
    #       s3_output_path: 'S3OutputPath',
    #       profiling_interval_in_milliseconds: 1,
    #       profiling_parameters: {
    #         'key' => 'value'
    #       },
    #       disable_profiler: false
    #     },
    #     profiler_rule_configurations: [
    #       {
    #         rule_configuration_name: 'RuleConfigurationName', # required
    #         local_path: 'LocalPath',
    #         s3_output_path: 'S3OutputPath',
    #         rule_evaluator_image: 'RuleEvaluatorImage', # required
    #         instance_type: 'ml.t3.medium', # accepts ["ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m4.xlarge", "ml.m4.2xlarge", "ml.m4.4xlarge", "ml.m4.10xlarge", "ml.m4.16xlarge", "ml.c4.xlarge", "ml.c4.2xlarge", "ml.c4.4xlarge", "ml.c4.8xlarge", "ml.p2.xlarge", "ml.p2.8xlarge", "ml.p2.16xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.18xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.12xlarge", "ml.m5.24xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge"]
    #         volume_size_in_gb: 1,
    #         rule_parameters: {
    #           'key' => 'value'
    #         }
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateTrainingJobOutput
    #   resp.data.training_job_arn #=> String
    #
    def update_training_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateTrainingJobInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateTrainingJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateTrainingJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceNotFound]),
        data_parser: Parsers::UpdateTrainingJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateTrainingJob,
        stubs: @stubs,
        params_class: Params::UpdateTrainingJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_training_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates the display name of a trial.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateTrialInput}.
    #
    # @option params [String] :trial_name
    #   <p>The name of the trial to update.</p>
    #
    # @option params [String] :display_name
    #   <p>The name of the trial as displayed. The name doesn't need to be unique. If
    #           <code>DisplayName</code> isn't specified, <code>TrialName</code> is displayed.</p>
    #
    # @return [Types::UpdateTrialOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_trial(
    #     trial_name: 'TrialName', # required
    #     display_name: 'DisplayName'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateTrialOutput
    #   resp.data.trial_arn #=> String
    #
    def update_trial(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateTrialInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateTrialInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateTrial
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ConflictException, Errors::ResourceNotFound]),
        data_parser: Parsers::UpdateTrial
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateTrial,
        stubs: @stubs,
        params_class: Params::UpdateTrialOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_trial
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates one or more properties of a trial component.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateTrialComponentInput}.
    #
    # @option params [String] :trial_component_name
    #   <p>The name of the component to update.</p>
    #
    # @option params [String] :display_name
    #   <p>The name of the component as displayed. The name doesn't need to be unique. If
    #           <code>DisplayName</code> isn't specified, <code>TrialComponentName</code> is
    #         displayed.</p>
    #
    # @option params [TrialComponentStatus] :status
    #   <p>The new status of the component.</p>
    #
    # @option params [Time] :start_time
    #   <p>When the component started.</p>
    #
    # @option params [Time] :end_time
    #   <p>When the component ended.</p>
    #
    # @option params [Hash<String, TrialComponentParameterValue>] :parameters
    #   <p>Replaces all of the component's hyperparameters with the specified hyperparameters.</p>
    #
    # @option params [Array<String>] :parameters_to_remove
    #   <p>The hyperparameters to remove from the component.</p>
    #
    # @option params [Hash<String, TrialComponentArtifact>] :input_artifacts
    #   <p>Replaces all of the component's input artifacts with the specified artifacts.</p>
    #
    # @option params [Array<String>] :input_artifacts_to_remove
    #   <p>The input artifacts to remove from the component.</p>
    #
    # @option params [Hash<String, TrialComponentArtifact>] :output_artifacts
    #   <p>Replaces all of the component's output artifacts with the specified artifacts.</p>
    #
    # @option params [Array<String>] :output_artifacts_to_remove
    #   <p>The output artifacts to remove from the component.</p>
    #
    # @return [Types::UpdateTrialComponentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_trial_component(
    #     trial_component_name: 'TrialComponentName', # required
    #     display_name: 'DisplayName',
    #     status: {
    #       primary_status: 'InProgress', # accepts ["InProgress", "Completed", "Failed", "Stopping", "Stopped"]
    #       message: 'Message'
    #     },
    #     start_time: Time.now,
    #     end_time: Time.now,
    #     parameters: {
    #       'key' => {
    #         # One of:
    #         string_value: 'StringValue',
    #         number_value: 1.0
    #       }
    #     },
    #     parameters_to_remove: [
    #       'member'
    #     ],
    #     input_artifacts: {
    #       'key' => {
    #         media_type: 'MediaType',
    #         value: 'Value' # required
    #       }
    #     },
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateTrialComponentOutput
    #   resp.data.trial_component_arn #=> String
    #
    def update_trial_component(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateTrialComponentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateTrialComponentInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateTrialComponent
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ConflictException, Errors::ResourceNotFound]),
        data_parser: Parsers::UpdateTrialComponent
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateTrialComponent,
        stubs: @stubs,
        params_class: Params::UpdateTrialComponentOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_trial_component
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates a user profile.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateUserProfileInput}.
    #
    # @option params [String] :domain_id
    #   <p>The domain ID.</p>
    #
    # @option params [String] :user_profile_name
    #   <p>The user profile name.</p>
    #
    # @option params [UserSettings] :user_settings
    #   <p>A collection of settings.</p>
    #
    # @return [Types::UpdateUserProfileOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_user_profile(
    #     domain_id: 'DomainId', # required
    #     user_profile_name: 'UserProfileName', # required
    #     user_settings: {
    #       execution_role: 'ExecutionRole',
    #       security_groups: [
    #         'member'
    #       ],
    #       sharing_settings: {
    #         notebook_output_option: 'Allowed', # accepts ["Allowed", "Disabled"]
    #         s3_output_path: 'S3OutputPath',
    #         s3_kms_key_id: 'S3KmsKeyId'
    #       },
    #       jupyter_server_app_settings: {
    #         default_resource_spec: {
    #           sage_maker_image_arn: 'SageMakerImageArn',
    #           sage_maker_image_version_arn: 'SageMakerImageVersionArn',
    #           instance_type: 'system', # accepts ["system", "ml.t3.micro", "ml.t3.small", "ml.t3.medium", "ml.t3.large", "ml.t3.xlarge", "ml.t3.2xlarge", "ml.m5.large", "ml.m5.xlarge", "ml.m5.2xlarge", "ml.m5.4xlarge", "ml.m5.8xlarge", "ml.m5.12xlarge", "ml.m5.16xlarge", "ml.m5.24xlarge", "ml.m5d.large", "ml.m5d.xlarge", "ml.m5d.2xlarge", "ml.m5d.4xlarge", "ml.m5d.8xlarge", "ml.m5d.12xlarge", "ml.m5d.16xlarge", "ml.m5d.24xlarge", "ml.c5.large", "ml.c5.xlarge", "ml.c5.2xlarge", "ml.c5.4xlarge", "ml.c5.9xlarge", "ml.c5.12xlarge", "ml.c5.18xlarge", "ml.c5.24xlarge", "ml.p3.2xlarge", "ml.p3.8xlarge", "ml.p3.16xlarge", "ml.p3dn.24xlarge", "ml.g4dn.xlarge", "ml.g4dn.2xlarge", "ml.g4dn.4xlarge", "ml.g4dn.8xlarge", "ml.g4dn.12xlarge", "ml.g4dn.16xlarge", "ml.r5.large", "ml.r5.xlarge", "ml.r5.2xlarge", "ml.r5.4xlarge", "ml.r5.8xlarge", "ml.r5.12xlarge", "ml.r5.16xlarge", "ml.r5.24xlarge", "ml.g5.xlarge", "ml.g5.2xlarge", "ml.g5.4xlarge", "ml.g5.8xlarge", "ml.g5.16xlarge", "ml.g5.12xlarge", "ml.g5.24xlarge", "ml.g5.48xlarge"]
    #           lifecycle_config_arn: 'LifecycleConfigArn'
    #         },
    #         lifecycle_config_arns: [
    #           'member'
    #         ]
    #       },
    #       kernel_gateway_app_settings: {
    #         custom_images: [
    #           {
    #             image_name: 'ImageName', # required
    #             image_version_number: 1,
    #             app_image_config_name: 'AppImageConfigName' # required
    #           }
    #         ],
    #       },
    #       tensor_board_app_settings: {
    #       },
    #       r_studio_server_pro_app_settings: {
    #         access_status: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #         user_group: 'R_STUDIO_ADMIN' # accepts ["R_STUDIO_ADMIN", "R_STUDIO_USER"]
    #       },
    #       r_session_app_settings: {
    #       }
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateUserProfileOutput
    #   resp.data.user_profile_arn #=> String
    #
    def update_user_profile(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateUserProfileInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateUserProfileInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateUserProfile
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded, Errors::ResourceInUse, Errors::ResourceNotFound]),
        data_parser: Parsers::UpdateUserProfile
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateUserProfile,
        stubs: @stubs,
        params_class: Params::UpdateUserProfileOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_user_profile
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Use this operation to update your workforce. You can use this operation to
    #         require that workers use specific IP addresses to work on tasks
    #         and to update your OpenID Connect (OIDC) Identity Provider (IdP) workforce configuration.</p>
    #
    #         <p> Use <code>SourceIpConfig</code> to restrict worker access to tasks to a specific range of IP addresses.
    #         You specify allowed IP addresses by creating a list of up to ten <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>.
    #         By default, a workforce isn't restricted to specific IP addresses. If you specify a
    #             range of IP addresses, workers who attempt to access tasks using any IP address outside
    #             the specified range are denied and get a <code>Not Found</code> error message on
    #             the worker portal.</p>
    #         <p>Use <code>OidcConfig</code> to update the configuration of a workforce created using
    #             your own OIDC IdP. </p>
    #         <important>
    #             <p>You can only update your OIDC IdP configuration when there are no work teams
    #                 associated with your workforce. You can delete work teams using the  operation.</p>
    #         </important>
    #         <p>After restricting access to a range of IP addresses or updating your OIDC IdP configuration with this operation, you
    #         can view details about your update workforce using the
    #             operation.</p>
    #         <important>
    #             <p>This operation only applies to private workforces.</p>
    #         </important>
    #
    # @param [Hash] params
    #   See {Types::UpdateWorkforceInput}.
    #
    # @option params [String] :workforce_name
    #   <p>The name of the private workforce that you want to update. You can find your workforce
    #           name by using the  operation.</p>
    #
    # @option params [SourceIpConfig] :source_ip_config
    #   <p>A list of one to ten worker IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>) that can be used to
    #               access tasks assigned to this workforce.</p>
    #           <p>Maximum: Ten CIDR values</p>
    #
    # @option params [OidcConfig] :oidc_config
    #   <p>Use this parameter to update your OIDC Identity Provider (IdP)
    #         configuration for a workforce made using your own IdP.</p>
    #
    # @return [Types::UpdateWorkforceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_workforce(
    #     workforce_name: 'WorkforceName', # required
    #     source_ip_config: {
    #       cidrs: [
    #         'member'
    #       ] # required
    #     },
    #     oidc_config: {
    #       client_id: 'ClientId', # required
    #       client_secret: 'ClientSecret', # required
    #       issuer: 'Issuer', # required
    #       authorization_endpoint: 'AuthorizationEndpoint', # required
    #       token_endpoint: 'TokenEndpoint', # required
    #       user_info_endpoint: 'UserInfoEndpoint', # required
    #       logout_endpoint: 'LogoutEndpoint', # required
    #       jwks_uri: 'JwksUri' # required
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateWorkforceOutput
    #   resp.data.workforce #=> Types::Workforce
    #   resp.data.workforce.workforce_name #=> String
    #   resp.data.workforce.workforce_arn #=> String
    #   resp.data.workforce.last_updated_date #=> Time
    #   resp.data.workforce.source_ip_config #=> Types::SourceIpConfig
    #   resp.data.workforce.source_ip_config.cidrs #=> Array<String>
    #   resp.data.workforce.source_ip_config.cidrs[0] #=> String
    #   resp.data.workforce.sub_domain #=> String
    #   resp.data.workforce.cognito_config #=> Types::CognitoConfig
    #   resp.data.workforce.cognito_config.user_pool #=> String
    #   resp.data.workforce.cognito_config.client_id #=> String
    #   resp.data.workforce.oidc_config #=> Types::OidcConfigForResponse
    #   resp.data.workforce.oidc_config.client_id #=> String
    #   resp.data.workforce.oidc_config.issuer #=> String
    #   resp.data.workforce.oidc_config.authorization_endpoint #=> String
    #   resp.data.workforce.oidc_config.token_endpoint #=> String
    #   resp.data.workforce.oidc_config.user_info_endpoint #=> String
    #   resp.data.workforce.oidc_config.logout_endpoint #=> String
    #   resp.data.workforce.oidc_config.jwks_uri #=> String
    #   resp.data.workforce.create_date #=> Time
    #
    def update_workforce(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateWorkforceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateWorkforceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateWorkforce
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::UpdateWorkforce
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateWorkforce,
        stubs: @stubs,
        params_class: Params::UpdateWorkforceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_workforce
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates an existing work team with new member definitions or description.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateWorkteamInput}.
    #
    # @option params [String] :workteam_name
    #   <p>The name of the work team to update.</p>
    #
    # @option params [Array<MemberDefinition>] :member_definitions
    #   <p>A list of <code>MemberDefinition</code> objects that contains objects that identify
    #               the workers that make up the work team. </p>
    #           <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP).
    #               For private workforces created using Amazon Cognito use
    #               <code>CognitoMemberDefinition</code>. For workforces created using your own OIDC identity
    #               provider (IdP) use <code>OidcMemberDefinition</code>. You should not provide input
    #               for both of these parameters in a single request.</p>
    #           <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito
    #                   <i>user groups</i> within the user pool used to create a workforce. All of the
    #                   <code>CognitoMemberDefinition</code> objects that make up the member definition must
    #               have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon
    #               Cognito user group to an existing worker pool, see <a href="">Adding groups to a User
    #                   Pool</a>. For more information about user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html">Amazon Cognito User
    #                   Pools</a>.</p>
    #           <p>For workforces created using your own OIDC IdP, specify the user groups that you want
    #               to include in your private work team in <code>OidcMemberDefinition</code> by listing
    #               those groups in <code>Groups</code>. Be aware that user groups that are already in the
    #               work team must also be listed in <code>Groups</code> when you make this request to
    #               remain on the work team. If you do not include these user groups, they will no longer be
    #               associated with the work team you update. </p>
    #
    # @option params [String] :description
    #   <p>An updated description for the work team.</p>
    #
    # @option params [NotificationConfiguration] :notification_configuration
    #   <p>Configures SNS topic notifications for available or expiring work items</p>
    #
    # @return [Types::UpdateWorkteamOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_workteam(
    #     workteam_name: 'WorkteamName', # required
    #     member_definitions: [
    #       {
    #         cognito_member_definition: {
    #           user_pool: 'UserPool', # required
    #           user_group: 'UserGroup', # required
    #           client_id: 'ClientId' # required
    #         },
    #         oidc_member_definition: {
    #           groups: [
    #             'member'
    #           ] # required
    #         }
    #       }
    #     ],
    #     description: 'Description',
    #     notification_configuration: {
    #       notification_topic_arn: 'NotificationTopicArn'
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateWorkteamOutput
    #   resp.data.workteam #=> Types::Workteam
    #   resp.data.workteam.workteam_name #=> String
    #   resp.data.workteam.member_definitions #=> Array<MemberDefinition>
    #   resp.data.workteam.member_definitions[0] #=> Types::MemberDefinition
    #   resp.data.workteam.member_definitions[0].cognito_member_definition #=> Types::CognitoMemberDefinition
    #   resp.data.workteam.member_definitions[0].cognito_member_definition.user_pool #=> String
    #   resp.data.workteam.member_definitions[0].cognito_member_definition.user_group #=> String
    #   resp.data.workteam.member_definitions[0].cognito_member_definition.client_id #=> String
    #   resp.data.workteam.member_definitions[0].oidc_member_definition #=> Types::OidcMemberDefinition
    #   resp.data.workteam.member_definitions[0].oidc_member_definition.groups #=> Array<String>
    #   resp.data.workteam.member_definitions[0].oidc_member_definition.groups[0] #=> String
    #   resp.data.workteam.workteam_arn #=> String
    #   resp.data.workteam.workforce_arn #=> String
    #   resp.data.workteam.product_listing_ids #=> Array<String>
    #   resp.data.workteam.product_listing_ids[0] #=> String
    #   resp.data.workteam.description #=> String
    #   resp.data.workteam.sub_domain #=> String
    #   resp.data.workteam.create_date #=> Time
    #   resp.data.workteam.last_updated_date #=> Time
    #   resp.data.workteam.notification_configuration #=> Types::NotificationConfiguration
    #   resp.data.workteam.notification_configuration.notification_topic_arn #=> String
    #
    def update_workteam(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateWorkteamInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateWorkteamInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateWorkteam
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ResourceLimitExceeded]),
        data_parser: Parsers::UpdateWorkteam
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateWorkteam,
        stubs: @stubs,
        params_class: Params::UpdateWorkteamOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_workteam
        )
      )
      raise resp.error if resp.error
      resp
    end

    private

    def apply_middleware(middleware_stack, middleware)
      Client.middleware.apply(middleware_stack)
      @middleware.apply(middleware_stack)
      Hearth::MiddlewareBuilder.new(middleware).apply(middleware_stack)
    end
  end
end
