# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/awslabs/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

module AWS::SDK::PersonalizeEvents
  module Types

    # <p>Represents user interaction event information sent using the
    #       <code>PutEvents</code> API.</p>
    #
    # @!attribute event_id
    #   <p>An ID associated with the event. If an event ID is not provided, Amazon Personalize generates
    #         a unique ID for the event. An event ID is not used as an input to the model. Amazon Personalize uses
    #         the event ID to distinquish unique events. Any subsequent events after the first with the
    #         same event ID are not used in model training.</p>
    #
    #   @return [String]
    #
    # @!attribute event_type
    #   <p>The type of event, such as click or download. This property corresponds to the <code>EVENT_TYPE</code>
    #         field of your Interactions schema and depends on the types of events you are tracking.</p>
    #
    #   @return [String]
    #
    # @!attribute event_value
    #   <p>The event value that corresponds to the <code>EVENT_VALUE</code> field of the Interactions schema.</p>
    #
    #   @return [Float]
    #
    # @!attribute item_id
    #   <p>The item ID key that corresponds to the <code>ITEM_ID</code> field of the Interactions schema.</p>
    #
    #   @return [String]
    #
    # @!attribute properties
    #   <p>A string map of event-specific data that you might choose to record. For example, if a
    #         user rates a movie on your site, other than movie ID (<code>itemId</code>) and rating (<code>eventValue</code>)
    #         , you might also send the number of movie ratings made by the user.</p>
    #            <p>Each item in the map consists of a key-value pair. For example,</p>
    #
    #            <p>
    #               <code>{"numberOfRatings": "12"}</code>
    #            </p>
    #            <p>The keys use camel case names that match the fields in the Interactions
    #         schema. In the above example, the <code>numberOfRatings</code> would match the
    #         'NUMBER_OF_RATINGS' field defined in the Interactions schema.</p>
    #
    #   @return [String]
    #
    # @!attribute sent_at
    #   <p>The timestamp (in Unix time) on the client side when the event occurred.</p>
    #
    #   @return [Time]
    #
    # @!attribute recommendation_id
    #   <p>The ID of the recommendation.</p>
    #
    #   @return [String]
    #
    # @!attribute impression
    #   <p>A list of item IDs that represents the sequence of items you have shown the user. For example, <code>["itemId1", "itemId2", "itemId3"]</code>.</p>
    #
    #   @return [Array<String>]
    #
    Event = ::Struct.new(
      :event_id,
      :event_type,
      :event_value,
      :item_id,
      :properties,
      :sent_at,
      :recommendation_id,
      :impression,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>Provide a valid value for the field or parameter.</p>
    #
    # @!attribute message
    #
    #   @return [String]
    #
    InvalidInputException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>Represents item metadata added to an Items dataset using the
    #       <code>PutItems</code> API. For more information see
    #       <a href="https://docs.aws.amazon.com/personalize/latest/dg/importing-items.html">Importing Items Incrementally</a>.
    #     </p>
    #
    # @!attribute item_id
    #   <p>The ID associated with the item.</p>
    #
    #   @return [String]
    #
    # @!attribute properties
    #   <p>A string map of item-specific metadata. Each element in the map consists of a key-value pair.
    #         For example, <code>{"numberOfRatings": "12"}</code>.</p>
    #            <p>The keys use camel case names that match the fields in the schema for the Items
    #         dataset. In the previous example, the <code>numberOfRatings</code> matches the
    #         'NUMBER_OF_RATINGS' field defined in the Items schema. For categorical string data, to include multiple categories for a single item,
    #         separate each category with a pipe separator (<code>|</code>). For example, <code>\"Horror|Action\"</code>.</p>
    #
    #   @return [String]
    #
    Item = ::Struct.new(
      :item_id,
      :properties,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute tracking_id
    #   <p>The tracking ID for the event.
    #         The ID is generated by a call to the
    #         <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html">CreateEventTracker</a> API.</p>
    #
    #   @return [String]
    #
    # @!attribute user_id
    #   <p>The user associated with the event.</p>
    #
    #   @return [String]
    #
    # @!attribute session_id
    #   <p>The session ID associated with the user's visit. Your application generates the sessionId when a user first visits your website or uses your application.
    #         Amazon Personalize uses the sessionId to associate events with the user before they log in. For more information, see
    #         <a href="https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html">Recording Events</a>.</p>
    #
    #   @return [String]
    #
    # @!attribute event_list
    #   <p>A list of event data from the session.</p>
    #
    #   @return [Array<Event>]
    #
    PutEventsInput = ::Struct.new(
      :tracking_id,
      :user_id,
      :session_id,
      :event_list,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    PutEventsOutput = ::Struct.new(
      nil,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute dataset_arn
    #   <p>The Amazon Resource Name (ARN) of the Items dataset you are adding the item or items to.</p>
    #
    #   @return [String]
    #
    # @!attribute items
    #   <p>A list of item data.</p>
    #
    #   @return [Array<Item>]
    #
    PutItemsInput = ::Struct.new(
      :dataset_arn,
      :items,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    PutItemsOutput = ::Struct.new(
      nil,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute dataset_arn
    #   <p>The Amazon Resource Name (ARN) of the Users dataset you are adding the user or users to.</p>
    #
    #   @return [String]
    #
    # @!attribute users
    #   <p>A list of user data.</p>
    #
    #   @return [Array<User>]
    #
    PutUsersInput = ::Struct.new(
      :dataset_arn,
      :users,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    PutUsersOutput = ::Struct.new(
      nil,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The specified resource is in use.</p>
    #
    # @!attribute message
    #
    #   @return [String]
    #
    ResourceInUseException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>Could not find the specified resource.</p>
    #
    # @!attribute message
    #
    #   @return [String]
    #
    ResourceNotFoundException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>Represents user metadata added to a Users dataset using the
    #       <code>PutUsers</code> API. For more information see
    #       <a href="https://docs.aws.amazon.com/personalize/latest/dg/importing-users.html">Importing Users Incrementally</a>.</p>
    #
    # @!attribute user_id
    #   <p>The ID associated with the user.</p>
    #
    #   @return [String]
    #
    # @!attribute properties
    #   <p>A string map of user-specific metadata. Each element in the map consists of a key-value pair.
    #         For example, <code>{"numberOfVideosWatched": "45"}</code>.</p>
    #            <p>The keys use camel case names that match the fields in the schema for the Users
    #         dataset. In the previous example, the <code>numberOfVideosWatched</code> matches the
    #         'NUMBER_OF_VIDEOS_WATCHED' field defined in the Users schema. For categorical string data,
    #         to include multiple categories for a single user, separate each category with a pipe separator (<code>|</code>).
    #         For example, <code>\"Member|Frequent shopper\"</code>.</p>
    #
    #   @return [String]
    #
    User = ::Struct.new(
      :user_id,
      :properties,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

  end
end
