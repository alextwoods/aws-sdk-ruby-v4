# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/awslabs/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

module AWS::SDK::IoTDataPlane
  module Types

    # <p>The specified version does not match the version of the document.</p>
    #
    # @!attribute message
    #   <p>The message for the exception.</p>
    #
    #   @return [String]
    #
    ConflictException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The input for the DeleteThingShadow operation.</p>
    #
    # @!attribute thing_name
    #   <p>The name of the thing.</p>
    #
    #   @return [String]
    #
    # @!attribute shadow_name
    #   <p>The name of the shadow.</p>
    #
    #   @return [String]
    #
    DeleteThingShadowInput = ::Struct.new(
      :thing_name,
      :shadow_name,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The output from the DeleteThingShadow operation.</p>
    #
    # @!attribute payload
    #   <p>The state information, in JSON format.</p>
    #
    #   @return [String]
    #
    DeleteThingShadowOutput = ::Struct.new(
      :payload,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The input for the GetRetainedMessage operation.</p>
    #
    # @!attribute topic
    #   <p>The topic name of the retained message to retrieve.</p>
    #
    #   @return [String]
    #
    GetRetainedMessageInput = ::Struct.new(
      :topic,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The output from the GetRetainedMessage operation.</p>
    #
    # @!attribute topic
    #   <p>The topic name to which the retained message was published.</p>
    #
    #   @return [String]
    #
    # @!attribute payload
    #   <p>The Base64-encoded message payload of the retained message body.</p>
    #
    #   @return [String]
    #
    # @!attribute qos
    #   <p>The quality of service (QoS) level used to publish the retained message.</p>
    #
    #   @return [Integer]
    #
    # @!attribute last_modified_time
    #   <p>The Epoch date and time, in milliseconds, when the retained message was stored by IoT.</p>
    #
    #   @return [Integer]
    #
    GetRetainedMessageOutput = ::Struct.new(
      :topic,
      :payload,
      :qos,
      :last_modified_time,
      keyword_init: true
    ) do
      include Hearth::Structure
      def initialize(*)
        super
        self.qos ||= 0
        self.last_modified_time ||= 0
      end

    end

    # <p>The input for the GetThingShadow operation.</p>
    #
    # @!attribute thing_name
    #   <p>The name of the thing.</p>
    #
    #   @return [String]
    #
    # @!attribute shadow_name
    #   <p>The name of the shadow.</p>
    #
    #   @return [String]
    #
    GetThingShadowInput = ::Struct.new(
      :thing_name,
      :shadow_name,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The output from the GetThingShadow operation.</p>
    #
    # @!attribute payload
    #   <p>The state information, in JSON format.</p>
    #
    #   @return [String]
    #
    GetThingShadowOutput = ::Struct.new(
      :payload,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>An unexpected error has occurred.</p>
    #
    # @!attribute message
    #   <p>The message for the exception.</p>
    #
    #   @return [String]
    #
    InternalFailureException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The request is not valid.</p>
    #
    # @!attribute message
    #   <p>The message for the exception.</p>
    #
    #   @return [String]
    #
    InvalidRequestException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute thing_name
    #   <p>The name of the thing.</p>
    #
    #   @return [String]
    #
    # @!attribute next_token
    #   <p>The token to retrieve the next set of results.</p>
    #
    #   @return [String]
    #
    # @!attribute page_size
    #   <p>The result page size.</p>
    #
    #   @return [Integer]
    #
    ListNamedShadowsForThingInput = ::Struct.new(
      :thing_name,
      :next_token,
      :page_size,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute results
    #   <p>The list of shadows for the specified thing.</p>
    #
    #   @return [Array<String>]
    #
    # @!attribute next_token
    #   <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    #
    #   @return [String]
    #
    # @!attribute timestamp
    #   <p>The Epoch date and time the response was generated by IoT.</p>
    #
    #   @return [Integer]
    #
    ListNamedShadowsForThingOutput = ::Struct.new(
      :results,
      :next_token,
      :timestamp,
      keyword_init: true
    ) do
      include Hearth::Structure
      def initialize(*)
        super
        self.timestamp ||= 0
      end

    end

    # @!attribute next_token
    #   <p>To retrieve the next set of results, the <code>nextToken</code>
    #         value from a previous response; otherwise <b>null</b> to receive
    #         the first set of results.</p>
    #
    #   @return [String]
    #
    # @!attribute max_results
    #   <p>The maximum number of results to return at one time.</p>
    #
    #   @return [Integer]
    #
    ListRetainedMessagesInput = ::Struct.new(
      :next_token,
      :max_results,
      keyword_init: true
    ) do
      include Hearth::Structure
      def initialize(*)
        super
        self.max_results ||= 0
      end

    end

    # @!attribute retained_topics
    #   <p>A summary list the account's retained messages. The information returned doesn't include
    #         the message payloads of the retained messages.</p>
    #
    #   @return [Array<RetainedMessageSummary>]
    #
    # @!attribute next_token
    #   <p>The token for the next set of results, or null if there are no additional results.</p>
    #
    #   @return [String]
    #
    ListRetainedMessagesOutput = ::Struct.new(
      :retained_topics,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The specified combination of HTTP verb and URI is not supported.</p>
    #
    # @!attribute message
    #   <p>The message for the exception.</p>
    #
    #   @return [String]
    #
    MethodNotAllowedException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The input for the Publish operation.</p>
    #
    # @!attribute topic
    #   <p>The name of the MQTT topic.</p>
    #
    #   @return [String]
    #
    # @!attribute qos
    #   <p>The Quality of Service (QoS) level.</p>
    #
    #   @return [Integer]
    #
    # @!attribute retain
    #   <p>A Boolean value that determines whether to set the RETAIN flag when the message is published.</p>
    #            <p>Setting the RETAIN flag causes the message to be retained and sent to new subscribers to the topic.</p>
    #            <p>Valid values: <code>true</code> | <code>false</code>
    #            </p>
    #            <p>Default value: <code>false</code>
    #            </p>
    #
    #   @return [Boolean]
    #
    # @!attribute payload
    #   <p>The message body. MQTT accepts text, binary, and empty (null) message payloads.</p>
    #            <p>Publishing an empty (null) payload with <b>retain</b> =
    #           <code>true</code> deletes the retained message identified by <b>topic</b> from Amazon Web Services IoT Core.</p>
    #
    #   @return [String]
    #
    PublishInput = ::Struct.new(
      :topic,
      :qos,
      :retain,
      :payload,
      keyword_init: true
    ) do
      include Hearth::Structure
      def initialize(*)
        super
        self.qos ||= 0
        self.retain ||= false
      end

    end

    PublishOutput = ::Struct.new(
      nil,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The payload exceeds the maximum size allowed.</p>
    #
    # @!attribute message
    #   <p>The message for the exception.</p>
    #
    #   @return [String]
    #
    RequestEntityTooLargeException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The specified resource does not exist.</p>
    #
    # @!attribute message
    #   <p>The message for the exception.</p>
    #
    #   @return [String]
    #
    ResourceNotFoundException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>Information about a single retained message.</p>
    #
    # @!attribute topic
    #   <p>The topic name to which the retained message was published.</p>
    #
    #   @return [String]
    #
    # @!attribute payload_size
    #   <p>The size of the retained message's payload in bytes.</p>
    #
    #   @return [Integer]
    #
    # @!attribute qos
    #   <p>The quality of service (QoS) level used to publish the retained message.</p>
    #
    #   @return [Integer]
    #
    # @!attribute last_modified_time
    #   <p>The Epoch date and time, in milliseconds, when the retained message was stored by IoT.</p>
    #
    #   @return [Integer]
    #
    RetainedMessageSummary = ::Struct.new(
      :topic,
      :payload_size,
      :qos,
      :last_modified_time,
      keyword_init: true
    ) do
      include Hearth::Structure
      def initialize(*)
        super
        self.payload_size ||= 0
        self.qos ||= 0
        self.last_modified_time ||= 0
      end

    end

    # <p>The service is temporarily unavailable.</p>
    #
    # @!attribute message
    #   <p>The message for the exception.</p>
    #
    #   @return [String]
    #
    ServiceUnavailableException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The rate exceeds the limit.</p>
    #
    # @!attribute message
    #   <p>The message for the exception.</p>
    #
    #   @return [String]
    #
    ThrottlingException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>You are not authorized to perform this operation.</p>
    #
    # @!attribute message
    #   <p>The message for the exception.</p>
    #
    #   @return [String]
    #
    UnauthorizedException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The document encoding is not supported.</p>
    #
    # @!attribute message
    #   <p>The message for the exception.</p>
    #
    #   @return [String]
    #
    UnsupportedDocumentEncodingException = ::Struct.new(
      :message,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The input for the UpdateThingShadow operation.</p>
    #
    # @!attribute thing_name
    #   <p>The name of the thing.</p>
    #
    #   @return [String]
    #
    # @!attribute shadow_name
    #   <p>The name of the shadow.</p>
    #
    #   @return [String]
    #
    # @!attribute payload
    #   <p>The state information, in JSON format.</p>
    #
    #   @return [String]
    #
    UpdateThingShadowInput = ::Struct.new(
      :thing_name,
      :shadow_name,
      :payload,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The output from the UpdateThingShadow operation.</p>
    #
    # @!attribute payload
    #   <p>The state information, in JSON format.</p>
    #
    #   @return [String]
    #
    UpdateThingShadowOutput = ::Struct.new(
      :payload,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

  end
end
