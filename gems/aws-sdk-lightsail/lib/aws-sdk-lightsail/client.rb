# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/awslabs/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

require_relative 'middleware/request_id'

module AWS::SDK::Lightsail
  # An API client for Lightsail_20161128
  # See {#initialize} for a full list of supported configuration options
  # <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes
  #       everything you need to launch your project quickly - instances (virtual private servers),
  #       container services, storage buckets, managed databases, SSD-based block storage, static IP
  #       addresses, load balancers, content delivery network (CDN) distributions, DNS management of
  #       registered domains, and resource snapshots (backups) - for a low, predictable monthly
  #       price.</p>
  #
  #          <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API,
  #       AWS Command Line Interface (AWS CLI), or SDKs. For more information about Lightsail concepts
  #       and tasks, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli">Amazon Lightsail Developer Guide</a>.</p>
  #
  #          <p>This API Reference provides detailed information about the actions, data types,
  #       parameters, and errors of the Lightsail service. For more information about the supported
  #         Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see
  #         <a href="https://docs.aws.amazon.com/general/latest/gr/lightsail.html">Amazon Lightsail Endpoints
  #         and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
  #
  class Client
    include Hearth::ClientStubs

    @middleware = Hearth::MiddlewareBuilder.new

    def self.middleware
      @middleware
    end

    # @param [Config] config
    #   An instance of {Config}
    #
    def initialize(config = AWS::SDK::Lightsail::Config.new, options = {})
      @config = config
      @middleware = Hearth::MiddlewareBuilder.new(options[:middleware])
      @stubs = Hearth::Stubbing::Stubs.new
      @retry_quota = Hearth::Retry::RetryQuota.new
      @client_rate_limiter = Hearth::Retry::ClientRateLimiter.new
    end

    # <p>Allocates a static IP address.</p>
    #
    # @param [Hash] params
    #   See {Types::AllocateStaticIpInput}.
    #
    # @option params [String] :static_ip_name
    #   <p>The name of the static IP address.</p>
    #
    # @return [Types::AllocateStaticIpOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.allocate_static_ip(
    #     static_ip_name: 'staticIpName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AllocateStaticIpOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def allocate_static_ip(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AllocateStaticIpInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AllocateStaticIpInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AllocateStaticIp
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::AllocateStaticIp
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::AllocateStaticIp,
        stubs: @stubs,
        params_class: Params::AllocateStaticIpOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :allocate_static_ip
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Attaches an SSL/TLS certificate to your Amazon Lightsail content delivery network (CDN)
    #       distribution.</p>
    #          <p>After the certificate is attached, your distribution accepts HTTPS traffic for all of the
    #       domains that are associated with the certificate.</p>
    #          <p>Use the <code>CreateCertificate</code> action to create a certificate that you can attach
    #       to your distribution.</p>
    #          <important>
    #             <p>Only certificates created in the <code>us-east-1</code>
    #         Amazon Web Services Region can be attached to Lightsail distributions. Lightsail
    #         distributions are global resources that can reference an origin in any Amazon Web Services
    #         Region, and distribute its content globally. However, all distributions are located in the
    #           <code>us-east-1</code> Region.</p>
    #          </important>
    #
    # @param [Hash] params
    #   See {Types::AttachCertificateToDistributionInput}.
    #
    # @option params [String] :distribution_name
    #   <p>The name of the distribution that the certificate will be attached to.</p>
    #            <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    #         can specify.</p>
    #
    # @option params [String] :certificate_name
    #   <p>The name of the certificate to attach to a distribution.</p>
    #            <p>Only certificates with a status of <code>ISSUED</code> can be attached to a
    #         distribution.</p>
    #            <p>Use the <code>GetCertificates</code> action to get a list of certificate names that you
    #         can specify.</p>
    #            <note>
    #               <p>This is the name of the certificate resource type and is used only to reference the
    #           certificate in other API actions. It can be different than the domain name of the
    #           certificate. For example, your certificate name might be
    #             <code>WordPress-Blog-Certificate</code> and the domain name of the certificate might be
    #             <code>example.com</code>.</p>
    #            </note>
    #
    # @return [Types::AttachCertificateToDistributionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.attach_certificate_to_distribution(
    #     distribution_name: 'distributionName', # required
    #     certificate_name: 'certificateName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AttachCertificateToDistributionOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def attach_certificate_to_distribution(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AttachCertificateToDistributionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AttachCertificateToDistributionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AttachCertificateToDistribution
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::AttachCertificateToDistribution
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::AttachCertificateToDistribution,
        stubs: @stubs,
        params_class: Params::AttachCertificateToDistributionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :attach_certificate_to_distribution
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Attaches a block storage disk to a running or stopped Lightsail instance and exposes it
    #       to the instance with the specified disk name.</p>
    #          <p>The <code>attach disk</code> operation supports tag-based access control via resource tags
    #       applied to the resource identified by <code>disk name</code>. For more information, see the
    #         <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::AttachDiskInput}.
    #
    # @option params [String] :disk_name
    #   <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    #
    # @option params [String] :instance_name
    #   <p>The name of the Lightsail instance where you want to utilize the storage disk.</p>
    #
    # @option params [String] :disk_path
    #   <p>The disk path to expose to the instance (e.g., <code>/dev/xvdf</code>).</p>
    #
    # @return [Types::AttachDiskOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.attach_disk(
    #     disk_name: 'diskName', # required
    #     instance_name: 'instanceName', # required
    #     disk_path: 'diskPath' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AttachDiskOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def attach_disk(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AttachDiskInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AttachDiskInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AttachDisk
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::AttachDisk
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::AttachDisk,
        stubs: @stubs,
        params_class: Params::AttachDiskOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :attach_disk
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Attaches one or more Lightsail instances to a load balancer.</p>
    #          <p>After some time, the instances are attached to the load balancer and the health check
    #       status is available.</p>
    #          <p>The <code>attach instances to load balancer</code> operation supports tag-based access
    #       control via resource tags applied to the resource identified by <code>load balancer
    #         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::AttachInstancesToLoadBalancerInput}.
    #
    # @option params [String] :load_balancer_name
    #   <p>The name of the load balancer.</p>
    #
    # @option params [Array<String>] :instance_names
    #   <p>An array of strings representing the instance name(s) you want to attach to your load
    #         balancer.</p>
    #            <p>An instance must be <code>running</code> before you can attach it to your load
    #         balancer.</p>
    #            <p>There are no additional limits on the number of instances you can attach to your load
    #         balancer, aside from the limit of Lightsail instances you can create in your account
    #         (20).</p>
    #
    # @return [Types::AttachInstancesToLoadBalancerOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.attach_instances_to_load_balancer(
    #     load_balancer_name: 'loadBalancerName', # required
    #     instance_names: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AttachInstancesToLoadBalancerOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def attach_instances_to_load_balancer(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AttachInstancesToLoadBalancerInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AttachInstancesToLoadBalancerInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AttachInstancesToLoadBalancer
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::AttachInstancesToLoadBalancer
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::AttachInstancesToLoadBalancer,
        stubs: @stubs,
        params_class: Params::AttachInstancesToLoadBalancerOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :attach_instances_to_load_balancer
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Attaches a Transport Layer Security (TLS) certificate to your load balancer. TLS is just
    #       an updated, more secure version of Secure Socket Layer (SSL).</p>
    #          <p>Once you create and validate your certificate, you can attach it to your load balancer.
    #       You can also use this API to rotate the certificates on your account. Use the
    #         <code>AttachLoadBalancerTlsCertificate</code> action with the non-attached certificate, and
    #       it will replace the existing one and become the attached certificate.</p>
    #          <p>The <code>AttachLoadBalancerTlsCertificate</code> operation supports tag-based access
    #       control via resource tags applied to the resource identified by <code>load balancer
    #         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::AttachLoadBalancerTlsCertificateInput}.
    #
    # @option params [String] :load_balancer_name
    #   <p>The name of the load balancer to which you want to associate the SSL/TLS
    #         certificate.</p>
    #
    # @option params [String] :certificate_name
    #   <p>The name of your SSL/TLS certificate.</p>
    #
    # @return [Types::AttachLoadBalancerTlsCertificateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.attach_load_balancer_tls_certificate(
    #     load_balancer_name: 'loadBalancerName', # required
    #     certificate_name: 'certificateName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AttachLoadBalancerTlsCertificateOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def attach_load_balancer_tls_certificate(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AttachLoadBalancerTlsCertificateInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AttachLoadBalancerTlsCertificateInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AttachLoadBalancerTlsCertificate
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::AttachLoadBalancerTlsCertificate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::AttachLoadBalancerTlsCertificate,
        stubs: @stubs,
        params_class: Params::AttachLoadBalancerTlsCertificateOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :attach_load_balancer_tls_certificate
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Attaches a static IP address to a specific Amazon Lightsail instance.</p>
    #
    # @param [Hash] params
    #   See {Types::AttachStaticIpInput}.
    #
    # @option params [String] :static_ip_name
    #   <p>The name of the static IP.</p>
    #
    # @option params [String] :instance_name
    #   <p>The instance name to which you want to attach the static IP address.</p>
    #
    # @return [Types::AttachStaticIpOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.attach_static_ip(
    #     static_ip_name: 'staticIpName', # required
    #     instance_name: 'instanceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AttachStaticIpOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def attach_static_ip(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AttachStaticIpInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AttachStaticIpInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AttachStaticIp
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::AttachStaticIp
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::AttachStaticIp,
        stubs: @stubs,
        params_class: Params::AttachStaticIpOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :attach_static_ip
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Closes ports for a specific Amazon Lightsail instance.</p>
    #          <p>The <code>CloseInstancePublicPorts</code> action supports tag-based access control via
    #       resource tags applied to the resource identified by <code>instanceName</code>. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CloseInstancePublicPortsInput}.
    #
    # @option params [PortInfo] :port_info
    #   <p>An object to describe the ports to close for the specified instance.</p>
    #
    # @option params [String] :instance_name
    #   <p>The name of the instance for which to close ports.</p>
    #
    # @return [Types::CloseInstancePublicPortsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.close_instance_public_ports(
    #     port_info: {
    #       from_port: 1,
    #       to_port: 1,
    #       protocol: 'tcp', # accepts ["tcp", "all", "udp", "icmp"]
    #       cidrs: [
    #         'member'
    #       ],
    #     }, # required
    #     instance_name: 'instanceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CloseInstancePublicPortsOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def close_instance_public_ports(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CloseInstancePublicPortsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CloseInstancePublicPortsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CloseInstancePublicPorts
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CloseInstancePublicPorts
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CloseInstancePublicPorts,
        stubs: @stubs,
        params_class: Params::CloseInstancePublicPortsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :close_instance_public_ports
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Copies a manual snapshot of an instance or disk as another manual snapshot, or copies an
    #       automatic snapshot of an instance or disk as a manual snapshot. This operation can also be
    #       used to copy a manual or automatic snapshot of an instance or a disk from one Amazon Web Services Region to another in Amazon Lightsail.</p>
    #          <p>When copying a <i>manual snapshot</i>, be sure to define the <code>source
    #         region</code>, <code>source snapshot name</code>, and <code>target snapshot name</code>
    #       parameters.</p>
    #          <p>When copying an <i>automatic snapshot</i>, be sure to define the
    #         <code>source region</code>, <code>source resource name</code>, <code>target snapshot
    #         name</code>, and either the <code>restore date</code> or the <code>use latest restorable
    #         auto snapshot</code> parameters.</p>
    #
    # @param [Hash] params
    #   See {Types::CopySnapshotInput}.
    #
    # @option params [String] :source_snapshot_name
    #   <p>The name of the source manual snapshot to copy.</p>
    #            <p>Constraint:</p>
    #            <ul>
    #               <li>
    #                  <p>Define this parameter only when copying a manual snapshot as another manual
    #             snapshot.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :source_resource_name
    #   <p>The name of the source instance or disk from which the source automatic snapshot was
    #         created.</p>
    #            <p>Constraint:</p>
    #            <ul>
    #               <li>
    #                  <p>Define this parameter only when copying an automatic snapshot as a manual snapshot.
    #             For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-keeping-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :restore_date
    #   <p>The date of the source automatic snapshot to copy. Use the <code>get auto snapshots</code>
    #         operation to identify the dates of the available automatic snapshots.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Must be specified in <code>YYYY-MM-DD</code> format.</p>
    #               </li>
    #               <li>
    #                  <p>This parameter cannot be defined together with the <code>use latest restorable auto
    #               snapshot</code> parameter. The <code>restore date</code> and <code>use latest restorable
    #               auto snapshot</code> parameters are mutually exclusive.</p>
    #               </li>
    #               <li>
    #                  <p>Define this parameter only when copying an automatic snapshot as a manual snapshot.
    #             For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-keeping-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :use_latest_restorable_auto_snapshot
    #   <p>A Boolean value to indicate whether to use the latest available automatic snapshot of the
    #         specified source instance or disk.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>This parameter cannot be defined together with the <code>restore date</code>
    #             parameter. The <code>use latest restorable auto snapshot</code> and <code>restore
    #               date</code> parameters are mutually exclusive.</p>
    #               </li>
    #               <li>
    #                  <p>Define this parameter only when copying an automatic snapshot as a manual snapshot.
    #             For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-keeping-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :target_snapshot_name
    #   <p>The name of the new manual snapshot to be created as a copy.</p>
    #
    # @option params [String] :source_region
    #   <p>The Amazon Web Services Region where the source manual or automatic snapshot is
    #         located.</p>
    #
    # @return [Types::CopySnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.copy_snapshot(
    #     source_snapshot_name: 'sourceSnapshotName',
    #     source_resource_name: 'sourceResourceName',
    #     restore_date: 'restoreDate',
    #     use_latest_restorable_auto_snapshot: false,
    #     target_snapshot_name: 'targetSnapshotName', # required
    #     source_region: 'us-east-1' # required - accepts ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CopySnapshotOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def copy_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CopySnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CopySnapshotInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CopySnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CopySnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CopySnapshot,
        stubs: @stubs,
        params_class: Params::CopySnapshotOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :copy_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an Amazon Lightsail bucket.</p>
    #
    #          <p>A bucket is a cloud storage resource available in the Lightsail object storage service.
    #       Use buckets to store objects such as data and its descriptive metadata. For more information
    #       about buckets, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/buckets-in-amazon-lightsail">Buckets in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer
    #         Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateBucketInput}.
    #
    # @option params [String] :bucket_name
    #   <p>The name for the bucket.</p>
    #
    #            <p>For more information about bucket names, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/bucket-naming-rules-in-amazon-lightsail">Bucket naming rules in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer
    #           Guide</i>.</p>
    #
    # @option params [String] :bundle_id
    #   <p>The ID of the bundle to use for the bucket.</p>
    #
    #            <p>A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a
    #         bucket.</p>
    #
    #            <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketBundles.html">GetBucketBundles</a> action to get a list of
    #         bundle IDs that you can specify.</p>
    #
    #            <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to change the
    #         bundle after the bucket is created.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the bucket during creation.</p>
    #
    #            <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_TagResource.html">TagResource</a> action to tag the bucket after it's
    #         created.</p>
    #
    # @option params [Boolean] :enable_object_versioning
    #   <p>A Boolean value that indicates whether to enable versioning of objects in the
    #         bucket.</p>
    #
    #            <p>For more information about versioning, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-managing-bucket-object-versioning">Enabling and suspending object versioning in a bucket in Amazon Lightsail</a> in the
    #           <i>Amazon Lightsail Developer Guide</i>.</p>
    #
    # @return [Types::CreateBucketOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_bucket(
    #     bucket_name: 'bucketName', # required
    #     bundle_id: 'bundleId', # required
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ],
    #     enable_object_versioning: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateBucketOutput
    #   resp.data.bucket #=> Types::Bucket
    #   resp.data.bucket.resource_type #=> String
    #   resp.data.bucket.access_rules #=> Types::AccessRules
    #   resp.data.bucket.access_rules.get_object #=> String, one of ["public", "private"]
    #   resp.data.bucket.access_rules.allow_public_overrides #=> Boolean
    #   resp.data.bucket.arn #=> String
    #   resp.data.bucket.bundle_id #=> String
    #   resp.data.bucket.created_at #=> Time
    #   resp.data.bucket.url #=> String
    #   resp.data.bucket.location #=> Types::ResourceLocation
    #   resp.data.bucket.location.availability_zone #=> String
    #   resp.data.bucket.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.bucket.name #=> String
    #   resp.data.bucket.support_code #=> String
    #   resp.data.bucket.tags #=> Array<Tag>
    #   resp.data.bucket.tags[0] #=> Types::Tag
    #   resp.data.bucket.tags[0].key #=> String
    #   resp.data.bucket.tags[0].value #=> String
    #   resp.data.bucket.object_versioning #=> String
    #   resp.data.bucket.able_to_update_bundle #=> Boolean
    #   resp.data.bucket.readonly_access_accounts #=> Array<String>
    #   resp.data.bucket.readonly_access_accounts[0] #=> String
    #   resp.data.bucket.resources_receiving_access #=> Array<ResourceReceivingAccess>
    #   resp.data.bucket.resources_receiving_access[0] #=> Types::ResourceReceivingAccess
    #   resp.data.bucket.resources_receiving_access[0].name #=> String
    #   resp.data.bucket.resources_receiving_access[0].resource_type #=> String
    #   resp.data.bucket.state #=> Types::BucketState
    #   resp.data.bucket.state.code #=> String
    #   resp.data.bucket.state.message #=> String
    #   resp.data.bucket.access_log_config #=> Types::BucketAccessLogConfig
    #   resp.data.bucket.access_log_config.enabled #=> Boolean
    #   resp.data.bucket.access_log_config.destination #=> String
    #   resp.data.bucket.access_log_config.prefix #=> String
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_bucket(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateBucketInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateBucketInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateBucket
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateBucket
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateBucket,
        stubs: @stubs,
        params_class: Params::CreateBucketOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_bucket
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a new access key for the specified Amazon Lightsail bucket. Access keys consist of
    #       an access key ID and corresponding secret access key.</p>
    #
    #          <p>Access keys grant full programmatic access to the specified bucket and its objects. You
    #       can have a maximum of two access keys per bucket. Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketAccessKeys.html">GetBucketAccessKeys</a> action to get a list of current access keys for a specific bucket. For more
    #       information about access keys, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-bucket-access-keys">Creating access keys for a bucket in Amazon Lightsail</a> in the
    #         <i>Amazon Lightsail Developer Guide</i>.</p>
    #
    #          <important>
    #             <p>The <code>secretAccessKey</code> value is returned only in response to the
    #           <code>CreateBucketAccessKey</code> action. You can get a secret access key only when you
    #         first create an access key; you cannot get the secret access key later. If you lose the
    #         secret access key, you must create a new access key.</p>
    #          </important>
    #
    # @param [Hash] params
    #   See {Types::CreateBucketAccessKeyInput}.
    #
    # @option params [String] :bucket_name
    #   <p>The name of the bucket that the new access key will belong to, and grant access to.</p>
    #
    # @return [Types::CreateBucketAccessKeyOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_bucket_access_key(
    #     bucket_name: 'bucketName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateBucketAccessKeyOutput
    #   resp.data.access_key #=> Types::AccessKey
    #   resp.data.access_key.access_key_id #=> String
    #   resp.data.access_key.secret_access_key #=> String
    #   resp.data.access_key.status #=> String, one of ["Active", "Inactive"]
    #   resp.data.access_key.created_at #=> Time
    #   resp.data.access_key.last_used #=> Types::AccessKeyLastUsed
    #   resp.data.access_key.last_used.last_used_date #=> Time
    #   resp.data.access_key.last_used.region #=> String
    #   resp.data.access_key.last_used.service_name #=> String
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_bucket_access_key(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateBucketAccessKeyInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateBucketAccessKeyInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateBucketAccessKey
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateBucketAccessKey
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateBucketAccessKey,
        stubs: @stubs,
        params_class: Params::CreateBucketAccessKeyOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_bucket_access_key
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an SSL/TLS certificate for an Amazon Lightsail content delivery network (CDN)
    #       distribution and a container service.</p>
    #          <p>After the certificate is valid, use the <code>AttachCertificateToDistribution</code>
    #       action to use the certificate and its domains with your distribution. Or use the
    #         <code>UpdateContainerService</code> action to use the certificate and its domains with your
    #       container service.</p>
    #          <important>
    #             <p>Only certificates created in the <code>us-east-1</code>
    #         Amazon Web Services Region can be attached to Lightsail distributions. Lightsail
    #         distributions are global resources that can reference an origin in any Amazon Web Services
    #         Region, and distribute its content globally. However, all distributions are located in the
    #           <code>us-east-1</code> Region.</p>
    #          </important>
    #
    # @param [Hash] params
    #   See {Types::CreateCertificateInput}.
    #
    # @option params [String] :certificate_name
    #   <p>The name for the certificate.</p>
    #
    # @option params [String] :domain_name
    #   <p>The domain name (e.g., <code>example.com</code>) for the certificate.</p>
    #
    # @option params [Array<String>] :subject_alternative_names
    #   <p>An array of strings that specify the alternate domains (e.g., <code>example2.com</code>)
    #         and subdomains (e.g., <code>blog.example.com</code>) for the certificate.</p>
    #            <p>You can specify a maximum of nine alternate domains (in addition to the primary domain
    #         name).</p>
    #            <p>Wildcard domain entries (e.g., <code>*.example.com</code>) are not supported.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the certificate during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #
    # @return [Types::CreateCertificateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_certificate(
    #     certificate_name: 'certificateName', # required
    #     domain_name: 'domainName', # required
    #     subject_alternative_names: [
    #       'member'
    #     ],
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateCertificateOutput
    #   resp.data.certificate #=> Types::CertificateSummary
    #   resp.data.certificate.certificate_arn #=> String
    #   resp.data.certificate.certificate_name #=> String
    #   resp.data.certificate.domain_name #=> String
    #   resp.data.certificate.certificate_detail #=> Types::Certificate
    #   resp.data.certificate.certificate_detail.arn #=> String
    #   resp.data.certificate.certificate_detail.name #=> String
    #   resp.data.certificate.certificate_detail.domain_name #=> String
    #   resp.data.certificate.certificate_detail.status #=> String, one of ["PENDING_VALIDATION", "ISSUED", "INACTIVE", "EXPIRED", "VALIDATION_TIMED_OUT", "REVOKED", "FAILED"]
    #   resp.data.certificate.certificate_detail.serial_number #=> String
    #   resp.data.certificate.certificate_detail.subject_alternative_names #=> Array<String>
    #   resp.data.certificate.certificate_detail.subject_alternative_names[0] #=> String
    #   resp.data.certificate.certificate_detail.domain_validation_records #=> Array<DomainValidationRecord>
    #   resp.data.certificate.certificate_detail.domain_validation_records[0] #=> Types::DomainValidationRecord
    #   resp.data.certificate.certificate_detail.domain_validation_records[0].domain_name #=> String
    #   resp.data.certificate.certificate_detail.domain_validation_records[0].resource_record #=> Types::ResourceRecord
    #   resp.data.certificate.certificate_detail.domain_validation_records[0].resource_record.name #=> String
    #   resp.data.certificate.certificate_detail.domain_validation_records[0].resource_record.type #=> String
    #   resp.data.certificate.certificate_detail.domain_validation_records[0].resource_record.value #=> String
    #   resp.data.certificate.certificate_detail.request_failure_reason #=> String
    #   resp.data.certificate.certificate_detail.in_use_resource_count #=> Integer
    #   resp.data.certificate.certificate_detail.key_algorithm #=> String
    #   resp.data.certificate.certificate_detail.created_at #=> Time
    #   resp.data.certificate.certificate_detail.issued_at #=> Time
    #   resp.data.certificate.certificate_detail.issuer_ca #=> String
    #   resp.data.certificate.certificate_detail.not_before #=> Time
    #   resp.data.certificate.certificate_detail.not_after #=> Time
    #   resp.data.certificate.certificate_detail.eligible_to_renew #=> String
    #   resp.data.certificate.certificate_detail.renewal_summary #=> Types::RenewalSummary
    #   resp.data.certificate.certificate_detail.renewal_summary.domain_validation_records #=> Array<DomainValidationRecord>
    #   resp.data.certificate.certificate_detail.renewal_summary.renewal_status #=> String, one of ["PendingAutoRenewal", "PendingValidation", "Success", "Failed"]
    #   resp.data.certificate.certificate_detail.renewal_summary.renewal_status_reason #=> String
    #   resp.data.certificate.certificate_detail.renewal_summary.updated_at #=> Time
    #   resp.data.certificate.certificate_detail.revoked_at #=> Time
    #   resp.data.certificate.certificate_detail.revocation_reason #=> String
    #   resp.data.certificate.certificate_detail.tags #=> Array<Tag>
    #   resp.data.certificate.certificate_detail.tags[0] #=> Types::Tag
    #   resp.data.certificate.certificate_detail.tags[0].key #=> String
    #   resp.data.certificate.certificate_detail.tags[0].value #=> String
    #   resp.data.certificate.certificate_detail.support_code #=> String
    #   resp.data.certificate.tags #=> Array<Tag>
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_certificate(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateCertificateInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateCertificateInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateCertificate
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateCertificate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateCertificate,
        stubs: @stubs,
        params_class: Params::CreateCertificateOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_certificate
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an AWS CloudFormation stack, which creates a new Amazon EC2 instance from an exported
    #       Amazon Lightsail snapshot. This operation results in a CloudFormation stack record that can be
    #       used to track the AWS CloudFormation stack created. Use the <code>get cloud formation stack
    #         records</code> operation to get a list of the CloudFormation stacks created.</p>
    #          <important>
    #             <p>Wait until after your new Amazon EC2 instance is created before running the <code>create
    #           cloud formation stack</code> operation again with the same export snapshot record.</p>
    #          </important>
    #
    # @param [Hash] params
    #   See {Types::CreateCloudFormationStackInput}.
    #
    # @option params [Array<InstanceEntry>] :instances
    #   <p>An array of parameters that will be used to create the new Amazon EC2 instance. You can only
    #         pass one instance entry at a time in this array. You will get an invalid parameter error if
    #         you pass more than one instance entry in this array.</p>
    #
    # @return [Types::CreateCloudFormationStackOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_cloud_formation_stack(
    #     instances: [
    #       {
    #         source_name: 'sourceName', # required
    #         instance_type: 'instanceType', # required
    #         port_info_source: 'DEFAULT', # required - accepts ["DEFAULT", "INSTANCE", "NONE", "CLOSED"]
    #         user_data: 'userData',
    #         availability_zone: 'availabilityZone' # required
    #       }
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateCloudFormationStackOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_cloud_formation_stack(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateCloudFormationStackInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateCloudFormationStackInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateCloudFormationStack
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateCloudFormationStack
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateCloudFormationStack,
        stubs: @stubs,
        params_class: Params::CreateCloudFormationStackOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_cloud_formation_stack
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an email or SMS text message contact method.</p>
    #          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
    #       You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services
    #       Regions, and SMS text messages cannot be sent to some countries/regions. For more information,
    #       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateContactMethodInput}.
    #
    # @option params [String] :protocol
    #   <p>The protocol of the contact method, such as <code>Email</code> or <code>SMS</code> (text
    #         messaging).</p>
    #            <p>The <code>SMS</code> protocol is supported only in the following Amazon Web Services
    #         Regions.</p>
    #            <ul>
    #               <li>
    #                  <p>US East (N. Virginia) (<code>us-east-1</code>)</p>
    #               </li>
    #               <li>
    #                  <p>US West (Oregon) (<code>us-west-2</code>)</p>
    #               </li>
    #               <li>
    #                  <p>Europe (Ireland) (<code>eu-west-1</code>)</p>
    #               </li>
    #               <li>
    #                  <p>Asia Pacific (Tokyo) (<code>ap-northeast-1</code>)</p>
    #               </li>
    #               <li>
    #                  <p>Asia Pacific (Singapore) (<code>ap-southeast-1</code>)</p>
    #               </li>
    #               <li>
    #                  <p>Asia Pacific (Sydney) (<code>ap-southeast-2</code>)</p>
    #               </li>
    #            </ul>
    #            <p>For a list of countries/regions where SMS text messages can be sent, and the latest
    #           Amazon Web Services Regions where SMS text messaging is supported, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-supported-regions-countries.html">Supported Regions and Countries</a> in the <i>Amazon SNS Developer
    #           Guide</i>.</p>
    #            <p>For more information about notifications in Amazon Lightsail, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
    #
    # @option params [String] :contact_endpoint
    #   <p>The destination of the contact method, such as an email address or a mobile phone
    #         number.</p>
    #            <p>Use the E.164 format when specifying a mobile phone number. E.164 is a standard for the
    #         phone number structure used for international telecommunication. Phone numbers that follow
    #         this format can have a maximum of 15 digits, and they are prefixed with the plus character (+)
    #         and the country code. For example, a U.S. phone number in E.164 format would be specified as
    #         +1XXX5550100. For more information, see <a href="https://en.wikipedia.org/wiki/E.164">E.164</a> on <i>Wikipedia</i>.</p>
    #
    # @return [Types::CreateContactMethodOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_contact_method(
    #     protocol: 'Email', # required - accepts ["Email", "SMS"]
    #     contact_endpoint: 'contactEndpoint' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateContactMethodOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_contact_method(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateContactMethodInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateContactMethodInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateContactMethod
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateContactMethod
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateContactMethod,
        stubs: @stubs,
        params_class: Params::CreateContactMethodOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_contact_method
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an Amazon Lightsail container service.</p>
    #
    #          <p>A Lightsail container service is a compute resource to which you can deploy containers.
    #       For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-services">Container services in Amazon Lightsail</a> in the <i>Lightsail Dev
    #         Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateContainerServiceInput}.
    #
    # @option params [String] :service_name
    #   <p>The name for the container service.</p>
    #
    #            <p>The name that you specify for your container service will make up part of its default
    #         domain. The default domain of a container service is typically
    #           <code>https://<ServiceName>.<RandomGUID>.<AWSRegion>.cs.amazonlightsail.com</code>.
    #         If the name of your container service is <code>container-service-1</code>, and it's located in
    #         the US East (Ohio) AWS region (<code>us-east-2</code>), then the domain for your container
    #         service will be like the following example:
    #           <code>https://container-service-1.ur4EXAMPLE2uq.us-east-2.cs.amazonlightsail.com</code>
    #            </p>
    #
    #            <p>The following are the requirements for container service names:</p>
    #
    #            <ul>
    #               <li>
    #                  <p>Must be unique within each Amazon Web Services Region in your Lightsail
    #             account.</p>
    #               </li>
    #               <li>
    #                  <p>Must contain 1 to 63 characters.</p>
    #               </li>
    #               <li>
    #                  <p>Must contain only alphanumeric characters and hyphens.</p>
    #               </li>
    #               <li>
    #                  <p>A hyphen (-) can separate words but cannot be at the start or end of the name.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :power
    #   <p>The power specification for the container service.</p>
    #
    #            <p>The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the
    #         container service. The <code>power</code> and <code>scale</code> of a container service makes
    #         up its configured capacity. To determine the monthly price of your container service, multiply
    #         the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of
    #         the service.</p>
    #
    #            <p>Use the <code>GetContainerServicePowers</code> action to get a list of power options that
    #         you can specify using this parameter, and their base monthly cost.</p>
    #
    # @option params [Integer] :scale
    #   <p>The scale specification for the container service.</p>
    #
    #            <p>The scale specifies the allocated compute nodes of the container service. The
    #           <code>power</code> and <code>scale</code> of a container service makes up its configured
    #         capacity. To determine the monthly price of your container service, multiply the base price of
    #         the <code>power</code> with the <code>scale</code> (the number of nodes) of the
    #         service.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the container service during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #            <p>For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @option params [Hash<String, Array<String>>] :public_domain_names
    #   <p>The public domain names to use with the container service, such as
    #           <code>example.com</code> and <code>www.example.com</code>.</p>
    #
    #            <p>You can specify up to four public domain names for a container service. The domain names
    #         that you specify are used when you create a deployment with a container configured as the
    #         public endpoint of your container service.</p>
    #
    #            <p>If you don't specify public domain names, then you can use the default domain of the
    #         container service.</p>
    #
    #            <important>
    #               <p>You must create and validate an SSL/TLS certificate before you can use public domain
    #           names with your container service. Use the <code>CreateCertificate</code> action to create a
    #           certificate for the public domain names you want to use with your container service.</p>
    #            </important>
    #
    #            <p>You can specify public domain names using a string to array map as shown in the example
    #         later on this page.</p>
    #
    # @option params [ContainerServiceDeploymentRequest] :deployment
    #   <p>An object that describes a deployment for the container service.</p>
    #
    #            <p>A deployment specifies the containers that will be launched on the container service and
    #         their settings, such as the ports to open, the environment variables to apply, and the launch
    #         command to run. It also specifies the container that will serve as the public endpoint of the
    #         deployment and its settings, such as the HTTP or HTTPS port to use, and the health check
    #         configuration.</p>
    #
    # @option params [PrivateRegistryAccessRequest] :private_registry_access
    #   <p>An object to describe the configuration for the container service to access private
    #         container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private
    #         repositories.</p>
    #
    #            <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    #
    # @return [Types::CreateContainerServiceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_container_service(
    #     service_name: 'serviceName', # required
    #     power: 'nano', # required - accepts ["nano", "micro", "small", "medium", "large", "xlarge"]
    #     scale: 1, # required
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ],
    #     public_domain_names: {
    #       'key' => [
    #         'member'
    #       ]
    #     },
    #     deployment: {
    #       containers: {
    #         'key' => {
    #           image: 'image',
    #           command: [
    #             'member'
    #           ],
    #           environment: {
    #             'key' => 'value'
    #           },
    #           ports: {
    #             'key' => 'HTTP' # accepts ["HTTP", "HTTPS", "TCP", "UDP"]
    #           }
    #         }
    #       },
    #       public_endpoint: {
    #         container_name: 'containerName', # required
    #         container_port: 1, # required
    #         health_check: {
    #           healthy_threshold: 1,
    #           unhealthy_threshold: 1,
    #           timeout_seconds: 1,
    #           interval_seconds: 1,
    #           path: 'path',
    #           success_codes: 'successCodes'
    #         }
    #       }
    #     },
    #     private_registry_access: {
    #       ecr_image_puller_role: {
    #         is_active: false
    #       }
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateContainerServiceOutput
    #   resp.data.container_service #=> Types::ContainerService
    #   resp.data.container_service.container_service_name #=> String
    #   resp.data.container_service.arn #=> String
    #   resp.data.container_service.created_at #=> Time
    #   resp.data.container_service.location #=> Types::ResourceLocation
    #   resp.data.container_service.location.availability_zone #=> String
    #   resp.data.container_service.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.container_service.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.container_service.tags #=> Array<Tag>
    #   resp.data.container_service.tags[0] #=> Types::Tag
    #   resp.data.container_service.tags[0].key #=> String
    #   resp.data.container_service.tags[0].value #=> String
    #   resp.data.container_service.power #=> String, one of ["nano", "micro", "small", "medium", "large", "xlarge"]
    #   resp.data.container_service.power_id #=> String
    #   resp.data.container_service.state #=> String, one of ["PENDING", "READY", "RUNNING", "UPDATING", "DELETING", "DISABLED", "DEPLOYING"]
    #   resp.data.container_service.state_detail #=> Types::ContainerServiceStateDetail
    #   resp.data.container_service.state_detail.code #=> String, one of ["CREATING_SYSTEM_RESOURCES", "CREATING_NETWORK_INFRASTRUCTURE", "PROVISIONING_CERTIFICATE", "PROVISIONING_SERVICE", "CREATING_DEPLOYMENT", "EVALUATING_HEALTH_CHECK", "ACTIVATING_DEPLOYMENT", "CERTIFICATE_LIMIT_EXCEEDED", "UNKNOWN_ERROR"]
    #   resp.data.container_service.state_detail.message #=> String
    #   resp.data.container_service.scale #=> Integer
    #   resp.data.container_service.current_deployment #=> Types::ContainerServiceDeployment
    #   resp.data.container_service.current_deployment.version #=> Integer
    #   resp.data.container_service.current_deployment.state #=> String, one of ["ACTIVATING", "ACTIVE", "INACTIVE", "FAILED"]
    #   resp.data.container_service.current_deployment.containers #=> Hash<String, Container>
    #   resp.data.container_service.current_deployment.containers['key'] #=> Types::Container
    #   resp.data.container_service.current_deployment.containers['key'].image #=> String
    #   resp.data.container_service.current_deployment.containers['key'].command #=> Array<String>
    #   resp.data.container_service.current_deployment.containers['key'].command[0] #=> String
    #   resp.data.container_service.current_deployment.containers['key'].environment #=> Hash<String, String>
    #   resp.data.container_service.current_deployment.containers['key'].environment['key'] #=> String
    #   resp.data.container_service.current_deployment.containers['key'].ports #=> Hash<String, String>
    #   resp.data.container_service.current_deployment.containers['key'].ports['key'] #=> String, one of ["HTTP", "HTTPS", "TCP", "UDP"]
    #   resp.data.container_service.current_deployment.public_endpoint #=> Types::ContainerServiceEndpoint
    #   resp.data.container_service.current_deployment.public_endpoint.container_name #=> String
    #   resp.data.container_service.current_deployment.public_endpoint.container_port #=> Integer
    #   resp.data.container_service.current_deployment.public_endpoint.health_check #=> Types::ContainerServiceHealthCheckConfig
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.healthy_threshold #=> Integer
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.unhealthy_threshold #=> Integer
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.timeout_seconds #=> Integer
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.interval_seconds #=> Integer
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.path #=> String
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.success_codes #=> String
    #   resp.data.container_service.current_deployment.created_at #=> Time
    #   resp.data.container_service.next_deployment #=> Types::ContainerServiceDeployment
    #   resp.data.container_service.is_disabled #=> Boolean
    #   resp.data.container_service.principal_arn #=> String
    #   resp.data.container_service.private_domain_name #=> String
    #   resp.data.container_service.public_domain_names #=> Hash<String, Array<String>>
    #   resp.data.container_service.public_domain_names['key'] #=> Array<String>
    #   resp.data.container_service.public_domain_names['key'][0] #=> String
    #   resp.data.container_service.url #=> String
    #   resp.data.container_service.private_registry_access #=> Types::PrivateRegistryAccess
    #   resp.data.container_service.private_registry_access.ecr_image_puller_role #=> Types::ContainerServiceECRImagePullerRole
    #   resp.data.container_service.private_registry_access.ecr_image_puller_role.is_active #=> Boolean
    #   resp.data.container_service.private_registry_access.ecr_image_puller_role.principal_arn #=> String
    #
    def create_container_service(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateContainerServiceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateContainerServiceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateContainerService
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 201, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateContainerService
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateContainerService,
        stubs: @stubs,
        params_class: Params::CreateContainerServiceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_container_service
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a deployment for your Amazon Lightsail container service.</p>
    #
    #          <p>A deployment specifies the containers that will be launched on the container service and
    #       their settings, such as the ports to open, the environment variables to apply, and the launch
    #       command to run. It also specifies the container that will serve as the public endpoint of the
    #       deployment and its settings, such as the HTTP or HTTPS port to use, and the health check
    #       configuration.</p>
    #
    #          <p>You can deploy containers to your container service using container images from a public
    #       registry such as Amazon ECR Public, or from your local machine. For more information, see
    #         <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-container-images">Creating container images for your Amazon Lightsail container services</a> in the
    #         <i>Amazon Lightsail Developer Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateContainerServiceDeploymentInput}.
    #
    # @option params [String] :service_name
    #   <p>The name of the container service for which to create the deployment.</p>
    #
    # @option params [Hash<String, Container>] :containers
    #   <p>An object that describes the settings of the containers that will be launched on the
    #         container service.</p>
    #
    # @option params [EndpointRequest] :public_endpoint
    #   <p>An object that describes the settings of the public endpoint for the container
    #         service.</p>
    #
    # @return [Types::CreateContainerServiceDeploymentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_container_service_deployment(
    #     service_name: 'serviceName', # required
    #     containers: {
    #       'key' => {
    #         image: 'image',
    #         command: [
    #           'member'
    #         ],
    #         environment: {
    #           'key' => 'value'
    #         },
    #         ports: {
    #           'key' => 'HTTP' # accepts ["HTTP", "HTTPS", "TCP", "UDP"]
    #         }
    #       }
    #     },
    #     public_endpoint: {
    #       container_name: 'containerName', # required
    #       container_port: 1, # required
    #       health_check: {
    #         healthy_threshold: 1,
    #         unhealthy_threshold: 1,
    #         timeout_seconds: 1,
    #         interval_seconds: 1,
    #         path: 'path',
    #         success_codes: 'successCodes'
    #       }
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateContainerServiceDeploymentOutput
    #   resp.data.container_service #=> Types::ContainerService
    #   resp.data.container_service.container_service_name #=> String
    #   resp.data.container_service.arn #=> String
    #   resp.data.container_service.created_at #=> Time
    #   resp.data.container_service.location #=> Types::ResourceLocation
    #   resp.data.container_service.location.availability_zone #=> String
    #   resp.data.container_service.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.container_service.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.container_service.tags #=> Array<Tag>
    #   resp.data.container_service.tags[0] #=> Types::Tag
    #   resp.data.container_service.tags[0].key #=> String
    #   resp.data.container_service.tags[0].value #=> String
    #   resp.data.container_service.power #=> String, one of ["nano", "micro", "small", "medium", "large", "xlarge"]
    #   resp.data.container_service.power_id #=> String
    #   resp.data.container_service.state #=> String, one of ["PENDING", "READY", "RUNNING", "UPDATING", "DELETING", "DISABLED", "DEPLOYING"]
    #   resp.data.container_service.state_detail #=> Types::ContainerServiceStateDetail
    #   resp.data.container_service.state_detail.code #=> String, one of ["CREATING_SYSTEM_RESOURCES", "CREATING_NETWORK_INFRASTRUCTURE", "PROVISIONING_CERTIFICATE", "PROVISIONING_SERVICE", "CREATING_DEPLOYMENT", "EVALUATING_HEALTH_CHECK", "ACTIVATING_DEPLOYMENT", "CERTIFICATE_LIMIT_EXCEEDED", "UNKNOWN_ERROR"]
    #   resp.data.container_service.state_detail.message #=> String
    #   resp.data.container_service.scale #=> Integer
    #   resp.data.container_service.current_deployment #=> Types::ContainerServiceDeployment
    #   resp.data.container_service.current_deployment.version #=> Integer
    #   resp.data.container_service.current_deployment.state #=> String, one of ["ACTIVATING", "ACTIVE", "INACTIVE", "FAILED"]
    #   resp.data.container_service.current_deployment.containers #=> Hash<String, Container>
    #   resp.data.container_service.current_deployment.containers['key'] #=> Types::Container
    #   resp.data.container_service.current_deployment.containers['key'].image #=> String
    #   resp.data.container_service.current_deployment.containers['key'].command #=> Array<String>
    #   resp.data.container_service.current_deployment.containers['key'].command[0] #=> String
    #   resp.data.container_service.current_deployment.containers['key'].environment #=> Hash<String, String>
    #   resp.data.container_service.current_deployment.containers['key'].environment['key'] #=> String
    #   resp.data.container_service.current_deployment.containers['key'].ports #=> Hash<String, String>
    #   resp.data.container_service.current_deployment.containers['key'].ports['key'] #=> String, one of ["HTTP", "HTTPS", "TCP", "UDP"]
    #   resp.data.container_service.current_deployment.public_endpoint #=> Types::ContainerServiceEndpoint
    #   resp.data.container_service.current_deployment.public_endpoint.container_name #=> String
    #   resp.data.container_service.current_deployment.public_endpoint.container_port #=> Integer
    #   resp.data.container_service.current_deployment.public_endpoint.health_check #=> Types::ContainerServiceHealthCheckConfig
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.healthy_threshold #=> Integer
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.unhealthy_threshold #=> Integer
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.timeout_seconds #=> Integer
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.interval_seconds #=> Integer
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.path #=> String
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.success_codes #=> String
    #   resp.data.container_service.current_deployment.created_at #=> Time
    #   resp.data.container_service.next_deployment #=> Types::ContainerServiceDeployment
    #   resp.data.container_service.is_disabled #=> Boolean
    #   resp.data.container_service.principal_arn #=> String
    #   resp.data.container_service.private_domain_name #=> String
    #   resp.data.container_service.public_domain_names #=> Hash<String, Array<String>>
    #   resp.data.container_service.public_domain_names['key'] #=> Array<String>
    #   resp.data.container_service.public_domain_names['key'][0] #=> String
    #   resp.data.container_service.url #=> String
    #   resp.data.container_service.private_registry_access #=> Types::PrivateRegistryAccess
    #   resp.data.container_service.private_registry_access.ecr_image_puller_role #=> Types::ContainerServiceECRImagePullerRole
    #   resp.data.container_service.private_registry_access.ecr_image_puller_role.is_active #=> Boolean
    #   resp.data.container_service.private_registry_access.ecr_image_puller_role.principal_arn #=> String
    #
    def create_container_service_deployment(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateContainerServiceDeploymentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateContainerServiceDeploymentInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateContainerServiceDeployment
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 201, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateContainerServiceDeployment
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateContainerServiceDeployment,
        stubs: @stubs,
        params_class: Params::CreateContainerServiceDeploymentOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_container_service_deployment
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a temporary set of log in credentials that you can use to log in to the Docker
    #       process on your local machine. After you're logged in, you can use the native Docker commands
    #       to push your local container images to the container image registry of your Amazon Lightsail
    #       account so that you can use them with your Lightsail container service. The log in
    #       credentials expire 12 hours after they are created, at which point you will need to create a
    #       new set of log in credentials.</p>
    #
    #          <note>
    #             <p>You can only push container images to the container service registry of your Lightsail
    #         account. You cannot pull container images or perform any other container image management
    #         actions on the container service registry.</p>
    #          </note>
    #
    #          <p>After you push your container images to the container image registry of your Lightsail
    #       account, use the <code>RegisterContainerImage</code> action to register the pushed images to a
    #       specific Lightsail container service.</p>
    #
    #          <note>
    #             <p>This action is not required if you install and use the Lightsail Control
    #         (lightsailctl) plugin to push container images to your Lightsail container service. For
    #         more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-pushing-container-images">Pushing and managing container images on your Amazon Lightsail container services</a>
    #         in the <i>Amazon Lightsail Developer Guide</i>.</p>
    #          </note>
    #
    # @param [Hash] params
    #   See {Types::CreateContainerServiceRegistryLoginInput}.
    #
    # @return [Types::CreateContainerServiceRegistryLoginOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_container_service_registry_login()
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateContainerServiceRegistryLoginOutput
    #   resp.data.registry_login #=> Types::ContainerServiceRegistryLogin
    #   resp.data.registry_login.username #=> String
    #   resp.data.registry_login.password #=> String
    #   resp.data.registry_login.expires_at #=> Time
    #   resp.data.registry_login.registry #=> String
    #
    def create_container_service_registry_login(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateContainerServiceRegistryLoginInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateContainerServiceRegistryLoginInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateContainerServiceRegistryLogin
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateContainerServiceRegistryLogin
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateContainerServiceRegistryLogin,
        stubs: @stubs,
        params_class: Params::CreateContainerServiceRegistryLoginOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_container_service_registry_login
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a block storage disk that can be attached to an Amazon Lightsail instance in the
    #       same Availability Zone (e.g., <code>us-east-2a</code>).</p>
    #          <p>The <code>create disk</code> operation supports tag-based access control via request tags.
    #       For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateDiskInput}.
    #
    # @option params [String] :disk_name
    #   <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    #
    # @option params [String] :availability_zone
    #   <p>The Availability Zone where you want to create the disk (e.g., <code>us-east-2a</code>).
    #         Use the same Availability Zone as the Lightsail instance to which you want to attach the
    #         disk.</p>
    #            <p>Use the <code>get regions</code> operation to list the Availability Zones where
    #         Lightsail is currently available.</p>
    #
    # @option params [Integer] :size_in_gb
    #   <p>The size of the disk in GB (e.g., <code>32</code>).</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the resource during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #
    # @option params [Array<AddOnRequest>] :add_ons
    #   <p>An array of objects that represent the add-ons to enable for the new disk.</p>
    #
    # @return [Types::CreateDiskOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_disk(
    #     disk_name: 'diskName', # required
    #     availability_zone: 'availabilityZone', # required
    #     size_in_gb: 1, # required
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ],
    #     add_ons: [
    #       {
    #         add_on_type: 'AutoSnapshot', # required - accepts ["AutoSnapshot"]
    #         auto_snapshot_add_on_request: {
    #           snapshot_time_of_day: 'snapshotTimeOfDay'
    #         }
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateDiskOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_disk(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateDiskInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateDiskInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateDisk
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateDisk
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateDisk,
        stubs: @stubs,
        params_class: Params::CreateDiskOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_disk
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a block storage disk from a manual or automatic snapshot of a disk. The resulting
    #       disk can be attached to an Amazon Lightsail instance in the same Availability Zone (e.g.,
    #         <code>us-east-2a</code>).</p>
    #          <p>The <code>create disk from snapshot</code> operation supports tag-based access control via
    #       request tags and resource tags applied to the resource identified by <code>disk snapshot
    #         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateDiskFromSnapshotInput}.
    #
    # @option params [String] :disk_name
    #   <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    #
    # @option params [String] :disk_snapshot_name
    #   <p>The name of the disk snapshot (e.g., <code>my-snapshot</code>) from which to create the
    #         new storage disk.</p>
    #            <p>Constraint:</p>
    #            <ul>
    #               <li>
    #                  <p>This parameter cannot be defined together with the <code>source disk name</code>
    #             parameter. The <code>disk snapshot name</code> and <code>source disk name</code>
    #             parameters are mutually exclusive.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :availability_zone
    #   <p>The Availability Zone where you want to create the disk (e.g., <code>us-east-2a</code>).
    #         Choose the same Availability Zone as the Lightsail instance where you want to create the
    #         disk.</p>
    #            <p>Use the GetRegions operation to list the Availability Zones where Lightsail is currently
    #         available.</p>
    #
    # @option params [Integer] :size_in_gb
    #   <p>The size of the disk in GB (e.g., <code>32</code>).</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the resource during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #
    # @option params [Array<AddOnRequest>] :add_ons
    #   <p>An array of objects that represent the add-ons to enable for the new disk.</p>
    #
    # @option params [String] :source_disk_name
    #   <p>The name of the source disk from which the source automatic snapshot was created.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>This parameter cannot be defined together with the <code>disk snapshot name</code>
    #             parameter. The <code>source disk name</code> and <code>disk snapshot name</code>
    #             parameters are mutually exclusive.</p>
    #               </li>
    #               <li>
    #                  <p>Define this parameter only when creating a new disk from an automatic snapshot. For
    #             more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :restore_date
    #   <p>The date of the automatic snapshot to use for the new disk. Use the <code>get auto
    #           snapshots</code> operation to identify the dates of the available automatic
    #         snapshots.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Must be specified in <code>YYYY-MM-DD</code> format.</p>
    #               </li>
    #               <li>
    #                  <p>This parameter cannot be defined together with the <code>use latest restorable auto
    #               snapshot</code> parameter. The <code>restore date</code> and <code>use latest restorable
    #               auto snapshot</code> parameters are mutually exclusive.</p>
    #               </li>
    #               <li>
    #                  <p>Define this parameter only when creating a new disk from an automatic snapshot. For
    #             more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :use_latest_restorable_auto_snapshot
    #   <p>A Boolean value to indicate whether to use the latest available automatic snapshot.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>This parameter cannot be defined together with the <code>restore date</code>
    #             parameter. The <code>use latest restorable auto snapshot</code> and <code>restore
    #               date</code> parameters are mutually exclusive.</p>
    #               </li>
    #               <li>
    #                  <p>Define this parameter only when creating a new disk from an automatic snapshot. For
    #             more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::CreateDiskFromSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_disk_from_snapshot(
    #     disk_name: 'diskName', # required
    #     disk_snapshot_name: 'diskSnapshotName',
    #     availability_zone: 'availabilityZone', # required
    #     size_in_gb: 1, # required
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ],
    #     add_ons: [
    #       {
    #         add_on_type: 'AutoSnapshot', # required - accepts ["AutoSnapshot"]
    #         auto_snapshot_add_on_request: {
    #           snapshot_time_of_day: 'snapshotTimeOfDay'
    #         }
    #       }
    #     ],
    #     source_disk_name: 'sourceDiskName',
    #     restore_date: 'restoreDate',
    #     use_latest_restorable_auto_snapshot: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateDiskFromSnapshotOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_disk_from_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateDiskFromSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateDiskFromSnapshotInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateDiskFromSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateDiskFromSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateDiskFromSnapshot,
        stubs: @stubs,
        params_class: Params::CreateDiskFromSnapshotOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_disk_from_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a snapshot of a block storage disk. You can use snapshots for backups, to make
    #       copies of disks, and to save data before shutting down a Lightsail instance.</p>
    #          <p>You can take a snapshot of an attached disk that is in use; however, snapshots only
    #       capture data that has been written to your disk at the time the snapshot command is issued.
    #       This may exclude any data that has been cached by any applications or the operating system. If
    #       you can pause any file systems on the disk long enough to take a snapshot, your snapshot
    #       should be complete. Nevertheless, if you cannot pause all file writes to the disk, you should
    #       unmount the disk from within the Lightsail instance, issue the create disk snapshot command,
    #       and then remount the disk to ensure a consistent and complete snapshot. You may remount and
    #       use your disk while the snapshot status is pending.</p>
    #          <p>You can also use this operation to create a snapshot of an instance's system volume. You
    #       might want to do this, for example, to recover data from the system volume of a botched
    #       instance or to create a backup of the system volume like you would for a block storage disk.
    #       To create a snapshot of a system volume, just define the <code>instance name</code> parameter
    #       when issuing the snapshot command, and a snapshot of the defined instance's system volume will
    #       be created. After the snapshot is available, you can create a block storage disk from the
    #       snapshot and attach it to a running instance to access the data on the disk.</p>
    #
    #          <p>The <code>create disk snapshot</code> operation supports tag-based access control via
    #       request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateDiskSnapshotInput}.
    #
    # @option params [String] :disk_name
    #   <p>The unique name of the source disk (e.g., <code>Disk-Virginia-1</code>).</p>
    #            <note>
    #               <p>This parameter cannot be defined together with the <code>instance name</code> parameter.
    #           The <code>disk name</code> and <code>instance name</code> parameters are mutually
    #           exclusive.</p>
    #            </note>
    #
    # @option params [String] :disk_snapshot_name
    #   <p>The name of the destination disk snapshot (e.g., <code>my-disk-snapshot</code>) based on
    #         the source disk.</p>
    #
    # @option params [String] :instance_name
    #   <p>The unique name of the source instance (e.g., <code>Amazon_Linux-512MB-Virginia-1</code>).
    #         When this is defined, a snapshot of the instance's system volume is created.</p>
    #            <note>
    #               <p>This parameter cannot be defined together with the <code>disk name</code> parameter. The
    #             <code>instance name</code> and <code>disk name</code> parameters are mutually
    #           exclusive.</p>
    #            </note>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the resource during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #
    # @return [Types::CreateDiskSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_disk_snapshot(
    #     disk_name: 'diskName',
    #     disk_snapshot_name: 'diskSnapshotName', # required
    #     instance_name: 'instanceName',
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateDiskSnapshotOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_disk_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateDiskSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateDiskSnapshotInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateDiskSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateDiskSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateDiskSnapshot,
        stubs: @stubs,
        params_class: Params::CreateDiskSnapshotOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_disk_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an Amazon Lightsail content delivery network (CDN) distribution.</p>
    #          <p>A distribution is a globally distributed network of caching servers that improve the
    #       performance of your website or web application hosted on a Lightsail instance. For more
    #       information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-content-delivery-network-distributions">Content delivery networks in Amazon Lightsail</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateDistributionInput}.
    #
    # @option params [String] :distribution_name
    #   <p>The name for the distribution.</p>
    #
    # @option params [InputOrigin] :origin
    #   <p>An object that describes the origin resource for the distribution, such as a Lightsail
    #         instance, bucket, or load balancer.</p>
    #            <p>The distribution pulls, caches, and serves content from the origin.</p>
    #
    # @option params [CacheBehavior] :default_cache_behavior
    #   <p>An object that describes the default cache behavior for the distribution.</p>
    #
    # @option params [CacheSettings] :cache_behavior_settings
    #   <p>An object that describes the cache behavior settings for the distribution.</p>
    #
    # @option params [Array<CacheBehaviorPerPath>] :cache_behaviors
    #   <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    #
    # @option params [String] :bundle_id
    #   <p>The bundle ID to use for the distribution.</p>
    #            <p>A distribution bundle describes the specifications of your distribution, such as the
    #         monthly cost and monthly network transfer quota.</p>
    #            <p>Use the <code>GetDistributionBundles</code> action to get a list of distribution bundle
    #         IDs that you can specify.</p>
    #
    # @option params [String] :ip_address_type
    #   <p>The IP address type for the distribution.</p>
    #
    #            <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
    #         IPv4 and IPv6.</p>
    #
    #            <p>The default value is <code>dualstack</code>.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the distribution during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #
    # @return [Types::CreateDistributionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_distribution(
    #     distribution_name: 'distributionName', # required
    #     origin: {
    #       name: 'name',
    #       region_name: 'us-east-1', # accepts ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #       protocol_policy: 'http-only' # accepts ["http-only", "https-only"]
    #     }, # required
    #     default_cache_behavior: {
    #       behavior: 'dont-cache' # accepts ["dont-cache", "cache"]
    #     }, # required
    #     cache_behavior_settings: {
    #       default_ttl: 1,
    #       minimum_ttl: 1,
    #       maximum_ttl: 1,
    #       allowed_http_methods: 'allowedHTTPMethods',
    #       cached_http_methods: 'cachedHTTPMethods',
    #       forwarded_cookies: {
    #         option: 'none', # accepts ["none", "allow-list", "all"]
    #         cookies_allow_list: [
    #           'member'
    #         ]
    #       },
    #       forwarded_headers: {
    #         option: 'none', # accepts ["none", "allow-list", "all"]
    #         headers_allow_list: [
    #           'Accept' # accepts ["Accept", "Accept-Charset", "Accept-Datetime", "Accept-Encoding", "Accept-Language", "Authorization", "CloudFront-Forwarded-Proto", "CloudFront-Is-Desktop-Viewer", "CloudFront-Is-Mobile-Viewer", "CloudFront-Is-SmartTV-Viewer", "CloudFront-Is-Tablet-Viewer", "CloudFront-Viewer-Country", "Host", "Origin", "Referer"]
    #         ]
    #       },
    #       forwarded_query_strings: {
    #         option: false,
    #       }
    #     },
    #     cache_behaviors: [
    #       {
    #         path: 'path',
    #         behavior: 'dont-cache' # accepts ["dont-cache", "cache"]
    #       }
    #     ],
    #     bundle_id: 'bundleId', # required
    #     ip_address_type: 'dualstack', # accepts ["dualstack", "ipv4"]
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateDistributionOutput
    #   resp.data.distribution #=> Types::LightsailDistribution
    #   resp.data.distribution.name #=> String
    #   resp.data.distribution.arn #=> String
    #   resp.data.distribution.support_code #=> String
    #   resp.data.distribution.created_at #=> Time
    #   resp.data.distribution.location #=> Types::ResourceLocation
    #   resp.data.distribution.location.availability_zone #=> String
    #   resp.data.distribution.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.distribution.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.distribution.alternative_domain_names #=> Array<String>
    #   resp.data.distribution.alternative_domain_names[0] #=> String
    #   resp.data.distribution.status #=> String
    #   resp.data.distribution.is_enabled #=> Boolean
    #   resp.data.distribution.domain_name #=> String
    #   resp.data.distribution.bundle_id #=> String
    #   resp.data.distribution.certificate_name #=> String
    #   resp.data.distribution.origin #=> Types::Origin
    #   resp.data.distribution.origin.name #=> String
    #   resp.data.distribution.origin.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.distribution.origin.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.distribution.origin.protocol_policy #=> String, one of ["http-only", "https-only"]
    #   resp.data.distribution.origin_public_dns #=> String
    #   resp.data.distribution.default_cache_behavior #=> Types::CacheBehavior
    #   resp.data.distribution.default_cache_behavior.behavior #=> String, one of ["dont-cache", "cache"]
    #   resp.data.distribution.cache_behavior_settings #=> Types::CacheSettings
    #   resp.data.distribution.cache_behavior_settings.default_ttl #=> Integer
    #   resp.data.distribution.cache_behavior_settings.minimum_ttl #=> Integer
    #   resp.data.distribution.cache_behavior_settings.maximum_ttl #=> Integer
    #   resp.data.distribution.cache_behavior_settings.allowed_http_methods #=> String
    #   resp.data.distribution.cache_behavior_settings.cached_http_methods #=> String
    #   resp.data.distribution.cache_behavior_settings.forwarded_cookies #=> Types::CookieObject
    #   resp.data.distribution.cache_behavior_settings.forwarded_cookies.option #=> String, one of ["none", "allow-list", "all"]
    #   resp.data.distribution.cache_behavior_settings.forwarded_cookies.cookies_allow_list #=> Array<String>
    #   resp.data.distribution.cache_behavior_settings.forwarded_headers #=> Types::HeaderObject
    #   resp.data.distribution.cache_behavior_settings.forwarded_headers.option #=> String, one of ["none", "allow-list", "all"]
    #   resp.data.distribution.cache_behavior_settings.forwarded_headers.headers_allow_list #=> Array<String>
    #   resp.data.distribution.cache_behavior_settings.forwarded_headers.headers_allow_list[0] #=> String, one of ["Accept", "Accept-Charset", "Accept-Datetime", "Accept-Encoding", "Accept-Language", "Authorization", "CloudFront-Forwarded-Proto", "CloudFront-Is-Desktop-Viewer", "CloudFront-Is-Mobile-Viewer", "CloudFront-Is-SmartTV-Viewer", "CloudFront-Is-Tablet-Viewer", "CloudFront-Viewer-Country", "Host", "Origin", "Referer"]
    #   resp.data.distribution.cache_behavior_settings.forwarded_query_strings #=> Types::QueryStringObject
    #   resp.data.distribution.cache_behavior_settings.forwarded_query_strings.option #=> Boolean
    #   resp.data.distribution.cache_behavior_settings.forwarded_query_strings.query_strings_allow_list #=> Array<String>
    #   resp.data.distribution.cache_behaviors #=> Array<CacheBehaviorPerPath>
    #   resp.data.distribution.cache_behaviors[0] #=> Types::CacheBehaviorPerPath
    #   resp.data.distribution.cache_behaviors[0].path #=> String
    #   resp.data.distribution.cache_behaviors[0].behavior #=> String, one of ["dont-cache", "cache"]
    #   resp.data.distribution.able_to_update_bundle #=> Boolean
    #   resp.data.distribution.ip_address_type #=> String, one of ["dualstack", "ipv4"]
    #   resp.data.distribution.tags #=> Array<Tag>
    #   resp.data.distribution.tags[0] #=> Types::Tag
    #   resp.data.distribution.tags[0].key #=> String
    #   resp.data.distribution.tags[0].value #=> String
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def create_distribution(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateDistributionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateDistributionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateDistribution
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateDistribution
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateDistribution,
        stubs: @stubs,
        params_class: Params::CreateDistributionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_distribution
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a domain resource for the specified domain (e.g., example.com).</p>
    #          <p>The <code>create domain</code> operation supports tag-based access control via request
    #       tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateDomainInput}.
    #
    # @option params [String] :domain_name
    #   <p>The domain name to manage (e.g., <code>example.com</code>).</p>
    #            <note>
    #               <p>You cannot register a new domain name using Lightsail. You must register a domain name
    #           using Amazon Route 53 or another domain name registrar. If you have already registered your
    #           domain, you can enter its name in this parameter to manage the DNS records for that domain
    #           using Lightsail.</p>
    #            </note>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the resource during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #
    # @return [Types::CreateDomainOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_domain(
    #     domain_name: 'domainName', # required
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateDomainOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def create_domain(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateDomainInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateDomainInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateDomain
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateDomain
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateDomain,
        stubs: @stubs,
        params_class: Params::CreateDomainOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_domain
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates one of the following domain name system (DNS) records in a domain DNS zone:
    #       Address (A), canonical name (CNAME), mail exchanger (MX), name server (NS), start of authority
    #       (SOA), service locator (SRV), or text (TXT).</p>
    #
    #
    #
    #          <p>The <code>create domain entry</code> operation supports tag-based access control via
    #       resource tags applied to the resource identified by <code>domain name</code>. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateDomainEntryInput}.
    #
    # @option params [String] :domain_name
    #   <p>The domain name (e.g., <code>example.com</code>) for which you want to create the domain
    #         entry.</p>
    #
    # @option params [DomainEntry] :domain_entry
    #   <p>An array of key-value pairs containing information about the domain entry request.</p>
    #
    # @return [Types::CreateDomainEntryOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_domain_entry(
    #     domain_name: 'domainName', # required
    #     domain_entry: {
    #       id: 'id',
    #       name: 'name',
    #       target: 'target',
    #       is_alias: false,
    #       type: 'type',
    #       options: {
    #         'key' => 'value'
    #       }
    #     } # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateDomainEntryOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def create_domain_entry(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateDomainEntryInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateDomainEntryInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateDomainEntry
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateDomainEntry
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateDomainEntry,
        stubs: @stubs,
        params_class: Params::CreateDomainEntryOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_domain_entry
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a snapshot of a specific virtual private server, or <i>instance</i>.
    #       You can use a snapshot to create a new instance that is based on that snapshot.</p>
    #          <p>The <code>create instance snapshot</code> operation supports tag-based access control via
    #       request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateInstanceSnapshotInput}.
    #
    # @option params [String] :instance_snapshot_name
    #   <p>The name for your new snapshot.</p>
    #
    # @option params [String] :instance_name
    #   <p>The Lightsail instance on which to base your snapshot.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the resource during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #
    # @return [Types::CreateInstanceSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_instance_snapshot(
    #     instance_snapshot_name: 'instanceSnapshotName', # required
    #     instance_name: 'instanceName', # required
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateInstanceSnapshotOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_instance_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateInstanceSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateInstanceSnapshotInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateInstanceSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateInstanceSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateInstanceSnapshot,
        stubs: @stubs,
        params_class: Params::CreateInstanceSnapshotOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_instance_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates one or more Amazon Lightsail instances.</p>
    #          <p>The <code>create instances</code> operation supports tag-based access control via request
    #       tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateInstancesInput}.
    #
    # @option params [Array<String>] :instance_names
    #   <p>The names to use for your new Lightsail instances. Separate multiple values using
    #         quotation marks and commas, for example:
    #         <code>["MyFirstInstance","MySecondInstance"]</code>
    #            </p>
    #
    # @option params [String] :availability_zone
    #   <p>The Availability Zone in which to create your instance. Use the following format:
    #           <code>us-east-2a</code> (case sensitive). You can get a list of Availability Zones by using
    #         the <a href="http://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRegions.html">get
    #           regions</a> operation. Be sure to add the <code>include Availability Zones</code>
    #         parameter to your request.</p>
    #
    # @option params [String] :custom_image_name
    #   <p>(Deprecated) The name for your custom image.</p>
    #            <note>
    #               <p>In releases prior to June 12, 2017, this parameter was ignored by the API. It is now
    #           deprecated.</p>
    #            </note>
    #
    # @option params [String] :blueprint_id
    #   <p>The ID for a virtual private server image (e.g., <code>app_wordpress_4_4</code> or
    #           <code>app_lamp_7_0</code>). Use the <code>get blueprints</code> operation to return a list
    #         of available images (or <i>blueprints</i>).</p>
    #            <note>
    #               <p>Use active blueprints when creating new instances. Inactive blueprints are listed to
    #           support customers with existing instances and are not necessarily available to create new
    #           instances. Blueprints are marked inactive when they become outdated due to operating system
    #           updates or new application releases.</p>
    #            </note>
    #
    # @option params [String] :bundle_id
    #   <p>The bundle of specification information for your virtual private server (or
    #           <i>instance</i>), including the pricing plan (e.g.,
    #         <code>micro_1_0</code>).</p>
    #
    # @option params [String] :user_data
    #   <p>A launch script you can create that configures a server with additional user data. For
    #         example, you might want to run <code>apt-get -y update</code>.</p>
    #            <note>
    #               <p>Depending on the machine image you choose, the command to get software on your instance
    #           varies. Amazon Linux and CentOS use <code>yum</code>, Debian and Ubuntu use
    #             <code>apt-get</code>, and FreeBSD uses <code>pkg</code>. For a complete list, see the
    #             <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/compare-options-choose-lightsail-instance-image">Amazon Lightsail Developer Guide</a>.</p>
    #            </note>
    #
    # @option params [String] :key_pair_name
    #   <p>The name of your key pair.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the resource during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #
    # @option params [Array<AddOnRequest>] :add_ons
    #   <p>An array of objects representing the add-ons to enable for the new instance.</p>
    #
    # @option params [String] :ip_address_type
    #   <p>The IP address type for the instance.</p>
    #
    #            <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
    #         IPv4 and IPv6.</p>
    #
    #            <p>The default value is <code>dualstack</code>.</p>
    #
    # @return [Types::CreateInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_instances(
    #     instance_names: [
    #       'member'
    #     ], # required
    #     availability_zone: 'availabilityZone', # required
    #     custom_image_name: 'customImageName',
    #     blueprint_id: 'blueprintId', # required
    #     bundle_id: 'bundleId', # required
    #     user_data: 'userData',
    #     key_pair_name: 'keyPairName',
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ],
    #     add_ons: [
    #       {
    #         add_on_type: 'AutoSnapshot', # required - accepts ["AutoSnapshot"]
    #         auto_snapshot_add_on_request: {
    #           snapshot_time_of_day: 'snapshotTimeOfDay'
    #         }
    #       }
    #     ],
    #     ip_address_type: 'dualstack' # accepts ["dualstack", "ipv4"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateInstancesOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateInstancesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateInstances,
        stubs: @stubs,
        params_class: Params::CreateInstancesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates one or more new instances from a manual or automatic snapshot of an
    #       instance.</p>
    #          <p>The <code>create instances from snapshot</code> operation supports tag-based access
    #       control via request tags and resource tags applied to the resource identified by
    #         <code>instance snapshot name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateInstancesFromSnapshotInput}.
    #
    # @option params [Array<String>] :instance_names
    #   <p>The names for your new instances.</p>
    #
    # @option params [Hash<String, Array<DiskMap>>] :attached_disk_mapping
    #   <p>An object containing information about one or more disk mappings.</p>
    #
    # @option params [String] :availability_zone
    #   <p>The Availability Zone where you want to create your instances. Use the following
    #         formatting: <code>us-east-2a</code> (case sensitive). You can get a list of Availability Zones
    #         by using the <a href="http://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRegions.html">get
    #           regions</a> operation. Be sure to add the <code>include Availability Zones</code>
    #         parameter to your request.</p>
    #
    # @option params [String] :instance_snapshot_name
    #   <p>The name of the instance snapshot on which you are basing your new instances. Use the get
    #         instance snapshots operation to return information about your existing snapshots.</p>
    #            <p>Constraint:</p>
    #            <ul>
    #               <li>
    #                  <p>This parameter cannot be defined together with the <code>source instance name</code>
    #             parameter. The <code>instance snapshot name</code> and <code>source instance name</code>
    #             parameters are mutually exclusive.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :bundle_id
    #   <p>The bundle of specification information for your virtual private server (or
    #           <i>instance</i>), including the pricing plan (e.g.,
    #         <code>micro_1_0</code>).</p>
    #
    # @option params [String] :user_data
    #   <p>You can create a launch script that configures a server with additional user data. For
    #         example, <code>apt-get -y update</code>.</p>
    #            <note>
    #               <p>Depending on the machine image you choose, the command to get software on your instance
    #           varies. Amazon Linux and CentOS use <code>yum</code>, Debian and Ubuntu use
    #             <code>apt-get</code>, and FreeBSD uses <code>pkg</code>. For a complete list, see the
    #             <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/compare-options-choose-lightsail-instance-image">Amazon Lightsail Developer Guide</a>.</p>
    #            </note>
    #
    # @option params [String] :key_pair_name
    #   <p>The name for your key pair.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the resource during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #
    # @option params [Array<AddOnRequest>] :add_ons
    #   <p>An array of objects representing the add-ons to enable for the new instance.</p>
    #
    # @option params [String] :ip_address_type
    #   <p>The IP address type for the instance.</p>
    #
    #            <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
    #         IPv4 and IPv6.</p>
    #
    #            <p>The default value is <code>dualstack</code>.</p>
    #
    # @option params [String] :source_instance_name
    #   <p>The name of the source instance from which the source automatic snapshot was
    #         created.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>This parameter cannot be defined together with the <code>instance snapshot name</code>
    #             parameter. The <code>source instance name</code> and <code>instance snapshot name</code>
    #             parameters are mutually exclusive.</p>
    #               </li>
    #               <li>
    #                  <p>Define this parameter only when creating a new instance from an automatic snapshot.
    #             For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :restore_date
    #   <p>The date of the automatic snapshot to use for the new instance. Use the <code>get auto
    #           snapshots</code> operation to identify the dates of the available automatic
    #         snapshots.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Must be specified in <code>YYYY-MM-DD</code> format.</p>
    #               </li>
    #               <li>
    #                  <p>This parameter cannot be defined together with the <code>use latest restorable auto
    #               snapshot</code> parameter. The <code>restore date</code> and <code>use latest restorable
    #               auto snapshot</code> parameters are mutually exclusive.</p>
    #               </li>
    #               <li>
    #                  <p>Define this parameter only when creating a new instance from an automatic snapshot.
    #             For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :use_latest_restorable_auto_snapshot
    #   <p>A Boolean value to indicate whether to use the latest available automatic snapshot.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>This parameter cannot be defined together with the <code>restore date</code>
    #             parameter. The <code>use latest restorable auto snapshot</code> and <code>restore
    #               date</code> parameters are mutually exclusive.</p>
    #               </li>
    #               <li>
    #                  <p>Define this parameter only when creating a new instance from an automatic snapshot.
    #             For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::CreateInstancesFromSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_instances_from_snapshot(
    #     instance_names: [
    #       'member'
    #     ], # required
    #     attached_disk_mapping: {
    #       'key' => [
    #         {
    #           original_disk_path: 'originalDiskPath',
    #           new_disk_name: 'newDiskName'
    #         }
    #       ]
    #     },
    #     availability_zone: 'availabilityZone', # required
    #     instance_snapshot_name: 'instanceSnapshotName',
    #     bundle_id: 'bundleId', # required
    #     user_data: 'userData',
    #     key_pair_name: 'keyPairName',
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ],
    #     add_ons: [
    #       {
    #         add_on_type: 'AutoSnapshot', # required - accepts ["AutoSnapshot"]
    #         auto_snapshot_add_on_request: {
    #           snapshot_time_of_day: 'snapshotTimeOfDay'
    #         }
    #       }
    #     ],
    #     ip_address_type: 'dualstack', # accepts ["dualstack", "ipv4"]
    #     source_instance_name: 'sourceInstanceName',
    #     restore_date: 'restoreDate',
    #     use_latest_restorable_auto_snapshot: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateInstancesFromSnapshotOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_instances_from_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateInstancesFromSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateInstancesFromSnapshotInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateInstancesFromSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateInstancesFromSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateInstancesFromSnapshot,
        stubs: @stubs,
        params_class: Params::CreateInstancesFromSnapshotOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_instances_from_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a custom SSH key pair that you can use with an Amazon Lightsail
    #       instance.</p>
    #          <note>
    #             <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_DownloadDefaultKeyPair.html">DownloadDefaultKeyPair</a> action to create a Lightsail default key
    #         pair in an Amazon Web Services Region where a default key pair does not currently
    #         exist.</p>
    #          </note>
    #          <p>The <code>create key pair</code> operation supports tag-based access control via request
    #       tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateKeyPairInput}.
    #
    # @option params [String] :key_pair_name
    #   <p>The name for your new key pair.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the resource during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #
    # @return [Types::CreateKeyPairOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_key_pair(
    #     key_pair_name: 'keyPairName', # required
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateKeyPairOutput
    #   resp.data.key_pair #=> Types::KeyPair
    #   resp.data.key_pair.name #=> String
    #   resp.data.key_pair.arn #=> String
    #   resp.data.key_pair.support_code #=> String
    #   resp.data.key_pair.created_at #=> Time
    #   resp.data.key_pair.location #=> Types::ResourceLocation
    #   resp.data.key_pair.location.availability_zone #=> String
    #   resp.data.key_pair.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.key_pair.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.key_pair.tags #=> Array<Tag>
    #   resp.data.key_pair.tags[0] #=> Types::Tag
    #   resp.data.key_pair.tags[0].key #=> String
    #   resp.data.key_pair.tags[0].value #=> String
    #   resp.data.key_pair.fingerprint #=> String
    #   resp.data.public_key_base64 #=> String
    #   resp.data.private_key_base64 #=> String
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def create_key_pair(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateKeyPairInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateKeyPairInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateKeyPair
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateKeyPair
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateKeyPair,
        stubs: @stubs,
        params_class: Params::CreateKeyPairOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_key_pair
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a Lightsail load balancer. To learn more about deciding whether to load balance
    #       your application, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/configure-lightsail-instances-for-load-balancing">Configure your Lightsail instances for load balancing</a>. You can create up to 5
    #       load balancers per AWS Region in your account.</p>
    #          <p>When you create a load balancer, you can specify a unique name and port settings. To
    #       change additional load balancer settings, use the <code>UpdateLoadBalancerAttribute</code>
    #       operation.</p>
    #          <p>The <code>create load balancer</code> operation supports tag-based access control via
    #       request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateLoadBalancerInput}.
    #
    # @option params [String] :load_balancer_name
    #   <p>The name of your load balancer.</p>
    #
    # @option params [Integer] :instance_port
    #   <p>The instance port where you're creating your load balancer.</p>
    #
    # @option params [String] :health_check_path
    #   <p>The path you provided to perform the load balancer health check. If you didn't specify a
    #         health check path, Lightsail uses the root path of your website (e.g.,
    #         <code>"/"</code>).</p>
    #            <p>You may want to specify a custom health check path other than the root of your application
    #         if your home page loads slowly or has a lot of media or scripting on it.</p>
    #
    # @option params [String] :certificate_name
    #   <p>The name of the SSL/TLS certificate.</p>
    #            <p>If you specify <code>certificateName</code>, then <code>certificateDomainName</code> is
    #         required (and vice-versa).</p>
    #
    # @option params [String] :certificate_domain_name
    #   <p>The domain name with which your certificate is associated (e.g.,
    #         <code>example.com</code>).</p>
    #            <p>If you specify <code>certificateDomainName</code>, then <code>certificateName</code> is
    #         required (and vice-versa).</p>
    #
    # @option params [Array<String>] :certificate_alternative_names
    #   <p>The optional alternative domains and subdomains to use with your SSL/TLS certificate
    #         (e.g., <code>www.example.com</code>, <code>example.com</code>, <code>m.example.com</code>,
    #           <code>blog.example.com</code>).</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the resource during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #
    # @option params [String] :ip_address_type
    #   <p>The IP address type for the load balancer.</p>
    #
    #            <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
    #         IPv4 and IPv6.</p>
    #
    #            <p>The default value is <code>dualstack</code>.</p>
    #
    # @option params [String] :tls_policy_name
    #   <p>The name of the TLS policy to apply to the load balancer.</p>
    #
    #            <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetLoadBalancerTlsPolicies.html">GetLoadBalancerTlsPolicies</a> action to get a list of TLS policy names that you can
    #         specify.</p>
    #
    #            <p>For more information about load balancer TLS policies, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy">Configuring TLS security policies on your Amazon Lightsail load
    #           balancers</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    #
    # @return [Types::CreateLoadBalancerOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_load_balancer(
    #     load_balancer_name: 'loadBalancerName', # required
    #     instance_port: 1, # required
    #     health_check_path: 'healthCheckPath',
    #     certificate_name: 'certificateName',
    #     certificate_domain_name: 'certificateDomainName',
    #     certificate_alternative_names: [
    #       'member'
    #     ],
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ],
    #     ip_address_type: 'dualstack', # accepts ["dualstack", "ipv4"]
    #     tls_policy_name: 'tlsPolicyName'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateLoadBalancerOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_load_balancer(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateLoadBalancerInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateLoadBalancerInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateLoadBalancer
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateLoadBalancer
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateLoadBalancer,
        stubs: @stubs,
        params_class: Params::CreateLoadBalancerOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_load_balancer
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an SSL/TLS certificate for an Amazon Lightsail load balancer.</p>
    #          <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p>
    #          <p>The <code>CreateLoadBalancerTlsCertificate</code> operation supports tag-based access
    #       control via resource tags applied to the resource identified by <code>load balancer
    #         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateLoadBalancerTlsCertificateInput}.
    #
    # @option params [String] :load_balancer_name
    #   <p>The load balancer name where you want to create the SSL/TLS certificate.</p>
    #
    # @option params [String] :certificate_name
    #   <p>The SSL/TLS certificate name.</p>
    #            <p>You can have up to 10 certificates in your account at one time. Each Lightsail load
    #         balancer can have up to 2 certificates associated with it at one time. There is also an
    #         overall limit to the number of certificates that can be issue in a 365-day period. For more
    #         information, see <a href="http://docs.aws.amazon.com/acm/latest/userguide/acm-limits.html">Limits</a>.</p>
    #
    # @option params [String] :certificate_domain_name
    #   <p>The domain name (e.g., <code>example.com</code>) for your SSL/TLS certificate.</p>
    #
    # @option params [Array<String>] :certificate_alternative_names
    #   <p>An array of strings listing alternative domains and subdomains for your SSL/TLS
    #         certificate. Lightsail will de-dupe the names for you. You can have a maximum of 9
    #         alternative names (in addition to the 1 primary domain). We do not support wildcards (e.g.,
    #           <code>*.example.com</code>).</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the resource during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #
    # @return [Types::CreateLoadBalancerTlsCertificateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_load_balancer_tls_certificate(
    #     load_balancer_name: 'loadBalancerName', # required
    #     certificate_name: 'certificateName', # required
    #     certificate_domain_name: 'certificateDomainName', # required
    #     certificate_alternative_names: [
    #       'member'
    #     ],
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateLoadBalancerTlsCertificateOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_load_balancer_tls_certificate(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateLoadBalancerTlsCertificateInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateLoadBalancerTlsCertificateInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateLoadBalancerTlsCertificate
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateLoadBalancerTlsCertificate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateLoadBalancerTlsCertificate,
        stubs: @stubs,
        params_class: Params::CreateLoadBalancerTlsCertificateOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_load_balancer_tls_certificate
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a new database in Amazon Lightsail.</p>
    #          <p>The <code>create relational database</code> operation supports tag-based access control
    #       via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateRelationalDatabaseInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name to use for your new Lightsail database resource.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p>
    #               </li>
    #               <li>
    #                  <p>The first and last character must be a letter or number.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :availability_zone
    #   <p>The Availability Zone in which to create your new database. Use the
    #           <code>us-east-2a</code> case-sensitive format.</p>
    #            <p>You can get a list of Availability Zones by using the <code>get regions</code> operation.
    #         Be sure to add the <code>include relational database Availability Zones</code> parameter to
    #         your request.</p>
    #
    # @option params [String] :relational_database_blueprint_id
    #   <p>The blueprint ID for your new database. A blueprint describes the major engine version of
    #         a database.</p>
    #            <p>You can get a list of database blueprints IDs by using the <code>get relational database
    #           blueprints</code> operation.</p>
    #
    # @option params [String] :relational_database_bundle_id
    #   <p>The bundle ID for your new database. A bundle describes the performance specifications for
    #         your database.</p>
    #            <p>You can get a list of database bundle IDs by using the <code>get relational database
    #           bundles</code> operation.</p>
    #
    # @option params [String] :master_database_name
    #   <p>The meaning of this parameter differs according to the database engine you use.</p>
    #            <p>
    #               <b>MySQL</b>
    #            </p>
    #            <p>The name of the database to create when the Lightsail database resource is created. If
    #         this parameter isn't specified, no database is created in the database resource.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Must contain 1 to 64 letters or numbers.</p>
    #               </li>
    #               <li>
    #                  <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits
    #             (0- 9).</p>
    #               </li>
    #               <li>
    #                  <p>Can't be a word reserved by the specified database engine.</p>
    #                  <p>For more information about reserved words in MySQL, see the Keywords and Reserved
    #             Words articles for <a href="https://dev.mysql.com/doc/refman/5.6/en/keywords.html">MySQL 5.6</a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/keywords.html">MySQL 5.7</a>, and <a href="https://dev.mysql.com/doc/refman/8.0/en/keywords.html">MySQL 8.0</a>.</p>
    #               </li>
    #            </ul>
    #            <p>
    #               <b>PostgreSQL</b>
    #            </p>
    #            <p>The name of the database to create when the Lightsail database resource is created. If
    #         this parameter isn't specified, a database named <code>postgres</code> is created in the
    #         database resource.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Must contain 1 to 63 letters or numbers.</p>
    #               </li>
    #               <li>
    #                  <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits
    #             (0- 9).</p>
    #               </li>
    #               <li>
    #                  <p>Can't be a word reserved by the specified database engine.</p>
    #                  <p>For more information about reserved words in PostgreSQL, see the SQL Key Words
    #             articles for <a href="https://www.postgresql.org/docs/9.6/sql-keywords-appendix.html">PostgreSQL 9.6</a>, <a href="https://www.postgresql.org/docs/10/sql-keywords-appendix.html">PostgreSQL
    #               10</a>, <a href="https://www.postgresql.org/docs/11/sql-keywords-appendix.html">PostgreSQL 11</a>, and <a href="https://www.postgresql.org/docs/12/sql-keywords-appendix.html">PostgreSQL
    #               12</a>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :master_username
    #   <p>The name for the master user.</p>
    #            <p>
    #               <b>MySQL</b>
    #            </p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Required for MySQL.</p>
    #               </li>
    #               <li>
    #                  <p>Must be 1 to 16 letters or numbers. Can contain underscores.</p>
    #               </li>
    #               <li>
    #                  <p>First character must be a letter.</p>
    #               </li>
    #               <li>
    #                  <p>Can't be a reserved word for the chosen database engine.</p>
    #                  <p>For more information about reserved words in MySQL 5.6 or 5.7, see the Keywords and
    #             Reserved Words articles for <a href="https://dev.mysql.com/doc/refman/5.6/en/keywords.html">MySQL 5.6</a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/keywords.html">MySQL 5.7</a>, or <a href="https://dev.mysql.com/doc/refman/8.0/en/keywords.html">MySQL 8.0</a>.</p>
    #               </li>
    #            </ul>
    #            <p>
    #               <b>PostgreSQL</b>
    #            </p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Required for PostgreSQL.</p>
    #               </li>
    #               <li>
    #                  <p>Must be 1 to 63 letters or numbers. Can contain underscores.</p>
    #               </li>
    #               <li>
    #                  <p>First character must be a letter.</p>
    #               </li>
    #               <li>
    #                  <p>Can't be a reserved word for the chosen database engine.</p>
    #                  <p>For more information about reserved words in MySQL 5.6 or 5.7, see the Keywords and
    #             Reserved Words articles for <a href="https://www.postgresql.org/docs/9.6/sql-keywords-appendix.html">PostgreSQL
    #               9.6</a>, <a href="https://www.postgresql.org/docs/10/sql-keywords-appendix.html">PostgreSQL 10</a>, <a href="https://www.postgresql.org/docs/11/sql-keywords-appendix.html">PostgreSQL
    #               11</a>, and <a href="https://www.postgresql.org/docs/12/sql-keywords-appendix.html">PostgreSQL
    #               12</a>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :master_user_password
    #   <p>The password for the master user. The password can include any printable ASCII character
    #         except "/", """, or "@". It cannot contain spaces.</p>
    #            <p>
    #               <b>MySQL</b>
    #            </p>
    #            <p>Constraints: Must contain from 8 to 41 characters.</p>
    #            <p>
    #               <b>PostgreSQL</b>
    #            </p>
    #            <p>Constraints: Must contain from 8 to 128 characters.</p>
    #
    # @option params [String] :preferred_backup_window
    #   <p>The daily time range during which automated backups are created for your new database if
    #         automated backups are enabled.</p>
    #            <p>The default is a 30-minute window selected at random from an 8-hour block of time for each
    #         AWS Region. For more information about the preferred backup window time blocks for each
    #         region, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Working With Backups</a> guide in the Amazon Relational Database Service (Amazon RDS) documentation.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Must be in the <code>hh24:mi-hh24:mi</code> format.</p>
    #                  <p>Example: <code>16:00-16:30</code>
    #                  </p>
    #               </li>
    #               <li>
    #                  <p>Specified in Coordinated Universal Time (UTC).</p>
    #               </li>
    #               <li>
    #                  <p>Must not conflict with the preferred maintenance window.</p>
    #               </li>
    #               <li>
    #                  <p>Must be at least 30 minutes.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :preferred_maintenance_window
    #   <p>The weekly time range during which system maintenance can occur on your new
    #         database.</p>
    #            <p>The default is a 30-minute window selected at random from an 8-hour block of time for each
    #         AWS Region, occurring on a random day of the week.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.</p>
    #               </li>
    #               <li>
    #                  <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    #               </li>
    #               <li>
    #                  <p>Must be at least 30 minutes.</p>
    #               </li>
    #               <li>
    #                  <p>Specified in Coordinated Universal Time (UTC).</p>
    #               </li>
    #               <li>
    #                  <p>Example: <code>Tue:17:00-Tue:17:30</code>
    #                  </p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :publicly_accessible
    #   <p>Specifies the accessibility options for your new database. A value of <code>true</code>
    #         specifies a database that is available to resources outside of your Lightsail account. A
    #         value of <code>false</code> specifies a database that is available only to your Lightsail
    #         resources in the same region as your database.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the resource during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #
    # @return [Types::CreateRelationalDatabaseOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_relational_database(
    #     relational_database_name: 'relationalDatabaseName', # required
    #     availability_zone: 'availabilityZone',
    #     relational_database_blueprint_id: 'relationalDatabaseBlueprintId', # required
    #     relational_database_bundle_id: 'relationalDatabaseBundleId', # required
    #     master_database_name: 'masterDatabaseName', # required
    #     master_username: 'masterUsername', # required
    #     master_user_password: 'masterUserPassword',
    #     preferred_backup_window: 'preferredBackupWindow',
    #     preferred_maintenance_window: 'preferredMaintenanceWindow',
    #     publicly_accessible: false,
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateRelationalDatabaseOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_relational_database(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateRelationalDatabaseInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateRelationalDatabaseInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateRelationalDatabase
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateRelationalDatabase
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateRelationalDatabase,
        stubs: @stubs,
        params_class: Params::CreateRelationalDatabaseOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_relational_database
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a new database from an existing database snapshot in Amazon Lightsail.</p>
    #          <p>You can create a new database from a snapshot in if something goes wrong with your
    #       original database, or to change it to a different plan, such as a high availability or
    #       standard plan.</p>
    #          <p>The <code>create relational database from snapshot</code> operation supports tag-based
    #       access control via request tags and resource tags applied to the resource identified by
    #       relationalDatabaseSnapshotName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateRelationalDatabaseFromSnapshotInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name to use for your new Lightsail database resource.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p>
    #               </li>
    #               <li>
    #                  <p>The first and last character must be a letter or number.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :availability_zone
    #   <p>The Availability Zone in which to create your new database. Use the
    #           <code>us-east-2a</code> case-sensitive format.</p>
    #            <p>You can get a list of Availability Zones by using the <code>get regions</code> operation.
    #         Be sure to add the <code>include relational database Availability Zones</code> parameter to
    #         your request.</p>
    #
    # @option params [Boolean] :publicly_accessible
    #   <p>Specifies the accessibility options for your new database. A value of <code>true</code>
    #         specifies a database that is available to resources outside of your Lightsail account. A
    #         value of <code>false</code> specifies a database that is available only to your Lightsail
    #         resources in the same region as your database.</p>
    #
    # @option params [String] :relational_database_snapshot_name
    #   <p>The name of the database snapshot from which to create your new database.</p>
    #
    # @option params [String] :relational_database_bundle_id
    #   <p>The bundle ID for your new database. A bundle describes the performance specifications for
    #         your database.</p>
    #            <p>You can get a list of database bundle IDs by using the <code>get relational database
    #           bundles</code> operation.</p>
    #            <p>When creating a new database from a snapshot, you cannot choose a bundle that is smaller
    #         than the bundle of the source database.</p>
    #
    # @option params [String] :source_relational_database_name
    #   <p>The name of the source database.</p>
    #
    # @option params [Time] :restore_time
    #   <p>The date and time to restore your database from.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Must be before the latest restorable time for the database.</p>
    #               </li>
    #               <li>
    #                  <p>Cannot be specified if the <code>use latest restorable time</code> parameter is
    #               <code>true</code>.</p>
    #               </li>
    #               <li>
    #                  <p>Specified in Coordinated Universal Time (UTC).</p>
    #               </li>
    #               <li>
    #                  <p>Specified in the Unix time format.</p>
    #                  <p>For example, if you wish to use a restore time of October 1, 2018, at 8 PM UTC, then
    #             you input <code>1538424000</code> as the restore time.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :use_latest_restorable_time
    #   <p>Specifies whether your database is restored from the latest backup time. A value of
    #           <code>true</code> restores from the latest backup time. </p>
    #            <p>Default: <code>false</code>
    #            </p>
    #            <p>Constraints: Cannot be specified if the <code>restore time</code> parameter is
    #         provided.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the resource during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #
    # @return [Types::CreateRelationalDatabaseFromSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_relational_database_from_snapshot(
    #     relational_database_name: 'relationalDatabaseName', # required
    #     availability_zone: 'availabilityZone',
    #     publicly_accessible: false,
    #     relational_database_snapshot_name: 'relationalDatabaseSnapshotName',
    #     relational_database_bundle_id: 'relationalDatabaseBundleId',
    #     source_relational_database_name: 'sourceRelationalDatabaseName',
    #     restore_time: Time.now,
    #     use_latest_restorable_time: false,
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateRelationalDatabaseFromSnapshotOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_relational_database_from_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateRelationalDatabaseFromSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateRelationalDatabaseFromSnapshotInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateRelationalDatabaseFromSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateRelationalDatabaseFromSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateRelationalDatabaseFromSnapshot,
        stubs: @stubs,
        params_class: Params::CreateRelationalDatabaseFromSnapshotOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_relational_database_from_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a snapshot of your database in Amazon Lightsail. You can use snapshots for backups,
    #       to make copies of a database, and to save data before deleting a database.</p>
    #          <p>The <code>create relational database snapshot</code> operation supports tag-based access
    #       control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateRelationalDatabaseSnapshotInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name of the database on which to base your new snapshot.</p>
    #
    # @option params [String] :relational_database_snapshot_name
    #   <p>The name for your new database snapshot.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p>
    #               </li>
    #               <li>
    #                  <p>The first and last character must be a letter or number.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag keys and optional values to add to the resource during create.</p>
    #            <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #
    # @return [Types::CreateRelationalDatabaseSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_relational_database_snapshot(
    #     relational_database_name: 'relationalDatabaseName', # required
    #     relational_database_snapshot_name: 'relationalDatabaseSnapshotName', # required
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateRelationalDatabaseSnapshotOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def create_relational_database_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateRelationalDatabaseSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateRelationalDatabaseSnapshotInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateRelationalDatabaseSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::CreateRelationalDatabaseSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateRelationalDatabaseSnapshot,
        stubs: @stubs,
        params_class: Params::CreateRelationalDatabaseSnapshotOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_relational_database_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an alarm.</p>
    #          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
    #       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
    #       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
    #         in Amazon Lightsail</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteAlarmInput}.
    #
    # @option params [String] :alarm_name
    #   <p>The name of the alarm to delete.</p>
    #
    # @return [Types::DeleteAlarmOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_alarm(
    #     alarm_name: 'alarmName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteAlarmOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def delete_alarm(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteAlarmInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteAlarmInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteAlarm
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteAlarm
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteAlarm,
        stubs: @stubs,
        params_class: Params::DeleteAlarmOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_alarm
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an automatic snapshot of an instance or disk. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteAutoSnapshotInput}.
    #
    # @option params [String] :resource_name
    #   <p>The name of the source instance or disk from which to delete the automatic
    #         snapshot.</p>
    #
    # @option params [String] :date
    #   <p>The date of the automatic snapshot to delete in <code>YYYY-MM-DD</code> format. Use the
    #           <code>get auto snapshots</code> operation to get the available automatic snapshots for a
    #         resource.</p>
    #
    # @return [Types::DeleteAutoSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_auto_snapshot(
    #     resource_name: 'resourceName', # required
    #     date: 'date' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteAutoSnapshotOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def delete_auto_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteAutoSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteAutoSnapshotInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteAutoSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteAutoSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteAutoSnapshot,
        stubs: @stubs,
        params_class: Params::DeleteAutoSnapshotOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_auto_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a Amazon Lightsail bucket.</p>
    #
    #          <note>
    #             <p>When you delete your bucket, the bucket name is released and can be reused for a new
    #         bucket in your account or another Amazon Web Services account.</p>
    #          </note>
    #
    # @param [Hash] params
    #   See {Types::DeleteBucketInput}.
    #
    # @option params [String] :bucket_name
    #   <p>The name of the bucket to delete.</p>
    #
    #            <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBuckets.html">GetBuckets</a> action to get a list of bucket names
    #         that you can specify.</p>
    #
    # @option params [Boolean] :force_delete
    #   <p>A Boolean value that indicates whether to force delete the bucket.</p>
    #
    #            <p>You must force delete the bucket if it has one of the following conditions:</p>
    #            <ul>
    #               <li>
    #                  <p>The bucket is the origin of a distribution.</p>
    #               </li>
    #               <li>
    #                  <p>The bucket has instances that were granted access to it using the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_SetResourceAccessForBucket.html">SetResourceAccessForBucket</a> action.</p>
    #               </li>
    #               <li>
    #                  <p>The bucket has objects.</p>
    #               </li>
    #               <li>
    #                  <p>The bucket has access keys.</p>
    #               </li>
    #            </ul>
    #
    #            <important>
    #               <p>Force deleting a bucket might impact other resources that rely on the bucket, such as
    #           instances, distributions, or software that use the issued access keys.</p>
    #            </important>
    #
    # @return [Types::DeleteBucketOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_bucket(
    #     bucket_name: 'bucketName', # required
    #     force_delete: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteBucketOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def delete_bucket(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteBucketInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteBucketInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteBucket
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteBucket
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteBucket,
        stubs: @stubs,
        params_class: Params::DeleteBucketOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_bucket
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an access key for the specified Amazon Lightsail bucket.</p>
    #
    #          <p>We recommend that you delete an access key if the secret access key is compromised.</p>
    #
    #          <p>For more information about access keys, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-bucket-access-keys">Creating access keys for a bucket in Amazon Lightsail</a> in the
    #         <i>Amazon Lightsail Developer Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteBucketAccessKeyInput}.
    #
    # @option params [String] :bucket_name
    #   <p>The name of the bucket that the access key belongs to.</p>
    #
    # @option params [String] :access_key_id
    #   <p>The ID of the access key to delete.</p>
    #
    #            <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketAccessKeys.html">GetBucketAccessKeys</a> action to get a
    #         list of access key IDs that you can specify.</p>
    #
    # @return [Types::DeleteBucketAccessKeyOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_bucket_access_key(
    #     bucket_name: 'bucketName', # required
    #     access_key_id: 'accessKeyId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteBucketAccessKeyOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def delete_bucket_access_key(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteBucketAccessKeyInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteBucketAccessKeyInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteBucketAccessKey
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteBucketAccessKey
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteBucketAccessKey,
        stubs: @stubs,
        params_class: Params::DeleteBucketAccessKeyOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_bucket_access_key
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an SSL/TLS certificate for your Amazon Lightsail content delivery network (CDN)
    #       distribution.</p>
    #          <p>Certificates that are currently attached to a distribution cannot be deleted. Use the
    #         <code>DetachCertificateFromDistribution</code> action to detach a certificate from a
    #       distribution.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteCertificateInput}.
    #
    # @option params [String] :certificate_name
    #   <p>The name of the certificate to delete.</p>
    #            <p>Use the <code>GetCertificates</code> action to get a list of certificate names that you
    #         can specify.</p>
    #
    # @return [Types::DeleteCertificateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_certificate(
    #     certificate_name: 'certificateName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteCertificateOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def delete_certificate(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteCertificateInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteCertificateInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteCertificate
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteCertificate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteCertificate,
        stubs: @stubs,
        params_class: Params::DeleteCertificateOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_certificate
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a contact method.</p>
    #          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
    #       You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services
    #       Regions, and SMS text messages cannot be sent to some countries/regions. For more information,
    #       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteContactMethodInput}.
    #
    # @option params [String] :protocol
    #   <p>The protocol that will be deleted, such as <code>Email</code> or <code>SMS</code> (text
    #         messaging).</p>
    #            <note>
    #               <p>To delete an <code>Email</code> and an <code>SMS</code> contact method if you added
    #           both, you must run separate <code>DeleteContactMethod</code> actions to delete each
    #           protocol.</p>
    #            </note>
    #
    # @return [Types::DeleteContactMethodOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_contact_method(
    #     protocol: 'Email' # required - accepts ["Email", "SMS"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteContactMethodOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def delete_contact_method(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteContactMethodInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteContactMethodInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteContactMethod
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteContactMethod
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteContactMethod,
        stubs: @stubs,
        params_class: Params::DeleteContactMethodOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_contact_method
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a container image that is registered to your Amazon Lightsail container
    #       service.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteContainerImageInput}.
    #
    # @option params [String] :service_name
    #   <p>The name of the container service for which to delete a registered container image.</p>
    #
    # @option params [String] :image
    #   <p>The name of the container image to delete from the container service.</p>
    #
    #            <p>Use the <code>GetContainerImages</code> action to get the name of the container images
    #         that are registered to a container service.</p>
    #
    #            <note>
    #               <p>Container images sourced from your Lightsail container service, that are registered
    #           and stored on your service, start with a colon (<code>:</code>). For example,
    #             <code>:container-service-1.mystaticwebsite.1</code>. Container images sourced from a
    #           public registry like Docker Hub don't start with a colon. For example,
    #             <code>nginx:latest</code> or <code>nginx</code>.</p>
    #            </note>
    #
    # @return [Types::DeleteContainerImageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_container_image(
    #     service_name: 'serviceName', # required
    #     image: 'image' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteContainerImageOutput
    #
    def delete_container_image(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteContainerImageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteContainerImageInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteContainerImage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 204, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteContainerImage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteContainerImage,
        stubs: @stubs,
        params_class: Params::DeleteContainerImageOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_container_image
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes your Amazon Lightsail container service.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteContainerServiceInput}.
    #
    # @option params [String] :service_name
    #   <p>The name of the container service to delete.</p>
    #
    # @return [Types::DeleteContainerServiceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_container_service(
    #     service_name: 'serviceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteContainerServiceOutput
    #
    def delete_container_service(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteContainerServiceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteContainerServiceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteContainerService
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 204, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteContainerService
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteContainerService,
        stubs: @stubs,
        params_class: Params::DeleteContainerServiceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_container_service
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified block storage disk. The disk must be in the <code>available</code>
    #       state (not attached to a Lightsail instance).</p>
    #          <note>
    #             <p>The disk may remain in the <code>deleting</code> state for several minutes.</p>
    #          </note>
    #          <p>The <code>delete disk</code> operation supports tag-based access control via resource tags
    #       applied to the resource identified by <code>disk name</code>. For more information, see the
    #         <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteDiskInput}.
    #
    # @option params [String] :disk_name
    #   <p>The unique name of the disk you want to delete (e.g., <code>my-disk</code>).</p>
    #
    # @option params [Boolean] :force_delete_add_ons
    #   <p>A Boolean value to indicate whether to delete the enabled add-ons for the disk.</p>
    #
    # @return [Types::DeleteDiskOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_disk(
    #     disk_name: 'diskName', # required
    #     force_delete_add_ons: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteDiskOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def delete_disk(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteDiskInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteDiskInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteDisk
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteDisk
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteDisk,
        stubs: @stubs,
        params_class: Params::DeleteDiskOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_disk
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified disk snapshot.</p>
    #          <p>When you make periodic snapshots of a disk, the snapshots are incremental, and only the
    #       blocks on the device that have changed since your last snapshot are saved in the new snapshot.
    #       When you delete a snapshot, only the data not needed for any other snapshot is removed. So
    #       regardless of which prior snapshots have been deleted, all active snapshots will have access
    #       to all the information needed to restore the disk.</p>
    #          <p>The <code>delete disk snapshot</code> operation supports tag-based access control via
    #       resource tags applied to the resource identified by <code>disk snapshot name</code>. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteDiskSnapshotInput}.
    #
    # @option params [String] :disk_snapshot_name
    #   <p>The name of the disk snapshot you want to delete (e.g.,
    #         <code>my-disk-snapshot</code>).</p>
    #
    # @return [Types::DeleteDiskSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_disk_snapshot(
    #     disk_snapshot_name: 'diskSnapshotName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteDiskSnapshotOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def delete_disk_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteDiskSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteDiskSnapshotInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteDiskSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteDiskSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteDiskSnapshot,
        stubs: @stubs,
        params_class: Params::DeleteDiskSnapshotOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_disk_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes your Amazon Lightsail content delivery network (CDN) distribution.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteDistributionInput}.
    #
    # @option params [String] :distribution_name
    #   <p>The name of the distribution to delete.</p>
    #            <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    #         can specify.</p>
    #
    # @return [Types::DeleteDistributionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_distribution(
    #     distribution_name: 'distributionName'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteDistributionOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def delete_distribution(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteDistributionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteDistributionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteDistribution
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteDistribution
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteDistribution,
        stubs: @stubs,
        params_class: Params::DeleteDistributionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_distribution
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified domain recordset and all of its domain records.</p>
    #          <p>The <code>delete domain</code> operation supports tag-based access control via resource
    #       tags applied to the resource identified by <code>domain name</code>. For more information, see
    #       the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteDomainInput}.
    #
    # @option params [String] :domain_name
    #   <p>The specific domain name to delete.</p>
    #
    # @return [Types::DeleteDomainOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_domain(
    #     domain_name: 'domainName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteDomainOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def delete_domain(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteDomainInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteDomainInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteDomain
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteDomain
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteDomain,
        stubs: @stubs,
        params_class: Params::DeleteDomainOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_domain
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a specific domain entry.</p>
    #          <p>The <code>delete domain entry</code> operation supports tag-based access control via
    #       resource tags applied to the resource identified by <code>domain name</code>. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteDomainEntryInput}.
    #
    # @option params [String] :domain_name
    #   <p>The name of the domain entry to delete.</p>
    #
    # @option params [DomainEntry] :domain_entry
    #   <p>An array of key-value pairs containing information about your domain entries.</p>
    #
    # @return [Types::DeleteDomainEntryOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_domain_entry(
    #     domain_name: 'domainName', # required
    #     domain_entry: {
    #       id: 'id',
    #       name: 'name',
    #       target: 'target',
    #       is_alias: false,
    #       type: 'type',
    #       options: {
    #         'key' => 'value'
    #       }
    #     } # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteDomainEntryOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def delete_domain_entry(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteDomainEntryInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteDomainEntryInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteDomainEntry
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteDomainEntry
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteDomainEntry,
        stubs: @stubs,
        params_class: Params::DeleteDomainEntryOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_domain_entry
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an Amazon Lightsail instance.</p>
    #          <p>The <code>delete instance</code> operation supports tag-based access control via resource
    #       tags applied to the resource identified by <code>instance name</code>. For more information,
    #       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteInstanceInput}.
    #
    # @option params [String] :instance_name
    #   <p>The name of the instance to delete.</p>
    #
    # @option params [Boolean] :force_delete_add_ons
    #   <p>A Boolean value to indicate whether to delete the enabled add-ons for the disk.</p>
    #
    # @return [Types::DeleteInstanceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_instance(
    #     instance_name: 'instanceName', # required
    #     force_delete_add_ons: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteInstanceOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def delete_instance(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteInstanceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteInstanceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteInstance
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteInstance
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteInstance,
        stubs: @stubs,
        params_class: Params::DeleteInstanceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_instance
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a specific snapshot of a virtual private server (or
    #       <i>instance</i>).</p>
    #          <p>The <code>delete instance snapshot</code> operation supports tag-based access control via
    #       resource tags applied to the resource identified by <code>instance snapshot name</code>. For
    #       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteInstanceSnapshotInput}.
    #
    # @option params [String] :instance_snapshot_name
    #   <p>The name of the snapshot to delete.</p>
    #
    # @return [Types::DeleteInstanceSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_instance_snapshot(
    #     instance_snapshot_name: 'instanceSnapshotName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteInstanceSnapshotOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def delete_instance_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteInstanceSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteInstanceSnapshotInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteInstanceSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteInstanceSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteInstanceSnapshot,
        stubs: @stubs,
        params_class: Params::DeleteInstanceSnapshotOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_instance_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified key pair by removing the public key from Amazon Lightsail.</p>
    #          <p>You can delete key pairs that were created using the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_ImportKeyPair.html">ImportKeyPair</a> and
    #         <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateKeyPair.html">CreateKeyPair</a> actions, as well as the Lightsail default key pair. A new default
    #       key pair will not be created unless you launch an instance without specifying a custom key
    #       pair, or you call the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_DownloadDefaultKeyPair.html">DownloadDefaultKeyPair</a> API. </p>
    #
    #          <p>The <code>delete key pair</code> operation supports tag-based access control via resource
    #       tags applied to the resource identified by <code>key pair name</code>. For more information,
    #       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteKeyPairInput}.
    #
    # @option params [String] :key_pair_name
    #   <p>The name of the key pair to delete.</p>
    #
    # @option params [String] :expected_fingerprint
    #   <p>The RSA fingerprint of the Lightsail default key pair to delete.</p>
    #            <note>
    #               <p>The <code>expectedFingerprint</code> parameter is required only when specifying to
    #           delete a Lightsail default key pair.</p>
    #            </note>
    #
    # @return [Types::DeleteKeyPairOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_key_pair(
    #     key_pair_name: 'keyPairName', # required
    #     expected_fingerprint: 'expectedFingerprint'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteKeyPairOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def delete_key_pair(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteKeyPairInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteKeyPairInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteKeyPair
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteKeyPair
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteKeyPair,
        stubs: @stubs,
        params_class: Params::DeleteKeyPairOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_key_pair
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the known host key or certificate used by the Amazon Lightsail browser-based SSH or
    #       RDP clients to authenticate an instance. This operation enables the Lightsail browser-based
    #       SSH or RDP clients to connect to the instance after a host key mismatch.</p>
    #          <important>
    #             <p>Perform this operation only if you were expecting the host key or certificate mismatch
    #         or if you are familiar with the new host key or certificate on the instance. For more
    #         information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-troubleshooting-browser-based-ssh-rdp-client-connection">Troubleshooting connection issues when using the Amazon Lightsail browser-based SSH or RDP
    #           client</a>.</p>
    #          </important>
    #
    # @param [Hash] params
    #   See {Types::DeleteKnownHostKeysInput}.
    #
    # @option params [String] :instance_name
    #   <p>The name of the instance for which you want to reset the host key or certificate.</p>
    #
    # @return [Types::DeleteKnownHostKeysOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_known_host_keys(
    #     instance_name: 'instanceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteKnownHostKeysOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def delete_known_host_keys(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteKnownHostKeysInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteKnownHostKeysInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteKnownHostKeys
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteKnownHostKeys
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteKnownHostKeys,
        stubs: @stubs,
        params_class: Params::DeleteKnownHostKeysOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_known_host_keys
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a Lightsail load balancer and all its associated SSL/TLS certificates. Once the
    #       load balancer is deleted, you will need to create a new load balancer, create a new
    #       certificate, and verify domain ownership again.</p>
    #          <p>The <code>delete load balancer</code> operation supports tag-based access control via
    #       resource tags applied to the resource identified by <code>load balancer name</code>. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteLoadBalancerInput}.
    #
    # @option params [String] :load_balancer_name
    #   <p>The name of the load balancer you want to delete.</p>
    #
    # @return [Types::DeleteLoadBalancerOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_load_balancer(
    #     load_balancer_name: 'loadBalancerName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteLoadBalancerOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def delete_load_balancer(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteLoadBalancerInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteLoadBalancerInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteLoadBalancer
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteLoadBalancer
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteLoadBalancer,
        stubs: @stubs,
        params_class: Params::DeleteLoadBalancerOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_load_balancer
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an SSL/TLS certificate associated with a Lightsail load balancer.</p>
    #          <p>The <code>DeleteLoadBalancerTlsCertificate</code> operation supports tag-based access
    #       control via resource tags applied to the resource identified by <code>load balancer
    #         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteLoadBalancerTlsCertificateInput}.
    #
    # @option params [String] :load_balancer_name
    #   <p>The load balancer name.</p>
    #
    # @option params [String] :certificate_name
    #   <p>The SSL/TLS certificate name.</p>
    #
    # @option params [Boolean] :force
    #   <p>When <code>true</code>, forces the deletion of an SSL/TLS certificate.</p>
    #            <p>There can be two certificates associated with a Lightsail load balancer: the primary and
    #         the backup. The <code>force</code> parameter is required when the primary SSL/TLS certificate
    #         is in use by an instance attached to the load balancer.</p>
    #
    # @return [Types::DeleteLoadBalancerTlsCertificateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_load_balancer_tls_certificate(
    #     load_balancer_name: 'loadBalancerName', # required
    #     certificate_name: 'certificateName', # required
    #     force: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteLoadBalancerTlsCertificateOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def delete_load_balancer_tls_certificate(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteLoadBalancerTlsCertificateInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteLoadBalancerTlsCertificateInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteLoadBalancerTlsCertificate
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteLoadBalancerTlsCertificate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteLoadBalancerTlsCertificate,
        stubs: @stubs,
        params_class: Params::DeleteLoadBalancerTlsCertificateOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_load_balancer_tls_certificate
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a database in Amazon Lightsail.</p>
    #          <p>The <code>delete relational database</code> operation supports tag-based access control
    #       via resource tags applied to the resource identified by relationalDatabaseName. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteRelationalDatabaseInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name of the database that you are deleting.</p>
    #
    # @option params [Boolean] :skip_final_snapshot
    #   <p>Determines whether a final database snapshot is created before your database is deleted.
    #         If <code>true</code> is specified, no database snapshot is created. If <code>false</code> is
    #         specified, a database snapshot is created before your database is deleted.</p>
    #            <p>You must specify the <code>final relational database snapshot name</code> parameter if the
    #           <code>skip final snapshot</code> parameter is <code>false</code>.</p>
    #            <p>Default: <code>false</code>
    #            </p>
    #
    # @option params [String] :final_relational_database_snapshot_name
    #   <p>The name of the database snapshot created if <code>skip final snapshot</code> is
    #           <code>false</code>, which is the default value for that parameter.</p>
    #            <note>
    #               <p>Specifying this parameter and also specifying the <code>skip final snapshot</code>
    #           parameter to <code>true</code> results in an error.</p>
    #            </note>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p>
    #               </li>
    #               <li>
    #                  <p>The first and last character must be a letter or number.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::DeleteRelationalDatabaseOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_relational_database(
    #     relational_database_name: 'relationalDatabaseName', # required
    #     skip_final_snapshot: false,
    #     final_relational_database_snapshot_name: 'finalRelationalDatabaseSnapshotName'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteRelationalDatabaseOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def delete_relational_database(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteRelationalDatabaseInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteRelationalDatabaseInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteRelationalDatabase
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteRelationalDatabase
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteRelationalDatabase,
        stubs: @stubs,
        params_class: Params::DeleteRelationalDatabaseOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_relational_database
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a database snapshot in Amazon Lightsail.</p>
    #          <p>The <code>delete relational database snapshot</code> operation supports tag-based access
    #       control via resource tags applied to the resource identified by relationalDatabaseName. For
    #       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteRelationalDatabaseSnapshotInput}.
    #
    # @option params [String] :relational_database_snapshot_name
    #   <p>The name of the database snapshot that you are deleting.</p>
    #
    # @return [Types::DeleteRelationalDatabaseSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_relational_database_snapshot(
    #     relational_database_snapshot_name: 'relationalDatabaseSnapshotName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteRelationalDatabaseSnapshotOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def delete_relational_database_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteRelationalDatabaseSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteRelationalDatabaseSnapshotInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteRelationalDatabaseSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DeleteRelationalDatabaseSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteRelationalDatabaseSnapshot,
        stubs: @stubs,
        params_class: Params::DeleteRelationalDatabaseSnapshotOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_relational_database_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Detaches an SSL/TLS certificate from your Amazon Lightsail content delivery network (CDN)
    #       distribution.</p>
    #          <p>After the certificate is detached, your distribution stops accepting traffic for all of
    #       the domains that are associated with the certificate.</p>
    #
    # @param [Hash] params
    #   See {Types::DetachCertificateFromDistributionInput}.
    #
    # @option params [String] :distribution_name
    #   <p>The name of the distribution from which to detach the certificate.</p>
    #            <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    #         can specify.</p>
    #
    # @return [Types::DetachCertificateFromDistributionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.detach_certificate_from_distribution(
    #     distribution_name: 'distributionName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DetachCertificateFromDistributionOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def detach_certificate_from_distribution(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DetachCertificateFromDistributionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DetachCertificateFromDistributionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DetachCertificateFromDistribution
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DetachCertificateFromDistribution
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DetachCertificateFromDistribution,
        stubs: @stubs,
        params_class: Params::DetachCertificateFromDistributionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :detach_certificate_from_distribution
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Detaches a stopped block storage disk from a Lightsail instance. Make sure to unmount
    #       any file systems on the device within your operating system before stopping the instance and
    #       detaching the disk.</p>
    #          <p>The <code>detach disk</code> operation supports tag-based access control via resource tags
    #       applied to the resource identified by <code>disk name</code>. For more information, see the
    #         <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DetachDiskInput}.
    #
    # @option params [String] :disk_name
    #   <p>The unique name of the disk you want to detach from your instance (e.g.,
    #           <code>my-disk</code>).</p>
    #
    # @return [Types::DetachDiskOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.detach_disk(
    #     disk_name: 'diskName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DetachDiskOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def detach_disk(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DetachDiskInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DetachDiskInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DetachDisk
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DetachDisk
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DetachDisk,
        stubs: @stubs,
        params_class: Params::DetachDiskOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :detach_disk
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Detaches the specified instances from a Lightsail load balancer.</p>
    #          <p>This operation waits until the instances are no longer needed before they are detached
    #       from the load balancer.</p>
    #          <p>The <code>detach instances from load balancer</code> operation supports tag-based access
    #       control via resource tags applied to the resource identified by <code>load balancer
    #         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DetachInstancesFromLoadBalancerInput}.
    #
    # @option params [String] :load_balancer_name
    #   <p>The name of the Lightsail load balancer.</p>
    #
    # @option params [Array<String>] :instance_names
    #   <p>An array of strings containing the names of the instances you want to detach from the load
    #         balancer.</p>
    #
    # @return [Types::DetachInstancesFromLoadBalancerOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.detach_instances_from_load_balancer(
    #     load_balancer_name: 'loadBalancerName', # required
    #     instance_names: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DetachInstancesFromLoadBalancerOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def detach_instances_from_load_balancer(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DetachInstancesFromLoadBalancerInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DetachInstancesFromLoadBalancerInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DetachInstancesFromLoadBalancer
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DetachInstancesFromLoadBalancer
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DetachInstancesFromLoadBalancer,
        stubs: @stubs,
        params_class: Params::DetachInstancesFromLoadBalancerOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :detach_instances_from_load_balancer
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Detaches a static IP from the Amazon Lightsail instance to which it is attached.</p>
    #
    # @param [Hash] params
    #   See {Types::DetachStaticIpInput}.
    #
    # @option params [String] :static_ip_name
    #   <p>The name of the static IP to detach from the instance.</p>
    #
    # @return [Types::DetachStaticIpOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.detach_static_ip(
    #     static_ip_name: 'staticIpName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DetachStaticIpOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def detach_static_ip(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DetachStaticIpInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DetachStaticIpInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DetachStaticIp
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DetachStaticIp
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DetachStaticIp,
        stubs: @stubs,
        params_class: Params::DetachStaticIpOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :detach_static_ip
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disables an add-on for an Amazon Lightsail resource. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DisableAddOnInput}.
    #
    # @option params [String] :add_on_type
    #   <p>The add-on type to disable.</p>
    #
    # @option params [String] :resource_name
    #   <p>The name of the source resource for which to disable the add-on.</p>
    #
    # @return [Types::DisableAddOnOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disable_add_on(
    #     add_on_type: 'AutoSnapshot', # required - accepts ["AutoSnapshot"]
    #     resource_name: 'resourceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisableAddOnOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def disable_add_on(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisableAddOnInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisableAddOnInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisableAddOn
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DisableAddOn
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DisableAddOn,
        stubs: @stubs,
        params_class: Params::DisableAddOnOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :disable_add_on
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Downloads the regional Amazon Lightsail default key pair.</p>
    #          <p>This action also creates a Lightsail default key pair if a default key pair
    #       does not currently exist in the Amazon Web Services Region.</p>
    #
    # @param [Hash] params
    #   See {Types::DownloadDefaultKeyPairInput}.
    #
    # @return [Types::DownloadDefaultKeyPairOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.download_default_key_pair()
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DownloadDefaultKeyPairOutput
    #   resp.data.public_key_base64 #=> String
    #   resp.data.private_key_base64 #=> String
    #   resp.data.created_at #=> Time
    #
    def download_default_key_pair(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DownloadDefaultKeyPairInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DownloadDefaultKeyPairInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DownloadDefaultKeyPair
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::DownloadDefaultKeyPair
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DownloadDefaultKeyPair,
        stubs: @stubs,
        params_class: Params::DownloadDefaultKeyPairOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :download_default_key_pair
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Enables or modifies an add-on for an Amazon Lightsail resource. For more information, see
    #       the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::EnableAddOnInput}.
    #
    # @option params [String] :resource_name
    #   <p>The name of the source resource for which to enable or modify the add-on.</p>
    #
    # @option params [AddOnRequest] :add_on_request
    #   <p>An array of strings representing the add-on to enable or modify.</p>
    #
    # @return [Types::EnableAddOnOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.enable_add_on(
    #     resource_name: 'resourceName', # required
    #     add_on_request: {
    #       add_on_type: 'AutoSnapshot', # required - accepts ["AutoSnapshot"]
    #       auto_snapshot_add_on_request: {
    #         snapshot_time_of_day: 'snapshotTimeOfDay'
    #       }
    #     } # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::EnableAddOnOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def enable_add_on(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::EnableAddOnInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::EnableAddOnInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::EnableAddOn
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::EnableAddOn
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::EnableAddOn,
        stubs: @stubs,
        params_class: Params::EnableAddOnOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :enable_add_on
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Exports an Amazon Lightsail instance or block storage disk snapshot to Amazon Elastic Compute Cloud (Amazon EC2).
    #       This operation results in an export snapshot record that can be used with the <code>create
    #         cloud formation stack</code> operation to create new Amazon EC2 instances.</p>
    #          <p>Exported instance snapshots appear in Amazon EC2 as Amazon Machine Images (AMIs), and the
    #       instance system disk appears as an Amazon Elastic Block Store (Amazon EBS) volume. Exported disk snapshots appear in
    #       Amazon EC2 as Amazon EBS volumes. Snapshots are exported to the same Amazon Web Services Region in
    #       Amazon EC2 as the source Lightsail snapshot.</p>
    #          <p></p>
    #          <p>The <code>export snapshot</code> operation supports tag-based access control via resource
    #       tags applied to the resource identified by <code>source snapshot name</code>. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #          <note>
    #             <p>Use the <code>get instance snapshots</code> or <code>get disk snapshots</code>
    #         operations to get a list of snapshots that you can export to Amazon EC2.</p>
    #          </note>
    #
    # @param [Hash] params
    #   See {Types::ExportSnapshotInput}.
    #
    # @option params [String] :source_snapshot_name
    #   <p>The name of the instance or disk snapshot to be exported to Amazon EC2.</p>
    #
    # @return [Types::ExportSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.export_snapshot(
    #     source_snapshot_name: 'sourceSnapshotName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ExportSnapshotOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def export_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ExportSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ExportSnapshotInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ExportSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::ExportSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ExportSnapshot,
        stubs: @stubs,
        params_class: Params::ExportSnapshotOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :export_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the names of all active (not deleted) resources.</p>
    #
    # @param [Hash] params
    #   See {Types::GetActiveNamesInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetActiveNames</code> request. If your
    #         results are paginated, the response will return a next page token that you can specify as the
    #         page token in a subsequent request.</p>
    #
    # @return [Types::GetActiveNamesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_active_names(
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetActiveNamesOutput
    #   resp.data.active_names #=> Array<String>
    #   resp.data.active_names[0] #=> String
    #   resp.data.next_page_token #=> String
    #
    def get_active_names(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetActiveNamesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetActiveNamesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetActiveNames
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetActiveNames
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetActiveNames,
        stubs: @stubs,
        params_class: Params::GetActiveNamesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_active_names
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about the configured alarms. Specify an alarm name in your request to
    #       return information about a specific alarm, or specify a monitored resource name to return
    #       information about all alarms for a specific resource.</p>
    #          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
    #       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
    #       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
    #         in Amazon Lightsail</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetAlarmsInput}.
    #
    # @option params [String] :alarm_name
    #   <p>The name of the alarm.</p>
    #            <p>Specify an alarm name to return information about a specific alarm.</p>
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetAlarms</code> request. If your results
    #         are paginated, the response will return a next page token that you can specify as the page
    #         token in a subsequent request.</p>
    #
    # @option params [String] :monitored_resource_name
    #   <p>The name of the Lightsail resource being monitored by the alarm.</p>
    #            <p>Specify a monitored resource name to return information about all alarms for a specific
    #         resource.</p>
    #
    # @return [Types::GetAlarmsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_alarms(
    #     alarm_name: 'alarmName',
    #     page_token: 'pageToken',
    #     monitored_resource_name: 'monitoredResourceName'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetAlarmsOutput
    #   resp.data.alarms #=> Array<Alarm>
    #   resp.data.alarms[0] #=> Types::Alarm
    #   resp.data.alarms[0].name #=> String
    #   resp.data.alarms[0].arn #=> String
    #   resp.data.alarms[0].created_at #=> Time
    #   resp.data.alarms[0].location #=> Types::ResourceLocation
    #   resp.data.alarms[0].location.availability_zone #=> String
    #   resp.data.alarms[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.alarms[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.alarms[0].support_code #=> String
    #   resp.data.alarms[0].monitored_resource_info #=> Types::MonitoredResourceInfo
    #   resp.data.alarms[0].monitored_resource_info.arn #=> String
    #   resp.data.alarms[0].monitored_resource_info.name #=> String
    #   resp.data.alarms[0].monitored_resource_info.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.alarms[0].comparison_operator #=> String, one of ["GreaterThanOrEqualToThreshold", "GreaterThanThreshold", "LessThanThreshold", "LessThanOrEqualToThreshold"]
    #   resp.data.alarms[0].evaluation_periods #=> Integer
    #   resp.data.alarms[0].period #=> Integer
    #   resp.data.alarms[0].threshold #=> Float
    #   resp.data.alarms[0].datapoints_to_alarm #=> Integer
    #   resp.data.alarms[0].treat_missing_data #=> String, one of ["breaching", "notBreaching", "ignore", "missing"]
    #   resp.data.alarms[0].statistic #=> String, one of ["Minimum", "Maximum", "Sum", "Average", "SampleCount"]
    #   resp.data.alarms[0].metric_name #=> String, one of ["CPUUtilization", "NetworkIn", "NetworkOut", "StatusCheckFailed", "StatusCheckFailed_Instance", "StatusCheckFailed_System", "ClientTLSNegotiationErrorCount", "HealthyHostCount", "UnhealthyHostCount", "HTTPCode_LB_4XX_Count", "HTTPCode_LB_5XX_Count", "HTTPCode_Instance_2XX_Count", "HTTPCode_Instance_3XX_Count", "HTTPCode_Instance_4XX_Count", "HTTPCode_Instance_5XX_Count", "InstanceResponseTime", "RejectedConnectionCount", "RequestCount", "DatabaseConnections", "DiskQueueDepth", "FreeStorageSpace", "NetworkReceiveThroughput", "NetworkTransmitThroughput", "BurstCapacityTime", "BurstCapacityPercentage"]
    #   resp.data.alarms[0].state #=> String, one of ["OK", "ALARM", "INSUFFICIENT_DATA"]
    #   resp.data.alarms[0].unit #=> String, one of ["Seconds", "Microseconds", "Milliseconds", "Bytes", "Kilobytes", "Megabytes", "Gigabytes", "Terabytes", "Bits", "Kilobits", "Megabits", "Gigabits", "Terabits", "Percent", "Count", "Bytes/Second", "Kilobytes/Second", "Megabytes/Second", "Gigabytes/Second", "Terabytes/Second", "Bits/Second", "Kilobits/Second", "Megabits/Second", "Gigabits/Second", "Terabits/Second", "Count/Second", "None"]
    #   resp.data.alarms[0].contact_protocols #=> Array<String>
    #   resp.data.alarms[0].contact_protocols[0] #=> String, one of ["Email", "SMS"]
    #   resp.data.alarms[0].notification_triggers #=> Array<String>
    #   resp.data.alarms[0].notification_triggers[0] #=> String, one of ["OK", "ALARM", "INSUFFICIENT_DATA"]
    #   resp.data.alarms[0].notification_enabled #=> Boolean
    #   resp.data.next_page_token #=> String
    #
    def get_alarms(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetAlarmsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetAlarmsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetAlarms
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetAlarms
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetAlarms,
        stubs: @stubs,
        params_class: Params::GetAlarmsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_alarms
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the available automatic snapshots for an instance or disk. For more information,
    #       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetAutoSnapshotsInput}.
    #
    # @option params [String] :resource_name
    #   <p>The name of the source instance or disk from which to get automatic snapshot
    #         information.</p>
    #
    # @return [Types::GetAutoSnapshotsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_auto_snapshots(
    #     resource_name: 'resourceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetAutoSnapshotsOutput
    #   resp.data.resource_name #=> String
    #   resp.data.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.auto_snapshots #=> Array<AutoSnapshotDetails>
    #   resp.data.auto_snapshots[0] #=> Types::AutoSnapshotDetails
    #   resp.data.auto_snapshots[0].date #=> String
    #   resp.data.auto_snapshots[0].created_at #=> Time
    #   resp.data.auto_snapshots[0].status #=> String, one of ["Success", "Failed", "InProgress", "NotFound"]
    #   resp.data.auto_snapshots[0].from_attached_disks #=> Array<AttachedDisk>
    #   resp.data.auto_snapshots[0].from_attached_disks[0] #=> Types::AttachedDisk
    #   resp.data.auto_snapshots[0].from_attached_disks[0].path #=> String
    #   resp.data.auto_snapshots[0].from_attached_disks[0].size_in_gb #=> Integer
    #
    def get_auto_snapshots(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetAutoSnapshotsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetAutoSnapshotsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetAutoSnapshots
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetAutoSnapshots
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetAutoSnapshots,
        stubs: @stubs,
        params_class: Params::GetAutoSnapshotsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_auto_snapshots
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the list of available instance images, or <i>blueprints</i>. You can
    #       use a blueprint to create a new instance already running a specific operating system, as well
    #       as a preinstalled app or development stack. The software each instance is running depends on
    #       the blueprint image you choose.</p>
    #          <note>
    #             <p>Use active blueprints when creating new instances. Inactive blueprints are listed to
    #         support customers with existing instances and are not necessarily available to create new
    #         instances. Blueprints are marked inactive when they become outdated due to operating system
    #         updates or new application releases.</p>
    #          </note>
    #
    # @param [Hash] params
    #   See {Types::GetBlueprintsInput}.
    #
    # @option params [Boolean] :include_inactive
    #   <p>A Boolean value that indicates whether to include inactive (unavailable) blueprints in the
    #         response of your request.</p>
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetBlueprints</code> request. If your
    #         results are paginated, the response will return a next page token that you can specify as the
    #         page token in a subsequent request.</p>
    #
    # @return [Types::GetBlueprintsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_blueprints(
    #     include_inactive: false,
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetBlueprintsOutput
    #   resp.data.blueprints #=> Array<Blueprint>
    #   resp.data.blueprints[0] #=> Types::Blueprint
    #   resp.data.blueprints[0].blueprint_id #=> String
    #   resp.data.blueprints[0].name #=> String
    #   resp.data.blueprints[0].group #=> String
    #   resp.data.blueprints[0].type #=> String, one of ["os", "app"]
    #   resp.data.blueprints[0].description #=> String
    #   resp.data.blueprints[0].is_active #=> Boolean
    #   resp.data.blueprints[0].min_power #=> Integer
    #   resp.data.blueprints[0].version #=> String
    #   resp.data.blueprints[0].version_code #=> String
    #   resp.data.blueprints[0].product_url #=> String
    #   resp.data.blueprints[0].license_url #=> String
    #   resp.data.blueprints[0].platform #=> String, one of ["LINUX_UNIX", "WINDOWS"]
    #   resp.data.next_page_token #=> String
    #
    def get_blueprints(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetBlueprintsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetBlueprintsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetBlueprints
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetBlueprints
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetBlueprints,
        stubs: @stubs,
        params_class: Params::GetBlueprintsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_blueprints
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the existing access key IDs for the specified Amazon Lightsail bucket.</p>
    #
    #          <important>
    #             <p>This action does not return the secret access key value of an access key. You can get a
    #         secret access key only when you create it from the response of the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html">CreateBucketAccessKey</a> action. If you lose the secret access key, you must create
    #         a new access key.</p>
    #          </important>
    #
    # @param [Hash] params
    #   See {Types::GetBucketAccessKeysInput}.
    #
    # @option params [String] :bucket_name
    #   <p>The name of the bucket for which to return access keys.</p>
    #
    # @return [Types::GetBucketAccessKeysOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_bucket_access_keys(
    #     bucket_name: 'bucketName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetBucketAccessKeysOutput
    #   resp.data.access_keys #=> Array<AccessKey>
    #   resp.data.access_keys[0] #=> Types::AccessKey
    #   resp.data.access_keys[0].access_key_id #=> String
    #   resp.data.access_keys[0].secret_access_key #=> String
    #   resp.data.access_keys[0].status #=> String, one of ["Active", "Inactive"]
    #   resp.data.access_keys[0].created_at #=> Time
    #   resp.data.access_keys[0].last_used #=> Types::AccessKeyLastUsed
    #   resp.data.access_keys[0].last_used.last_used_date #=> Time
    #   resp.data.access_keys[0].last_used.region #=> String
    #   resp.data.access_keys[0].last_used.service_name #=> String
    #
    def get_bucket_access_keys(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetBucketAccessKeysInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetBucketAccessKeysInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetBucketAccessKeys
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetBucketAccessKeys
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetBucketAccessKeys,
        stubs: @stubs,
        params_class: Params::GetBucketAccessKeysOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_bucket_access_keys
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the bundles that you can apply to a Amazon Lightsail bucket.</p>
    #
    #          <p>The bucket bundle specifies the monthly cost, storage quota, and data transfer quota for a
    #       bucket.</p>
    #
    #          <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to update the
    #       bundle for a bucket.</p>
    #
    # @param [Hash] params
    #   See {Types::GetBucketBundlesInput}.
    #
    # @option params [Boolean] :include_inactive
    #   <p>A Boolean value that indicates whether to include inactive (unavailable) bundles in the
    #         response of your request.</p>
    #
    # @return [Types::GetBucketBundlesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_bucket_bundles(
    #     include_inactive: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetBucketBundlesOutput
    #   resp.data.bundles #=> Array<BucketBundle>
    #   resp.data.bundles[0] #=> Types::BucketBundle
    #   resp.data.bundles[0].bundle_id #=> String
    #   resp.data.bundles[0].name #=> String
    #   resp.data.bundles[0].price #=> Float
    #   resp.data.bundles[0].storage_per_month_in_gb #=> Integer
    #   resp.data.bundles[0].transfer_per_month_in_gb #=> Integer
    #   resp.data.bundles[0].is_active #=> Boolean
    #
    def get_bucket_bundles(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetBucketBundlesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetBucketBundlesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetBucketBundles
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetBucketBundles
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetBucketBundles,
        stubs: @stubs,
        params_class: Params::GetBucketBundlesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_bucket_bundles
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the data points of a specific metric for an Amazon Lightsail bucket.</p>
    #
    #          <p>Metrics report the utilization of a bucket. View and collect metric data regularly to
    #       monitor the number of objects stored in a bucket (including object versions) and the storage
    #       space used by those objects.</p>
    #
    # @param [Hash] params
    #   See {Types::GetBucketMetricDataInput}.
    #
    # @option params [String] :bucket_name
    #   <p>The name of the bucket for which to get metric data.</p>
    #
    # @option params [String] :metric_name
    #   <p>The metric for which you want to return information.</p>
    #
    #            <p>Valid bucket metric names are listed below, along with the most useful statistics to
    #         include in your request, and the published unit value.</p>
    #
    #            <note>
    #               <p>These bucket metrics are reported once per day.</p>
    #            </note>
    #
    #            <ul>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>BucketSizeBytes</code>
    #                     </b> - The amount of data in
    #             bytes stored in a bucket. This value is calculated by summing the size of all objects in
    #             the bucket (including object versions), including the size of all parts for all incomplete
    #             multipart uploads to the bucket.</p>
    #                  <p>Statistics: The most useful statistic is <code>Maximum</code>.</p>
    #                  <p>Unit: The published unit is <code>Bytes</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>NumberOfObjects</code>
    #                     </b> - The total number of
    #             objects stored in a bucket. This value is calculated by counting all objects in the bucket
    #             (including object versions) and the total number of parts for all incomplete multipart
    #             uploads to the bucket.</p>
    #                  <p>Statistics: The most useful statistic is <code>Average</code>.</p>
    #                  <p>Unit: The published unit is <code>Count</code>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Time] :start_time
    #   <p>The timestamp indicating the earliest data to be returned.</p>
    #
    # @option params [Time] :end_time
    #   <p>The timestamp indicating the latest data to be returned.</p>
    #
    # @option params [Integer] :period
    #   <p>The granularity, in seconds, of the returned data points.</p>
    #            <note>
    #               <p>Bucket storage metrics are reported once per day. Therefore, you should specify a period
    #           of 86400 seconds, which is the number of seconds in a day.</p>
    #            </note>
    #
    # @option params [Array<String>] :statistics
    #   <p>The statistic for the metric.</p>
    #
    #            <p>The following statistics are available:</p>
    #
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>Minimum</code> - The lowest value observed during the specified period. Use this
    #             value to determine low volumes of activity for your application.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Maximum</code> - The highest value observed during the specified period. Use
    #             this value to determine high volumes of activity for your application.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Sum</code> - The sum of all values submitted for the matching metric. You can
    #             use this statistic to determine the total volume of a metric.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Average</code> - The value of <code>Sum</code> / <code>SampleCount</code> during
    #             the specified period. By comparing this statistic with the <code>Minimum</code> and
    #               <code>Maximum</code> values, you can determine the full scope of a metric and how close
    #             the average use is to the <code>Minimum</code> and <code>Maximum</code> values. This
    #             comparison helps you to know when to increase or decrease your resources.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>SampleCount</code> - The count, or number, of data points used for the
    #             statistical calculation.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :unit
    #   <p>The unit for the metric data request.</p>
    #            <p>Valid units depend on the metric data being requested. For the valid units with each
    #         available metric, see the <code>metricName</code> parameter.</p>
    #
    # @return [Types::GetBucketMetricDataOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_bucket_metric_data(
    #     bucket_name: 'bucketName', # required
    #     metric_name: 'BucketSizeBytes', # required - accepts ["BucketSizeBytes", "NumberOfObjects"]
    #     start_time: Time.now, # required
    #     end_time: Time.now, # required
    #     period: 1, # required
    #     statistics: [
    #       'Minimum' # accepts ["Minimum", "Maximum", "Sum", "Average", "SampleCount"]
    #     ], # required
    #     unit: 'Seconds' # required - accepts ["Seconds", "Microseconds", "Milliseconds", "Bytes", "Kilobytes", "Megabytes", "Gigabytes", "Terabytes", "Bits", "Kilobits", "Megabits", "Gigabits", "Terabits", "Percent", "Count", "Bytes/Second", "Kilobytes/Second", "Megabytes/Second", "Gigabytes/Second", "Terabytes/Second", "Bits/Second", "Kilobits/Second", "Megabits/Second", "Gigabits/Second", "Terabits/Second", "Count/Second", "None"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetBucketMetricDataOutput
    #   resp.data.metric_name #=> String, one of ["BucketSizeBytes", "NumberOfObjects"]
    #   resp.data.metric_data #=> Array<MetricDatapoint>
    #   resp.data.metric_data[0] #=> Types::MetricDatapoint
    #   resp.data.metric_data[0].average #=> Float
    #   resp.data.metric_data[0].maximum #=> Float
    #   resp.data.metric_data[0].minimum #=> Float
    #   resp.data.metric_data[0].sample_count #=> Float
    #   resp.data.metric_data[0].sum #=> Float
    #   resp.data.metric_data[0].timestamp #=> Time
    #   resp.data.metric_data[0].unit #=> String, one of ["Seconds", "Microseconds", "Milliseconds", "Bytes", "Kilobytes", "Megabytes", "Gigabytes", "Terabytes", "Bits", "Kilobits", "Megabits", "Gigabits", "Terabits", "Percent", "Count", "Bytes/Second", "Kilobytes/Second", "Megabytes/Second", "Gigabytes/Second", "Terabytes/Second", "Bits/Second", "Kilobits/Second", "Megabits/Second", "Gigabits/Second", "Terabits/Second", "Count/Second", "None"]
    #
    def get_bucket_metric_data(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetBucketMetricDataInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetBucketMetricDataInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetBucketMetricData
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetBucketMetricData
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetBucketMetricData,
        stubs: @stubs,
        params_class: Params::GetBucketMetricDataOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_bucket_metric_data
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about one or more Amazon Lightsail buckets. The information returned
    #       includes the synchronization status of the Amazon Simple Storage Service (Amazon S3)
    #       account-level block public access feature for your Lightsail buckets.</p>
    #
    #          <p>For more information about buckets, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/buckets-in-amazon-lightsail">Buckets in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer
    #         Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetBucketsInput}.
    #
    # @option params [String] :bucket_name
    #   <p>The name of the bucket for which to return information.</p>
    #
    #            <p>When omitted, the response includes all of your buckets in the Amazon Web Services Region
    #         where the request is made.</p>
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #
    #            <p>To get a page token, perform an initial <code>GetBuckets</code> request. If your results
    #         are paginated, the response will return a next page token that you can specify as the page
    #         token in a subsequent request.</p>
    #
    # @option params [Boolean] :include_connected_resources
    #   <p>A Boolean value that indicates whether to include Lightsail instances that were given
    #         access to the bucket using the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_SetResourceAccessForBucket.html">SetResourceAccessForBucket</a>
    #         action.</p>
    #
    # @return [Types::GetBucketsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_buckets(
    #     bucket_name: 'bucketName',
    #     page_token: 'pageToken',
    #     include_connected_resources: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetBucketsOutput
    #   resp.data.buckets #=> Array<Bucket>
    #   resp.data.buckets[0] #=> Types::Bucket
    #   resp.data.buckets[0].resource_type #=> String
    #   resp.data.buckets[0].access_rules #=> Types::AccessRules
    #   resp.data.buckets[0].access_rules.get_object #=> String, one of ["public", "private"]
    #   resp.data.buckets[0].access_rules.allow_public_overrides #=> Boolean
    #   resp.data.buckets[0].arn #=> String
    #   resp.data.buckets[0].bundle_id #=> String
    #   resp.data.buckets[0].created_at #=> Time
    #   resp.data.buckets[0].url #=> String
    #   resp.data.buckets[0].location #=> Types::ResourceLocation
    #   resp.data.buckets[0].location.availability_zone #=> String
    #   resp.data.buckets[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.buckets[0].name #=> String
    #   resp.data.buckets[0].support_code #=> String
    #   resp.data.buckets[0].tags #=> Array<Tag>
    #   resp.data.buckets[0].tags[0] #=> Types::Tag
    #   resp.data.buckets[0].tags[0].key #=> String
    #   resp.data.buckets[0].tags[0].value #=> String
    #   resp.data.buckets[0].object_versioning #=> String
    #   resp.data.buckets[0].able_to_update_bundle #=> Boolean
    #   resp.data.buckets[0].readonly_access_accounts #=> Array<String>
    #   resp.data.buckets[0].readonly_access_accounts[0] #=> String
    #   resp.data.buckets[0].resources_receiving_access #=> Array<ResourceReceivingAccess>
    #   resp.data.buckets[0].resources_receiving_access[0] #=> Types::ResourceReceivingAccess
    #   resp.data.buckets[0].resources_receiving_access[0].name #=> String
    #   resp.data.buckets[0].resources_receiving_access[0].resource_type #=> String
    #   resp.data.buckets[0].state #=> Types::BucketState
    #   resp.data.buckets[0].state.code #=> String
    #   resp.data.buckets[0].state.message #=> String
    #   resp.data.buckets[0].access_log_config #=> Types::BucketAccessLogConfig
    #   resp.data.buckets[0].access_log_config.enabled #=> Boolean
    #   resp.data.buckets[0].access_log_config.destination #=> String
    #   resp.data.buckets[0].access_log_config.prefix #=> String
    #   resp.data.next_page_token #=> String
    #   resp.data.account_level_bpa_sync #=> Types::AccountLevelBpaSync
    #   resp.data.account_level_bpa_sync.status #=> String, one of ["InSync", "Failed", "NeverSynced", "Defaulted"]
    #   resp.data.account_level_bpa_sync.last_synced_at #=> Time
    #   resp.data.account_level_bpa_sync.message #=> String, one of ["DEFAULTED_FOR_SLR_MISSING", "SYNC_ON_HOLD", "DEFAULTED_FOR_SLR_MISSING_ON_HOLD", "Unknown"]
    #   resp.data.account_level_bpa_sync.bpa_impacts_lightsail #=> Boolean
    #
    def get_buckets(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetBucketsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetBucketsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetBuckets
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetBuckets
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetBuckets,
        stubs: @stubs,
        params_class: Params::GetBucketsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_buckets
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the bundles that you can apply to an Amazon Lightsail instance when you create
    #       it.</p>
    #
    #          <p>A bundle describes the specifications of an instance, such as the monthly cost, amount of
    #       memory, the number of vCPUs, amount of storage space, and monthly network data transfer
    #       quota.</p>
    #
    #          <note>
    #             <p>Bundles are referred to as <i>instance plans</i> in the Lightsail
    #         console.</p>
    #          </note>
    #
    # @param [Hash] params
    #   See {Types::GetBundlesInput}.
    #
    # @option params [Boolean] :include_inactive
    #   <p>A Boolean value that indicates whether to include inactive (unavailable) bundles in the
    #         response of your request.</p>
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetBundles</code> request. If your results
    #         are paginated, the response will return a next page token that you can specify as the page
    #         token in a subsequent request.</p>
    #
    # @return [Types::GetBundlesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_bundles(
    #     include_inactive: false,
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetBundlesOutput
    #   resp.data.bundles #=> Array<Bundle>
    #   resp.data.bundles[0] #=> Types::Bundle
    #   resp.data.bundles[0].price #=> Float
    #   resp.data.bundles[0].cpu_count #=> Integer
    #   resp.data.bundles[0].disk_size_in_gb #=> Integer
    #   resp.data.bundles[0].bundle_id #=> String
    #   resp.data.bundles[0].instance_type #=> String
    #   resp.data.bundles[0].is_active #=> Boolean
    #   resp.data.bundles[0].name #=> String
    #   resp.data.bundles[0].power #=> Integer
    #   resp.data.bundles[0].ram_size_in_gb #=> Float
    #   resp.data.bundles[0].transfer_per_month_in_gb #=> Integer
    #   resp.data.bundles[0].supported_platforms #=> Array<String>
    #   resp.data.bundles[0].supported_platforms[0] #=> String, one of ["LINUX_UNIX", "WINDOWS"]
    #   resp.data.next_page_token #=> String
    #
    def get_bundles(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetBundlesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetBundlesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetBundles
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetBundles
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetBundles,
        stubs: @stubs,
        params_class: Params::GetBundlesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_bundles
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about one or more Amazon Lightsail SSL/TLS certificates.</p>
    #          <note>
    #             <p>To get a summary of a certificate, ommit <code>includeCertificateDetails</code> from
    #         your request. The response will include only the certificate Amazon Resource Name (ARN),
    #         certificate name, domain name, and tags.</p>
    #          </note>
    #
    # @param [Hash] params
    #   See {Types::GetCertificatesInput}.
    #
    # @option params [Array<String>] :certificate_statuses
    #   <p>The status of the certificates for which to return information.</p>
    #            <p>For example, specify <code>ISSUED</code> to return only certificates with an
    #           <code>ISSUED</code> status.</p>
    #            <p>When omitted, the response includes all of your certificates in the Amazon Web Services
    #         Region where the request is made, regardless of their current status.</p>
    #
    # @option params [Boolean] :include_certificate_details
    #   <p>Indicates whether to include detailed information about the certificates in the
    #         response.</p>
    #            <p>When omitted, the response includes only the certificate names, Amazon Resource Names
    #         (ARNs), domain names, and tags.</p>
    #
    # @option params [String] :certificate_name
    #   <p>The name for the certificate for which to return information.</p>
    #            <p>When omitted, the response includes all of your certificates in the Amazon Web Services
    #         Region where the request is made.</p>
    #
    # @return [Types::GetCertificatesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_certificates(
    #     certificate_statuses: [
    #       'PENDING_VALIDATION' # accepts ["PENDING_VALIDATION", "ISSUED", "INACTIVE", "EXPIRED", "VALIDATION_TIMED_OUT", "REVOKED", "FAILED"]
    #     ],
    #     include_certificate_details: false,
    #     certificate_name: 'certificateName'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetCertificatesOutput
    #   resp.data.certificates #=> Array<CertificateSummary>
    #   resp.data.certificates[0] #=> Types::CertificateSummary
    #   resp.data.certificates[0].certificate_arn #=> String
    #   resp.data.certificates[0].certificate_name #=> String
    #   resp.data.certificates[0].domain_name #=> String
    #   resp.data.certificates[0].certificate_detail #=> Types::Certificate
    #   resp.data.certificates[0].certificate_detail.arn #=> String
    #   resp.data.certificates[0].certificate_detail.name #=> String
    #   resp.data.certificates[0].certificate_detail.domain_name #=> String
    #   resp.data.certificates[0].certificate_detail.status #=> String, one of ["PENDING_VALIDATION", "ISSUED", "INACTIVE", "EXPIRED", "VALIDATION_TIMED_OUT", "REVOKED", "FAILED"]
    #   resp.data.certificates[0].certificate_detail.serial_number #=> String
    #   resp.data.certificates[0].certificate_detail.subject_alternative_names #=> Array<String>
    #   resp.data.certificates[0].certificate_detail.subject_alternative_names[0] #=> String
    #   resp.data.certificates[0].certificate_detail.domain_validation_records #=> Array<DomainValidationRecord>
    #   resp.data.certificates[0].certificate_detail.domain_validation_records[0] #=> Types::DomainValidationRecord
    #   resp.data.certificates[0].certificate_detail.domain_validation_records[0].domain_name #=> String
    #   resp.data.certificates[0].certificate_detail.domain_validation_records[0].resource_record #=> Types::ResourceRecord
    #   resp.data.certificates[0].certificate_detail.domain_validation_records[0].resource_record.name #=> String
    #   resp.data.certificates[0].certificate_detail.domain_validation_records[0].resource_record.type #=> String
    #   resp.data.certificates[0].certificate_detail.domain_validation_records[0].resource_record.value #=> String
    #   resp.data.certificates[0].certificate_detail.request_failure_reason #=> String
    #   resp.data.certificates[0].certificate_detail.in_use_resource_count #=> Integer
    #   resp.data.certificates[0].certificate_detail.key_algorithm #=> String
    #   resp.data.certificates[0].certificate_detail.created_at #=> Time
    #   resp.data.certificates[0].certificate_detail.issued_at #=> Time
    #   resp.data.certificates[0].certificate_detail.issuer_ca #=> String
    #   resp.data.certificates[0].certificate_detail.not_before #=> Time
    #   resp.data.certificates[0].certificate_detail.not_after #=> Time
    #   resp.data.certificates[0].certificate_detail.eligible_to_renew #=> String
    #   resp.data.certificates[0].certificate_detail.renewal_summary #=> Types::RenewalSummary
    #   resp.data.certificates[0].certificate_detail.renewal_summary.domain_validation_records #=> Array<DomainValidationRecord>
    #   resp.data.certificates[0].certificate_detail.renewal_summary.renewal_status #=> String, one of ["PendingAutoRenewal", "PendingValidation", "Success", "Failed"]
    #   resp.data.certificates[0].certificate_detail.renewal_summary.renewal_status_reason #=> String
    #   resp.data.certificates[0].certificate_detail.renewal_summary.updated_at #=> Time
    #   resp.data.certificates[0].certificate_detail.revoked_at #=> Time
    #   resp.data.certificates[0].certificate_detail.revocation_reason #=> String
    #   resp.data.certificates[0].certificate_detail.tags #=> Array<Tag>
    #   resp.data.certificates[0].certificate_detail.tags[0] #=> Types::Tag
    #   resp.data.certificates[0].certificate_detail.tags[0].key #=> String
    #   resp.data.certificates[0].certificate_detail.tags[0].value #=> String
    #   resp.data.certificates[0].certificate_detail.support_code #=> String
    #   resp.data.certificates[0].tags #=> Array<Tag>
    #
    def get_certificates(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetCertificatesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetCertificatesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetCertificates
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetCertificates
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetCertificates,
        stubs: @stubs,
        params_class: Params::GetCertificatesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_certificates
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the CloudFormation stack record created as a result of the <code>create cloud
    #         formation stack</code> operation.</p>
    #          <p>An AWS CloudFormation stack is used to create a new Amazon EC2 instance from an exported Lightsail
    #       snapshot.</p>
    #
    # @param [Hash] params
    #   See {Types::GetCloudFormationStackRecordsInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetClouFormationStackRecords</code> request.
    #         If your results are paginated, the response will return a next page token that you can specify
    #         as the page token in a subsequent request.</p>
    #
    # @return [Types::GetCloudFormationStackRecordsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_cloud_formation_stack_records(
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetCloudFormationStackRecordsOutput
    #   resp.data.cloud_formation_stack_records #=> Array<CloudFormationStackRecord>
    #   resp.data.cloud_formation_stack_records[0] #=> Types::CloudFormationStackRecord
    #   resp.data.cloud_formation_stack_records[0].name #=> String
    #   resp.data.cloud_formation_stack_records[0].arn #=> String
    #   resp.data.cloud_formation_stack_records[0].created_at #=> Time
    #   resp.data.cloud_formation_stack_records[0].location #=> Types::ResourceLocation
    #   resp.data.cloud_formation_stack_records[0].location.availability_zone #=> String
    #   resp.data.cloud_formation_stack_records[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.cloud_formation_stack_records[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.cloud_formation_stack_records[0].state #=> String, one of ["Started", "Succeeded", "Failed"]
    #   resp.data.cloud_formation_stack_records[0].source_info #=> Array<CloudFormationStackRecordSourceInfo>
    #   resp.data.cloud_formation_stack_records[0].source_info[0] #=> Types::CloudFormationStackRecordSourceInfo
    #   resp.data.cloud_formation_stack_records[0].source_info[0].resource_type #=> String, one of ["ExportSnapshotRecord"]
    #   resp.data.cloud_formation_stack_records[0].source_info[0].name #=> String
    #   resp.data.cloud_formation_stack_records[0].source_info[0].arn #=> String
    #   resp.data.cloud_formation_stack_records[0].destination_info #=> Types::DestinationInfo
    #   resp.data.cloud_formation_stack_records[0].destination_info.id #=> String
    #   resp.data.cloud_formation_stack_records[0].destination_info.service #=> String
    #   resp.data.next_page_token #=> String
    #
    def get_cloud_formation_stack_records(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetCloudFormationStackRecordsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetCloudFormationStackRecordsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetCloudFormationStackRecords
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetCloudFormationStackRecords
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetCloudFormationStackRecords,
        stubs: @stubs,
        params_class: Params::GetCloudFormationStackRecordsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_cloud_formation_stack_records
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about the configured contact methods. Specify a protocol in your
    #       request to return information about a specific contact method.</p>
    #          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
    #       You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services
    #       Regions, and SMS text messages cannot be sent to some countries/regions. For more information,
    #       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetContactMethodsInput}.
    #
    # @option params [Array<String>] :protocols
    #   <p>The protocols used to send notifications, such as <code>Email</code>, or <code>SMS</code>
    #         (text messaging).</p>
    #            <p>Specify a protocol in your request to return information about a specific contact method
    #         protocol.</p>
    #
    # @return [Types::GetContactMethodsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_contact_methods(
    #     protocols: [
    #       'Email' # accepts ["Email", "SMS"]
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetContactMethodsOutput
    #   resp.data.contact_methods #=> Array<ContactMethod>
    #   resp.data.contact_methods[0] #=> Types::ContactMethod
    #   resp.data.contact_methods[0].contact_endpoint #=> String
    #   resp.data.contact_methods[0].status #=> String, one of ["PendingVerification", "Valid", "Invalid"]
    #   resp.data.contact_methods[0].protocol #=> String, one of ["Email", "SMS"]
    #   resp.data.contact_methods[0].name #=> String
    #   resp.data.contact_methods[0].arn #=> String
    #   resp.data.contact_methods[0].created_at #=> Time
    #   resp.data.contact_methods[0].location #=> Types::ResourceLocation
    #   resp.data.contact_methods[0].location.availability_zone #=> String
    #   resp.data.contact_methods[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.contact_methods[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.contact_methods[0].support_code #=> String
    #
    def get_contact_methods(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetContactMethodsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetContactMethodsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetContactMethods
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetContactMethods
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetContactMethods,
        stubs: @stubs,
        params_class: Params::GetContactMethodsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_contact_methods
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about Amazon Lightsail containers, such as the current version of the
    #       Lightsail Control (lightsailctl) plugin.</p>
    #
    # @param [Hash] params
    #   See {Types::GetContainerAPIMetadataInput}.
    #
    # @return [Types::GetContainerAPIMetadataOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_container_api_metadata()
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetContainerAPIMetadataOutput
    #   resp.data.metadata #=> Array<Hash<String, String>>
    #   resp.data.metadata[0] #=> Hash<String, String>
    #   resp.data.metadata[0]['key'] #=> String
    #
    def get_container_api_metadata(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetContainerAPIMetadataInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetContainerAPIMetadataInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetContainerAPIMetadata
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetContainerAPIMetadata
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetContainerAPIMetadata,
        stubs: @stubs,
        params_class: Params::GetContainerAPIMetadataOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_container_api_metadata
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the container images that are registered to your Amazon Lightsail container
    #       service.</p>
    #
    #          <note>
    #             <p>If you created a deployment on your Lightsail container service that uses container
    #         images from a public registry like Docker Hub, those images are not returned as part of this
    #         action. Those images are not registered to your Lightsail container service.</p>
    #          </note>
    #
    # @param [Hash] params
    #   See {Types::GetContainerImagesInput}.
    #
    # @option params [String] :service_name
    #   <p>The name of the container service for which to return registered container images.</p>
    #
    # @return [Types::GetContainerImagesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_container_images(
    #     service_name: 'serviceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetContainerImagesOutput
    #   resp.data.container_images #=> Array<ContainerImage>
    #   resp.data.container_images[0] #=> Types::ContainerImage
    #   resp.data.container_images[0].image #=> String
    #   resp.data.container_images[0].digest #=> String
    #   resp.data.container_images[0].created_at #=> Time
    #
    def get_container_images(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetContainerImagesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetContainerImagesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetContainerImages
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetContainerImages
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetContainerImages,
        stubs: @stubs,
        params_class: Params::GetContainerImagesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_container_images
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the log events of a container of your Amazon Lightsail container service.</p>
    #
    #          <p>If your container service has more than one node (i.e., a scale greater than 1), then the
    #       log events that are returned for the specified container are merged from all nodes on your
    #       container service.</p>
    #
    #          <note>
    #             <p>Container logs are retained for a certain amount of time. For more information, see
    #           <a href="https://docs.aws.amazon.com/general/latest/gr/lightsail.html">Amazon Lightsail
    #           endpoints and quotas</a> in the <i>AWS General Reference</i>.</p>
    #          </note>
    #
    # @param [Hash] params
    #   See {Types::GetContainerLogInput}.
    #
    # @option params [String] :service_name
    #   <p>The name of the container service for which to get a container log.</p>
    #
    # @option params [String] :container_name
    #   <p>The name of the container that is either running or previously ran on the container
    #         service for which to return a log.</p>
    #
    # @option params [Time] :start_time
    #   <p>The start of the time interval for which to get log data.</p>
    #
    #            <p>Constraints:</p>
    #
    #            <ul>
    #               <li>
    #                  <p>Specified in Coordinated Universal Time (UTC).</p>
    #               </li>
    #               <li>
    #                  <p>Specified in the Unix time format.</p>
    #
    #                  <p>For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, specify
    #               <code>1538424000</code> as the start time.</p>
    #               </li>
    #            </ul>
    #
    #            <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p>
    #
    # @option params [Time] :end_time
    #   <p>The end of the time interval for which to get log data.</p>
    #
    #            <p>Constraints:</p>
    #
    #            <ul>
    #               <li>
    #                  <p>Specified in Coordinated Universal Time (UTC).</p>
    #               </li>
    #               <li>
    #                  <p>Specified in the Unix time format.</p>
    #
    #                  <p>For example, if you wish to use an end time of October 1, 2018, at 9 PM UTC, specify
    #               <code>1538427600</code> as the end time.</p>
    #               </li>
    #            </ul>
    #
    #            <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p>
    #
    # @option params [String] :filter_pattern
    #   <p>The pattern to use to filter the returned log events to a specific term.</p>
    #
    #            <p>The following are a few examples of filter patterns that you can specify:</p>
    #            <ul>
    #               <li>
    #                  <p>To return all log events, specify a filter pattern of <code>""</code>.</p>
    #               </li>
    #               <li>
    #                  <p>To exclude log events that contain the <code>ERROR</code> term, and return all other
    #             log events, specify a filter pattern of <code>"-ERROR"</code>.</p>
    #               </li>
    #               <li>
    #                  <p>To return log events that contain the <code>ERROR</code> term, specify a filter
    #             pattern of <code>"ERROR"</code>.</p>
    #               </li>
    #               <li>
    #                  <p>To return log events that contain both the <code>ERROR</code> and
    #               <code>Exception</code> terms, specify a filter pattern of <code>"ERROR
    #             Exception"</code>.</p>
    #               </li>
    #               <li>
    #                  <p>To return log events that contain the <code>ERROR</code>
    #                     <i>or</i> the <code>Exception</code> term, specify a filter pattern of
    #               <code>"?ERROR ?Exception"</code>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #
    #            <p>To get a page token, perform an initial <code>GetContainerLog</code> request. If your
    #         results are paginated, the response will return a next page token that you can specify as the
    #         page token in a subsequent request.</p>
    #
    # @return [Types::GetContainerLogOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_container_log(
    #     service_name: 'serviceName', # required
    #     container_name: 'containerName', # required
    #     start_time: Time.now,
    #     end_time: Time.now,
    #     filter_pattern: 'filterPattern',
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetContainerLogOutput
    #   resp.data.log_events #=> Array<ContainerServiceLogEvent>
    #   resp.data.log_events[0] #=> Types::ContainerServiceLogEvent
    #   resp.data.log_events[0].created_at #=> Time
    #   resp.data.log_events[0].message #=> String
    #   resp.data.next_page_token #=> String
    #
    def get_container_log(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetContainerLogInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetContainerLogInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetContainerLog
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetContainerLog
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetContainerLog,
        stubs: @stubs,
        params_class: Params::GetContainerLogOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_container_log
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the deployments for your Amazon Lightsail container service</p>
    #
    #          <p>A deployment specifies the settings, such as the ports and launch command, of containers
    #       that are deployed to your container service.</p>
    #
    #          <p>The deployments are ordered by version in ascending order. The newest version is listed at
    #       the top of the response.</p>
    #
    #          <note>
    #             <p>A set number of deployments are kept before the oldest one is replaced with the newest
    #         one. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/lightsail.html">Amazon Lightsail
    #           endpoints and quotas</a> in the <i>AWS General Reference</i>.</p>
    #          </note>
    #
    # @param [Hash] params
    #   See {Types::GetContainerServiceDeploymentsInput}.
    #
    # @option params [String] :service_name
    #   <p>The name of the container service for which to return deployments.</p>
    #
    # @return [Types::GetContainerServiceDeploymentsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_container_service_deployments(
    #     service_name: 'serviceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetContainerServiceDeploymentsOutput
    #   resp.data.deployments #=> Array<ContainerServiceDeployment>
    #   resp.data.deployments[0] #=> Types::ContainerServiceDeployment
    #   resp.data.deployments[0].version #=> Integer
    #   resp.data.deployments[0].state #=> String, one of ["ACTIVATING", "ACTIVE", "INACTIVE", "FAILED"]
    #   resp.data.deployments[0].containers #=> Hash<String, Container>
    #   resp.data.deployments[0].containers['key'] #=> Types::Container
    #   resp.data.deployments[0].containers['key'].image #=> String
    #   resp.data.deployments[0].containers['key'].command #=> Array<String>
    #   resp.data.deployments[0].containers['key'].command[0] #=> String
    #   resp.data.deployments[0].containers['key'].environment #=> Hash<String, String>
    #   resp.data.deployments[0].containers['key'].environment['key'] #=> String
    #   resp.data.deployments[0].containers['key'].ports #=> Hash<String, String>
    #   resp.data.deployments[0].containers['key'].ports['key'] #=> String, one of ["HTTP", "HTTPS", "TCP", "UDP"]
    #   resp.data.deployments[0].public_endpoint #=> Types::ContainerServiceEndpoint
    #   resp.data.deployments[0].public_endpoint.container_name #=> String
    #   resp.data.deployments[0].public_endpoint.container_port #=> Integer
    #   resp.data.deployments[0].public_endpoint.health_check #=> Types::ContainerServiceHealthCheckConfig
    #   resp.data.deployments[0].public_endpoint.health_check.healthy_threshold #=> Integer
    #   resp.data.deployments[0].public_endpoint.health_check.unhealthy_threshold #=> Integer
    #   resp.data.deployments[0].public_endpoint.health_check.timeout_seconds #=> Integer
    #   resp.data.deployments[0].public_endpoint.health_check.interval_seconds #=> Integer
    #   resp.data.deployments[0].public_endpoint.health_check.path #=> String
    #   resp.data.deployments[0].public_endpoint.health_check.success_codes #=> String
    #   resp.data.deployments[0].created_at #=> Time
    #
    def get_container_service_deployments(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetContainerServiceDeploymentsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetContainerServiceDeploymentsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetContainerServiceDeployments
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetContainerServiceDeployments
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetContainerServiceDeployments,
        stubs: @stubs,
        params_class: Params::GetContainerServiceDeploymentsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_container_service_deployments
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the data points of a specific metric of your Amazon Lightsail container
    #       service.</p>
    #
    #          <p>Metrics report the utilization of your resources. Monitor and collect metric data
    #       regularly to maintain the reliability, availability, and performance of your resources.</p>
    #
    # @param [Hash] params
    #   See {Types::GetContainerServiceMetricDataInput}.
    #
    # @option params [String] :service_name
    #   <p>The name of the container service for which to get metric data.</p>
    #
    # @option params [String] :metric_name
    #   <p>The metric for which you want to return information.</p>
    #
    #            <p>Valid container service metric names are listed below, along with the most useful
    #         statistics to include in your request, and the published unit value.</p>
    #
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>CPUUtilization</code> - The average percentage of compute units that are
    #             currently in use across all nodes of the container service. This metric identifies the
    #             processing power required to run containers on each node of the container service.</p>
    #                  <p>Statistics: The most useful statistics are <code>Maximum</code> and
    #               <code>Average</code>.</p>
    #                  <p>Unit: The published unit is <code>Percent</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>MemoryUtilization</code> - The average percentage of available memory that is
    #             currently in use across all nodes of the container service. This metric identifies the
    #             memory required to run containers on each node of the container service.</p>
    #                  <p>Statistics: The most useful statistics are <code>Maximum</code> and
    #               <code>Average</code>.</p>
    #                  <p>Unit: The published unit is <code>Percent</code>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Time] :start_time
    #   <p>The start time of the time period.</p>
    #
    # @option params [Time] :end_time
    #   <p>The end time of the time period.</p>
    #
    # @option params [Integer] :period
    #   <p>The granularity, in seconds, of the returned data points.</p>
    #
    #            <p>All container service metric data is available in 5-minute (300 seconds)
    #         granularity.</p>
    #
    # @option params [Array<String>] :statistics
    #   <p>The statistic for the metric.</p>
    #
    #            <p>The following statistics are available:</p>
    #
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>Minimum</code> - The lowest value observed during the specified period. Use this
    #             value to determine low volumes of activity for your application.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Maximum</code> - The highest value observed during the specified period. Use
    #             this value to determine high volumes of activity for your application.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Sum</code> - All values submitted for the matching metric added together. You
    #             can use this statistic to determine the total volume of a metric.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Average</code> - The value of <code>Sum</code> / <code>SampleCount</code> during
    #             the specified period. By comparing this statistic with the <code>Minimum</code> and
    #               <code>Maximum</code> values, you can determine the full scope of a metric and how close
    #             the average use is to the <code>Minimum</code> and <code>Maximum</code> values. This
    #             comparison helps you to know when to increase or decrease your resources.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>SampleCount</code> - The count, or number, of data points used for the
    #             statistical calculation.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::GetContainerServiceMetricDataOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_container_service_metric_data(
    #     service_name: 'serviceName', # required
    #     metric_name: 'CPUUtilization', # required - accepts ["CPUUtilization", "MemoryUtilization"]
    #     start_time: Time.now, # required
    #     end_time: Time.now, # required
    #     period: 1, # required
    #     statistics: [
    #       'Minimum' # accepts ["Minimum", "Maximum", "Sum", "Average", "SampleCount"]
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetContainerServiceMetricDataOutput
    #   resp.data.metric_name #=> String, one of ["CPUUtilization", "MemoryUtilization"]
    #   resp.data.metric_data #=> Array<MetricDatapoint>
    #   resp.data.metric_data[0] #=> Types::MetricDatapoint
    #   resp.data.metric_data[0].average #=> Float
    #   resp.data.metric_data[0].maximum #=> Float
    #   resp.data.metric_data[0].minimum #=> Float
    #   resp.data.metric_data[0].sample_count #=> Float
    #   resp.data.metric_data[0].sum #=> Float
    #   resp.data.metric_data[0].timestamp #=> Time
    #   resp.data.metric_data[0].unit #=> String, one of ["Seconds", "Microseconds", "Milliseconds", "Bytes", "Kilobytes", "Megabytes", "Gigabytes", "Terabytes", "Bits", "Kilobits", "Megabits", "Gigabits", "Terabits", "Percent", "Count", "Bytes/Second", "Kilobytes/Second", "Megabytes/Second", "Gigabytes/Second", "Terabytes/Second", "Bits/Second", "Kilobits/Second", "Megabits/Second", "Gigabits/Second", "Terabits/Second", "Count/Second", "None"]
    #
    def get_container_service_metric_data(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetContainerServiceMetricDataInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetContainerServiceMetricDataInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetContainerServiceMetricData
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetContainerServiceMetricData
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetContainerServiceMetricData,
        stubs: @stubs,
        params_class: Params::GetContainerServiceMetricDataOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_container_service_metric_data
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the list of powers that can be specified for your Amazon Lightsail container
    #       services.</p>
    #
    #          <p>The power specifies the amount of memory, the number of vCPUs, and the base price of the
    #       container service.</p>
    #
    # @param [Hash] params
    #   See {Types::GetContainerServicePowersInput}.
    #
    # @return [Types::GetContainerServicePowersOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_container_service_powers()
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetContainerServicePowersOutput
    #   resp.data.powers #=> Array<ContainerServicePower>
    #   resp.data.powers[0] #=> Types::ContainerServicePower
    #   resp.data.powers[0].power_id #=> String
    #   resp.data.powers[0].price #=> Float
    #   resp.data.powers[0].cpu_count #=> Float
    #   resp.data.powers[0].ram_size_in_gb #=> Float
    #   resp.data.powers[0].name #=> String
    #   resp.data.powers[0].is_active #=> Boolean
    #
    def get_container_service_powers(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetContainerServicePowersInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetContainerServicePowersInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetContainerServicePowers
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetContainerServicePowers
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetContainerServicePowers,
        stubs: @stubs,
        params_class: Params::GetContainerServicePowersOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_container_service_powers
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about one or more of your Amazon Lightsail container services.</p>
    #
    # @param [Hash] params
    #   See {Types::GetContainerServicesInput}.
    #
    # @option params [String] :service_name
    #   <p>The name of the container service for which to return information.</p>
    #
    #            <p>When omitted, the response includes all of your container services in the Amazon Web Services Region where the request is made.</p>
    #
    # @return [Types::GetContainerServicesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_container_services(
    #     service_name: 'serviceName'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetContainerServicesOutput
    #   resp.data.container_services #=> Array<ContainerService>
    #   resp.data.container_services[0] #=> Types::ContainerService
    #   resp.data.container_services[0].container_service_name #=> String
    #   resp.data.container_services[0].arn #=> String
    #   resp.data.container_services[0].created_at #=> Time
    #   resp.data.container_services[0].location #=> Types::ResourceLocation
    #   resp.data.container_services[0].location.availability_zone #=> String
    #   resp.data.container_services[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.container_services[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.container_services[0].tags #=> Array<Tag>
    #   resp.data.container_services[0].tags[0] #=> Types::Tag
    #   resp.data.container_services[0].tags[0].key #=> String
    #   resp.data.container_services[0].tags[0].value #=> String
    #   resp.data.container_services[0].power #=> String, one of ["nano", "micro", "small", "medium", "large", "xlarge"]
    #   resp.data.container_services[0].power_id #=> String
    #   resp.data.container_services[0].state #=> String, one of ["PENDING", "READY", "RUNNING", "UPDATING", "DELETING", "DISABLED", "DEPLOYING"]
    #   resp.data.container_services[0].state_detail #=> Types::ContainerServiceStateDetail
    #   resp.data.container_services[0].state_detail.code #=> String, one of ["CREATING_SYSTEM_RESOURCES", "CREATING_NETWORK_INFRASTRUCTURE", "PROVISIONING_CERTIFICATE", "PROVISIONING_SERVICE", "CREATING_DEPLOYMENT", "EVALUATING_HEALTH_CHECK", "ACTIVATING_DEPLOYMENT", "CERTIFICATE_LIMIT_EXCEEDED", "UNKNOWN_ERROR"]
    #   resp.data.container_services[0].state_detail.message #=> String
    #   resp.data.container_services[0].scale #=> Integer
    #   resp.data.container_services[0].current_deployment #=> Types::ContainerServiceDeployment
    #   resp.data.container_services[0].current_deployment.version #=> Integer
    #   resp.data.container_services[0].current_deployment.state #=> String, one of ["ACTIVATING", "ACTIVE", "INACTIVE", "FAILED"]
    #   resp.data.container_services[0].current_deployment.containers #=> Hash<String, Container>
    #   resp.data.container_services[0].current_deployment.containers['key'] #=> Types::Container
    #   resp.data.container_services[0].current_deployment.containers['key'].image #=> String
    #   resp.data.container_services[0].current_deployment.containers['key'].command #=> Array<String>
    #   resp.data.container_services[0].current_deployment.containers['key'].command[0] #=> String
    #   resp.data.container_services[0].current_deployment.containers['key'].environment #=> Hash<String, String>
    #   resp.data.container_services[0].current_deployment.containers['key'].environment['key'] #=> String
    #   resp.data.container_services[0].current_deployment.containers['key'].ports #=> Hash<String, String>
    #   resp.data.container_services[0].current_deployment.containers['key'].ports['key'] #=> String, one of ["HTTP", "HTTPS", "TCP", "UDP"]
    #   resp.data.container_services[0].current_deployment.public_endpoint #=> Types::ContainerServiceEndpoint
    #   resp.data.container_services[0].current_deployment.public_endpoint.container_name #=> String
    #   resp.data.container_services[0].current_deployment.public_endpoint.container_port #=> Integer
    #   resp.data.container_services[0].current_deployment.public_endpoint.health_check #=> Types::ContainerServiceHealthCheckConfig
    #   resp.data.container_services[0].current_deployment.public_endpoint.health_check.healthy_threshold #=> Integer
    #   resp.data.container_services[0].current_deployment.public_endpoint.health_check.unhealthy_threshold #=> Integer
    #   resp.data.container_services[0].current_deployment.public_endpoint.health_check.timeout_seconds #=> Integer
    #   resp.data.container_services[0].current_deployment.public_endpoint.health_check.interval_seconds #=> Integer
    #   resp.data.container_services[0].current_deployment.public_endpoint.health_check.path #=> String
    #   resp.data.container_services[0].current_deployment.public_endpoint.health_check.success_codes #=> String
    #   resp.data.container_services[0].current_deployment.created_at #=> Time
    #   resp.data.container_services[0].next_deployment #=> Types::ContainerServiceDeployment
    #   resp.data.container_services[0].is_disabled #=> Boolean
    #   resp.data.container_services[0].principal_arn #=> String
    #   resp.data.container_services[0].private_domain_name #=> String
    #   resp.data.container_services[0].public_domain_names #=> Hash<String, Array<String>>
    #   resp.data.container_services[0].public_domain_names['key'] #=> Array<String>
    #   resp.data.container_services[0].public_domain_names['key'][0] #=> String
    #   resp.data.container_services[0].url #=> String
    #   resp.data.container_services[0].private_registry_access #=> Types::PrivateRegistryAccess
    #   resp.data.container_services[0].private_registry_access.ecr_image_puller_role #=> Types::ContainerServiceECRImagePullerRole
    #   resp.data.container_services[0].private_registry_access.ecr_image_puller_role.is_active #=> Boolean
    #   resp.data.container_services[0].private_registry_access.ecr_image_puller_role.principal_arn #=> String
    #
    def get_container_services(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetContainerServicesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetContainerServicesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetContainerServices
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetContainerServices
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetContainerServices,
        stubs: @stubs,
        params_class: Params::GetContainerServicesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_container_services
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about a specific block storage disk.</p>
    #
    # @param [Hash] params
    #   See {Types::GetDiskInput}.
    #
    # @option params [String] :disk_name
    #   <p>The name of the disk (e.g., <code>my-disk</code>).</p>
    #
    # @return [Types::GetDiskOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_disk(
    #     disk_name: 'diskName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetDiskOutput
    #   resp.data.disk #=> Types::Disk
    #   resp.data.disk.name #=> String
    #   resp.data.disk.arn #=> String
    #   resp.data.disk.support_code #=> String
    #   resp.data.disk.created_at #=> Time
    #   resp.data.disk.location #=> Types::ResourceLocation
    #   resp.data.disk.location.availability_zone #=> String
    #   resp.data.disk.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.disk.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.disk.tags #=> Array<Tag>
    #   resp.data.disk.tags[0] #=> Types::Tag
    #   resp.data.disk.tags[0].key #=> String
    #   resp.data.disk.tags[0].value #=> String
    #   resp.data.disk.add_ons #=> Array<AddOn>
    #   resp.data.disk.add_ons[0] #=> Types::AddOn
    #   resp.data.disk.add_ons[0].name #=> String
    #   resp.data.disk.add_ons[0].status #=> String
    #   resp.data.disk.add_ons[0].snapshot_time_of_day #=> String
    #   resp.data.disk.add_ons[0].next_snapshot_time_of_day #=> String
    #   resp.data.disk.size_in_gb #=> Integer
    #   resp.data.disk.is_system_disk #=> Boolean
    #   resp.data.disk.iops #=> Integer
    #   resp.data.disk.path #=> String
    #   resp.data.disk.state #=> String, one of ["pending", "error", "available", "in-use", "unknown"]
    #   resp.data.disk.attached_to #=> String
    #   resp.data.disk.is_attached #=> Boolean
    #   resp.data.disk.attachment_state #=> String
    #   resp.data.disk.gb_in_use #=> Integer
    #
    def get_disk(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetDiskInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetDiskInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetDisk
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetDisk
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetDisk,
        stubs: @stubs,
        params_class: Params::GetDiskOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_disk
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about a specific block storage disk snapshot.</p>
    #
    # @param [Hash] params
    #   See {Types::GetDiskSnapshotInput}.
    #
    # @option params [String] :disk_snapshot_name
    #   <p>The name of the disk snapshot (e.g., <code>my-disk-snapshot</code>).</p>
    #
    # @return [Types::GetDiskSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_disk_snapshot(
    #     disk_snapshot_name: 'diskSnapshotName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetDiskSnapshotOutput
    #   resp.data.disk_snapshot #=> Types::DiskSnapshot
    #   resp.data.disk_snapshot.name #=> String
    #   resp.data.disk_snapshot.arn #=> String
    #   resp.data.disk_snapshot.support_code #=> String
    #   resp.data.disk_snapshot.created_at #=> Time
    #   resp.data.disk_snapshot.location #=> Types::ResourceLocation
    #   resp.data.disk_snapshot.location.availability_zone #=> String
    #   resp.data.disk_snapshot.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.disk_snapshot.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.disk_snapshot.tags #=> Array<Tag>
    #   resp.data.disk_snapshot.tags[0] #=> Types::Tag
    #   resp.data.disk_snapshot.tags[0].key #=> String
    #   resp.data.disk_snapshot.tags[0].value #=> String
    #   resp.data.disk_snapshot.size_in_gb #=> Integer
    #   resp.data.disk_snapshot.state #=> String, one of ["pending", "completed", "error", "unknown"]
    #   resp.data.disk_snapshot.progress #=> String
    #   resp.data.disk_snapshot.from_disk_name #=> String
    #   resp.data.disk_snapshot.from_disk_arn #=> String
    #   resp.data.disk_snapshot.from_instance_name #=> String
    #   resp.data.disk_snapshot.from_instance_arn #=> String
    #   resp.data.disk_snapshot.is_from_auto_snapshot #=> Boolean
    #
    def get_disk_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetDiskSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetDiskSnapshotInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetDiskSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetDiskSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetDiskSnapshot,
        stubs: @stubs,
        params_class: Params::GetDiskSnapshotOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_disk_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about all block storage disk snapshots in your AWS account and
    #       region.</p>
    #
    # @param [Hash] params
    #   See {Types::GetDiskSnapshotsInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetDiskSnapshots</code> request. If your
    #         results are paginated, the response will return a next page token that you can specify as the
    #         page token in a subsequent request.</p>
    #
    # @return [Types::GetDiskSnapshotsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_disk_snapshots(
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetDiskSnapshotsOutput
    #   resp.data.disk_snapshots #=> Array<DiskSnapshot>
    #   resp.data.disk_snapshots[0] #=> Types::DiskSnapshot
    #   resp.data.disk_snapshots[0].name #=> String
    #   resp.data.disk_snapshots[0].arn #=> String
    #   resp.data.disk_snapshots[0].support_code #=> String
    #   resp.data.disk_snapshots[0].created_at #=> Time
    #   resp.data.disk_snapshots[0].location #=> Types::ResourceLocation
    #   resp.data.disk_snapshots[0].location.availability_zone #=> String
    #   resp.data.disk_snapshots[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.disk_snapshots[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.disk_snapshots[0].tags #=> Array<Tag>
    #   resp.data.disk_snapshots[0].tags[0] #=> Types::Tag
    #   resp.data.disk_snapshots[0].tags[0].key #=> String
    #   resp.data.disk_snapshots[0].tags[0].value #=> String
    #   resp.data.disk_snapshots[0].size_in_gb #=> Integer
    #   resp.data.disk_snapshots[0].state #=> String, one of ["pending", "completed", "error", "unknown"]
    #   resp.data.disk_snapshots[0].progress #=> String
    #   resp.data.disk_snapshots[0].from_disk_name #=> String
    #   resp.data.disk_snapshots[0].from_disk_arn #=> String
    #   resp.data.disk_snapshots[0].from_instance_name #=> String
    #   resp.data.disk_snapshots[0].from_instance_arn #=> String
    #   resp.data.disk_snapshots[0].is_from_auto_snapshot #=> Boolean
    #   resp.data.next_page_token #=> String
    #
    def get_disk_snapshots(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetDiskSnapshotsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetDiskSnapshotsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetDiskSnapshots
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetDiskSnapshots
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetDiskSnapshots,
        stubs: @stubs,
        params_class: Params::GetDiskSnapshotsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_disk_snapshots
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about all block storage disks in your AWS account and region.</p>
    #
    # @param [Hash] params
    #   See {Types::GetDisksInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetDisks</code> request. If your results are
    #         paginated, the response will return a next page token that you can specify as the page token
    #         in a subsequent request.</p>
    #
    # @return [Types::GetDisksOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_disks(
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetDisksOutput
    #   resp.data.disks #=> Array<Disk>
    #   resp.data.disks[0] #=> Types::Disk
    #   resp.data.disks[0].name #=> String
    #   resp.data.disks[0].arn #=> String
    #   resp.data.disks[0].support_code #=> String
    #   resp.data.disks[0].created_at #=> Time
    #   resp.data.disks[0].location #=> Types::ResourceLocation
    #   resp.data.disks[0].location.availability_zone #=> String
    #   resp.data.disks[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.disks[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.disks[0].tags #=> Array<Tag>
    #   resp.data.disks[0].tags[0] #=> Types::Tag
    #   resp.data.disks[0].tags[0].key #=> String
    #   resp.data.disks[0].tags[0].value #=> String
    #   resp.data.disks[0].add_ons #=> Array<AddOn>
    #   resp.data.disks[0].add_ons[0] #=> Types::AddOn
    #   resp.data.disks[0].add_ons[0].name #=> String
    #   resp.data.disks[0].add_ons[0].status #=> String
    #   resp.data.disks[0].add_ons[0].snapshot_time_of_day #=> String
    #   resp.data.disks[0].add_ons[0].next_snapshot_time_of_day #=> String
    #   resp.data.disks[0].size_in_gb #=> Integer
    #   resp.data.disks[0].is_system_disk #=> Boolean
    #   resp.data.disks[0].iops #=> Integer
    #   resp.data.disks[0].path #=> String
    #   resp.data.disks[0].state #=> String, one of ["pending", "error", "available", "in-use", "unknown"]
    #   resp.data.disks[0].attached_to #=> String
    #   resp.data.disks[0].is_attached #=> Boolean
    #   resp.data.disks[0].attachment_state #=> String
    #   resp.data.disks[0].gb_in_use #=> Integer
    #   resp.data.next_page_token #=> String
    #
    def get_disks(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetDisksInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetDisksInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetDisks
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetDisks
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetDisks,
        stubs: @stubs,
        params_class: Params::GetDisksOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_disks
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the bundles that can be applied to your Amazon Lightsail content delivery network
    #       (CDN) distributions.</p>
    #          <p>A distribution bundle specifies the monthly network transfer quota and monthly cost of
    #       your distribution.</p>
    #
    # @param [Hash] params
    #   See {Types::GetDistributionBundlesInput}.
    #
    # @return [Types::GetDistributionBundlesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_distribution_bundles()
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetDistributionBundlesOutput
    #   resp.data.bundles #=> Array<DistributionBundle>
    #   resp.data.bundles[0] #=> Types::DistributionBundle
    #   resp.data.bundles[0].bundle_id #=> String
    #   resp.data.bundles[0].name #=> String
    #   resp.data.bundles[0].price #=> Float
    #   resp.data.bundles[0].transfer_per_month_in_gb #=> Integer
    #   resp.data.bundles[0].is_active #=> Boolean
    #
    def get_distribution_bundles(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetDistributionBundlesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetDistributionBundlesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetDistributionBundles
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetDistributionBundles
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetDistributionBundles,
        stubs: @stubs,
        params_class: Params::GetDistributionBundlesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_distribution_bundles
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the timestamp and status of the last cache reset of a specific Amazon Lightsail
    #       content delivery network (CDN) distribution.</p>
    #
    # @param [Hash] params
    #   See {Types::GetDistributionLatestCacheResetInput}.
    #
    # @option params [String] :distribution_name
    #   <p>The name of the distribution for which to return the timestamp of the last cache
    #         reset.</p>
    #            <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    #         can specify.</p>
    #            <p>When omitted, the response includes the latest cache reset timestamp of all your
    #         distributions.</p>
    #
    # @return [Types::GetDistributionLatestCacheResetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_distribution_latest_cache_reset(
    #     distribution_name: 'distributionName'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetDistributionLatestCacheResetOutput
    #   resp.data.status #=> String
    #   resp.data.create_time #=> Time
    #
    def get_distribution_latest_cache_reset(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetDistributionLatestCacheResetInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetDistributionLatestCacheResetInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetDistributionLatestCacheReset
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetDistributionLatestCacheReset
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetDistributionLatestCacheReset,
        stubs: @stubs,
        params_class: Params::GetDistributionLatestCacheResetOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_distribution_latest_cache_reset
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the data points of a specific metric for an Amazon Lightsail content delivery
    #       network (CDN) distribution.</p>
    #          <p>Metrics report the utilization of your resources, and the error counts generated by them.
    #       Monitor and collect metric data regularly to maintain the reliability, availability, and
    #       performance of your resources.</p>
    #
    # @param [Hash] params
    #   See {Types::GetDistributionMetricDataInput}.
    #
    # @option params [String] :distribution_name
    #   <p>The name of the distribution for which to get metric data.</p>
    #            <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    #         can specify.</p>
    #
    # @option params [String] :metric_name
    #   <p>The metric for which you want to return information.</p>
    #            <p>Valid distribution metric names are listed below, along with the most useful
    #           <code>statistics</code> to include in your request, and the published <code>unit</code>
    #         value.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>Requests</code>
    #                     </b> - The total number of viewer
    #             requests received by your Lightsail distribution, for all HTTP methods, and for both
    #             HTTP and HTTPS requests.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>None</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>BytesDownloaded</code>
    #                     </b> - The number of bytes
    #             downloaded by viewers for GET, HEAD, and OPTIONS requests.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>None</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>BytesUploaded </code>
    #                     </b> - The number of bytes
    #             uploaded to your origin by your Lightsail distribution, using POST and PUT
    #             requests.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>None</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>TotalErrorRate</code>
    #                     </b> - The percentage of all
    #             viewer requests for which the response's HTTP status code was 4xx or 5xx.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Percent</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>4xxErrorRate</code>
    #                     </b> - The percentage of all
    #             viewer requests for which the response's HTTP status cod was 4xx. In these cases, the
    #             client or client viewer may have made an error. For example, a status code of 404 (Not
    #             Found) means that the client requested an object that could not be found.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Percent</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>5xxErrorRate</code>
    #                     </b> - The percentage of all
    #             viewer requests for which the response's HTTP status code was 5xx. In these cases, the
    #             origin server did not satisfy the requests. For example, a status code of 503 (Service
    #             Unavailable) means that the origin server is currently unavailable.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Percent</code>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Time] :start_time
    #   <p>The start of the time interval for which to get metric data.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Specified in Coordinated Universal Time (UTC).</p>
    #               </li>
    #               <li>
    #                  <p>Specified in the Unix time format.</p>
    #                  <p>For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, specify
    #               <code>1538424000</code> as the start time.</p>
    #               </li>
    #            </ul>
    #            <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p>
    #
    # @option params [Time] :end_time
    #   <p>The end of the time interval for which to get metric data.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Specified in Coordinated Universal Time (UTC).</p>
    #               </li>
    #               <li>
    #                  <p>Specified in the Unix time format.</p>
    #                  <p>For example, if you wish to use an end time of October 1, 2018, at 9 PM UTC, specify
    #               <code>1538427600</code> as the end time.</p>
    #               </li>
    #            </ul>
    #            <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p>
    #
    # @option params [Integer] :period
    #   <p>The granularity, in seconds, for the metric data points that will be returned.</p>
    #
    # @option params [String] :unit
    #   <p>The unit for the metric data request.</p>
    #            <p>Valid units depend on the metric data being requested. For the valid units with each
    #         available metric, see the <code>metricName</code> parameter.</p>
    #
    # @option params [Array<String>] :statistics
    #   <p>The statistic for the metric.</p>
    #            <p>The following statistics are available:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>Minimum</code> - The lowest value observed during the specified period. Use this
    #             value to determine low volumes of activity for your application.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Maximum</code> - The highest value observed during the specified period. Use
    #             this value to determine high volumes of activity for your application.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Sum</code> - All values submitted for the matching metric added together. You
    #             can use this statistic to determine the total volume of a metric.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Average</code> - The value of Sum / SampleCount during the specified period. By
    #             comparing this statistic with the Minimum and Maximum values, you can determine the full
    #             scope of a metric and how close the average use is to the Minimum and Maximum values. This
    #             comparison helps you to know when to increase or decrease your resources.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>SampleCount</code> - The count, or number, of data points used for the
    #             statistical calculation.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::GetDistributionMetricDataOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_distribution_metric_data(
    #     distribution_name: 'distributionName', # required
    #     metric_name: 'Requests', # required - accepts ["Requests", "BytesDownloaded", "BytesUploaded", "TotalErrorRate", "Http4xxErrorRate", "Http5xxErrorRate"]
    #     start_time: Time.now, # required
    #     end_time: Time.now, # required
    #     period: 1, # required
    #     unit: 'Seconds', # required - accepts ["Seconds", "Microseconds", "Milliseconds", "Bytes", "Kilobytes", "Megabytes", "Gigabytes", "Terabytes", "Bits", "Kilobits", "Megabits", "Gigabits", "Terabits", "Percent", "Count", "Bytes/Second", "Kilobytes/Second", "Megabytes/Second", "Gigabytes/Second", "Terabytes/Second", "Bits/Second", "Kilobits/Second", "Megabits/Second", "Gigabits/Second", "Terabits/Second", "Count/Second", "None"]
    #     statistics: [
    #       'Minimum' # accepts ["Minimum", "Maximum", "Sum", "Average", "SampleCount"]
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetDistributionMetricDataOutput
    #   resp.data.metric_name #=> String, one of ["Requests", "BytesDownloaded", "BytesUploaded", "TotalErrorRate", "Http4xxErrorRate", "Http5xxErrorRate"]
    #   resp.data.metric_data #=> Array<MetricDatapoint>
    #   resp.data.metric_data[0] #=> Types::MetricDatapoint
    #   resp.data.metric_data[0].average #=> Float
    #   resp.data.metric_data[0].maximum #=> Float
    #   resp.data.metric_data[0].minimum #=> Float
    #   resp.data.metric_data[0].sample_count #=> Float
    #   resp.data.metric_data[0].sum #=> Float
    #   resp.data.metric_data[0].timestamp #=> Time
    #   resp.data.metric_data[0].unit #=> String, one of ["Seconds", "Microseconds", "Milliseconds", "Bytes", "Kilobytes", "Megabytes", "Gigabytes", "Terabytes", "Bits", "Kilobits", "Megabits", "Gigabits", "Terabits", "Percent", "Count", "Bytes/Second", "Kilobytes/Second", "Megabytes/Second", "Gigabytes/Second", "Terabytes/Second", "Bits/Second", "Kilobits/Second", "Megabits/Second", "Gigabits/Second", "Terabits/Second", "Count/Second", "None"]
    #
    def get_distribution_metric_data(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetDistributionMetricDataInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetDistributionMetricDataInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetDistributionMetricData
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetDistributionMetricData
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetDistributionMetricData,
        stubs: @stubs,
        params_class: Params::GetDistributionMetricDataOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_distribution_metric_data
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about one or more of your Amazon Lightsail content delivery network
    #       (CDN) distributions.</p>
    #
    # @param [Hash] params
    #   See {Types::GetDistributionsInput}.
    #
    # @option params [String] :distribution_name
    #   <p>The name of the distribution for which to return information.</p>
    #
    #            <p>When omitted, the response includes all of your distributions in the Amazon Web Services
    #         Region where the request is made.</p>
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetDistributions</code> request. If your
    #         results are paginated, the response will return a next page token that you can specify as the
    #         page token in a subsequent request.</p>
    #
    # @return [Types::GetDistributionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_distributions(
    #     distribution_name: 'distributionName',
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetDistributionsOutput
    #   resp.data.distributions #=> Array<LightsailDistribution>
    #   resp.data.distributions[0] #=> Types::LightsailDistribution
    #   resp.data.distributions[0].name #=> String
    #   resp.data.distributions[0].arn #=> String
    #   resp.data.distributions[0].support_code #=> String
    #   resp.data.distributions[0].created_at #=> Time
    #   resp.data.distributions[0].location #=> Types::ResourceLocation
    #   resp.data.distributions[0].location.availability_zone #=> String
    #   resp.data.distributions[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.distributions[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.distributions[0].alternative_domain_names #=> Array<String>
    #   resp.data.distributions[0].alternative_domain_names[0] #=> String
    #   resp.data.distributions[0].status #=> String
    #   resp.data.distributions[0].is_enabled #=> Boolean
    #   resp.data.distributions[0].domain_name #=> String
    #   resp.data.distributions[0].bundle_id #=> String
    #   resp.data.distributions[0].certificate_name #=> String
    #   resp.data.distributions[0].origin #=> Types::Origin
    #   resp.data.distributions[0].origin.name #=> String
    #   resp.data.distributions[0].origin.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.distributions[0].origin.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.distributions[0].origin.protocol_policy #=> String, one of ["http-only", "https-only"]
    #   resp.data.distributions[0].origin_public_dns #=> String
    #   resp.data.distributions[0].default_cache_behavior #=> Types::CacheBehavior
    #   resp.data.distributions[0].default_cache_behavior.behavior #=> String, one of ["dont-cache", "cache"]
    #   resp.data.distributions[0].cache_behavior_settings #=> Types::CacheSettings
    #   resp.data.distributions[0].cache_behavior_settings.default_ttl #=> Integer
    #   resp.data.distributions[0].cache_behavior_settings.minimum_ttl #=> Integer
    #   resp.data.distributions[0].cache_behavior_settings.maximum_ttl #=> Integer
    #   resp.data.distributions[0].cache_behavior_settings.allowed_http_methods #=> String
    #   resp.data.distributions[0].cache_behavior_settings.cached_http_methods #=> String
    #   resp.data.distributions[0].cache_behavior_settings.forwarded_cookies #=> Types::CookieObject
    #   resp.data.distributions[0].cache_behavior_settings.forwarded_cookies.option #=> String, one of ["none", "allow-list", "all"]
    #   resp.data.distributions[0].cache_behavior_settings.forwarded_cookies.cookies_allow_list #=> Array<String>
    #   resp.data.distributions[0].cache_behavior_settings.forwarded_headers #=> Types::HeaderObject
    #   resp.data.distributions[0].cache_behavior_settings.forwarded_headers.option #=> String, one of ["none", "allow-list", "all"]
    #   resp.data.distributions[0].cache_behavior_settings.forwarded_headers.headers_allow_list #=> Array<String>
    #   resp.data.distributions[0].cache_behavior_settings.forwarded_headers.headers_allow_list[0] #=> String, one of ["Accept", "Accept-Charset", "Accept-Datetime", "Accept-Encoding", "Accept-Language", "Authorization", "CloudFront-Forwarded-Proto", "CloudFront-Is-Desktop-Viewer", "CloudFront-Is-Mobile-Viewer", "CloudFront-Is-SmartTV-Viewer", "CloudFront-Is-Tablet-Viewer", "CloudFront-Viewer-Country", "Host", "Origin", "Referer"]
    #   resp.data.distributions[0].cache_behavior_settings.forwarded_query_strings #=> Types::QueryStringObject
    #   resp.data.distributions[0].cache_behavior_settings.forwarded_query_strings.option #=> Boolean
    #   resp.data.distributions[0].cache_behavior_settings.forwarded_query_strings.query_strings_allow_list #=> Array<String>
    #   resp.data.distributions[0].cache_behaviors #=> Array<CacheBehaviorPerPath>
    #   resp.data.distributions[0].cache_behaviors[0] #=> Types::CacheBehaviorPerPath
    #   resp.data.distributions[0].cache_behaviors[0].path #=> String
    #   resp.data.distributions[0].cache_behaviors[0].behavior #=> String, one of ["dont-cache", "cache"]
    #   resp.data.distributions[0].able_to_update_bundle #=> Boolean
    #   resp.data.distributions[0].ip_address_type #=> String, one of ["dualstack", "ipv4"]
    #   resp.data.distributions[0].tags #=> Array<Tag>
    #   resp.data.distributions[0].tags[0] #=> Types::Tag
    #   resp.data.distributions[0].tags[0].key #=> String
    #   resp.data.distributions[0].tags[0].value #=> String
    #   resp.data.next_page_token #=> String
    #
    def get_distributions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetDistributionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetDistributionsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetDistributions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetDistributions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetDistributions,
        stubs: @stubs,
        params_class: Params::GetDistributionsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_distributions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about a specific domain recordset.</p>
    #
    # @param [Hash] params
    #   See {Types::GetDomainInput}.
    #
    # @option params [String] :domain_name
    #   <p>The domain name for which your want to return information about.</p>
    #
    # @return [Types::GetDomainOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_domain(
    #     domain_name: 'domainName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetDomainOutput
    #   resp.data.domain #=> Types::Domain
    #   resp.data.domain.name #=> String
    #   resp.data.domain.arn #=> String
    #   resp.data.domain.support_code #=> String
    #   resp.data.domain.created_at #=> Time
    #   resp.data.domain.location #=> Types::ResourceLocation
    #   resp.data.domain.location.availability_zone #=> String
    #   resp.data.domain.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.domain.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.domain.tags #=> Array<Tag>
    #   resp.data.domain.tags[0] #=> Types::Tag
    #   resp.data.domain.tags[0].key #=> String
    #   resp.data.domain.tags[0].value #=> String
    #   resp.data.domain.domain_entries #=> Array<DomainEntry>
    #   resp.data.domain.domain_entries[0] #=> Types::DomainEntry
    #   resp.data.domain.domain_entries[0].id #=> String
    #   resp.data.domain.domain_entries[0].name #=> String
    #   resp.data.domain.domain_entries[0].target #=> String
    #   resp.data.domain.domain_entries[0].is_alias #=> Boolean
    #   resp.data.domain.domain_entries[0].type #=> String
    #   resp.data.domain.domain_entries[0].options #=> Hash<String, String>
    #   resp.data.domain.domain_entries[0].options['key'] #=> String
    #
    def get_domain(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetDomainInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetDomainInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetDomain
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetDomain
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetDomain,
        stubs: @stubs,
        params_class: Params::GetDomainOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_domain
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a list of all domains in the user's account.</p>
    #
    # @param [Hash] params
    #   See {Types::GetDomainsInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetDomains</code> request. If your results
    #         are paginated, the response will return a next page token that you can specify as the page
    #         token in a subsequent request.</p>
    #
    # @return [Types::GetDomainsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_domains(
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetDomainsOutput
    #   resp.data.domains #=> Array<Domain>
    #   resp.data.domains[0] #=> Types::Domain
    #   resp.data.domains[0].name #=> String
    #   resp.data.domains[0].arn #=> String
    #   resp.data.domains[0].support_code #=> String
    #   resp.data.domains[0].created_at #=> Time
    #   resp.data.domains[0].location #=> Types::ResourceLocation
    #   resp.data.domains[0].location.availability_zone #=> String
    #   resp.data.domains[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.domains[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.domains[0].tags #=> Array<Tag>
    #   resp.data.domains[0].tags[0] #=> Types::Tag
    #   resp.data.domains[0].tags[0].key #=> String
    #   resp.data.domains[0].tags[0].value #=> String
    #   resp.data.domains[0].domain_entries #=> Array<DomainEntry>
    #   resp.data.domains[0].domain_entries[0] #=> Types::DomainEntry
    #   resp.data.domains[0].domain_entries[0].id #=> String
    #   resp.data.domains[0].domain_entries[0].name #=> String
    #   resp.data.domains[0].domain_entries[0].target #=> String
    #   resp.data.domains[0].domain_entries[0].is_alias #=> Boolean
    #   resp.data.domains[0].domain_entries[0].type #=> String
    #   resp.data.domains[0].domain_entries[0].options #=> Hash<String, String>
    #   resp.data.domains[0].domain_entries[0].options['key'] #=> String
    #   resp.data.next_page_token #=> String
    #
    def get_domains(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetDomainsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetDomainsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetDomains
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetDomains
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetDomains,
        stubs: @stubs,
        params_class: Params::GetDomainsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_domains
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns all export snapshot records created as a result of the <code>export
    #         snapshot</code> operation.</p>
    #          <p>An export snapshot record can be used to create a new Amazon EC2 instance and its related
    #       resources with the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateCloudFormationStack.html">CreateCloudFormationStack</a>
    #       action.</p>
    #
    # @param [Hash] params
    #   See {Types::GetExportSnapshotRecordsInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetExportSnapshotRecords</code> request. If
    #         your results are paginated, the response will return a next page token that you can specify as
    #         the page token in a subsequent request.</p>
    #
    # @return [Types::GetExportSnapshotRecordsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_export_snapshot_records(
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetExportSnapshotRecordsOutput
    #   resp.data.export_snapshot_records #=> Array<ExportSnapshotRecord>
    #   resp.data.export_snapshot_records[0] #=> Types::ExportSnapshotRecord
    #   resp.data.export_snapshot_records[0].name #=> String
    #   resp.data.export_snapshot_records[0].arn #=> String
    #   resp.data.export_snapshot_records[0].created_at #=> Time
    #   resp.data.export_snapshot_records[0].location #=> Types::ResourceLocation
    #   resp.data.export_snapshot_records[0].location.availability_zone #=> String
    #   resp.data.export_snapshot_records[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.export_snapshot_records[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.export_snapshot_records[0].state #=> String, one of ["Started", "Succeeded", "Failed"]
    #   resp.data.export_snapshot_records[0].source_info #=> Types::ExportSnapshotRecordSourceInfo
    #   resp.data.export_snapshot_records[0].source_info.resource_type #=> String, one of ["InstanceSnapshot", "DiskSnapshot"]
    #   resp.data.export_snapshot_records[0].source_info.created_at #=> Time
    #   resp.data.export_snapshot_records[0].source_info.name #=> String
    #   resp.data.export_snapshot_records[0].source_info.arn #=> String
    #   resp.data.export_snapshot_records[0].source_info.from_resource_name #=> String
    #   resp.data.export_snapshot_records[0].source_info.from_resource_arn #=> String
    #   resp.data.export_snapshot_records[0].source_info.instance_snapshot_info #=> Types::InstanceSnapshotInfo
    #   resp.data.export_snapshot_records[0].source_info.instance_snapshot_info.from_bundle_id #=> String
    #   resp.data.export_snapshot_records[0].source_info.instance_snapshot_info.from_blueprint_id #=> String
    #   resp.data.export_snapshot_records[0].source_info.instance_snapshot_info.from_disk_info #=> Array<DiskInfo>
    #   resp.data.export_snapshot_records[0].source_info.instance_snapshot_info.from_disk_info[0] #=> Types::DiskInfo
    #   resp.data.export_snapshot_records[0].source_info.instance_snapshot_info.from_disk_info[0].name #=> String
    #   resp.data.export_snapshot_records[0].source_info.instance_snapshot_info.from_disk_info[0].path #=> String
    #   resp.data.export_snapshot_records[0].source_info.instance_snapshot_info.from_disk_info[0].size_in_gb #=> Integer
    #   resp.data.export_snapshot_records[0].source_info.instance_snapshot_info.from_disk_info[0].is_system_disk #=> Boolean
    #   resp.data.export_snapshot_records[0].source_info.disk_snapshot_info #=> Types::DiskSnapshotInfo
    #   resp.data.export_snapshot_records[0].source_info.disk_snapshot_info.size_in_gb #=> Integer
    #   resp.data.export_snapshot_records[0].destination_info #=> Types::DestinationInfo
    #   resp.data.export_snapshot_records[0].destination_info.id #=> String
    #   resp.data.export_snapshot_records[0].destination_info.service #=> String
    #   resp.data.next_page_token #=> String
    #
    def get_export_snapshot_records(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetExportSnapshotRecordsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetExportSnapshotRecordsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetExportSnapshotRecords
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetExportSnapshotRecords
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetExportSnapshotRecords,
        stubs: @stubs,
        params_class: Params::GetExportSnapshotRecordsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_export_snapshot_records
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about a specific Amazon Lightsail instance, which is a virtual private
    #       server.</p>
    #
    # @param [Hash] params
    #   See {Types::GetInstanceInput}.
    #
    # @option params [String] :instance_name
    #   <p>The name of the instance.</p>
    #
    # @return [Types::GetInstanceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_instance(
    #     instance_name: 'instanceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetInstanceOutput
    #   resp.data.instance #=> Types::Instance
    #   resp.data.instance.name #=> String
    #   resp.data.instance.arn #=> String
    #   resp.data.instance.support_code #=> String
    #   resp.data.instance.created_at #=> Time
    #   resp.data.instance.location #=> Types::ResourceLocation
    #   resp.data.instance.location.availability_zone #=> String
    #   resp.data.instance.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.instance.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.instance.tags #=> Array<Tag>
    #   resp.data.instance.tags[0] #=> Types::Tag
    #   resp.data.instance.tags[0].key #=> String
    #   resp.data.instance.tags[0].value #=> String
    #   resp.data.instance.blueprint_id #=> String
    #   resp.data.instance.blueprint_name #=> String
    #   resp.data.instance.bundle_id #=> String
    #   resp.data.instance.add_ons #=> Array<AddOn>
    #   resp.data.instance.add_ons[0] #=> Types::AddOn
    #   resp.data.instance.add_ons[0].name #=> String
    #   resp.data.instance.add_ons[0].status #=> String
    #   resp.data.instance.add_ons[0].snapshot_time_of_day #=> String
    #   resp.data.instance.add_ons[0].next_snapshot_time_of_day #=> String
    #   resp.data.instance.is_static_ip #=> Boolean
    #   resp.data.instance.private_ip_address #=> String
    #   resp.data.instance.public_ip_address #=> String
    #   resp.data.instance.ipv6_addresses #=> Array<String>
    #   resp.data.instance.ipv6_addresses[0] #=> String
    #   resp.data.instance.ip_address_type #=> String, one of ["dualstack", "ipv4"]
    #   resp.data.instance.hardware #=> Types::InstanceHardware
    #   resp.data.instance.hardware.cpu_count #=> Integer
    #   resp.data.instance.hardware.disks #=> Array<Disk>
    #   resp.data.instance.hardware.disks[0] #=> Types::Disk
    #   resp.data.instance.hardware.disks[0].name #=> String
    #   resp.data.instance.hardware.disks[0].arn #=> String
    #   resp.data.instance.hardware.disks[0].support_code #=> String
    #   resp.data.instance.hardware.disks[0].created_at #=> Time
    #   resp.data.instance.hardware.disks[0].location #=> Types::ResourceLocation
    #   resp.data.instance.hardware.disks[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.instance.hardware.disks[0].tags #=> Array<Tag>
    #   resp.data.instance.hardware.disks[0].add_ons #=> Array<AddOn>
    #   resp.data.instance.hardware.disks[0].size_in_gb #=> Integer
    #   resp.data.instance.hardware.disks[0].is_system_disk #=> Boolean
    #   resp.data.instance.hardware.disks[0].iops #=> Integer
    #   resp.data.instance.hardware.disks[0].path #=> String
    #   resp.data.instance.hardware.disks[0].state #=> String, one of ["pending", "error", "available", "in-use", "unknown"]
    #   resp.data.instance.hardware.disks[0].attached_to #=> String
    #   resp.data.instance.hardware.disks[0].is_attached #=> Boolean
    #   resp.data.instance.hardware.disks[0].attachment_state #=> String
    #   resp.data.instance.hardware.disks[0].gb_in_use #=> Integer
    #   resp.data.instance.hardware.ram_size_in_gb #=> Float
    #   resp.data.instance.networking #=> Types::InstanceNetworking
    #   resp.data.instance.networking.monthly_transfer #=> Types::MonthlyTransfer
    #   resp.data.instance.networking.monthly_transfer.gb_per_month_allocated #=> Integer
    #   resp.data.instance.networking.ports #=> Array<InstancePortInfo>
    #   resp.data.instance.networking.ports[0] #=> Types::InstancePortInfo
    #   resp.data.instance.networking.ports[0].from_port #=> Integer
    #   resp.data.instance.networking.ports[0].to_port #=> Integer
    #   resp.data.instance.networking.ports[0].protocol #=> String, one of ["tcp", "all", "udp", "icmp"]
    #   resp.data.instance.networking.ports[0].access_from #=> String
    #   resp.data.instance.networking.ports[0].access_type #=> String, one of ["Public", "Private"]
    #   resp.data.instance.networking.ports[0].common_name #=> String
    #   resp.data.instance.networking.ports[0].access_direction #=> String, one of ["inbound", "outbound"]
    #   resp.data.instance.networking.ports[0].cidrs #=> Array<String>
    #   resp.data.instance.networking.ports[0].cidrs[0] #=> String
    #   resp.data.instance.networking.ports[0].ipv6_cidrs #=> Array<String>
    #   resp.data.instance.networking.ports[0].cidr_list_aliases #=> Array<String>
    #   resp.data.instance.state #=> Types::InstanceState
    #   resp.data.instance.state.code #=> Integer
    #   resp.data.instance.state.name #=> String
    #   resp.data.instance.username #=> String
    #   resp.data.instance.ssh_key_name #=> String
    #
    def get_instance(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetInstanceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetInstanceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetInstance
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetInstance
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetInstance,
        stubs: @stubs,
        params_class: Params::GetInstanceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_instance
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns temporary SSH keys you can use to connect to a specific virtual private server, or
    #         <i>instance</i>.</p>
    #          <p>The <code>get instance access details</code> operation supports tag-based access control
    #       via resource tags applied to the resource identified by <code>instance name</code>. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetInstanceAccessDetailsInput}.
    #
    # @option params [String] :instance_name
    #   <p>The name of the instance to access.</p>
    #
    # @option params [String] :protocol
    #   <p>The protocol to use to connect to your instance. Defaults to <code>ssh</code>.</p>
    #
    # @return [Types::GetInstanceAccessDetailsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_instance_access_details(
    #     instance_name: 'instanceName', # required
    #     protocol: 'ssh' # accepts ["ssh", "rdp"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetInstanceAccessDetailsOutput
    #   resp.data.access_details #=> Types::InstanceAccessDetails
    #   resp.data.access_details.cert_key #=> String
    #   resp.data.access_details.expires_at #=> Time
    #   resp.data.access_details.ip_address #=> String
    #   resp.data.access_details.password #=> String
    #   resp.data.access_details.password_data #=> Types::PasswordData
    #   resp.data.access_details.password_data.ciphertext #=> String
    #   resp.data.access_details.password_data.key_pair_name #=> String
    #   resp.data.access_details.private_key #=> String
    #   resp.data.access_details.protocol #=> String, one of ["ssh", "rdp"]
    #   resp.data.access_details.instance_name #=> String
    #   resp.data.access_details.username #=> String
    #   resp.data.access_details.host_keys #=> Array<HostKeyAttributes>
    #   resp.data.access_details.host_keys[0] #=> Types::HostKeyAttributes
    #   resp.data.access_details.host_keys[0].algorithm #=> String
    #   resp.data.access_details.host_keys[0].public_key #=> String
    #   resp.data.access_details.host_keys[0].witnessed_at #=> Time
    #   resp.data.access_details.host_keys[0].fingerprint_sha1 #=> String
    #   resp.data.access_details.host_keys[0].fingerprint_sha256 #=> String
    #   resp.data.access_details.host_keys[0].not_valid_before #=> Time
    #   resp.data.access_details.host_keys[0].not_valid_after #=> Time
    #
    def get_instance_access_details(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetInstanceAccessDetailsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetInstanceAccessDetailsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetInstanceAccessDetails
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetInstanceAccessDetails
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetInstanceAccessDetails,
        stubs: @stubs,
        params_class: Params::GetInstanceAccessDetailsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_instance_access_details
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the data points for the specified Amazon Lightsail instance metric, given an
    #       instance name.</p>
    #          <p>Metrics report the utilization of your resources, and the error counts generated by them.
    #       Monitor and collect metric data regularly to maintain the reliability, availability, and
    #       performance of your resources.</p>
    #
    # @param [Hash] params
    #   See {Types::GetInstanceMetricDataInput}.
    #
    # @option params [String] :instance_name
    #   <p>The name of the instance for which you want to get metrics data.</p>
    #
    # @option params [String] :metric_name
    #   <p>The metric for which you want to return information.</p>
    #            <p>Valid instance metric names are listed below, along with the most useful
    #           <code>statistics</code> to include in your request, and the published <code>unit</code>
    #         value.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>BurstCapacityPercentage</code>
    #                     </b> - The percentage
    #             of CPU performance available for your instance to burst above its baseline. Your instance
    #             continuously accrues and consumes burst capacity. Burst capacity stops accruing when your
    #             instance's <code>BurstCapacityPercentage</code> reaches 100%. For more information, see
    #               <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-viewing-instance-burst-capacity">Viewing instance burst capacity in Amazon Lightsail</a>.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and
    #               <code>Average</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Percent</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>BurstCapacityTime</code>
    #                     </b> - The available amount
    #             of time for your instance to burst at 100% CPU utilization. Your instance continuously
    #             accrues and consumes burst capacity. Burst capacity time stops accruing when your
    #             instance's <code>BurstCapacityPercentage</code> metric reaches 100%.</p>
    #                  <p>Burst capacity time is consumed at the full rate only when your instance operates at
    #             100% CPU utilization. For example, if your instance operates at 50% CPU utilization in the
    #             burstable zone for a 5-minute period, then it consumes CPU burst capacity minutes at a 50%
    #             rate in that period. Your instance consumed 2 minutes and 30 seconds of CPU burst capacity
    #             minutes in the 5-minute period. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-viewing-instance-burst-capacity">Viewing instance burst capacity in Amazon Lightsail</a>.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and
    #               <code>Average</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Seconds</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>CPUUtilization</code>
    #                     </b> - The percentage of
    #             allocated compute units that are currently in use on the instance. This metric identifies
    #             the processing power to run the applications on the instance. Tools in your operating
    #             system can show a lower percentage than Lightsail when the instance is not allocated a
    #             full processor core.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and
    #               <code>Average</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Percent</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>NetworkIn</code>
    #                     </b> - The number of bytes received
    #             on all network interfaces by the instance. This metric identifies the volume of incoming
    #             network traffic to the instance. The number reported is the number of bytes received
    #             during the period. Because this metric is reported in 5-minute intervals, divide the
    #             reported number by 300 to find Bytes/second.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Bytes</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>NetworkOut</code>
    #                     </b> - The number of bytes sent
    #             out on all network interfaces by the instance. This metric identifies the volume of
    #             outgoing network traffic from the instance. The number reported is the number of bytes
    #             sent during the period. Because this metric is reported in 5-minute intervals, divide the
    #             reported number by 300 to find Bytes/second.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Bytes</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>StatusCheckFailed</code>
    #                     </b> - Reports whether the
    #             instance passed or failed both the instance status check and the system status check. This
    #             metric can be either 0 (passed) or 1 (failed). This metric data is available in 1-minute
    #             (60 seconds) granularity.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>StatusCheckFailed_Instance</code>
    #                     </b> - Reports
    #             whether the instance passed or failed the instance status check. This metric can be either
    #             0 (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds)
    #             granularity.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>StatusCheckFailed_System</code>
    #                     </b> - Reports
    #             whether the instance passed or failed the system status check. This metric can be either 0
    #             (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds)
    #             granularity.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :period
    #   <p>The granularity, in seconds, of the returned data points.</p>
    #            <p>The <code>StatusCheckFailed</code>, <code>StatusCheckFailed_Instance</code>, and
    #           <code>StatusCheckFailed_System</code> instance metric data is available in 1-minute (60
    #         seconds) granularity. All other instance metric data is available in 5-minute (300 seconds)
    #         granularity.</p>
    #
    # @option params [Time] :start_time
    #   <p>The start time of the time period.</p>
    #
    # @option params [Time] :end_time
    #   <p>The end time of the time period.</p>
    #
    # @option params [String] :unit
    #   <p>The unit for the metric data request. Valid units depend on the metric data being
    #         requested. For the valid units to specify with each available metric, see the
    #           <code>metricName</code> parameter.</p>
    #
    # @option params [Array<String>] :statistics
    #   <p>The statistic for the metric.</p>
    #            <p>The following statistics are available:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>Minimum</code> - The lowest value observed during the specified period. Use this
    #             value to determine low volumes of activity for your application.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Maximum</code> - The highest value observed during the specified period. Use
    #             this value to determine high volumes of activity for your application.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Sum</code> - All values submitted for the matching metric added together. You
    #             can use this statistic to determine the total volume of a metric.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Average</code> - The value of Sum / SampleCount during the specified period. By
    #             comparing this statistic with the Minimum and Maximum values, you can determine the full
    #             scope of a metric and how close the average use is to the Minimum and Maximum values. This
    #             comparison helps you to know when to increase or decrease your resources.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>SampleCount</code> - The count, or number, of data points used for the
    #             statistical calculation.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::GetInstanceMetricDataOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_instance_metric_data(
    #     instance_name: 'instanceName', # required
    #     metric_name: 'CPUUtilization', # required - accepts ["CPUUtilization", "NetworkIn", "NetworkOut", "StatusCheckFailed", "StatusCheckFailed_Instance", "StatusCheckFailed_System", "BurstCapacityTime", "BurstCapacityPercentage"]
    #     period: 1, # required
    #     start_time: Time.now, # required
    #     end_time: Time.now, # required
    #     unit: 'Seconds', # required - accepts ["Seconds", "Microseconds", "Milliseconds", "Bytes", "Kilobytes", "Megabytes", "Gigabytes", "Terabytes", "Bits", "Kilobits", "Megabits", "Gigabits", "Terabits", "Percent", "Count", "Bytes/Second", "Kilobytes/Second", "Megabytes/Second", "Gigabytes/Second", "Terabytes/Second", "Bits/Second", "Kilobits/Second", "Megabits/Second", "Gigabits/Second", "Terabits/Second", "Count/Second", "None"]
    #     statistics: [
    #       'Minimum' # accepts ["Minimum", "Maximum", "Sum", "Average", "SampleCount"]
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetInstanceMetricDataOutput
    #   resp.data.metric_name #=> String, one of ["CPUUtilization", "NetworkIn", "NetworkOut", "StatusCheckFailed", "StatusCheckFailed_Instance", "StatusCheckFailed_System", "BurstCapacityTime", "BurstCapacityPercentage"]
    #   resp.data.metric_data #=> Array<MetricDatapoint>
    #   resp.data.metric_data[0] #=> Types::MetricDatapoint
    #   resp.data.metric_data[0].average #=> Float
    #   resp.data.metric_data[0].maximum #=> Float
    #   resp.data.metric_data[0].minimum #=> Float
    #   resp.data.metric_data[0].sample_count #=> Float
    #   resp.data.metric_data[0].sum #=> Float
    #   resp.data.metric_data[0].timestamp #=> Time
    #   resp.data.metric_data[0].unit #=> String, one of ["Seconds", "Microseconds", "Milliseconds", "Bytes", "Kilobytes", "Megabytes", "Gigabytes", "Terabytes", "Bits", "Kilobits", "Megabits", "Gigabits", "Terabits", "Percent", "Count", "Bytes/Second", "Kilobytes/Second", "Megabytes/Second", "Gigabytes/Second", "Terabytes/Second", "Bits/Second", "Kilobits/Second", "Megabits/Second", "Gigabits/Second", "Terabits/Second", "Count/Second", "None"]
    #
    def get_instance_metric_data(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetInstanceMetricDataInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetInstanceMetricDataInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetInstanceMetricData
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetInstanceMetricData
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetInstanceMetricData,
        stubs: @stubs,
        params_class: Params::GetInstanceMetricDataOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_instance_metric_data
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the firewall port states for a specific Amazon Lightsail instance, the IP addresses
    #       allowed to connect to the instance through the ports, and the protocol.</p>
    #
    # @param [Hash] params
    #   See {Types::GetInstancePortStatesInput}.
    #
    # @option params [String] :instance_name
    #   <p>The name of the instance for which to return firewall port states.</p>
    #
    # @return [Types::GetInstancePortStatesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_instance_port_states(
    #     instance_name: 'instanceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetInstancePortStatesOutput
    #   resp.data.port_states #=> Array<InstancePortState>
    #   resp.data.port_states[0] #=> Types::InstancePortState
    #   resp.data.port_states[0].from_port #=> Integer
    #   resp.data.port_states[0].to_port #=> Integer
    #   resp.data.port_states[0].protocol #=> String, one of ["tcp", "all", "udp", "icmp"]
    #   resp.data.port_states[0].state #=> String, one of ["open", "closed"]
    #   resp.data.port_states[0].cidrs #=> Array<String>
    #   resp.data.port_states[0].cidrs[0] #=> String
    #   resp.data.port_states[0].ipv6_cidrs #=> Array<String>
    #   resp.data.port_states[0].cidr_list_aliases #=> Array<String>
    #
    def get_instance_port_states(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetInstancePortStatesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetInstancePortStatesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetInstancePortStates
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetInstancePortStates
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetInstancePortStates,
        stubs: @stubs,
        params_class: Params::GetInstancePortStatesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_instance_port_states
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about a specific instance snapshot.</p>
    #
    # @param [Hash] params
    #   See {Types::GetInstanceSnapshotInput}.
    #
    # @option params [String] :instance_snapshot_name
    #   <p>The name of the snapshot for which you are requesting information.</p>
    #
    # @return [Types::GetInstanceSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_instance_snapshot(
    #     instance_snapshot_name: 'instanceSnapshotName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetInstanceSnapshotOutput
    #   resp.data.instance_snapshot #=> Types::InstanceSnapshot
    #   resp.data.instance_snapshot.name #=> String
    #   resp.data.instance_snapshot.arn #=> String
    #   resp.data.instance_snapshot.support_code #=> String
    #   resp.data.instance_snapshot.created_at #=> Time
    #   resp.data.instance_snapshot.location #=> Types::ResourceLocation
    #   resp.data.instance_snapshot.location.availability_zone #=> String
    #   resp.data.instance_snapshot.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.instance_snapshot.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.instance_snapshot.tags #=> Array<Tag>
    #   resp.data.instance_snapshot.tags[0] #=> Types::Tag
    #   resp.data.instance_snapshot.tags[0].key #=> String
    #   resp.data.instance_snapshot.tags[0].value #=> String
    #   resp.data.instance_snapshot.state #=> String, one of ["pending", "error", "available"]
    #   resp.data.instance_snapshot.progress #=> String
    #   resp.data.instance_snapshot.from_attached_disks #=> Array<Disk>
    #   resp.data.instance_snapshot.from_attached_disks[0] #=> Types::Disk
    #   resp.data.instance_snapshot.from_attached_disks[0].name #=> String
    #   resp.data.instance_snapshot.from_attached_disks[0].arn #=> String
    #   resp.data.instance_snapshot.from_attached_disks[0].support_code #=> String
    #   resp.data.instance_snapshot.from_attached_disks[0].created_at #=> Time
    #   resp.data.instance_snapshot.from_attached_disks[0].location #=> Types::ResourceLocation
    #   resp.data.instance_snapshot.from_attached_disks[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.instance_snapshot.from_attached_disks[0].tags #=> Array<Tag>
    #   resp.data.instance_snapshot.from_attached_disks[0].add_ons #=> Array<AddOn>
    #   resp.data.instance_snapshot.from_attached_disks[0].add_ons[0] #=> Types::AddOn
    #   resp.data.instance_snapshot.from_attached_disks[0].add_ons[0].name #=> String
    #   resp.data.instance_snapshot.from_attached_disks[0].add_ons[0].status #=> String
    #   resp.data.instance_snapshot.from_attached_disks[0].add_ons[0].snapshot_time_of_day #=> String
    #   resp.data.instance_snapshot.from_attached_disks[0].add_ons[0].next_snapshot_time_of_day #=> String
    #   resp.data.instance_snapshot.from_attached_disks[0].size_in_gb #=> Integer
    #   resp.data.instance_snapshot.from_attached_disks[0].is_system_disk #=> Boolean
    #   resp.data.instance_snapshot.from_attached_disks[0].iops #=> Integer
    #   resp.data.instance_snapshot.from_attached_disks[0].path #=> String
    #   resp.data.instance_snapshot.from_attached_disks[0].state #=> String, one of ["pending", "error", "available", "in-use", "unknown"]
    #   resp.data.instance_snapshot.from_attached_disks[0].attached_to #=> String
    #   resp.data.instance_snapshot.from_attached_disks[0].is_attached #=> Boolean
    #   resp.data.instance_snapshot.from_attached_disks[0].attachment_state #=> String
    #   resp.data.instance_snapshot.from_attached_disks[0].gb_in_use #=> Integer
    #   resp.data.instance_snapshot.from_instance_name #=> String
    #   resp.data.instance_snapshot.from_instance_arn #=> String
    #   resp.data.instance_snapshot.from_blueprint_id #=> String
    #   resp.data.instance_snapshot.from_bundle_id #=> String
    #   resp.data.instance_snapshot.is_from_auto_snapshot #=> Boolean
    #   resp.data.instance_snapshot.size_in_gb #=> Integer
    #
    def get_instance_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetInstanceSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetInstanceSnapshotInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetInstanceSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetInstanceSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetInstanceSnapshot,
        stubs: @stubs,
        params_class: Params::GetInstanceSnapshotOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_instance_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns all instance snapshots for the user's account.</p>
    #
    # @param [Hash] params
    #   See {Types::GetInstanceSnapshotsInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetInstanceSnapshots</code> request. If your
    #         results are paginated, the response will return a next page token that you can specify as the
    #         page token in a subsequent request.</p>
    #
    # @return [Types::GetInstanceSnapshotsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_instance_snapshots(
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetInstanceSnapshotsOutput
    #   resp.data.instance_snapshots #=> Array<InstanceSnapshot>
    #   resp.data.instance_snapshots[0] #=> Types::InstanceSnapshot
    #   resp.data.instance_snapshots[0].name #=> String
    #   resp.data.instance_snapshots[0].arn #=> String
    #   resp.data.instance_snapshots[0].support_code #=> String
    #   resp.data.instance_snapshots[0].created_at #=> Time
    #   resp.data.instance_snapshots[0].location #=> Types::ResourceLocation
    #   resp.data.instance_snapshots[0].location.availability_zone #=> String
    #   resp.data.instance_snapshots[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.instance_snapshots[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.instance_snapshots[0].tags #=> Array<Tag>
    #   resp.data.instance_snapshots[0].tags[0] #=> Types::Tag
    #   resp.data.instance_snapshots[0].tags[0].key #=> String
    #   resp.data.instance_snapshots[0].tags[0].value #=> String
    #   resp.data.instance_snapshots[0].state #=> String, one of ["pending", "error", "available"]
    #   resp.data.instance_snapshots[0].progress #=> String
    #   resp.data.instance_snapshots[0].from_attached_disks #=> Array<Disk>
    #   resp.data.instance_snapshots[0].from_attached_disks[0] #=> Types::Disk
    #   resp.data.instance_snapshots[0].from_attached_disks[0].name #=> String
    #   resp.data.instance_snapshots[0].from_attached_disks[0].arn #=> String
    #   resp.data.instance_snapshots[0].from_attached_disks[0].support_code #=> String
    #   resp.data.instance_snapshots[0].from_attached_disks[0].created_at #=> Time
    #   resp.data.instance_snapshots[0].from_attached_disks[0].location #=> Types::ResourceLocation
    #   resp.data.instance_snapshots[0].from_attached_disks[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.instance_snapshots[0].from_attached_disks[0].tags #=> Array<Tag>
    #   resp.data.instance_snapshots[0].from_attached_disks[0].add_ons #=> Array<AddOn>
    #   resp.data.instance_snapshots[0].from_attached_disks[0].add_ons[0] #=> Types::AddOn
    #   resp.data.instance_snapshots[0].from_attached_disks[0].add_ons[0].name #=> String
    #   resp.data.instance_snapshots[0].from_attached_disks[0].add_ons[0].status #=> String
    #   resp.data.instance_snapshots[0].from_attached_disks[0].add_ons[0].snapshot_time_of_day #=> String
    #   resp.data.instance_snapshots[0].from_attached_disks[0].add_ons[0].next_snapshot_time_of_day #=> String
    #   resp.data.instance_snapshots[0].from_attached_disks[0].size_in_gb #=> Integer
    #   resp.data.instance_snapshots[0].from_attached_disks[0].is_system_disk #=> Boolean
    #   resp.data.instance_snapshots[0].from_attached_disks[0].iops #=> Integer
    #   resp.data.instance_snapshots[0].from_attached_disks[0].path #=> String
    #   resp.data.instance_snapshots[0].from_attached_disks[0].state #=> String, one of ["pending", "error", "available", "in-use", "unknown"]
    #   resp.data.instance_snapshots[0].from_attached_disks[0].attached_to #=> String
    #   resp.data.instance_snapshots[0].from_attached_disks[0].is_attached #=> Boolean
    #   resp.data.instance_snapshots[0].from_attached_disks[0].attachment_state #=> String
    #   resp.data.instance_snapshots[0].from_attached_disks[0].gb_in_use #=> Integer
    #   resp.data.instance_snapshots[0].from_instance_name #=> String
    #   resp.data.instance_snapshots[0].from_instance_arn #=> String
    #   resp.data.instance_snapshots[0].from_blueprint_id #=> String
    #   resp.data.instance_snapshots[0].from_bundle_id #=> String
    #   resp.data.instance_snapshots[0].is_from_auto_snapshot #=> Boolean
    #   resp.data.instance_snapshots[0].size_in_gb #=> Integer
    #   resp.data.next_page_token #=> String
    #
    def get_instance_snapshots(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetInstanceSnapshotsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetInstanceSnapshotsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetInstanceSnapshots
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetInstanceSnapshots
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetInstanceSnapshots,
        stubs: @stubs,
        params_class: Params::GetInstanceSnapshotsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_instance_snapshots
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the state of a specific instance. Works on one instance at a time.</p>
    #
    # @param [Hash] params
    #   See {Types::GetInstanceStateInput}.
    #
    # @option params [String] :instance_name
    #   <p>The name of the instance to get state information about.</p>
    #
    # @return [Types::GetInstanceStateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_instance_state(
    #     instance_name: 'instanceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetInstanceStateOutput
    #   resp.data.state #=> Types::InstanceState
    #   resp.data.state.code #=> Integer
    #   resp.data.state.name #=> String
    #
    def get_instance_state(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetInstanceStateInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetInstanceStateInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetInstanceState
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetInstanceState
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetInstanceState,
        stubs: @stubs,
        params_class: Params::GetInstanceStateOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_instance_state
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about all Amazon Lightsail virtual private servers, or
    #         <i>instances</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetInstancesInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetInstances</code> request. If your results
    #         are paginated, the response will return a next page token that you can specify as the page
    #         token in a subsequent request.</p>
    #
    # @return [Types::GetInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_instances(
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetInstancesOutput
    #   resp.data.instances #=> Array<Instance>
    #   resp.data.instances[0] #=> Types::Instance
    #   resp.data.instances[0].name #=> String
    #   resp.data.instances[0].arn #=> String
    #   resp.data.instances[0].support_code #=> String
    #   resp.data.instances[0].created_at #=> Time
    #   resp.data.instances[0].location #=> Types::ResourceLocation
    #   resp.data.instances[0].location.availability_zone #=> String
    #   resp.data.instances[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.instances[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.instances[0].tags #=> Array<Tag>
    #   resp.data.instances[0].tags[0] #=> Types::Tag
    #   resp.data.instances[0].tags[0].key #=> String
    #   resp.data.instances[0].tags[0].value #=> String
    #   resp.data.instances[0].blueprint_id #=> String
    #   resp.data.instances[0].blueprint_name #=> String
    #   resp.data.instances[0].bundle_id #=> String
    #   resp.data.instances[0].add_ons #=> Array<AddOn>
    #   resp.data.instances[0].add_ons[0] #=> Types::AddOn
    #   resp.data.instances[0].add_ons[0].name #=> String
    #   resp.data.instances[0].add_ons[0].status #=> String
    #   resp.data.instances[0].add_ons[0].snapshot_time_of_day #=> String
    #   resp.data.instances[0].add_ons[0].next_snapshot_time_of_day #=> String
    #   resp.data.instances[0].is_static_ip #=> Boolean
    #   resp.data.instances[0].private_ip_address #=> String
    #   resp.data.instances[0].public_ip_address #=> String
    #   resp.data.instances[0].ipv6_addresses #=> Array<String>
    #   resp.data.instances[0].ipv6_addresses[0] #=> String
    #   resp.data.instances[0].ip_address_type #=> String, one of ["dualstack", "ipv4"]
    #   resp.data.instances[0].hardware #=> Types::InstanceHardware
    #   resp.data.instances[0].hardware.cpu_count #=> Integer
    #   resp.data.instances[0].hardware.disks #=> Array<Disk>
    #   resp.data.instances[0].hardware.disks[0] #=> Types::Disk
    #   resp.data.instances[0].hardware.disks[0].name #=> String
    #   resp.data.instances[0].hardware.disks[0].arn #=> String
    #   resp.data.instances[0].hardware.disks[0].support_code #=> String
    #   resp.data.instances[0].hardware.disks[0].created_at #=> Time
    #   resp.data.instances[0].hardware.disks[0].location #=> Types::ResourceLocation
    #   resp.data.instances[0].hardware.disks[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.instances[0].hardware.disks[0].tags #=> Array<Tag>
    #   resp.data.instances[0].hardware.disks[0].add_ons #=> Array<AddOn>
    #   resp.data.instances[0].hardware.disks[0].size_in_gb #=> Integer
    #   resp.data.instances[0].hardware.disks[0].is_system_disk #=> Boolean
    #   resp.data.instances[0].hardware.disks[0].iops #=> Integer
    #   resp.data.instances[0].hardware.disks[0].path #=> String
    #   resp.data.instances[0].hardware.disks[0].state #=> String, one of ["pending", "error", "available", "in-use", "unknown"]
    #   resp.data.instances[0].hardware.disks[0].attached_to #=> String
    #   resp.data.instances[0].hardware.disks[0].is_attached #=> Boolean
    #   resp.data.instances[0].hardware.disks[0].attachment_state #=> String
    #   resp.data.instances[0].hardware.disks[0].gb_in_use #=> Integer
    #   resp.data.instances[0].hardware.ram_size_in_gb #=> Float
    #   resp.data.instances[0].networking #=> Types::InstanceNetworking
    #   resp.data.instances[0].networking.monthly_transfer #=> Types::MonthlyTransfer
    #   resp.data.instances[0].networking.monthly_transfer.gb_per_month_allocated #=> Integer
    #   resp.data.instances[0].networking.ports #=> Array<InstancePortInfo>
    #   resp.data.instances[0].networking.ports[0] #=> Types::InstancePortInfo
    #   resp.data.instances[0].networking.ports[0].from_port #=> Integer
    #   resp.data.instances[0].networking.ports[0].to_port #=> Integer
    #   resp.data.instances[0].networking.ports[0].protocol #=> String, one of ["tcp", "all", "udp", "icmp"]
    #   resp.data.instances[0].networking.ports[0].access_from #=> String
    #   resp.data.instances[0].networking.ports[0].access_type #=> String, one of ["Public", "Private"]
    #   resp.data.instances[0].networking.ports[0].common_name #=> String
    #   resp.data.instances[0].networking.ports[0].access_direction #=> String, one of ["inbound", "outbound"]
    #   resp.data.instances[0].networking.ports[0].cidrs #=> Array<String>
    #   resp.data.instances[0].networking.ports[0].cidrs[0] #=> String
    #   resp.data.instances[0].networking.ports[0].ipv6_cidrs #=> Array<String>
    #   resp.data.instances[0].networking.ports[0].cidr_list_aliases #=> Array<String>
    #   resp.data.instances[0].state #=> Types::InstanceState
    #   resp.data.instances[0].state.code #=> Integer
    #   resp.data.instances[0].state.name #=> String
    #   resp.data.instances[0].username #=> String
    #   resp.data.instances[0].ssh_key_name #=> String
    #   resp.data.next_page_token #=> String
    #
    def get_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetInstancesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetInstances,
        stubs: @stubs,
        params_class: Params::GetInstancesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about a specific key pair.</p>
    #
    # @param [Hash] params
    #   See {Types::GetKeyPairInput}.
    #
    # @option params [String] :key_pair_name
    #   <p>The name of the key pair for which you are requesting information.</p>
    #
    # @return [Types::GetKeyPairOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_key_pair(
    #     key_pair_name: 'keyPairName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetKeyPairOutput
    #   resp.data.key_pair #=> Types::KeyPair
    #   resp.data.key_pair.name #=> String
    #   resp.data.key_pair.arn #=> String
    #   resp.data.key_pair.support_code #=> String
    #   resp.data.key_pair.created_at #=> Time
    #   resp.data.key_pair.location #=> Types::ResourceLocation
    #   resp.data.key_pair.location.availability_zone #=> String
    #   resp.data.key_pair.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.key_pair.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.key_pair.tags #=> Array<Tag>
    #   resp.data.key_pair.tags[0] #=> Types::Tag
    #   resp.data.key_pair.tags[0].key #=> String
    #   resp.data.key_pair.tags[0].value #=> String
    #   resp.data.key_pair.fingerprint #=> String
    #
    def get_key_pair(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetKeyPairInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetKeyPairInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetKeyPair
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetKeyPair
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetKeyPair,
        stubs: @stubs,
        params_class: Params::GetKeyPairOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_key_pair
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about all key pairs in the user's account.</p>
    #
    # @param [Hash] params
    #   See {Types::GetKeyPairsInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetKeyPairs</code> request. If your results
    #         are paginated, the response will return a next page token that you can specify as the page
    #         token in a subsequent request.</p>
    #
    # @option params [Boolean] :include_default_key_pair
    #   <p>A Boolean value that indicates whether to include the default key pair in the response of
    #         your request.</p>
    #
    # @return [Types::GetKeyPairsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_key_pairs(
    #     page_token: 'pageToken',
    #     include_default_key_pair: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetKeyPairsOutput
    #   resp.data.key_pairs #=> Array<KeyPair>
    #   resp.data.key_pairs[0] #=> Types::KeyPair
    #   resp.data.key_pairs[0].name #=> String
    #   resp.data.key_pairs[0].arn #=> String
    #   resp.data.key_pairs[0].support_code #=> String
    #   resp.data.key_pairs[0].created_at #=> Time
    #   resp.data.key_pairs[0].location #=> Types::ResourceLocation
    #   resp.data.key_pairs[0].location.availability_zone #=> String
    #   resp.data.key_pairs[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.key_pairs[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.key_pairs[0].tags #=> Array<Tag>
    #   resp.data.key_pairs[0].tags[0] #=> Types::Tag
    #   resp.data.key_pairs[0].tags[0].key #=> String
    #   resp.data.key_pairs[0].tags[0].value #=> String
    #   resp.data.key_pairs[0].fingerprint #=> String
    #   resp.data.next_page_token #=> String
    #
    def get_key_pairs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetKeyPairsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetKeyPairsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetKeyPairs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetKeyPairs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetKeyPairs,
        stubs: @stubs,
        params_class: Params::GetKeyPairsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_key_pairs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about the specified Lightsail load balancer.</p>
    #
    # @param [Hash] params
    #   See {Types::GetLoadBalancerInput}.
    #
    # @option params [String] :load_balancer_name
    #   <p>The name of the load balancer.</p>
    #
    # @return [Types::GetLoadBalancerOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_load_balancer(
    #     load_balancer_name: 'loadBalancerName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetLoadBalancerOutput
    #   resp.data.load_balancer #=> Types::LoadBalancer
    #   resp.data.load_balancer.name #=> String
    #   resp.data.load_balancer.arn #=> String
    #   resp.data.load_balancer.support_code #=> String
    #   resp.data.load_balancer.created_at #=> Time
    #   resp.data.load_balancer.location #=> Types::ResourceLocation
    #   resp.data.load_balancer.location.availability_zone #=> String
    #   resp.data.load_balancer.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.load_balancer.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.load_balancer.tags #=> Array<Tag>
    #   resp.data.load_balancer.tags[0] #=> Types::Tag
    #   resp.data.load_balancer.tags[0].key #=> String
    #   resp.data.load_balancer.tags[0].value #=> String
    #   resp.data.load_balancer.dns_name #=> String
    #   resp.data.load_balancer.state #=> String, one of ["active", "provisioning", "active_impaired", "failed", "unknown"]
    #   resp.data.load_balancer.protocol #=> String, one of ["HTTP_HTTPS", "HTTP"]
    #   resp.data.load_balancer.public_ports #=> Array<Integer>
    #   resp.data.load_balancer.public_ports[0] #=> Integer
    #   resp.data.load_balancer.health_check_path #=> String
    #   resp.data.load_balancer.instance_port #=> Integer
    #   resp.data.load_balancer.instance_health_summary #=> Array<InstanceHealthSummary>
    #   resp.data.load_balancer.instance_health_summary[0] #=> Types::InstanceHealthSummary
    #   resp.data.load_balancer.instance_health_summary[0].instance_name #=> String
    #   resp.data.load_balancer.instance_health_summary[0].instance_health #=> String, one of ["initial", "healthy", "unhealthy", "unused", "draining", "unavailable"]
    #   resp.data.load_balancer.instance_health_summary[0].instance_health_reason #=> String, one of ["Lb.RegistrationInProgress", "Lb.InitialHealthChecking", "Lb.InternalError", "Instance.ResponseCodeMismatch", "Instance.Timeout", "Instance.FailedHealthChecks", "Instance.NotRegistered", "Instance.NotInUse", "Instance.DeregistrationInProgress", "Instance.InvalidState", "Instance.IpUnusable"]
    #   resp.data.load_balancer.tls_certificate_summaries #=> Array<LoadBalancerTlsCertificateSummary>
    #   resp.data.load_balancer.tls_certificate_summaries[0] #=> Types::LoadBalancerTlsCertificateSummary
    #   resp.data.load_balancer.tls_certificate_summaries[0].name #=> String
    #   resp.data.load_balancer.tls_certificate_summaries[0].is_attached #=> Boolean
    #   resp.data.load_balancer.configuration_options #=> Hash<String, String>
    #   resp.data.load_balancer.configuration_options['key'] #=> String
    #   resp.data.load_balancer.ip_address_type #=> String, one of ["dualstack", "ipv4"]
    #   resp.data.load_balancer.https_redirection_enabled #=> Boolean
    #   resp.data.load_balancer.tls_policy_name #=> String
    #
    def get_load_balancer(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetLoadBalancerInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetLoadBalancerInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetLoadBalancer
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetLoadBalancer
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetLoadBalancer,
        stubs: @stubs,
        params_class: Params::GetLoadBalancerOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_load_balancer
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about health metrics for your Lightsail load balancer.</p>
    #          <p>Metrics report the utilization of your resources, and the error counts generated by them.
    #       Monitor and collect metric data regularly to maintain the reliability, availability, and
    #       performance of your resources.</p>
    #
    # @param [Hash] params
    #   See {Types::GetLoadBalancerMetricDataInput}.
    #
    # @option params [String] :load_balancer_name
    #   <p>The name of the load balancer.</p>
    #
    # @option params [String] :metric_name
    #   <p>The metric for which you want to return information.</p>
    #            <p>Valid load balancer metric names are listed below, along with the most useful
    #           <code>statistics</code> to include in your request, and the published <code>unit</code>
    #         value.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>ClientTLSNegotiationErrorCount</code>
    #                     </b> - The
    #             number of TLS connections initiated by the client that did not establish a session with
    #             the load balancer due to a TLS error generated by the load balancer. Possible causes
    #             include a mismatch of ciphers or protocols.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>HealthyHostCount</code>
    #                     </b> - The number of target
    #             instances that are considered healthy.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic are <code>Average</code>,
    #               <code>Minimum</code>, and <code>Maximum</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>HTTPCode_Instance_2XX_Count</code>
    #                     </b> - The number
    #             of HTTP 2XX response codes generated by the target instances. This does not include any
    #             response codes generated by the load balancer.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
    #               <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
    #               <code>1</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>HTTPCode_Instance_3XX_Count</code>
    #                     </b> - The number
    #             of HTTP 3XX response codes generated by the target instances. This does not include any
    #             response codes generated by the load balancer.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
    #               <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
    #               <code>1</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>HTTPCode_Instance_4XX_Count</code>
    #                     </b> - The number
    #             of HTTP 4XX response codes generated by the target instances. This does not include any
    #             response codes generated by the load balancer.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
    #               <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
    #               <code>1</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>HTTPCode_Instance_5XX_Count</code>
    #                     </b> - The number
    #             of HTTP 5XX response codes generated by the target instances. This does not include any
    #             response codes generated by the load balancer.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
    #               <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
    #               <code>1</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>HTTPCode_LB_4XX_Count</code>
    #                     </b> - The number of
    #             HTTP 4XX client error codes that originated from the load balancer. Client errors are
    #             generated when requests are malformed or incomplete. These requests were not received by
    #             the target instance. This count does not include response codes generated by the target
    #             instances.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
    #               <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
    #               <code>1</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>HTTPCode_LB_5XX_Count</code>
    #                     </b> - The number of
    #             HTTP 5XX server error codes that originated from the load balancer. This does not include
    #             any response codes generated by the target instance. This metric is reported if there are
    #             no healthy instances attached to the load balancer, or if the request rate exceeds the
    #             capacity of the instances (spillover) or the load balancer.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
    #               <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
    #               <code>1</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>InstanceResponseTime</code>
    #                     </b> - The time elapsed,
    #             in seconds, after the request leaves the load balancer until a response from the target
    #             instance is received.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Seconds</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>RejectedConnectionCount</code>
    #                     </b> - The number of
    #             connections that were rejected because the load balancer had reached its maximum number of
    #             connections.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>RequestCount</code>
    #                     </b> - The number of requests
    #             processed over IPv4. This count includes only the requests with a response generated by a
    #             target instance of the load balancer.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
    #               <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
    #               <code>1</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>UnhealthyHostCount</code>
    #                     </b> - The number of
    #             target instances that are considered unhealthy.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic are <code>Average</code>,
    #               <code>Minimum</code>, and <code>Maximum</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :period
    #   <p>The granularity, in seconds, of the returned data points.</p>
    #
    # @option params [Time] :start_time
    #   <p>The start time of the period.</p>
    #
    # @option params [Time] :end_time
    #   <p>The end time of the period.</p>
    #
    # @option params [String] :unit
    #   <p>The unit for the metric data request. Valid units depend on the metric data being
    #         requested. For the valid units with each available metric, see the <code>metricName</code>
    #         parameter.</p>
    #
    # @option params [Array<String>] :statistics
    #   <p>The statistic for the metric.</p>
    #            <p>The following statistics are available:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>Minimum</code> - The lowest value observed during the specified period. Use this
    #             value to determine low volumes of activity for your application.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Maximum</code> - The highest value observed during the specified period. Use
    #             this value to determine high volumes of activity for your application.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Sum</code> - All values submitted for the matching metric added together. You
    #             can use this statistic to determine the total volume of a metric.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Average</code> - The value of Sum / SampleCount during the specified period. By
    #             comparing this statistic with the Minimum and Maximum values, you can determine the full
    #             scope of a metric and how close the average use is to the Minimum and Maximum values. This
    #             comparison helps you to know when to increase or decrease your resources.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>SampleCount</code> - The count, or number, of data points used for the
    #             statistical calculation.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::GetLoadBalancerMetricDataOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_load_balancer_metric_data(
    #     load_balancer_name: 'loadBalancerName', # required
    #     metric_name: 'ClientTLSNegotiationErrorCount', # required - accepts ["ClientTLSNegotiationErrorCount", "HealthyHostCount", "UnhealthyHostCount", "HTTPCode_LB_4XX_Count", "HTTPCode_LB_5XX_Count", "HTTPCode_Instance_2XX_Count", "HTTPCode_Instance_3XX_Count", "HTTPCode_Instance_4XX_Count", "HTTPCode_Instance_5XX_Count", "InstanceResponseTime", "RejectedConnectionCount", "RequestCount"]
    #     period: 1, # required
    #     start_time: Time.now, # required
    #     end_time: Time.now, # required
    #     unit: 'Seconds', # required - accepts ["Seconds", "Microseconds", "Milliseconds", "Bytes", "Kilobytes", "Megabytes", "Gigabytes", "Terabytes", "Bits", "Kilobits", "Megabits", "Gigabits", "Terabits", "Percent", "Count", "Bytes/Second", "Kilobytes/Second", "Megabytes/Second", "Gigabytes/Second", "Terabytes/Second", "Bits/Second", "Kilobits/Second", "Megabits/Second", "Gigabits/Second", "Terabits/Second", "Count/Second", "None"]
    #     statistics: [
    #       'Minimum' # accepts ["Minimum", "Maximum", "Sum", "Average", "SampleCount"]
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetLoadBalancerMetricDataOutput
    #   resp.data.metric_name #=> String, one of ["ClientTLSNegotiationErrorCount", "HealthyHostCount", "UnhealthyHostCount", "HTTPCode_LB_4XX_Count", "HTTPCode_LB_5XX_Count", "HTTPCode_Instance_2XX_Count", "HTTPCode_Instance_3XX_Count", "HTTPCode_Instance_4XX_Count", "HTTPCode_Instance_5XX_Count", "InstanceResponseTime", "RejectedConnectionCount", "RequestCount"]
    #   resp.data.metric_data #=> Array<MetricDatapoint>
    #   resp.data.metric_data[0] #=> Types::MetricDatapoint
    #   resp.data.metric_data[0].average #=> Float
    #   resp.data.metric_data[0].maximum #=> Float
    #   resp.data.metric_data[0].minimum #=> Float
    #   resp.data.metric_data[0].sample_count #=> Float
    #   resp.data.metric_data[0].sum #=> Float
    #   resp.data.metric_data[0].timestamp #=> Time
    #   resp.data.metric_data[0].unit #=> String, one of ["Seconds", "Microseconds", "Milliseconds", "Bytes", "Kilobytes", "Megabytes", "Gigabytes", "Terabytes", "Bits", "Kilobits", "Megabits", "Gigabits", "Terabits", "Percent", "Count", "Bytes/Second", "Kilobytes/Second", "Megabytes/Second", "Gigabytes/Second", "Terabytes/Second", "Bits/Second", "Kilobits/Second", "Megabits/Second", "Gigabits/Second", "Terabits/Second", "Count/Second", "None"]
    #
    def get_load_balancer_metric_data(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetLoadBalancerMetricDataInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetLoadBalancerMetricDataInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetLoadBalancerMetricData
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetLoadBalancerMetricData
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetLoadBalancerMetricData,
        stubs: @stubs,
        params_class: Params::GetLoadBalancerMetricDataOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_load_balancer_metric_data
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about the TLS certificates that are associated with the specified
    #       Lightsail load balancer.</p>
    #          <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p>
    #          <p>You can have a maximum of 2 certificates associated with a Lightsail load balancer. One
    #       is active and the other is inactive.</p>
    #
    # @param [Hash] params
    #   See {Types::GetLoadBalancerTlsCertificatesInput}.
    #
    # @option params [String] :load_balancer_name
    #   <p>The name of the load balancer you associated with your SSL/TLS certificate.</p>
    #
    # @return [Types::GetLoadBalancerTlsCertificatesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_load_balancer_tls_certificates(
    #     load_balancer_name: 'loadBalancerName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetLoadBalancerTlsCertificatesOutput
    #   resp.data.tls_certificates #=> Array<LoadBalancerTlsCertificate>
    #   resp.data.tls_certificates[0] #=> Types::LoadBalancerTlsCertificate
    #   resp.data.tls_certificates[0].name #=> String
    #   resp.data.tls_certificates[0].arn #=> String
    #   resp.data.tls_certificates[0].support_code #=> String
    #   resp.data.tls_certificates[0].created_at #=> Time
    #   resp.data.tls_certificates[0].location #=> Types::ResourceLocation
    #   resp.data.tls_certificates[0].location.availability_zone #=> String
    #   resp.data.tls_certificates[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.tls_certificates[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.tls_certificates[0].tags #=> Array<Tag>
    #   resp.data.tls_certificates[0].tags[0] #=> Types::Tag
    #   resp.data.tls_certificates[0].tags[0].key #=> String
    #   resp.data.tls_certificates[0].tags[0].value #=> String
    #   resp.data.tls_certificates[0].load_balancer_name #=> String
    #   resp.data.tls_certificates[0].is_attached #=> Boolean
    #   resp.data.tls_certificates[0].status #=> String, one of ["PENDING_VALIDATION", "ISSUED", "INACTIVE", "EXPIRED", "VALIDATION_TIMED_OUT", "REVOKED", "FAILED", "UNKNOWN"]
    #   resp.data.tls_certificates[0].domain_name #=> String
    #   resp.data.tls_certificates[0].domain_validation_records #=> Array<LoadBalancerTlsCertificateDomainValidationRecord>
    #   resp.data.tls_certificates[0].domain_validation_records[0] #=> Types::LoadBalancerTlsCertificateDomainValidationRecord
    #   resp.data.tls_certificates[0].domain_validation_records[0].name #=> String
    #   resp.data.tls_certificates[0].domain_validation_records[0].type #=> String
    #   resp.data.tls_certificates[0].domain_validation_records[0].value #=> String
    #   resp.data.tls_certificates[0].domain_validation_records[0].validation_status #=> String, one of ["PENDING_VALIDATION", "FAILED", "SUCCESS"]
    #   resp.data.tls_certificates[0].domain_validation_records[0].domain_name #=> String
    #   resp.data.tls_certificates[0].failure_reason #=> String, one of ["NO_AVAILABLE_CONTACTS", "ADDITIONAL_VERIFICATION_REQUIRED", "DOMAIN_NOT_ALLOWED", "INVALID_PUBLIC_DOMAIN", "OTHER"]
    #   resp.data.tls_certificates[0].issued_at #=> Time
    #   resp.data.tls_certificates[0].issuer #=> String
    #   resp.data.tls_certificates[0].key_algorithm #=> String
    #   resp.data.tls_certificates[0].not_after #=> Time
    #   resp.data.tls_certificates[0].not_before #=> Time
    #   resp.data.tls_certificates[0].renewal_summary #=> Types::LoadBalancerTlsCertificateRenewalSummary
    #   resp.data.tls_certificates[0].renewal_summary.renewal_status #=> String, one of ["PENDING_AUTO_RENEWAL", "PENDING_VALIDATION", "SUCCESS", "FAILED"]
    #   resp.data.tls_certificates[0].renewal_summary.domain_validation_options #=> Array<LoadBalancerTlsCertificateDomainValidationOption>
    #   resp.data.tls_certificates[0].renewal_summary.domain_validation_options[0] #=> Types::LoadBalancerTlsCertificateDomainValidationOption
    #   resp.data.tls_certificates[0].renewal_summary.domain_validation_options[0].domain_name #=> String
    #   resp.data.tls_certificates[0].renewal_summary.domain_validation_options[0].validation_status #=> String, one of ["PENDING_VALIDATION", "FAILED", "SUCCESS"]
    #   resp.data.tls_certificates[0].revocation_reason #=> String, one of ["UNSPECIFIED", "KEY_COMPROMISE", "CA_COMPROMISE", "AFFILIATION_CHANGED", "SUPERCEDED", "CESSATION_OF_OPERATION", "CERTIFICATE_HOLD", "REMOVE_FROM_CRL", "PRIVILEGE_WITHDRAWN", "A_A_COMPROMISE"]
    #   resp.data.tls_certificates[0].revoked_at #=> Time
    #   resp.data.tls_certificates[0].serial #=> String
    #   resp.data.tls_certificates[0].signature_algorithm #=> String
    #   resp.data.tls_certificates[0].subject #=> String
    #   resp.data.tls_certificates[0].subject_alternative_names #=> Array<String>
    #   resp.data.tls_certificates[0].subject_alternative_names[0] #=> String
    #
    def get_load_balancer_tls_certificates(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetLoadBalancerTlsCertificatesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetLoadBalancerTlsCertificatesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetLoadBalancerTlsCertificates
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetLoadBalancerTlsCertificates
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetLoadBalancerTlsCertificates,
        stubs: @stubs,
        params_class: Params::GetLoadBalancerTlsCertificatesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_load_balancer_tls_certificates
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a list of TLS security policies that you can apply to Lightsail load
    #       balancers.</p>
    #
    #          <p>For more information about load balancer TLS security policies, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy">Configuring TLS security policies on your Amazon Lightsail load
    #         balancers</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetLoadBalancerTlsPoliciesInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #
    #            <p>To get a page token, perform an initial <code>GetLoadBalancerTlsPolicies</code> request.
    #         If your results are paginated, the response will return a next page token that you can specify
    #         as the page token in a subsequent request.</p>
    #
    # @return [Types::GetLoadBalancerTlsPoliciesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_load_balancer_tls_policies(
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetLoadBalancerTlsPoliciesOutput
    #   resp.data.tls_policies #=> Array<LoadBalancerTlsPolicy>
    #   resp.data.tls_policies[0] #=> Types::LoadBalancerTlsPolicy
    #   resp.data.tls_policies[0].name #=> String
    #   resp.data.tls_policies[0].is_default #=> Boolean
    #   resp.data.tls_policies[0].description #=> String
    #   resp.data.tls_policies[0].protocols #=> Array<String>
    #   resp.data.tls_policies[0].protocols[0] #=> String
    #   resp.data.tls_policies[0].ciphers #=> Array<String>
    #   resp.data.next_page_token #=> String
    #
    def get_load_balancer_tls_policies(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetLoadBalancerTlsPoliciesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetLoadBalancerTlsPoliciesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetLoadBalancerTlsPolicies
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetLoadBalancerTlsPolicies
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetLoadBalancerTlsPolicies,
        stubs: @stubs,
        params_class: Params::GetLoadBalancerTlsPoliciesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_load_balancer_tls_policies
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about all load balancers in an account.</p>
    #
    # @param [Hash] params
    #   See {Types::GetLoadBalancersInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetLoadBalancers</code> request. If your
    #         results are paginated, the response will return a next page token that you can specify as the
    #         page token in a subsequent request.</p>
    #
    # @return [Types::GetLoadBalancersOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_load_balancers(
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetLoadBalancersOutput
    #   resp.data.load_balancers #=> Array<LoadBalancer>
    #   resp.data.load_balancers[0] #=> Types::LoadBalancer
    #   resp.data.load_balancers[0].name #=> String
    #   resp.data.load_balancers[0].arn #=> String
    #   resp.data.load_balancers[0].support_code #=> String
    #   resp.data.load_balancers[0].created_at #=> Time
    #   resp.data.load_balancers[0].location #=> Types::ResourceLocation
    #   resp.data.load_balancers[0].location.availability_zone #=> String
    #   resp.data.load_balancers[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.load_balancers[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.load_balancers[0].tags #=> Array<Tag>
    #   resp.data.load_balancers[0].tags[0] #=> Types::Tag
    #   resp.data.load_balancers[0].tags[0].key #=> String
    #   resp.data.load_balancers[0].tags[0].value #=> String
    #   resp.data.load_balancers[0].dns_name #=> String
    #   resp.data.load_balancers[0].state #=> String, one of ["active", "provisioning", "active_impaired", "failed", "unknown"]
    #   resp.data.load_balancers[0].protocol #=> String, one of ["HTTP_HTTPS", "HTTP"]
    #   resp.data.load_balancers[0].public_ports #=> Array<Integer>
    #   resp.data.load_balancers[0].public_ports[0] #=> Integer
    #   resp.data.load_balancers[0].health_check_path #=> String
    #   resp.data.load_balancers[0].instance_port #=> Integer
    #   resp.data.load_balancers[0].instance_health_summary #=> Array<InstanceHealthSummary>
    #   resp.data.load_balancers[0].instance_health_summary[0] #=> Types::InstanceHealthSummary
    #   resp.data.load_balancers[0].instance_health_summary[0].instance_name #=> String
    #   resp.data.load_balancers[0].instance_health_summary[0].instance_health #=> String, one of ["initial", "healthy", "unhealthy", "unused", "draining", "unavailable"]
    #   resp.data.load_balancers[0].instance_health_summary[0].instance_health_reason #=> String, one of ["Lb.RegistrationInProgress", "Lb.InitialHealthChecking", "Lb.InternalError", "Instance.ResponseCodeMismatch", "Instance.Timeout", "Instance.FailedHealthChecks", "Instance.NotRegistered", "Instance.NotInUse", "Instance.DeregistrationInProgress", "Instance.InvalidState", "Instance.IpUnusable"]
    #   resp.data.load_balancers[0].tls_certificate_summaries #=> Array<LoadBalancerTlsCertificateSummary>
    #   resp.data.load_balancers[0].tls_certificate_summaries[0] #=> Types::LoadBalancerTlsCertificateSummary
    #   resp.data.load_balancers[0].tls_certificate_summaries[0].name #=> String
    #   resp.data.load_balancers[0].tls_certificate_summaries[0].is_attached #=> Boolean
    #   resp.data.load_balancers[0].configuration_options #=> Hash<String, String>
    #   resp.data.load_balancers[0].configuration_options['key'] #=> String
    #   resp.data.load_balancers[0].ip_address_type #=> String, one of ["dualstack", "ipv4"]
    #   resp.data.load_balancers[0].https_redirection_enabled #=> Boolean
    #   resp.data.load_balancers[0].tls_policy_name #=> String
    #   resp.data.next_page_token #=> String
    #
    def get_load_balancers(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetLoadBalancersInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetLoadBalancersInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetLoadBalancers
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetLoadBalancers
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetLoadBalancers,
        stubs: @stubs,
        params_class: Params::GetLoadBalancersOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_load_balancers
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about a specific operation. Operations include events such as when you
    #       create an instance, allocate a static IP, attach a static IP, and so on.</p>
    #
    # @param [Hash] params
    #   See {Types::GetOperationInput}.
    #
    # @option params [String] :operation_id
    #   <p>A GUID used to identify the operation.</p>
    #
    # @return [Types::GetOperationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_operation(
    #     operation_id: 'operationId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetOperationOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def get_operation(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetOperationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetOperationInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetOperation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetOperation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetOperation,
        stubs: @stubs,
        params_class: Params::GetOperationOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_operation
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about all operations.</p>
    #          <p>Results are returned from oldest to newest, up to a maximum of 200. Results can be paged
    #       by making each subsequent call to <code>GetOperations</code> use the maximum (last)
    #         <code>statusChangedAt</code> value from the previous request.</p>
    #
    # @param [Hash] params
    #   See {Types::GetOperationsInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetOperations</code> request. If your
    #         results are paginated, the response will return a next page token that you can specify as the
    #         page token in a subsequent request.</p>
    #
    # @return [Types::GetOperationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_operations(
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetOperationsOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #   resp.data.next_page_token #=> String
    #
    def get_operations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetOperationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetOperationsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetOperations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetOperations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetOperations,
        stubs: @stubs,
        params_class: Params::GetOperationsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_operations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets operations for a specific resource (e.g., an instance or a static IP).</p>
    #
    # @param [Hash] params
    #   See {Types::GetOperationsForResourceInput}.
    #
    # @option params [String] :resource_name
    #   <p>The name of the resource for which you are requesting information.</p>
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetOperationsForResource</code> request. If
    #         your results are paginated, the response will return a next page token that you can specify as
    #         the page token in a subsequent request.</p>
    #
    # @return [Types::GetOperationsForResourceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_operations_for_resource(
    #     resource_name: 'resourceName', # required
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetOperationsForResourceOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #   resp.data.next_page_count #=> String
    #   resp.data.next_page_token #=> String
    #
    def get_operations_for_resource(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetOperationsForResourceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetOperationsForResourceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetOperationsForResource
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetOperationsForResource
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetOperationsForResource,
        stubs: @stubs,
        params_class: Params::GetOperationsForResourceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_operations_for_resource
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a list of all valid regions for Amazon Lightsail. Use the <code>include
    #         availability zones</code> parameter to also return the Availability Zones in a
    #       region.</p>
    #
    # @param [Hash] params
    #   See {Types::GetRegionsInput}.
    #
    # @option params [Boolean] :include_availability_zones
    #   <p>A Boolean value indicating whether to also include Availability Zones in your get regions
    #         request. Availability Zones are indicated with a letter: e.g., <code>us-east-2a</code>.</p>
    #
    # @option params [Boolean] :include_relational_database_availability_zones
    #   <p>A Boolean value indicating whether to also include Availability Zones for databases in
    #         your get regions request. Availability Zones are indicated with a letter (e.g.,
    #           <code>us-east-2a</code>).</p>
    #
    # @return [Types::GetRegionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_regions(
    #     include_availability_zones: false,
    #     include_relational_database_availability_zones: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetRegionsOutput
    #   resp.data.regions #=> Array<Region>
    #   resp.data.regions[0] #=> Types::Region
    #   resp.data.regions[0].continent_code #=> String
    #   resp.data.regions[0].description #=> String
    #   resp.data.regions[0].display_name #=> String
    #   resp.data.regions[0].name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.regions[0].availability_zones #=> Array<AvailabilityZone>
    #   resp.data.regions[0].availability_zones[0] #=> Types::AvailabilityZone
    #   resp.data.regions[0].availability_zones[0].zone_name #=> String
    #   resp.data.regions[0].availability_zones[0].state #=> String
    #   resp.data.regions[0].relational_database_availability_zones #=> Array<AvailabilityZone>
    #
    def get_regions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetRegionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetRegionsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetRegions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetRegions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetRegions,
        stubs: @stubs,
        params_class: Params::GetRegionsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_regions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about a specific database in Amazon Lightsail.</p>
    #
    # @param [Hash] params
    #   See {Types::GetRelationalDatabaseInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name of the database that you are looking up.</p>
    #
    # @return [Types::GetRelationalDatabaseOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_relational_database(
    #     relational_database_name: 'relationalDatabaseName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetRelationalDatabaseOutput
    #   resp.data.relational_database #=> Types::RelationalDatabase
    #   resp.data.relational_database.name #=> String
    #   resp.data.relational_database.arn #=> String
    #   resp.data.relational_database.support_code #=> String
    #   resp.data.relational_database.created_at #=> Time
    #   resp.data.relational_database.location #=> Types::ResourceLocation
    #   resp.data.relational_database.location.availability_zone #=> String
    #   resp.data.relational_database.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.relational_database.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.relational_database.tags #=> Array<Tag>
    #   resp.data.relational_database.tags[0] #=> Types::Tag
    #   resp.data.relational_database.tags[0].key #=> String
    #   resp.data.relational_database.tags[0].value #=> String
    #   resp.data.relational_database.relational_database_blueprint_id #=> String
    #   resp.data.relational_database.relational_database_bundle_id #=> String
    #   resp.data.relational_database.master_database_name #=> String
    #   resp.data.relational_database.hardware #=> Types::RelationalDatabaseHardware
    #   resp.data.relational_database.hardware.cpu_count #=> Integer
    #   resp.data.relational_database.hardware.disk_size_in_gb #=> Integer
    #   resp.data.relational_database.hardware.ram_size_in_gb #=> Float
    #   resp.data.relational_database.state #=> String
    #   resp.data.relational_database.secondary_availability_zone #=> String
    #   resp.data.relational_database.backup_retention_enabled #=> Boolean
    #   resp.data.relational_database.pending_modified_values #=> Types::PendingModifiedRelationalDatabaseValues
    #   resp.data.relational_database.pending_modified_values.master_user_password #=> String
    #   resp.data.relational_database.pending_modified_values.engine_version #=> String
    #   resp.data.relational_database.pending_modified_values.backup_retention_enabled #=> Boolean
    #   resp.data.relational_database.engine #=> String
    #   resp.data.relational_database.engine_version #=> String
    #   resp.data.relational_database.latest_restorable_time #=> Time
    #   resp.data.relational_database.master_username #=> String
    #   resp.data.relational_database.parameter_apply_status #=> String
    #   resp.data.relational_database.preferred_backup_window #=> String
    #   resp.data.relational_database.preferred_maintenance_window #=> String
    #   resp.data.relational_database.publicly_accessible #=> Boolean
    #   resp.data.relational_database.master_endpoint #=> Types::RelationalDatabaseEndpoint
    #   resp.data.relational_database.master_endpoint.port #=> Integer
    #   resp.data.relational_database.master_endpoint.address #=> String
    #   resp.data.relational_database.pending_maintenance_actions #=> Array<PendingMaintenanceAction>
    #   resp.data.relational_database.pending_maintenance_actions[0] #=> Types::PendingMaintenanceAction
    #   resp.data.relational_database.pending_maintenance_actions[0].action #=> String
    #   resp.data.relational_database.pending_maintenance_actions[0].description #=> String
    #   resp.data.relational_database.pending_maintenance_actions[0].current_apply_date #=> Time
    #   resp.data.relational_database.ca_certificate_identifier #=> String
    #
    def get_relational_database(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetRelationalDatabaseInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetRelationalDatabaseInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetRelationalDatabase
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetRelationalDatabase
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetRelationalDatabase,
        stubs: @stubs,
        params_class: Params::GetRelationalDatabaseOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_relational_database
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a list of available database blueprints in Amazon Lightsail. A blueprint describes
    #       the major engine version of a database.</p>
    #          <p>You can use a blueprint ID to create a new database that runs a specific database
    #       engine.</p>
    #
    # @param [Hash] params
    #   See {Types::GetRelationalDatabaseBlueprintsInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetRelationalDatabaseBlueprints</code>
    #         request. If your results are paginated, the response will return a next page token that you
    #         can specify as the page token in a subsequent request.</p>
    #
    # @return [Types::GetRelationalDatabaseBlueprintsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_relational_database_blueprints(
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetRelationalDatabaseBlueprintsOutput
    #   resp.data.blueprints #=> Array<RelationalDatabaseBlueprint>
    #   resp.data.blueprints[0] #=> Types::RelationalDatabaseBlueprint
    #   resp.data.blueprints[0].blueprint_id #=> String
    #   resp.data.blueprints[0].engine #=> String, one of ["mysql"]
    #   resp.data.blueprints[0].engine_version #=> String
    #   resp.data.blueprints[0].engine_description #=> String
    #   resp.data.blueprints[0].engine_version_description #=> String
    #   resp.data.blueprints[0].is_engine_default #=> Boolean
    #   resp.data.next_page_token #=> String
    #
    def get_relational_database_blueprints(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetRelationalDatabaseBlueprintsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetRelationalDatabaseBlueprintsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetRelationalDatabaseBlueprints
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetRelationalDatabaseBlueprints
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetRelationalDatabaseBlueprints,
        stubs: @stubs,
        params_class: Params::GetRelationalDatabaseBlueprintsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_relational_database_blueprints
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the list of bundles that are available in Amazon Lightsail. A bundle describes the
    #       performance specifications for a database.</p>
    #          <p>You can use a bundle ID to create a new database with explicit performance
    #       specifications.</p>
    #
    # @param [Hash] params
    #   See {Types::GetRelationalDatabaseBundlesInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetRelationalDatabaseBundles</code> request.
    #         If your results are paginated, the response will return a next page token that you can specify
    #         as the page token in a subsequent request.</p>
    #
    # @option params [Boolean] :include_inactive
    #   <p>A Boolean value that indicates whether to include inactive (unavailable) bundles in the
    #         response of your request.</p>
    #
    # @return [Types::GetRelationalDatabaseBundlesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_relational_database_bundles(
    #     page_token: 'pageToken',
    #     include_inactive: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetRelationalDatabaseBundlesOutput
    #   resp.data.bundles #=> Array<RelationalDatabaseBundle>
    #   resp.data.bundles[0] #=> Types::RelationalDatabaseBundle
    #   resp.data.bundles[0].bundle_id #=> String
    #   resp.data.bundles[0].name #=> String
    #   resp.data.bundles[0].price #=> Float
    #   resp.data.bundles[0].ram_size_in_gb #=> Float
    #   resp.data.bundles[0].disk_size_in_gb #=> Integer
    #   resp.data.bundles[0].transfer_per_month_in_gb #=> Integer
    #   resp.data.bundles[0].cpu_count #=> Integer
    #   resp.data.bundles[0].is_encrypted #=> Boolean
    #   resp.data.bundles[0].is_active #=> Boolean
    #   resp.data.next_page_token #=> String
    #
    def get_relational_database_bundles(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetRelationalDatabaseBundlesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetRelationalDatabaseBundlesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetRelationalDatabaseBundles
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetRelationalDatabaseBundles
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetRelationalDatabaseBundles,
        stubs: @stubs,
        params_class: Params::GetRelationalDatabaseBundlesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_relational_database_bundles
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a list of events for a specific database in Amazon Lightsail.</p>
    #
    # @param [Hash] params
    #   See {Types::GetRelationalDatabaseEventsInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name of the database from which to get events.</p>
    #
    # @option params [Integer] :duration_in_minutes
    #   <p>The number of minutes in the past from which to retrieve events. For example, to get all
    #         events from the past 2 hours, enter 120.</p>
    #            <p>Default: <code>60</code>
    #            </p>
    #            <p>The minimum is 1 and the maximum is 14 days (20160 minutes).</p>
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetRelationalDatabaseEvents</code> request.
    #         If your results are paginated, the response will return a next page token that you can specify
    #         as the page token in a subsequent request.</p>
    #
    # @return [Types::GetRelationalDatabaseEventsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_relational_database_events(
    #     relational_database_name: 'relationalDatabaseName', # required
    #     duration_in_minutes: 1,
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetRelationalDatabaseEventsOutput
    #   resp.data.relational_database_events #=> Array<RelationalDatabaseEvent>
    #   resp.data.relational_database_events[0] #=> Types::RelationalDatabaseEvent
    #   resp.data.relational_database_events[0].resource #=> String
    #   resp.data.relational_database_events[0].created_at #=> Time
    #   resp.data.relational_database_events[0].message #=> String
    #   resp.data.relational_database_events[0].event_categories #=> Array<String>
    #   resp.data.relational_database_events[0].event_categories[0] #=> String
    #   resp.data.next_page_token #=> String
    #
    def get_relational_database_events(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetRelationalDatabaseEventsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetRelationalDatabaseEventsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetRelationalDatabaseEvents
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetRelationalDatabaseEvents
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetRelationalDatabaseEvents,
        stubs: @stubs,
        params_class: Params::GetRelationalDatabaseEventsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_relational_database_events
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a list of log events for a database in Amazon Lightsail.</p>
    #
    # @param [Hash] params
    #   See {Types::GetRelationalDatabaseLogEventsInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name of your database for which to get log events.</p>
    #
    # @option params [String] :log_stream_name
    #   <p>The name of the log stream.</p>
    #            <p>Use the <code>get relational database log streams</code> operation to get a list of
    #         available log streams.</p>
    #
    # @option params [Time] :start_time
    #   <p>The start of the time interval from which to get log events.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Specified in Coordinated Universal Time (UTC).</p>
    #               </li>
    #               <li>
    #                  <p>Specified in the Unix time format.</p>
    #                  <p>For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, then you
    #             input <code>1538424000</code> as the start time.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Time] :end_time
    #   <p>The end of the time interval from which to get log events.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Specified in Coordinated Universal Time (UTC).</p>
    #               </li>
    #               <li>
    #                  <p>Specified in the Unix time format.</p>
    #                  <p>For example, if you wish to use an end time of October 1, 2018, at 8 PM UTC, then you
    #             input <code>1538424000</code> as the end time.</p>
    #
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :start_from_head
    #   <p>Parameter to specify if the log should start from head or tail. If <code>true</code> is
    #         specified, the log event starts from the head of the log. If <code>false</code> is specified,
    #         the log event starts from the tail of the log.</p>
    #            <note>
    #               <p>For PostgreSQL, the default value of <code>false</code> is the only option
    #           available.</p>
    #            </note>
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next or previous page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetRelationalDatabaseLogEvents</code>
    #         request. If your results are paginated, the response will return a next forward token and/or
    #         next backward token that you can specify as the page token in a subsequent request.</p>
    #
    # @return [Types::GetRelationalDatabaseLogEventsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_relational_database_log_events(
    #     relational_database_name: 'relationalDatabaseName', # required
    #     log_stream_name: 'logStreamName', # required
    #     start_time: Time.now,
    #     end_time: Time.now,
    #     start_from_head: false,
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetRelationalDatabaseLogEventsOutput
    #   resp.data.resource_log_events #=> Array<LogEvent>
    #   resp.data.resource_log_events[0] #=> Types::LogEvent
    #   resp.data.resource_log_events[0].created_at #=> Time
    #   resp.data.resource_log_events[0].message #=> String
    #   resp.data.next_backward_token #=> String
    #   resp.data.next_forward_token #=> String
    #
    def get_relational_database_log_events(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetRelationalDatabaseLogEventsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetRelationalDatabaseLogEventsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetRelationalDatabaseLogEvents
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetRelationalDatabaseLogEvents
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetRelationalDatabaseLogEvents,
        stubs: @stubs,
        params_class: Params::GetRelationalDatabaseLogEventsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_relational_database_log_events
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a list of available log streams for a specific database in Amazon Lightsail.</p>
    #
    # @param [Hash] params
    #   See {Types::GetRelationalDatabaseLogStreamsInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name of your database for which to get log streams.</p>
    #
    # @return [Types::GetRelationalDatabaseLogStreamsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_relational_database_log_streams(
    #     relational_database_name: 'relationalDatabaseName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetRelationalDatabaseLogStreamsOutput
    #   resp.data.log_streams #=> Array<String>
    #   resp.data.log_streams[0] #=> String
    #
    def get_relational_database_log_streams(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetRelationalDatabaseLogStreamsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetRelationalDatabaseLogStreamsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetRelationalDatabaseLogStreams
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetRelationalDatabaseLogStreams
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetRelationalDatabaseLogStreams,
        stubs: @stubs,
        params_class: Params::GetRelationalDatabaseLogStreamsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_relational_database_log_streams
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the current, previous, or pending versions of the master user password for a
    #       Lightsail database.</p>
    #          <p>The <code>GetRelationalDatabaseMasterUserPassword</code> operation supports tag-based
    #       access control via resource tags applied to the resource identified by
    #       relationalDatabaseName.</p>
    #
    # @param [Hash] params
    #   See {Types::GetRelationalDatabaseMasterUserPasswordInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name of your database for which to get the master user password.</p>
    #
    # @option params [String] :password_version
    #   <p>The password version to return.</p>
    #            <p>Specifying <code>CURRENT</code> or <code>PREVIOUS</code> returns the current or previous
    #         passwords respectively. Specifying <code>PENDING</code> returns the newest version of the
    #         password that will rotate to <code>CURRENT</code>. After the <code>PENDING</code> password
    #         rotates to <code>CURRENT</code>, the <code>PENDING</code> password is no longer
    #         available.</p>
    #            <p>Default: <code>CURRENT</code>
    #            </p>
    #
    # @return [Types::GetRelationalDatabaseMasterUserPasswordOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_relational_database_master_user_password(
    #     relational_database_name: 'relationalDatabaseName', # required
    #     password_version: 'CURRENT' # accepts ["CURRENT", "PREVIOUS", "PENDING"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetRelationalDatabaseMasterUserPasswordOutput
    #   resp.data.master_user_password #=> String
    #   resp.data.created_at #=> Time
    #
    def get_relational_database_master_user_password(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetRelationalDatabaseMasterUserPasswordInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetRelationalDatabaseMasterUserPasswordInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetRelationalDatabaseMasterUserPassword
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetRelationalDatabaseMasterUserPassword
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetRelationalDatabaseMasterUserPassword,
        stubs: @stubs,
        params_class: Params::GetRelationalDatabaseMasterUserPasswordOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_relational_database_master_user_password
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the data points of the specified metric for a database in Amazon Lightsail.</p>
    #          <p>Metrics report the utilization of your resources, and the error counts generated by them.
    #       Monitor and collect metric data regularly to maintain the reliability, availability, and
    #       performance of your resources.</p>
    #
    # @param [Hash] params
    #   See {Types::GetRelationalDatabaseMetricDataInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name of your database from which to get metric data.</p>
    #
    # @option params [String] :metric_name
    #   <p>The metric for which you want to return information.</p>
    #            <p>Valid relational database metric names are listed below, along with the most useful
    #           <code>statistics</code> to include in your request, and the published <code>unit</code>
    #         value. All relational database metric data is available in 1-minute (60 seconds)
    #         granularity.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>CPUUtilization</code>
    #                     </b> - The percentage of CPU
    #             utilization currently in use on the database.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and
    #               <code>Average</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Percent</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>DatabaseConnections</code>
    #                     </b> - The number of
    #             database connections in use.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and
    #               <code>Sum</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>DiskQueueDepth</code>
    #                     </b> - The number of
    #             outstanding IOs (read/write requests) that are waiting to access the disk.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Count</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>FreeStorageSpace</code>
    #                     </b> - The amount of
    #             available storage space.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Bytes</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>NetworkReceiveThroughput</code>
    #                     </b> - The incoming
    #             (Receive) network traffic on the database, including both customer database traffic and
    #             AWS traffic used for monitoring and replication.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Bytes/Second</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>
    #                        <code>NetworkTransmitThroughput</code>
    #                     </b> - The outgoing
    #             (Transmit) network traffic on the database, including both customer database traffic and
    #             AWS traffic used for monitoring and replication.</p>
    #                  <p>
    #                     <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
    #                  <p>
    #                     <code>Unit</code>: The published unit is <code>Bytes/Second</code>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :period
    #   <p>The granularity, in seconds, of the returned data points.</p>
    #            <p>All relational database metric data is available in 1-minute (60 seconds)
    #         granularity.</p>
    #
    # @option params [Time] :start_time
    #   <p>The start of the time interval from which to get metric data.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Specified in Coordinated Universal Time (UTC).</p>
    #               </li>
    #               <li>
    #                  <p>Specified in the Unix time format.</p>
    #                  <p>For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, then you
    #             input <code>1538424000</code> as the start time.</p>
    #
    #               </li>
    #            </ul>
    #
    # @option params [Time] :end_time
    #   <p>The end of the time interval from which to get metric data.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Specified in Coordinated Universal Time (UTC).</p>
    #               </li>
    #               <li>
    #                  <p>Specified in the Unix time format.</p>
    #                  <p>For example, if you wish to use an end time of October 1, 2018, at 8 PM UTC, then you
    #             input <code>1538424000</code> as the end time.</p>
    #
    #               </li>
    #            </ul>
    #
    # @option params [String] :unit
    #   <p>The unit for the metric data request. Valid units depend on the metric data being
    #         requested. For the valid units with each available metric, see the <code>metricName</code>
    #         parameter.</p>
    #
    # @option params [Array<String>] :statistics
    #   <p>The statistic for the metric.</p>
    #            <p>The following statistics are available:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>Minimum</code> - The lowest value observed during the specified period. Use this
    #             value to determine low volumes of activity for your application.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Maximum</code> - The highest value observed during the specified period. Use
    #             this value to determine high volumes of activity for your application.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Sum</code> - All values submitted for the matching metric added together. You
    #             can use this statistic to determine the total volume of a metric.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Average</code> - The value of Sum / SampleCount during the specified period. By
    #             comparing this statistic with the Minimum and Maximum values, you can determine the full
    #             scope of a metric and how close the average use is to the Minimum and Maximum values. This
    #             comparison helps you to know when to increase or decrease your resources.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>SampleCount</code> - The count, or number, of data points used for the
    #             statistical calculation.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::GetRelationalDatabaseMetricDataOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_relational_database_metric_data(
    #     relational_database_name: 'relationalDatabaseName', # required
    #     metric_name: 'CPUUtilization', # required - accepts ["CPUUtilization", "DatabaseConnections", "DiskQueueDepth", "FreeStorageSpace", "NetworkReceiveThroughput", "NetworkTransmitThroughput"]
    #     period: 1, # required
    #     start_time: Time.now, # required
    #     end_time: Time.now, # required
    #     unit: 'Seconds', # required - accepts ["Seconds", "Microseconds", "Milliseconds", "Bytes", "Kilobytes", "Megabytes", "Gigabytes", "Terabytes", "Bits", "Kilobits", "Megabits", "Gigabits", "Terabits", "Percent", "Count", "Bytes/Second", "Kilobytes/Second", "Megabytes/Second", "Gigabytes/Second", "Terabytes/Second", "Bits/Second", "Kilobits/Second", "Megabits/Second", "Gigabits/Second", "Terabits/Second", "Count/Second", "None"]
    #     statistics: [
    #       'Minimum' # accepts ["Minimum", "Maximum", "Sum", "Average", "SampleCount"]
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetRelationalDatabaseMetricDataOutput
    #   resp.data.metric_name #=> String, one of ["CPUUtilization", "DatabaseConnections", "DiskQueueDepth", "FreeStorageSpace", "NetworkReceiveThroughput", "NetworkTransmitThroughput"]
    #   resp.data.metric_data #=> Array<MetricDatapoint>
    #   resp.data.metric_data[0] #=> Types::MetricDatapoint
    #   resp.data.metric_data[0].average #=> Float
    #   resp.data.metric_data[0].maximum #=> Float
    #   resp.data.metric_data[0].minimum #=> Float
    #   resp.data.metric_data[0].sample_count #=> Float
    #   resp.data.metric_data[0].sum #=> Float
    #   resp.data.metric_data[0].timestamp #=> Time
    #   resp.data.metric_data[0].unit #=> String, one of ["Seconds", "Microseconds", "Milliseconds", "Bytes", "Kilobytes", "Megabytes", "Gigabytes", "Terabytes", "Bits", "Kilobits", "Megabits", "Gigabits", "Terabits", "Percent", "Count", "Bytes/Second", "Kilobytes/Second", "Megabytes/Second", "Gigabytes/Second", "Terabytes/Second", "Bits/Second", "Kilobits/Second", "Megabits/Second", "Gigabits/Second", "Terabits/Second", "Count/Second", "None"]
    #
    def get_relational_database_metric_data(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetRelationalDatabaseMetricDataInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetRelationalDatabaseMetricDataInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetRelationalDatabaseMetricData
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetRelationalDatabaseMetricData
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetRelationalDatabaseMetricData,
        stubs: @stubs,
        params_class: Params::GetRelationalDatabaseMetricDataOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_relational_database_metric_data
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns all of the runtime parameters offered by the underlying database software, or
    #       engine, for a specific database in Amazon Lightsail.</p>
    #          <p>In addition to the parameter names and values, this operation returns other information
    #       about each parameter. This information includes whether changes require a reboot, whether the
    #       parameter is modifiable, the allowed values, and the data types.</p>
    #
    # @param [Hash] params
    #   See {Types::GetRelationalDatabaseParametersInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name of your database for which to get parameters.</p>
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetRelationalDatabaseParameters</code>
    #         request. If your results are paginated, the response will return a next page token that you
    #         can specify as the page token in a subsequent request.</p>
    #
    # @return [Types::GetRelationalDatabaseParametersOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_relational_database_parameters(
    #     relational_database_name: 'relationalDatabaseName', # required
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetRelationalDatabaseParametersOutput
    #   resp.data.parameters #=> Array<RelationalDatabaseParameter>
    #   resp.data.parameters[0] #=> Types::RelationalDatabaseParameter
    #   resp.data.parameters[0].allowed_values #=> String
    #   resp.data.parameters[0].apply_method #=> String
    #   resp.data.parameters[0].apply_type #=> String
    #   resp.data.parameters[0].data_type #=> String
    #   resp.data.parameters[0].description #=> String
    #   resp.data.parameters[0].is_modifiable #=> Boolean
    #   resp.data.parameters[0].parameter_name #=> String
    #   resp.data.parameters[0].parameter_value #=> String
    #   resp.data.next_page_token #=> String
    #
    def get_relational_database_parameters(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetRelationalDatabaseParametersInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetRelationalDatabaseParametersInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetRelationalDatabaseParameters
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetRelationalDatabaseParameters
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetRelationalDatabaseParameters,
        stubs: @stubs,
        params_class: Params::GetRelationalDatabaseParametersOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_relational_database_parameters
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about a specific database snapshot in Amazon Lightsail.</p>
    #
    # @param [Hash] params
    #   See {Types::GetRelationalDatabaseSnapshotInput}.
    #
    # @option params [String] :relational_database_snapshot_name
    #   <p>The name of the database snapshot for which to get information.</p>
    #
    # @return [Types::GetRelationalDatabaseSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_relational_database_snapshot(
    #     relational_database_snapshot_name: 'relationalDatabaseSnapshotName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetRelationalDatabaseSnapshotOutput
    #   resp.data.relational_database_snapshot #=> Types::RelationalDatabaseSnapshot
    #   resp.data.relational_database_snapshot.name #=> String
    #   resp.data.relational_database_snapshot.arn #=> String
    #   resp.data.relational_database_snapshot.support_code #=> String
    #   resp.data.relational_database_snapshot.created_at #=> Time
    #   resp.data.relational_database_snapshot.location #=> Types::ResourceLocation
    #   resp.data.relational_database_snapshot.location.availability_zone #=> String
    #   resp.data.relational_database_snapshot.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.relational_database_snapshot.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.relational_database_snapshot.tags #=> Array<Tag>
    #   resp.data.relational_database_snapshot.tags[0] #=> Types::Tag
    #   resp.data.relational_database_snapshot.tags[0].key #=> String
    #   resp.data.relational_database_snapshot.tags[0].value #=> String
    #   resp.data.relational_database_snapshot.engine #=> String
    #   resp.data.relational_database_snapshot.engine_version #=> String
    #   resp.data.relational_database_snapshot.size_in_gb #=> Integer
    #   resp.data.relational_database_snapshot.state #=> String
    #   resp.data.relational_database_snapshot.from_relational_database_name #=> String
    #   resp.data.relational_database_snapshot.from_relational_database_arn #=> String
    #   resp.data.relational_database_snapshot.from_relational_database_bundle_id #=> String
    #   resp.data.relational_database_snapshot.from_relational_database_blueprint_id #=> String
    #
    def get_relational_database_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetRelationalDatabaseSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetRelationalDatabaseSnapshotInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetRelationalDatabaseSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetRelationalDatabaseSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetRelationalDatabaseSnapshot,
        stubs: @stubs,
        params_class: Params::GetRelationalDatabaseSnapshotOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_relational_database_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about all of your database snapshots in Amazon Lightsail.</p>
    #
    # @param [Hash] params
    #   See {Types::GetRelationalDatabaseSnapshotsInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetRelationalDatabaseSnapshots</code>
    #         request. If your results are paginated, the response will return a next page token that you
    #         can specify as the page token in a subsequent request.</p>
    #
    # @return [Types::GetRelationalDatabaseSnapshotsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_relational_database_snapshots(
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetRelationalDatabaseSnapshotsOutput
    #   resp.data.relational_database_snapshots #=> Array<RelationalDatabaseSnapshot>
    #   resp.data.relational_database_snapshots[0] #=> Types::RelationalDatabaseSnapshot
    #   resp.data.relational_database_snapshots[0].name #=> String
    #   resp.data.relational_database_snapshots[0].arn #=> String
    #   resp.data.relational_database_snapshots[0].support_code #=> String
    #   resp.data.relational_database_snapshots[0].created_at #=> Time
    #   resp.data.relational_database_snapshots[0].location #=> Types::ResourceLocation
    #   resp.data.relational_database_snapshots[0].location.availability_zone #=> String
    #   resp.data.relational_database_snapshots[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.relational_database_snapshots[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.relational_database_snapshots[0].tags #=> Array<Tag>
    #   resp.data.relational_database_snapshots[0].tags[0] #=> Types::Tag
    #   resp.data.relational_database_snapshots[0].tags[0].key #=> String
    #   resp.data.relational_database_snapshots[0].tags[0].value #=> String
    #   resp.data.relational_database_snapshots[0].engine #=> String
    #   resp.data.relational_database_snapshots[0].engine_version #=> String
    #   resp.data.relational_database_snapshots[0].size_in_gb #=> Integer
    #   resp.data.relational_database_snapshots[0].state #=> String
    #   resp.data.relational_database_snapshots[0].from_relational_database_name #=> String
    #   resp.data.relational_database_snapshots[0].from_relational_database_arn #=> String
    #   resp.data.relational_database_snapshots[0].from_relational_database_bundle_id #=> String
    #   resp.data.relational_database_snapshots[0].from_relational_database_blueprint_id #=> String
    #   resp.data.next_page_token #=> String
    #
    def get_relational_database_snapshots(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetRelationalDatabaseSnapshotsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetRelationalDatabaseSnapshotsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetRelationalDatabaseSnapshots
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetRelationalDatabaseSnapshots
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetRelationalDatabaseSnapshots,
        stubs: @stubs,
        params_class: Params::GetRelationalDatabaseSnapshotsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_relational_database_snapshots
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about all of your databases in Amazon Lightsail.</p>
    #
    # @param [Hash] params
    #   See {Types::GetRelationalDatabasesInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetRelationalDatabases</code> request. If
    #         your results are paginated, the response will return a next page token that you can specify as
    #         the page token in a subsequent request.</p>
    #
    # @return [Types::GetRelationalDatabasesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_relational_databases(
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetRelationalDatabasesOutput
    #   resp.data.relational_databases #=> Array<RelationalDatabase>
    #   resp.data.relational_databases[0] #=> Types::RelationalDatabase
    #   resp.data.relational_databases[0].name #=> String
    #   resp.data.relational_databases[0].arn #=> String
    #   resp.data.relational_databases[0].support_code #=> String
    #   resp.data.relational_databases[0].created_at #=> Time
    #   resp.data.relational_databases[0].location #=> Types::ResourceLocation
    #   resp.data.relational_databases[0].location.availability_zone #=> String
    #   resp.data.relational_databases[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.relational_databases[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.relational_databases[0].tags #=> Array<Tag>
    #   resp.data.relational_databases[0].tags[0] #=> Types::Tag
    #   resp.data.relational_databases[0].tags[0].key #=> String
    #   resp.data.relational_databases[0].tags[0].value #=> String
    #   resp.data.relational_databases[0].relational_database_blueprint_id #=> String
    #   resp.data.relational_databases[0].relational_database_bundle_id #=> String
    #   resp.data.relational_databases[0].master_database_name #=> String
    #   resp.data.relational_databases[0].hardware #=> Types::RelationalDatabaseHardware
    #   resp.data.relational_databases[0].hardware.cpu_count #=> Integer
    #   resp.data.relational_databases[0].hardware.disk_size_in_gb #=> Integer
    #   resp.data.relational_databases[0].hardware.ram_size_in_gb #=> Float
    #   resp.data.relational_databases[0].state #=> String
    #   resp.data.relational_databases[0].secondary_availability_zone #=> String
    #   resp.data.relational_databases[0].backup_retention_enabled #=> Boolean
    #   resp.data.relational_databases[0].pending_modified_values #=> Types::PendingModifiedRelationalDatabaseValues
    #   resp.data.relational_databases[0].pending_modified_values.master_user_password #=> String
    #   resp.data.relational_databases[0].pending_modified_values.engine_version #=> String
    #   resp.data.relational_databases[0].pending_modified_values.backup_retention_enabled #=> Boolean
    #   resp.data.relational_databases[0].engine #=> String
    #   resp.data.relational_databases[0].engine_version #=> String
    #   resp.data.relational_databases[0].latest_restorable_time #=> Time
    #   resp.data.relational_databases[0].master_username #=> String
    #   resp.data.relational_databases[0].parameter_apply_status #=> String
    #   resp.data.relational_databases[0].preferred_backup_window #=> String
    #   resp.data.relational_databases[0].preferred_maintenance_window #=> String
    #   resp.data.relational_databases[0].publicly_accessible #=> Boolean
    #   resp.data.relational_databases[0].master_endpoint #=> Types::RelationalDatabaseEndpoint
    #   resp.data.relational_databases[0].master_endpoint.port #=> Integer
    #   resp.data.relational_databases[0].master_endpoint.address #=> String
    #   resp.data.relational_databases[0].pending_maintenance_actions #=> Array<PendingMaintenanceAction>
    #   resp.data.relational_databases[0].pending_maintenance_actions[0] #=> Types::PendingMaintenanceAction
    #   resp.data.relational_databases[0].pending_maintenance_actions[0].action #=> String
    #   resp.data.relational_databases[0].pending_maintenance_actions[0].description #=> String
    #   resp.data.relational_databases[0].pending_maintenance_actions[0].current_apply_date #=> Time
    #   resp.data.relational_databases[0].ca_certificate_identifier #=> String
    #   resp.data.next_page_token #=> String
    #
    def get_relational_databases(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetRelationalDatabasesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetRelationalDatabasesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetRelationalDatabases
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetRelationalDatabases
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetRelationalDatabases,
        stubs: @stubs,
        params_class: Params::GetRelationalDatabasesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_relational_databases
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about an Amazon Lightsail static IP.</p>
    #
    # @param [Hash] params
    #   See {Types::GetStaticIpInput}.
    #
    # @option params [String] :static_ip_name
    #   <p>The name of the static IP in Lightsail.</p>
    #
    # @return [Types::GetStaticIpOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_static_ip(
    #     static_ip_name: 'staticIpName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetStaticIpOutput
    #   resp.data.static_ip #=> Types::StaticIp
    #   resp.data.static_ip.name #=> String
    #   resp.data.static_ip.arn #=> String
    #   resp.data.static_ip.support_code #=> String
    #   resp.data.static_ip.created_at #=> Time
    #   resp.data.static_ip.location #=> Types::ResourceLocation
    #   resp.data.static_ip.location.availability_zone #=> String
    #   resp.data.static_ip.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.static_ip.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.static_ip.ip_address #=> String
    #   resp.data.static_ip.attached_to #=> String
    #   resp.data.static_ip.is_attached #=> Boolean
    #
    def get_static_ip(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetStaticIpInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetStaticIpInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetStaticIp
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetStaticIp
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetStaticIp,
        stubs: @stubs,
        params_class: Params::GetStaticIpOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_static_ip
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns information about all static IPs in the user's account.</p>
    #
    # @param [Hash] params
    #   See {Types::GetStaticIpsInput}.
    #
    # @option params [String] :page_token
    #   <p>The token to advance to the next page of results from your request.</p>
    #            <p>To get a page token, perform an initial <code>GetStaticIps</code> request. If your results
    #         are paginated, the response will return a next page token that you can specify as the page
    #         token in a subsequent request.</p>
    #
    # @return [Types::GetStaticIpsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_static_ips(
    #     page_token: 'pageToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetStaticIpsOutput
    #   resp.data.static_ips #=> Array<StaticIp>
    #   resp.data.static_ips[0] #=> Types::StaticIp
    #   resp.data.static_ips[0].name #=> String
    #   resp.data.static_ips[0].arn #=> String
    #   resp.data.static_ips[0].support_code #=> String
    #   resp.data.static_ips[0].created_at #=> Time
    #   resp.data.static_ips[0].location #=> Types::ResourceLocation
    #   resp.data.static_ips[0].location.availability_zone #=> String
    #   resp.data.static_ips[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.static_ips[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.static_ips[0].ip_address #=> String
    #   resp.data.static_ips[0].attached_to #=> String
    #   resp.data.static_ips[0].is_attached #=> Boolean
    #   resp.data.next_page_token #=> String
    #
    def get_static_ips(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetStaticIpsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetStaticIpsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetStaticIps
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::GetStaticIps
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetStaticIps,
        stubs: @stubs,
        params_class: Params::GetStaticIpsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_static_ips
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Imports a public SSH key from a specific key pair.</p>
    #
    # @param [Hash] params
    #   See {Types::ImportKeyPairInput}.
    #
    # @option params [String] :key_pair_name
    #   <p>The name of the key pair for which you want to import the public key.</p>
    #
    # @option params [String] :public_key_base64
    #   <p>A base64-encoded public key of the <code>ssh-rsa</code> type.</p>
    #
    # @return [Types::ImportKeyPairOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.import_key_pair(
    #     key_pair_name: 'keyPairName', # required
    #     public_key_base64: 'publicKeyBase64' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ImportKeyPairOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def import_key_pair(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ImportKeyPairInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ImportKeyPairInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ImportKeyPair
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::ImportKeyPair
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ImportKeyPair,
        stubs: @stubs,
        params_class: Params::ImportKeyPairOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :import_key_pair
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a Boolean value indicating whether your Lightsail VPC is peered.</p>
    #
    # @param [Hash] params
    #   See {Types::IsVpcPeeredInput}.
    #
    # @return [Types::IsVpcPeeredOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.is_vpc_peered()
    #
    # @example Response structure
    #
    #   resp.data #=> Types::IsVpcPeeredOutput
    #   resp.data.is_peered #=> Boolean
    #
    def is_vpc_peered(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::IsVpcPeeredInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::IsVpcPeeredInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::IsVpcPeered
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::IsVpcPeered
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::IsVpcPeered,
        stubs: @stubs,
        params_class: Params::IsVpcPeeredOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :is_vpc_peered
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses
    #       allowed to connect to the instance through the ports, and the protocol.</p>
    #          <p>The <code>OpenInstancePublicPorts</code> action supports tag-based access control via
    #       resource tags applied to the resource identified by <code>instanceName</code>. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::OpenInstancePublicPortsInput}.
    #
    # @option params [PortInfo] :port_info
    #   <p>An object to describe the ports to open for the specified instance.</p>
    #
    # @option params [String] :instance_name
    #   <p>The name of the instance for which to open ports.</p>
    #
    # @return [Types::OpenInstancePublicPortsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.open_instance_public_ports(
    #     port_info: {
    #       from_port: 1,
    #       to_port: 1,
    #       protocol: 'tcp', # accepts ["tcp", "all", "udp", "icmp"]
    #       cidrs: [
    #         'member'
    #       ],
    #     }, # required
    #     instance_name: 'instanceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::OpenInstancePublicPortsOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def open_instance_public_ports(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::OpenInstancePublicPortsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::OpenInstancePublicPortsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::OpenInstancePublicPorts
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::OpenInstancePublicPorts
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::OpenInstancePublicPorts,
        stubs: @stubs,
        params_class: Params::OpenInstancePublicPortsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :open_instance_public_ports
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Peers the Lightsail VPC with the user's default VPC.</p>
    #
    # @param [Hash] params
    #   See {Types::PeerVpcInput}.
    #
    # @return [Types::PeerVpcOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.peer_vpc()
    #
    # @example Response structure
    #
    #   resp.data #=> Types::PeerVpcOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def peer_vpc(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::PeerVpcInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::PeerVpcInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::PeerVpc
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::PeerVpc
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::PeerVpc,
        stubs: @stubs,
        params_class: Params::PeerVpcOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :peer_vpc
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates or updates an alarm, and associates it with the specified metric.</p>
    #          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
    #       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
    #       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
    #         in Amazon Lightsail</a>.</p>
    #          <p>When this action creates an alarm, the alarm state is immediately set to
    #         <code>INSUFFICIENT_DATA</code>. The alarm is then evaluated and its state is set
    #       appropriately. Any actions associated with the new state are then executed.</p>
    #          <p>When you update an existing alarm, its state is left unchanged, but the update completely
    #       overwrites the previous configuration of the alarm. The alarm is then evaluated with the
    #       updated configuration.</p>
    #
    # @param [Hash] params
    #   See {Types::PutAlarmInput}.
    #
    # @option params [String] :alarm_name
    #   <p>The name for the alarm. Specify the name of an existing alarm to update, and overwrite the
    #         previous configuration of the alarm.</p>
    #
    # @option params [String] :metric_name
    #   <p>The name of the metric to associate with the alarm.</p>
    #            <p>You can configure up to two alarms per metric.</p>
    #            <p>The following metrics are available for each resource type:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <b>Instances</b>: <code>BurstCapacityPercentage</code>,
    #               <code>BurstCapacityTime</code>, <code>CPUUtilization</code>, <code>NetworkIn</code>,
    #               <code>NetworkOut</code>, <code>StatusCheckFailed</code>,
    #               <code>StatusCheckFailed_Instance</code>, and
    #             <code>StatusCheckFailed_System</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>Load balancers</b>:
    #               <code>ClientTLSNegotiationErrorCount</code>, <code>HealthyHostCount</code>,
    #               <code>UnhealthyHostCount</code>, <code>HTTPCode_LB_4XX_Count</code>,
    #               <code>HTTPCode_LB_5XX_Count</code>, <code>HTTPCode_Instance_2XX_Count</code>,
    #               <code>HTTPCode_Instance_3XX_Count</code>, <code>HTTPCode_Instance_4XX_Count</code>,
    #               <code>HTTPCode_Instance_5XX_Count</code>, <code>InstanceResponseTime</code>,
    #               <code>RejectedConnectionCount</code>, and <code>RequestCount</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <b>Relational databases</b>: <code>CPUUtilization</code>,
    #               <code>DatabaseConnections</code>, <code>DiskQueueDepth</code>,
    #               <code>FreeStorageSpace</code>, <code>NetworkReceiveThroughput</code>, and
    #               <code>NetworkTransmitThroughput</code>.</p>
    #               </li>
    #            </ul>
    #            <p>For more information about these metrics, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-resource-health-metrics#available-metrics">Metrics available in Lightsail</a>.</p>
    #
    # @option params [String] :monitored_resource_name
    #   <p>The name of the Lightsail resource that will be monitored.</p>
    #            <p>Instances, load balancers, and relational databases are the only Lightsail resources
    #         that can currently be monitored by alarms.</p>
    #
    # @option params [String] :comparison_operator
    #   <p>The arithmetic operation to use when comparing the specified statistic to the threshold.
    #         The specified statistic value is used as the first operand.</p>
    #
    # @option params [Float] :threshold
    #   <p>The value against which the specified statistic is compared.</p>
    #
    # @option params [Integer] :evaluation_periods
    #   <p>The number of most recent periods over which data is compared to the specified threshold.
    #         If you are setting an "M out of N" alarm, this value (<code>evaluationPeriods</code>) is the
    #         N.</p>
    #            <p>If you are setting an alarm that requires that a number of consecutive data points be
    #         breaching to trigger the alarm, this value specifies the rolling period of time in which data
    #         points are evaluated.</p>
    #            <p>Each evaluation period is five minutes long. For example, specify an evaluation period of
    #         24 to evaluate a metric over a rolling period of two hours.</p>
    #            <p>You can specify a minimum valuation period of 1 (5 minutes), and a maximum evaluation
    #         period of 288 (24 hours).</p>
    #
    # @option params [Integer] :datapoints_to_alarm
    #   <p>The number of data points that must be not within the specified threshold to trigger the
    #         alarm. If you are setting an "M out of N" alarm, this value (<code>datapointsToAlarm</code>)
    #         is the M.</p>
    #
    # @option params [String] :treat_missing_data
    #   <p>Sets how this alarm will handle missing data points.</p>
    #            <p>An alarm can treat missing data in the following ways:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>breaching</code> - Assume the missing data is not within the threshold. Missing
    #             data counts towards the number of times the metric is not within the threshold.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>notBreaching</code> - Assume the missing data is within the threshold. Missing
    #             data does not count towards the number of times the metric is not within the
    #             threshold.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ignore</code> - Ignore the missing data. Maintains the current alarm
    #             state.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>missing</code> - Missing data is treated as missing.</p>
    #               </li>
    #            </ul>
    #            <p>If <code>treatMissingData</code> is not specified, the default behavior of
    #           <code>missing</code> is used.</p>
    #
    # @option params [Array<String>] :contact_protocols
    #   <p>The contact protocols to use for the alarm, such as <code>Email</code>, <code>SMS</code>
    #         (text messaging), or both.</p>
    #            <p>A notification is sent via the specified contact protocol if notifications are enabled for
    #         the alarm, and when the alarm is triggered.</p>
    #            <p>A notification is not sent if a contact protocol is not specified, if the specified
    #         contact protocol is not configured in the Amazon Web Services Region, or if notifications are
    #         not enabled for the alarm using the <code>notificationEnabled</code> paramater.</p>
    #            <p>Use the <code>CreateContactMethod</code> action to configure a contact protocol in an
    #           Amazon Web Services Region.</p>
    #
    # @option params [Array<String>] :notification_triggers
    #   <p>The alarm states that trigger a notification.</p>
    #            <p>An alarm has the following possible states:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>ALARM</code> - The metric is outside of the defined threshold.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>INSUFFICIENT_DATA</code> - The alarm has just started, the metric is not
    #             available, or not enough data is available for the metric to determine the alarm
    #             state.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>OK</code> - The metric is within the defined threshold.</p>
    #               </li>
    #            </ul>
    #            <p>When you specify a notification trigger, the <code>ALARM</code> state must be specified.
    #         The <code>INSUFFICIENT_DATA</code> and <code>OK</code> states can be specified in addition to
    #         the <code>ALARM</code> state.</p>
    #            <ul>
    #               <li>
    #                  <p>If you specify <code>OK</code> as an alarm trigger, a notification is sent when the
    #             alarm switches from an <code>ALARM</code> or <code>INSUFFICIENT_DATA</code> alarm state to
    #             an <code>OK</code> state. This can be thought of as an <i>all clear</i>
    #             alarm notification.</p>
    #               </li>
    #               <li>
    #                  <p>If you specify <code>INSUFFICIENT_DATA</code> as the alarm trigger, a notification is
    #             sent when the alarm switches from an <code>OK</code> or <code>ALARM</code> alarm state to
    #             an <code>INSUFFICIENT_DATA</code> state.</p>
    #               </li>
    #            </ul>
    #            <p>The notification trigger defaults to <code>ALARM</code> if you don't specify this
    #         parameter.</p>
    #
    # @option params [Boolean] :notification_enabled
    #   <p>Indicates whether the alarm is enabled.</p>
    #            <p>Notifications are enabled by default if you don't specify this parameter.</p>
    #
    # @return [Types::PutAlarmOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.put_alarm(
    #     alarm_name: 'alarmName', # required
    #     metric_name: 'CPUUtilization', # required - accepts ["CPUUtilization", "NetworkIn", "NetworkOut", "StatusCheckFailed", "StatusCheckFailed_Instance", "StatusCheckFailed_System", "ClientTLSNegotiationErrorCount", "HealthyHostCount", "UnhealthyHostCount", "HTTPCode_LB_4XX_Count", "HTTPCode_LB_5XX_Count", "HTTPCode_Instance_2XX_Count", "HTTPCode_Instance_3XX_Count", "HTTPCode_Instance_4XX_Count", "HTTPCode_Instance_5XX_Count", "InstanceResponseTime", "RejectedConnectionCount", "RequestCount", "DatabaseConnections", "DiskQueueDepth", "FreeStorageSpace", "NetworkReceiveThroughput", "NetworkTransmitThroughput", "BurstCapacityTime", "BurstCapacityPercentage"]
    #     monitored_resource_name: 'monitoredResourceName', # required
    #     comparison_operator: 'GreaterThanOrEqualToThreshold', # required - accepts ["GreaterThanOrEqualToThreshold", "GreaterThanThreshold", "LessThanThreshold", "LessThanOrEqualToThreshold"]
    #     threshold: 1.0, # required
    #     evaluation_periods: 1, # required
    #     datapoints_to_alarm: 1,
    #     treat_missing_data: 'breaching', # accepts ["breaching", "notBreaching", "ignore", "missing"]
    #     contact_protocols: [
    #       'Email' # accepts ["Email", "SMS"]
    #     ],
    #     notification_triggers: [
    #       'OK' # accepts ["OK", "ALARM", "INSUFFICIENT_DATA"]
    #     ],
    #     notification_enabled: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::PutAlarmOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def put_alarm(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::PutAlarmInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::PutAlarmInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::PutAlarm
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::PutAlarm
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::PutAlarm,
        stubs: @stubs,
        params_class: Params::PutAlarmOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :put_alarm
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses
    #       allowed to connect to the instance through the ports, and the protocol. This action also
    #       closes all currently open ports that are not included in the request. Include all of the ports
    #       and the protocols you want to open in your <code>PutInstancePublicPorts</code>request. Or use
    #       the <code>OpenInstancePublicPorts</code> action to open ports without closing currently open
    #       ports.</p>
    #          <p>The <code>PutInstancePublicPorts</code> action supports tag-based access control via
    #       resource tags applied to the resource identified by <code>instanceName</code>. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::PutInstancePublicPortsInput}.
    #
    # @option params [Array<PortInfo>] :port_infos
    #   <p>An array of objects to describe the ports to open for the specified instance.</p>
    #
    # @option params [String] :instance_name
    #   <p>The name of the instance for which to open ports.</p>
    #
    # @return [Types::PutInstancePublicPortsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.put_instance_public_ports(
    #     port_infos: [
    #       {
    #         from_port: 1,
    #         to_port: 1,
    #         protocol: 'tcp', # accepts ["tcp", "all", "udp", "icmp"]
    #         cidrs: [
    #           'member'
    #         ],
    #       }
    #     ], # required
    #     instance_name: 'instanceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::PutInstancePublicPortsOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def put_instance_public_ports(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::PutInstancePublicPortsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::PutInstancePublicPortsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::PutInstancePublicPorts
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::PutInstancePublicPorts
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::PutInstancePublicPorts,
        stubs: @stubs,
        params_class: Params::PutInstancePublicPortsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :put_instance_public_ports
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Restarts a specific instance.</p>
    #          <p>The <code>reboot instance</code> operation supports tag-based access control via resource
    #       tags applied to the resource identified by <code>instance name</code>. For more information,
    #       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::RebootInstanceInput}.
    #
    # @option params [String] :instance_name
    #   <p>The name of the instance to reboot.</p>
    #
    # @return [Types::RebootInstanceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reboot_instance(
    #     instance_name: 'instanceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RebootInstanceOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def reboot_instance(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RebootInstanceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RebootInstanceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RebootInstance
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::RebootInstance
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::RebootInstance,
        stubs: @stubs,
        params_class: Params::RebootInstanceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :reboot_instance
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Restarts a specific database in Amazon Lightsail.</p>
    #          <p>The <code>reboot relational database</code> operation supports tag-based access control
    #       via resource tags applied to the resource identified by relationalDatabaseName. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::RebootRelationalDatabaseInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name of your database to reboot.</p>
    #
    # @return [Types::RebootRelationalDatabaseOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reboot_relational_database(
    #     relational_database_name: 'relationalDatabaseName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RebootRelationalDatabaseOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def reboot_relational_database(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RebootRelationalDatabaseInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RebootRelationalDatabaseInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RebootRelationalDatabase
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::RebootRelationalDatabase
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::RebootRelationalDatabase,
        stubs: @stubs,
        params_class: Params::RebootRelationalDatabaseOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :reboot_relational_database
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Registers a container image to your Amazon Lightsail container service.</p>
    #
    #          <note>
    #             <p>This action is not required if you install and use the Lightsail Control
    #         (lightsailctl) plugin to push container images to your Lightsail container service. For
    #         more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-pushing-container-images">Pushing and managing container images on your Amazon Lightsail container services</a>
    #         in the <i>Amazon Lightsail Developer Guide</i>.</p>
    #          </note>
    #
    # @param [Hash] params
    #   See {Types::RegisterContainerImageInput}.
    #
    # @option params [String] :service_name
    #   <p>The name of the container service for which to register a container image.</p>
    #
    # @option params [String] :label
    #   <p>The label for the container image when it's registered to the container service.</p>
    #
    #            <p>Use a descriptive label that you can use to track the different versions of your
    #         registered container images.</p>
    #
    #            <p>Use the <code>GetContainerImages</code> action to return the container images registered
    #         to a Lightsail container service. The label is the <code><imagelabel></code> portion
    #         of the following image name example:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>:container-service-1.<imagelabel>.1</code>
    #                  </p>
    #               </li>
    #            </ul>
    #
    #            <p>If the name of your container service is <code>mycontainerservice</code>, and the label
    #         that you specify is <code>mystaticwebsite</code>, then the name of the registered container
    #         image will be <code>:mycontainerservice.mystaticwebsite.1</code>.</p>
    #
    #            <p>The number at the end of these image name examples represents the version of the
    #         registered container image. If you push and register another container image to the same
    #         Lightsail container service, with the same label, then the version number for the new
    #         registered container image will be <code>2</code>. If you push and register another container
    #         image, the version number will be <code>3</code>, and so on.</p>
    #
    # @option params [String] :digest
    #   <p>The digest of the container image to be registered.</p>
    #
    # @return [Types::RegisterContainerImageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.register_container_image(
    #     service_name: 'serviceName', # required
    #     label: 'label', # required
    #     digest: 'digest' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RegisterContainerImageOutput
    #   resp.data.container_image #=> Types::ContainerImage
    #   resp.data.container_image.image #=> String
    #   resp.data.container_image.digest #=> String
    #   resp.data.container_image.created_at #=> Time
    #
    def register_container_image(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RegisterContainerImageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RegisterContainerImageInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RegisterContainerImage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::RegisterContainerImage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::RegisterContainerImage,
        stubs: @stubs,
        params_class: Params::RegisterContainerImageOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :register_container_image
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a specific static IP from your account.</p>
    #
    # @param [Hash] params
    #   See {Types::ReleaseStaticIpInput}.
    #
    # @option params [String] :static_ip_name
    #   <p>The name of the static IP to delete.</p>
    #
    # @return [Types::ReleaseStaticIpOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.release_static_ip(
    #     static_ip_name: 'staticIpName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ReleaseStaticIpOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def release_static_ip(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ReleaseStaticIpInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ReleaseStaticIpInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ReleaseStaticIp
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::ReleaseStaticIp
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ReleaseStaticIp,
        stubs: @stubs,
        params_class: Params::ReleaseStaticIpOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :release_static_ip
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes currently cached content from your Amazon Lightsail content delivery network (CDN)
    #       distribution.</p>
    #          <p>After resetting the cache, the next time a content request is made, your distribution
    #       pulls, serves, and caches it from the origin.</p>
    #
    # @param [Hash] params
    #   See {Types::ResetDistributionCacheInput}.
    #
    # @option params [String] :distribution_name
    #   <p>The name of the distribution for which to reset cache.</p>
    #            <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    #         can specify.</p>
    #
    # @return [Types::ResetDistributionCacheOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reset_distribution_cache(
    #     distribution_name: 'distributionName'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ResetDistributionCacheOutput
    #   resp.data.status #=> String
    #   resp.data.create_time #=> Time
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def reset_distribution_cache(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ResetDistributionCacheInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ResetDistributionCacheInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ResetDistributionCache
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::ResetDistributionCache
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ResetDistributionCache,
        stubs: @stubs,
        params_class: Params::ResetDistributionCacheOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :reset_distribution_cache
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Sends a verification request to an email contact method to ensure it's owned by the
    #       requester. SMS contact methods don't need to be verified.</p>
    #          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
    #       You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services
    #       Regions, and SMS text messages cannot be sent to some countries/regions. For more information,
    #       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
    #          <p>A verification request is sent to the contact method when you initially create it. Use
    #       this action to send another verification request if a previous verification request was
    #       deleted, or has expired.</p>
    #          <important>
    #             <p>Notifications are not sent to an email contact method until after it is verified, and
    #         confirmed as valid.</p>
    #          </important>
    #
    # @param [Hash] params
    #   See {Types::SendContactMethodVerificationInput}.
    #
    # @option params [String] :protocol
    #   <p>The protocol to verify, such as <code>Email</code> or <code>SMS</code> (text
    #         messaging).</p>
    #
    # @return [Types::SendContactMethodVerificationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.send_contact_method_verification(
    #     protocol: 'Email' # required - accepts ["Email"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::SendContactMethodVerificationOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def send_contact_method_verification(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::SendContactMethodVerificationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::SendContactMethodVerificationInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::SendContactMethodVerification
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::SendContactMethodVerification
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::SendContactMethodVerification,
        stubs: @stubs,
        params_class: Params::SendContactMethodVerificationOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :send_contact_method_verification
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Sets the IP address type for an Amazon Lightsail resource.</p>
    #
    #          <p>Use this action to enable dual-stack for a resource, which enables IPv4 and IPv6 for the
    #       specified resource. Alternately, you can use this action to disable dual-stack, and enable
    #       IPv4 only.</p>
    #
    # @param [Hash] params
    #   See {Types::SetIpAddressTypeInput}.
    #
    # @option params [String] :resource_type
    #   <p>The resource type.</p>
    #            <p>The possible values are <code>Distribution</code>, <code>Instance</code>, and
    #           <code>LoadBalancer</code>.</p>
    #            <note>
    #               <p>Distribution-related APIs are available only in the N. Virginia (<code>us-east-1</code>)
    #             Amazon Web Services Region. Set your Amazon Web Services Region configuration to
    #             <code>us-east-1</code> to create, view, or edit distributions.</p>
    #            </note>
    #
    # @option params [String] :resource_name
    #   <p>The name of the resource for which to set the IP address type.</p>
    #
    # @option params [String] :ip_address_type
    #   <p>The IP address type to set for the specified resource.</p>
    #
    #            <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
    #         IPv4 and IPv6.</p>
    #
    # @return [Types::SetIpAddressTypeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.set_ip_address_type(
    #     resource_type: 'ContainerService', # required - accepts ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #     resource_name: 'resourceName', # required
    #     ip_address_type: 'dualstack' # required - accepts ["dualstack", "ipv4"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::SetIpAddressTypeOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def set_ip_address_type(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::SetIpAddressTypeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::SetIpAddressTypeInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::SetIpAddressType
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::SetIpAddressType
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::SetIpAddressType,
        stubs: @stubs,
        params_class: Params::SetIpAddressTypeOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :set_ip_address_type
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Sets the Amazon Lightsail resources that can access the specified Lightsail
    #       bucket.</p>
    #
    #          <p>Lightsail buckets currently support setting access for Lightsail instances in the same
    #         Amazon Web Services Region.</p>
    #
    # @param [Hash] params
    #   See {Types::SetResourceAccessForBucketInput}.
    #
    # @option params [String] :resource_name
    #   <p>The name of the Lightsail instance for which to set bucket access. The instance must be
    #         in a running or stopped state.</p>
    #
    # @option params [String] :bucket_name
    #   <p>The name of the bucket for which to set access to another Lightsail resource.</p>
    #
    # @option params [String] :access
    #   <p>The access setting.</p>
    #
    #            <p>The following access settings are available:</p>
    #
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>allow</code> - Allows access to the bucket and its objects.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>deny</code> - Denies access to the bucket and its objects. Use this setting to
    #             remove access for a resource previously set to <code>allow</code>.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::SetResourceAccessForBucketOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.set_resource_access_for_bucket(
    #     resource_name: 'resourceName', # required
    #     bucket_name: 'bucketName', # required
    #     access: 'allow' # required - accepts ["allow", "deny"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::SetResourceAccessForBucketOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def set_resource_access_for_bucket(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::SetResourceAccessForBucketInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::SetResourceAccessForBucketInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::SetResourceAccessForBucket
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::SetResourceAccessForBucket
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::SetResourceAccessForBucket,
        stubs: @stubs,
        params_class: Params::SetResourceAccessForBucketOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :set_resource_access_for_bucket
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Starts a specific Amazon Lightsail instance from a stopped state. To restart an instance,
    #       use the <code>reboot instance</code> operation.</p>
    #          <note>
    #             <p>When you start a stopped instance, Lightsail assigns a new public IP address to the
    #         instance. To use the same IP address after stopping and starting an instance, create a
    #         static IP address and attach it to the instance. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-create-static-ip">Amazon Lightsail Developer Guide</a>.</p>
    #          </note>
    #          <p>The <code>start instance</code> operation supports tag-based access control via resource
    #       tags applied to the resource identified by <code>instance name</code>. For more information,
    #       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::StartInstanceInput}.
    #
    # @option params [String] :instance_name
    #   <p>The name of the instance (a virtual private server) to start.</p>
    #
    # @return [Types::StartInstanceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.start_instance(
    #     instance_name: 'instanceName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StartInstanceOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def start_instance(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StartInstanceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StartInstanceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StartInstance
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::StartInstance
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StartInstance,
        stubs: @stubs,
        params_class: Params::StartInstanceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :start_instance
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Starts a specific database from a stopped state in Amazon Lightsail. To restart a database,
    #       use the <code>reboot relational database</code> operation.</p>
    #          <p>The <code>start relational database</code> operation supports tag-based access control via
    #       resource tags applied to the resource identified by relationalDatabaseName. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::StartRelationalDatabaseInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name of your database to start.</p>
    #
    # @return [Types::StartRelationalDatabaseOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.start_relational_database(
    #     relational_database_name: 'relationalDatabaseName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StartRelationalDatabaseOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def start_relational_database(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StartRelationalDatabaseInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StartRelationalDatabaseInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StartRelationalDatabase
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::StartRelationalDatabase
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StartRelationalDatabase,
        stubs: @stubs,
        params_class: Params::StartRelationalDatabaseOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :start_relational_database
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Stops a specific Amazon Lightsail instance that is currently running.</p>
    #          <note>
    #             <p>When you start a stopped instance, Lightsail assigns a new public IP address to the
    #         instance. To use the same IP address after stopping and starting an instance, create a
    #         static IP address and attach it to the instance. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-create-static-ip">Amazon Lightsail Developer Guide</a>.</p>
    #          </note>
    #          <p>The <code>stop instance</code> operation supports tag-based access control via resource
    #       tags applied to the resource identified by <code>instance name</code>. For more information,
    #       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::StopInstanceInput}.
    #
    # @option params [String] :instance_name
    #   <p>The name of the instance (a virtual private server) to stop.</p>
    #
    # @option params [Boolean] :force
    #   <p>When set to <code>True</code>, forces a Lightsail instance that is stuck in a
    #           <code>stopping</code> state to stop.</p>
    #            <important>
    #               <p>Only use the <code>force</code> parameter if your instance is stuck in the
    #             <code>stopping</code> state. In any other state, your instance should stop normally
    #           without adding this parameter to your API request.</p>
    #            </important>
    #
    # @return [Types::StopInstanceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.stop_instance(
    #     instance_name: 'instanceName', # required
    #     force: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StopInstanceOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def stop_instance(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StopInstanceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StopInstanceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StopInstance
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::StopInstance
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StopInstance,
        stubs: @stubs,
        params_class: Params::StopInstanceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :stop_instance
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Stops a specific database that is currently running in Amazon Lightsail.</p>
    #          <p>The <code>stop relational database</code> operation supports tag-based access control via
    #       resource tags applied to the resource identified by relationalDatabaseName. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::StopRelationalDatabaseInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name of your database to stop.</p>
    #
    # @option params [String] :relational_database_snapshot_name
    #   <p>The name of your new database snapshot to be created before stopping your database.</p>
    #
    # @return [Types::StopRelationalDatabaseOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.stop_relational_database(
    #     relational_database_name: 'relationalDatabaseName', # required
    #     relational_database_snapshot_name: 'relationalDatabaseSnapshotName'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StopRelationalDatabaseOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def stop_relational_database(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StopRelationalDatabaseInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StopRelationalDatabaseInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StopRelationalDatabase
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::StopRelationalDatabase
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::StopRelationalDatabase,
        stubs: @stubs,
        params_class: Params::StopRelationalDatabaseOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :stop_relational_database
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Adds one or more tags to the specified Amazon Lightsail resource. Each resource can have a
    #       maximum of 50 tags. Each tag consists of a key and an optional value. Tag keys must be unique
    #       per resource. For more information about tags, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    #          <p>The <code>tag resource</code> operation supports tag-based access control via request tags
    #       and resource tags applied to the resource identified by <code>resource name</code>. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::TagResourceInput}.
    #
    # @option params [String] :resource_name
    #   <p>The name of the resource to which you are adding tags.</p>
    #
    # @option params [String] :resource_arn
    #   <p>The Amazon Resource Name (ARN) of the resource to which you want to add a tag.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tag key and optional value.</p>
    #
    # @return [Types::TagResourceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.tag_resource(
    #     resource_name: 'resourceName', # required
    #     resource_arn: 'resourceArn',
    #     tags: [
    #       {
    #         key: 'key',
    #         value: 'value'
    #       }
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::TagResourceOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def tag_resource(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::TagResourceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::TagResourceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::TagResource
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::TagResource
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::TagResource,
        stubs: @stubs,
        params_class: Params::TagResourceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :tag_resource
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Tests an alarm by displaying a banner on the Amazon Lightsail console. If a notification
    #       trigger is configured for the specified alarm, the test also sends a notification to the
    #       notification protocol (<code>Email</code> and/or <code>SMS</code>) configured for the
    #       alarm.</p>
    #          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
    #       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
    #       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
    #         in Amazon Lightsail</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::TestAlarmInput}.
    #
    # @option params [String] :alarm_name
    #   <p>The name of the alarm to test.</p>
    #
    # @option params [String] :state
    #   <p>The alarm state to test.</p>
    #            <p>An alarm has the following possible states that can be tested:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>ALARM</code> - The metric is outside of the defined threshold.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>INSUFFICIENT_DATA</code> - The alarm has just started, the metric is not
    #             available, or not enough data is available for the metric to determine the alarm
    #             state.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>OK</code> - The metric is within the defined threshold.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::TestAlarmOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.test_alarm(
    #     alarm_name: 'alarmName', # required
    #     state: 'OK' # required - accepts ["OK", "ALARM", "INSUFFICIENT_DATA"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::TestAlarmOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def test_alarm(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::TestAlarmInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::TestAlarmInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::TestAlarm
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::TestAlarm
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::TestAlarm,
        stubs: @stubs,
        params_class: Params::TestAlarmOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :test_alarm
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Unpeers the Lightsail VPC from the user's default VPC.</p>
    #
    # @param [Hash] params
    #   See {Types::UnpeerVpcInput}.
    #
    # @return [Types::UnpeerVpcOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.unpeer_vpc()
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UnpeerVpcOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def unpeer_vpc(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UnpeerVpcInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UnpeerVpcInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UnpeerVpc
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::UnpeerVpc
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UnpeerVpc,
        stubs: @stubs,
        params_class: Params::UnpeerVpcOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :unpeer_vpc
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified set of tag keys and their values from the specified Amazon Lightsail
    #       resource.</p>
    #          <p>The <code>untag resource</code> operation supports tag-based access control via request
    #       tags and resource tags applied to the resource identified by <code>resource name</code>. For
    #       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::UntagResourceInput}.
    #
    # @option params [String] :resource_name
    #   <p>The name of the resource from which you are removing a tag.</p>
    #
    # @option params [String] :resource_arn
    #   <p>The Amazon Resource Name (ARN) of the resource from which you want to remove a tag.</p>
    #
    # @option params [Array<String>] :tag_keys
    #   <p>The tag keys to delete from the specified resource.</p>
    #
    # @return [Types::UntagResourceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.untag_resource(
    #     resource_name: 'resourceName', # required
    #     resource_arn: 'resourceArn',
    #     tag_keys: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UntagResourceOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def untag_resource(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UntagResourceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UntagResourceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UntagResource
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::UntagResource
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UntagResource,
        stubs: @stubs,
        params_class: Params::UntagResourceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :untag_resource
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates an existing Amazon Lightsail bucket.</p>
    #
    #          <p>Use this action to update the configuration of an existing bucket, such as versioning,
    #       public accessibility, and the Amazon Web Services accounts that can access the bucket.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateBucketInput}.
    #
    # @option params [String] :bucket_name
    #   <p>The name of the bucket to update.</p>
    #
    # @option params [AccessRules] :access_rules
    #   <p>An object that sets the public accessibility of objects in the specified bucket.</p>
    #
    # @option params [String] :versioning
    #   <p>Specifies whether to enable or suspend versioning of objects in the bucket.</p>
    #
    #            <p>The following options can be specified:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>Enabled</code> - Enables versioning of objects in the specified bucket.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>Suspended</code> - Suspends versioning of objects in the specified bucket.
    #             Existing object versions are retained.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :readonly_access_accounts
    #   <p>An array of strings to specify the Amazon Web Services account IDs that can access the
    #         bucket.</p>
    #
    #            <p>You can give a maximum of 10 Amazon Web Services accounts access to a bucket.</p>
    #
    # @option params [BucketAccessLogConfig] :access_log_config
    #   <p>An object that describes the access log configuration for the bucket.</p>
    #
    # @return [Types::UpdateBucketOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_bucket(
    #     bucket_name: 'bucketName', # required
    #     access_rules: {
    #       get_object: 'public', # accepts ["public", "private"]
    #       allow_public_overrides: false
    #     },
    #     versioning: 'versioning',
    #     readonly_access_accounts: [
    #       'member'
    #     ],
    #     access_log_config: {
    #       enabled: false, # required
    #       destination: 'destination',
    #       prefix: 'prefix'
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateBucketOutput
    #   resp.data.bucket #=> Types::Bucket
    #   resp.data.bucket.resource_type #=> String
    #   resp.data.bucket.access_rules #=> Types::AccessRules
    #   resp.data.bucket.access_rules.get_object #=> String, one of ["public", "private"]
    #   resp.data.bucket.access_rules.allow_public_overrides #=> Boolean
    #   resp.data.bucket.arn #=> String
    #   resp.data.bucket.bundle_id #=> String
    #   resp.data.bucket.created_at #=> Time
    #   resp.data.bucket.url #=> String
    #   resp.data.bucket.location #=> Types::ResourceLocation
    #   resp.data.bucket.location.availability_zone #=> String
    #   resp.data.bucket.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.bucket.name #=> String
    #   resp.data.bucket.support_code #=> String
    #   resp.data.bucket.tags #=> Array<Tag>
    #   resp.data.bucket.tags[0] #=> Types::Tag
    #   resp.data.bucket.tags[0].key #=> String
    #   resp.data.bucket.tags[0].value #=> String
    #   resp.data.bucket.object_versioning #=> String
    #   resp.data.bucket.able_to_update_bundle #=> Boolean
    #   resp.data.bucket.readonly_access_accounts #=> Array<String>
    #   resp.data.bucket.readonly_access_accounts[0] #=> String
    #   resp.data.bucket.resources_receiving_access #=> Array<ResourceReceivingAccess>
    #   resp.data.bucket.resources_receiving_access[0] #=> Types::ResourceReceivingAccess
    #   resp.data.bucket.resources_receiving_access[0].name #=> String
    #   resp.data.bucket.resources_receiving_access[0].resource_type #=> String
    #   resp.data.bucket.state #=> Types::BucketState
    #   resp.data.bucket.state.code #=> String
    #   resp.data.bucket.state.message #=> String
    #   resp.data.bucket.access_log_config #=> Types::BucketAccessLogConfig
    #   resp.data.bucket.access_log_config.enabled #=> Boolean
    #   resp.data.bucket.access_log_config.destination #=> String
    #   resp.data.bucket.access_log_config.prefix #=> String
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def update_bucket(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateBucketInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateBucketInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateBucket
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::UpdateBucket
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateBucket,
        stubs: @stubs,
        params_class: Params::UpdateBucketOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_bucket
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates the bundle, or storage plan, of an existing Amazon Lightsail bucket.</p>
    #
    #          <p>A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a
    #       bucket. You can update a bucket's bundle only one time within a monthly AWS billing cycle. To
    #       determine if you can update a bucket's bundle, use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBuckets.html">GetBuckets</a> action. The
    #         <code>ableToUpdateBundle</code> parameter in the response will indicate whether you can
    #       currently update a bucket's bundle.</p>
    #
    #          <p>Update a bucket's bundle if it's consistently going over its storage space or data
    #       transfer quota, or if a bucket's usage is consistently in the lower range of its storage space
    #       or data transfer quota. Due to the unpredictable usage fluctuations that a bucket might
    #       experience, we strongly recommend that you update a bucket's bundle only as a long-term
    #       strategy, instead of as a short-term, monthly cost-cutting measure. Choose a bucket bundle
    #       that will provide the bucket with ample storage space and data transfer for a long time to
    #       come.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateBucketBundleInput}.
    #
    # @option params [String] :bucket_name
    #   <p>The name of the bucket for which to update the bundle.</p>
    #
    # @option params [String] :bundle_id
    #   <p>The ID of the new bundle to apply to the bucket.</p>
    #
    #            <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketBundles.html">GetBucketBundles</a> action to get a list of
    #         bundle IDs that you can specify.</p>
    #
    # @return [Types::UpdateBucketBundleOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_bucket_bundle(
    #     bucket_name: 'bucketName', # required
    #     bundle_id: 'bundleId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateBucketBundleOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def update_bucket_bundle(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateBucketBundleInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateBucketBundleInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateBucketBundle
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::UpdateBucketBundle
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateBucketBundle,
        stubs: @stubs,
        params_class: Params::UpdateBucketBundleOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_bucket_bundle
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates the configuration of your Amazon Lightsail container service, such as its power,
    #       scale, and public domain names.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateContainerServiceInput}.
    #
    # @option params [String] :service_name
    #   <p>The name of the container service to update.</p>
    #
    # @option params [String] :power
    #   <p>The power for the container service.</p>
    #
    #            <p>The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the
    #         container service. The <code>power</code> and <code>scale</code> of a container service makes
    #         up its configured capacity. To determine the monthly price of your container service, multiply
    #         the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of
    #         the service.</p>
    #
    #            <p>Use the <code>GetContainerServicePowers</code> action to view the specifications of each
    #         power option.</p>
    #
    # @option params [Integer] :scale
    #   <p>The scale for the container service.</p>
    #
    #            <p>The scale specifies the allocated compute nodes of the container service. The
    #           <code>power</code> and <code>scale</code> of a container service makes up its configured
    #         capacity. To determine the monthly price of your container service, multiply the base price of
    #         the <code>power</code> with the <code>scale</code> (the number of nodes) of the
    #         service.</p>
    #
    # @option params [Boolean] :is_disabled
    #   <p>A Boolean value to indicate whether the container service is disabled.</p>
    #
    # @option params [Hash<String, Array<String>>] :public_domain_names
    #   <p>The public domain names to use with the container service, such as
    #           <code>example.com</code> and <code>www.example.com</code>.</p>
    #
    #            <p>You can specify up to four public domain names for a container service. The domain names
    #         that you specify are used when you create a deployment with a container configured as the
    #         public endpoint of your container service.</p>
    #
    #            <p>If you don't specify public domain names, then you can use the default domain of the
    #         container service.</p>
    #
    #            <important>
    #               <p>You must create and validate an SSL/TLS certificate before you can use public domain
    #           names with your container service. Use the <code>CreateCertificate</code> action to create a
    #           certificate for the public domain names you want to use with your container service.</p>
    #            </important>
    #
    #            <p>You can specify public domain names using a string to array map as shown in the example
    #         later on this page.</p>
    #
    # @option params [PrivateRegistryAccessRequest] :private_registry_access
    #   <p>An object to describe the configuration for the container service to access private
    #         container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private
    #         repositories.</p>
    #
    #            <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    #
    # @return [Types::UpdateContainerServiceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_container_service(
    #     service_name: 'serviceName', # required
    #     power: 'nano', # accepts ["nano", "micro", "small", "medium", "large", "xlarge"]
    #     scale: 1,
    #     is_disabled: false,
    #     public_domain_names: {
    #       'key' => [
    #         'member'
    #       ]
    #     },
    #     private_registry_access: {
    #       ecr_image_puller_role: {
    #         is_active: false
    #       }
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateContainerServiceOutput
    #   resp.data.container_service #=> Types::ContainerService
    #   resp.data.container_service.container_service_name #=> String
    #   resp.data.container_service.arn #=> String
    #   resp.data.container_service.created_at #=> Time
    #   resp.data.container_service.location #=> Types::ResourceLocation
    #   resp.data.container_service.location.availability_zone #=> String
    #   resp.data.container_service.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.container_service.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.container_service.tags #=> Array<Tag>
    #   resp.data.container_service.tags[0] #=> Types::Tag
    #   resp.data.container_service.tags[0].key #=> String
    #   resp.data.container_service.tags[0].value #=> String
    #   resp.data.container_service.power #=> String, one of ["nano", "micro", "small", "medium", "large", "xlarge"]
    #   resp.data.container_service.power_id #=> String
    #   resp.data.container_service.state #=> String, one of ["PENDING", "READY", "RUNNING", "UPDATING", "DELETING", "DISABLED", "DEPLOYING"]
    #   resp.data.container_service.state_detail #=> Types::ContainerServiceStateDetail
    #   resp.data.container_service.state_detail.code #=> String, one of ["CREATING_SYSTEM_RESOURCES", "CREATING_NETWORK_INFRASTRUCTURE", "PROVISIONING_CERTIFICATE", "PROVISIONING_SERVICE", "CREATING_DEPLOYMENT", "EVALUATING_HEALTH_CHECK", "ACTIVATING_DEPLOYMENT", "CERTIFICATE_LIMIT_EXCEEDED", "UNKNOWN_ERROR"]
    #   resp.data.container_service.state_detail.message #=> String
    #   resp.data.container_service.scale #=> Integer
    #   resp.data.container_service.current_deployment #=> Types::ContainerServiceDeployment
    #   resp.data.container_service.current_deployment.version #=> Integer
    #   resp.data.container_service.current_deployment.state #=> String, one of ["ACTIVATING", "ACTIVE", "INACTIVE", "FAILED"]
    #   resp.data.container_service.current_deployment.containers #=> Hash<String, Container>
    #   resp.data.container_service.current_deployment.containers['key'] #=> Types::Container
    #   resp.data.container_service.current_deployment.containers['key'].image #=> String
    #   resp.data.container_service.current_deployment.containers['key'].command #=> Array<String>
    #   resp.data.container_service.current_deployment.containers['key'].command[0] #=> String
    #   resp.data.container_service.current_deployment.containers['key'].environment #=> Hash<String, String>
    #   resp.data.container_service.current_deployment.containers['key'].environment['key'] #=> String
    #   resp.data.container_service.current_deployment.containers['key'].ports #=> Hash<String, String>
    #   resp.data.container_service.current_deployment.containers['key'].ports['key'] #=> String, one of ["HTTP", "HTTPS", "TCP", "UDP"]
    #   resp.data.container_service.current_deployment.public_endpoint #=> Types::ContainerServiceEndpoint
    #   resp.data.container_service.current_deployment.public_endpoint.container_name #=> String
    #   resp.data.container_service.current_deployment.public_endpoint.container_port #=> Integer
    #   resp.data.container_service.current_deployment.public_endpoint.health_check #=> Types::ContainerServiceHealthCheckConfig
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.healthy_threshold #=> Integer
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.unhealthy_threshold #=> Integer
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.timeout_seconds #=> Integer
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.interval_seconds #=> Integer
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.path #=> String
    #   resp.data.container_service.current_deployment.public_endpoint.health_check.success_codes #=> String
    #   resp.data.container_service.current_deployment.created_at #=> Time
    #   resp.data.container_service.next_deployment #=> Types::ContainerServiceDeployment
    #   resp.data.container_service.is_disabled #=> Boolean
    #   resp.data.container_service.principal_arn #=> String
    #   resp.data.container_service.private_domain_name #=> String
    #   resp.data.container_service.public_domain_names #=> Hash<String, Array<String>>
    #   resp.data.container_service.public_domain_names['key'] #=> Array<String>
    #   resp.data.container_service.public_domain_names['key'][0] #=> String
    #   resp.data.container_service.url #=> String
    #   resp.data.container_service.private_registry_access #=> Types::PrivateRegistryAccess
    #   resp.data.container_service.private_registry_access.ecr_image_puller_role #=> Types::ContainerServiceECRImagePullerRole
    #   resp.data.container_service.private_registry_access.ecr_image_puller_role.is_active #=> Boolean
    #   resp.data.container_service.private_registry_access.ecr_image_puller_role.principal_arn #=> String
    #
    def update_container_service(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateContainerServiceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateContainerServiceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateContainerService
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::UpdateContainerService
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateContainerService,
        stubs: @stubs,
        params_class: Params::UpdateContainerServiceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_container_service
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates an existing Amazon Lightsail content delivery network (CDN) distribution.</p>
    #          <p>Use this action to update the configuration of your existing distribution.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateDistributionInput}.
    #
    # @option params [String] :distribution_name
    #   <p>The name of the distribution to update.</p>
    #            <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    #         can specify.</p>
    #
    # @option params [InputOrigin] :origin
    #   <p>An object that describes the origin resource for the distribution, such as a Lightsail
    #         instance, bucket, or load balancer.</p>
    #            <p>The distribution pulls, caches, and serves content from the origin.</p>
    #
    # @option params [CacheBehavior] :default_cache_behavior
    #   <p>An object that describes the default cache behavior for the distribution.</p>
    #
    # @option params [CacheSettings] :cache_behavior_settings
    #   <p>An object that describes the cache behavior settings for the distribution.</p>
    #            <note>
    #               <p>The <code>cacheBehaviorSettings</code> specified in your
    #             <code>UpdateDistributionRequest</code> will replace your distribution's existing
    #           settings.</p>
    #            </note>
    #
    # @option params [Array<CacheBehaviorPerPath>] :cache_behaviors
    #   <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    #
    # @option params [Boolean] :is_enabled
    #   <p>Indicates whether to enable the distribution.</p>
    #
    # @return [Types::UpdateDistributionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_distribution(
    #     distribution_name: 'distributionName', # required
    #     origin: {
    #       name: 'name',
    #       region_name: 'us-east-1', # accepts ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #       protocol_policy: 'http-only' # accepts ["http-only", "https-only"]
    #     },
    #     default_cache_behavior: {
    #       behavior: 'dont-cache' # accepts ["dont-cache", "cache"]
    #     },
    #     cache_behavior_settings: {
    #       default_ttl: 1,
    #       minimum_ttl: 1,
    #       maximum_ttl: 1,
    #       allowed_http_methods: 'allowedHTTPMethods',
    #       cached_http_methods: 'cachedHTTPMethods',
    #       forwarded_cookies: {
    #         option: 'none', # accepts ["none", "allow-list", "all"]
    #         cookies_allow_list: [
    #           'member'
    #         ]
    #       },
    #       forwarded_headers: {
    #         option: 'none', # accepts ["none", "allow-list", "all"]
    #         headers_allow_list: [
    #           'Accept' # accepts ["Accept", "Accept-Charset", "Accept-Datetime", "Accept-Encoding", "Accept-Language", "Authorization", "CloudFront-Forwarded-Proto", "CloudFront-Is-Desktop-Viewer", "CloudFront-Is-Mobile-Viewer", "CloudFront-Is-SmartTV-Viewer", "CloudFront-Is-Tablet-Viewer", "CloudFront-Viewer-Country", "Host", "Origin", "Referer"]
    #         ]
    #       },
    #       forwarded_query_strings: {
    #         option: false,
    #       }
    #     },
    #     cache_behaviors: [
    #       {
    #         path: 'path',
    #         behavior: 'dont-cache' # accepts ["dont-cache", "cache"]
    #       }
    #     ],
    #     is_enabled: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateDistributionOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def update_distribution(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateDistributionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateDistributionInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateDistribution
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::UpdateDistribution
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateDistribution,
        stubs: @stubs,
        params_class: Params::UpdateDistributionOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_distribution
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates the bundle of your Amazon Lightsail content delivery network (CDN)
    #       distribution.</p>
    #          <p>A distribution bundle specifies the monthly network transfer quota and monthly cost of
    #       your distribution.</p>
    #          <p>Update your distribution's bundle if your distribution is going over its monthly network
    #       transfer quota and is incurring an overage fee.</p>
    #          <p>You can update your distribution's bundle only one time within your monthly AWS billing
    #       cycle. To determine if you can update your distribution's bundle, use the
    #         <code>GetDistributions</code> action. The <code>ableToUpdateBundle</code> parameter in the
    #       result will indicate whether you can currently update your distribution's bundle.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateDistributionBundleInput}.
    #
    # @option params [String] :distribution_name
    #   <p>The name of the distribution for which to update the bundle.</p>
    #            <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    #         can specify.</p>
    #
    # @option params [String] :bundle_id
    #   <p>The bundle ID of the new bundle to apply to your distribution.</p>
    #            <p>Use the <code>GetDistributionBundles</code> action to get a list of distribution bundle
    #         IDs that you can specify.</p>
    #
    # @return [Types::UpdateDistributionBundleOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_distribution_bundle(
    #     distribution_name: 'distributionName',
    #     bundle_id: 'bundleId'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateDistributionBundleOutput
    #   resp.data.operation #=> Types::Operation
    #   resp.data.operation.id #=> String
    #   resp.data.operation.resource_name #=> String
    #   resp.data.operation.resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operation.created_at #=> Time
    #   resp.data.operation.location #=> Types::ResourceLocation
    #   resp.data.operation.location.availability_zone #=> String
    #   resp.data.operation.location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operation.is_terminal #=> Boolean
    #   resp.data.operation.operation_details #=> String
    #   resp.data.operation.operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operation.status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operation.status_changed_at #=> Time
    #   resp.data.operation.error_code #=> String
    #   resp.data.operation.error_details #=> String
    #
    def update_distribution_bundle(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateDistributionBundleInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateDistributionBundleInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateDistributionBundle
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::UpdateDistributionBundle
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateDistributionBundle,
        stubs: @stubs,
        params_class: Params::UpdateDistributionBundleOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_distribution_bundle
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates a domain recordset after it is created.</p>
    #          <p>The <code>update domain entry</code> operation supports tag-based access control via
    #       resource tags applied to the resource identified by <code>domain name</code>. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateDomainEntryInput}.
    #
    # @option params [String] :domain_name
    #   <p>The name of the domain recordset to update.</p>
    #
    # @option params [DomainEntry] :domain_entry
    #   <p>An array of key-value pairs containing information about the domain entry.</p>
    #
    # @return [Types::UpdateDomainEntryOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_domain_entry(
    #     domain_name: 'domainName', # required
    #     domain_entry: {
    #       id: 'id',
    #       name: 'name',
    #       target: 'target',
    #       is_alias: false,
    #       type: 'type',
    #       options: {
    #         'key' => 'value'
    #       }
    #     } # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateDomainEntryOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def update_domain_entry(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateDomainEntryInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateDomainEntryInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateDomainEntry
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::UpdateDomainEntry
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateDomainEntry,
        stubs: @stubs,
        params_class: Params::UpdateDomainEntryOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_domain_entry
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates the specified attribute for a load balancer. You can only update one attribute at
    #       a time.</p>
    #          <p>The <code>update load balancer attribute</code> operation supports tag-based access
    #       control via resource tags applied to the resource identified by <code>load balancer
    #         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateLoadBalancerAttributeInput}.
    #
    # @option params [String] :load_balancer_name
    #   <p>The name of the load balancer that you want to modify (e.g.,
    #         <code>my-load-balancer</code>.</p>
    #
    # @option params [String] :attribute_name
    #   <p>The name of the attribute you want to update.</p>
    #
    # @option params [String] :attribute_value
    #   <p>The value that you want to specify for the attribute name.</p>
    #            <p>The following values are supported depending on what you specify for the
    #           <code>attributeName</code> request parameter:</p>
    #            <ul>
    #               <li>
    #                  <p>If you specify <code>HealthCheckPath</code> for the <code>attributeName</code> request
    #             parameter, then the <code>attributeValue</code> request parameter must be the path to ping
    #             on the target (for example, <code>/weather/us/wa/seattle</code>).</p>
    #               </li>
    #               <li>
    #                  <p>If you specify <code>SessionStickinessEnabled</code> for the
    #               <code>attributeName</code> request parameter, then the <code>attributeValue</code>
    #             request parameter must be <code>true</code> to activate session stickiness or
    #               <code>false</code> to deactivate session stickiness.</p>
    #               </li>
    #               <li>
    #                  <p>If you specify <code>SessionStickiness_LB_CookieDurationSeconds</code> for the
    #               <code>attributeName</code> request parameter, then the <code>attributeValue</code>
    #             request parameter must be an interger that represents the cookie duration in
    #             seconds.</p>
    #               </li>
    #               <li>
    #                  <p>If you specify <code>HttpsRedirectionEnabled</code> for the <code>attributeName</code>
    #             request parameter, then the <code>attributeValue</code> request parameter must be
    #               <code>true</code> to activate HTTP to HTTPS redirection or <code>false</code> to
    #             deactivate HTTP to HTTPS redirection.</p>
    #               </li>
    #               <li>
    #                  <p>If you specify <code>TlsPolicyName</code> for the <code>attributeName</code> request
    #             parameter, then the <code>attributeValue</code> request parameter must be the name of the
    #             TLS policy.</p>
    #                  <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetLoadBalancerTlsPolicies.html">GetLoadBalancerTlsPolicies</a> action to get a list of TLS policy names that you
    #             can specify.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::UpdateLoadBalancerAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_load_balancer_attribute(
    #     load_balancer_name: 'loadBalancerName', # required
    #     attribute_name: 'HealthCheckPath', # required - accepts ["HealthCheckPath", "SessionStickinessEnabled", "SessionStickiness_LB_CookieDurationSeconds", "HttpsRedirectionEnabled", "TlsPolicyName"]
    #     attribute_value: 'attributeValue' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateLoadBalancerAttributeOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def update_load_balancer_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateLoadBalancerAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateLoadBalancerAttributeInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateLoadBalancerAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::UpdateLoadBalancerAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateLoadBalancerAttribute,
        stubs: @stubs,
        params_class: Params::UpdateLoadBalancerAttributeOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_load_balancer_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Allows the update of one or more attributes of a database in Amazon Lightsail.</p>
    #          <p>Updates are applied immediately, or in cases where the updates could result in an outage,
    #       are applied during the database's predefined maintenance window.</p>
    #          <p>The <code>update relational database</code> operation supports tag-based access control
    #       via resource tags applied to the resource identified by relationalDatabaseName. For more
    #       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateRelationalDatabaseInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name of your Lightsail database resource to update.</p>
    #
    # @option params [String] :master_user_password
    #   <p>The password for the master user. The password can include any printable ASCII character
    #         except "/", """, or "@".</p>
    #            <p>My<b>SQL</b>
    #            </p>
    #            <p>Constraints: Must contain from 8 to 41 characters.</p>
    #            <p>
    #               <b>PostgreSQL</b>
    #            </p>
    #            <p>Constraints: Must contain from 8 to 128 characters.</p>
    #
    # @option params [Boolean] :rotate_master_user_password
    #   <p>When <code>true</code>, the master user password is changed to a new strong password
    #         generated by Lightsail.</p>
    #            <p>Use the <code>get relational database master user password</code> operation to get the new
    #         password.</p>
    #
    # @option params [String] :preferred_backup_window
    #   <p>The daily time range during which automated backups are created for your database if
    #         automated backups are enabled.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Must be in the <code>hh24:mi-hh24:mi</code> format.</p>
    #                  <p>Example: <code>16:00-16:30</code>
    #                  </p>
    #               </li>
    #               <li>
    #                  <p>Specified in Coordinated Universal Time (UTC).</p>
    #               </li>
    #               <li>
    #                  <p>Must not conflict with the preferred maintenance window.</p>
    #               </li>
    #               <li>
    #                  <p>Must be at least 30 minutes.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :preferred_maintenance_window
    #   <p>The weekly time range during which system maintenance can occur on your database.</p>
    #            <p>The default is a 30-minute window selected at random from an 8-hour block of time for each
    #         AWS Region, occurring on a random day of the week.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.</p>
    #               </li>
    #               <li>
    #                  <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    #               </li>
    #               <li>
    #                  <p>Must be at least 30 minutes.</p>
    #               </li>
    #               <li>
    #                  <p>Specified in Coordinated Universal Time (UTC).</p>
    #               </li>
    #               <li>
    #                  <p>Example: <code>Tue:17:00-Tue:17:30</code>
    #                  </p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :enable_backup_retention
    #   <p>When <code>true</code>, enables automated backup retention for your database.</p>
    #            <p>Updates are applied during the next maintenance window because this can result in an
    #         outage.</p>
    #
    # @option params [Boolean] :disable_backup_retention
    #   <p>When <code>true</code>, disables automated backup retention for your database.</p>
    #            <p>Disabling backup retention deletes all automated database backups. Before disabling this,
    #         you may want to create a snapshot of your database using the <code>create relational database
    #           snapshot</code> operation.</p>
    #            <p>Updates are applied during the next maintenance window because this can result in an
    #         outage.</p>
    #
    # @option params [Boolean] :publicly_accessible
    #   <p>Specifies the accessibility options for your database. A value of <code>true</code>
    #         specifies a database that is available to resources outside of your Lightsail account. A
    #         value of <code>false</code> specifies a database that is available only to your Lightsail
    #         resources in the same region as your database.</p>
    #
    # @option params [Boolean] :apply_immediately
    #   <p>When <code>true</code>, applies changes immediately. When <code>false</code>, applies
    #         changes during the preferred maintenance window. Some changes may cause an outage.</p>
    #            <p>Default: <code>false</code>
    #            </p>
    #
    # @option params [String] :ca_certificate_identifier
    #   <p>Indicates the certificate that needs to be associated with the database.</p>
    #
    # @return [Types::UpdateRelationalDatabaseOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_relational_database(
    #     relational_database_name: 'relationalDatabaseName', # required
    #     master_user_password: 'masterUserPassword',
    #     rotate_master_user_password: false,
    #     preferred_backup_window: 'preferredBackupWindow',
    #     preferred_maintenance_window: 'preferredMaintenanceWindow',
    #     enable_backup_retention: false,
    #     disable_backup_retention: false,
    #     publicly_accessible: false,
    #     apply_immediately: false,
    #     ca_certificate_identifier: 'caCertificateIdentifier'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateRelationalDatabaseOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def update_relational_database(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateRelationalDatabaseInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateRelationalDatabaseInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateRelationalDatabase
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::UpdateRelationalDatabase
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateRelationalDatabase,
        stubs: @stubs,
        params_class: Params::UpdateRelationalDatabaseOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_relational_database
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Allows the update of one or more parameters of a database in Amazon Lightsail.</p>
    #          <p>Parameter updates don't cause outages; therefore, their application is not subject to the
    #       preferred maintenance window. However, there are two ways in which parameter updates are
    #       applied: <code>dynamic</code> or <code>pending-reboot</code>. Parameters marked with a
    #         <code>dynamic</code> apply type are applied immediately. Parameters marked with a
    #         <code>pending-reboot</code> apply type are applied only after the database is rebooted using
    #       the <code>reboot relational database</code> operation.</p>
    #          <p>The <code>update relational database parameters</code> operation supports tag-based access
    #       control via resource tags applied to the resource identified by relationalDatabaseName. For
    #       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateRelationalDatabaseParametersInput}.
    #
    # @option params [String] :relational_database_name
    #   <p>The name of your database for which to update parameters.</p>
    #
    # @option params [Array<RelationalDatabaseParameter>] :parameters
    #   <p>The database parameters to update.</p>
    #
    # @return [Types::UpdateRelationalDatabaseParametersOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_relational_database_parameters(
    #     relational_database_name: 'relationalDatabaseName', # required
    #     parameters: [
    #       {
    #         allowed_values: 'allowedValues',
    #         apply_method: 'applyMethod',
    #         apply_type: 'applyType',
    #         data_type: 'dataType',
    #         description: 'description',
    #         is_modifiable: false,
    #         parameter_name: 'parameterName',
    #         parameter_value: 'parameterValue'
    #       }
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateRelationalDatabaseParametersOutput
    #   resp.data.operations #=> Array<Operation>
    #   resp.data.operations[0] #=> Types::Operation
    #   resp.data.operations[0].id #=> String
    #   resp.data.operations[0].resource_name #=> String
    #   resp.data.operations[0].resource_type #=> String, one of ["ContainerService", "Instance", "StaticIp", "KeyPair", "InstanceSnapshot", "Domain", "PeeredVpc", "LoadBalancer", "LoadBalancerTlsCertificate", "Disk", "DiskSnapshot", "RelationalDatabase", "RelationalDatabaseSnapshot", "ExportSnapshotRecord", "CloudFormationStackRecord", "Alarm", "ContactMethod", "Distribution", "Certificate", "Bucket"]
    #   resp.data.operations[0].created_at #=> Time
    #   resp.data.operations[0].location #=> Types::ResourceLocation
    #   resp.data.operations[0].location.availability_zone #=> String
    #   resp.data.operations[0].location.region_name #=> String, one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "ca-central-1", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ap-northeast-2", "eu-north-1"]
    #   resp.data.operations[0].is_terminal #=> Boolean
    #   resp.data.operations[0].operation_details #=> String
    #   resp.data.operations[0].operation_type #=> String, one of ["DeleteKnownHostKeys", "DeleteInstance", "CreateInstance", "StopInstance", "StartInstance", "RebootInstance", "OpenInstancePublicPorts", "PutInstancePublicPorts", "CloseInstancePublicPorts", "AllocateStaticIp", "ReleaseStaticIp", "AttachStaticIp", "DetachStaticIp", "UpdateDomainEntry", "DeleteDomainEntry", "CreateDomain", "DeleteDomain", "CreateInstanceSnapshot", "DeleteInstanceSnapshot", "CreateInstancesFromSnapshot", "CreateLoadBalancer", "DeleteLoadBalancer", "AttachInstancesToLoadBalancer", "DetachInstancesFromLoadBalancer", "UpdateLoadBalancerAttribute", "CreateLoadBalancerTlsCertificate", "DeleteLoadBalancerTlsCertificate", "AttachLoadBalancerTlsCertificate", "CreateDisk", "DeleteDisk", "AttachDisk", "DetachDisk", "CreateDiskSnapshot", "DeleteDiskSnapshot", "CreateDiskFromSnapshot", "CreateRelationalDatabase", "UpdateRelationalDatabase", "DeleteRelationalDatabase", "CreateRelationalDatabaseFromSnapshot", "CreateRelationalDatabaseSnapshot", "DeleteRelationalDatabaseSnapshot", "UpdateRelationalDatabaseParameters", "StartRelationalDatabase", "RebootRelationalDatabase", "StopRelationalDatabase", "EnableAddOn", "DisableAddOn", "PutAlarm", "GetAlarms", "DeleteAlarm", "TestAlarm", "CreateContactMethod", "GetContactMethods", "SendContactMethodVerification", "DeleteContactMethod", "CreateDistribution", "UpdateDistribution", "DeleteDistribution", "ResetDistributionCache", "AttachCertificateToDistribution", "DetachCertificateFromDistribution", "UpdateDistributionBundle", "SetIpAddressType", "CreateCertificate", "DeleteCertificate", "CreateContainerService", "UpdateContainerService", "DeleteContainerService", "CreateContainerServiceDeployment", "CreateContainerServiceRegistryLogin", "RegisterContainerImage", "DeleteContainerImage", "CreateBucket", "DeleteBucket", "CreateBucketAccessKey", "DeleteBucketAccessKey", "UpdateBucketBundle", "UpdateBucket", "SetResourceAccessForBucket"]
    #   resp.data.operations[0].status #=> String, one of ["NotStarted", "Started", "Failed", "Completed", "Succeeded"]
    #   resp.data.operations[0].status_changed_at #=> Time
    #   resp.data.operations[0].error_code #=> String
    #   resp.data.operations[0].error_details #=> String
    #
    def update_relational_database_parameters(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateRelationalDatabaseParametersInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateRelationalDatabaseParametersInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateRelationalDatabaseParameters
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::OperationFailureException, Errors::ServiceException, Errors::UnauthenticatedException, Errors::InvalidInputException, Errors::AccountSetupInProgressException, Errors::NotFoundException, Errors::AccessDeniedException]),
        data_parser: Parsers::UpdateRelationalDatabaseParameters
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateRelationalDatabaseParameters,
        stubs: @stubs,
        params_class: Params::UpdateRelationalDatabaseParametersOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_relational_database_parameters
        )
      )
      raise resp.error if resp.error
      resp
    end

    private

    def apply_middleware(middleware_stack, middleware)
      Client.middleware.apply(middleware_stack)
      @middleware.apply(middleware_stack)
      Hearth::MiddlewareBuilder.new(middleware).apply(middleware_stack)
    end
  end
end
